
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009518  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08009718  08009718  00019718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d1c  08009d1c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d24  08009d24  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d28  08009d28  00019d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000495c  200001ec  08009f18  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b48  08009f18  00024b48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000206a2  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046b1  00000000  00000000  000408ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  00044fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140d  00000000  00000000  000469a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c7f6  00000000  00000000  00047db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021144  00000000  00000000  000745ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110cba  00000000  00000000  000956ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bbc  00000000  00000000  001a63ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001adf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	08009700 	.word	0x08009700

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	08009700 	.word	0x08009700

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_9;
 8000602:	2309      	movs	r3, #9
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 fbf7 	bl	8001e08 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f000 fd8c 	bl	800113c <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000644:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000674 <setFlowRate+0x44>
 8000648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800064c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000678 <setFlowRate+0x48>
 8000650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000658:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800067c <setFlowRate+0x4c>
 800065c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000660:	eef0 7a66 	vmov.f32	s15, s13

}
 8000664:	eeb0 0a67 	vmov.f32	s0, s15
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	3ca3d70a 	.word	0x3ca3d70a
 8000678:	00000001 	.word	0x00000001
 800067c:	403d7d7d 	.word	0x403d7d7d

08000680 <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
return;
 8000684:	bf00      	nop
}
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <flowStateOpen>:
void flowStateOpen(void){
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
return;
 8000692:	bf00      	nop
}
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <flowStateControl>:
void flowStateControl(void){
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
return;
 80006a0:	bf00      	nop
}
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	; 0x68
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f001 f97a 	bl	80019aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f845 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f99f 	bl	80009fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006be:	f000 f93f 	bl	8000940 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c2:	f000 f96d 	bl	80009a0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006c6:	f000 f8af 	bl	8000828 <MX_ADC1_Init>
  MX_DAC_Init();
 80006ca:	f000 f90f 	bl	80008ec <MX_DAC_Init>

  //dacSet(&hdac, DAC_CHANNEL_1, 2.5);



  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	4814      	ldr	r0, [pc, #80]	; (8000724 <main+0x78>)
 80006d4:	f002 f9cc 	bl	8002a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2102      	movs	r1, #2
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <main+0x78>)
 80006de:	f002 f9c7 	bl	8002a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2104      	movs	r1, #4
 80006e6:	480f      	ldr	r0, [pc, #60]	; (8000724 <main+0x78>)
 80006e8:	f002 f9c2 	bl	8002a70 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006ec:	f005 f834 	bl	8005758 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <main+0x7c>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <main+0x80>)
 80006f6:	f005 f863 	bl	80057c0 <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <main+0x84>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <main+0x88>)
 8000702:	2100      	movs	r1, #0
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <main+0x8c>)
 8000706:	f005 f85b 	bl	80057c0 <osThreadNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <main+0x90>)
 800070e:	6013      	str	r3, [r2, #0]
  osThreadSuspend(sendDataHandle);
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <main+0x90>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f005 f8f9 	bl	800590c <osThreadSuspend>
	  sprintf(msg, "Vacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r\n", volts, vacuumScale);
	  printMsg(msg, &huart3);
	  HAL_Delay(1000);
	*/
	  char msg[100];
	  listenMsg(&huart3);
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <main+0x94>)
 800071c:	f000 fd9a 	bl	8001254 <listenMsg>
  {
 8000720:	e7fb      	b.n	800071a <main+0x6e>
 8000722:	bf00      	nop
 8000724:	40021400 	.word	0x40021400
 8000728:	0800994c 	.word	0x0800994c
 800072c:	08000c09 	.word	0x08000c09
 8000730:	200007f4 	.word	0x200007f4
 8000734:	08009970 	.word	0x08009970
 8000738:	080010ed 	.word	0x080010ed
 800073c:	200007f8 	.word	0x200007f8
 8000740:	20000264 	.word	0x20000264

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f006 ff5f 	bl	8007616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000768:	f002 fae4 	bl	8002d34 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <SystemClock_Config+0xdc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <SystemClock_Config+0xdc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <SystemClock_Config+0xdc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <SystemClock_Config+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078c:	4a25      	ldr	r2, [pc, #148]	; (8000824 <SystemClock_Config+0xe0>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <SystemClock_Config+0xe0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fb11 	bl	8002df4 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 fcb0 	bl	800113c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007dc:	f002 faba 	bl	8002d54 <HAL_PWREx_EnableOverDrive>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007e6:	f000 fca9 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2103      	movs	r1, #3
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fda2 	bl	8003350 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000812:	f000 fc93 	bl	800113c <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_ADC1_Init+0xb8>)
 800083c:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <MX_ADC1_Init+0xbc>)
 800083e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_ADC1_Init+0xb8>)
 8000842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000846:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_ADC1_Init+0xb8>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_ADC1_Init+0xb8>)
 8000850:	2201      	movs	r2, #1
 8000852:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_ADC1_Init+0xb8>)
 8000856:	2201      	movs	r2, #1
 8000858:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_ADC1_Init+0xb8>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ADC1_Init+0xb8>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ADC1_Init+0xb8>)
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <MX_ADC1_Init+0xc0>)
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_ADC1_Init+0xb8>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ADC1_Init+0xb8>)
 8000876:	2202      	movs	r2, #2
 8000878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ADC1_Init+0xb8>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_ADC1_Init+0xb8>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000888:	4815      	ldr	r0, [pc, #84]	; (80008e0 <MX_ADC1_Init+0xb8>)
 800088a:	f001 f8df 	bl	8001a4c <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000894:	f000 fc52 	bl	800113c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000898:	2309      	movs	r3, #9
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089c:	2301      	movs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008a0:	2302      	movs	r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_ADC1_Init+0xb8>)
 80008aa:	f001 faad 	bl	8001e08 <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008b4:	f000 fc42 	bl	800113c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008b8:	2306      	movs	r3, #6
 80008ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008bc:	2302      	movs	r3, #2
 80008be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_ADC1_Init+0xb8>)
 80008ca:	f001 fa9d 	bl	8001e08 <HAL_ADC_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80008d4:	f000 fc32 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000208 	.word	0x20000208
 80008e4:	40012000 	.word	0x40012000
 80008e8:	0f000001 	.word	0x0f000001

080008ec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_DAC_Init+0x4c>)
 80008fc:	4a0f      	ldr	r2, [pc, #60]	; (800093c <MX_DAC_Init+0x50>)
 80008fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_DAC_Init+0x4c>)
 8000902:	f001 fdb3 	bl	800246c <HAL_DAC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800090c:	f000 fc16 	bl	800113c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_DAC_Init+0x4c>)
 8000920:	f001 fea1 	bl	8002666 <HAL_DAC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800092a:	f000 fc07 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000250 	.word	0x20000250
 800093c:	40007400 	.word	0x40007400

08000940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART3_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000984:	f003 fe44 	bl	8004610 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 fbd5 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000264 	.word	0x20000264
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2206      	movs	r2, #6
 80009b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2201      	movs	r2, #1
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	f002 f85d 	bl	8002aa2 <HAL_PCD_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 fba5 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200002ec 	.word	0x200002ec

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b77      	ldr	r3, [pc, #476]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a76      	ldr	r2, [pc, #472]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b74      	ldr	r3, [pc, #464]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2a:	4b71      	ldr	r3, [pc, #452]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a70      	ldr	r2, [pc, #448]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b6e      	ldr	r3, [pc, #440]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0320 	and.w	r3, r3, #32
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b6b      	ldr	r3, [pc, #428]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a6a      	ldr	r2, [pc, #424]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b68      	ldr	r3, [pc, #416]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b65      	ldr	r3, [pc, #404]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a64      	ldr	r2, [pc, #400]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b62      	ldr	r3, [pc, #392]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b5f      	ldr	r3, [pc, #380]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a5e      	ldr	r2, [pc, #376]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b5c      	ldr	r3, [pc, #368]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b59      	ldr	r3, [pc, #356]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a58      	ldr	r2, [pc, #352]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b56      	ldr	r3, [pc, #344]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b53      	ldr	r3, [pc, #332]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a52      	ldr	r2, [pc, #328]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b50      	ldr	r3, [pc, #320]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2107      	movs	r1, #7
 8000abe:	484d      	ldr	r0, [pc, #308]	; (8000bf4 <MX_GPIO_Init+0x1f8>)
 8000ac0:	f001 ffd6 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aca:	484b      	ldr	r0, [pc, #300]	; (8000bf8 <MX_GPIO_Init+0x1fc>)
 8000acc:	f001 ffd0 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	4849      	ldr	r0, [pc, #292]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000ad6:	f001 ffcb 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4843      	ldr	r0, [pc, #268]	; (8000c00 <MX_GPIO_Init+0x204>)
 8000af2:	f001 fe11 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000af6:	2307      	movs	r3, #7
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4839      	ldr	r0, [pc, #228]	; (8000bf4 <MX_GPIO_Init+0x1f8>)
 8000b0e:	f001 fe03 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b12:	2332      	movs	r3, #50	; 0x32
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b22:	230b      	movs	r3, #11
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4834      	ldr	r0, [pc, #208]	; (8000c00 <MX_GPIO_Init+0x204>)
 8000b2e:	f001 fdf3 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b32:	2386      	movs	r3, #134	; 0x86
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b42:	230b      	movs	r3, #11
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	482d      	ldr	r0, [pc, #180]	; (8000c04 <MX_GPIO_Init+0x208>)
 8000b4e:	f001 fde3 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b52:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <MX_GPIO_Init+0x1fc>)
 8000b6c:	f001 fdd4 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <MX_GPIO_Init+0x1fc>)
 8000b8e:	f001 fdc3 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000baa:	f001 fdb5 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000bc2:	f001 fda9 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd8:	230b      	movs	r3, #11
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x200>)
 8000be4:	f001 fd98 	bl	8002718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40021400 	.word	0x40021400
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40021800 	.word	0x40021800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000

08000c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(eNextState) {
 8000c10:	4b94      	ldr	r3, [pc, #592]	; (8000e64 <StartDefaultTask+0x25c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b0d      	cmp	r3, #13
 8000c16:	f200 8236 	bhi.w	8001086 <StartDefaultTask+0x47e>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <StartDefaultTask+0x18>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c59 	.word	0x08000c59
 8000c24:	08000ca3 	.word	0x08000ca3
 8000c28:	08000d09 	.word	0x08000d09
 8000c2c:	08000d83 	.word	0x08000d83
 8000c30:	08000de9 	.word	0x08000de9
 8000c34:	08000ec5 	.word	0x08000ec5
 8000c38:	08000f4d 	.word	0x08000f4d
 8000c3c:	08000fc7 	.word	0x08000fc7
 8000c40:	08000fe7 	.word	0x08000fe7
 8000c44:	08001017 	.word	0x08001017
 8000c48:	08001037 	.word	0x08001037
 8000c4c:	08001067 	.word	0x08001067
 8000c50:	0800108f 	.word	0x0800108f
 8000c54:	0800108f 	.word	0x0800108f
//					LOAD_TEST_INIT,
//					OPERATION_TEST_INIT,
//					ULTIMATE_MEASURE_TEST_INT,

	  				// void listenMsg(int * str, UART_HandleTypeDef *huart2);
	  				sprintf(msg,"STARTING\r\n");
 8000c58:	4983      	ldr	r1, [pc, #524]	; (8000e68 <StartDefaultTask+0x260>)
 8000c5a:	4884      	ldr	r0, [pc, #528]	; (8000e6c <StartDefaultTask+0x264>)
 8000c5c:	f006 fc78 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000c60:	4983      	ldr	r1, [pc, #524]	; (8000e70 <StartDefaultTask+0x268>)
 8000c62:	4882      	ldr	r0, [pc, #520]	; (8000e6c <StartDefaultTask+0x264>)
 8000c64:	f000 fae2 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6c:	f000 feca 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);

					tests[0] = 1;
 8000c70:	4b80      	ldr	r3, [pc, #512]	; (8000e74 <StartDefaultTask+0x26c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
					tests[1] = 3;
 8000c76:	4b7f      	ldr	r3, [pc, #508]	; (8000e74 <StartDefaultTask+0x26c>)
 8000c78:	2203      	movs	r2, #3
 8000c7a:	605a      	str	r2, [r3, #4]
					tests[2] = 5;
 8000c7c:	4b7d      	ldr	r3, [pc, #500]	; (8000e74 <StartDefaultTask+0x26c>)
 8000c7e:	2205      	movs	r2, #5
 8000c80:	609a      	str	r2, [r3, #8]
					tests[3] = 7;
 8000c82:	4b7c      	ldr	r3, [pc, #496]	; (8000e74 <StartDefaultTask+0x26c>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	60da      	str	r2, [r3, #12]
					tests[4] = 9;
 8000c88:	4b7a      	ldr	r3, [pc, #488]	; (8000e74 <StartDefaultTask+0x26c>)
 8000c8a:	2209      	movs	r2, #9
 8000c8c:	611a      	str	r2, [r3, #16]
					tests[5] = 11;
 8000c8e:	4b79      	ldr	r3, [pc, #484]	; (8000e74 <StartDefaultTask+0x26c>)
 8000c90:	220b      	movs	r2, #11
 8000c92:	615a      	str	r2, [r3, #20]

					eNextState = *currentTest;
 8000c94:	4b78      	ldr	r3, [pc, #480]	; (8000e78 <StartDefaultTask+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b71      	ldr	r3, [pc, #452]	; (8000e64 <StartDefaultTask+0x25c>)
 8000c9e:	701a      	strb	r2, [r3, #0]
	  				break;
 8000ca0:	e1f6      	b.n	8001090 <StartDefaultTask+0x488>
//					Task Number One:
//						recieve parameters from GUI
//						Initialization
//						- set timer, target mTorr, assign which pump
//						- open/close solonoids, close flow controller, open stepper motor
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST_INIT\r\n");
 8000ca2:	4976      	ldr	r1, [pc, #472]	; (8000e7c <StartDefaultTask+0x274>)
 8000ca4:	4871      	ldr	r0, [pc, #452]	; (8000e6c <StartDefaultTask+0x264>)
 8000ca6:	f006 fc53 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000caa:	4971      	ldr	r1, [pc, #452]	; (8000e70 <StartDefaultTask+0x268>)
 8000cac:	486f      	ldr	r0, [pc, #444]	; (8000e6c <StartDefaultTask+0x264>)
 8000cae:	f000 fabd 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb6:	f000 fea5 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);

	  				sprintf(msg,"open/close solenoids, close flow controller, open stepper motor\r\n");
 8000cba:	4971      	ldr	r1, [pc, #452]	; (8000e80 <StartDefaultTask+0x278>)
 8000cbc:	486b      	ldr	r0, [pc, #428]	; (8000e6c <StartDefaultTask+0x264>)
 8000cbe:	f006 fc47 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000cc2:	496b      	ldr	r1, [pc, #428]	; (8000e70 <StartDefaultTask+0x268>)
 8000cc4:	4869      	ldr	r0, [pc, #420]	; (8000e6c <StartDefaultTask+0x264>)
 8000cc6:	f000 fab1 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cce:	f000 fe99 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);

	  				flowStateClose();
 8000cd2:	f7ff fcd5 	bl	8000680 <flowStateClose>
	  				stepperOpen();
 8000cd6:	f000 faf6 	bl	80012c6 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000cda:	4b6a      	ldr	r3, [pc, #424]	; (8000e84 <StartDefaultTask+0x27c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a6a      	ldr	r2, [pc, #424]	; (8000e88 <StartDefaultTask+0x280>)
 8000ce0:	8812      	ldrh	r2, [r2, #0]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fad6 	bl	8001296 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000cea:	4b68      	ldr	r3, [pc, #416]	; (8000e8c <StartDefaultTask+0x284>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a68      	ldr	r2, [pc, #416]	; (8000e90 <StartDefaultTask+0x288>)
 8000cf0:	8812      	ldrh	r2, [r2, #0]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fada 	bl	80012ae <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000cfa:	4866      	ldr	r0, [pc, #408]	; (8000e94 <StartDefaultTask+0x28c>)
 8000cfc:	f000 fe0a 	bl	8001914 <vacuumGaugeADC>

	  				eNextState = VAC_ACHIEVMENT_TEST;
 8000d00:	4b58      	ldr	r3, [pc, #352]	; (8000e64 <StartDefaultTask+0x25c>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d06:	e1c3      	b.n	8001090 <StartDefaultTask+0x488>
	  			case VAC_ACHIEVMENT_TEST:
//	  				monitor status
//	  				- mTorr if mTorr = target, shut pump off, success
//	  				- Timer if Timer > set time, shut pump off, failure
//	  				- if success/failure, send data, remove task two&three, move to next state
	  				volts = adcGet(&hadc1);
 8000d08:	4862      	ldr	r0, [pc, #392]	; (8000e94 <StartDefaultTask+0x28c>)
 8000d0a:	f000 fa51 	bl	80011b0 <adcGet>
 8000d0e:	eef0 7a40 	vmov.f32	s15, s0
 8000d12:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <StartDefaultTask+0x290>)
 8000d14:	edc3 7a00 	vstr	s15, [r3]
//	  				vacuumScale = readVacuum(volts);
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST Scanning\r\n");
 8000d18:	4960      	ldr	r1, [pc, #384]	; (8000e9c <StartDefaultTask+0x294>)
 8000d1a:	4854      	ldr	r0, [pc, #336]	; (8000e6c <StartDefaultTask+0x264>)
 8000d1c:	f006 fc18 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000d20:	4953      	ldr	r1, [pc, #332]	; (8000e70 <StartDefaultTask+0x268>)
 8000d22:	4852      	ldr	r0, [pc, #328]	; (8000e6c <StartDefaultTask+0x264>)
 8000d24:	f000 fa82 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2c:	f000 fe6a 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);
	  				//osThreadResume(sendDataHandle);

	  				vacuumScale = 50.0;
 8000d30:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <StartDefaultTask+0x298>)
 8000d32:	4a5c      	ldr	r2, [pc, #368]	; (8000ea4 <StartDefaultTask+0x29c>)
 8000d34:	601a      	str	r2, [r3, #0]
	  				if(vacuumScale >= 50){
 8000d36:	4b5a      	ldr	r3, [pc, #360]	; (8000ea0 <StartDefaultTask+0x298>)
 8000d38:	edd3 7a00 	vldr	s15, [r3]
 8000d3c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000ea8 <StartDefaultTask+0x2a0>
 8000d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	db17      	blt.n	8000d7a <StartDefaultTask+0x172>
		  				sprintf(msg,"vacuum of 50 mTorr reached\r\n");
 8000d4a:	4958      	ldr	r1, [pc, #352]	; (8000eac <StartDefaultTask+0x2a4>)
 8000d4c:	4847      	ldr	r0, [pc, #284]	; (8000e6c <StartDefaultTask+0x264>)
 8000d4e:	f006 fbff 	bl	8007550 <siprintf>
		  				printMsg(msg, &huart3);
 8000d52:	4947      	ldr	r1, [pc, #284]	; (8000e70 <StartDefaultTask+0x268>)
 8000d54:	4845      	ldr	r0, [pc, #276]	; (8000e6c <StartDefaultTask+0x264>)
 8000d56:	f000 fa69 	bl	800122c <printMsg>
		  				HAL_Delay(1000);
 8000d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5e:	f000 fe51 	bl	8001a04 <HAL_Delay>
		  				currentTest++;
 8000d62:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <StartDefaultTask+0x270>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3304      	adds	r3, #4
 8000d68:	4a43      	ldr	r2, [pc, #268]	; (8000e78 <StartDefaultTask+0x270>)
 8000d6a:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000d6c:	4b42      	ldr	r3, [pc, #264]	; (8000e78 <StartDefaultTask+0x270>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <StartDefaultTask+0x25c>)
 8000d76:	701a      	strb	r2, [r3, #0]
	  					eNextState = VAC_ACHIEVMENT_TEST;
	  				}

	  				//osDelay(100);

	  				break;
 8000d78:	e18a      	b.n	8001090 <StartDefaultTask+0x488>
	  					eNextState = VAC_ACHIEVMENT_TEST;
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <StartDefaultTask+0x25c>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d80:	e186      	b.n	8001090 <StartDefaultTask+0x488>

//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor
	  				sprintf(msg,"WARM_UP_INIT\r\n");
 8000d82:	494b      	ldr	r1, [pc, #300]	; (8000eb0 <StartDefaultTask+0x2a8>)
 8000d84:	4839      	ldr	r0, [pc, #228]	; (8000e6c <StartDefaultTask+0x264>)
 8000d86:	f006 fbe3 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000d8a:	4939      	ldr	r1, [pc, #228]	; (8000e70 <StartDefaultTask+0x268>)
 8000d8c:	4837      	ldr	r0, [pc, #220]	; (8000e6c <StartDefaultTask+0x264>)
 8000d8e:	f000 fa4d 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d96:	f000 fe35 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);

	  				sprintf(msg,"open/close solenoids, open flow controller, open stepper motor\r\n");
 8000d9a:	4946      	ldr	r1, [pc, #280]	; (8000eb4 <StartDefaultTask+0x2ac>)
 8000d9c:	4833      	ldr	r0, [pc, #204]	; (8000e6c <StartDefaultTask+0x264>)
 8000d9e:	f006 fbd7 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000da2:	4933      	ldr	r1, [pc, #204]	; (8000e70 <StartDefaultTask+0x268>)
 8000da4:	4831      	ldr	r0, [pc, #196]	; (8000e6c <StartDefaultTask+0x264>)
 8000da6:	f000 fa41 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dae:	f000 fe29 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);

	  				flowStateOpen();
 8000db2:	f7ff fc6c 	bl	800068e <flowStateOpen>
	  				stepperOpen();
 8000db6:	f000 fa86 	bl	80012c6 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <StartDefaultTask+0x27c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a32      	ldr	r2, [pc, #200]	; (8000e88 <StartDefaultTask+0x280>)
 8000dc0:	8812      	ldrh	r2, [r2, #0]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fa66 	bl	8001296 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <StartDefaultTask+0x284>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <StartDefaultTask+0x288>)
 8000dd0:	8812      	ldrh	r2, [r2, #0]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fa6a 	bl	80012ae <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000dda:	482e      	ldr	r0, [pc, #184]	; (8000e94 <StartDefaultTask+0x28c>)
 8000ddc:	f000 fd9a 	bl	8001914 <vacuumGaugeADC>

	  				eNextState = WARM_UP;
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <StartDefaultTask+0x25c>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	701a      	strb	r2, [r3, #0]
	  				break;
 8000de6:	e153      	b.n	8001090 <StartDefaultTask+0x488>
	  			case WARM_UP:
//					- Timer if Timer >= set time, success,
//					- temperature if temp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				float temp = 0;
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
	  				int timer = 3;
 8000dee:	2303      	movs	r3, #3
 8000df0:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"WARM_UP Scanning\r\n");
 8000df2:	4931      	ldr	r1, [pc, #196]	; (8000eb8 <StartDefaultTask+0x2b0>)
 8000df4:	481d      	ldr	r0, [pc, #116]	; (8000e6c <StartDefaultTask+0x264>)
 8000df6:	f006 fbab 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000dfa:	491d      	ldr	r1, [pc, #116]	; (8000e70 <StartDefaultTask+0x268>)
 8000dfc:	481b      	ldr	r0, [pc, #108]	; (8000e6c <StartDefaultTask+0x264>)
 8000dfe:	f000 fa15 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e06:	f000 fdfd 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);
	  				//osThreadResume(sendDataHandle);

	  				if(temp > 100){
 8000e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e0e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000ebc <StartDefaultTask+0x2b4>
 8000e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1a:	dd03      	ble.n	8000e24 <StartDefaultTask+0x21c>
//	  					test failed
	  					eNextState = FAIL_STATE;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <StartDefaultTask+0x25c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	701a      	strb	r2, [r3, #0]
		  				//osThreadSuspend(sendDataHandle);
	  				}else{
	  					eNextState = WARM_UP;
	  				}
	  				//osDelay(250);
	  				break;
 8000e22:	e135      	b.n	8001090 <StartDefaultTask+0x488>
	  				}else if(timer >= 3){
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	dd17      	ble.n	8000e5a <StartDefaultTask+0x252>
		  				sprintf(msg,"Time is up: success\r\n");
 8000e2a:	4925      	ldr	r1, [pc, #148]	; (8000ec0 <StartDefaultTask+0x2b8>)
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <StartDefaultTask+0x264>)
 8000e2e:	f006 fb8f 	bl	8007550 <siprintf>
		  				printMsg(msg, &huart3);
 8000e32:	490f      	ldr	r1, [pc, #60]	; (8000e70 <StartDefaultTask+0x268>)
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <StartDefaultTask+0x264>)
 8000e36:	f000 f9f9 	bl	800122c <printMsg>
		  				HAL_Delay(1000);
 8000e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3e:	f000 fde1 	bl	8001a04 <HAL_Delay>
		  				currentTest++;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <StartDefaultTask+0x270>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3304      	adds	r3, #4
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <StartDefaultTask+0x270>)
 8000e4a:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <StartDefaultTask+0x270>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <StartDefaultTask+0x25c>)
 8000e56:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e58:	e11a      	b.n	8001090 <StartDefaultTask+0x488>
	  					eNextState = WARM_UP;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <StartDefaultTask+0x25c>)
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e60:	e116      	b.n	8001090 <StartDefaultTask+0x488>
 8000e62:	bf00      	nop
 8000e64:	20000814 	.word	0x20000814
 8000e68:	08009734 	.word	0x08009734
 8000e6c:	20000824 	.word	0x20000824
 8000e70:	20000264 	.word	0x20000264
 8000e74:	200007fc 	.word	0x200007fc
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	08009740 	.word	0x08009740
 8000e80:	0800975c 	.word	0x0800975c
 8000e84:	20000004 	.word	0x20000004
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000010 	.word	0x20000010
 8000e94:	20000208 	.word	0x20000208
 8000e98:	20000818 	.word	0x20000818
 8000e9c:	080097a0 	.word	0x080097a0
 8000ea0:	20000820 	.word	0x20000820
 8000ea4:	42480000 	.word	0x42480000
 8000ea8:	42480000 	.word	0x42480000
 8000eac:	080097c0 	.word	0x080097c0
 8000eb0:	080097e0 	.word	0x080097e0
 8000eb4:	080097f0 	.word	0x080097f0
 8000eb8:	08009834 	.word	0x08009834
 8000ebc:	42c80000 	.word	0x42c80000
 8000ec0:	08009848 	.word	0x08009848
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump, flow load
//					- open/close solonoids, control flow controller, open stepper motor

	  				sprintf(msg,"LOAD_TEST_INIT\r\n");
 8000ec4:	4974      	ldr	r1, [pc, #464]	; (8001098 <StartDefaultTask+0x490>)
 8000ec6:	4875      	ldr	r0, [pc, #468]	; (800109c <StartDefaultTask+0x494>)
 8000ec8:	f006 fb42 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000ecc:	4974      	ldr	r1, [pc, #464]	; (80010a0 <StartDefaultTask+0x498>)
 8000ece:	4873      	ldr	r0, [pc, #460]	; (800109c <StartDefaultTask+0x494>)
 8000ed0:	f000 f9ac 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed8:	f000 fd94 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);

	  				sprintf(msg,"open/close solenoids, control flow controller, open stepper motor\r\n");
 8000edc:	4971      	ldr	r1, [pc, #452]	; (80010a4 <StartDefaultTask+0x49c>)
 8000ede:	486f      	ldr	r0, [pc, #444]	; (800109c <StartDefaultTask+0x494>)
 8000ee0:	f006 fb36 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000ee4:	496e      	ldr	r1, [pc, #440]	; (80010a0 <StartDefaultTask+0x498>)
 8000ee6:	486d      	ldr	r0, [pc, #436]	; (800109c <StartDefaultTask+0x494>)
 8000ee8:	f000 f9a0 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f000 fd88 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);

	  				flowStateControl();
 8000ef4:	f7ff fbd2 	bl	800069c <flowStateControl>
	  				dacVolts = setFlowRate(50);
 8000ef8:	2032      	movs	r0, #50	; 0x32
 8000efa:	f7ff fb99 	bl	8000630 <setFlowRate>
 8000efe:	eef0 7a40 	vmov.f32	s15, s0
 8000f02:	4b69      	ldr	r3, [pc, #420]	; (80010a8 <StartDefaultTask+0x4a0>)
 8000f04:	edc3 7a00 	vstr	s15, [r3]
	  				dacSet(&hdac, DAC_CHANNEL_1, dacVolts);
 8000f08:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <StartDefaultTask+0x4a0>)
 8000f0a:	edd3 7a00 	vldr	s15, [r3]
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	2100      	movs	r1, #0
 8000f14:	4865      	ldr	r0, [pc, #404]	; (80010ac <StartDefaultTask+0x4a4>)
 8000f16:	f000 f917 	bl	8001148 <dacSet>

	  				stepperOpen();
 8000f1a:	f000 f9d4 	bl	80012c6 <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000f1e:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <StartDefaultTask+0x4a8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a64      	ldr	r2, [pc, #400]	; (80010b4 <StartDefaultTask+0x4ac>)
 8000f24:	8812      	ldrh	r2, [r2, #0]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f9b4 	bl	8001296 <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000f2e:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <StartDefaultTask+0x4b0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a62      	ldr	r2, [pc, #392]	; (80010bc <StartDefaultTask+0x4b4>)
 8000f34:	8812      	ldrh	r2, [r2, #0]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f9b8 	bl	80012ae <solenoidClose>
	  				flowControllerADC(&hadc1);
 8000f3e:	4860      	ldr	r0, [pc, #384]	; (80010c0 <StartDefaultTask+0x4b8>)
 8000f40:	f7ff fb54 	bl	80005ec <flowControllerADC>

	  				eNextState = LOAD_TEST;
 8000f44:	4b5f      	ldr	r3, [pc, #380]	; (80010c4 <StartDefaultTask+0x4bc>)
 8000f46:	2206      	movs	r2, #6
 8000f48:	701a      	strb	r2, [r3, #0]

	  				break;
 8000f4a:	e0a1      	b.n	8001090 <StartDefaultTask+0x488>
	  			case LOAD_TEST:
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- flow rate < flow load, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				temp = 0;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
	  				timer = 8;
 8000f52:	2308      	movs	r3, #8
 8000f54:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"LOAD_TEST Scanning\r\n");
 8000f56:	495c      	ldr	r1, [pc, #368]	; (80010c8 <StartDefaultTask+0x4c0>)
 8000f58:	4850      	ldr	r0, [pc, #320]	; (800109c <StartDefaultTask+0x494>)
 8000f5a:	f006 faf9 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000f5e:	4950      	ldr	r1, [pc, #320]	; (80010a0 <StartDefaultTask+0x498>)
 8000f60:	484e      	ldr	r0, [pc, #312]	; (800109c <StartDefaultTask+0x494>)
 8000f62:	f000 f963 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6a:	f000 fd4b 	bl	8001a04 <HAL_Delay>
	  				//osDelay(1);
	  				//osThreadResume(sendDataHandle);

	  				if(temp > 100){
 8000f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f72:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80010cc <StartDefaultTask+0x4c4>
 8000f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	dd03      	ble.n	8000f88 <StartDefaultTask+0x380>
//	  					test failed
	  					eNextState = FAIL_STATE;
 8000f80:	4b50      	ldr	r3, [pc, #320]	; (80010c4 <StartDefaultTask+0x4bc>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	701a      	strb	r2, [r3, #0]
	  				}else{
	  					eNextState = LOAD_TEST;
	  				}
	  				//osDelay(250);

	  				break;
 8000f86:	e083      	b.n	8001090 <StartDefaultTask+0x488>
	  				}else if(timer >= 8){
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	dd17      	ble.n	8000fbe <StartDefaultTask+0x3b6>
		  				sprintf(msg,"Time is up: success\r\n");
 8000f8e:	4950      	ldr	r1, [pc, #320]	; (80010d0 <StartDefaultTask+0x4c8>)
 8000f90:	4842      	ldr	r0, [pc, #264]	; (800109c <StartDefaultTask+0x494>)
 8000f92:	f006 fadd 	bl	8007550 <siprintf>
		  				printMsg(msg, &huart3);
 8000f96:	4942      	ldr	r1, [pc, #264]	; (80010a0 <StartDefaultTask+0x498>)
 8000f98:	4840      	ldr	r0, [pc, #256]	; (800109c <StartDefaultTask+0x494>)
 8000f9a:	f000 f947 	bl	800122c <printMsg>
		  				HAL_Delay(1000);
 8000f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa2:	f000 fd2f 	bl	8001a04 <HAL_Delay>
		  				currentTest++;
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <StartDefaultTask+0x4cc>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3304      	adds	r3, #4
 8000fac:	4a49      	ldr	r2, [pc, #292]	; (80010d4 <StartDefaultTask+0x4cc>)
 8000fae:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <StartDefaultTask+0x4cc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <StartDefaultTask+0x4bc>)
 8000fba:	701a      	strb	r2, [r3, #0]
	  				break;
 8000fbc:	e068      	b.n	8001090 <StartDefaultTask+0x488>
	  					eNextState = LOAD_TEST;
 8000fbe:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <StartDefaultTask+0x4bc>)
 8000fc0:	2206      	movs	r2, #6
 8000fc2:	701a      	strb	r2, [r3, #0]
	  				break;
 8000fc4:	e064      	b.n	8001090 <StartDefaultTask+0x488>
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor

	  				sprintf(msg,"OPERATION_TEST_INIT\r\n");
 8000fc6:	4944      	ldr	r1, [pc, #272]	; (80010d8 <StartDefaultTask+0x4d0>)
 8000fc8:	4834      	ldr	r0, [pc, #208]	; (800109c <StartDefaultTask+0x494>)
 8000fca:	f006 fac1 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000fce:	4934      	ldr	r1, [pc, #208]	; (80010a0 <StartDefaultTask+0x498>)
 8000fd0:	4832      	ldr	r0, [pc, #200]	; (800109c <StartDefaultTask+0x494>)
 8000fd2:	f000 f92b 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fda:	f000 fd13 	bl	8001a04 <HAL_Delay>

	  				eNextState = LOAD_TEST;
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <StartDefaultTask+0x4bc>)
 8000fe0:	2206      	movs	r2, #6
 8000fe2:	701a      	strb	r2, [r3, #0]
	  				break;
 8000fe4:	e054      	b.n	8001090 <StartDefaultTask+0x488>
//					monitor status
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state

	  				sprintf(msg,"OPERATION_TEST\r\n");
 8000fe6:	493d      	ldr	r1, [pc, #244]	; (80010dc <StartDefaultTask+0x4d4>)
 8000fe8:	482c      	ldr	r0, [pc, #176]	; (800109c <StartDefaultTask+0x494>)
 8000fea:	f006 fab1 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 8000fee:	492c      	ldr	r1, [pc, #176]	; (80010a0 <StartDefaultTask+0x498>)
 8000ff0:	482a      	ldr	r0, [pc, #168]	; (800109c <StartDefaultTask+0x494>)
 8000ff2:	f000 f91b 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffa:	f000 fd03 	bl	8001a04 <HAL_Delay>

	  				currentTest++;
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <StartDefaultTask+0x4cc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3304      	adds	r3, #4
 8001004:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <StartDefaultTask+0x4cc>)
 8001006:	6013      	str	r3, [r2, #0]
	  				eNextState = *currentTest;
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <StartDefaultTask+0x4cc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <StartDefaultTask+0x4bc>)
 8001012:	701a      	strb	r2, [r3, #0]

	  				break;
 8001014:	e03c      	b.n	8001090 <StartDefaultTask+0x488>
//					Below is proposed design setup for test 18 – 22 where both top inlets of the pump are connected
//					through metal tubing where when one pump goes through a series of test, the opposite solenoid will
//					remain closed.
//					Once Steps 18 –22 are completed, when can move forward with step 23.

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST_INIT\r\n");
 8001016:	4932      	ldr	r1, [pc, #200]	; (80010e0 <StartDefaultTask+0x4d8>)
 8001018:	4820      	ldr	r0, [pc, #128]	; (800109c <StartDefaultTask+0x494>)
 800101a:	f006 fa99 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 800101e:	4920      	ldr	r1, [pc, #128]	; (80010a0 <StartDefaultTask+0x498>)
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <StartDefaultTask+0x494>)
 8001022:	f000 f903 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8001026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102a:	f000 fceb 	bl	8001a04 <HAL_Delay>

	  				eNextState = ULTIMATE_MEASURE_TEST;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <StartDefaultTask+0x4bc>)
 8001030:	220a      	movs	r2, #10
 8001032:	701a      	strb	r2, [r3, #0]

	  				break;
 8001034:	e02c      	b.n	8001090 <StartDefaultTask+0x488>
	  			case ULTIMATE_MEASURE_TEST:

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST\r\n");
 8001036:	492b      	ldr	r1, [pc, #172]	; (80010e4 <StartDefaultTask+0x4dc>)
 8001038:	4818      	ldr	r0, [pc, #96]	; (800109c <StartDefaultTask+0x494>)
 800103a:	f006 fa89 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 800103e:	4918      	ldr	r1, [pc, #96]	; (80010a0 <StartDefaultTask+0x498>)
 8001040:	4816      	ldr	r0, [pc, #88]	; (800109c <StartDefaultTask+0x494>)
 8001042:	f000 f8f3 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104a:	f000 fcdb 	bl	8001a04 <HAL_Delay>

	  				currentTest++;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <StartDefaultTask+0x4cc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3304      	adds	r3, #4
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <StartDefaultTask+0x4cc>)
 8001056:	6013      	str	r3, [r2, #0]
	  				eNextState = *currentTest;
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <StartDefaultTask+0x4cc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <StartDefaultTask+0x4bc>)
 8001062:	701a      	strb	r2, [r3, #0]
	  				break;
 8001064:	e014      	b.n	8001090 <StartDefaultTask+0x488>
	  			case FAIL_STATE:
	  				break;
	  			case IDLE:
	  				sprintf(msg,"IDLE\r\n");
 8001066:	4920      	ldr	r1, [pc, #128]	; (80010e8 <StartDefaultTask+0x4e0>)
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <StartDefaultTask+0x494>)
 800106a:	f006 fa71 	bl	8007550 <siprintf>
	  				printMsg(msg, &huart3);
 800106e:	490c      	ldr	r1, [pc, #48]	; (80010a0 <StartDefaultTask+0x498>)
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <StartDefaultTask+0x494>)
 8001072:	f000 f8db 	bl	800122c <printMsg>
	  				HAL_Delay(1000);
 8001076:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107a:	f000 fcc3 	bl	8001a04 <HAL_Delay>
	  				eNextState = IDLE;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <StartDefaultTask+0x4bc>)
 8001080:	220b      	movs	r2, #11
 8001082:	701a      	strb	r2, [r3, #0]
	  				break;
 8001084:	e004      	b.n	8001090 <StartDefaultTask+0x488>
	  			case STOP:
	  				break;
	  			default:
	  				eNextState = STOP;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <StartDefaultTask+0x4bc>)
 8001088:	220d      	movs	r2, #13
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e000      	b.n	8001090 <StartDefaultTask+0x488>
	  				break;
 800108e:	bf00      	nop
	  }

	  osDelay(100);
 8001090:	2064      	movs	r0, #100	; 0x64
 8001092:	f004 fc6f 	bl	8005974 <osDelay>
	  switch(eNextState) {
 8001096:	e5bb      	b.n	8000c10 <StartDefaultTask+0x8>
 8001098:	08009860 	.word	0x08009860
 800109c:	20000824 	.word	0x20000824
 80010a0:	20000264 	.word	0x20000264
 80010a4:	08009874 	.word	0x08009874
 80010a8:	2000081c 	.word	0x2000081c
 80010ac:	20000250 	.word	0x20000250
 80010b0:	20000004 	.word	0x20000004
 80010b4:	20000008 	.word	0x20000008
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	20000010 	.word	0x20000010
 80010c0:	20000208 	.word	0x20000208
 80010c4:	20000814 	.word	0x20000814
 80010c8:	080098b8 	.word	0x080098b8
 80010cc:	42c80000 	.word	0x42c80000
 80010d0:	08009848 	.word	0x08009848
 80010d4:	20000000 	.word	0x20000000
 80010d8:	080098d0 	.word	0x080098d0
 80010dc:	080098e8 	.word	0x080098e8
 80010e0:	080098fc 	.word	0x080098fc
 80010e4:	0800991c 	.word	0x0800991c
 80010e8:	08009934 	.word	0x08009934

080010ec <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg,"Sending Data");
 80010f4:	4905      	ldr	r1, [pc, #20]	; (800110c <StartTask02+0x20>)
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <StartTask02+0x24>)
 80010f8:	f006 fa2a 	bl	8007550 <siprintf>
	printMsg(msg, &huart3);
 80010fc:	4905      	ldr	r1, [pc, #20]	; (8001114 <StartTask02+0x28>)
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <StartTask02+0x24>)
 8001100:	f000 f894 	bl	800122c <printMsg>
    osDelay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f004 fc35 	bl	8005974 <osDelay>
	sprintf(msg,"Sending Data");
 800110a:	e7f3      	b.n	80010f4 <StartTask02+0x8>
 800110c:	0800993c 	.word	0x0800993c
 8001110:	20000824 	.word	0x20000824
 8001114:	20000264 	.word	0x20000264

08001118 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112a:	f000 fc4b 	bl	80019c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40001000 	.word	0x40001000

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f001 f9a9 	bl	80024b0 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001166:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001198 <dacSet+0x50>
 800116a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800116e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80011a0 <dacSet+0x58>
 8001172:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001176:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800117a:	ee17 2a90 	vmov	r2, s15
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <dacSet+0x60>)
 8001180:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <dacSet+0x60>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f001 fa3c 	bl	8002608 <HAL_DAC_SetValue>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	66666666 	.word	0x66666666
 800119c:	400a6666 	.word	0x400a6666
 80011a0:	00000000 	.word	0x00000000
 80011a4:	40affe00 	.word	0x40affe00
 80011a8:	20000888 	.word	0x20000888
 80011ac:	00000000 	.word	0x00000000

080011b0 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fc8b 	bl	8001ad4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 80011be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fd88 	bl	8001cd8 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 fe10 	bl	8001dee <HAL_ADC_GetValue>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <adcGet+0x70>)
 80011d4:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <adcGet+0x70>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001224 <adcGet+0x74>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ee:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001218 <adcGet+0x68>
 80011f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <adcGet+0x78>)
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fd35 	bl	8001c70 <HAL_ADC_Stop>
	return adcVolts;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <adcGet+0x78>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	ee07 3a90 	vmov	s15, r3
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	66666666 	.word	0x66666666
 800121c:	400a6666 	.word	0x400a6666
 8001220:	2000088c 	.word	0x2000088c
 8001224:	457ff000 	.word	0x457ff000
 8001228:	20000890 	.word	0x20000890

0800122c <printMsg>:
//	//adcVolts =roundf(arr[2] *100.0)/100;
//	adcVolts = arr[2];
//	return adcVolts;
//}

void printMsg(char* str, UART_HandleTypeDef *huart2){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	// sprintf(msg, "Volts: %.2f V\r\n", volts);
	// HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	HAL_UART_Transmit(huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff f852 	bl	80002e0 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	b29a      	uxth	r2, r3
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f003 fa30 	bl	80046ac <HAL_UART_Transmit>
	return;
 800124c:	bf00      	nop
}
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <listenMsg>:
void listenMsg(UART_HandleTypeDef *huart) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b0a2      	sub	sp, #136	; 0x88
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[128]; // Define a buffer size according to your needs
    HAL_UART_Receive(huart, buffer, sizeof(buffer)-1, HAL_MAX_DELAY);
 800125c:	f107 0108 	add.w	r1, r7, #8
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	227f      	movs	r2, #127	; 0x7f
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f003 faa3 	bl	80047b2 <HAL_UART_Receive>
    buffer[sizeof(buffer)-1] = '\0'; // Null-terminate the string
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    // Now you can use buffer as a string
    HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f832 	bl	80002e0 <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	f107 0108 	add.w	r1, r7, #8
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f003 fa0f 	bl	80046ac <HAL_UART_Transmit>

}
 800128e:	bf00      	nop
 8001290:	3788      	adds	r7, #136	; 0x88
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <solenoidOpen>:

void solenoidOpen(GPIO_TypeDef * solenoidGroup, uint16_t solenoidPin){
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 1);	// 3.3 V
	return;
 80012a2:	bf00      	nop
}
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <solenoidClose>:
void solenoidClose(GPIO_TypeDef * solenoidGroup, uint16_t solenoidPin){
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	807b      	strh	r3, [r7, #2]

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 0);	// gnd
	return;
 80012ba:	bf00      	nop
}
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <stepperOpen>:
// Public Functions		------------------------------------------------//

void stepperClose(){
}

void stepperOpen(){
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <HAL_MspInit+0x4c>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_MspInit+0x4c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	210f      	movs	r1, #15
 800130e:	f06f 0001 	mvn.w	r0, #1
 8001312:	f001 f881 	bl	8002418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800

08001324 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <HAL_ADC_MspInit+0xa4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d13b      	bne.n	80013be <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a20      	ldr	r2, [pc, #128]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_ADC_MspInit+0xa8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800138e:	2360      	movs	r3, #96	; 0x60
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001392:	2303      	movs	r3, #3
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480b      	ldr	r0, [pc, #44]	; (80013d0 <HAL_ADC_MspInit+0xac>)
 80013a2:	f001 f9b9 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013a6:	2302      	movs	r3, #2
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <HAL_ADC_MspInit+0xb0>)
 80013ba:	f001 f9ad 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40012000 	.word	0x40012000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_DAC_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12b      	bne.n	8001452 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_DAC_MspInit+0x88>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_DAC_MspInit+0x88>)
 8001400:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_DAC_MspInit+0x88>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_DAC_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_DAC_MspInit+0x88>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_DAC_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800142a:	2310      	movs	r3, #16
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <HAL_DAC_MspInit+0x8c>)
 800143e:	f001 f96b 	bl	8002718 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	210f      	movs	r1, #15
 8001446:	2036      	movs	r0, #54	; 0x36
 8001448:	f000 ffe6 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800144c:	2036      	movs	r0, #54	; 0x36
 800144e:	f000 ffff 	bl	8002450 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40007400 	.word	0x40007400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000

08001468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0ae      	sub	sp, #184	; 0xb8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2290      	movs	r2, #144	; 0x90
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f006 f8c4 	bl	8007616 <memset>
  if(huart->Instance==USART3)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a22      	ldr	r2, [pc, #136]	; (800151c <HAL_UART_MspInit+0xb4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d13c      	bne.n	8001512 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800149e:	2300      	movs	r3, #0
 80014a0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 f9aa 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014b2:	f7ff fe43 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_MspInit+0xb8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001500:	2307      	movs	r3, #7
 8001502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001506:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_UART_MspInit+0xbc>)
 800150e:	f001 f903 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	37b8      	adds	r7, #184	; 0xb8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40004800 	.word	0x40004800
 8001520:	40023800 	.word	0x40023800
 8001524:	40020c00 	.word	0x40020c00

08001528 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ae      	sub	sp, #184	; 0xb8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2290      	movs	r2, #144	; 0x90
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f006 f864 	bl	8007616 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001556:	d159      	bne.n	800160c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001558:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800155c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4618      	mov	r0, r3
 800156a:	f002 f949 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001574:	f7ff fde2 	bl	800113c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_PCD_MspInit+0xec>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a25      	ldr	r2, [pc, #148]	; (8001614 <HAL_PCD_MspInit+0xec>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <HAL_PCD_MspInit+0xec>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001590:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015aa:	230a      	movs	r3, #10
 80015ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4818      	ldr	r0, [pc, #96]	; (8001618 <HAL_PCD_MspInit+0xf0>)
 80015b8:	f001 f8ae 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <HAL_PCD_MspInit+0xf0>)
 80015d8:	f001 f89e 	bl	8002718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_PCD_MspInit+0xec>)
 80015de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e0:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_PCD_MspInit+0xec>)
 80015e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e6:	6353      	str	r3, [r2, #52]	; 0x34
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_PCD_MspInit+0xec>)
 80015ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_PCD_MspInit+0xec>)
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_PCD_MspInit+0xec>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <HAL_PCD_MspInit+0xec>)
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	37b8      	adds	r7, #184	; 0xb8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	40020000 	.word	0x40020000

0800161c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	; 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800162c:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_InitTick+0xe0>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a32      	ldr	r2, [pc, #200]	; (80016fc <HAL_InitTick+0xe0>)
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_InitTick+0xe0>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001644:	f107 0210 	add.w	r2, r7, #16
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f002 f8a4 	bl	800379c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800165e:	f002 f875 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8001662:	6378      	str	r0, [r7, #52]	; 0x34
 8001664:	e004      	b.n	8001670 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001666:	f002 f871 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 800166a:	4603      	mov	r3, r0
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001672:	4a23      	ldr	r2, [pc, #140]	; (8001700 <HAL_InitTick+0xe4>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9b      	lsrs	r3, r3, #18
 800167a:	3b01      	subs	r3, #1
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_InitTick+0xe8>)
 8001680:	4a21      	ldr	r2, [pc, #132]	; (8001708 <HAL_InitTick+0xec>)
 8001682:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_InitTick+0xe8>)
 8001686:	f240 32e7 	movw	r2, #999	; 0x3e7
 800168a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_InitTick+0xe8>)
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_InitTick+0xe8>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_InitTick+0xe8>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_InitTick+0xe8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016a4:	4817      	ldr	r0, [pc, #92]	; (8001704 <HAL_InitTick+0xe8>)
 80016a6:	f002 fcd3 	bl	8004050 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d11b      	bne.n	80016f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016b8:	4812      	ldr	r0, [pc, #72]	; (8001704 <HAL_InitTick+0xe8>)
 80016ba:	f002 fd2b 	bl	8004114 <HAL_TIM_Base_Start_IT>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d111      	bne.n	80016f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016cc:	2036      	movs	r0, #54	; 0x36
 80016ce:	f000 febf 	bl	8002450 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d808      	bhi.n	80016ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	2036      	movs	r0, #54	; 0x36
 80016de:	f000 fe9b 	bl	8002418 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_InitTick+0xf0>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e002      	b.n	80016f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3738      	adds	r7, #56	; 0x38
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	431bde83 	.word	0x431bde83
 8001704:	20000894 	.word	0x20000894
 8001708:	40001000 	.word	0x40001000
 800170c:	20000018 	.word	0x20000018

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <TIM6_DAC_IRQHandler+0x20>)
 8001742:	791b      	ldrb	r3, [r3, #4]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800174a:	4804      	ldr	r0, [pc, #16]	; (800175c <TIM6_DAC_IRQHandler+0x20>)
 800174c:	f000 ff02 	bl	8002554 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <TIM6_DAC_IRQHandler+0x24>)
 8001752:	f002 fd57 	bl	8004204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000250 	.word	0x20000250
 8001760:	20000894 	.word	0x20000894

08001764 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return 1;
 8001768:	2301      	movs	r3, #1
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_kill>:

int _kill(int pid, int sig)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800177e:	f005 ff9d 	bl	80076bc <__errno>
 8001782:	4603      	mov	r3, r0
 8001784:	2216      	movs	r2, #22
 8001786:	601a      	str	r2, [r3, #0]
  return -1;
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_exit>:

void _exit (int status)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ffe7 	bl	8001774 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017a6:	e7fe      	b.n	80017a6 <_exit+0x12>

080017a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e00a      	b.n	80017d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ba:	f3af 8000 	nop.w
 80017be:	4601      	mov	r1, r0
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	b2ca      	uxtb	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dbf0      	blt.n	80017ba <_read+0x12>
  }

  return len;
 80017d8:	687b      	ldr	r3, [r7, #4]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e009      	b.n	8001808 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf1      	blt.n	80017f4 <_write+0x12>
  }
  return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_close>:

int _close(int file)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001842:	605a      	str	r2, [r3, #4]
  return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_isatty>:

int _isatty(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <_sbrk+0x5c>)
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <_sbrk+0x60>)
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <_sbrk+0x64>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_sbrk+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b4:	f005 ff02 	bl	80076bc <__errno>
 80018b8:	4603      	mov	r3, r0
 80018ba:	220c      	movs	r2, #12
 80018bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	e009      	b.n	80018d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_sbrk+0x64>)
 80018d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20080000 	.word	0x20080000
 80018e4:	00000400 	.word	0x00000400
 80018e8:	200008e0 	.word	0x200008e0
 80018ec:	20004b48 	.word	0x20004b48

080018f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 800192a:	2306      	movs	r3, #6
 800192c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800192e:	2301      	movs	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001932:	2301      	movs	r3, #1
 8001934:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 fa63 	bl	8001e08 <HAL_ADC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 8001948:	f7ff fbf8 	bl	800113c <Error_Handler>
	}
	return;
 800194c:	bf00      	nop
 800194e:	bf00      	nop
}
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800195e:	490e      	ldr	r1, [pc, #56]	; (8001998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001974:	4c0b      	ldr	r4, [pc, #44]	; (80019a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001982:	f7ff ffb5 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f005 fe9f 	bl	80076c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198a:	f7fe fe8f 	bl	80006ac <main>
  bx  lr    
 800198e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001990:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800199c:	08009d2c 	.word	0x08009d2c
  ldr r2, =_sbss
 80019a0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80019a4:	20004b48 	.word	0x20004b48

080019a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC_IRQHandler>

080019aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ae:	2003      	movs	r0, #3
 80019b0:	f000 fd27 	bl	8002402 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b4:	200f      	movs	r0, #15
 80019b6:	f7ff fe31 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ba:	f7ff fc8b 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2000001c 	.word	0x2000001c
 80019e8:	200008e4 	.word	0x200008e4

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200008e4 	.word	0x200008e4

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000001c 	.word	0x2000001c

08001a4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e031      	b.n	8001ac6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fc5a 	bl	8001324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d116      	bne.n	8001ab8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_ADC_Init+0x84>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	f043 0202 	orr.w	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fb0a 	bl	80020b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab6:	e001      	b.n	8001abc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	ffffeefd 	.word	0xffffeefd

08001ad4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Start+0x1a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e0ad      	b.n	8001c4a <HAL_ADC_Start+0x176>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d018      	beq.n	8001b36 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_ADC_Start+0x184>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <HAL_ADC_Start+0x188>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0c9a      	lsrs	r2, r3, #18
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b28:	e002      	b.n	8001b30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d175      	bne.n	8001c30 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b48:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <HAL_ADC_Start+0x18c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7e:	d106      	bne.n	8001b8e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	f023 0206 	bic.w	r2, r3, #6
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b8c:	e002      	b.n	8001b94 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ba4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_ADC_Start+0x190>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d143      	bne.n	8001c48 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	e03a      	b.n	8001c48 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a24      	ldr	r2, [pc, #144]	; (8001c68 <HAL_ADC_Start+0x194>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d10e      	bne.n	8001bfa <HAL_ADC_Start+0x126>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bf8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_ADC_Start+0x190>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d120      	bne.n	8001c48 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <HAL_ADC_Start+0x198>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d11b      	bne.n	8001c48 <HAL_ADC_Start+0x174>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d114      	bne.n	8001c48 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	e00b      	b.n	8001c48 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f043 0210 	orr.w	r2, r3, #16
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000014 	.word	0x20000014
 8001c5c:	431bde83 	.word	0x431bde83
 8001c60:	fffff8fe 	.word	0xfffff8fe
 8001c64:	40012300 	.word	0x40012300
 8001c68:	40012000 	.word	0x40012000
 8001c6c:	40012200 	.word	0x40012200

08001c70 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_Stop+0x16>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e01f      	b.n	8001cc6 <HAL_ADC_Stop+0x56>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_ADC_Stop+0x64>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	ffffeefe 	.word	0xffffeefe

08001cd8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf4:	d113      	bne.n	8001d1e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d04:	d10b      	bne.n	8001d1e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f043 0220 	orr.w	r2, r3, #32
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e063      	b.n	8001de6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d1e:	f7ff fe65 	bl	80019ec <HAL_GetTick>
 8001d22:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d24:	e021      	b.n	8001d6a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d01d      	beq.n	8001d6a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_ADC_PollForConversion+0x6c>
 8001d34:	f7ff fe5a 	bl	80019ec <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d212      	bcs.n	8001d6a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d00b      	beq.n	8001d6a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0204 	orr.w	r2, r3, #4
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e03d      	b.n	8001de6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d1d6      	bne.n	8001d26 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0212 	mvn.w	r2, #18
 8001d80:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d123      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11f      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d111      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1c>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e136      	b.n	8002092 <HAL_ADC_ConfigChannel+0x28a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b09      	cmp	r3, #9
 8001e32:	d93a      	bls.n	8001eaa <HAL_ADC_ConfigChannel+0xa2>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e3c:	d035      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68d9      	ldr	r1, [r3, #12]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	3b1e      	subs	r3, #30
 8001e54:	2207      	movs	r2, #7
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	400a      	ands	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a8d      	ldr	r2, [pc, #564]	; (80020a0 <HAL_ADC_ConfigChannel+0x298>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10a      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68d9      	ldr	r1, [r3, #12]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	061a      	lsls	r2, r3, #24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e82:	e035      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68d9      	ldr	r1, [r3, #12]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4403      	add	r3, r0
 8001e9c:	3b1e      	subs	r3, #30
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea8:	e022      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6919      	ldr	r1, [r3, #16]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	400a      	ands	r2, r1
 8001ecc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4403      	add	r3, r0
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d824      	bhi.n	8001f42 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b05      	subs	r3, #5
 8001f0a:	221f      	movs	r2, #31
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b05      	subs	r3, #5
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f40:	e04c      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d824      	bhi.n	8001f94 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b23      	subs	r3, #35	; 0x23
 8001f5c:	221f      	movs	r2, #31
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b23      	subs	r3, #35	; 0x23
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
 8001f92:	e023      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b41      	subs	r3, #65	; 0x41
 8001fa6:	221f      	movs	r2, #31
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b41      	subs	r3, #65	; 0x41
 8001fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a30      	ldr	r2, [pc, #192]	; (80020a4 <HAL_ADC_ConfigChannel+0x29c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10a      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1f4>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ffa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_ADC_ConfigChannel+0x29c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10f      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x21e>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b12      	cmp	r3, #18
 800200c:	d10b      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002014:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002018:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002024:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_ADC_ConfigChannel+0x29c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d12b      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_ADC_ConfigChannel+0x298>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <HAL_ADC_ConfigChannel+0x23a>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b11      	cmp	r3, #17
 8002040:	d122      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002048:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800204c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002058:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_ADC_ConfigChannel+0x298>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d111      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_ADC_ConfigChannel+0x2a4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0c9a      	lsrs	r2, r3, #18
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800207a:	e002      	b.n	8002082 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3b01      	subs	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	10000012 	.word	0x10000012
 80020a4:	40012000 	.word	0x40012000
 80020a8:	40012300 	.word	0x40012300
 80020ac:	20000014 	.word	0x20000014
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020bc:	4b78      	ldr	r3, [pc, #480]	; (80022a0 <ADC_Init+0x1ec>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a77      	ldr	r2, [pc, #476]	; (80022a0 <ADC_Init+0x1ec>)
 80020c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020c8:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <ADC_Init+0x1ec>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4973      	ldr	r1, [pc, #460]	; (80022a0 <ADC_Init+0x1ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6899      	ldr	r1, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <ADC_Init+0x1f0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002156:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	e00f      	b.n	80021ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800219c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0202 	bic.w	r2, r2, #2
 80021bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	005a      	lsls	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	3b01      	subs	r3, #1
 8002208:	035a      	lsls	r2, r3, #13
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	e007      	b.n	8002224 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002222:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	3b01      	subs	r3, #1
 8002240:	051a      	lsls	r2, r3, #20
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002266:	025a      	lsls	r2, r3, #9
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	029a      	lsls	r2, r3, #10
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40012300 	.word	0x40012300
 80022a4:	0f000001 	.word	0x0f000001

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <__NVIC_SetPriorityGrouping+0x40>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <__NVIC_SetPriorityGrouping+0x40>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	05fa0000 	.word	0x05fa0000

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff4c 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242a:	f7ff ff61 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 800242e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f7ff ffb1 	bl	800239c <NVIC_EncodePriority>
 800243a:	4602      	mov	r2, r0
 800243c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff80 	bl	8002348 <__NVIC_SetPriority>
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff54 	bl	800230c <__NVIC_EnableIRQ>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e014      	b.n	80024a8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	791b      	ldrb	r3, [r3, #4]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe ffa2 	bl	80013d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	795b      	ldrb	r3, [r3, #5]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_DAC_Start+0x16>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e040      	b.n	8002548 <HAL_DAC_Start+0x98>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6819      	ldr	r1, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2201      	movs	r2, #1
 80024e0:	409a      	lsls	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10f      	bne.n	8002510 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80024fa:	2b3c      	cmp	r3, #60	; 0x3c
 80024fc:	d11d      	bne.n	800253a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e014      	b.n	800253a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	213c      	movs	r1, #60	; 0x3c
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	429a      	cmp	r2, r3
 8002528:	d107      	bne.n	800253a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0202 	orr.w	r2, r2, #2
 8002538:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	d120      	bne.n	80025ae <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257a:	d118      	bne.n	80025ae <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2204      	movs	r2, #4
 8002580:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025a6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f852 	bl	8002652 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025bc:	d120      	bne.n	8002600 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025cc:	d118      	bne.n	8002600 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2204      	movs	r2, #4
 80025d2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f043 0202 	orr.w	r2, r3, #2
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f882 	bl	8002704 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	3308      	adds	r3, #8
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e004      	b.n	800263c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	3314      	adds	r3, #20
 800263a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002666:	b480      	push	{r7}
 8002668:	b087      	sub	sp, #28
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	795b      	ldrb	r3, [r3, #5]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_DAC_ConfigChannel+0x18>
 800267a:	2302      	movs	r3, #2
 800267c:	e03c      	b.n	80026f8 <HAL_DAC_ConfigChannel+0x92>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2202      	movs	r2, #2
 8002688:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	f640 72fe 	movw	r2, #4094	; 0xffe
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4013      	ands	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	22c0      	movs	r2, #192	; 0xc0
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e175      	b.n	8002a24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8164 	bne.w	8002a1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d005      	beq.n	800276e <HAL_GPIO_Init+0x56>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d130      	bne.n	80027d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0201 	and.w	r2, r3, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d017      	beq.n	800280c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80be 	beq.w	8002a1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_GPIO_Init+0x324>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a65      	ldr	r2, [pc, #404]	; (8002a3c <HAL_GPIO_Init+0x324>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b63      	ldr	r3, [pc, #396]	; (8002a3c <HAL_GPIO_Init+0x324>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ba:	4a61      	ldr	r2, [pc, #388]	; (8002a40 <HAL_GPIO_Init+0x328>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a58      	ldr	r2, [pc, #352]	; (8002a44 <HAL_GPIO_Init+0x32c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d037      	beq.n	8002956 <HAL_GPIO_Init+0x23e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <HAL_GPIO_Init+0x330>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d031      	beq.n	8002952 <HAL_GPIO_Init+0x23a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a56      	ldr	r2, [pc, #344]	; (8002a4c <HAL_GPIO_Init+0x334>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02b      	beq.n	800294e <HAL_GPIO_Init+0x236>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a55      	ldr	r2, [pc, #340]	; (8002a50 <HAL_GPIO_Init+0x338>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x232>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a54      	ldr	r2, [pc, #336]	; (8002a54 <HAL_GPIO_Init+0x33c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x22e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a53      	ldr	r2, [pc, #332]	; (8002a58 <HAL_GPIO_Init+0x340>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x22a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_GPIO_Init+0x344>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x226>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <HAL_GPIO_Init+0x348>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x222>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a50      	ldr	r2, [pc, #320]	; (8002a64 <HAL_GPIO_Init+0x34c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x21e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4f      	ldr	r2, [pc, #316]	; (8002a68 <HAL_GPIO_Init+0x350>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x21a>
 800292e:	2309      	movs	r3, #9
 8002930:	e012      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002932:	230a      	movs	r3, #10
 8002934:	e010      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002936:	2308      	movs	r3, #8
 8002938:	e00e      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800293a:	2307      	movs	r3, #7
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800293e:	2306      	movs	r3, #6
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002968:	4935      	ldr	r1, [pc, #212]	; (8002a40 <HAL_GPIO_Init+0x328>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_GPIO_Init+0x354>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299a:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <HAL_GPIO_Init+0x354>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c4:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ca:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ee:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_GPIO_Init+0x354>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_GPIO_Init+0x354>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f ae86 	bls.w	8002738 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40021c00 	.word	0x40021c00
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40022400 	.word	0x40022400
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa4:	b08f      	sub	sp, #60	; 0x3c
 8002aa6:	af0a      	add	r7, sp, #40	; 0x28
 8002aa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e116      	b.n	8002ce2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fd2a 	bl	8001528 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 fb94 	bl	8005220 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	687e      	ldr	r6, [r7, #4]
 8002b00:	466d      	mov	r5, sp
 8002b02:	f106 0410 	add.w	r4, r6, #16
 8002b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b12:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b16:	1d33      	adds	r3, r6, #4
 8002b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b1a:	6838      	ldr	r0, [r7, #0]
 8002b1c:	f002 fb28 	bl	8005170 <USB_CoreInit>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0d7      	b.n	8002ce2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fb82 	bl	8005242 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e04a      	b.n	8002bda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	333d      	adds	r3, #61	; 0x3d
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	333c      	adds	r3, #60	; 0x3c
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	b298      	uxth	r0, r3
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3344      	adds	r3, #68	; 0x44
 8002b80:	4602      	mov	r2, r0
 8002b82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3340      	adds	r3, #64	; 0x40
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3348      	adds	r3, #72	; 0x48
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	334c      	adds	r3, #76	; 0x4c
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3354      	adds	r3, #84	; 0x54
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3af      	bcc.n	8002b44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e044      	b.n	8002c74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	3301      	adds	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d3b5      	bcc.n	8002bea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	687e      	ldr	r6, [r7, #4]
 8002c86:	466d      	mov	r5, sp
 8002c88:	f106 0410 	add.w	r4, r6, #16
 8002c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c98:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c9c:	1d33      	adds	r3, r6, #4
 8002c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca0:	6838      	ldr	r0, [r7, #0]
 8002ca2:	f002 fb1b 	bl	80052dc <USB_DevInit>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e014      	b.n	8002ce2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f80b 	bl	8002cec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 fcd9 	bl	8005692 <USB_DevDisconnect>

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002cec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	10000003 	.word	0x10000003

08002d34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40007000 	.word	0x40007000

08002d54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_PWREx_EnableOverDrive+0x98>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_PWREx_EnableOverDrive+0x98>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_PWREx_EnableOverDrive+0x98>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d82:	f7fe fe33 	bl	80019ec <HAL_GetTick>
 8002d86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d88:	e009      	b.n	8002d9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d8a:	f7fe fe2f 	bl	80019ec <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d98:	d901      	bls.n	8002d9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e022      	b.n	8002de4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d1ee      	bne.n	8002d8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db8:	f7fe fe18 	bl	80019ec <HAL_GetTick>
 8002dbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dbe:	e009      	b.n	8002dd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dc0:	f7fe fe14 	bl	80019ec <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dce:	d901      	bls.n	8002dd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e007      	b.n	8002de4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002de0:	d1ee      	bne.n	8002dc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e29b      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8087 	beq.w	8002f26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e18:	4b96      	ldr	r3, [pc, #600]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d00c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e24:	4b93      	ldr	r3, [pc, #588]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d112      	bne.n	8002e56 <HAL_RCC_OscConfig+0x62>
 8002e30:	4b90      	ldr	r3, [pc, #576]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3c:	d10b      	bne.n	8002e56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3e:	4b8d      	ldr	r3, [pc, #564]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x130>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d168      	bne.n	8002f24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e275      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x7a>
 8002e60:	4b84      	ldr	r3, [pc, #528]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a83      	ldr	r2, [pc, #524]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e02e      	b.n	8002ecc <HAL_RCC_OscConfig+0xd8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x9c>
 8002e76:	4b7f      	ldr	r3, [pc, #508]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b7c      	ldr	r3, [pc, #496]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7b      	ldr	r2, [pc, #492]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xd8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xc0>
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a75      	ldr	r2, [pc, #468]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b73      	ldr	r3, [pc, #460]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a72      	ldr	r2, [pc, #456]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xd8>
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6b      	ldr	r2, [pc, #428]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fd8a 	bl	80019ec <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fd86 	bl	80019ec <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e229      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b61      	ldr	r3, [pc, #388]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xe8>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fd76 	bl	80019ec <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe fd72 	bl	80019ec <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e215      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b57      	ldr	r3, [pc, #348]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x110>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d069      	beq.n	8003006 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f32:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b4d      	ldr	r3, [pc, #308]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x190>
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x17a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1e9      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	493d      	ldr	r1, [pc, #244]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e040      	b.n	8003006 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d023      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a38      	ldr	r2, [pc, #224]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fd28 	bl	80019ec <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fd24 	bl	80019ec <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1c7      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb2:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4929      	ldr	r1, [pc, #164]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
 8002fd2:	e018      	b.n	8003006 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a26      	ldr	r2, [pc, #152]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fd04 	bl	80019ec <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fd00 	bl	80019ec <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1a3      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d038      	beq.n	8003084 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d019      	beq.n	800304e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 800301c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7fe fce1 	bl	80019ec <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302e:	f7fe fcdd 	bl	80019ec <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e180      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x23a>
 800304c:	e01a      	b.n	8003084 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_RCC_OscConfig+0x280>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe fcc7 	bl	80019ec <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe fcc3 	bl	80019ec <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d903      	bls.n	8003078 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e166      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
 8003074:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	4b92      	ldr	r3, [pc, #584]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ee      	bne.n	8003062 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a4 	beq.w	80031da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b8c      	ldr	r3, [pc, #560]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10d      	bne.n	80030ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4a88      	ldr	r2, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b86      	ldr	r3, [pc, #536]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ba:	4b83      	ldr	r3, [pc, #524]	; (80032c8 <HAL_RCC_OscConfig+0x4d4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030c6:	4b80      	ldr	r3, [pc, #512]	; (80032c8 <HAL_RCC_OscConfig+0x4d4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a7f      	ldr	r2, [pc, #508]	; (80032c8 <HAL_RCC_OscConfig+0x4d4>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fe fc8b 	bl	80019ec <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe fc87 	bl	80019ec <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b64      	cmp	r3, #100	; 0x64
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e12a      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ec:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x4d4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x31a>
 8003100:	4b70      	ldr	r3, [pc, #448]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a6f      	ldr	r2, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	e02d      	b.n	800316a <HAL_RCC_OscConfig+0x376>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x33c>
 8003116:	4b6b      	ldr	r3, [pc, #428]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a6a      	ldr	r2, [pc, #424]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	4b68      	ldr	r3, [pc, #416]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a67      	ldr	r2, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	e01c      	b.n	800316a <HAL_RCC_OscConfig+0x376>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b05      	cmp	r3, #5
 8003136:	d10c      	bne.n	8003152 <HAL_RCC_OscConfig+0x35e>
 8003138:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a61      	ldr	r2, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
 8003144:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	4a5e      	ldr	r2, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6713      	str	r3, [r2, #112]	; 0x70
 8003150:	e00b      	b.n	800316a <HAL_RCC_OscConfig+0x376>
 8003152:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a5b      	ldr	r2, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	4b59      	ldr	r3, [pc, #356]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d015      	beq.n	800319e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003172:	f7fe fc3b 	bl	80019ec <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fe fc37 	bl	80019ec <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0d8      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003190:	4b4c      	ldr	r3, [pc, #304]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ee      	beq.n	800317a <HAL_RCC_OscConfig+0x386>
 800319c:	e014      	b.n	80031c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fe fc25 	bl	80019ec <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe fc21 	bl	80019ec <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0c2      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ee      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80ae 	beq.w	8003340 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e4:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d06d      	beq.n	80032cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d14b      	bne.n	8003290 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80031fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fbf2 	bl	80019ec <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fbee 	bl	80019ec <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e091      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	3b01      	subs	r3, #1
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	071b      	lsls	r3, r3, #28
 8003256:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fbc0 	bl	80019ec <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fbbc 	bl	80019ec <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e05f      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x47c>
 800328e:	e057      	b.n	8003340 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 8003296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800329a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fba6 	bl	80019ec <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe fba2 	bl	80019ec <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e045      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4b0>
 80032c2:	e03d      	b.n	8003340 <HAL_RCC_OscConfig+0x54c>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032cc:	4b1f      	ldr	r3, [pc, #124]	; (800334c <HAL_RCC_OscConfig+0x558>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d030      	beq.n	800333c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d129      	bne.n	800333c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d122      	bne.n	800333c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003302:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003304:	4293      	cmp	r3, r2
 8003306:	d119      	bne.n	800333c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	3b01      	subs	r3, #1
 8003316:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d10f      	bne.n	800333c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d107      	bne.n	800333c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800

08003350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0d0      	b.n	800350a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d910      	bls.n	8003398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b67      	ldr	r3, [pc, #412]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4965      	ldr	r1, [pc, #404]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b63      	ldr	r3, [pc, #396]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b8      	b.n	800350a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80033b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80033ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	494d      	ldr	r1, [pc, #308]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d040      	beq.n	8003474 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d115      	bne.n	8003432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b41      	ldr	r3, [pc, #260]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e073      	b.n	800350a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e06b      	b.n	800350a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003432:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4936      	ldr	r1, [pc, #216]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	4313      	orrs	r3, r2
 8003442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003444:	f7fe fad2 	bl	80019ec <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e00a      	b.n	8003462 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7fe face 	bl	80019ec <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e053      	b.n	800350a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 020c 	and.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1eb      	bne.n	800344c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d210      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 020f 	bic.w	r2, r3, #15
 800348a:	4922      	ldr	r1, [pc, #136]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e032      	b.n	800350a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4916      	ldr	r1, [pc, #88]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e2:	f000 f821 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	490a      	ldr	r1, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x1cc>)
 80034f4:	5ccb      	ldrb	r3, [r1, r3]
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <HAL_RCC_ClockConfig+0x1d0>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1d4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe f88a 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00
 8003518:	40023800 	.word	0x40023800
 800351c:	08009994 	.word	0x08009994
 8003520:	20000014 	.word	0x20000014
 8003524:	20000018 	.word	0x20000018

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b094      	sub	sp, #80	; 0x50
 800352e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
 8003534:	2300      	movs	r3, #0
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003538:	2300      	movs	r3, #0
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003540:	4b79      	ldr	r3, [pc, #484]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d00d      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x40>
 800354c:	2b08      	cmp	r3, #8
 800354e:	f200 80e1 	bhi.w	8003714 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x34>
 8003556:	2b04      	cmp	r3, #4
 8003558:	d003      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x3a>
 800355a:	e0db      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b73      	ldr	r3, [pc, #460]	; (800372c <HAL_RCC_GetSysClockFreq+0x204>)
 800355e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003560:	e0db      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003562:	4b73      	ldr	r3, [pc, #460]	; (8003730 <HAL_RCC_GetSysClockFreq+0x208>)
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003566:	e0d8      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003568:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003570:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003572:	4b6d      	ldr	r3, [pc, #436]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357e:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	2200      	movs	r2, #0
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
 8003588:	63fa      	str	r2, [r7, #60]	; 0x3c
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
 8003592:	2300      	movs	r3, #0
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
 8003596:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800359a:	4622      	mov	r2, r4
 800359c:	462b      	mov	r3, r5
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	0159      	lsls	r1, r3, #5
 80035a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ac:	0150      	lsls	r0, r2, #5
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4621      	mov	r1, r4
 80035b4:	1a51      	subs	r1, r2, r1
 80035b6:	6139      	str	r1, [r7, #16]
 80035b8:	4629      	mov	r1, r5
 80035ba:	eb63 0301 	sbc.w	r3, r3, r1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035cc:	4659      	mov	r1, fp
 80035ce:	018b      	lsls	r3, r1, #6
 80035d0:	4651      	mov	r1, sl
 80035d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035d6:	4651      	mov	r1, sl
 80035d8:	018a      	lsls	r2, r1, #6
 80035da:	4651      	mov	r1, sl
 80035dc:	ebb2 0801 	subs.w	r8, r2, r1
 80035e0:	4659      	mov	r1, fp
 80035e2:	eb63 0901 	sbc.w	r9, r3, r1
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fa:	4690      	mov	r8, r2
 80035fc:	4699      	mov	r9, r3
 80035fe:	4623      	mov	r3, r4
 8003600:	eb18 0303 	adds.w	r3, r8, r3
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	462b      	mov	r3, r5
 8003608:	eb49 0303 	adc.w	r3, r9, r3
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800361a:	4629      	mov	r1, r5
 800361c:	024b      	lsls	r3, r1, #9
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003624:	4621      	mov	r1, r4
 8003626:	024a      	lsls	r2, r1, #9
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	2200      	movs	r2, #0
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
 8003632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003638:	f7fc fe5a 	bl	80002f0 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	e058      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b38      	ldr	r3, [pc, #224]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	2200      	movs	r2, #0
 800364e:	4618      	mov	r0, r3
 8003650:	4611      	mov	r1, r2
 8003652:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003660:	4642      	mov	r2, r8
 8003662:	464b      	mov	r3, r9
 8003664:	f04f 0000 	mov.w	r0, #0
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	0159      	lsls	r1, r3, #5
 800366e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003672:	0150      	lsls	r0, r2, #5
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4641      	mov	r1, r8
 800367a:	ebb2 0a01 	subs.w	sl, r2, r1
 800367e:	4649      	mov	r1, r9
 8003680:	eb63 0b01 	sbc.w	fp, r3, r1
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003690:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003694:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003698:	ebb2 040a 	subs.w	r4, r2, sl
 800369c:	eb63 050b 	sbc.w	r5, r3, fp
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	00eb      	lsls	r3, r5, #3
 80036aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ae:	00e2      	lsls	r2, r4, #3
 80036b0:	4614      	mov	r4, r2
 80036b2:	461d      	mov	r5, r3
 80036b4:	4643      	mov	r3, r8
 80036b6:	18e3      	adds	r3, r4, r3
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	464b      	mov	r3, r9
 80036bc:	eb45 0303 	adc.w	r3, r5, r3
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ce:	4629      	mov	r1, r5
 80036d0:	028b      	lsls	r3, r1, #10
 80036d2:	4621      	mov	r1, r4
 80036d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036d8:	4621      	mov	r1, r4
 80036da:	028a      	lsls	r2, r1, #10
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e2:	2200      	movs	r2, #0
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	61fa      	str	r2, [r7, #28]
 80036e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ec:	f7fc fe00 	bl	80002f0 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003712:	e002      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetSysClockFreq+0x204>)
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800371c:	4618      	mov	r0, r3
 800371e:	3750      	adds	r7, #80	; 0x50
 8003720:	46bd      	mov	sp, r7
 8003722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	00f42400 	.word	0x00f42400
 8003730:	007a1200 	.word	0x007a1200

08003734 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_RCC_GetHCLKFreq+0x14>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000014 	.word	0x20000014

0800374c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003750:	f7ff fff0 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	080099a4 	.word	0x080099a4

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003778:	f7ff ffdc 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0b5b      	lsrs	r3, r3, #13
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	080099a4 	.word	0x080099a4

0800379c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	220f      	movs	r2, #15
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	08db      	lsrs	r3, r3, #3
 80037d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCC_GetClockConfig+0x60>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40023c00 	.word	0x40023c00

08003800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003828:	4b69      	ldr	r3, [pc, #420]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a68      	ldr	r2, [pc, #416]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003832:	6093      	str	r3, [r2, #8]
 8003834:	4b66      	ldr	r3, [pc, #408]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	4964      	ldr	r1, [pc, #400]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800384a:	2301      	movs	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800385a:	4b5d      	ldr	r3, [pc, #372]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	4959      	ldr	r1, [pc, #356]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003878:	d101      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d017      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003896:	4b4e      	ldr	r3, [pc, #312]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	494a      	ldr	r1, [pc, #296]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b4:	d101      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 808b 	beq.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e4:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	4a39      	ldr	r2, [pc, #228]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6413      	str	r3, [r2, #64]	; 0x40
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038fc:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003908:	f7fe f870 	bl	80019ec <HAL_GetTick>
 800390c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003910:	f7fe f86c 	bl	80019ec <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e38f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800392e:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003936:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d035      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	429a      	cmp	r2, r3
 800394a:	d02e      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800394c:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d114      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fe f834 	bl	80019ec <HAL_GetTick>
 8003984:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003986:	e00a      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fe f830 	bl	80019ec <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e351      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ee      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b6:	d111      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039c6:	400b      	ands	r3, r1
 80039c8:	4901      	ldr	r1, [pc, #4]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
 80039ce:	e00b      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40007000 	.word	0x40007000
 80039d8:	0ffffcff 	.word	0x0ffffcff
 80039dc:	4bac      	ldr	r3, [pc, #688]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4aab      	ldr	r2, [pc, #684]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039e6:	6093      	str	r3, [r2, #8]
 80039e8:	4ba9      	ldr	r3, [pc, #676]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f4:	49a6      	ldr	r1, [pc, #664]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a06:	4ba2      	ldr	r3, [pc, #648]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a0c:	4aa0      	ldr	r2, [pc, #640]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a16:	4b9e      	ldr	r3, [pc, #632]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	499b      	ldr	r1, [pc, #620]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a34:	4b96      	ldr	r3, [pc, #600]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a42:	4993      	ldr	r1, [pc, #588]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a56:	4b8e      	ldr	r3, [pc, #568]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a64:	498a      	ldr	r1, [pc, #552]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a78:	4b85      	ldr	r3, [pc, #532]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a86:	4982      	ldr	r1, [pc, #520]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4979      	ldr	r1, [pc, #484]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003abc:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	4971      	ldr	r1, [pc, #452]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ade:	4b6c      	ldr	r3, [pc, #432]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f023 020c 	bic.w	r2, r3, #12
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aec:	4968      	ldr	r1, [pc, #416]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b00:	4b63      	ldr	r3, [pc, #396]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	4960      	ldr	r1, [pc, #384]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b22:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	4957      	ldr	r1, [pc, #348]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b44:	4b52      	ldr	r3, [pc, #328]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	494f      	ldr	r1, [pc, #316]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b66:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	4946      	ldr	r1, [pc, #280]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b88:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	493e      	ldr	r1, [pc, #248]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003baa:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	4935      	ldr	r1, [pc, #212]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bcc:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bda:	492d      	ldr	r1, [pc, #180]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bee:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfc:	4924      	ldr	r1, [pc, #144]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3c:	4914      	ldr	r1, [pc, #80]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c60:	490b      	ldr	r1, [pc, #44]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00f      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c84:	4902      	ldr	r1, [pc, #8]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c8c:	e002      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ca0:	4b8a      	ldr	r3, [pc, #552]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	4986      	ldr	r1, [pc, #536]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cc4:	4b81      	ldr	r3, [pc, #516]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd4:	497d      	ldr	r1, [pc, #500]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d006      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80d6 	beq.w	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cf0:	4b76      	ldr	r3, [pc, #472]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a75      	ldr	r2, [pc, #468]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fe76 	bl	80019ec <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d04:	f7fd fe72 	bl	80019ec <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e195      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d16:	4b6d      	ldr	r3, [pc, #436]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d021      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11d      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d36:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4a:	0e1b      	lsrs	r3, r3, #24
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	019a      	lsls	r2, r3, #6
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	071b      	lsls	r3, r3, #28
 8003d6a:	4958      	ldr	r1, [pc, #352]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d004      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d02e      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d9c:	d129      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dac:	4b47      	ldr	r3, [pc, #284]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db2:	0f1b      	lsrs	r3, r3, #28
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	019a      	lsls	r2, r3, #6
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	071b      	lsls	r3, r3, #28
 8003dd2:	493e      	ldr	r1, [pc, #248]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dda:	4b3c      	ldr	r3, [pc, #240]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de0:	f023 021f 	bic.w	r2, r3, #31
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	3b01      	subs	r3, #1
 8003dea:	4938      	ldr	r1, [pc, #224]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01d      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dfe:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e04:	0e1b      	lsrs	r3, r3, #24
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e0c:	4b2f      	ldr	r3, [pc, #188]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	0f1b      	lsrs	r3, r3, #28
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	019a      	lsls	r2, r3, #6
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	061b      	lsls	r3, r3, #24
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	4926      	ldr	r1, [pc, #152]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	019a      	lsls	r2, r3, #6
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	071b      	lsls	r3, r3, #28
 8003e62:	491a      	ldr	r1, [pc, #104]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e76:	f7fd fdb9 	bl	80019ec <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e7e:	f7fd fdb5 	bl	80019ec <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b64      	cmp	r3, #100	; 0x64
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0d8      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	f040 80ce 	bne.w	8004040 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fd fd9c 	bl	80019ec <HAL_GetTick>
 8003eb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003eb8:	f7fd fd98 	bl	80019ec <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d904      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0bb      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ed0:	4b5e      	ldr	r3, [pc, #376]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003edc:	d0ec      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d02e      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d12a      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f06:	4b51      	ldr	r3, [pc, #324]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f14:	4b4d      	ldr	r3, [pc, #308]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	0f1b      	lsrs	r3, r3, #28
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	019a      	lsls	r2, r3, #6
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	061b      	lsls	r3, r3, #24
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	071b      	lsls	r3, r3, #28
 8003f3a:	4944      	ldr	r1, [pc, #272]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f42:	4b42      	ldr	r3, [pc, #264]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	493d      	ldr	r1, [pc, #244]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d022      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f70:	d11d      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f72:	4b36      	ldr	r3, [pc, #216]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	0e1b      	lsrs	r3, r3, #24
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	0f1b      	lsrs	r3, r3, #28
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	019a      	lsls	r2, r3, #6
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	4929      	ldr	r1, [pc, #164]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d028      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	0e1b      	lsrs	r3, r3, #24
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fc8:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	019a      	lsls	r2, r3, #6
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	071b      	lsls	r3, r3, #28
 8003fee:	4917      	ldr	r1, [pc, #92]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	4911      	ldr	r1, [pc, #68]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0e      	ldr	r2, [pc, #56]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004018:	f7fd fce8 	bl	80019ec <HAL_GetTick>
 800401c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004020:	f7fd fce4 	bl	80019ec <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e007      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403e:	d1ef      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800

08004050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e049      	b.n	80040f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f841 	bl	80040fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 fa00 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d001      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e054      	b.n	80041d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d022      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004156:	d01d      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a22      	ldr	r2, [pc, #136]	; (80041e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d018      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a21      	ldr	r2, [pc, #132]	; (80041ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x80>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d115      	bne.n	80041c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_TIM_Base_Start_IT+0xec>)
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d015      	beq.n	80041d2 <HAL_TIM_Base_Start_IT+0xbe>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d011      	beq.n	80041d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041be:	e008      	b.n	80041d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e000      	b.n	80041d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	40000c00 	.word	0x40000c00
 80041f4:	40010400 	.word	0x40010400
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40001800 	.word	0x40001800
 8004200:	00010007 	.word	0x00010007

08004204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b02      	cmp	r3, #2
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0202 	mvn.w	r2, #2
 8004230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f905 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8f7 	bl	8004442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f908 	bl	800446a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b04      	cmp	r3, #4
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0204 	mvn.w	r2, #4
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8db 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8cd 	bl	8004442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f8de 	bl	800446a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d122      	bne.n	8004308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0208 	mvn.w	r2, #8
 80042d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2204      	movs	r2, #4
 80042de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f8b1 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8a3 	bl	8004442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8b4 	bl	800446a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b10      	cmp	r3, #16
 8004314:	d122      	bne.n	800435c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d11b      	bne.n	800435c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0210 	mvn.w	r2, #16
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2208      	movs	r2, #8
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f887 	bl	8004456 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f879 	bl	8004442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f88a 	bl	800446a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0201 	mvn.w	r2, #1
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc fec8 	bl	8001118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b80      	cmp	r3, #128	; 0x80
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f91a 	bl	80045e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c2:	d10e      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b80      	cmp	r3, #128	; 0x80
 80043d0:	d107      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f90d 	bl	80045fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d10e      	bne.n	800440e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d107      	bne.n	800440e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f838 	bl	800447e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b20      	cmp	r3, #32
 800441a:	d10e      	bne.n	800443a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b20      	cmp	r3, #32
 8004428:	d107      	bne.n	800443a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f06f 0220 	mvn.w	r2, #32
 8004432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8cd 	bl	80045d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a40      	ldr	r2, [pc, #256]	; (80045a8 <TIM_Base_SetConfig+0x114>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d00f      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a3d      	ldr	r2, [pc, #244]	; (80045ac <TIM_Base_SetConfig+0x118>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a3c      	ldr	r2, [pc, #240]	; (80045b0 <TIM_Base_SetConfig+0x11c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a3b      	ldr	r2, [pc, #236]	; (80045b4 <TIM_Base_SetConfig+0x120>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3a      	ldr	r2, [pc, #232]	; (80045b8 <TIM_Base_SetConfig+0x124>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d108      	bne.n	80044e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2f      	ldr	r2, [pc, #188]	; (80045a8 <TIM_Base_SetConfig+0x114>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d02b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f4:	d027      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2c      	ldr	r2, [pc, #176]	; (80045ac <TIM_Base_SetConfig+0x118>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d023      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2b      	ldr	r2, [pc, #172]	; (80045b0 <TIM_Base_SetConfig+0x11c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01f      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <TIM_Base_SetConfig+0x120>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <TIM_Base_SetConfig+0x124>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d017      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a28      	ldr	r2, [pc, #160]	; (80045bc <TIM_Base_SetConfig+0x128>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a27      	ldr	r2, [pc, #156]	; (80045c0 <TIM_Base_SetConfig+0x12c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00f      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <TIM_Base_SetConfig+0x130>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <TIM_Base_SetConfig+0x134>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a24      	ldr	r2, [pc, #144]	; (80045cc <TIM_Base_SetConfig+0x138>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <TIM_Base_SetConfig+0x13c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <TIM_Base_SetConfig+0x114>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_Base_SetConfig+0xf8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <TIM_Base_SetConfig+0x124>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d103      	bne.n	8004594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	615a      	str	r2, [r3, #20]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40010400 	.word	0x40010400
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40014400 	.word	0x40014400
 80045c4:	40014800 	.word	0x40014800
 80045c8:	40001800 	.word	0x40001800
 80045cc:	40001c00 	.word	0x40001c00
 80045d0:	40002000 	.word	0x40002000

080045d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e040      	b.n	80046a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc ff18 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	; 0x24
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f974 	bl	800493c <UART_SetConfig>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e022      	b.n	80046a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fbcc 	bl	8004e04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800467a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800468a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fc53 	bl	8004f48 <UART_CheckIdleState>
 80046a2:	4603      	mov	r3, r0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d171      	bne.n	80047a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_UART_Transmit+0x24>
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e06a      	b.n	80047aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2221      	movs	r2, #33	; 0x21
 80046e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e2:	f7fd f983 	bl	80019ec <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	d108      	bne.n	8004714 <HAL_UART_Transmit+0x68>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e003      	b.n	800471c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800471c:	e02c      	b.n	8004778 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fc5a 	bl	8004fe2 <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e038      	b.n	80047aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	3302      	adds	r3, #2
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e007      	b.n	8004766 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1cc      	bne.n	800471e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2200      	movs	r2, #0
 800478c:	2140      	movs	r1, #64	; 0x40
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fc27 	bl	8004fe2 <UART_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e005      	b.n	80047aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b08a      	sub	sp, #40	; 0x28
 80047b6:	af02      	add	r7, sp, #8
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	f040 80b1 	bne.w	8004930 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_UART_Receive+0x28>
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e0a9      	b.n	8004932 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2222      	movs	r2, #34	; 0x22
 80047ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f4:	f7fd f8fa 	bl	80019ec <HAL_GetTick>
 80047f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	88fa      	ldrh	r2, [r7, #6]
 8004806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d10e      	bne.n	8004832 <HAL_UART_Receive+0x80>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <HAL_UART_Receive+0x76>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004826:	e02d      	b.n	8004884 <HAL_UART_Receive+0xd2>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	22ff      	movs	r2, #255	; 0xff
 800482c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004830:	e028      	b.n	8004884 <HAL_UART_Receive+0xd2>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10d      	bne.n	8004856 <HAL_UART_Receive+0xa4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <HAL_UART_Receive+0x9a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22ff      	movs	r2, #255	; 0xff
 8004846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800484a:	e01b      	b.n	8004884 <HAL_UART_Receive+0xd2>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	227f      	movs	r2, #127	; 0x7f
 8004850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004854:	e016      	b.n	8004884 <HAL_UART_Receive+0xd2>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800485e:	d10d      	bne.n	800487c <HAL_UART_Receive+0xca>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_UART_Receive+0xc0>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	227f      	movs	r2, #127	; 0x7f
 800486c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004870:	e008      	b.n	8004884 <HAL_UART_Receive+0xd2>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	223f      	movs	r2, #63	; 0x3f
 8004876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800487a:	e003      	b.n	8004884 <HAL_UART_Receive+0xd2>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800488a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004894:	d108      	bne.n	80048a8 <HAL_UART_Receive+0xf6>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	e003      	b.n	80048b0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80048b0:	e032      	b.n	8004918 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2120      	movs	r1, #32
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fb90 	bl	8004fe2 <UART_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e032      	b.n	8004932 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b29a      	uxth	r2, r3
 80048da:	8a7b      	ldrh	r3, [r7, #18]
 80048dc:	4013      	ands	r3, r2
 80048de:	b29a      	uxth	r2, r3
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	3302      	adds	r3, #2
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	e00c      	b.n	8004906 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	8a7b      	ldrh	r3, [r7, #18]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	4013      	ands	r3, r2
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1c6      	bne.n	80048b2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4ba6      	ldr	r3, [pc, #664]	; (8004c00 <UART_SetConfig+0x2c4>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	430b      	orrs	r3, r1
 8004972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a94      	ldr	r2, [pc, #592]	; (8004c04 <UART_SetConfig+0x2c8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d120      	bne.n	80049fa <UART_SetConfig+0xbe>
 80049b8:	4b93      	ldr	r3, [pc, #588]	; (8004c08 <UART_SetConfig+0x2cc>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d816      	bhi.n	80049f4 <UART_SetConfig+0xb8>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x90>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049e9 	.word	0x080049e9
 80049d4:	080049e3 	.word	0x080049e3
 80049d8:	080049ef 	.word	0x080049ef
 80049dc:	2301      	movs	r3, #1
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e150      	b.n	8004c84 <UART_SetConfig+0x348>
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e14d      	b.n	8004c84 <UART_SetConfig+0x348>
 80049e8:	2304      	movs	r3, #4
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e14a      	b.n	8004c84 <UART_SetConfig+0x348>
 80049ee:	2308      	movs	r3, #8
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e147      	b.n	8004c84 <UART_SetConfig+0x348>
 80049f4:	2310      	movs	r3, #16
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e144      	b.n	8004c84 <UART_SetConfig+0x348>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a83      	ldr	r2, [pc, #524]	; (8004c0c <UART_SetConfig+0x2d0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d132      	bne.n	8004a6a <UART_SetConfig+0x12e>
 8004a04:	4b80      	ldr	r3, [pc, #512]	; (8004c08 <UART_SetConfig+0x2cc>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d828      	bhi.n	8004a64 <UART_SetConfig+0x128>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0xdc>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004a65 	.word	0x08004a65
 8004a20:	08004a65 	.word	0x08004a65
 8004a24:	08004a65 	.word	0x08004a65
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a65 	.word	0x08004a65
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a53 	.word	0x08004a53
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a65 	.word	0x08004a65
 8004a48:	08004a5f 	.word	0x08004a5f
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e118      	b.n	8004c84 <UART_SetConfig+0x348>
 8004a52:	2302      	movs	r3, #2
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e115      	b.n	8004c84 <UART_SetConfig+0x348>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e112      	b.n	8004c84 <UART_SetConfig+0x348>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e10f      	b.n	8004c84 <UART_SetConfig+0x348>
 8004a64:	2310      	movs	r3, #16
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e10c      	b.n	8004c84 <UART_SetConfig+0x348>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a68      	ldr	r2, [pc, #416]	; (8004c10 <UART_SetConfig+0x2d4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d120      	bne.n	8004ab6 <UART_SetConfig+0x17a>
 8004a74:	4b64      	ldr	r3, [pc, #400]	; (8004c08 <UART_SetConfig+0x2cc>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a7e:	2b30      	cmp	r3, #48	; 0x30
 8004a80:	d013      	beq.n	8004aaa <UART_SetConfig+0x16e>
 8004a82:	2b30      	cmp	r3, #48	; 0x30
 8004a84:	d814      	bhi.n	8004ab0 <UART_SetConfig+0x174>
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d009      	beq.n	8004a9e <UART_SetConfig+0x162>
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d810      	bhi.n	8004ab0 <UART_SetConfig+0x174>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <UART_SetConfig+0x15c>
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d006      	beq.n	8004aa4 <UART_SetConfig+0x168>
 8004a96:	e00b      	b.n	8004ab0 <UART_SetConfig+0x174>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e0f2      	b.n	8004c84 <UART_SetConfig+0x348>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e0ef      	b.n	8004c84 <UART_SetConfig+0x348>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e0ec      	b.n	8004c84 <UART_SetConfig+0x348>
 8004aaa:	2308      	movs	r3, #8
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e0e9      	b.n	8004c84 <UART_SetConfig+0x348>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e0e6      	b.n	8004c84 <UART_SetConfig+0x348>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a56      	ldr	r2, [pc, #344]	; (8004c14 <UART_SetConfig+0x2d8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d120      	bne.n	8004b02 <UART_SetConfig+0x1c6>
 8004ac0:	4b51      	ldr	r3, [pc, #324]	; (8004c08 <UART_SetConfig+0x2cc>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aca:	2bc0      	cmp	r3, #192	; 0xc0
 8004acc:	d013      	beq.n	8004af6 <UART_SetConfig+0x1ba>
 8004ace:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad0:	d814      	bhi.n	8004afc <UART_SetConfig+0x1c0>
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d009      	beq.n	8004aea <UART_SetConfig+0x1ae>
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d810      	bhi.n	8004afc <UART_SetConfig+0x1c0>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <UART_SetConfig+0x1a8>
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d006      	beq.n	8004af0 <UART_SetConfig+0x1b4>
 8004ae2:	e00b      	b.n	8004afc <UART_SetConfig+0x1c0>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e0cc      	b.n	8004c84 <UART_SetConfig+0x348>
 8004aea:	2302      	movs	r3, #2
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e0c9      	b.n	8004c84 <UART_SetConfig+0x348>
 8004af0:	2304      	movs	r3, #4
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e0c6      	b.n	8004c84 <UART_SetConfig+0x348>
 8004af6:	2308      	movs	r3, #8
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e0c3      	b.n	8004c84 <UART_SetConfig+0x348>
 8004afc:	2310      	movs	r3, #16
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e0c0      	b.n	8004c84 <UART_SetConfig+0x348>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a44      	ldr	r2, [pc, #272]	; (8004c18 <UART_SetConfig+0x2dc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d125      	bne.n	8004b58 <UART_SetConfig+0x21c>
 8004b0c:	4b3e      	ldr	r3, [pc, #248]	; (8004c08 <UART_SetConfig+0x2cc>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1a:	d017      	beq.n	8004b4c <UART_SetConfig+0x210>
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b20:	d817      	bhi.n	8004b52 <UART_SetConfig+0x216>
 8004b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b26:	d00b      	beq.n	8004b40 <UART_SetConfig+0x204>
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d811      	bhi.n	8004b52 <UART_SetConfig+0x216>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <UART_SetConfig+0x1fe>
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d006      	beq.n	8004b46 <UART_SetConfig+0x20a>
 8004b38:	e00b      	b.n	8004b52 <UART_SetConfig+0x216>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e0a1      	b.n	8004c84 <UART_SetConfig+0x348>
 8004b40:	2302      	movs	r3, #2
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e09e      	b.n	8004c84 <UART_SetConfig+0x348>
 8004b46:	2304      	movs	r3, #4
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e09b      	b.n	8004c84 <UART_SetConfig+0x348>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e098      	b.n	8004c84 <UART_SetConfig+0x348>
 8004b52:	2310      	movs	r3, #16
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e095      	b.n	8004c84 <UART_SetConfig+0x348>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2f      	ldr	r2, [pc, #188]	; (8004c1c <UART_SetConfig+0x2e0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d125      	bne.n	8004bae <UART_SetConfig+0x272>
 8004b62:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <UART_SetConfig+0x2cc>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b70:	d017      	beq.n	8004ba2 <UART_SetConfig+0x266>
 8004b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b76:	d817      	bhi.n	8004ba8 <UART_SetConfig+0x26c>
 8004b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7c:	d00b      	beq.n	8004b96 <UART_SetConfig+0x25a>
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b82:	d811      	bhi.n	8004ba8 <UART_SetConfig+0x26c>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <UART_SetConfig+0x254>
 8004b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8c:	d006      	beq.n	8004b9c <UART_SetConfig+0x260>
 8004b8e:	e00b      	b.n	8004ba8 <UART_SetConfig+0x26c>
 8004b90:	2301      	movs	r3, #1
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e076      	b.n	8004c84 <UART_SetConfig+0x348>
 8004b96:	2302      	movs	r3, #2
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e073      	b.n	8004c84 <UART_SetConfig+0x348>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e070      	b.n	8004c84 <UART_SetConfig+0x348>
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e06d      	b.n	8004c84 <UART_SetConfig+0x348>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e06a      	b.n	8004c84 <UART_SetConfig+0x348>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <UART_SetConfig+0x2e4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d138      	bne.n	8004c2a <UART_SetConfig+0x2ee>
 8004bb8:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <UART_SetConfig+0x2cc>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bc6:	d017      	beq.n	8004bf8 <UART_SetConfig+0x2bc>
 8004bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bcc:	d82a      	bhi.n	8004c24 <UART_SetConfig+0x2e8>
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	d00b      	beq.n	8004bec <UART_SetConfig+0x2b0>
 8004bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd8:	d824      	bhi.n	8004c24 <UART_SetConfig+0x2e8>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <UART_SetConfig+0x2aa>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	d006      	beq.n	8004bf2 <UART_SetConfig+0x2b6>
 8004be4:	e01e      	b.n	8004c24 <UART_SetConfig+0x2e8>
 8004be6:	2300      	movs	r3, #0
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e04b      	b.n	8004c84 <UART_SetConfig+0x348>
 8004bec:	2302      	movs	r3, #2
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e048      	b.n	8004c84 <UART_SetConfig+0x348>
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e045      	b.n	8004c84 <UART_SetConfig+0x348>
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e042      	b.n	8004c84 <UART_SetConfig+0x348>
 8004bfe:	bf00      	nop
 8004c00:	efff69f3 	.word	0xefff69f3
 8004c04:	40011000 	.word	0x40011000
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40004400 	.word	0x40004400
 8004c10:	40004800 	.word	0x40004800
 8004c14:	40004c00 	.word	0x40004c00
 8004c18:	40005000 	.word	0x40005000
 8004c1c:	40011400 	.word	0x40011400
 8004c20:	40007800 	.word	0x40007800
 8004c24:	2310      	movs	r3, #16
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e02c      	b.n	8004c84 <UART_SetConfig+0x348>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a72      	ldr	r2, [pc, #456]	; (8004df8 <UART_SetConfig+0x4bc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d125      	bne.n	8004c80 <UART_SetConfig+0x344>
 8004c34:	4b71      	ldr	r3, [pc, #452]	; (8004dfc <UART_SetConfig+0x4c0>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c42:	d017      	beq.n	8004c74 <UART_SetConfig+0x338>
 8004c44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c48:	d817      	bhi.n	8004c7a <UART_SetConfig+0x33e>
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4e:	d00b      	beq.n	8004c68 <UART_SetConfig+0x32c>
 8004c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c54:	d811      	bhi.n	8004c7a <UART_SetConfig+0x33e>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <UART_SetConfig+0x326>
 8004c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5e:	d006      	beq.n	8004c6e <UART_SetConfig+0x332>
 8004c60:	e00b      	b.n	8004c7a <UART_SetConfig+0x33e>
 8004c62:	2300      	movs	r3, #0
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e00d      	b.n	8004c84 <UART_SetConfig+0x348>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e00a      	b.n	8004c84 <UART_SetConfig+0x348>
 8004c6e:	2304      	movs	r3, #4
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e007      	b.n	8004c84 <UART_SetConfig+0x348>
 8004c74:	2308      	movs	r3, #8
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e004      	b.n	8004c84 <UART_SetConfig+0x348>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e001      	b.n	8004c84 <UART_SetConfig+0x348>
 8004c80:	2310      	movs	r3, #16
 8004c82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c8c:	d15b      	bne.n	8004d46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c8e:	7ffb      	ldrb	r3, [r7, #31]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d828      	bhi.n	8004ce6 <UART_SetConfig+0x3aa>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <UART_SetConfig+0x360>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cc9 	.word	0x08004cc9
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004ce7 	.word	0x08004ce7
 8004cac:	08004cd7 	.word	0x08004cd7
 8004cb0:	08004ce7 	.word	0x08004ce7
 8004cb4:	08004ce7 	.word	0x08004ce7
 8004cb8:	08004ce7 	.word	0x08004ce7
 8004cbc:	08004cdf 	.word	0x08004cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fe fd44 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8004cc4:	61b8      	str	r0, [r7, #24]
        break;
 8004cc6:	e013      	b.n	8004cf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc8:	f7fe fd54 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8004ccc:	61b8      	str	r0, [r7, #24]
        break;
 8004cce:	e00f      	b.n	8004cf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd0:	4b4b      	ldr	r3, [pc, #300]	; (8004e00 <UART_SetConfig+0x4c4>)
 8004cd2:	61bb      	str	r3, [r7, #24]
        break;
 8004cd4:	e00c      	b.n	8004cf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd6:	f7fe fc27 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 8004cda:	61b8      	str	r0, [r7, #24]
        break;
 8004cdc:	e008      	b.n	8004cf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce2:	61bb      	str	r3, [r7, #24]
        break;
 8004ce4:	e004      	b.n	8004cf0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	77bb      	strb	r3, [r7, #30]
        break;
 8004cee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d074      	beq.n	8004de0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	005a      	lsls	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	441a      	add	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b0f      	cmp	r3, #15
 8004d10:	d916      	bls.n	8004d40 <UART_SetConfig+0x404>
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d212      	bcs.n	8004d40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f023 030f 	bic.w	r3, r3, #15
 8004d22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	89fb      	ldrh	r3, [r7, #14]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	89fa      	ldrh	r2, [r7, #14]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	e04f      	b.n	8004de0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	77bb      	strb	r3, [r7, #30]
 8004d44:	e04c      	b.n	8004de0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d46:	7ffb      	ldrb	r3, [r7, #31]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d828      	bhi.n	8004d9e <UART_SetConfig+0x462>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <UART_SetConfig+0x418>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	08004d89 	.word	0x08004d89
 8004d60:	08004d9f 	.word	0x08004d9f
 8004d64:	08004d8f 	.word	0x08004d8f
 8004d68:	08004d9f 	.word	0x08004d9f
 8004d6c:	08004d9f 	.word	0x08004d9f
 8004d70:	08004d9f 	.word	0x08004d9f
 8004d74:	08004d97 	.word	0x08004d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d78:	f7fe fce8 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8004d7c:	61b8      	str	r0, [r7, #24]
        break;
 8004d7e:	e013      	b.n	8004da8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d80:	f7fe fcf8 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8004d84:	61b8      	str	r0, [r7, #24]
        break;
 8004d86:	e00f      	b.n	8004da8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <UART_SetConfig+0x4c4>)
 8004d8a:	61bb      	str	r3, [r7, #24]
        break;
 8004d8c:	e00c      	b.n	8004da8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8e:	f7fe fbcb 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 8004d92:	61b8      	str	r0, [r7, #24]
        break;
 8004d94:	e008      	b.n	8004da8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9a:	61bb      	str	r3, [r7, #24]
        break;
 8004d9c:	e004      	b.n	8004da8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	77bb      	strb	r3, [r7, #30]
        break;
 8004da6:	bf00      	nop
    }

    if (pclk != 0U)
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d018      	beq.n	8004de0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	085a      	lsrs	r2, r3, #1
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	441a      	add	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b0f      	cmp	r3, #15
 8004dc6:	d909      	bls.n	8004ddc <UART_SetConfig+0x4a0>
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dce:	d205      	bcs.n	8004ddc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	e001      	b.n	8004de0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004dec:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40007c00 	.word	0x40007c00
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	00f42400 	.word	0x00f42400

08004e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f02:	d10a      	bne.n	8004f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f58:	f7fc fd48 	bl	80019ec <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d10e      	bne.n	8004f8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f831 	bl	8004fe2 <UART_WaitOnFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e027      	b.n	8004fda <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d10e      	bne.n	8004fb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f81b 	bl	8004fe2 <UART_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e011      	b.n	8004fda <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b09c      	sub	sp, #112	; 0x70
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff2:	e0a7      	b.n	8005144 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	f000 80a3 	beq.w	8005144 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fc fcf5 	bl	80019ec <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <UART_WaitOnFlagUntilTimeout+0x32>
 800500e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005010:	2b00      	cmp	r3, #0
 8005012:	d13f      	bne.n	8005094 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005028:	667b      	str	r3, [r7, #100]	; 0x64
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005034:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e6      	bne.n	8005014 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	663b      	str	r3, [r7, #96]	; 0x60
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005066:	64ba      	str	r2, [r7, #72]	; 0x48
 8005068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800506c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e5      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e068      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d050      	beq.n	8005144 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b0:	d148      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
 80050dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e6      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3308      	adds	r3, #8
 80050f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	613b      	str	r3, [r7, #16]
   return(result);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	66bb      	str	r3, [r7, #104]	; 0x68
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3308      	adds	r3, #8
 800510c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800510e:	623a      	str	r2, [r7, #32]
 8005110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	69f9      	ldr	r1, [r7, #28]
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	61bb      	str	r3, [r7, #24]
   return(result);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e010      	b.n	8005166 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4013      	ands	r3, r2
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	429a      	cmp	r2, r3
 8005160:	f43f af48 	beq.w	8004ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3770      	adds	r7, #112	; 0x70
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005170:	b084      	sub	sp, #16
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	f107 001c 	add.w	r0, r7, #28
 800517e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	2b01      	cmp	r3, #1
 8005186:	d120      	bne.n	80051ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	4b20      	ldr	r3, [pc, #128]	; (800521c <USB_CoreInit+0xac>)
 800519a:	4013      	ands	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa96 	bl	80056f0 <USB_CoreReset>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	e010      	b.n	80051ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa8a 	bl	80056f0 <USB_CoreReset>
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d10b      	bne.n	800520a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f043 0206 	orr.w	r2, r3, #6
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f043 0220 	orr.w	r2, r3, #32
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005216:	b004      	add	sp, #16
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	ffbdffbf 	.word	0xffbdffbf

08005220 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 0201 	bic.w	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	460b      	mov	r3, r1
 800524c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d115      	bne.n	8005290 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005270:	2001      	movs	r0, #1
 8005272:	f7fc fbc7 	bl	8001a04 <HAL_Delay>
      ms++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fa29 	bl	80056d4 <USB_GetMode>
 8005282:	4603      	mov	r3, r0
 8005284:	2b01      	cmp	r3, #1
 8005286:	d01e      	beq.n	80052c6 <USB_SetCurrentMode+0x84>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b31      	cmp	r3, #49	; 0x31
 800528c:	d9f0      	bls.n	8005270 <USB_SetCurrentMode+0x2e>
 800528e:	e01a      	b.n	80052c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d115      	bne.n	80052c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f7fc fbae 	bl	8001a04 <HAL_Delay>
      ms++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa10 	bl	80056d4 <USB_GetMode>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <USB_SetCurrentMode+0x84>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b31      	cmp	r3, #49	; 0x31
 80052be:	d9f0      	bls.n	80052a2 <USB_SetCurrentMode+0x60>
 80052c0:	e001      	b.n	80052c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e005      	b.n	80052d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b32      	cmp	r3, #50	; 0x32
 80052ca:	d101      	bne.n	80052d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052dc:	b084      	sub	sp, #16
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e009      	b.n	8005310 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3340      	adds	r3, #64	; 0x40
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	2200      	movs	r2, #0
 8005308:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	3301      	adds	r3, #1
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b0e      	cmp	r3, #14
 8005314:	d9f2      	bls.n	80052fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d11c      	bne.n	8005356 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e005      	b.n	8005362 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	4619      	mov	r1, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	461a      	mov	r2, r3
 800537e:	680b      	ldr	r3, [r1, #0]
 8005380:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10c      	bne.n	80053a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800538e:	2100      	movs	r1, #0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f965 	bl	8005660 <USB_SetDevSpeed>
 8005396:	e008      	b.n	80053aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005398:	2101      	movs	r1, #1
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f960 	bl	8005660 <USB_SetDevSpeed>
 80053a0:	e003      	b.n	80053aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053a2:	2103      	movs	r1, #3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f95b 	bl	8005660 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053aa:	2110      	movs	r1, #16
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8f3 	bl	8005598 <USB_FlushTxFifo>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f91f 	bl	8005600 <USB_FlushRxFifo>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	461a      	mov	r2, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	461a      	mov	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	461a      	mov	r2, r3
 80053ec:	2300      	movs	r3, #0
 80053ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	e043      	b.n	800547e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540c:	d118      	bne.n	8005440 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e013      	b.n	8005452 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	461a      	mov	r2, r3
 8005438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e008      	b.n	8005452 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	461a      	mov	r2, r3
 8005460:	2300      	movs	r3, #0
 8005462:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	461a      	mov	r2, r3
 8005472:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005476:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	3301      	adds	r3, #1
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	429a      	cmp	r2, r3
 8005484:	d3b7      	bcc.n	80053f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e043      	b.n	8005514 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800549e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a2:	d118      	bne.n	80054d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e013      	b.n	80054e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	461a      	mov	r2, r3
 80054ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e008      	b.n	80054e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	2300      	movs	r3, #0
 80054e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800550c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3301      	adds	r3, #1
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	429a      	cmp	r2, r3
 800551a:	d3b7      	bcc.n	800548c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800553c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f043 0210 	orr.w	r2, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <USB_DevInit+0x2b4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 0208 	orr.w	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <USB_DevInit+0x2b8>)
 800557a:	4313      	orrs	r3, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800558c:	b004      	add	sp, #16
 800558e:	4770      	bx	lr
 8005590:	803c3800 	.word	0x803c3800
 8005594:	40000004 	.word	0x40000004

08005598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <USB_FlushTxFifo+0x64>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d901      	bls.n	80055b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e01b      	b.n	80055f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	daf2      	bge.n	80055a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	019b      	lsls	r3, r3, #6
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a08      	ldr	r2, [pc, #32]	; (80055fc <USB_FlushTxFifo+0x64>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e006      	b.n	80055f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d0f0      	beq.n	80055d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	00030d40 	.word	0x00030d40

08005600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3301      	adds	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a11      	ldr	r2, [pc, #68]	; (800565c <USB_FlushRxFifo+0x5c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e018      	b.n	8005650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	daf2      	bge.n	800560c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2210      	movs	r2, #16
 800562e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4a08      	ldr	r2, [pc, #32]	; (800565c <USB_FlushRxFifo+0x5c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e006      	b.n	8005650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b10      	cmp	r3, #16
 800564c:	d0f0      	beq.n	8005630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	00030d40 	.word	0x00030d40

08005660 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005680:	4313      	orrs	r3, r2
 8005682:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056ac:	f023 0303 	bic.w	r3, r3, #3
 80056b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056c0:	f043 0302 	orr.w	r3, r3, #2
 80056c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f003 0301 	and.w	r3, r3, #1
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <USB_CoreReset+0x64>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e01b      	b.n	8005746 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	daf2      	bge.n	80056fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f043 0201 	orr.w	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <USB_CoreReset+0x64>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e006      	b.n	8005746 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d0f0      	beq.n	8005726 <USB_CoreReset+0x36>

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	00030d40 	.word	0x00030d40

08005758 <osKernelInitialize>:
#endif
}

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800575e:	f3ef 8305 	mrs	r3, IPSR
 8005762:	60bb      	str	r3, [r7, #8]
  return(result);
 8005764:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576a:	f3ef 8310 	mrs	r3, PRIMASK
 800576e:	607b      	str	r3, [r7, #4]
  return(result);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d105      	bne.n	8005782 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005776:	f3ef 8311 	mrs	r3, BASEPRI
 800577a:	603b      	str	r3, [r7, #0]
  return(result);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <osKernelInitialize+0x3a>
 8005782:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <osKernelInitialize+0x64>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d103      	bne.n	8005792 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800578a:	f06f 0305 	mvn.w	r3, #5
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e00c      	b.n	80057ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <osKernelInitialize+0x64>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800579a:	4b08      	ldr	r3, [pc, #32]	; (80057bc <osKernelInitialize+0x64>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e002      	b.n	80057ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295
 80057aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80057ac:	68fb      	ldr	r3, [r7, #12]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	200008e8 	.word	0x200008e8

080057c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b090      	sub	sp, #64	; 0x40
 80057c4:	af04      	add	r7, sp, #16
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d0:	f3ef 8305 	mrs	r3, IPSR
 80057d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80057d6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 808f 	bne.w	80058fc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057de:	f3ef 8310 	mrs	r3, PRIMASK
 80057e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057ea:	f3ef 8311 	mrs	r3, BASEPRI
 80057ee:	617b      	str	r3, [r7, #20]
  return(result);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <osThreadNew+0x3e>
 80057f6:	4b44      	ldr	r3, [pc, #272]	; (8005908 <osThreadNew+0x148>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d07e      	beq.n	80058fc <osThreadNew+0x13c>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d07b      	beq.n	80058fc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005804:	2380      	movs	r3, #128	; 0x80
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005808:	2318      	movs	r3, #24
 800580a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295
 8005814:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d045      	beq.n	80058a8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <osThreadNew+0x6a>
        name = attr->name;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <osThreadNew+0x90>
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	2b38      	cmp	r3, #56	; 0x38
 8005842:	d805      	bhi.n	8005850 <osThreadNew+0x90>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <osThreadNew+0x94>
        return (NULL);
 8005850:	2300      	movs	r3, #0
 8005852:	e054      	b.n	80058fe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00e      	beq.n	800588a <osThreadNew+0xca>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2ba7      	cmp	r3, #167	; 0xa7
 8005872:	d90a      	bls.n	800588a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005878:	2b00      	cmp	r3, #0
 800587a:	d006      	beq.n	800588a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <osThreadNew+0xca>
        mem = 1;
 8005884:	2301      	movs	r3, #1
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	e010      	b.n	80058ac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <osThreadNew+0xec>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <osThreadNew+0xec>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <osThreadNew+0xec>
          mem = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	e001      	b.n	80058ac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d110      	bne.n	80058d4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058ba:	9202      	str	r2, [sp, #8]
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f935 	bl	8005b38 <xTaskCreateStatic>
 80058ce:	4603      	mov	r3, r0
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	e013      	b.n	80058fc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d110      	bne.n	80058fc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	b29a      	uxth	r2, r3
 80058de:	f107 0310 	add.w	r3, r7, #16
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f986 	bl	8005bfe <xTaskCreate>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <osThreadNew+0x13c>
          hTask = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058fc:	693b      	ldr	r3, [r7, #16]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3730      	adds	r7, #48	; 0x30
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200008e8 	.word	0x200008e8

0800590c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005918:	f3ef 8305 	mrs	r3, IPSR
 800591c:	617b      	str	r3, [r7, #20]
  return(result);
 800591e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10f      	bne.n	8005944 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005924:	f3ef 8310 	mrs	r3, PRIMASK
 8005928:	613b      	str	r3, [r7, #16]
  return(result);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005930:	f3ef 8311 	mrs	r3, BASEPRI
 8005934:	60fb      	str	r3, [r7, #12]
  return(result);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <osThreadSuspend+0x40>
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <osThreadSuspend+0x64>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d103      	bne.n	800594c <osThreadSuspend+0x40>
    stat = osErrorISR;
 8005944:	f06f 0305 	mvn.w	r3, #5
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	e00b      	b.n	8005964 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8005952:	f06f 0303 	mvn.w	r3, #3
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	e004      	b.n	8005964 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800595e:	69b8      	ldr	r0, [r7, #24]
 8005960:	f000 fae0 	bl	8005f24 <vTaskSuspend>
  }

  return (stat);
 8005964:	69fb      	ldr	r3, [r7, #28]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	200008e8 	.word	0x200008e8

08005974 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597c:	f3ef 8305 	mrs	r3, IPSR
 8005980:	613b      	str	r3, [r7, #16]
  return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10f      	bne.n	80059a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005988:	f3ef 8310 	mrs	r3, PRIMASK
 800598c:	60fb      	str	r3, [r7, #12]
  return(result);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005994:	f3ef 8311 	mrs	r3, BASEPRI
 8005998:	60bb      	str	r3, [r7, #8]
  return(result);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <osDelay+0x3c>
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <osDelay+0x58>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d103      	bne.n	80059b0 <osDelay+0x3c>
    stat = osErrorISR;
 80059a8:	f06f 0305 	mvn.w	r3, #5
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e007      	b.n	80059c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa7c 	bl	8005eb8 <vTaskDelay>
    }
  }

  return (stat);
 80059c0:	697b      	ldr	r3, [r7, #20]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200008e8 	.word	0x200008e8

080059d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f103 0208 	add.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f103 0208 	add.w	r2, r3, #8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f103 0208 	add.w	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d103      	bne.n	8005a92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e00c      	b.n	8005aac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3308      	adds	r3, #8
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e002      	b.n	8005aa0 <vListInsert+0x2e>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d2f6      	bcs.n	8005a9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6852      	ldr	r2, [r2, #4]
 8005b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d103      	bne.n	8005b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	1e5a      	subs	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af04      	add	r7, sp, #16
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10c      	bne.n	8005b66 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	b672      	cpsid	i
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	b662      	cpsie	i
 8005b60:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10c      	bne.n	8005b86 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	b672      	cpsid	i
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	b662      	cpsie	i
 8005b80:	61fb      	str	r3, [r7, #28]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b86:	23a8      	movs	r3, #168	; 0xa8
 8005b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2ba8      	cmp	r3, #168	; 0xa8
 8005b8e:	d00c      	beq.n	8005baa <xTaskCreateStatic+0x72>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	61bb      	str	r3, [r7, #24]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005baa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01e      	beq.n	8005bf0 <xTaskCreateStatic+0xb8>
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01b      	beq.n	8005bf0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bca:	2300      	movs	r3, #0
 8005bcc:	9303      	str	r3, [sp, #12]
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	9302      	str	r3, [sp, #8]
 8005bd2:	f107 0314 	add.w	r3, r7, #20
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f850 	bl	8005c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bea:	f000 f8f5 	bl	8005dd8 <prvAddNewTaskToReadyList>
 8005bee:	e001      	b.n	8005bf4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bf4:	697b      	ldr	r3, [r7, #20]
	}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3728      	adds	r7, #40	; 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08c      	sub	sp, #48	; 0x30
 8005c02:	af04      	add	r7, sp, #16
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fdbc 	bl	8006790 <pvPortMalloc>
 8005c18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00e      	beq.n	8005c3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c20:	20a8      	movs	r0, #168	; 0xa8
 8005c22:	f000 fdb5 	bl	8006790 <pvPortMalloc>
 8005c26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
 8005c34:	e005      	b.n	8005c42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c36:	6978      	ldr	r0, [r7, #20]
 8005c38:	f000 fe74 	bl	8006924 <vPortFree>
 8005c3c:	e001      	b.n	8005c42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c50:	88fa      	ldrh	r2, [r7, #6]
 8005c52:	2300      	movs	r3, #0
 8005c54:	9303      	str	r3, [sp, #12]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	9302      	str	r3, [sp, #8]
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f80e 	bl	8005c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c6c:	69f8      	ldr	r0, [r7, #28]
 8005c6e:	f000 f8b3 	bl	8005dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c72:	2301      	movs	r3, #1
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	e002      	b.n	8005c7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c78:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	21a5      	movs	r1, #165	; 0xa5
 8005ca2:	f001 fcb8 	bl	8007616 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005cb0:	440b      	add	r3, r1
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f023 0307 	bic.w	r3, r3, #7
 8005cbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00c      	beq.n	8005ce4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	b672      	cpsid	i
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	b662      	cpsie	i
 8005cde:	617b      	str	r3, [r7, #20]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d01f      	beq.n	8005d2a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	e012      	b.n	8005d16 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	7819      	ldrb	r1, [r3, #0]
 8005cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3334      	adds	r3, #52	; 0x34
 8005d00:	460a      	mov	r2, r1
 8005d02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d006      	beq.n	8005d1e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	3301      	adds	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	d9e9      	bls.n	8005cf0 <prvInitialiseNewTask+0x68>
 8005d1c:	e000      	b.n	8005d20 <prvInitialiseNewTask+0x98>
			{
				break;
 8005d1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d28:	e003      	b.n	8005d32 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	2b37      	cmp	r3, #55	; 0x37
 8005d36:	d901      	bls.n	8005d3c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d38:	2337      	movs	r3, #55	; 0x37
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	3304      	adds	r3, #4
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fe5c 	bl	8005a10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	3318      	adds	r3, #24
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff fe57 	bl	8005a10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	3354      	adds	r3, #84	; 0x54
 8005d8c:	224c      	movs	r2, #76	; 0x4c
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 fc40 	bl	8007616 <memset>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	4a0c      	ldr	r2, [pc, #48]	; (8005dcc <prvInitialiseNewTask+0x144>)
 8005d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	4a0c      	ldr	r2, [pc, #48]	; (8005dd0 <prvInitialiseNewTask+0x148>)
 8005da0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	4a0b      	ldr	r2, [pc, #44]	; (8005dd4 <prvInitialiseNewTask+0x14c>)
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	69b8      	ldr	r0, [r7, #24]
 8005dae:	f000 fbb5 	bl	800651c <pxPortInitialiseStack>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc4:	bf00      	nop
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	200049fc 	.word	0x200049fc
 8005dd0:	20004a64 	.word	0x20004a64
 8005dd4:	20004acc 	.word	0x20004acc

08005dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005de0:	f000 fc1a 	bl	8006618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005de4:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <prvAddNewTaskToReadyList+0xc4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	4a2c      	ldr	r2, [pc, #176]	; (8005e9c <prvAddNewTaskToReadyList+0xc4>)
 8005dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dee:	4b2c      	ldr	r3, [pc, #176]	; (8005ea0 <prvAddNewTaskToReadyList+0xc8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005df6:	4a2a      	ldr	r2, [pc, #168]	; (8005ea0 <prvAddNewTaskToReadyList+0xc8>)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <prvAddNewTaskToReadyList+0xc4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d110      	bne.n	8005e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e04:	f000 fad6 	bl	80063b4 <prvInitialiseTaskLists>
 8005e08:	e00d      	b.n	8005e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <prvAddNewTaskToReadyList+0xcc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e12:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <prvAddNewTaskToReadyList+0xc8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d802      	bhi.n	8005e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e20:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <prvAddNewTaskToReadyList+0xc8>)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <prvAddNewTaskToReadyList+0xd0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <prvAddNewTaskToReadyList+0xd0>)
 8005e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <prvAddNewTaskToReadyList+0xd0>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <prvAddNewTaskToReadyList+0xd4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d903      	bls.n	8005e4c <prvAddNewTaskToReadyList+0x74>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	4a18      	ldr	r2, [pc, #96]	; (8005eac <prvAddNewTaskToReadyList+0xd4>)
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <prvAddNewTaskToReadyList+0xd8>)
 8005e5a:	441a      	add	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f7ff fde1 	bl	8005a2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e68:	f000 fc0a 	bl	8006680 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <prvAddNewTaskToReadyList+0xcc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e74:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <prvAddNewTaskToReadyList+0xc8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d207      	bcs.n	8005e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <prvAddNewTaskToReadyList+0xdc>)
 8005e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000dbc 	.word	0x20000dbc
 8005ea0:	200008ec 	.word	0x200008ec
 8005ea4:	20000dc8 	.word	0x20000dc8
 8005ea8:	20000dd8 	.word	0x20000dd8
 8005eac:	20000dc4 	.word	0x20000dc4
 8005eb0:	200008f0 	.word	0x200008f0
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d019      	beq.n	8005efe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <vTaskDelay+0x64>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00c      	beq.n	8005eec <vTaskDelay+0x34>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	b672      	cpsid	i
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	b662      	cpsie	i
 8005ee6:	60bb      	str	r3, [r7, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005eec:	f000 f892 	bl	8006014 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fabe 	bl	8006474 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ef8:	f000 f89a 	bl	8006030 <xTaskResumeAll>
 8005efc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d107      	bne.n	8005f14 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <vTaskDelay+0x68>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20000de0 	.word	0x20000de0
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f2c:	f000 fb74 	bl	8006618 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <vTaskSuspend+0x18>
 8005f36:	4b31      	ldr	r3, [pc, #196]	; (8005ffc <vTaskSuspend+0xd8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	e000      	b.n	8005f3e <vTaskSuspend+0x1a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fdcd 	bl	8005ae4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3318      	adds	r3, #24
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fdc4 	bl	8005ae4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4827      	ldr	r0, [pc, #156]	; (8006000 <vTaskSuspend+0xdc>)
 8005f64:	f7ff fd61 	bl	8005a2a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d103      	bne.n	8005f7c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005f7c:	f000 fb80 	bl	8006680 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005f80:	4b20      	ldr	r3, [pc, #128]	; (8006004 <vTaskSuspend+0xe0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005f88:	f000 fb46 	bl	8006618 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005f8c:	f000 fa52 	bl	8006434 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005f90:	f000 fb76 	bl	8006680 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005f94:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <vTaskSuspend+0xd8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d129      	bne.n	8005ff2 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8005f9e:	4b19      	ldr	r3, [pc, #100]	; (8006004 <vTaskSuspend+0xe0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d019      	beq.n	8005fda <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <vTaskSuspend+0xe4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <vTaskSuspend+0xa4>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	b672      	cpsid	i
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	b662      	cpsie	i
 8005fc2:	60bb      	str	r3, [r7, #8]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8005fc8:	4b10      	ldr	r3, [pc, #64]	; (800600c <vTaskSuspend+0xe8>)
 8005fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fd8:	e00b      	b.n	8005ff2 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <vTaskSuspend+0xdc>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <vTaskSuspend+0xec>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d103      	bne.n	8005fee <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <vTaskSuspend+0xd8>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
	}
 8005fec:	e001      	b.n	8005ff2 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8005fee:	f000 f97b 	bl	80062e8 <vTaskSwitchContext>
	}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200008ec 	.word	0x200008ec
 8006000:	20000da8 	.word	0x20000da8
 8006004:	20000dc8 	.word	0x20000dc8
 8006008:	20000de0 	.word	0x20000de0
 800600c:	e000ed04 	.word	0xe000ed04
 8006010:	20000dbc 	.word	0x20000dbc

08006014 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <vTaskSuspendAll+0x18>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	4a03      	ldr	r2, [pc, #12]	; (800602c <vTaskSuspendAll+0x18>)
 8006020:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006022:	bf00      	nop
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000de0 	.word	0x20000de0

08006030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800603e:	4b43      	ldr	r3, [pc, #268]	; (800614c <xTaskResumeAll+0x11c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10c      	bne.n	8006060 <xTaskResumeAll+0x30>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	b672      	cpsid	i
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	b662      	cpsie	i
 800605a:	603b      	str	r3, [r7, #0]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006060:	f000 fada 	bl	8006618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006064:	4b39      	ldr	r3, [pc, #228]	; (800614c <xTaskResumeAll+0x11c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3b01      	subs	r3, #1
 800606a:	4a38      	ldr	r2, [pc, #224]	; (800614c <xTaskResumeAll+0x11c>)
 800606c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800606e:	4b37      	ldr	r3, [pc, #220]	; (800614c <xTaskResumeAll+0x11c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d162      	bne.n	800613c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006076:	4b36      	ldr	r3, [pc, #216]	; (8006150 <xTaskResumeAll+0x120>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d05e      	beq.n	800613c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800607e:	e02f      	b.n	80060e0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006080:	4b34      	ldr	r3, [pc, #208]	; (8006154 <xTaskResumeAll+0x124>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3318      	adds	r3, #24
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fd29 	bl	8005ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3304      	adds	r3, #4
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fd24 	bl	8005ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	4b2d      	ldr	r3, [pc, #180]	; (8006158 <xTaskResumeAll+0x128>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d903      	bls.n	80060b0 <xTaskResumeAll+0x80>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	4a2a      	ldr	r2, [pc, #168]	; (8006158 <xTaskResumeAll+0x128>)
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a27      	ldr	r2, [pc, #156]	; (800615c <xTaskResumeAll+0x12c>)
 80060be:	441a      	add	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7ff fcaf 	bl	8005a2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	4b23      	ldr	r3, [pc, #140]	; (8006160 <xTaskResumeAll+0x130>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80060da:	4b22      	ldr	r3, [pc, #136]	; (8006164 <xTaskResumeAll+0x134>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060e0:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <xTaskResumeAll+0x124>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1cb      	bne.n	8006080 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060ee:	f000 f9a1 	bl	8006434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060f2:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <xTaskResumeAll+0x138>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d010      	beq.n	8006120 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060fe:	f000 f837 	bl	8006170 <xTaskIncrementTick>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006108:	4b16      	ldr	r3, [pc, #88]	; (8006164 <xTaskResumeAll+0x134>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3b01      	subs	r3, #1
 8006112:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f1      	bne.n	80060fe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800611a:	4b13      	ldr	r3, [pc, #76]	; (8006168 <xTaskResumeAll+0x138>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <xTaskResumeAll+0x134>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800612c:	4b0f      	ldr	r3, [pc, #60]	; (800616c <xTaskResumeAll+0x13c>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800613c:	f000 faa0 	bl	8006680 <vPortExitCritical>

	return xAlreadyYielded;
 8006140:	68bb      	ldr	r3, [r7, #8]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000de0 	.word	0x20000de0
 8006150:	20000dbc 	.word	0x20000dbc
 8006154:	20000d80 	.word	0x20000d80
 8006158:	20000dc4 	.word	0x20000dc4
 800615c:	200008f0 	.word	0x200008f0
 8006160:	200008ec 	.word	0x200008ec
 8006164:	20000dd0 	.word	0x20000dd0
 8006168:	20000dcc 	.word	0x20000dcc
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800617a:	4b50      	ldr	r3, [pc, #320]	; (80062bc <xTaskIncrementTick+0x14c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 808b 	bne.w	800629a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006184:	4b4e      	ldr	r3, [pc, #312]	; (80062c0 <xTaskIncrementTick+0x150>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800618c:	4a4c      	ldr	r2, [pc, #304]	; (80062c0 <xTaskIncrementTick+0x150>)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d122      	bne.n	80061de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006198:	4b4a      	ldr	r3, [pc, #296]	; (80062c4 <xTaskIncrementTick+0x154>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <xTaskIncrementTick+0x4c>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	b672      	cpsid	i
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	b662      	cpsie	i
 80061b6:	603b      	str	r3, [r7, #0]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <xTaskIncrementTick+0x4a>
 80061bc:	4b41      	ldr	r3, [pc, #260]	; (80062c4 <xTaskIncrementTick+0x154>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	4b41      	ldr	r3, [pc, #260]	; (80062c8 <xTaskIncrementTick+0x158>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a3f      	ldr	r2, [pc, #252]	; (80062c4 <xTaskIncrementTick+0x154>)
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	4a3f      	ldr	r2, [pc, #252]	; (80062c8 <xTaskIncrementTick+0x158>)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4b3e      	ldr	r3, [pc, #248]	; (80062cc <xTaskIncrementTick+0x15c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	4a3d      	ldr	r2, [pc, #244]	; (80062cc <xTaskIncrementTick+0x15c>)
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	f000 f92b 	bl	8006434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061de:	4b3c      	ldr	r3, [pc, #240]	; (80062d0 <xTaskIncrementTick+0x160>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d349      	bcc.n	800627c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061e8:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <xTaskIncrementTick+0x154>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f2:	4b37      	ldr	r3, [pc, #220]	; (80062d0 <xTaskIncrementTick+0x160>)
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295
 80061f8:	601a      	str	r2, [r3, #0]
					break;
 80061fa:	e03f      	b.n	800627c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061fc:	4b31      	ldr	r3, [pc, #196]	; (80062c4 <xTaskIncrementTick+0x154>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	429a      	cmp	r2, r3
 8006212:	d203      	bcs.n	800621c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006214:	4a2e      	ldr	r2, [pc, #184]	; (80062d0 <xTaskIncrementTick+0x160>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800621a:	e02f      	b.n	800627c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	3304      	adds	r3, #4
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fc5f 	bl	8005ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	3318      	adds	r3, #24
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fc56 	bl	8005ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <xTaskIncrementTick+0x164>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d903      	bls.n	800624c <xTaskIncrementTick+0xdc>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <xTaskIncrementTick+0x164>)
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4a1f      	ldr	r2, [pc, #124]	; (80062d8 <xTaskIncrementTick+0x168>)
 800625a:	441a      	add	r2, r3
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f7ff fbe1 	bl	8005a2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626c:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <xTaskIncrementTick+0x16c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	429a      	cmp	r2, r3
 8006274:	d3b8      	bcc.n	80061e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006276:	2301      	movs	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800627a:	e7b5      	b.n	80061e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800627c:	4b17      	ldr	r3, [pc, #92]	; (80062dc <xTaskIncrementTick+0x16c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	4915      	ldr	r1, [pc, #84]	; (80062d8 <xTaskIncrementTick+0x168>)
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d907      	bls.n	80062a4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e004      	b.n	80062a4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <xTaskIncrementTick+0x170>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	4a0f      	ldr	r2, [pc, #60]	; (80062e0 <xTaskIncrementTick+0x170>)
 80062a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80062a4:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <xTaskIncrementTick+0x174>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062b0:	697b      	ldr	r3, [r7, #20]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000de0 	.word	0x20000de0
 80062c0:	20000dc0 	.word	0x20000dc0
 80062c4:	20000d78 	.word	0x20000d78
 80062c8:	20000d7c 	.word	0x20000d7c
 80062cc:	20000dd4 	.word	0x20000dd4
 80062d0:	20000ddc 	.word	0x20000ddc
 80062d4:	20000dc4 	.word	0x20000dc4
 80062d8:	200008f0 	.word	0x200008f0
 80062dc:	200008ec 	.word	0x200008ec
 80062e0:	20000dcc 	.word	0x20000dcc
 80062e4:	20000dd0 	.word	0x20000dd0

080062e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062ee:	4b2b      	ldr	r3, [pc, #172]	; (800639c <vTaskSwitchContext+0xb4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062f6:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <vTaskSwitchContext+0xb8>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062fc:	e048      	b.n	8006390 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80062fe:	4b28      	ldr	r3, [pc, #160]	; (80063a0 <vTaskSwitchContext+0xb8>)
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006304:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <vTaskSwitchContext+0xbc>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	e012      	b.n	8006332 <vTaskSwitchContext+0x4a>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10c      	bne.n	800632c <vTaskSwitchContext+0x44>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	b672      	cpsid	i
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	b662      	cpsie	i
 8006326:	607b      	str	r3, [r7, #4]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <vTaskSwitchContext+0x42>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3b01      	subs	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	491d      	ldr	r1, [pc, #116]	; (80063a8 <vTaskSwitchContext+0xc0>)
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0e2      	beq.n	800630c <vTaskSwitchContext+0x24>
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <vTaskSwitchContext+0xc0>)
 8006352:	4413      	add	r3, r2
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	605a      	str	r2, [r3, #4]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	3308      	adds	r3, #8
 8006368:	429a      	cmp	r2, r3
 800636a:	d104      	bne.n	8006376 <vTaskSwitchContext+0x8e>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4a0b      	ldr	r2, [pc, #44]	; (80063ac <vTaskSwitchContext+0xc4>)
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4a08      	ldr	r2, [pc, #32]	; (80063a4 <vTaskSwitchContext+0xbc>)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <vTaskSwitchContext+0xc4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3354      	adds	r3, #84	; 0x54
 800638c:	4a08      	ldr	r2, [pc, #32]	; (80063b0 <vTaskSwitchContext+0xc8>)
 800638e:	6013      	str	r3, [r2, #0]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20000de0 	.word	0x20000de0
 80063a0:	20000dd0 	.word	0x20000dd0
 80063a4:	20000dc4 	.word	0x20000dc4
 80063a8:	200008f0 	.word	0x200008f0
 80063ac:	200008ec 	.word	0x200008ec
 80063b0:	2000007c 	.word	0x2000007c

080063b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063ba:	2300      	movs	r3, #0
 80063bc:	607b      	str	r3, [r7, #4]
 80063be:	e00c      	b.n	80063da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4a12      	ldr	r2, [pc, #72]	; (8006414 <prvInitialiseTaskLists+0x60>)
 80063cc:	4413      	add	r3, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fafe 	bl	80059d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3301      	adds	r3, #1
 80063d8:	607b      	str	r3, [r7, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b37      	cmp	r3, #55	; 0x37
 80063de:	d9ef      	bls.n	80063c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063e0:	480d      	ldr	r0, [pc, #52]	; (8006418 <prvInitialiseTaskLists+0x64>)
 80063e2:	f7ff faf5 	bl	80059d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063e6:	480d      	ldr	r0, [pc, #52]	; (800641c <prvInitialiseTaskLists+0x68>)
 80063e8:	f7ff faf2 	bl	80059d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063ec:	480c      	ldr	r0, [pc, #48]	; (8006420 <prvInitialiseTaskLists+0x6c>)
 80063ee:	f7ff faef 	bl	80059d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063f2:	480c      	ldr	r0, [pc, #48]	; (8006424 <prvInitialiseTaskLists+0x70>)
 80063f4:	f7ff faec 	bl	80059d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063f8:	480b      	ldr	r0, [pc, #44]	; (8006428 <prvInitialiseTaskLists+0x74>)
 80063fa:	f7ff fae9 	bl	80059d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063fe:	4b0b      	ldr	r3, [pc, #44]	; (800642c <prvInitialiseTaskLists+0x78>)
 8006400:	4a05      	ldr	r2, [pc, #20]	; (8006418 <prvInitialiseTaskLists+0x64>)
 8006402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvInitialiseTaskLists+0x7c>)
 8006406:	4a05      	ldr	r2, [pc, #20]	; (800641c <prvInitialiseTaskLists+0x68>)
 8006408:	601a      	str	r2, [r3, #0]
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	200008f0 	.word	0x200008f0
 8006418:	20000d50 	.word	0x20000d50
 800641c:	20000d64 	.word	0x20000d64
 8006420:	20000d80 	.word	0x20000d80
 8006424:	20000d94 	.word	0x20000d94
 8006428:	20000da8 	.word	0x20000da8
 800642c:	20000d78 	.word	0x20000d78
 8006430:	20000d7c 	.word	0x20000d7c

08006434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <prvResetNextTaskUnblockTime+0x38>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <prvResetNextTaskUnblockTime+0x3c>)
 8006446:	f04f 32ff 	mov.w	r2, #4294967295
 800644a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800644c:	e008      	b.n	8006460 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <prvResetNextTaskUnblockTime+0x38>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <prvResetNextTaskUnblockTime+0x3c>)
 800645e:	6013      	str	r3, [r2, #0]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	20000d78 	.word	0x20000d78
 8006470:	20000ddc 	.word	0x20000ddc

08006474 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800647e:	4b21      	ldr	r3, [pc, #132]	; (8006504 <prvAddCurrentTaskToDelayedList+0x90>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006484:	4b20      	ldr	r3, [pc, #128]	; (8006508 <prvAddCurrentTaskToDelayedList+0x94>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3304      	adds	r3, #4
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fb2a 	bl	8005ae4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006496:	d10a      	bne.n	80064ae <prvAddCurrentTaskToDelayedList+0x3a>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800649e:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <prvAddCurrentTaskToDelayedList+0x94>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4819      	ldr	r0, [pc, #100]	; (800650c <prvAddCurrentTaskToDelayedList+0x98>)
 80064a8:	f7ff fabf 	bl	8005a2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064ac:	e026      	b.n	80064fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <prvAddCurrentTaskToDelayedList+0x94>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d209      	bcs.n	80064da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <prvAddCurrentTaskToDelayedList+0x9c>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <prvAddCurrentTaskToDelayedList+0x94>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f7ff facd 	bl	8005a72 <vListInsert>
}
 80064d8:	e010      	b.n	80064fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <prvAddCurrentTaskToDelayedList+0x94>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f7ff fac3 	bl	8005a72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d202      	bcs.n	80064fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064f6:	4a08      	ldr	r2, [pc, #32]	; (8006518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6013      	str	r3, [r2, #0]
}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000dc0 	.word	0x20000dc0
 8006508:	200008ec 	.word	0x200008ec
 800650c:	20000da8 	.word	0x20000da8
 8006510:	20000d7c 	.word	0x20000d7c
 8006514:	20000d78 	.word	0x20000d78
 8006518:	20000ddc 	.word	0x20000ddc

0800651c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3b04      	subs	r3, #4
 800652c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b04      	subs	r3, #4
 800653a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f023 0201 	bic.w	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b04      	subs	r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800654c:	4a0c      	ldr	r2, [pc, #48]	; (8006580 <pxPortInitialiseStack+0x64>)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b14      	subs	r3, #20
 8006556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3b04      	subs	r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f06f 0202 	mvn.w	r2, #2
 800656a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3b20      	subs	r3, #32
 8006570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006572:	68fb      	ldr	r3, [r7, #12]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	08006585 	.word	0x08006585

08006584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800658e:	4b14      	ldr	r3, [pc, #80]	; (80065e0 <prvTaskExitError+0x5c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d00c      	beq.n	80065b2 <prvTaskExitError+0x2e>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	b672      	cpsid	i
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	b662      	cpsie	i
 80065ac:	60fb      	str	r3, [r7, #12]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <prvTaskExitError+0x2c>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	b672      	cpsid	i
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	b662      	cpsie	i
 80065c6:	60bb      	str	r3, [r7, #8]
}
 80065c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065ca:	bf00      	nop
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0fc      	beq.n	80065cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000020 	.word	0x20000020
	...

080065f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <pxCurrentTCBConst2>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	f380 8809 	msr	PSP, r0
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	4770      	bx	lr
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst2>:
 8006610:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	b672      	cpsid	i
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	b662      	cpsie	i
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <vPortEnterCritical+0x60>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	4a0e      	ldr	r2, [pc, #56]	; (8006678 <vPortEnterCritical+0x60>)
 800663e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006640:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <vPortEnterCritical+0x60>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d111      	bne.n	800666c <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <vPortEnterCritical+0x64>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00c      	beq.n	800666c <vPortEnterCritical+0x54>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	b672      	cpsid	i
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	b662      	cpsie	i
 8006666:	603b      	str	r3, [r7, #0]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <vPortEnterCritical+0x52>
	}
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20000020 	.word	0x20000020
 800667c:	e000ed04 	.word	0xe000ed04

08006680 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006686:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <vPortExitCritical+0x54>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <vPortExitCritical+0x28>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	b672      	cpsid	i
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	b662      	cpsie	i
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <vPortExitCritical+0x54>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <vPortExitCritical+0x54>)
 80066b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066b2:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <vPortExitCritical+0x54>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <vPortExitCritical+0x46>
 80066ba:	2300      	movs	r3, #0
 80066bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000020 	.word	0x20000020
	...

080066e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066e0:	f3ef 8009 	mrs	r0, PSP
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <pxCurrentTCBConst>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f01e 0f10 	tst.w	lr, #16
 80066f0:	bf08      	it	eq
 80066f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	6010      	str	r0, [r2, #0]
 80066fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006704:	b672      	cpsid	i
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	b662      	cpsie	i
 8006714:	f7ff fde8 	bl	80062e8 <vTaskSwitchContext>
 8006718:	f04f 0000 	mov.w	r0, #0
 800671c:	f380 8811 	msr	BASEPRI, r0
 8006720:	bc09      	pop	{r0, r3}
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	6808      	ldr	r0, [r1, #0]
 8006726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	f01e 0f10 	tst.w	lr, #16
 800672e:	bf08      	it	eq
 8006730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006734:	f380 8809 	msr	PSP, r0
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <pxCurrentTCBConst>:
 8006740:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	b672      	cpsid	i
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	b662      	cpsie	i
 8006762:	607b      	str	r3, [r7, #4]
}
 8006764:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006766:	f7ff fd03 	bl	8006170 <xTaskIncrementTick>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <SysTick_Handler+0x44>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	2300      	movs	r3, #0
 800677a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f383 8811 	msr	BASEPRI, r3
}
 8006782:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800679c:	f7ff fc3a 	bl	8006014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067a0:	4b5b      	ldr	r3, [pc, #364]	; (8006910 <pvPortMalloc+0x180>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067a8:	f000 f91a 	bl	80069e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067ac:	4b59      	ldr	r3, [pc, #356]	; (8006914 <pvPortMalloc+0x184>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4013      	ands	r3, r2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f040 8092 	bne.w	80068de <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01f      	beq.n	8006800 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80067c0:	2208      	movs	r2, #8
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f023 0307 	bic.w	r3, r3, #7
 80067d8:	3308      	adds	r3, #8
 80067da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <pvPortMalloc+0x70>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	b672      	cpsid	i
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	b662      	cpsie	i
 80067fa:	617b      	str	r3, [r7, #20]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d06b      	beq.n	80068de <pvPortMalloc+0x14e>
 8006806:	4b44      	ldr	r3, [pc, #272]	; (8006918 <pvPortMalloc+0x188>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d866      	bhi.n	80068de <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006810:	4b42      	ldr	r3, [pc, #264]	; (800691c <pvPortMalloc+0x18c>)
 8006812:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006814:	4b41      	ldr	r3, [pc, #260]	; (800691c <pvPortMalloc+0x18c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800681a:	e004      	b.n	8006826 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d903      	bls.n	8006838 <pvPortMalloc+0xa8>
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f1      	bne.n	800681c <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006838:	4b35      	ldr	r3, [pc, #212]	; (8006910 <pvPortMalloc+0x180>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683e:	429a      	cmp	r2, r3
 8006840:	d04d      	beq.n	80068de <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2208      	movs	r2, #8
 8006848:	4413      	add	r3, r2
 800684a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	2308      	movs	r3, #8
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	429a      	cmp	r2, r3
 8006862:	d921      	bls.n	80068a8 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4413      	add	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00c      	beq.n	8006890 <pvPortMalloc+0x100>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	b672      	cpsid	i
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	b662      	cpsie	i
 800688a:	613b      	str	r3, [r7, #16]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	1ad2      	subs	r2, r2, r3
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068a2:	69b8      	ldr	r0, [r7, #24]
 80068a4:	f000 f8fe 	bl	8006aa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068a8:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <pvPortMalloc+0x188>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	4a19      	ldr	r2, [pc, #100]	; (8006918 <pvPortMalloc+0x188>)
 80068b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068b6:	4b18      	ldr	r3, [pc, #96]	; (8006918 <pvPortMalloc+0x188>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b19      	ldr	r3, [pc, #100]	; (8006920 <pvPortMalloc+0x190>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d203      	bcs.n	80068ca <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068c2:	4b15      	ldr	r3, [pc, #84]	; (8006918 <pvPortMalloc+0x188>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a16      	ldr	r2, [pc, #88]	; (8006920 <pvPortMalloc+0x190>)
 80068c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	4b11      	ldr	r3, [pc, #68]	; (8006914 <pvPortMalloc+0x184>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068de:	f7ff fba7 	bl	8006030 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00c      	beq.n	8006906 <pvPortMalloc+0x176>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	b672      	cpsid	i
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	b662      	cpsie	i
 8006900:	60fb      	str	r3, [r7, #12]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <pvPortMalloc+0x174>
	return pvReturn;
 8006906:	69fb      	ldr	r3, [r7, #28]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	200049ec 	.word	0x200049ec
 8006914:	200049f8 	.word	0x200049f8
 8006918:	200049f0 	.word	0x200049f0
 800691c:	200049e4 	.word	0x200049e4
 8006920:	200049f4 	.word	0x200049f4

08006924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d04c      	beq.n	80069d0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006936:	2308      	movs	r3, #8
 8006938:	425b      	negs	r3, r3
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	4b23      	ldr	r3, [pc, #140]	; (80069d8 <vPortFree+0xb4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4013      	ands	r3, r2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10c      	bne.n	800696c <vPortFree+0x48>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	b672      	cpsid	i
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	b662      	cpsie	i
 8006966:	60fb      	str	r3, [r7, #12]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00c      	beq.n	800698e <vPortFree+0x6a>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	60bb      	str	r3, [r7, #8]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <vPortFree+0xb4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4013      	ands	r3, r2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d019      	beq.n	80069d0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d115      	bne.n	80069d0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <vPortFree+0xb4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	43db      	mvns	r3, r3
 80069ae:	401a      	ands	r2, r3
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069b4:	f7ff fb2e 	bl	8006014 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	4b07      	ldr	r3, [pc, #28]	; (80069dc <vPortFree+0xb8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4413      	add	r3, r2
 80069c2:	4a06      	ldr	r2, [pc, #24]	; (80069dc <vPortFree+0xb8>)
 80069c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069c6:	6938      	ldr	r0, [r7, #16]
 80069c8:	f000 f86c 	bl	8006aa4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069cc:	f7ff fb30 	bl	8006030 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069d0:	bf00      	nop
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	200049f8 	.word	0x200049f8
 80069dc:	200049f0 	.word	0x200049f0

080069e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069e6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069ec:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <prvHeapInit+0xac>)
 80069ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3307      	adds	r3, #7
 80069fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0307 	bic.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <prvHeapInit+0xac>)
 8006a10:	4413      	add	r3, r2
 8006a12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a18:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <prvHeapInit+0xb0>)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a1e:	4b1c      	ldr	r3, [pc, #112]	; (8006a90 <prvHeapInit+0xb0>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1a9b      	subs	r3, r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <prvHeapInit+0xb4>)
 8006a40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a42:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <prvHeapInit+0xb4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a4a:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <prvHeapInit+0xb4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a60:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <prvHeapInit+0xb4>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a0a      	ldr	r2, [pc, #40]	; (8006a98 <prvHeapInit+0xb8>)
 8006a6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a09      	ldr	r2, [pc, #36]	; (8006a9c <prvHeapInit+0xbc>)
 8006a76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <prvHeapInit+0xc0>)
 8006a7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a7e:	601a      	str	r2, [r3, #0]
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20000de4 	.word	0x20000de4
 8006a90:	200049e4 	.word	0x200049e4
 8006a94:	200049ec 	.word	0x200049ec
 8006a98:	200049f4 	.word	0x200049f4
 8006a9c:	200049f0 	.word	0x200049f0
 8006aa0:	200049f8 	.word	0x200049f8

08006aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aac:	4b28      	ldr	r3, [pc, #160]	; (8006b50 <prvInsertBlockIntoFreeList+0xac>)
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e002      	b.n	8006ab8 <prvInsertBlockIntoFreeList+0x14>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d8f7      	bhi.n	8006ab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d108      	bne.n	8006ae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	441a      	add	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d118      	bne.n	8006b2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <prvInsertBlockIntoFreeList+0xb0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d00d      	beq.n	8006b22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	441a      	add	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	e008      	b.n	8006b34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <prvInsertBlockIntoFreeList+0xb0>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e003      	b.n	8006b34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d002      	beq.n	8006b42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	200049e4 	.word	0x200049e4
 8006b54:	200049ec 	.word	0x200049ec

08006b58 <__cvt>:
 8006b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5a:	ed2d 8b02 	vpush	{d8}
 8006b5e:	eeb0 8b40 	vmov.f64	d8, d0
 8006b62:	b085      	sub	sp, #20
 8006b64:	4617      	mov	r7, r2
 8006b66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006b68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b6a:	ee18 2a90 	vmov	r2, s17
 8006b6e:	f025 0520 	bic.w	r5, r5, #32
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	bfb6      	itet	lt
 8006b76:	222d      	movlt	r2, #45	; 0x2d
 8006b78:	2200      	movge	r2, #0
 8006b7a:	eeb1 8b40 	vneglt.f64	d8, d0
 8006b7e:	2d46      	cmp	r5, #70	; 0x46
 8006b80:	460c      	mov	r4, r1
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	d004      	beq.n	8006b90 <__cvt+0x38>
 8006b86:	2d45      	cmp	r5, #69	; 0x45
 8006b88:	d100      	bne.n	8006b8c <__cvt+0x34>
 8006b8a:	3401      	adds	r4, #1
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	e000      	b.n	8006b92 <__cvt+0x3a>
 8006b90:	2103      	movs	r1, #3
 8006b92:	ab03      	add	r3, sp, #12
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	ab02      	add	r3, sp, #8
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4633      	mov	r3, r6
 8006b9e:	eeb0 0b48 	vmov.f64	d0, d8
 8006ba2:	f000 fe51 	bl	8007848 <_dtoa_r>
 8006ba6:	2d47      	cmp	r5, #71	; 0x47
 8006ba8:	d101      	bne.n	8006bae <__cvt+0x56>
 8006baa:	07fb      	lsls	r3, r7, #31
 8006bac:	d51a      	bpl.n	8006be4 <__cvt+0x8c>
 8006bae:	2d46      	cmp	r5, #70	; 0x46
 8006bb0:	eb00 0204 	add.w	r2, r0, r4
 8006bb4:	d10c      	bne.n	8006bd0 <__cvt+0x78>
 8006bb6:	7803      	ldrb	r3, [r0, #0]
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d107      	bne.n	8006bcc <__cvt+0x74>
 8006bbc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc4:	bf1c      	itt	ne
 8006bc6:	f1c4 0401 	rsbne	r4, r4, #1
 8006bca:	6034      	strne	r4, [r6, #0]
 8006bcc:	6833      	ldr	r3, [r6, #0]
 8006bce:	441a      	add	r2, r3
 8006bd0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd8:	bf08      	it	eq
 8006bda:	9203      	streq	r2, [sp, #12]
 8006bdc:	2130      	movs	r1, #48	; 0x30
 8006bde:	9b03      	ldr	r3, [sp, #12]
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d307      	bcc.n	8006bf4 <__cvt+0x9c>
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006be8:	1a1b      	subs	r3, r3, r0
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	b005      	add	sp, #20
 8006bee:	ecbd 8b02 	vpop	{d8}
 8006bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf4:	1c5c      	adds	r4, r3, #1
 8006bf6:	9403      	str	r4, [sp, #12]
 8006bf8:	7019      	strb	r1, [r3, #0]
 8006bfa:	e7f0      	b.n	8006bde <__cvt+0x86>

08006bfc <__exponent>:
 8006bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2900      	cmp	r1, #0
 8006c02:	bfb8      	it	lt
 8006c04:	4249      	neglt	r1, r1
 8006c06:	f803 2b02 	strb.w	r2, [r3], #2
 8006c0a:	bfb4      	ite	lt
 8006c0c:	222d      	movlt	r2, #45	; 0x2d
 8006c0e:	222b      	movge	r2, #43	; 0x2b
 8006c10:	2909      	cmp	r1, #9
 8006c12:	7042      	strb	r2, [r0, #1]
 8006c14:	dd2a      	ble.n	8006c6c <__exponent+0x70>
 8006c16:	f10d 0207 	add.w	r2, sp, #7
 8006c1a:	4617      	mov	r7, r2
 8006c1c:	260a      	movs	r6, #10
 8006c1e:	4694      	mov	ip, r2
 8006c20:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c24:	fb06 1415 	mls	r4, r6, r5, r1
 8006c28:	3430      	adds	r4, #48	; 0x30
 8006c2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c2e:	460c      	mov	r4, r1
 8006c30:	2c63      	cmp	r4, #99	; 0x63
 8006c32:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c36:	4629      	mov	r1, r5
 8006c38:	dcf1      	bgt.n	8006c1e <__exponent+0x22>
 8006c3a:	3130      	adds	r1, #48	; 0x30
 8006c3c:	f1ac 0402 	sub.w	r4, ip, #2
 8006c40:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c44:	1c41      	adds	r1, r0, #1
 8006c46:	4622      	mov	r2, r4
 8006c48:	42ba      	cmp	r2, r7
 8006c4a:	d30a      	bcc.n	8006c62 <__exponent+0x66>
 8006c4c:	f10d 0209 	add.w	r2, sp, #9
 8006c50:	eba2 020c 	sub.w	r2, r2, ip
 8006c54:	42bc      	cmp	r4, r7
 8006c56:	bf88      	it	hi
 8006c58:	2200      	movhi	r2, #0
 8006c5a:	4413      	add	r3, r2
 8006c5c:	1a18      	subs	r0, r3, r0
 8006c5e:	b003      	add	sp, #12
 8006c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c62:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c66:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c6a:	e7ed      	b.n	8006c48 <__exponent+0x4c>
 8006c6c:	2330      	movs	r3, #48	; 0x30
 8006c6e:	3130      	adds	r1, #48	; 0x30
 8006c70:	7083      	strb	r3, [r0, #2]
 8006c72:	70c1      	strb	r1, [r0, #3]
 8006c74:	1d03      	adds	r3, r0, #4
 8006c76:	e7f1      	b.n	8006c5c <__exponent+0x60>

08006c78 <_printf_float>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	b08b      	sub	sp, #44	; 0x2c
 8006c7e:	460c      	mov	r4, r1
 8006c80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006c84:	4616      	mov	r6, r2
 8006c86:	461f      	mov	r7, r3
 8006c88:	4605      	mov	r5, r0
 8006c8a:	f000 fccd 	bl	8007628 <_localeconv_r>
 8006c8e:	f8d0 b000 	ldr.w	fp, [r0]
 8006c92:	4658      	mov	r0, fp
 8006c94:	f7f9 fb24 	bl	80002e0 <strlen>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ca4:	6822      	ldr	r2, [r4, #0]
 8006ca6:	3307      	adds	r3, #7
 8006ca8:	f023 0307 	bic.w	r3, r3, #7
 8006cac:	f103 0108 	add.w	r1, r3, #8
 8006cb0:	f8c8 1000 	str.w	r1, [r8]
 8006cb4:	ed93 0b00 	vldr	d0, [r3]
 8006cb8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006f18 <_printf_float+0x2a0>
 8006cbc:	eeb0 7bc0 	vabs.f64	d7, d0
 8006cc0:	eeb4 7b46 	vcmp.f64	d7, d6
 8006cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006ccc:	4682      	mov	sl, r0
 8006cce:	dd24      	ble.n	8006d1a <_printf_float+0xa2>
 8006cd0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd8:	d502      	bpl.n	8006ce0 <_printf_float+0x68>
 8006cda:	232d      	movs	r3, #45	; 0x2d
 8006cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce0:	498f      	ldr	r1, [pc, #572]	; (8006f20 <_printf_float+0x2a8>)
 8006ce2:	4b90      	ldr	r3, [pc, #576]	; (8006f24 <_printf_float+0x2ac>)
 8006ce4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006ce8:	bf94      	ite	ls
 8006cea:	4688      	movls	r8, r1
 8006cec:	4698      	movhi	r8, r3
 8006cee:	2303      	movs	r3, #3
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	f022 0204 	bic.w	r2, r2, #4
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6022      	str	r2, [r4, #0]
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	9700      	str	r7, [sp, #0]
 8006cfe:	4633      	mov	r3, r6
 8006d00:	aa09      	add	r2, sp, #36	; 0x24
 8006d02:	4621      	mov	r1, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 f9d1 	bl	80070ac <_printf_common>
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f040 808a 	bne.w	8006e24 <_printf_float+0x1ac>
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	b00b      	add	sp, #44	; 0x2c
 8006d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d22:	d709      	bvc.n	8006d38 <_printf_float+0xc0>
 8006d24:	ee10 3a90 	vmov	r3, s1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bfbc      	itt	lt
 8006d2c:	232d      	movlt	r3, #45	; 0x2d
 8006d2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d32:	497d      	ldr	r1, [pc, #500]	; (8006f28 <_printf_float+0x2b0>)
 8006d34:	4b7d      	ldr	r3, [pc, #500]	; (8006f2c <_printf_float+0x2b4>)
 8006d36:	e7d5      	b.n	8006ce4 <_printf_float+0x6c>
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d3e:	9104      	str	r1, [sp, #16]
 8006d40:	1c59      	adds	r1, r3, #1
 8006d42:	d13c      	bne.n	8006dbe <_printf_float+0x146>
 8006d44:	2306      	movs	r3, #6
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	9303      	str	r3, [sp, #12]
 8006d4c:	ab08      	add	r3, sp, #32
 8006d4e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006d52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d56:	ab07      	add	r3, sp, #28
 8006d58:	6861      	ldr	r1, [r4, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	6022      	str	r2, [r4, #0]
 8006d5e:	f10d 031b 	add.w	r3, sp, #27
 8006d62:	4628      	mov	r0, r5
 8006d64:	f7ff fef8 	bl	8006b58 <__cvt>
 8006d68:	9b04      	ldr	r3, [sp, #16]
 8006d6a:	9907      	ldr	r1, [sp, #28]
 8006d6c:	2b47      	cmp	r3, #71	; 0x47
 8006d6e:	4680      	mov	r8, r0
 8006d70:	d108      	bne.n	8006d84 <_printf_float+0x10c>
 8006d72:	1cc8      	adds	r0, r1, #3
 8006d74:	db02      	blt.n	8006d7c <_printf_float+0x104>
 8006d76:	6863      	ldr	r3, [r4, #4]
 8006d78:	4299      	cmp	r1, r3
 8006d7a:	dd41      	ble.n	8006e00 <_printf_float+0x188>
 8006d7c:	f1a9 0902 	sub.w	r9, r9, #2
 8006d80:	fa5f f989 	uxtb.w	r9, r9
 8006d84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d88:	d820      	bhi.n	8006dcc <_printf_float+0x154>
 8006d8a:	3901      	subs	r1, #1
 8006d8c:	464a      	mov	r2, r9
 8006d8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d92:	9107      	str	r1, [sp, #28]
 8006d94:	f7ff ff32 	bl	8006bfc <__exponent>
 8006d98:	9a08      	ldr	r2, [sp, #32]
 8006d9a:	9004      	str	r0, [sp, #16]
 8006d9c:	1813      	adds	r3, r2, r0
 8006d9e:	2a01      	cmp	r2, #1
 8006da0:	6123      	str	r3, [r4, #16]
 8006da2:	dc02      	bgt.n	8006daa <_printf_float+0x132>
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	07d2      	lsls	r2, r2, #31
 8006da8:	d501      	bpl.n	8006dae <_printf_float+0x136>
 8006daa:	3301      	adds	r3, #1
 8006dac:	6123      	str	r3, [r4, #16]
 8006dae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0a2      	beq.n	8006cfc <_printf_float+0x84>
 8006db6:	232d      	movs	r3, #45	; 0x2d
 8006db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dbc:	e79e      	b.n	8006cfc <_printf_float+0x84>
 8006dbe:	9904      	ldr	r1, [sp, #16]
 8006dc0:	2947      	cmp	r1, #71	; 0x47
 8006dc2:	d1c1      	bne.n	8006d48 <_printf_float+0xd0>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1bf      	bne.n	8006d48 <_printf_float+0xd0>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e7bc      	b.n	8006d46 <_printf_float+0xce>
 8006dcc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006dd0:	d118      	bne.n	8006e04 <_printf_float+0x18c>
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	6863      	ldr	r3, [r4, #4]
 8006dd6:	dd0b      	ble.n	8006df0 <_printf_float+0x178>
 8006dd8:	6121      	str	r1, [r4, #16]
 8006dda:	b913      	cbnz	r3, 8006de2 <_printf_float+0x16a>
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	07d0      	lsls	r0, r2, #31
 8006de0:	d502      	bpl.n	8006de8 <_printf_float+0x170>
 8006de2:	3301      	adds	r3, #1
 8006de4:	440b      	add	r3, r1
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	2300      	movs	r3, #0
 8006dea:	65a1      	str	r1, [r4, #88]	; 0x58
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	e7de      	b.n	8006dae <_printf_float+0x136>
 8006df0:	b913      	cbnz	r3, 8006df8 <_printf_float+0x180>
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	07d2      	lsls	r2, r2, #31
 8006df6:	d501      	bpl.n	8006dfc <_printf_float+0x184>
 8006df8:	3302      	adds	r3, #2
 8006dfa:	e7f4      	b.n	8006de6 <_printf_float+0x16e>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e7f2      	b.n	8006de6 <_printf_float+0x16e>
 8006e00:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e04:	9b08      	ldr	r3, [sp, #32]
 8006e06:	4299      	cmp	r1, r3
 8006e08:	db05      	blt.n	8006e16 <_printf_float+0x19e>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6121      	str	r1, [r4, #16]
 8006e0e:	07d8      	lsls	r0, r3, #31
 8006e10:	d5ea      	bpl.n	8006de8 <_printf_float+0x170>
 8006e12:	1c4b      	adds	r3, r1, #1
 8006e14:	e7e7      	b.n	8006de6 <_printf_float+0x16e>
 8006e16:	2900      	cmp	r1, #0
 8006e18:	bfd4      	ite	le
 8006e1a:	f1c1 0202 	rsble	r2, r1, #2
 8006e1e:	2201      	movgt	r2, #1
 8006e20:	4413      	add	r3, r2
 8006e22:	e7e0      	b.n	8006de6 <_printf_float+0x16e>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	055a      	lsls	r2, r3, #21
 8006e28:	d407      	bmi.n	8006e3a <_printf_float+0x1c2>
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4628      	mov	r0, r5
 8006e32:	47b8      	blx	r7
 8006e34:	3001      	adds	r0, #1
 8006e36:	d12a      	bne.n	8006e8e <_printf_float+0x216>
 8006e38:	e76a      	b.n	8006d10 <_printf_float+0x98>
 8006e3a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e3e:	f240 80e0 	bls.w	8007002 <_printf_float+0x38a>
 8006e42:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4e:	d133      	bne.n	8006eb8 <_printf_float+0x240>
 8006e50:	4a37      	ldr	r2, [pc, #220]	; (8006f30 <_printf_float+0x2b8>)
 8006e52:	2301      	movs	r3, #1
 8006e54:	4631      	mov	r1, r6
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	f43f af58 	beq.w	8006d10 <_printf_float+0x98>
 8006e60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	db02      	blt.n	8006e6e <_printf_float+0x1f6>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	07d8      	lsls	r0, r3, #31
 8006e6c:	d50f      	bpl.n	8006e8e <_printf_float+0x216>
 8006e6e:	4653      	mov	r3, sl
 8006e70:	465a      	mov	r2, fp
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f43f af49 	beq.w	8006d10 <_printf_float+0x98>
 8006e7e:	f04f 0800 	mov.w	r8, #0
 8006e82:	f104 091a 	add.w	r9, r4, #26
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	4543      	cmp	r3, r8
 8006e8c:	dc09      	bgt.n	8006ea2 <_printf_float+0x22a>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	079b      	lsls	r3, r3, #30
 8006e92:	f100 8106 	bmi.w	80070a2 <_printf_float+0x42a>
 8006e96:	68e0      	ldr	r0, [r4, #12]
 8006e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	bfb8      	it	lt
 8006e9e:	4618      	movlt	r0, r3
 8006ea0:	e738      	b.n	8006d14 <_printf_float+0x9c>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	464a      	mov	r2, r9
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f af2f 	beq.w	8006d10 <_printf_float+0x98>
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	e7e6      	b.n	8006e86 <_printf_float+0x20e>
 8006eb8:	9b07      	ldr	r3, [sp, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	dc3a      	bgt.n	8006f34 <_printf_float+0x2bc>
 8006ebe:	4a1c      	ldr	r2, [pc, #112]	; (8006f30 <_printf_float+0x2b8>)
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b8      	blx	r7
 8006ec8:	3001      	adds	r0, #1
 8006eca:	f43f af21 	beq.w	8006d10 <_printf_float+0x98>
 8006ece:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	d102      	bne.n	8006edc <_printf_float+0x264>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	07d9      	lsls	r1, r3, #31
 8006eda:	d5d8      	bpl.n	8006e8e <_printf_float+0x216>
 8006edc:	4653      	mov	r3, sl
 8006ede:	465a      	mov	r2, fp
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f af12 	beq.w	8006d10 <_printf_float+0x98>
 8006eec:	f04f 0900 	mov.w	r9, #0
 8006ef0:	f104 0a1a 	add.w	sl, r4, #26
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	425b      	negs	r3, r3
 8006ef8:	454b      	cmp	r3, r9
 8006efa:	dc01      	bgt.n	8006f00 <_printf_float+0x288>
 8006efc:	9b08      	ldr	r3, [sp, #32]
 8006efe:	e795      	b.n	8006e2c <_printf_float+0x1b4>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4652      	mov	r2, sl
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f af00 	beq.w	8006d10 <_printf_float+0x98>
 8006f10:	f109 0901 	add.w	r9, r9, #1
 8006f14:	e7ee      	b.n	8006ef4 <_printf_float+0x27c>
 8006f16:	bf00      	nop
 8006f18:	ffffffff 	.word	0xffffffff
 8006f1c:	7fefffff 	.word	0x7fefffff
 8006f20:	080099ac 	.word	0x080099ac
 8006f24:	080099b0 	.word	0x080099b0
 8006f28:	080099b4 	.word	0x080099b4
 8006f2c:	080099b8 	.word	0x080099b8
 8006f30:	080099bc 	.word	0x080099bc
 8006f34:	9a08      	ldr	r2, [sp, #32]
 8006f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	bfa8      	it	ge
 8006f3c:	461a      	movge	r2, r3
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	4691      	mov	r9, r2
 8006f42:	dc38      	bgt.n	8006fb6 <_printf_float+0x33e>
 8006f44:	2300      	movs	r3, #0
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f4c:	f104 021a 	add.w	r2, r4, #26
 8006f50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f52:	9905      	ldr	r1, [sp, #20]
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	eba3 0309 	sub.w	r3, r3, r9
 8006f5a:	428b      	cmp	r3, r1
 8006f5c:	dc33      	bgt.n	8006fc6 <_printf_float+0x34e>
 8006f5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	db3c      	blt.n	8006fe0 <_printf_float+0x368>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	07da      	lsls	r2, r3, #31
 8006f6a:	d439      	bmi.n	8006fe0 <_printf_float+0x368>
 8006f6c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006f70:	eba2 0903 	sub.w	r9, r2, r3
 8006f74:	9b04      	ldr	r3, [sp, #16]
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	4591      	cmp	r9, r2
 8006f7a:	bfa8      	it	ge
 8006f7c:	4691      	movge	r9, r2
 8006f7e:	f1b9 0f00 	cmp.w	r9, #0
 8006f82:	dc35      	bgt.n	8006ff0 <_printf_float+0x378>
 8006f84:	f04f 0800 	mov.w	r8, #0
 8006f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f8c:	f104 0a1a 	add.w	sl, r4, #26
 8006f90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006f94:	1a9b      	subs	r3, r3, r2
 8006f96:	eba3 0309 	sub.w	r3, r3, r9
 8006f9a:	4543      	cmp	r3, r8
 8006f9c:	f77f af77 	ble.w	8006e8e <_printf_float+0x216>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f aeb0 	beq.w	8006d10 <_printf_float+0x98>
 8006fb0:	f108 0801 	add.w	r8, r8, #1
 8006fb4:	e7ec      	b.n	8006f90 <_printf_float+0x318>
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4642      	mov	r2, r8
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d1bf      	bne.n	8006f44 <_printf_float+0x2cc>
 8006fc4:	e6a4      	b.n	8006d10 <_printf_float+0x98>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	9204      	str	r2, [sp, #16]
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f43f ae9d 	beq.w	8006d10 <_printf_float+0x98>
 8006fd6:	9b05      	ldr	r3, [sp, #20]
 8006fd8:	9a04      	ldr	r2, [sp, #16]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	9305      	str	r3, [sp, #20]
 8006fde:	e7b7      	b.n	8006f50 <_printf_float+0x2d8>
 8006fe0:	4653      	mov	r3, sl
 8006fe2:	465a      	mov	r2, fp
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	d1be      	bne.n	8006f6c <_printf_float+0x2f4>
 8006fee:	e68f      	b.n	8006d10 <_printf_float+0x98>
 8006ff0:	9a04      	ldr	r2, [sp, #16]
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	4442      	add	r2, r8
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d1c1      	bne.n	8006f84 <_printf_float+0x30c>
 8007000:	e686      	b.n	8006d10 <_printf_float+0x98>
 8007002:	9a08      	ldr	r2, [sp, #32]
 8007004:	2a01      	cmp	r2, #1
 8007006:	dc01      	bgt.n	800700c <_printf_float+0x394>
 8007008:	07db      	lsls	r3, r3, #31
 800700a:	d537      	bpl.n	800707c <_printf_float+0x404>
 800700c:	2301      	movs	r3, #1
 800700e:	4642      	mov	r2, r8
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f ae7a 	beq.w	8006d10 <_printf_float+0x98>
 800701c:	4653      	mov	r3, sl
 800701e:	465a      	mov	r2, fp
 8007020:	4631      	mov	r1, r6
 8007022:	4628      	mov	r0, r5
 8007024:	47b8      	blx	r7
 8007026:	3001      	adds	r0, #1
 8007028:	f43f ae72 	beq.w	8006d10 <_printf_float+0x98>
 800702c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007030:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007038:	9b08      	ldr	r3, [sp, #32]
 800703a:	d01a      	beq.n	8007072 <_printf_float+0x3fa>
 800703c:	3b01      	subs	r3, #1
 800703e:	f108 0201 	add.w	r2, r8, #1
 8007042:	4631      	mov	r1, r6
 8007044:	4628      	mov	r0, r5
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	d10e      	bne.n	800706a <_printf_float+0x3f2>
 800704c:	e660      	b.n	8006d10 <_printf_float+0x98>
 800704e:	2301      	movs	r3, #1
 8007050:	464a      	mov	r2, r9
 8007052:	4631      	mov	r1, r6
 8007054:	4628      	mov	r0, r5
 8007056:	47b8      	blx	r7
 8007058:	3001      	adds	r0, #1
 800705a:	f43f ae59 	beq.w	8006d10 <_printf_float+0x98>
 800705e:	f108 0801 	add.w	r8, r8, #1
 8007062:	9b08      	ldr	r3, [sp, #32]
 8007064:	3b01      	subs	r3, #1
 8007066:	4543      	cmp	r3, r8
 8007068:	dcf1      	bgt.n	800704e <_printf_float+0x3d6>
 800706a:	9b04      	ldr	r3, [sp, #16]
 800706c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007070:	e6dd      	b.n	8006e2e <_printf_float+0x1b6>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	f104 091a 	add.w	r9, r4, #26
 800707a:	e7f2      	b.n	8007062 <_printf_float+0x3ea>
 800707c:	2301      	movs	r3, #1
 800707e:	4642      	mov	r2, r8
 8007080:	e7df      	b.n	8007042 <_printf_float+0x3ca>
 8007082:	2301      	movs	r3, #1
 8007084:	464a      	mov	r2, r9
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f ae3f 	beq.w	8006d10 <_printf_float+0x98>
 8007092:	f108 0801 	add.w	r8, r8, #1
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	9909      	ldr	r1, [sp, #36]	; 0x24
 800709a:	1a5b      	subs	r3, r3, r1
 800709c:	4543      	cmp	r3, r8
 800709e:	dcf0      	bgt.n	8007082 <_printf_float+0x40a>
 80070a0:	e6f9      	b.n	8006e96 <_printf_float+0x21e>
 80070a2:	f04f 0800 	mov.w	r8, #0
 80070a6:	f104 0919 	add.w	r9, r4, #25
 80070aa:	e7f4      	b.n	8007096 <_printf_float+0x41e>

080070ac <_printf_common>:
 80070ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b0:	4616      	mov	r6, r2
 80070b2:	4699      	mov	r9, r3
 80070b4:	688a      	ldr	r2, [r1, #8]
 80070b6:	690b      	ldr	r3, [r1, #16]
 80070b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070bc:	4293      	cmp	r3, r2
 80070be:	bfb8      	it	lt
 80070c0:	4613      	movlt	r3, r2
 80070c2:	6033      	str	r3, [r6, #0]
 80070c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c8:	4607      	mov	r7, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	b10a      	cbz	r2, 80070d2 <_printf_common+0x26>
 80070ce:	3301      	adds	r3, #1
 80070d0:	6033      	str	r3, [r6, #0]
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	0699      	lsls	r1, r3, #26
 80070d6:	bf42      	ittt	mi
 80070d8:	6833      	ldrmi	r3, [r6, #0]
 80070da:	3302      	addmi	r3, #2
 80070dc:	6033      	strmi	r3, [r6, #0]
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	f015 0506 	ands.w	r5, r5, #6
 80070e4:	d106      	bne.n	80070f4 <_printf_common+0x48>
 80070e6:	f104 0a19 	add.w	sl, r4, #25
 80070ea:	68e3      	ldr	r3, [r4, #12]
 80070ec:	6832      	ldr	r2, [r6, #0]
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	dc26      	bgt.n	8007142 <_printf_common+0x96>
 80070f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070f8:	1e13      	subs	r3, r2, #0
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	bf18      	it	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	0692      	lsls	r2, r2, #26
 8007102:	d42b      	bmi.n	800715c <_printf_common+0xb0>
 8007104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007108:	4649      	mov	r1, r9
 800710a:	4638      	mov	r0, r7
 800710c:	47c0      	blx	r8
 800710e:	3001      	adds	r0, #1
 8007110:	d01e      	beq.n	8007150 <_printf_common+0xa4>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	6922      	ldr	r2, [r4, #16]
 8007116:	f003 0306 	and.w	r3, r3, #6
 800711a:	2b04      	cmp	r3, #4
 800711c:	bf02      	ittt	eq
 800711e:	68e5      	ldreq	r5, [r4, #12]
 8007120:	6833      	ldreq	r3, [r6, #0]
 8007122:	1aed      	subeq	r5, r5, r3
 8007124:	68a3      	ldr	r3, [r4, #8]
 8007126:	bf0c      	ite	eq
 8007128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800712c:	2500      	movne	r5, #0
 800712e:	4293      	cmp	r3, r2
 8007130:	bfc4      	itt	gt
 8007132:	1a9b      	subgt	r3, r3, r2
 8007134:	18ed      	addgt	r5, r5, r3
 8007136:	2600      	movs	r6, #0
 8007138:	341a      	adds	r4, #26
 800713a:	42b5      	cmp	r5, r6
 800713c:	d11a      	bne.n	8007174 <_printf_common+0xc8>
 800713e:	2000      	movs	r0, #0
 8007140:	e008      	b.n	8007154 <_printf_common+0xa8>
 8007142:	2301      	movs	r3, #1
 8007144:	4652      	mov	r2, sl
 8007146:	4649      	mov	r1, r9
 8007148:	4638      	mov	r0, r7
 800714a:	47c0      	blx	r8
 800714c:	3001      	adds	r0, #1
 800714e:	d103      	bne.n	8007158 <_printf_common+0xac>
 8007150:	f04f 30ff 	mov.w	r0, #4294967295
 8007154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007158:	3501      	adds	r5, #1
 800715a:	e7c6      	b.n	80070ea <_printf_common+0x3e>
 800715c:	18e1      	adds	r1, r4, r3
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	2030      	movs	r0, #48	; 0x30
 8007162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007166:	4422      	add	r2, r4
 8007168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800716c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007170:	3302      	adds	r3, #2
 8007172:	e7c7      	b.n	8007104 <_printf_common+0x58>
 8007174:	2301      	movs	r3, #1
 8007176:	4622      	mov	r2, r4
 8007178:	4649      	mov	r1, r9
 800717a:	4638      	mov	r0, r7
 800717c:	47c0      	blx	r8
 800717e:	3001      	adds	r0, #1
 8007180:	d0e6      	beq.n	8007150 <_printf_common+0xa4>
 8007182:	3601      	adds	r6, #1
 8007184:	e7d9      	b.n	800713a <_printf_common+0x8e>
	...

08007188 <_printf_i>:
 8007188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800718c:	7e0f      	ldrb	r7, [r1, #24]
 800718e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007190:	2f78      	cmp	r7, #120	; 0x78
 8007192:	4691      	mov	r9, r2
 8007194:	4680      	mov	r8, r0
 8007196:	460c      	mov	r4, r1
 8007198:	469a      	mov	sl, r3
 800719a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800719e:	d807      	bhi.n	80071b0 <_printf_i+0x28>
 80071a0:	2f62      	cmp	r7, #98	; 0x62
 80071a2:	d80a      	bhi.n	80071ba <_printf_i+0x32>
 80071a4:	2f00      	cmp	r7, #0
 80071a6:	f000 80d4 	beq.w	8007352 <_printf_i+0x1ca>
 80071aa:	2f58      	cmp	r7, #88	; 0x58
 80071ac:	f000 80c0 	beq.w	8007330 <_printf_i+0x1a8>
 80071b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071b8:	e03a      	b.n	8007230 <_printf_i+0xa8>
 80071ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071be:	2b15      	cmp	r3, #21
 80071c0:	d8f6      	bhi.n	80071b0 <_printf_i+0x28>
 80071c2:	a101      	add	r1, pc, #4	; (adr r1, 80071c8 <_printf_i+0x40>)
 80071c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071c8:	08007221 	.word	0x08007221
 80071cc:	08007235 	.word	0x08007235
 80071d0:	080071b1 	.word	0x080071b1
 80071d4:	080071b1 	.word	0x080071b1
 80071d8:	080071b1 	.word	0x080071b1
 80071dc:	080071b1 	.word	0x080071b1
 80071e0:	08007235 	.word	0x08007235
 80071e4:	080071b1 	.word	0x080071b1
 80071e8:	080071b1 	.word	0x080071b1
 80071ec:	080071b1 	.word	0x080071b1
 80071f0:	080071b1 	.word	0x080071b1
 80071f4:	08007339 	.word	0x08007339
 80071f8:	08007261 	.word	0x08007261
 80071fc:	080072f3 	.word	0x080072f3
 8007200:	080071b1 	.word	0x080071b1
 8007204:	080071b1 	.word	0x080071b1
 8007208:	0800735b 	.word	0x0800735b
 800720c:	080071b1 	.word	0x080071b1
 8007210:	08007261 	.word	0x08007261
 8007214:	080071b1 	.word	0x080071b1
 8007218:	080071b1 	.word	0x080071b1
 800721c:	080072fb 	.word	0x080072fb
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	1d1a      	adds	r2, r3, #4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	602a      	str	r2, [r5, #0]
 8007228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800722c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007230:	2301      	movs	r3, #1
 8007232:	e09f      	b.n	8007374 <_printf_i+0x1ec>
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	682b      	ldr	r3, [r5, #0]
 8007238:	0607      	lsls	r7, r0, #24
 800723a:	f103 0104 	add.w	r1, r3, #4
 800723e:	6029      	str	r1, [r5, #0]
 8007240:	d501      	bpl.n	8007246 <_printf_i+0xbe>
 8007242:	681e      	ldr	r6, [r3, #0]
 8007244:	e003      	b.n	800724e <_printf_i+0xc6>
 8007246:	0646      	lsls	r6, r0, #25
 8007248:	d5fb      	bpl.n	8007242 <_printf_i+0xba>
 800724a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800724e:	2e00      	cmp	r6, #0
 8007250:	da03      	bge.n	800725a <_printf_i+0xd2>
 8007252:	232d      	movs	r3, #45	; 0x2d
 8007254:	4276      	negs	r6, r6
 8007256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725a:	485a      	ldr	r0, [pc, #360]	; (80073c4 <_printf_i+0x23c>)
 800725c:	230a      	movs	r3, #10
 800725e:	e012      	b.n	8007286 <_printf_i+0xfe>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	6820      	ldr	r0, [r4, #0]
 8007264:	1d19      	adds	r1, r3, #4
 8007266:	6029      	str	r1, [r5, #0]
 8007268:	0605      	lsls	r5, r0, #24
 800726a:	d501      	bpl.n	8007270 <_printf_i+0xe8>
 800726c:	681e      	ldr	r6, [r3, #0]
 800726e:	e002      	b.n	8007276 <_printf_i+0xee>
 8007270:	0641      	lsls	r1, r0, #25
 8007272:	d5fb      	bpl.n	800726c <_printf_i+0xe4>
 8007274:	881e      	ldrh	r6, [r3, #0]
 8007276:	4853      	ldr	r0, [pc, #332]	; (80073c4 <_printf_i+0x23c>)
 8007278:	2f6f      	cmp	r7, #111	; 0x6f
 800727a:	bf0c      	ite	eq
 800727c:	2308      	moveq	r3, #8
 800727e:	230a      	movne	r3, #10
 8007280:	2100      	movs	r1, #0
 8007282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007286:	6865      	ldr	r5, [r4, #4]
 8007288:	60a5      	str	r5, [r4, #8]
 800728a:	2d00      	cmp	r5, #0
 800728c:	bfa2      	ittt	ge
 800728e:	6821      	ldrge	r1, [r4, #0]
 8007290:	f021 0104 	bicge.w	r1, r1, #4
 8007294:	6021      	strge	r1, [r4, #0]
 8007296:	b90e      	cbnz	r6, 800729c <_printf_i+0x114>
 8007298:	2d00      	cmp	r5, #0
 800729a:	d04b      	beq.n	8007334 <_printf_i+0x1ac>
 800729c:	4615      	mov	r5, r2
 800729e:	fbb6 f1f3 	udiv	r1, r6, r3
 80072a2:	fb03 6711 	mls	r7, r3, r1, r6
 80072a6:	5dc7      	ldrb	r7, [r0, r7]
 80072a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072ac:	4637      	mov	r7, r6
 80072ae:	42bb      	cmp	r3, r7
 80072b0:	460e      	mov	r6, r1
 80072b2:	d9f4      	bls.n	800729e <_printf_i+0x116>
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d10b      	bne.n	80072d0 <_printf_i+0x148>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	07de      	lsls	r6, r3, #31
 80072bc:	d508      	bpl.n	80072d0 <_printf_i+0x148>
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	6861      	ldr	r1, [r4, #4]
 80072c2:	4299      	cmp	r1, r3
 80072c4:	bfde      	ittt	le
 80072c6:	2330      	movle	r3, #48	; 0x30
 80072c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072d0:	1b52      	subs	r2, r2, r5
 80072d2:	6122      	str	r2, [r4, #16]
 80072d4:	f8cd a000 	str.w	sl, [sp]
 80072d8:	464b      	mov	r3, r9
 80072da:	aa03      	add	r2, sp, #12
 80072dc:	4621      	mov	r1, r4
 80072de:	4640      	mov	r0, r8
 80072e0:	f7ff fee4 	bl	80070ac <_printf_common>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d14a      	bne.n	800737e <_printf_i+0x1f6>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	b004      	add	sp, #16
 80072ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	f043 0320 	orr.w	r3, r3, #32
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	4833      	ldr	r0, [pc, #204]	; (80073c8 <_printf_i+0x240>)
 80072fc:	2778      	movs	r7, #120	; 0x78
 80072fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	6829      	ldr	r1, [r5, #0]
 8007306:	061f      	lsls	r7, r3, #24
 8007308:	f851 6b04 	ldr.w	r6, [r1], #4
 800730c:	d402      	bmi.n	8007314 <_printf_i+0x18c>
 800730e:	065f      	lsls	r7, r3, #25
 8007310:	bf48      	it	mi
 8007312:	b2b6      	uxthmi	r6, r6
 8007314:	07df      	lsls	r7, r3, #31
 8007316:	bf48      	it	mi
 8007318:	f043 0320 	orrmi.w	r3, r3, #32
 800731c:	6029      	str	r1, [r5, #0]
 800731e:	bf48      	it	mi
 8007320:	6023      	strmi	r3, [r4, #0]
 8007322:	b91e      	cbnz	r6, 800732c <_printf_i+0x1a4>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	f023 0320 	bic.w	r3, r3, #32
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	2310      	movs	r3, #16
 800732e:	e7a7      	b.n	8007280 <_printf_i+0xf8>
 8007330:	4824      	ldr	r0, [pc, #144]	; (80073c4 <_printf_i+0x23c>)
 8007332:	e7e4      	b.n	80072fe <_printf_i+0x176>
 8007334:	4615      	mov	r5, r2
 8007336:	e7bd      	b.n	80072b4 <_printf_i+0x12c>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	6826      	ldr	r6, [r4, #0]
 800733c:	6961      	ldr	r1, [r4, #20]
 800733e:	1d18      	adds	r0, r3, #4
 8007340:	6028      	str	r0, [r5, #0]
 8007342:	0635      	lsls	r5, r6, #24
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	d501      	bpl.n	800734c <_printf_i+0x1c4>
 8007348:	6019      	str	r1, [r3, #0]
 800734a:	e002      	b.n	8007352 <_printf_i+0x1ca>
 800734c:	0670      	lsls	r0, r6, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0x1c0>
 8007350:	8019      	strh	r1, [r3, #0]
 8007352:	2300      	movs	r3, #0
 8007354:	6123      	str	r3, [r4, #16]
 8007356:	4615      	mov	r5, r2
 8007358:	e7bc      	b.n	80072d4 <_printf_i+0x14c>
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	1d1a      	adds	r2, r3, #4
 800735e:	602a      	str	r2, [r5, #0]
 8007360:	681d      	ldr	r5, [r3, #0]
 8007362:	6862      	ldr	r2, [r4, #4]
 8007364:	2100      	movs	r1, #0
 8007366:	4628      	mov	r0, r5
 8007368:	f7f8 ff6a 	bl	8000240 <memchr>
 800736c:	b108      	cbz	r0, 8007372 <_printf_i+0x1ea>
 800736e:	1b40      	subs	r0, r0, r5
 8007370:	6060      	str	r0, [r4, #4]
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	2300      	movs	r3, #0
 8007378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800737c:	e7aa      	b.n	80072d4 <_printf_i+0x14c>
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	462a      	mov	r2, r5
 8007382:	4649      	mov	r1, r9
 8007384:	4640      	mov	r0, r8
 8007386:	47d0      	blx	sl
 8007388:	3001      	adds	r0, #1
 800738a:	d0ad      	beq.n	80072e8 <_printf_i+0x160>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	079b      	lsls	r3, r3, #30
 8007390:	d413      	bmi.n	80073ba <_printf_i+0x232>
 8007392:	68e0      	ldr	r0, [r4, #12]
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	4298      	cmp	r0, r3
 8007398:	bfb8      	it	lt
 800739a:	4618      	movlt	r0, r3
 800739c:	e7a6      	b.n	80072ec <_printf_i+0x164>
 800739e:	2301      	movs	r3, #1
 80073a0:	4632      	mov	r2, r6
 80073a2:	4649      	mov	r1, r9
 80073a4:	4640      	mov	r0, r8
 80073a6:	47d0      	blx	sl
 80073a8:	3001      	adds	r0, #1
 80073aa:	d09d      	beq.n	80072e8 <_printf_i+0x160>
 80073ac:	3501      	adds	r5, #1
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	9903      	ldr	r1, [sp, #12]
 80073b2:	1a5b      	subs	r3, r3, r1
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	dcf2      	bgt.n	800739e <_printf_i+0x216>
 80073b8:	e7eb      	b.n	8007392 <_printf_i+0x20a>
 80073ba:	2500      	movs	r5, #0
 80073bc:	f104 0619 	add.w	r6, r4, #25
 80073c0:	e7f5      	b.n	80073ae <_printf_i+0x226>
 80073c2:	bf00      	nop
 80073c4:	080099be 	.word	0x080099be
 80073c8:	080099cf 	.word	0x080099cf

080073cc <std>:
 80073cc:	2300      	movs	r3, #0
 80073ce:	b510      	push	{r4, lr}
 80073d0:	4604      	mov	r4, r0
 80073d2:	e9c0 3300 	strd	r3, r3, [r0]
 80073d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073da:	6083      	str	r3, [r0, #8]
 80073dc:	8181      	strh	r1, [r0, #12]
 80073de:	6643      	str	r3, [r0, #100]	; 0x64
 80073e0:	81c2      	strh	r2, [r0, #14]
 80073e2:	6183      	str	r3, [r0, #24]
 80073e4:	4619      	mov	r1, r3
 80073e6:	2208      	movs	r2, #8
 80073e8:	305c      	adds	r0, #92	; 0x5c
 80073ea:	f000 f914 	bl	8007616 <memset>
 80073ee:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <std+0x58>)
 80073f0:	6263      	str	r3, [r4, #36]	; 0x24
 80073f2:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <std+0x5c>)
 80073f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073f6:	4b0d      	ldr	r3, [pc, #52]	; (800742c <std+0x60>)
 80073f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073fa:	4b0d      	ldr	r3, [pc, #52]	; (8007430 <std+0x64>)
 80073fc:	6323      	str	r3, [r4, #48]	; 0x30
 80073fe:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <std+0x68>)
 8007400:	6224      	str	r4, [r4, #32]
 8007402:	429c      	cmp	r4, r3
 8007404:	d006      	beq.n	8007414 <std+0x48>
 8007406:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800740a:	4294      	cmp	r4, r2
 800740c:	d002      	beq.n	8007414 <std+0x48>
 800740e:	33d0      	adds	r3, #208	; 0xd0
 8007410:	429c      	cmp	r4, r3
 8007412:	d105      	bne.n	8007420 <std+0x54>
 8007414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800741c:	f000 b978 	b.w	8007710 <__retarget_lock_init_recursive>
 8007420:	bd10      	pop	{r4, pc}
 8007422:	bf00      	nop
 8007424:	08007591 	.word	0x08007591
 8007428:	080075b3 	.word	0x080075b3
 800742c:	080075eb 	.word	0x080075eb
 8007430:	0800760f 	.word	0x0800760f
 8007434:	200049fc 	.word	0x200049fc

08007438 <stdio_exit_handler>:
 8007438:	4a02      	ldr	r2, [pc, #8]	; (8007444 <stdio_exit_handler+0xc>)
 800743a:	4903      	ldr	r1, [pc, #12]	; (8007448 <stdio_exit_handler+0x10>)
 800743c:	4803      	ldr	r0, [pc, #12]	; (800744c <stdio_exit_handler+0x14>)
 800743e:	f000 b869 	b.w	8007514 <_fwalk_sglue>
 8007442:	bf00      	nop
 8007444:	20000024 	.word	0x20000024
 8007448:	08008fd5 	.word	0x08008fd5
 800744c:	20000030 	.word	0x20000030

08007450 <cleanup_stdio>:
 8007450:	6841      	ldr	r1, [r0, #4]
 8007452:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <cleanup_stdio+0x34>)
 8007454:	4299      	cmp	r1, r3
 8007456:	b510      	push	{r4, lr}
 8007458:	4604      	mov	r4, r0
 800745a:	d001      	beq.n	8007460 <cleanup_stdio+0x10>
 800745c:	f001 fdba 	bl	8008fd4 <_fflush_r>
 8007460:	68a1      	ldr	r1, [r4, #8]
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <cleanup_stdio+0x38>)
 8007464:	4299      	cmp	r1, r3
 8007466:	d002      	beq.n	800746e <cleanup_stdio+0x1e>
 8007468:	4620      	mov	r0, r4
 800746a:	f001 fdb3 	bl	8008fd4 <_fflush_r>
 800746e:	68e1      	ldr	r1, [r4, #12]
 8007470:	4b06      	ldr	r3, [pc, #24]	; (800748c <cleanup_stdio+0x3c>)
 8007472:	4299      	cmp	r1, r3
 8007474:	d004      	beq.n	8007480 <cleanup_stdio+0x30>
 8007476:	4620      	mov	r0, r4
 8007478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800747c:	f001 bdaa 	b.w	8008fd4 <_fflush_r>
 8007480:	bd10      	pop	{r4, pc}
 8007482:	bf00      	nop
 8007484:	200049fc 	.word	0x200049fc
 8007488:	20004a64 	.word	0x20004a64
 800748c:	20004acc 	.word	0x20004acc

08007490 <global_stdio_init.part.0>:
 8007490:	b510      	push	{r4, lr}
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <global_stdio_init.part.0+0x30>)
 8007494:	4c0b      	ldr	r4, [pc, #44]	; (80074c4 <global_stdio_init.part.0+0x34>)
 8007496:	4a0c      	ldr	r2, [pc, #48]	; (80074c8 <global_stdio_init.part.0+0x38>)
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	4620      	mov	r0, r4
 800749c:	2200      	movs	r2, #0
 800749e:	2104      	movs	r1, #4
 80074a0:	f7ff ff94 	bl	80073cc <std>
 80074a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80074a8:	2201      	movs	r2, #1
 80074aa:	2109      	movs	r1, #9
 80074ac:	f7ff ff8e 	bl	80073cc <std>
 80074b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80074b4:	2202      	movs	r2, #2
 80074b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ba:	2112      	movs	r1, #18
 80074bc:	f7ff bf86 	b.w	80073cc <std>
 80074c0:	20004b34 	.word	0x20004b34
 80074c4:	200049fc 	.word	0x200049fc
 80074c8:	08007439 	.word	0x08007439

080074cc <__sfp_lock_acquire>:
 80074cc:	4801      	ldr	r0, [pc, #4]	; (80074d4 <__sfp_lock_acquire+0x8>)
 80074ce:	f000 b920 	b.w	8007712 <__retarget_lock_acquire_recursive>
 80074d2:	bf00      	nop
 80074d4:	20004b3d 	.word	0x20004b3d

080074d8 <__sfp_lock_release>:
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__sfp_lock_release+0x8>)
 80074da:	f000 b91b 	b.w	8007714 <__retarget_lock_release_recursive>
 80074de:	bf00      	nop
 80074e0:	20004b3d 	.word	0x20004b3d

080074e4 <__sinit>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	4604      	mov	r4, r0
 80074e8:	f7ff fff0 	bl	80074cc <__sfp_lock_acquire>
 80074ec:	6a23      	ldr	r3, [r4, #32]
 80074ee:	b11b      	cbz	r3, 80074f8 <__sinit+0x14>
 80074f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f4:	f7ff bff0 	b.w	80074d8 <__sfp_lock_release>
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <__sinit+0x28>)
 80074fa:	6223      	str	r3, [r4, #32]
 80074fc:	4b04      	ldr	r3, [pc, #16]	; (8007510 <__sinit+0x2c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f5      	bne.n	80074f0 <__sinit+0xc>
 8007504:	f7ff ffc4 	bl	8007490 <global_stdio_init.part.0>
 8007508:	e7f2      	b.n	80074f0 <__sinit+0xc>
 800750a:	bf00      	nop
 800750c:	08007451 	.word	0x08007451
 8007510:	20004b34 	.word	0x20004b34

08007514 <_fwalk_sglue>:
 8007514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007518:	4607      	mov	r7, r0
 800751a:	4688      	mov	r8, r1
 800751c:	4614      	mov	r4, r2
 800751e:	2600      	movs	r6, #0
 8007520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007524:	f1b9 0901 	subs.w	r9, r9, #1
 8007528:	d505      	bpl.n	8007536 <_fwalk_sglue+0x22>
 800752a:	6824      	ldr	r4, [r4, #0]
 800752c:	2c00      	cmp	r4, #0
 800752e:	d1f7      	bne.n	8007520 <_fwalk_sglue+0xc>
 8007530:	4630      	mov	r0, r6
 8007532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007536:	89ab      	ldrh	r3, [r5, #12]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d907      	bls.n	800754c <_fwalk_sglue+0x38>
 800753c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007540:	3301      	adds	r3, #1
 8007542:	d003      	beq.n	800754c <_fwalk_sglue+0x38>
 8007544:	4629      	mov	r1, r5
 8007546:	4638      	mov	r0, r7
 8007548:	47c0      	blx	r8
 800754a:	4306      	orrs	r6, r0
 800754c:	3568      	adds	r5, #104	; 0x68
 800754e:	e7e9      	b.n	8007524 <_fwalk_sglue+0x10>

08007550 <siprintf>:
 8007550:	b40e      	push	{r1, r2, r3}
 8007552:	b500      	push	{lr}
 8007554:	b09c      	sub	sp, #112	; 0x70
 8007556:	ab1d      	add	r3, sp, #116	; 0x74
 8007558:	9002      	str	r0, [sp, #8]
 800755a:	9006      	str	r0, [sp, #24]
 800755c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007560:	4809      	ldr	r0, [pc, #36]	; (8007588 <siprintf+0x38>)
 8007562:	9107      	str	r1, [sp, #28]
 8007564:	9104      	str	r1, [sp, #16]
 8007566:	4909      	ldr	r1, [pc, #36]	; (800758c <siprintf+0x3c>)
 8007568:	f853 2b04 	ldr.w	r2, [r3], #4
 800756c:	9105      	str	r1, [sp, #20]
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	a902      	add	r1, sp, #8
 8007574:	f001 fbaa 	bl	8008ccc <_svfiprintf_r>
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	b01c      	add	sp, #112	; 0x70
 8007580:	f85d eb04 	ldr.w	lr, [sp], #4
 8007584:	b003      	add	sp, #12
 8007586:	4770      	bx	lr
 8007588:	2000007c 	.word	0x2000007c
 800758c:	ffff0208 	.word	0xffff0208

08007590 <__sread>:
 8007590:	b510      	push	{r4, lr}
 8007592:	460c      	mov	r4, r1
 8007594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007598:	f000 f86c 	bl	8007674 <_read_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	bfab      	itete	ge
 80075a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075a2:	89a3      	ldrhlt	r3, [r4, #12]
 80075a4:	181b      	addge	r3, r3, r0
 80075a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075aa:	bfac      	ite	ge
 80075ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80075ae:	81a3      	strhlt	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__swrite>:
 80075b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b6:	461f      	mov	r7, r3
 80075b8:	898b      	ldrh	r3, [r1, #12]
 80075ba:	05db      	lsls	r3, r3, #23
 80075bc:	4605      	mov	r5, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	4616      	mov	r6, r2
 80075c2:	d505      	bpl.n	80075d0 <__swrite+0x1e>
 80075c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c8:	2302      	movs	r3, #2
 80075ca:	2200      	movs	r2, #0
 80075cc:	f000 f840 	bl	8007650 <_lseek_r>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075da:	81a3      	strh	r3, [r4, #12]
 80075dc:	4632      	mov	r2, r6
 80075de:	463b      	mov	r3, r7
 80075e0:	4628      	mov	r0, r5
 80075e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e6:	f000 b857 	b.w	8007698 <_write_r>

080075ea <__sseek>:
 80075ea:	b510      	push	{r4, lr}
 80075ec:	460c      	mov	r4, r1
 80075ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f2:	f000 f82d 	bl	8007650 <_lseek_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	bf15      	itete	ne
 80075fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80075fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007606:	81a3      	strheq	r3, [r4, #12]
 8007608:	bf18      	it	ne
 800760a:	81a3      	strhne	r3, [r4, #12]
 800760c:	bd10      	pop	{r4, pc}

0800760e <__sclose>:
 800760e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007612:	f000 b80d 	b.w	8007630 <_close_r>

08007616 <memset>:
 8007616:	4402      	add	r2, r0
 8007618:	4603      	mov	r3, r0
 800761a:	4293      	cmp	r3, r2
 800761c:	d100      	bne.n	8007620 <memset+0xa>
 800761e:	4770      	bx	lr
 8007620:	f803 1b01 	strb.w	r1, [r3], #1
 8007624:	e7f9      	b.n	800761a <memset+0x4>
	...

08007628 <_localeconv_r>:
 8007628:	4800      	ldr	r0, [pc, #0]	; (800762c <_localeconv_r+0x4>)
 800762a:	4770      	bx	lr
 800762c:	20000170 	.word	0x20000170

08007630 <_close_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	; (800764c <_close_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7fa f8ed 	bl	800181a <_close>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_close_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_close_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20004b38 	.word	0x20004b38

08007650 <_lseek_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	; (8007670 <_lseek_r+0x20>)
 8007654:	4604      	mov	r4, r0
 8007656:	4608      	mov	r0, r1
 8007658:	4611      	mov	r1, r2
 800765a:	2200      	movs	r2, #0
 800765c:	602a      	str	r2, [r5, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f7fa f902 	bl	8001868 <_lseek>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_lseek_r+0x1e>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_lseek_r+0x1e>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20004b38 	.word	0x20004b38

08007674 <_read_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d07      	ldr	r5, [pc, #28]	; (8007694 <_read_r+0x20>)
 8007678:	4604      	mov	r4, r0
 800767a:	4608      	mov	r0, r1
 800767c:	4611      	mov	r1, r2
 800767e:	2200      	movs	r2, #0
 8007680:	602a      	str	r2, [r5, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	f7fa f890 	bl	80017a8 <_read>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_read_r+0x1e>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_read_r+0x1e>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	20004b38 	.word	0x20004b38

08007698 <_write_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d07      	ldr	r5, [pc, #28]	; (80076b8 <_write_r+0x20>)
 800769c:	4604      	mov	r4, r0
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	2200      	movs	r2, #0
 80076a4:	602a      	str	r2, [r5, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f7fa f89b 	bl	80017e2 <_write>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_write_r+0x1e>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_write_r+0x1e>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20004b38 	.word	0x20004b38

080076bc <__errno>:
 80076bc:	4b01      	ldr	r3, [pc, #4]	; (80076c4 <__errno+0x8>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000007c 	.word	0x2000007c

080076c8 <__libc_init_array>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4d0d      	ldr	r5, [pc, #52]	; (8007700 <__libc_init_array+0x38>)
 80076cc:	4c0d      	ldr	r4, [pc, #52]	; (8007704 <__libc_init_array+0x3c>)
 80076ce:	1b64      	subs	r4, r4, r5
 80076d0:	10a4      	asrs	r4, r4, #2
 80076d2:	2600      	movs	r6, #0
 80076d4:	42a6      	cmp	r6, r4
 80076d6:	d109      	bne.n	80076ec <__libc_init_array+0x24>
 80076d8:	4d0b      	ldr	r5, [pc, #44]	; (8007708 <__libc_init_array+0x40>)
 80076da:	4c0c      	ldr	r4, [pc, #48]	; (800770c <__libc_init_array+0x44>)
 80076dc:	f002 f810 	bl	8009700 <_init>
 80076e0:	1b64      	subs	r4, r4, r5
 80076e2:	10a4      	asrs	r4, r4, #2
 80076e4:	2600      	movs	r6, #0
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	d105      	bne.n	80076f6 <__libc_init_array+0x2e>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f0:	4798      	blx	r3
 80076f2:	3601      	adds	r6, #1
 80076f4:	e7ee      	b.n	80076d4 <__libc_init_array+0xc>
 80076f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fa:	4798      	blx	r3
 80076fc:	3601      	adds	r6, #1
 80076fe:	e7f2      	b.n	80076e6 <__libc_init_array+0x1e>
 8007700:	08009d24 	.word	0x08009d24
 8007704:	08009d24 	.word	0x08009d24
 8007708:	08009d24 	.word	0x08009d24
 800770c:	08009d28 	.word	0x08009d28

08007710 <__retarget_lock_init_recursive>:
 8007710:	4770      	bx	lr

08007712 <__retarget_lock_acquire_recursive>:
 8007712:	4770      	bx	lr

08007714 <__retarget_lock_release_recursive>:
 8007714:	4770      	bx	lr

08007716 <memcpy>:
 8007716:	440a      	add	r2, r1
 8007718:	4291      	cmp	r1, r2
 800771a:	f100 33ff 	add.w	r3, r0, #4294967295
 800771e:	d100      	bne.n	8007722 <memcpy+0xc>
 8007720:	4770      	bx	lr
 8007722:	b510      	push	{r4, lr}
 8007724:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800772c:	4291      	cmp	r1, r2
 800772e:	d1f9      	bne.n	8007724 <memcpy+0xe>
 8007730:	bd10      	pop	{r4, pc}

08007732 <quorem>:
 8007732:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007736:	6903      	ldr	r3, [r0, #16]
 8007738:	690c      	ldr	r4, [r1, #16]
 800773a:	42a3      	cmp	r3, r4
 800773c:	4607      	mov	r7, r0
 800773e:	db7e      	blt.n	800783e <quorem+0x10c>
 8007740:	3c01      	subs	r4, #1
 8007742:	f101 0814 	add.w	r8, r1, #20
 8007746:	f100 0514 	add.w	r5, r0, #20
 800774a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007758:	3301      	adds	r3, #1
 800775a:	429a      	cmp	r2, r3
 800775c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007760:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007764:	fbb2 f6f3 	udiv	r6, r2, r3
 8007768:	d331      	bcc.n	80077ce <quorem+0x9c>
 800776a:	f04f 0e00 	mov.w	lr, #0
 800776e:	4640      	mov	r0, r8
 8007770:	46ac      	mov	ip, r5
 8007772:	46f2      	mov	sl, lr
 8007774:	f850 2b04 	ldr.w	r2, [r0], #4
 8007778:	b293      	uxth	r3, r2
 800777a:	fb06 e303 	mla	r3, r6, r3, lr
 800777e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007782:	0c1a      	lsrs	r2, r3, #16
 8007784:	b29b      	uxth	r3, r3
 8007786:	ebaa 0303 	sub.w	r3, sl, r3
 800778a:	f8dc a000 	ldr.w	sl, [ip]
 800778e:	fa13 f38a 	uxtah	r3, r3, sl
 8007792:	fb06 220e 	mla	r2, r6, lr, r2
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	9b00      	ldr	r3, [sp, #0]
 800779a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800779e:	b292      	uxth	r2, r2
 80077a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80077ac:	4581      	cmp	r9, r0
 80077ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b2:	f84c 3b04 	str.w	r3, [ip], #4
 80077b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077ba:	d2db      	bcs.n	8007774 <quorem+0x42>
 80077bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80077c0:	b92b      	cbnz	r3, 80077ce <quorem+0x9c>
 80077c2:	9b01      	ldr	r3, [sp, #4]
 80077c4:	3b04      	subs	r3, #4
 80077c6:	429d      	cmp	r5, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	d32c      	bcc.n	8007826 <quorem+0xf4>
 80077cc:	613c      	str	r4, [r7, #16]
 80077ce:	4638      	mov	r0, r7
 80077d0:	f001 f922 	bl	8008a18 <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	db22      	blt.n	800781e <quorem+0xec>
 80077d8:	3601      	adds	r6, #1
 80077da:	4629      	mov	r1, r5
 80077dc:	2000      	movs	r0, #0
 80077de:	f858 2b04 	ldr.w	r2, [r8], #4
 80077e2:	f8d1 c000 	ldr.w	ip, [r1]
 80077e6:	b293      	uxth	r3, r2
 80077e8:	1ac3      	subs	r3, r0, r3
 80077ea:	0c12      	lsrs	r2, r2, #16
 80077ec:	fa13 f38c 	uxtah	r3, r3, ip
 80077f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80077f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077fe:	45c1      	cmp	r9, r8
 8007800:	f841 3b04 	str.w	r3, [r1], #4
 8007804:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007808:	d2e9      	bcs.n	80077de <quorem+0xac>
 800780a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800780e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007812:	b922      	cbnz	r2, 800781e <quorem+0xec>
 8007814:	3b04      	subs	r3, #4
 8007816:	429d      	cmp	r5, r3
 8007818:	461a      	mov	r2, r3
 800781a:	d30a      	bcc.n	8007832 <quorem+0x100>
 800781c:	613c      	str	r4, [r7, #16]
 800781e:	4630      	mov	r0, r6
 8007820:	b003      	add	sp, #12
 8007822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	3b04      	subs	r3, #4
 800782a:	2a00      	cmp	r2, #0
 800782c:	d1ce      	bne.n	80077cc <quorem+0x9a>
 800782e:	3c01      	subs	r4, #1
 8007830:	e7c9      	b.n	80077c6 <quorem+0x94>
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	3b04      	subs	r3, #4
 8007836:	2a00      	cmp	r2, #0
 8007838:	d1f0      	bne.n	800781c <quorem+0xea>
 800783a:	3c01      	subs	r4, #1
 800783c:	e7eb      	b.n	8007816 <quorem+0xe4>
 800783e:	2000      	movs	r0, #0
 8007840:	e7ee      	b.n	8007820 <quorem+0xee>
 8007842:	0000      	movs	r0, r0
 8007844:	0000      	movs	r0, r0
	...

08007848 <_dtoa_r>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	ed2d 8b02 	vpush	{d8}
 8007850:	69c5      	ldr	r5, [r0, #28]
 8007852:	b091      	sub	sp, #68	; 0x44
 8007854:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007858:	ec59 8b10 	vmov	r8, r9, d0
 800785c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800785e:	9106      	str	r1, [sp, #24]
 8007860:	4606      	mov	r6, r0
 8007862:	9208      	str	r2, [sp, #32]
 8007864:	930c      	str	r3, [sp, #48]	; 0x30
 8007866:	b975      	cbnz	r5, 8007886 <_dtoa_r+0x3e>
 8007868:	2010      	movs	r0, #16
 800786a:	f000 fda5 	bl	80083b8 <malloc>
 800786e:	4602      	mov	r2, r0
 8007870:	61f0      	str	r0, [r6, #28]
 8007872:	b920      	cbnz	r0, 800787e <_dtoa_r+0x36>
 8007874:	4ba6      	ldr	r3, [pc, #664]	; (8007b10 <_dtoa_r+0x2c8>)
 8007876:	21ef      	movs	r1, #239	; 0xef
 8007878:	48a6      	ldr	r0, [pc, #664]	; (8007b14 <_dtoa_r+0x2cc>)
 800787a:	f001 fbfd 	bl	8009078 <__assert_func>
 800787e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007882:	6005      	str	r5, [r0, #0]
 8007884:	60c5      	str	r5, [r0, #12]
 8007886:	69f3      	ldr	r3, [r6, #28]
 8007888:	6819      	ldr	r1, [r3, #0]
 800788a:	b151      	cbz	r1, 80078a2 <_dtoa_r+0x5a>
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	604a      	str	r2, [r1, #4]
 8007890:	2301      	movs	r3, #1
 8007892:	4093      	lsls	r3, r2
 8007894:	608b      	str	r3, [r1, #8]
 8007896:	4630      	mov	r0, r6
 8007898:	f000 fe82 	bl	80085a0 <_Bfree>
 800789c:	69f3      	ldr	r3, [r6, #28]
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	f1b9 0300 	subs.w	r3, r9, #0
 80078a6:	bfbb      	ittet	lt
 80078a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078ac:	9303      	strlt	r3, [sp, #12]
 80078ae:	2300      	movge	r3, #0
 80078b0:	2201      	movlt	r2, #1
 80078b2:	bfac      	ite	ge
 80078b4:	6023      	strge	r3, [r4, #0]
 80078b6:	6022      	strlt	r2, [r4, #0]
 80078b8:	4b97      	ldr	r3, [pc, #604]	; (8007b18 <_dtoa_r+0x2d0>)
 80078ba:	9c03      	ldr	r4, [sp, #12]
 80078bc:	43a3      	bics	r3, r4
 80078be:	d11c      	bne.n	80078fa <_dtoa_r+0xb2>
 80078c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80078cc:	ea53 0308 	orrs.w	r3, r3, r8
 80078d0:	f000 84fb 	beq.w	80082ca <_dtoa_r+0xa82>
 80078d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80078d6:	b963      	cbnz	r3, 80078f2 <_dtoa_r+0xaa>
 80078d8:	4b90      	ldr	r3, [pc, #576]	; (8007b1c <_dtoa_r+0x2d4>)
 80078da:	e020      	b.n	800791e <_dtoa_r+0xd6>
 80078dc:	4b90      	ldr	r3, [pc, #576]	; (8007b20 <_dtoa_r+0x2d8>)
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	3308      	adds	r3, #8
 80078e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	9801      	ldr	r0, [sp, #4]
 80078e8:	b011      	add	sp, #68	; 0x44
 80078ea:	ecbd 8b02 	vpop	{d8}
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	4b8a      	ldr	r3, [pc, #552]	; (8007b1c <_dtoa_r+0x2d4>)
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	3303      	adds	r3, #3
 80078f8:	e7f3      	b.n	80078e2 <_dtoa_r+0x9a>
 80078fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80078fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007906:	d10c      	bne.n	8007922 <_dtoa_r+0xda>
 8007908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800790a:	2301      	movs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 84d7 	beq.w	80082c4 <_dtoa_r+0xa7c>
 8007916:	4b83      	ldr	r3, [pc, #524]	; (8007b24 <_dtoa_r+0x2dc>)
 8007918:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	e7e1      	b.n	80078e6 <_dtoa_r+0x9e>
 8007922:	aa0e      	add	r2, sp, #56	; 0x38
 8007924:	a90f      	add	r1, sp, #60	; 0x3c
 8007926:	4630      	mov	r0, r6
 8007928:	eeb0 0b48 	vmov.f64	d0, d8
 800792c:	f001 f91a 	bl	8008b64 <__d2b>
 8007930:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007936:	4605      	mov	r5, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d046      	beq.n	80079ca <_dtoa_r+0x182>
 800793c:	eeb0 7b48 	vmov.f64	d7, d8
 8007940:	ee18 1a90 	vmov	r1, s17
 8007944:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007948:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800794c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007950:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007954:	2000      	movs	r0, #0
 8007956:	ee07 1a90 	vmov	s15, r1
 800795a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800795e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007af8 <_dtoa_r+0x2b0>
 8007962:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007966:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007b00 <_dtoa_r+0x2b8>
 800796a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800796e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007b08 <_dtoa_r+0x2c0>
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800797a:	eeb0 7b46 	vmov.f64	d7, d6
 800797e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007982:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007986:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800798a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798e:	ee16 ba90 	vmov	fp, s13
 8007992:	9009      	str	r0, [sp, #36]	; 0x24
 8007994:	d508      	bpl.n	80079a8 <_dtoa_r+0x160>
 8007996:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800799a:	eeb4 6b47 	vcmp.f64	d6, d7
 800799e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a2:	bf18      	it	ne
 80079a4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80079a8:	f1bb 0f16 	cmp.w	fp, #22
 80079ac:	d82b      	bhi.n	8007a06 <_dtoa_r+0x1be>
 80079ae:	495e      	ldr	r1, [pc, #376]	; (8007b28 <_dtoa_r+0x2e0>)
 80079b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80079b4:	ed91 7b00 	vldr	d7, [r1]
 80079b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80079bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c0:	d501      	bpl.n	80079c6 <_dtoa_r+0x17e>
 80079c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079c6:	2100      	movs	r1, #0
 80079c8:	e01e      	b.n	8007a08 <_dtoa_r+0x1c0>
 80079ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079cc:	4413      	add	r3, r2
 80079ce:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80079d2:	2920      	cmp	r1, #32
 80079d4:	bfc1      	itttt	gt
 80079d6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80079da:	408c      	lslgt	r4, r1
 80079dc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80079e0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80079e4:	bfd6      	itet	le
 80079e6:	f1c1 0120 	rsble	r1, r1, #32
 80079ea:	4321      	orrgt	r1, r4
 80079ec:	fa08 f101 	lslle.w	r1, r8, r1
 80079f0:	ee07 1a90 	vmov	s15, r1
 80079f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80079f8:	3b01      	subs	r3, #1
 80079fa:	ee17 1a90 	vmov	r1, s15
 80079fe:	2001      	movs	r0, #1
 8007a00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007a04:	e7a7      	b.n	8007956 <_dtoa_r+0x10e>
 8007a06:	2101      	movs	r1, #1
 8007a08:	1ad2      	subs	r2, r2, r3
 8007a0a:	1e53      	subs	r3, r2, #1
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	bf45      	ittet	mi
 8007a10:	f1c2 0301 	rsbmi	r3, r2, #1
 8007a14:	9304      	strmi	r3, [sp, #16]
 8007a16:	2300      	movpl	r3, #0
 8007a18:	2300      	movmi	r3, #0
 8007a1a:	bf4c      	ite	mi
 8007a1c:	9305      	strmi	r3, [sp, #20]
 8007a1e:	9304      	strpl	r3, [sp, #16]
 8007a20:	f1bb 0f00 	cmp.w	fp, #0
 8007a24:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a26:	db18      	blt.n	8007a5a <_dtoa_r+0x212>
 8007a28:	9b05      	ldr	r3, [sp, #20]
 8007a2a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007a2e:	445b      	add	r3, fp
 8007a30:	9305      	str	r3, [sp, #20]
 8007a32:	2300      	movs	r3, #0
 8007a34:	9a06      	ldr	r2, [sp, #24]
 8007a36:	2a09      	cmp	r2, #9
 8007a38:	d848      	bhi.n	8007acc <_dtoa_r+0x284>
 8007a3a:	2a05      	cmp	r2, #5
 8007a3c:	bfc4      	itt	gt
 8007a3e:	3a04      	subgt	r2, #4
 8007a40:	9206      	strgt	r2, [sp, #24]
 8007a42:	9a06      	ldr	r2, [sp, #24]
 8007a44:	f1a2 0202 	sub.w	r2, r2, #2
 8007a48:	bfcc      	ite	gt
 8007a4a:	2400      	movgt	r4, #0
 8007a4c:	2401      	movle	r4, #1
 8007a4e:	2a03      	cmp	r2, #3
 8007a50:	d847      	bhi.n	8007ae2 <_dtoa_r+0x29a>
 8007a52:	e8df f002 	tbb	[pc, r2]
 8007a56:	2d0b      	.short	0x2d0b
 8007a58:	392b      	.short	0x392b
 8007a5a:	9b04      	ldr	r3, [sp, #16]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	eba3 030b 	sub.w	r3, r3, fp
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	920a      	str	r2, [sp, #40]	; 0x28
 8007a66:	f1cb 0300 	rsb	r3, fp, #0
 8007a6a:	e7e3      	b.n	8007a34 <_dtoa_r+0x1ec>
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	9207      	str	r2, [sp, #28]
 8007a70:	9a08      	ldr	r2, [sp, #32]
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	dc38      	bgt.n	8007ae8 <_dtoa_r+0x2a0>
 8007a76:	f04f 0a01 	mov.w	sl, #1
 8007a7a:	46d1      	mov	r9, sl
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	f8cd a020 	str.w	sl, [sp, #32]
 8007a82:	69f7      	ldr	r7, [r6, #28]
 8007a84:	2100      	movs	r1, #0
 8007a86:	2004      	movs	r0, #4
 8007a88:	f100 0c14 	add.w	ip, r0, #20
 8007a8c:	4594      	cmp	ip, r2
 8007a8e:	d930      	bls.n	8007af2 <_dtoa_r+0x2aa>
 8007a90:	6079      	str	r1, [r7, #4]
 8007a92:	4630      	mov	r0, r6
 8007a94:	930d      	str	r3, [sp, #52]	; 0x34
 8007a96:	f000 fd43 	bl	8008520 <_Balloc>
 8007a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a9c:	9001      	str	r0, [sp, #4]
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d145      	bne.n	8007b30 <_dtoa_r+0x2e8>
 8007aa4:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <_dtoa_r+0x2e4>)
 8007aa6:	f240 11af 	movw	r1, #431	; 0x1af
 8007aaa:	e6e5      	b.n	8007878 <_dtoa_r+0x30>
 8007aac:	2201      	movs	r2, #1
 8007aae:	e7de      	b.n	8007a6e <_dtoa_r+0x226>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	9207      	str	r2, [sp, #28]
 8007ab4:	9a08      	ldr	r2, [sp, #32]
 8007ab6:	eb0b 0a02 	add.w	sl, fp, r2
 8007aba:	f10a 0901 	add.w	r9, sl, #1
 8007abe:	464a      	mov	r2, r9
 8007ac0:	2a01      	cmp	r2, #1
 8007ac2:	bfb8      	it	lt
 8007ac4:	2201      	movlt	r2, #1
 8007ac6:	e7dc      	b.n	8007a82 <_dtoa_r+0x23a>
 8007ac8:	2201      	movs	r2, #1
 8007aca:	e7f2      	b.n	8007ab2 <_dtoa_r+0x26a>
 8007acc:	2401      	movs	r4, #1
 8007ace:	2200      	movs	r2, #0
 8007ad0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007ad4:	f04f 3aff 	mov.w	sl, #4294967295
 8007ad8:	2100      	movs	r1, #0
 8007ada:	46d1      	mov	r9, sl
 8007adc:	2212      	movs	r2, #18
 8007ade:	9108      	str	r1, [sp, #32]
 8007ae0:	e7cf      	b.n	8007a82 <_dtoa_r+0x23a>
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	9207      	str	r2, [sp, #28]
 8007ae6:	e7f5      	b.n	8007ad4 <_dtoa_r+0x28c>
 8007ae8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007aec:	46d1      	mov	r9, sl
 8007aee:	4652      	mov	r2, sl
 8007af0:	e7c7      	b.n	8007a82 <_dtoa_r+0x23a>
 8007af2:	3101      	adds	r1, #1
 8007af4:	0040      	lsls	r0, r0, #1
 8007af6:	e7c7      	b.n	8007a88 <_dtoa_r+0x240>
 8007af8:	636f4361 	.word	0x636f4361
 8007afc:	3fd287a7 	.word	0x3fd287a7
 8007b00:	8b60c8b3 	.word	0x8b60c8b3
 8007b04:	3fc68a28 	.word	0x3fc68a28
 8007b08:	509f79fb 	.word	0x509f79fb
 8007b0c:	3fd34413 	.word	0x3fd34413
 8007b10:	080099ed 	.word	0x080099ed
 8007b14:	08009a04 	.word	0x08009a04
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	080099e9 	.word	0x080099e9
 8007b20:	080099e0 	.word	0x080099e0
 8007b24:	080099bd 	.word	0x080099bd
 8007b28:	08009af0 	.word	0x08009af0
 8007b2c:	08009a5c 	.word	0x08009a5c
 8007b30:	69f2      	ldr	r2, [r6, #28]
 8007b32:	9901      	ldr	r1, [sp, #4]
 8007b34:	6011      	str	r1, [r2, #0]
 8007b36:	f1b9 0f0e 	cmp.w	r9, #14
 8007b3a:	d86c      	bhi.n	8007c16 <_dtoa_r+0x3ce>
 8007b3c:	2c00      	cmp	r4, #0
 8007b3e:	d06a      	beq.n	8007c16 <_dtoa_r+0x3ce>
 8007b40:	f1bb 0f00 	cmp.w	fp, #0
 8007b44:	f340 80a0 	ble.w	8007c88 <_dtoa_r+0x440>
 8007b48:	4ac1      	ldr	r2, [pc, #772]	; (8007e50 <_dtoa_r+0x608>)
 8007b4a:	f00b 010f 	and.w	r1, fp, #15
 8007b4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007b52:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b56:	ed92 7b00 	vldr	d7, [r2]
 8007b5a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007b5e:	f000 8087 	beq.w	8007c70 <_dtoa_r+0x428>
 8007b62:	49bc      	ldr	r1, [pc, #752]	; (8007e54 <_dtoa_r+0x60c>)
 8007b64:	ed91 6b08 	vldr	d6, [r1, #32]
 8007b68:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007b6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007b70:	f002 020f 	and.w	r2, r2, #15
 8007b74:	2103      	movs	r1, #3
 8007b76:	48b7      	ldr	r0, [pc, #732]	; (8007e54 <_dtoa_r+0x60c>)
 8007b78:	2a00      	cmp	r2, #0
 8007b7a:	d17b      	bne.n	8007c74 <_dtoa_r+0x42c>
 8007b7c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b80:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007b84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	f000 80a0 	beq.w	8007cd4 <_dtoa_r+0x48c>
 8007b94:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007b98:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba0:	f140 8098 	bpl.w	8007cd4 <_dtoa_r+0x48c>
 8007ba4:	f1b9 0f00 	cmp.w	r9, #0
 8007ba8:	f000 8094 	beq.w	8007cd4 <_dtoa_r+0x48c>
 8007bac:	f1ba 0f00 	cmp.w	sl, #0
 8007bb0:	dd2f      	ble.n	8007c12 <_dtoa_r+0x3ca>
 8007bb2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007bb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bba:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bbe:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007bc2:	3101      	adds	r1, #1
 8007bc4:	4654      	mov	r4, sl
 8007bc6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007bce:	ee07 1a90 	vmov	s15, r1
 8007bd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007bd6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007bda:	ee15 7a90 	vmov	r7, s11
 8007bde:	ec51 0b15 	vmov	r0, r1, d5
 8007be2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	d177      	bne.n	8007cda <_dtoa_r+0x492>
 8007bea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007bee:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007bf2:	ec41 0b17 	vmov	d7, r0, r1
 8007bf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfe:	f300 826a 	bgt.w	80080d6 <_dtoa_r+0x88e>
 8007c02:	eeb1 7b47 	vneg.f64	d7, d7
 8007c06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0e:	f100 8260 	bmi.w	80080d2 <_dtoa_r+0x88a>
 8007c12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	f2c0 811d 	blt.w	8007e58 <_dtoa_r+0x610>
 8007c1e:	f1bb 0f0e 	cmp.w	fp, #14
 8007c22:	f300 8119 	bgt.w	8007e58 <_dtoa_r+0x610>
 8007c26:	4b8a      	ldr	r3, [pc, #552]	; (8007e50 <_dtoa_r+0x608>)
 8007c28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c2c:	ed93 6b00 	vldr	d6, [r3]
 8007c30:	9b08      	ldr	r3, [sp, #32]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f280 80b7 	bge.w	8007da6 <_dtoa_r+0x55e>
 8007c38:	f1b9 0f00 	cmp.w	r9, #0
 8007c3c:	f300 80b3 	bgt.w	8007da6 <_dtoa_r+0x55e>
 8007c40:	f040 8246 	bne.w	80080d0 <_dtoa_r+0x888>
 8007c44:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c48:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c50:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c58:	464c      	mov	r4, r9
 8007c5a:	464f      	mov	r7, r9
 8007c5c:	f280 821c 	bge.w	8008098 <_dtoa_r+0x850>
 8007c60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c64:	2331      	movs	r3, #49	; 0x31
 8007c66:	f808 3b01 	strb.w	r3, [r8], #1
 8007c6a:	f10b 0b01 	add.w	fp, fp, #1
 8007c6e:	e218      	b.n	80080a2 <_dtoa_r+0x85a>
 8007c70:	2102      	movs	r1, #2
 8007c72:	e780      	b.n	8007b76 <_dtoa_r+0x32e>
 8007c74:	07d4      	lsls	r4, r2, #31
 8007c76:	d504      	bpl.n	8007c82 <_dtoa_r+0x43a>
 8007c78:	ed90 6b00 	vldr	d6, [r0]
 8007c7c:	3101      	adds	r1, #1
 8007c7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c82:	1052      	asrs	r2, r2, #1
 8007c84:	3008      	adds	r0, #8
 8007c86:	e777      	b.n	8007b78 <_dtoa_r+0x330>
 8007c88:	d022      	beq.n	8007cd0 <_dtoa_r+0x488>
 8007c8a:	f1cb 0200 	rsb	r2, fp, #0
 8007c8e:	4970      	ldr	r1, [pc, #448]	; (8007e50 <_dtoa_r+0x608>)
 8007c90:	f002 000f 	and.w	r0, r2, #15
 8007c94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007c98:	ed91 7b00 	vldr	d7, [r1]
 8007c9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007ca0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ca4:	486b      	ldr	r0, [pc, #428]	; (8007e54 <_dtoa_r+0x60c>)
 8007ca6:	1112      	asrs	r2, r2, #4
 8007ca8:	2400      	movs	r4, #0
 8007caa:	2102      	movs	r1, #2
 8007cac:	b92a      	cbnz	r2, 8007cba <_dtoa_r+0x472>
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	f43f af6a 	beq.w	8007b88 <_dtoa_r+0x340>
 8007cb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cb8:	e766      	b.n	8007b88 <_dtoa_r+0x340>
 8007cba:	07d7      	lsls	r7, r2, #31
 8007cbc:	d505      	bpl.n	8007cca <_dtoa_r+0x482>
 8007cbe:	ed90 6b00 	vldr	d6, [r0]
 8007cc2:	3101      	adds	r1, #1
 8007cc4:	2401      	movs	r4, #1
 8007cc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cca:	1052      	asrs	r2, r2, #1
 8007ccc:	3008      	adds	r0, #8
 8007cce:	e7ed      	b.n	8007cac <_dtoa_r+0x464>
 8007cd0:	2102      	movs	r1, #2
 8007cd2:	e759      	b.n	8007b88 <_dtoa_r+0x340>
 8007cd4:	465a      	mov	r2, fp
 8007cd6:	464c      	mov	r4, r9
 8007cd8:	e775      	b.n	8007bc6 <_dtoa_r+0x37e>
 8007cda:	ec41 0b17 	vmov	d7, r0, r1
 8007cde:	495c      	ldr	r1, [pc, #368]	; (8007e50 <_dtoa_r+0x608>)
 8007ce0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007ce4:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007ce8:	9901      	ldr	r1, [sp, #4]
 8007cea:	440c      	add	r4, r1
 8007cec:	9907      	ldr	r1, [sp, #28]
 8007cee:	b351      	cbz	r1, 8007d46 <_dtoa_r+0x4fe>
 8007cf0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007cf4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007cf8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007cfc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007d00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d04:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d08:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d0c:	ee14 1a90 	vmov	r1, s9
 8007d10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d14:	3130      	adds	r1, #48	; 0x30
 8007d16:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d22:	f808 1b01 	strb.w	r1, [r8], #1
 8007d26:	d439      	bmi.n	8007d9c <_dtoa_r+0x554>
 8007d28:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007d2c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d34:	d472      	bmi.n	8007e1c <_dtoa_r+0x5d4>
 8007d36:	45a0      	cmp	r8, r4
 8007d38:	f43f af6b 	beq.w	8007c12 <_dtoa_r+0x3ca>
 8007d3c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007d40:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d44:	e7e0      	b.n	8007d08 <_dtoa_r+0x4c0>
 8007d46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d4a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d4e:	4620      	mov	r0, r4
 8007d50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d54:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d58:	ee14 1a90 	vmov	r1, s9
 8007d5c:	3130      	adds	r1, #48	; 0x30
 8007d5e:	f808 1b01 	strb.w	r1, [r8], #1
 8007d62:	45a0      	cmp	r8, r4
 8007d64:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d68:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d6c:	d118      	bne.n	8007da0 <_dtoa_r+0x558>
 8007d6e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007d72:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007d76:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7e:	dc4d      	bgt.n	8007e1c <_dtoa_r+0x5d4>
 8007d80:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007d84:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8c:	f57f af41 	bpl.w	8007c12 <_dtoa_r+0x3ca>
 8007d90:	4680      	mov	r8, r0
 8007d92:	3801      	subs	r0, #1
 8007d94:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	d0f9      	beq.n	8007d90 <_dtoa_r+0x548>
 8007d9c:	4693      	mov	fp, r2
 8007d9e:	e02a      	b.n	8007df6 <_dtoa_r+0x5ae>
 8007da0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007da4:	e7d6      	b.n	8007d54 <_dtoa_r+0x50c>
 8007da6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007daa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007dae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007db2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007db6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007dba:	ee15 3a10 	vmov	r3, s10
 8007dbe:	3330      	adds	r3, #48	; 0x30
 8007dc0:	f808 3b01 	strb.w	r3, [r8], #1
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	eba8 0303 	sub.w	r3, r8, r3
 8007dca:	4599      	cmp	r9, r3
 8007dcc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007dd0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007dd4:	d133      	bne.n	8007e3e <_dtoa_r+0x5f6>
 8007dd6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007dda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de2:	dc1a      	bgt.n	8007e1a <_dtoa_r+0x5d2>
 8007de4:	eeb4 7b46 	vcmp.f64	d7, d6
 8007de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dec:	d103      	bne.n	8007df6 <_dtoa_r+0x5ae>
 8007dee:	ee15 3a10 	vmov	r3, s10
 8007df2:	07d9      	lsls	r1, r3, #31
 8007df4:	d411      	bmi.n	8007e1a <_dtoa_r+0x5d2>
 8007df6:	4629      	mov	r1, r5
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f000 fbd1 	bl	80085a0 <_Bfree>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e02:	f888 3000 	strb.w	r3, [r8]
 8007e06:	f10b 0301 	add.w	r3, fp, #1
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f43f ad69 	beq.w	80078e6 <_dtoa_r+0x9e>
 8007e14:	f8c3 8000 	str.w	r8, [r3]
 8007e18:	e565      	b.n	80078e6 <_dtoa_r+0x9e>
 8007e1a:	465a      	mov	r2, fp
 8007e1c:	4643      	mov	r3, r8
 8007e1e:	4698      	mov	r8, r3
 8007e20:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007e24:	2939      	cmp	r1, #57	; 0x39
 8007e26:	d106      	bne.n	8007e36 <_dtoa_r+0x5ee>
 8007e28:	9901      	ldr	r1, [sp, #4]
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	d1f7      	bne.n	8007e1e <_dtoa_r+0x5d6>
 8007e2e:	9801      	ldr	r0, [sp, #4]
 8007e30:	2130      	movs	r1, #48	; 0x30
 8007e32:	3201      	adds	r2, #1
 8007e34:	7001      	strb	r1, [r0, #0]
 8007e36:	7819      	ldrb	r1, [r3, #0]
 8007e38:	3101      	adds	r1, #1
 8007e3a:	7019      	strb	r1, [r3, #0]
 8007e3c:	e7ae      	b.n	8007d9c <_dtoa_r+0x554>
 8007e3e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4a:	d1b2      	bne.n	8007db2 <_dtoa_r+0x56a>
 8007e4c:	e7d3      	b.n	8007df6 <_dtoa_r+0x5ae>
 8007e4e:	bf00      	nop
 8007e50:	08009af0 	.word	0x08009af0
 8007e54:	08009ac8 	.word	0x08009ac8
 8007e58:	9907      	ldr	r1, [sp, #28]
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	f000 80d0 	beq.w	8008000 <_dtoa_r+0x7b8>
 8007e60:	9906      	ldr	r1, [sp, #24]
 8007e62:	2901      	cmp	r1, #1
 8007e64:	f300 80b4 	bgt.w	8007fd0 <_dtoa_r+0x788>
 8007e68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e6a:	2900      	cmp	r1, #0
 8007e6c:	f000 80ac 	beq.w	8007fc8 <_dtoa_r+0x780>
 8007e70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e74:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e78:	461c      	mov	r4, r3
 8007e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	4413      	add	r3, r2
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	9b05      	ldr	r3, [sp, #20]
 8007e84:	2101      	movs	r1, #1
 8007e86:	4413      	add	r3, r2
 8007e88:	4630      	mov	r0, r6
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	f000 fc3e 	bl	800870c <__i2b>
 8007e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e92:	4607      	mov	r7, r0
 8007e94:	f1b8 0f00 	cmp.w	r8, #0
 8007e98:	d00d      	beq.n	8007eb6 <_dtoa_r+0x66e>
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	2a00      	cmp	r2, #0
 8007e9e:	dd0a      	ble.n	8007eb6 <_dtoa_r+0x66e>
 8007ea0:	4542      	cmp	r2, r8
 8007ea2:	9904      	ldr	r1, [sp, #16]
 8007ea4:	bfa8      	it	ge
 8007ea6:	4642      	movge	r2, r8
 8007ea8:	1a89      	subs	r1, r1, r2
 8007eaa:	9104      	str	r1, [sp, #16]
 8007eac:	9905      	ldr	r1, [sp, #20]
 8007eae:	eba8 0802 	sub.w	r8, r8, r2
 8007eb2:	1a8a      	subs	r2, r1, r2
 8007eb4:	9205      	str	r2, [sp, #20]
 8007eb6:	b303      	cbz	r3, 8007efa <_dtoa_r+0x6b2>
 8007eb8:	9a07      	ldr	r2, [sp, #28]
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	f000 80a5 	beq.w	800800a <_dtoa_r+0x7c2>
 8007ec0:	2c00      	cmp	r4, #0
 8007ec2:	dd13      	ble.n	8007eec <_dtoa_r+0x6a4>
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	4630      	mov	r0, r6
 8007eca:	930d      	str	r3, [sp, #52]	; 0x34
 8007ecc:	f000 fcde 	bl	800888c <__pow5mult>
 8007ed0:	462a      	mov	r2, r5
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f000 fc2e 	bl	8008738 <__multiply>
 8007edc:	4629      	mov	r1, r5
 8007ede:	9009      	str	r0, [sp, #36]	; 0x24
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f000 fb5d 	bl	80085a0 <_Bfree>
 8007ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eea:	4615      	mov	r5, r2
 8007eec:	1b1a      	subs	r2, r3, r4
 8007eee:	d004      	beq.n	8007efa <_dtoa_r+0x6b2>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f000 fcca 	bl	800888c <__pow5mult>
 8007ef8:	4605      	mov	r5, r0
 8007efa:	2101      	movs	r1, #1
 8007efc:	4630      	mov	r0, r6
 8007efe:	f000 fc05 	bl	800870c <__i2b>
 8007f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	f340 8081 	ble.w	800800e <_dtoa_r+0x7c6>
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4601      	mov	r1, r0
 8007f10:	4630      	mov	r0, r6
 8007f12:	f000 fcbb 	bl	800888c <__pow5mult>
 8007f16:	9b06      	ldr	r3, [sp, #24]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	dd7a      	ble.n	8008014 <_dtoa_r+0x7cc>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9309      	str	r3, [sp, #36]	; 0x24
 8007f22:	6922      	ldr	r2, [r4, #16]
 8007f24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007f28:	6910      	ldr	r0, [r2, #16]
 8007f2a:	f000 fba1 	bl	8008670 <__hi0bits>
 8007f2e:	f1c0 0020 	rsb	r0, r0, #32
 8007f32:	9b05      	ldr	r3, [sp, #20]
 8007f34:	4418      	add	r0, r3
 8007f36:	f010 001f 	ands.w	r0, r0, #31
 8007f3a:	f000 8093 	beq.w	8008064 <_dtoa_r+0x81c>
 8007f3e:	f1c0 0220 	rsb	r2, r0, #32
 8007f42:	2a04      	cmp	r2, #4
 8007f44:	f340 8085 	ble.w	8008052 <_dtoa_r+0x80a>
 8007f48:	9b04      	ldr	r3, [sp, #16]
 8007f4a:	f1c0 001c 	rsb	r0, r0, #28
 8007f4e:	4403      	add	r3, r0
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	4480      	add	r8, r0
 8007f56:	4403      	add	r3, r0
 8007f58:	9305      	str	r3, [sp, #20]
 8007f5a:	9b04      	ldr	r3, [sp, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dd05      	ble.n	8007f6c <_dtoa_r+0x724>
 8007f60:	4629      	mov	r1, r5
 8007f62:	461a      	mov	r2, r3
 8007f64:	4630      	mov	r0, r6
 8007f66:	f000 fceb 	bl	8008940 <__lshift>
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	9b05      	ldr	r3, [sp, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	dd05      	ble.n	8007f7e <_dtoa_r+0x736>
 8007f72:	4621      	mov	r1, r4
 8007f74:	461a      	mov	r2, r3
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 fce2 	bl	8008940 <__lshift>
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d071      	beq.n	8008068 <_dtoa_r+0x820>
 8007f84:	4621      	mov	r1, r4
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 fd46 	bl	8008a18 <__mcmp>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	da6b      	bge.n	8008068 <_dtoa_r+0x820>
 8007f90:	2300      	movs	r3, #0
 8007f92:	4629      	mov	r1, r5
 8007f94:	220a      	movs	r2, #10
 8007f96:	4630      	mov	r0, r6
 8007f98:	f000 fb24 	bl	80085e4 <__multadd>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 8197 	beq.w	80082d8 <_dtoa_r+0xa90>
 8007faa:	4639      	mov	r1, r7
 8007fac:	2300      	movs	r3, #0
 8007fae:	220a      	movs	r2, #10
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 fb17 	bl	80085e4 <__multadd>
 8007fb6:	f1ba 0f00 	cmp.w	sl, #0
 8007fba:	4607      	mov	r7, r0
 8007fbc:	f300 8093 	bgt.w	80080e6 <_dtoa_r+0x89e>
 8007fc0:	9b06      	ldr	r3, [sp, #24]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	dc57      	bgt.n	8008076 <_dtoa_r+0x82e>
 8007fc6:	e08e      	b.n	80080e6 <_dtoa_r+0x89e>
 8007fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fce:	e751      	b.n	8007e74 <_dtoa_r+0x62c>
 8007fd0:	f109 34ff 	add.w	r4, r9, #4294967295
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	bfbf      	itttt	lt
 8007fd8:	1ae2      	sublt	r2, r4, r3
 8007fda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007fdc:	189b      	addlt	r3, r3, r2
 8007fde:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007fe0:	bfae      	itee	ge
 8007fe2:	1b1c      	subge	r4, r3, r4
 8007fe4:	4623      	movlt	r3, r4
 8007fe6:	2400      	movlt	r4, #0
 8007fe8:	f1b9 0f00 	cmp.w	r9, #0
 8007fec:	bfb5      	itete	lt
 8007fee:	9a04      	ldrlt	r2, [sp, #16]
 8007ff0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007ff4:	eba2 0809 	sublt.w	r8, r2, r9
 8007ff8:	464a      	movge	r2, r9
 8007ffa:	bfb8      	it	lt
 8007ffc:	2200      	movlt	r2, #0
 8007ffe:	e73c      	b.n	8007e7a <_dtoa_r+0x632>
 8008000:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008004:	9f07      	ldr	r7, [sp, #28]
 8008006:	461c      	mov	r4, r3
 8008008:	e744      	b.n	8007e94 <_dtoa_r+0x64c>
 800800a:	461a      	mov	r2, r3
 800800c:	e770      	b.n	8007ef0 <_dtoa_r+0x6a8>
 800800e:	9b06      	ldr	r3, [sp, #24]
 8008010:	2b01      	cmp	r3, #1
 8008012:	dc18      	bgt.n	8008046 <_dtoa_r+0x7fe>
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	b9b3      	cbnz	r3, 8008046 <_dtoa_r+0x7fe>
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800801e:	b9a2      	cbnz	r2, 800804a <_dtoa_r+0x802>
 8008020:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008024:	0d12      	lsrs	r2, r2, #20
 8008026:	0512      	lsls	r2, r2, #20
 8008028:	b18a      	cbz	r2, 800804e <_dtoa_r+0x806>
 800802a:	9b04      	ldr	r3, [sp, #16]
 800802c:	3301      	adds	r3, #1
 800802e:	9304      	str	r3, [sp, #16]
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	3301      	adds	r3, #1
 8008034:	9305      	str	r3, [sp, #20]
 8008036:	2301      	movs	r3, #1
 8008038:	9309      	str	r3, [sp, #36]	; 0x24
 800803a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	f47f af70 	bne.w	8007f22 <_dtoa_r+0x6da>
 8008042:	2001      	movs	r0, #1
 8008044:	e775      	b.n	8007f32 <_dtoa_r+0x6ea>
 8008046:	2300      	movs	r3, #0
 8008048:	e7f6      	b.n	8008038 <_dtoa_r+0x7f0>
 800804a:	9b02      	ldr	r3, [sp, #8]
 800804c:	e7f4      	b.n	8008038 <_dtoa_r+0x7f0>
 800804e:	9209      	str	r2, [sp, #36]	; 0x24
 8008050:	e7f3      	b.n	800803a <_dtoa_r+0x7f2>
 8008052:	d082      	beq.n	8007f5a <_dtoa_r+0x712>
 8008054:	9b04      	ldr	r3, [sp, #16]
 8008056:	321c      	adds	r2, #28
 8008058:	4413      	add	r3, r2
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	9b05      	ldr	r3, [sp, #20]
 800805e:	4490      	add	r8, r2
 8008060:	4413      	add	r3, r2
 8008062:	e779      	b.n	8007f58 <_dtoa_r+0x710>
 8008064:	4602      	mov	r2, r0
 8008066:	e7f5      	b.n	8008054 <_dtoa_r+0x80c>
 8008068:	f1b9 0f00 	cmp.w	r9, #0
 800806c:	dc36      	bgt.n	80080dc <_dtoa_r+0x894>
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	2b02      	cmp	r3, #2
 8008072:	dd33      	ble.n	80080dc <_dtoa_r+0x894>
 8008074:	46ca      	mov	sl, r9
 8008076:	f1ba 0f00 	cmp.w	sl, #0
 800807a:	d10d      	bne.n	8008098 <_dtoa_r+0x850>
 800807c:	4621      	mov	r1, r4
 800807e:	4653      	mov	r3, sl
 8008080:	2205      	movs	r2, #5
 8008082:	4630      	mov	r0, r6
 8008084:	f000 faae 	bl	80085e4 <__multadd>
 8008088:	4601      	mov	r1, r0
 800808a:	4604      	mov	r4, r0
 800808c:	4628      	mov	r0, r5
 800808e:	f000 fcc3 	bl	8008a18 <__mcmp>
 8008092:	2800      	cmp	r0, #0
 8008094:	f73f ade4 	bgt.w	8007c60 <_dtoa_r+0x418>
 8008098:	9b08      	ldr	r3, [sp, #32]
 800809a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800809e:	ea6f 0b03 	mvn.w	fp, r3
 80080a2:	f04f 0900 	mov.w	r9, #0
 80080a6:	4621      	mov	r1, r4
 80080a8:	4630      	mov	r0, r6
 80080aa:	f000 fa79 	bl	80085a0 <_Bfree>
 80080ae:	2f00      	cmp	r7, #0
 80080b0:	f43f aea1 	beq.w	8007df6 <_dtoa_r+0x5ae>
 80080b4:	f1b9 0f00 	cmp.w	r9, #0
 80080b8:	d005      	beq.n	80080c6 <_dtoa_r+0x87e>
 80080ba:	45b9      	cmp	r9, r7
 80080bc:	d003      	beq.n	80080c6 <_dtoa_r+0x87e>
 80080be:	4649      	mov	r1, r9
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 fa6d 	bl	80085a0 <_Bfree>
 80080c6:	4639      	mov	r1, r7
 80080c8:	4630      	mov	r0, r6
 80080ca:	f000 fa69 	bl	80085a0 <_Bfree>
 80080ce:	e692      	b.n	8007df6 <_dtoa_r+0x5ae>
 80080d0:	2400      	movs	r4, #0
 80080d2:	4627      	mov	r7, r4
 80080d4:	e7e0      	b.n	8008098 <_dtoa_r+0x850>
 80080d6:	4693      	mov	fp, r2
 80080d8:	4627      	mov	r7, r4
 80080da:	e5c1      	b.n	8007c60 <_dtoa_r+0x418>
 80080dc:	9b07      	ldr	r3, [sp, #28]
 80080de:	46ca      	mov	sl, r9
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 8100 	beq.w	80082e6 <_dtoa_r+0xa9e>
 80080e6:	f1b8 0f00 	cmp.w	r8, #0
 80080ea:	dd05      	ble.n	80080f8 <_dtoa_r+0x8b0>
 80080ec:	4639      	mov	r1, r7
 80080ee:	4642      	mov	r2, r8
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 fc25 	bl	8008940 <__lshift>
 80080f6:	4607      	mov	r7, r0
 80080f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d05d      	beq.n	80081ba <_dtoa_r+0x972>
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4630      	mov	r0, r6
 8008102:	f000 fa0d 	bl	8008520 <_Balloc>
 8008106:	4680      	mov	r8, r0
 8008108:	b928      	cbnz	r0, 8008116 <_dtoa_r+0x8ce>
 800810a:	4b82      	ldr	r3, [pc, #520]	; (8008314 <_dtoa_r+0xacc>)
 800810c:	4602      	mov	r2, r0
 800810e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008112:	f7ff bbb1 	b.w	8007878 <_dtoa_r+0x30>
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	3202      	adds	r2, #2
 800811a:	0092      	lsls	r2, r2, #2
 800811c:	f107 010c 	add.w	r1, r7, #12
 8008120:	300c      	adds	r0, #12
 8008122:	f7ff faf8 	bl	8007716 <memcpy>
 8008126:	2201      	movs	r2, #1
 8008128:	4641      	mov	r1, r8
 800812a:	4630      	mov	r0, r6
 800812c:	f000 fc08 	bl	8008940 <__lshift>
 8008130:	9b01      	ldr	r3, [sp, #4]
 8008132:	3301      	adds	r3, #1
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	4453      	add	r3, sl
 800813a:	9308      	str	r3, [sp, #32]
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	46b9      	mov	r9, r7
 8008144:	9307      	str	r3, [sp, #28]
 8008146:	4607      	mov	r7, r0
 8008148:	9b04      	ldr	r3, [sp, #16]
 800814a:	4621      	mov	r1, r4
 800814c:	3b01      	subs	r3, #1
 800814e:	4628      	mov	r0, r5
 8008150:	9302      	str	r3, [sp, #8]
 8008152:	f7ff faee 	bl	8007732 <quorem>
 8008156:	4603      	mov	r3, r0
 8008158:	3330      	adds	r3, #48	; 0x30
 800815a:	9005      	str	r0, [sp, #20]
 800815c:	4649      	mov	r1, r9
 800815e:	4628      	mov	r0, r5
 8008160:	9309      	str	r3, [sp, #36]	; 0x24
 8008162:	f000 fc59 	bl	8008a18 <__mcmp>
 8008166:	463a      	mov	r2, r7
 8008168:	4682      	mov	sl, r0
 800816a:	4621      	mov	r1, r4
 800816c:	4630      	mov	r0, r6
 800816e:	f000 fc6f 	bl	8008a50 <__mdiff>
 8008172:	68c2      	ldr	r2, [r0, #12]
 8008174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008176:	4680      	mov	r8, r0
 8008178:	bb0a      	cbnz	r2, 80081be <_dtoa_r+0x976>
 800817a:	4601      	mov	r1, r0
 800817c:	4628      	mov	r0, r5
 800817e:	f000 fc4b 	bl	8008a18 <__mcmp>
 8008182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008184:	4602      	mov	r2, r0
 8008186:	4641      	mov	r1, r8
 8008188:	4630      	mov	r0, r6
 800818a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800818e:	f000 fa07 	bl	80085a0 <_Bfree>
 8008192:	9b06      	ldr	r3, [sp, #24]
 8008194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008196:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800819a:	ea43 0102 	orr.w	r1, r3, r2
 800819e:	9b07      	ldr	r3, [sp, #28]
 80081a0:	4319      	orrs	r1, r3
 80081a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a4:	d10d      	bne.n	80081c2 <_dtoa_r+0x97a>
 80081a6:	2b39      	cmp	r3, #57	; 0x39
 80081a8:	d029      	beq.n	80081fe <_dtoa_r+0x9b6>
 80081aa:	f1ba 0f00 	cmp.w	sl, #0
 80081ae:	dd01      	ble.n	80081b4 <_dtoa_r+0x96c>
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	3331      	adds	r3, #49	; 0x31
 80081b4:	9a02      	ldr	r2, [sp, #8]
 80081b6:	7013      	strb	r3, [r2, #0]
 80081b8:	e775      	b.n	80080a6 <_dtoa_r+0x85e>
 80081ba:	4638      	mov	r0, r7
 80081bc:	e7b8      	b.n	8008130 <_dtoa_r+0x8e8>
 80081be:	2201      	movs	r2, #1
 80081c0:	e7e1      	b.n	8008186 <_dtoa_r+0x93e>
 80081c2:	f1ba 0f00 	cmp.w	sl, #0
 80081c6:	db06      	blt.n	80081d6 <_dtoa_r+0x98e>
 80081c8:	9906      	ldr	r1, [sp, #24]
 80081ca:	ea41 0a0a 	orr.w	sl, r1, sl
 80081ce:	9907      	ldr	r1, [sp, #28]
 80081d0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80081d4:	d120      	bne.n	8008218 <_dtoa_r+0x9d0>
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	ddec      	ble.n	80081b4 <_dtoa_r+0x96c>
 80081da:	4629      	mov	r1, r5
 80081dc:	2201      	movs	r2, #1
 80081de:	4630      	mov	r0, r6
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	f000 fbad 	bl	8008940 <__lshift>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4605      	mov	r5, r0
 80081ea:	f000 fc15 	bl	8008a18 <__mcmp>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	9b04      	ldr	r3, [sp, #16]
 80081f2:	dc02      	bgt.n	80081fa <_dtoa_r+0x9b2>
 80081f4:	d1de      	bne.n	80081b4 <_dtoa_r+0x96c>
 80081f6:	07da      	lsls	r2, r3, #31
 80081f8:	d5dc      	bpl.n	80081b4 <_dtoa_r+0x96c>
 80081fa:	2b39      	cmp	r3, #57	; 0x39
 80081fc:	d1d8      	bne.n	80081b0 <_dtoa_r+0x968>
 80081fe:	9a02      	ldr	r2, [sp, #8]
 8008200:	2339      	movs	r3, #57	; 0x39
 8008202:	7013      	strb	r3, [r2, #0]
 8008204:	4643      	mov	r3, r8
 8008206:	4698      	mov	r8, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800820e:	2a39      	cmp	r2, #57	; 0x39
 8008210:	d051      	beq.n	80082b6 <_dtoa_r+0xa6e>
 8008212:	3201      	adds	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e746      	b.n	80080a6 <_dtoa_r+0x85e>
 8008218:	2a00      	cmp	r2, #0
 800821a:	dd03      	ble.n	8008224 <_dtoa_r+0x9dc>
 800821c:	2b39      	cmp	r3, #57	; 0x39
 800821e:	d0ee      	beq.n	80081fe <_dtoa_r+0x9b6>
 8008220:	3301      	adds	r3, #1
 8008222:	e7c7      	b.n	80081b4 <_dtoa_r+0x96c>
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	9908      	ldr	r1, [sp, #32]
 8008228:	f802 3c01 	strb.w	r3, [r2, #-1]
 800822c:	428a      	cmp	r2, r1
 800822e:	d02b      	beq.n	8008288 <_dtoa_r+0xa40>
 8008230:	4629      	mov	r1, r5
 8008232:	2300      	movs	r3, #0
 8008234:	220a      	movs	r2, #10
 8008236:	4630      	mov	r0, r6
 8008238:	f000 f9d4 	bl	80085e4 <__multadd>
 800823c:	45b9      	cmp	r9, r7
 800823e:	4605      	mov	r5, r0
 8008240:	f04f 0300 	mov.w	r3, #0
 8008244:	f04f 020a 	mov.w	r2, #10
 8008248:	4649      	mov	r1, r9
 800824a:	4630      	mov	r0, r6
 800824c:	d107      	bne.n	800825e <_dtoa_r+0xa16>
 800824e:	f000 f9c9 	bl	80085e4 <__multadd>
 8008252:	4681      	mov	r9, r0
 8008254:	4607      	mov	r7, r0
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	3301      	adds	r3, #1
 800825a:	9304      	str	r3, [sp, #16]
 800825c:	e774      	b.n	8008148 <_dtoa_r+0x900>
 800825e:	f000 f9c1 	bl	80085e4 <__multadd>
 8008262:	4639      	mov	r1, r7
 8008264:	4681      	mov	r9, r0
 8008266:	2300      	movs	r3, #0
 8008268:	220a      	movs	r2, #10
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f9ba 	bl	80085e4 <__multadd>
 8008270:	4607      	mov	r7, r0
 8008272:	e7f0      	b.n	8008256 <_dtoa_r+0xa0e>
 8008274:	f1ba 0f00 	cmp.w	sl, #0
 8008278:	9a01      	ldr	r2, [sp, #4]
 800827a:	bfcc      	ite	gt
 800827c:	46d0      	movgt	r8, sl
 800827e:	f04f 0801 	movle.w	r8, #1
 8008282:	4490      	add	r8, r2
 8008284:	f04f 0900 	mov.w	r9, #0
 8008288:	4629      	mov	r1, r5
 800828a:	2201      	movs	r2, #1
 800828c:	4630      	mov	r0, r6
 800828e:	9302      	str	r3, [sp, #8]
 8008290:	f000 fb56 	bl	8008940 <__lshift>
 8008294:	4621      	mov	r1, r4
 8008296:	4605      	mov	r5, r0
 8008298:	f000 fbbe 	bl	8008a18 <__mcmp>
 800829c:	2800      	cmp	r0, #0
 800829e:	dcb1      	bgt.n	8008204 <_dtoa_r+0x9bc>
 80082a0:	d102      	bne.n	80082a8 <_dtoa_r+0xa60>
 80082a2:	9b02      	ldr	r3, [sp, #8]
 80082a4:	07db      	lsls	r3, r3, #31
 80082a6:	d4ad      	bmi.n	8008204 <_dtoa_r+0x9bc>
 80082a8:	4643      	mov	r3, r8
 80082aa:	4698      	mov	r8, r3
 80082ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082b0:	2a30      	cmp	r2, #48	; 0x30
 80082b2:	d0fa      	beq.n	80082aa <_dtoa_r+0xa62>
 80082b4:	e6f7      	b.n	80080a6 <_dtoa_r+0x85e>
 80082b6:	9a01      	ldr	r2, [sp, #4]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d1a4      	bne.n	8008206 <_dtoa_r+0x9be>
 80082bc:	f10b 0b01 	add.w	fp, fp, #1
 80082c0:	2331      	movs	r3, #49	; 0x31
 80082c2:	e778      	b.n	80081b6 <_dtoa_r+0x96e>
 80082c4:	4b14      	ldr	r3, [pc, #80]	; (8008318 <_dtoa_r+0xad0>)
 80082c6:	f7ff bb2a 	b.w	800791e <_dtoa_r+0xd6>
 80082ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f47f ab05 	bne.w	80078dc <_dtoa_r+0x94>
 80082d2:	4b12      	ldr	r3, [pc, #72]	; (800831c <_dtoa_r+0xad4>)
 80082d4:	f7ff bb23 	b.w	800791e <_dtoa_r+0xd6>
 80082d8:	f1ba 0f00 	cmp.w	sl, #0
 80082dc:	dc03      	bgt.n	80082e6 <_dtoa_r+0xa9e>
 80082de:	9b06      	ldr	r3, [sp, #24]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	f73f aec8 	bgt.w	8008076 <_dtoa_r+0x82e>
 80082e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80082ea:	4621      	mov	r1, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	f7ff fa20 	bl	8007732 <quorem>
 80082f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80082f6:	f808 3b01 	strb.w	r3, [r8], #1
 80082fa:	9a01      	ldr	r2, [sp, #4]
 80082fc:	eba8 0202 	sub.w	r2, r8, r2
 8008300:	4592      	cmp	sl, r2
 8008302:	ddb7      	ble.n	8008274 <_dtoa_r+0xa2c>
 8008304:	4629      	mov	r1, r5
 8008306:	2300      	movs	r3, #0
 8008308:	220a      	movs	r2, #10
 800830a:	4630      	mov	r0, r6
 800830c:	f000 f96a 	bl	80085e4 <__multadd>
 8008310:	4605      	mov	r5, r0
 8008312:	e7ea      	b.n	80082ea <_dtoa_r+0xaa2>
 8008314:	08009a5c 	.word	0x08009a5c
 8008318:	080099bc 	.word	0x080099bc
 800831c:	080099e0 	.word	0x080099e0

08008320 <_free_r>:
 8008320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008322:	2900      	cmp	r1, #0
 8008324:	d044      	beq.n	80083b0 <_free_r+0x90>
 8008326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800832a:	9001      	str	r0, [sp, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f1a1 0404 	sub.w	r4, r1, #4
 8008332:	bfb8      	it	lt
 8008334:	18e4      	addlt	r4, r4, r3
 8008336:	f000 f8e7 	bl	8008508 <__malloc_lock>
 800833a:	4a1e      	ldr	r2, [pc, #120]	; (80083b4 <_free_r+0x94>)
 800833c:	9801      	ldr	r0, [sp, #4]
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	b933      	cbnz	r3, 8008350 <_free_r+0x30>
 8008342:	6063      	str	r3, [r4, #4]
 8008344:	6014      	str	r4, [r2, #0]
 8008346:	b003      	add	sp, #12
 8008348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800834c:	f000 b8e2 	b.w	8008514 <__malloc_unlock>
 8008350:	42a3      	cmp	r3, r4
 8008352:	d908      	bls.n	8008366 <_free_r+0x46>
 8008354:	6825      	ldr	r5, [r4, #0]
 8008356:	1961      	adds	r1, r4, r5
 8008358:	428b      	cmp	r3, r1
 800835a:	bf01      	itttt	eq
 800835c:	6819      	ldreq	r1, [r3, #0]
 800835e:	685b      	ldreq	r3, [r3, #4]
 8008360:	1949      	addeq	r1, r1, r5
 8008362:	6021      	streq	r1, [r4, #0]
 8008364:	e7ed      	b.n	8008342 <_free_r+0x22>
 8008366:	461a      	mov	r2, r3
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b10b      	cbz	r3, 8008370 <_free_r+0x50>
 800836c:	42a3      	cmp	r3, r4
 800836e:	d9fa      	bls.n	8008366 <_free_r+0x46>
 8008370:	6811      	ldr	r1, [r2, #0]
 8008372:	1855      	adds	r5, r2, r1
 8008374:	42a5      	cmp	r5, r4
 8008376:	d10b      	bne.n	8008390 <_free_r+0x70>
 8008378:	6824      	ldr	r4, [r4, #0]
 800837a:	4421      	add	r1, r4
 800837c:	1854      	adds	r4, r2, r1
 800837e:	42a3      	cmp	r3, r4
 8008380:	6011      	str	r1, [r2, #0]
 8008382:	d1e0      	bne.n	8008346 <_free_r+0x26>
 8008384:	681c      	ldr	r4, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	6053      	str	r3, [r2, #4]
 800838a:	440c      	add	r4, r1
 800838c:	6014      	str	r4, [r2, #0]
 800838e:	e7da      	b.n	8008346 <_free_r+0x26>
 8008390:	d902      	bls.n	8008398 <_free_r+0x78>
 8008392:	230c      	movs	r3, #12
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	e7d6      	b.n	8008346 <_free_r+0x26>
 8008398:	6825      	ldr	r5, [r4, #0]
 800839a:	1961      	adds	r1, r4, r5
 800839c:	428b      	cmp	r3, r1
 800839e:	bf04      	itt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	6063      	str	r3, [r4, #4]
 80083a6:	bf04      	itt	eq
 80083a8:	1949      	addeq	r1, r1, r5
 80083aa:	6021      	streq	r1, [r4, #0]
 80083ac:	6054      	str	r4, [r2, #4]
 80083ae:	e7ca      	b.n	8008346 <_free_r+0x26>
 80083b0:	b003      	add	sp, #12
 80083b2:	bd30      	pop	{r4, r5, pc}
 80083b4:	20004b40 	.word	0x20004b40

080083b8 <malloc>:
 80083b8:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <malloc+0xc>)
 80083ba:	4601      	mov	r1, r0
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	f000 b823 	b.w	8008408 <_malloc_r>
 80083c2:	bf00      	nop
 80083c4:	2000007c 	.word	0x2000007c

080083c8 <sbrk_aligned>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	4e0e      	ldr	r6, [pc, #56]	; (8008404 <sbrk_aligned+0x3c>)
 80083cc:	460c      	mov	r4, r1
 80083ce:	6831      	ldr	r1, [r6, #0]
 80083d0:	4605      	mov	r5, r0
 80083d2:	b911      	cbnz	r1, 80083da <sbrk_aligned+0x12>
 80083d4:	f000 fe40 	bl	8009058 <_sbrk_r>
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 fe3b 	bl	8009058 <_sbrk_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d00a      	beq.n	80083fc <sbrk_aligned+0x34>
 80083e6:	1cc4      	adds	r4, r0, #3
 80083e8:	f024 0403 	bic.w	r4, r4, #3
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d007      	beq.n	8008400 <sbrk_aligned+0x38>
 80083f0:	1a21      	subs	r1, r4, r0
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 fe30 	bl	8009058 <_sbrk_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d101      	bne.n	8008400 <sbrk_aligned+0x38>
 80083fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008400:	4620      	mov	r0, r4
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	20004b44 	.word	0x20004b44

08008408 <_malloc_r>:
 8008408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800840c:	1ccd      	adds	r5, r1, #3
 800840e:	f025 0503 	bic.w	r5, r5, #3
 8008412:	3508      	adds	r5, #8
 8008414:	2d0c      	cmp	r5, #12
 8008416:	bf38      	it	cc
 8008418:	250c      	movcc	r5, #12
 800841a:	2d00      	cmp	r5, #0
 800841c:	4607      	mov	r7, r0
 800841e:	db01      	blt.n	8008424 <_malloc_r+0x1c>
 8008420:	42a9      	cmp	r1, r5
 8008422:	d905      	bls.n	8008430 <_malloc_r+0x28>
 8008424:	230c      	movs	r3, #12
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	2600      	movs	r6, #0
 800842a:	4630      	mov	r0, r6
 800842c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008430:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008504 <_malloc_r+0xfc>
 8008434:	f000 f868 	bl	8008508 <__malloc_lock>
 8008438:	f8d8 3000 	ldr.w	r3, [r8]
 800843c:	461c      	mov	r4, r3
 800843e:	bb5c      	cbnz	r4, 8008498 <_malloc_r+0x90>
 8008440:	4629      	mov	r1, r5
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff ffc0 	bl	80083c8 <sbrk_aligned>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	4604      	mov	r4, r0
 800844c:	d155      	bne.n	80084fa <_malloc_r+0xf2>
 800844e:	f8d8 4000 	ldr.w	r4, [r8]
 8008452:	4626      	mov	r6, r4
 8008454:	2e00      	cmp	r6, #0
 8008456:	d145      	bne.n	80084e4 <_malloc_r+0xdc>
 8008458:	2c00      	cmp	r4, #0
 800845a:	d048      	beq.n	80084ee <_malloc_r+0xe6>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	4631      	mov	r1, r6
 8008460:	4638      	mov	r0, r7
 8008462:	eb04 0903 	add.w	r9, r4, r3
 8008466:	f000 fdf7 	bl	8009058 <_sbrk_r>
 800846a:	4581      	cmp	r9, r0
 800846c:	d13f      	bne.n	80084ee <_malloc_r+0xe6>
 800846e:	6821      	ldr	r1, [r4, #0]
 8008470:	1a6d      	subs	r5, r5, r1
 8008472:	4629      	mov	r1, r5
 8008474:	4638      	mov	r0, r7
 8008476:	f7ff ffa7 	bl	80083c8 <sbrk_aligned>
 800847a:	3001      	adds	r0, #1
 800847c:	d037      	beq.n	80084ee <_malloc_r+0xe6>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	442b      	add	r3, r5
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	f8d8 3000 	ldr.w	r3, [r8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d038      	beq.n	80084fe <_malloc_r+0xf6>
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	42a2      	cmp	r2, r4
 8008490:	d12b      	bne.n	80084ea <_malloc_r+0xe2>
 8008492:	2200      	movs	r2, #0
 8008494:	605a      	str	r2, [r3, #4]
 8008496:	e00f      	b.n	80084b8 <_malloc_r+0xb0>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	1b52      	subs	r2, r2, r5
 800849c:	d41f      	bmi.n	80084de <_malloc_r+0xd6>
 800849e:	2a0b      	cmp	r2, #11
 80084a0:	d917      	bls.n	80084d2 <_malloc_r+0xca>
 80084a2:	1961      	adds	r1, r4, r5
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	6025      	str	r5, [r4, #0]
 80084a8:	bf18      	it	ne
 80084aa:	6059      	strne	r1, [r3, #4]
 80084ac:	6863      	ldr	r3, [r4, #4]
 80084ae:	bf08      	it	eq
 80084b0:	f8c8 1000 	streq.w	r1, [r8]
 80084b4:	5162      	str	r2, [r4, r5]
 80084b6:	604b      	str	r3, [r1, #4]
 80084b8:	4638      	mov	r0, r7
 80084ba:	f104 060b 	add.w	r6, r4, #11
 80084be:	f000 f829 	bl	8008514 <__malloc_unlock>
 80084c2:	f026 0607 	bic.w	r6, r6, #7
 80084c6:	1d23      	adds	r3, r4, #4
 80084c8:	1af2      	subs	r2, r6, r3
 80084ca:	d0ae      	beq.n	800842a <_malloc_r+0x22>
 80084cc:	1b9b      	subs	r3, r3, r6
 80084ce:	50a3      	str	r3, [r4, r2]
 80084d0:	e7ab      	b.n	800842a <_malloc_r+0x22>
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	6862      	ldr	r2, [r4, #4]
 80084d6:	d1dd      	bne.n	8008494 <_malloc_r+0x8c>
 80084d8:	f8c8 2000 	str.w	r2, [r8]
 80084dc:	e7ec      	b.n	80084b8 <_malloc_r+0xb0>
 80084de:	4623      	mov	r3, r4
 80084e0:	6864      	ldr	r4, [r4, #4]
 80084e2:	e7ac      	b.n	800843e <_malloc_r+0x36>
 80084e4:	4634      	mov	r4, r6
 80084e6:	6876      	ldr	r6, [r6, #4]
 80084e8:	e7b4      	b.n	8008454 <_malloc_r+0x4c>
 80084ea:	4613      	mov	r3, r2
 80084ec:	e7cc      	b.n	8008488 <_malloc_r+0x80>
 80084ee:	230c      	movs	r3, #12
 80084f0:	603b      	str	r3, [r7, #0]
 80084f2:	4638      	mov	r0, r7
 80084f4:	f000 f80e 	bl	8008514 <__malloc_unlock>
 80084f8:	e797      	b.n	800842a <_malloc_r+0x22>
 80084fa:	6025      	str	r5, [r4, #0]
 80084fc:	e7dc      	b.n	80084b8 <_malloc_r+0xb0>
 80084fe:	605b      	str	r3, [r3, #4]
 8008500:	deff      	udf	#255	; 0xff
 8008502:	bf00      	nop
 8008504:	20004b40 	.word	0x20004b40

08008508 <__malloc_lock>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__malloc_lock+0x8>)
 800850a:	f7ff b902 	b.w	8007712 <__retarget_lock_acquire_recursive>
 800850e:	bf00      	nop
 8008510:	20004b3c 	.word	0x20004b3c

08008514 <__malloc_unlock>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__malloc_unlock+0x8>)
 8008516:	f7ff b8fd 	b.w	8007714 <__retarget_lock_release_recursive>
 800851a:	bf00      	nop
 800851c:	20004b3c 	.word	0x20004b3c

08008520 <_Balloc>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	69c6      	ldr	r6, [r0, #28]
 8008524:	4604      	mov	r4, r0
 8008526:	460d      	mov	r5, r1
 8008528:	b976      	cbnz	r6, 8008548 <_Balloc+0x28>
 800852a:	2010      	movs	r0, #16
 800852c:	f7ff ff44 	bl	80083b8 <malloc>
 8008530:	4602      	mov	r2, r0
 8008532:	61e0      	str	r0, [r4, #28]
 8008534:	b920      	cbnz	r0, 8008540 <_Balloc+0x20>
 8008536:	4b18      	ldr	r3, [pc, #96]	; (8008598 <_Balloc+0x78>)
 8008538:	4818      	ldr	r0, [pc, #96]	; (800859c <_Balloc+0x7c>)
 800853a:	216b      	movs	r1, #107	; 0x6b
 800853c:	f000 fd9c 	bl	8009078 <__assert_func>
 8008540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008544:	6006      	str	r6, [r0, #0]
 8008546:	60c6      	str	r6, [r0, #12]
 8008548:	69e6      	ldr	r6, [r4, #28]
 800854a:	68f3      	ldr	r3, [r6, #12]
 800854c:	b183      	cbz	r3, 8008570 <_Balloc+0x50>
 800854e:	69e3      	ldr	r3, [r4, #28]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008556:	b9b8      	cbnz	r0, 8008588 <_Balloc+0x68>
 8008558:	2101      	movs	r1, #1
 800855a:	fa01 f605 	lsl.w	r6, r1, r5
 800855e:	1d72      	adds	r2, r6, #5
 8008560:	0092      	lsls	r2, r2, #2
 8008562:	4620      	mov	r0, r4
 8008564:	f000 fda6 	bl	80090b4 <_calloc_r>
 8008568:	b160      	cbz	r0, 8008584 <_Balloc+0x64>
 800856a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800856e:	e00e      	b.n	800858e <_Balloc+0x6e>
 8008570:	2221      	movs	r2, #33	; 0x21
 8008572:	2104      	movs	r1, #4
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fd9d 	bl	80090b4 <_calloc_r>
 800857a:	69e3      	ldr	r3, [r4, #28]
 800857c:	60f0      	str	r0, [r6, #12]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e4      	bne.n	800854e <_Balloc+0x2e>
 8008584:	2000      	movs	r0, #0
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	6802      	ldr	r2, [r0, #0]
 800858a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800858e:	2300      	movs	r3, #0
 8008590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008594:	e7f7      	b.n	8008586 <_Balloc+0x66>
 8008596:	bf00      	nop
 8008598:	080099ed 	.word	0x080099ed
 800859c:	08009a6d 	.word	0x08009a6d

080085a0 <_Bfree>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	69c6      	ldr	r6, [r0, #28]
 80085a4:	4605      	mov	r5, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	b976      	cbnz	r6, 80085c8 <_Bfree+0x28>
 80085aa:	2010      	movs	r0, #16
 80085ac:	f7ff ff04 	bl	80083b8 <malloc>
 80085b0:	4602      	mov	r2, r0
 80085b2:	61e8      	str	r0, [r5, #28]
 80085b4:	b920      	cbnz	r0, 80085c0 <_Bfree+0x20>
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <_Bfree+0x3c>)
 80085b8:	4809      	ldr	r0, [pc, #36]	; (80085e0 <_Bfree+0x40>)
 80085ba:	218f      	movs	r1, #143	; 0x8f
 80085bc:	f000 fd5c 	bl	8009078 <__assert_func>
 80085c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085c4:	6006      	str	r6, [r0, #0]
 80085c6:	60c6      	str	r6, [r0, #12]
 80085c8:	b13c      	cbz	r4, 80085da <_Bfree+0x3a>
 80085ca:	69eb      	ldr	r3, [r5, #28]
 80085cc:	6862      	ldr	r2, [r4, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085d4:	6021      	str	r1, [r4, #0]
 80085d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	080099ed 	.word	0x080099ed
 80085e0:	08009a6d 	.word	0x08009a6d

080085e4 <__multadd>:
 80085e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e8:	690d      	ldr	r5, [r1, #16]
 80085ea:	4607      	mov	r7, r0
 80085ec:	460c      	mov	r4, r1
 80085ee:	461e      	mov	r6, r3
 80085f0:	f101 0c14 	add.w	ip, r1, #20
 80085f4:	2000      	movs	r0, #0
 80085f6:	f8dc 3000 	ldr.w	r3, [ip]
 80085fa:	b299      	uxth	r1, r3
 80085fc:	fb02 6101 	mla	r1, r2, r1, r6
 8008600:	0c1e      	lsrs	r6, r3, #16
 8008602:	0c0b      	lsrs	r3, r1, #16
 8008604:	fb02 3306 	mla	r3, r2, r6, r3
 8008608:	b289      	uxth	r1, r1
 800860a:	3001      	adds	r0, #1
 800860c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008610:	4285      	cmp	r5, r0
 8008612:	f84c 1b04 	str.w	r1, [ip], #4
 8008616:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800861a:	dcec      	bgt.n	80085f6 <__multadd+0x12>
 800861c:	b30e      	cbz	r6, 8008662 <__multadd+0x7e>
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	42ab      	cmp	r3, r5
 8008622:	dc19      	bgt.n	8008658 <__multadd+0x74>
 8008624:	6861      	ldr	r1, [r4, #4]
 8008626:	4638      	mov	r0, r7
 8008628:	3101      	adds	r1, #1
 800862a:	f7ff ff79 	bl	8008520 <_Balloc>
 800862e:	4680      	mov	r8, r0
 8008630:	b928      	cbnz	r0, 800863e <__multadd+0x5a>
 8008632:	4602      	mov	r2, r0
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <__multadd+0x84>)
 8008636:	480d      	ldr	r0, [pc, #52]	; (800866c <__multadd+0x88>)
 8008638:	21ba      	movs	r1, #186	; 0xba
 800863a:	f000 fd1d 	bl	8009078 <__assert_func>
 800863e:	6922      	ldr	r2, [r4, #16]
 8008640:	3202      	adds	r2, #2
 8008642:	f104 010c 	add.w	r1, r4, #12
 8008646:	0092      	lsls	r2, r2, #2
 8008648:	300c      	adds	r0, #12
 800864a:	f7ff f864 	bl	8007716 <memcpy>
 800864e:	4621      	mov	r1, r4
 8008650:	4638      	mov	r0, r7
 8008652:	f7ff ffa5 	bl	80085a0 <_Bfree>
 8008656:	4644      	mov	r4, r8
 8008658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800865c:	3501      	adds	r5, #1
 800865e:	615e      	str	r6, [r3, #20]
 8008660:	6125      	str	r5, [r4, #16]
 8008662:	4620      	mov	r0, r4
 8008664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008668:	08009a5c 	.word	0x08009a5c
 800866c:	08009a6d 	.word	0x08009a6d

08008670 <__hi0bits>:
 8008670:	0c03      	lsrs	r3, r0, #16
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	b9d3      	cbnz	r3, 80086ac <__hi0bits+0x3c>
 8008676:	0400      	lsls	r0, r0, #16
 8008678:	2310      	movs	r3, #16
 800867a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800867e:	bf04      	itt	eq
 8008680:	0200      	lsleq	r0, r0, #8
 8008682:	3308      	addeq	r3, #8
 8008684:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008688:	bf04      	itt	eq
 800868a:	0100      	lsleq	r0, r0, #4
 800868c:	3304      	addeq	r3, #4
 800868e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008692:	bf04      	itt	eq
 8008694:	0080      	lsleq	r0, r0, #2
 8008696:	3302      	addeq	r3, #2
 8008698:	2800      	cmp	r0, #0
 800869a:	db05      	blt.n	80086a8 <__hi0bits+0x38>
 800869c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086a0:	f103 0301 	add.w	r3, r3, #1
 80086a4:	bf08      	it	eq
 80086a6:	2320      	moveq	r3, #32
 80086a8:	4618      	mov	r0, r3
 80086aa:	4770      	bx	lr
 80086ac:	2300      	movs	r3, #0
 80086ae:	e7e4      	b.n	800867a <__hi0bits+0xa>

080086b0 <__lo0bits>:
 80086b0:	6803      	ldr	r3, [r0, #0]
 80086b2:	f013 0207 	ands.w	r2, r3, #7
 80086b6:	d00c      	beq.n	80086d2 <__lo0bits+0x22>
 80086b8:	07d9      	lsls	r1, r3, #31
 80086ba:	d422      	bmi.n	8008702 <__lo0bits+0x52>
 80086bc:	079a      	lsls	r2, r3, #30
 80086be:	bf49      	itett	mi
 80086c0:	085b      	lsrmi	r3, r3, #1
 80086c2:	089b      	lsrpl	r3, r3, #2
 80086c4:	6003      	strmi	r3, [r0, #0]
 80086c6:	2201      	movmi	r2, #1
 80086c8:	bf5c      	itt	pl
 80086ca:	6003      	strpl	r3, [r0, #0]
 80086cc:	2202      	movpl	r2, #2
 80086ce:	4610      	mov	r0, r2
 80086d0:	4770      	bx	lr
 80086d2:	b299      	uxth	r1, r3
 80086d4:	b909      	cbnz	r1, 80086da <__lo0bits+0x2a>
 80086d6:	0c1b      	lsrs	r3, r3, #16
 80086d8:	2210      	movs	r2, #16
 80086da:	b2d9      	uxtb	r1, r3
 80086dc:	b909      	cbnz	r1, 80086e2 <__lo0bits+0x32>
 80086de:	3208      	adds	r2, #8
 80086e0:	0a1b      	lsrs	r3, r3, #8
 80086e2:	0719      	lsls	r1, r3, #28
 80086e4:	bf04      	itt	eq
 80086e6:	091b      	lsreq	r3, r3, #4
 80086e8:	3204      	addeq	r2, #4
 80086ea:	0799      	lsls	r1, r3, #30
 80086ec:	bf04      	itt	eq
 80086ee:	089b      	lsreq	r3, r3, #2
 80086f0:	3202      	addeq	r2, #2
 80086f2:	07d9      	lsls	r1, r3, #31
 80086f4:	d403      	bmi.n	80086fe <__lo0bits+0x4e>
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	f102 0201 	add.w	r2, r2, #1
 80086fc:	d003      	beq.n	8008706 <__lo0bits+0x56>
 80086fe:	6003      	str	r3, [r0, #0]
 8008700:	e7e5      	b.n	80086ce <__lo0bits+0x1e>
 8008702:	2200      	movs	r2, #0
 8008704:	e7e3      	b.n	80086ce <__lo0bits+0x1e>
 8008706:	2220      	movs	r2, #32
 8008708:	e7e1      	b.n	80086ce <__lo0bits+0x1e>
	...

0800870c <__i2b>:
 800870c:	b510      	push	{r4, lr}
 800870e:	460c      	mov	r4, r1
 8008710:	2101      	movs	r1, #1
 8008712:	f7ff ff05 	bl	8008520 <_Balloc>
 8008716:	4602      	mov	r2, r0
 8008718:	b928      	cbnz	r0, 8008726 <__i2b+0x1a>
 800871a:	4b05      	ldr	r3, [pc, #20]	; (8008730 <__i2b+0x24>)
 800871c:	4805      	ldr	r0, [pc, #20]	; (8008734 <__i2b+0x28>)
 800871e:	f240 1145 	movw	r1, #325	; 0x145
 8008722:	f000 fca9 	bl	8009078 <__assert_func>
 8008726:	2301      	movs	r3, #1
 8008728:	6144      	str	r4, [r0, #20]
 800872a:	6103      	str	r3, [r0, #16]
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	08009a5c 	.word	0x08009a5c
 8008734:	08009a6d 	.word	0x08009a6d

08008738 <__multiply>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	4691      	mov	r9, r2
 800873e:	690a      	ldr	r2, [r1, #16]
 8008740:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008744:	429a      	cmp	r2, r3
 8008746:	bfb8      	it	lt
 8008748:	460b      	movlt	r3, r1
 800874a:	460c      	mov	r4, r1
 800874c:	bfbc      	itt	lt
 800874e:	464c      	movlt	r4, r9
 8008750:	4699      	movlt	r9, r3
 8008752:	6927      	ldr	r7, [r4, #16]
 8008754:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008758:	68a3      	ldr	r3, [r4, #8]
 800875a:	6861      	ldr	r1, [r4, #4]
 800875c:	eb07 060a 	add.w	r6, r7, sl
 8008760:	42b3      	cmp	r3, r6
 8008762:	b085      	sub	sp, #20
 8008764:	bfb8      	it	lt
 8008766:	3101      	addlt	r1, #1
 8008768:	f7ff feda 	bl	8008520 <_Balloc>
 800876c:	b930      	cbnz	r0, 800877c <__multiply+0x44>
 800876e:	4602      	mov	r2, r0
 8008770:	4b44      	ldr	r3, [pc, #272]	; (8008884 <__multiply+0x14c>)
 8008772:	4845      	ldr	r0, [pc, #276]	; (8008888 <__multiply+0x150>)
 8008774:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008778:	f000 fc7e 	bl	8009078 <__assert_func>
 800877c:	f100 0514 	add.w	r5, r0, #20
 8008780:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008784:	462b      	mov	r3, r5
 8008786:	2200      	movs	r2, #0
 8008788:	4543      	cmp	r3, r8
 800878a:	d321      	bcc.n	80087d0 <__multiply+0x98>
 800878c:	f104 0314 	add.w	r3, r4, #20
 8008790:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008794:	f109 0314 	add.w	r3, r9, #20
 8008798:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800879c:	9202      	str	r2, [sp, #8]
 800879e:	1b3a      	subs	r2, r7, r4
 80087a0:	3a15      	subs	r2, #21
 80087a2:	f022 0203 	bic.w	r2, r2, #3
 80087a6:	3204      	adds	r2, #4
 80087a8:	f104 0115 	add.w	r1, r4, #21
 80087ac:	428f      	cmp	r7, r1
 80087ae:	bf38      	it	cc
 80087b0:	2204      	movcc	r2, #4
 80087b2:	9201      	str	r2, [sp, #4]
 80087b4:	9a02      	ldr	r2, [sp, #8]
 80087b6:	9303      	str	r3, [sp, #12]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d80c      	bhi.n	80087d6 <__multiply+0x9e>
 80087bc:	2e00      	cmp	r6, #0
 80087be:	dd03      	ble.n	80087c8 <__multiply+0x90>
 80087c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d05b      	beq.n	8008880 <__multiply+0x148>
 80087c8:	6106      	str	r6, [r0, #16]
 80087ca:	b005      	add	sp, #20
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	f843 2b04 	str.w	r2, [r3], #4
 80087d4:	e7d8      	b.n	8008788 <__multiply+0x50>
 80087d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80087da:	f1ba 0f00 	cmp.w	sl, #0
 80087de:	d024      	beq.n	800882a <__multiply+0xf2>
 80087e0:	f104 0e14 	add.w	lr, r4, #20
 80087e4:	46a9      	mov	r9, r5
 80087e6:	f04f 0c00 	mov.w	ip, #0
 80087ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087ee:	f8d9 1000 	ldr.w	r1, [r9]
 80087f2:	fa1f fb82 	uxth.w	fp, r2
 80087f6:	b289      	uxth	r1, r1
 80087f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80087fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008800:	f8d9 2000 	ldr.w	r2, [r9]
 8008804:	4461      	add	r1, ip
 8008806:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800880a:	fb0a c20b 	mla	r2, sl, fp, ip
 800880e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008812:	b289      	uxth	r1, r1
 8008814:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008818:	4577      	cmp	r7, lr
 800881a:	f849 1b04 	str.w	r1, [r9], #4
 800881e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008822:	d8e2      	bhi.n	80087ea <__multiply+0xb2>
 8008824:	9a01      	ldr	r2, [sp, #4]
 8008826:	f845 c002 	str.w	ip, [r5, r2]
 800882a:	9a03      	ldr	r2, [sp, #12]
 800882c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008830:	3304      	adds	r3, #4
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	d021      	beq.n	800887c <__multiply+0x144>
 8008838:	6829      	ldr	r1, [r5, #0]
 800883a:	f104 0c14 	add.w	ip, r4, #20
 800883e:	46ae      	mov	lr, r5
 8008840:	f04f 0a00 	mov.w	sl, #0
 8008844:	f8bc b000 	ldrh.w	fp, [ip]
 8008848:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800884c:	fb09 220b 	mla	r2, r9, fp, r2
 8008850:	4452      	add	r2, sl
 8008852:	b289      	uxth	r1, r1
 8008854:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008858:	f84e 1b04 	str.w	r1, [lr], #4
 800885c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008860:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008864:	f8be 1000 	ldrh.w	r1, [lr]
 8008868:	fb09 110a 	mla	r1, r9, sl, r1
 800886c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008870:	4567      	cmp	r7, ip
 8008872:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008876:	d8e5      	bhi.n	8008844 <__multiply+0x10c>
 8008878:	9a01      	ldr	r2, [sp, #4]
 800887a:	50a9      	str	r1, [r5, r2]
 800887c:	3504      	adds	r5, #4
 800887e:	e799      	b.n	80087b4 <__multiply+0x7c>
 8008880:	3e01      	subs	r6, #1
 8008882:	e79b      	b.n	80087bc <__multiply+0x84>
 8008884:	08009a5c 	.word	0x08009a5c
 8008888:	08009a6d 	.word	0x08009a6d

0800888c <__pow5mult>:
 800888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008890:	4615      	mov	r5, r2
 8008892:	f012 0203 	ands.w	r2, r2, #3
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	d007      	beq.n	80088ac <__pow5mult+0x20>
 800889c:	4c25      	ldr	r4, [pc, #148]	; (8008934 <__pow5mult+0xa8>)
 800889e:	3a01      	subs	r2, #1
 80088a0:	2300      	movs	r3, #0
 80088a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088a6:	f7ff fe9d 	bl	80085e4 <__multadd>
 80088aa:	4607      	mov	r7, r0
 80088ac:	10ad      	asrs	r5, r5, #2
 80088ae:	d03d      	beq.n	800892c <__pow5mult+0xa0>
 80088b0:	69f4      	ldr	r4, [r6, #28]
 80088b2:	b97c      	cbnz	r4, 80088d4 <__pow5mult+0x48>
 80088b4:	2010      	movs	r0, #16
 80088b6:	f7ff fd7f 	bl	80083b8 <malloc>
 80088ba:	4602      	mov	r2, r0
 80088bc:	61f0      	str	r0, [r6, #28]
 80088be:	b928      	cbnz	r0, 80088cc <__pow5mult+0x40>
 80088c0:	4b1d      	ldr	r3, [pc, #116]	; (8008938 <__pow5mult+0xac>)
 80088c2:	481e      	ldr	r0, [pc, #120]	; (800893c <__pow5mult+0xb0>)
 80088c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80088c8:	f000 fbd6 	bl	8009078 <__assert_func>
 80088cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088d0:	6004      	str	r4, [r0, #0]
 80088d2:	60c4      	str	r4, [r0, #12]
 80088d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80088d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088dc:	b94c      	cbnz	r4, 80088f2 <__pow5mult+0x66>
 80088de:	f240 2171 	movw	r1, #625	; 0x271
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7ff ff12 	bl	800870c <__i2b>
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ee:	4604      	mov	r4, r0
 80088f0:	6003      	str	r3, [r0, #0]
 80088f2:	f04f 0900 	mov.w	r9, #0
 80088f6:	07eb      	lsls	r3, r5, #31
 80088f8:	d50a      	bpl.n	8008910 <__pow5mult+0x84>
 80088fa:	4639      	mov	r1, r7
 80088fc:	4622      	mov	r2, r4
 80088fe:	4630      	mov	r0, r6
 8008900:	f7ff ff1a 	bl	8008738 <__multiply>
 8008904:	4639      	mov	r1, r7
 8008906:	4680      	mov	r8, r0
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff fe49 	bl	80085a0 <_Bfree>
 800890e:	4647      	mov	r7, r8
 8008910:	106d      	asrs	r5, r5, #1
 8008912:	d00b      	beq.n	800892c <__pow5mult+0xa0>
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	b938      	cbnz	r0, 8008928 <__pow5mult+0x9c>
 8008918:	4622      	mov	r2, r4
 800891a:	4621      	mov	r1, r4
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff ff0b 	bl	8008738 <__multiply>
 8008922:	6020      	str	r0, [r4, #0]
 8008924:	f8c0 9000 	str.w	r9, [r0]
 8008928:	4604      	mov	r4, r0
 800892a:	e7e4      	b.n	80088f6 <__pow5mult+0x6a>
 800892c:	4638      	mov	r0, r7
 800892e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008932:	bf00      	nop
 8008934:	08009bb8 	.word	0x08009bb8
 8008938:	080099ed 	.word	0x080099ed
 800893c:	08009a6d 	.word	0x08009a6d

08008940 <__lshift>:
 8008940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	6849      	ldr	r1, [r1, #4]
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	4607      	mov	r7, r0
 8008952:	4691      	mov	r9, r2
 8008954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008958:	f108 0601 	add.w	r6, r8, #1
 800895c:	42b3      	cmp	r3, r6
 800895e:	db0b      	blt.n	8008978 <__lshift+0x38>
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff fddd 	bl	8008520 <_Balloc>
 8008966:	4605      	mov	r5, r0
 8008968:	b948      	cbnz	r0, 800897e <__lshift+0x3e>
 800896a:	4602      	mov	r2, r0
 800896c:	4b28      	ldr	r3, [pc, #160]	; (8008a10 <__lshift+0xd0>)
 800896e:	4829      	ldr	r0, [pc, #164]	; (8008a14 <__lshift+0xd4>)
 8008970:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008974:	f000 fb80 	bl	8009078 <__assert_func>
 8008978:	3101      	adds	r1, #1
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	e7ee      	b.n	800895c <__lshift+0x1c>
 800897e:	2300      	movs	r3, #0
 8008980:	f100 0114 	add.w	r1, r0, #20
 8008984:	f100 0210 	add.w	r2, r0, #16
 8008988:	4618      	mov	r0, r3
 800898a:	4553      	cmp	r3, sl
 800898c:	db33      	blt.n	80089f6 <__lshift+0xb6>
 800898e:	6920      	ldr	r0, [r4, #16]
 8008990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008994:	f104 0314 	add.w	r3, r4, #20
 8008998:	f019 091f 	ands.w	r9, r9, #31
 800899c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089a4:	d02b      	beq.n	80089fe <__lshift+0xbe>
 80089a6:	f1c9 0e20 	rsb	lr, r9, #32
 80089aa:	468a      	mov	sl, r1
 80089ac:	2200      	movs	r2, #0
 80089ae:	6818      	ldr	r0, [r3, #0]
 80089b0:	fa00 f009 	lsl.w	r0, r0, r9
 80089b4:	4310      	orrs	r0, r2
 80089b6:	f84a 0b04 	str.w	r0, [sl], #4
 80089ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80089be:	459c      	cmp	ip, r3
 80089c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80089c4:	d8f3      	bhi.n	80089ae <__lshift+0x6e>
 80089c6:	ebac 0304 	sub.w	r3, ip, r4
 80089ca:	3b15      	subs	r3, #21
 80089cc:	f023 0303 	bic.w	r3, r3, #3
 80089d0:	3304      	adds	r3, #4
 80089d2:	f104 0015 	add.w	r0, r4, #21
 80089d6:	4584      	cmp	ip, r0
 80089d8:	bf38      	it	cc
 80089da:	2304      	movcc	r3, #4
 80089dc:	50ca      	str	r2, [r1, r3]
 80089de:	b10a      	cbz	r2, 80089e4 <__lshift+0xa4>
 80089e0:	f108 0602 	add.w	r6, r8, #2
 80089e4:	3e01      	subs	r6, #1
 80089e6:	4638      	mov	r0, r7
 80089e8:	612e      	str	r6, [r5, #16]
 80089ea:	4621      	mov	r1, r4
 80089ec:	f7ff fdd8 	bl	80085a0 <_Bfree>
 80089f0:	4628      	mov	r0, r5
 80089f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089fa:	3301      	adds	r3, #1
 80089fc:	e7c5      	b.n	800898a <__lshift+0x4a>
 80089fe:	3904      	subs	r1, #4
 8008a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a04:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a08:	459c      	cmp	ip, r3
 8008a0a:	d8f9      	bhi.n	8008a00 <__lshift+0xc0>
 8008a0c:	e7ea      	b.n	80089e4 <__lshift+0xa4>
 8008a0e:	bf00      	nop
 8008a10:	08009a5c 	.word	0x08009a5c
 8008a14:	08009a6d 	.word	0x08009a6d

08008a18 <__mcmp>:
 8008a18:	b530      	push	{r4, r5, lr}
 8008a1a:	6902      	ldr	r2, [r0, #16]
 8008a1c:	690c      	ldr	r4, [r1, #16]
 8008a1e:	1b12      	subs	r2, r2, r4
 8008a20:	d10e      	bne.n	8008a40 <__mcmp+0x28>
 8008a22:	f100 0314 	add.w	r3, r0, #20
 8008a26:	3114      	adds	r1, #20
 8008a28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a38:	42a5      	cmp	r5, r4
 8008a3a:	d003      	beq.n	8008a44 <__mcmp+0x2c>
 8008a3c:	d305      	bcc.n	8008a4a <__mcmp+0x32>
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4610      	mov	r0, r2
 8008a42:	bd30      	pop	{r4, r5, pc}
 8008a44:	4283      	cmp	r3, r0
 8008a46:	d3f3      	bcc.n	8008a30 <__mcmp+0x18>
 8008a48:	e7fa      	b.n	8008a40 <__mcmp+0x28>
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	e7f7      	b.n	8008a40 <__mcmp+0x28>

08008a50 <__mdiff>:
 8008a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	460c      	mov	r4, r1
 8008a56:	4606      	mov	r6, r0
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4690      	mov	r8, r2
 8008a5e:	f7ff ffdb 	bl	8008a18 <__mcmp>
 8008a62:	1e05      	subs	r5, r0, #0
 8008a64:	d110      	bne.n	8008a88 <__mdiff+0x38>
 8008a66:	4629      	mov	r1, r5
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7ff fd59 	bl	8008520 <_Balloc>
 8008a6e:	b930      	cbnz	r0, 8008a7e <__mdiff+0x2e>
 8008a70:	4b3a      	ldr	r3, [pc, #232]	; (8008b5c <__mdiff+0x10c>)
 8008a72:	4602      	mov	r2, r0
 8008a74:	f240 2137 	movw	r1, #567	; 0x237
 8008a78:	4839      	ldr	r0, [pc, #228]	; (8008b60 <__mdiff+0x110>)
 8008a7a:	f000 fafd 	bl	8009078 <__assert_func>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	bfa4      	itt	ge
 8008a8a:	4643      	movge	r3, r8
 8008a8c:	46a0      	movge	r8, r4
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a94:	bfa6      	itte	ge
 8008a96:	461c      	movge	r4, r3
 8008a98:	2500      	movge	r5, #0
 8008a9a:	2501      	movlt	r5, #1
 8008a9c:	f7ff fd40 	bl	8008520 <_Balloc>
 8008aa0:	b920      	cbnz	r0, 8008aac <__mdiff+0x5c>
 8008aa2:	4b2e      	ldr	r3, [pc, #184]	; (8008b5c <__mdiff+0x10c>)
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	f240 2145 	movw	r1, #581	; 0x245
 8008aaa:	e7e5      	b.n	8008a78 <__mdiff+0x28>
 8008aac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ab0:	6926      	ldr	r6, [r4, #16]
 8008ab2:	60c5      	str	r5, [r0, #12]
 8008ab4:	f104 0914 	add.w	r9, r4, #20
 8008ab8:	f108 0514 	add.w	r5, r8, #20
 8008abc:	f100 0e14 	add.w	lr, r0, #20
 8008ac0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ac4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ac8:	f108 0210 	add.w	r2, r8, #16
 8008acc:	46f2      	mov	sl, lr
 8008ace:	2100      	movs	r1, #0
 8008ad0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ad4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ad8:	fa11 f88b 	uxtah	r8, r1, fp
 8008adc:	b299      	uxth	r1, r3
 8008ade:	0c1b      	lsrs	r3, r3, #16
 8008ae0:	eba8 0801 	sub.w	r8, r8, r1
 8008ae4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ae8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aec:	fa1f f888 	uxth.w	r8, r8
 8008af0:	1419      	asrs	r1, r3, #16
 8008af2:	454e      	cmp	r6, r9
 8008af4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008af8:	f84a 3b04 	str.w	r3, [sl], #4
 8008afc:	d8e8      	bhi.n	8008ad0 <__mdiff+0x80>
 8008afe:	1b33      	subs	r3, r6, r4
 8008b00:	3b15      	subs	r3, #21
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	3304      	adds	r3, #4
 8008b08:	3415      	adds	r4, #21
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	bf38      	it	cc
 8008b0e:	2304      	movcc	r3, #4
 8008b10:	441d      	add	r5, r3
 8008b12:	4473      	add	r3, lr
 8008b14:	469e      	mov	lr, r3
 8008b16:	462e      	mov	r6, r5
 8008b18:	4566      	cmp	r6, ip
 8008b1a:	d30e      	bcc.n	8008b3a <__mdiff+0xea>
 8008b1c:	f10c 0203 	add.w	r2, ip, #3
 8008b20:	1b52      	subs	r2, r2, r5
 8008b22:	f022 0203 	bic.w	r2, r2, #3
 8008b26:	3d03      	subs	r5, #3
 8008b28:	45ac      	cmp	ip, r5
 8008b2a:	bf38      	it	cc
 8008b2c:	2200      	movcc	r2, #0
 8008b2e:	4413      	add	r3, r2
 8008b30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008b34:	b17a      	cbz	r2, 8008b56 <__mdiff+0x106>
 8008b36:	6107      	str	r7, [r0, #16]
 8008b38:	e7a4      	b.n	8008a84 <__mdiff+0x34>
 8008b3a:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b3e:	fa11 f288 	uxtah	r2, r1, r8
 8008b42:	1414      	asrs	r4, r2, #16
 8008b44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b48:	b292      	uxth	r2, r2
 8008b4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b4e:	f84e 2b04 	str.w	r2, [lr], #4
 8008b52:	1421      	asrs	r1, r4, #16
 8008b54:	e7e0      	b.n	8008b18 <__mdiff+0xc8>
 8008b56:	3f01      	subs	r7, #1
 8008b58:	e7ea      	b.n	8008b30 <__mdiff+0xe0>
 8008b5a:	bf00      	nop
 8008b5c:	08009a5c 	.word	0x08009a5c
 8008b60:	08009a6d 	.word	0x08009a6d

08008b64 <__d2b>:
 8008b64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b68:	460f      	mov	r7, r1
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	ec59 8b10 	vmov	r8, r9, d0
 8008b70:	4616      	mov	r6, r2
 8008b72:	f7ff fcd5 	bl	8008520 <_Balloc>
 8008b76:	4604      	mov	r4, r0
 8008b78:	b930      	cbnz	r0, 8008b88 <__d2b+0x24>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <__d2b+0xac>)
 8008b7e:	4825      	ldr	r0, [pc, #148]	; (8008c14 <__d2b+0xb0>)
 8008b80:	f240 310f 	movw	r1, #783	; 0x30f
 8008b84:	f000 fa78 	bl	8009078 <__assert_func>
 8008b88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b90:	bb2d      	cbnz	r5, 8008bde <__d2b+0x7a>
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	f1b8 0300 	subs.w	r3, r8, #0
 8008b98:	d026      	beq.n	8008be8 <__d2b+0x84>
 8008b9a:	4668      	mov	r0, sp
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	f7ff fd87 	bl	80086b0 <__lo0bits>
 8008ba2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ba6:	b1e8      	cbz	r0, 8008be4 <__d2b+0x80>
 8008ba8:	f1c0 0320 	rsb	r3, r0, #32
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	40c2      	lsrs	r2, r0
 8008bb4:	6163      	str	r3, [r4, #20]
 8008bb6:	9201      	str	r2, [sp, #4]
 8008bb8:	9b01      	ldr	r3, [sp, #4]
 8008bba:	61a3      	str	r3, [r4, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bf14      	ite	ne
 8008bc0:	2202      	movne	r2, #2
 8008bc2:	2201      	moveq	r2, #1
 8008bc4:	6122      	str	r2, [r4, #16]
 8008bc6:	b1bd      	cbz	r5, 8008bf8 <__d2b+0x94>
 8008bc8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bcc:	4405      	add	r5, r0
 8008bce:	603d      	str	r5, [r7, #0]
 8008bd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bd4:	6030      	str	r0, [r6, #0]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	b003      	add	sp, #12
 8008bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008be2:	e7d6      	b.n	8008b92 <__d2b+0x2e>
 8008be4:	6161      	str	r1, [r4, #20]
 8008be6:	e7e7      	b.n	8008bb8 <__d2b+0x54>
 8008be8:	a801      	add	r0, sp, #4
 8008bea:	f7ff fd61 	bl	80086b0 <__lo0bits>
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	6163      	str	r3, [r4, #20]
 8008bf2:	3020      	adds	r0, #32
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	e7e5      	b.n	8008bc4 <__d2b+0x60>
 8008bf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c00:	6038      	str	r0, [r7, #0]
 8008c02:	6918      	ldr	r0, [r3, #16]
 8008c04:	f7ff fd34 	bl	8008670 <__hi0bits>
 8008c08:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c0c:	e7e2      	b.n	8008bd4 <__d2b+0x70>
 8008c0e:	bf00      	nop
 8008c10:	08009a5c 	.word	0x08009a5c
 8008c14:	08009a6d 	.word	0x08009a6d

08008c18 <__ssputs_r>:
 8008c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	688e      	ldr	r6, [r1, #8]
 8008c1e:	461f      	mov	r7, r3
 8008c20:	42be      	cmp	r6, r7
 8008c22:	680b      	ldr	r3, [r1, #0]
 8008c24:	4682      	mov	sl, r0
 8008c26:	460c      	mov	r4, r1
 8008c28:	4690      	mov	r8, r2
 8008c2a:	d82c      	bhi.n	8008c86 <__ssputs_r+0x6e>
 8008c2c:	898a      	ldrh	r2, [r1, #12]
 8008c2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c32:	d026      	beq.n	8008c82 <__ssputs_r+0x6a>
 8008c34:	6965      	ldr	r5, [r4, #20]
 8008c36:	6909      	ldr	r1, [r1, #16]
 8008c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c3c:	eba3 0901 	sub.w	r9, r3, r1
 8008c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c44:	1c7b      	adds	r3, r7, #1
 8008c46:	444b      	add	r3, r9
 8008c48:	106d      	asrs	r5, r5, #1
 8008c4a:	429d      	cmp	r5, r3
 8008c4c:	bf38      	it	cc
 8008c4e:	461d      	movcc	r5, r3
 8008c50:	0553      	lsls	r3, r2, #21
 8008c52:	d527      	bpl.n	8008ca4 <__ssputs_r+0x8c>
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7ff fbd7 	bl	8008408 <_malloc_r>
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	b360      	cbz	r0, 8008cb8 <__ssputs_r+0xa0>
 8008c5e:	6921      	ldr	r1, [r4, #16]
 8008c60:	464a      	mov	r2, r9
 8008c62:	f7fe fd58 	bl	8007716 <memcpy>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	81a3      	strh	r3, [r4, #12]
 8008c72:	6126      	str	r6, [r4, #16]
 8008c74:	6165      	str	r5, [r4, #20]
 8008c76:	444e      	add	r6, r9
 8008c78:	eba5 0509 	sub.w	r5, r5, r9
 8008c7c:	6026      	str	r6, [r4, #0]
 8008c7e:	60a5      	str	r5, [r4, #8]
 8008c80:	463e      	mov	r6, r7
 8008c82:	42be      	cmp	r6, r7
 8008c84:	d900      	bls.n	8008c88 <__ssputs_r+0x70>
 8008c86:	463e      	mov	r6, r7
 8008c88:	6820      	ldr	r0, [r4, #0]
 8008c8a:	4632      	mov	r2, r6
 8008c8c:	4641      	mov	r1, r8
 8008c8e:	f000 f9c9 	bl	8009024 <memmove>
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	1b9b      	subs	r3, r3, r6
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	4433      	add	r3, r6
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	f000 fa2d 	bl	8009104 <_realloc_r>
 8008caa:	4606      	mov	r6, r0
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d1e0      	bne.n	8008c72 <__ssputs_r+0x5a>
 8008cb0:	6921      	ldr	r1, [r4, #16]
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	f7ff fb34 	bl	8008320 <_free_r>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	f8ca 3000 	str.w	r3, [sl]
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc4:	81a3      	strh	r3, [r4, #12]
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cca:	e7e9      	b.n	8008ca0 <__ssputs_r+0x88>

08008ccc <_svfiprintf_r>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	4698      	mov	r8, r3
 8008cd2:	898b      	ldrh	r3, [r1, #12]
 8008cd4:	061b      	lsls	r3, r3, #24
 8008cd6:	b09d      	sub	sp, #116	; 0x74
 8008cd8:	4607      	mov	r7, r0
 8008cda:	460d      	mov	r5, r1
 8008cdc:	4614      	mov	r4, r2
 8008cde:	d50e      	bpl.n	8008cfe <_svfiprintf_r+0x32>
 8008ce0:	690b      	ldr	r3, [r1, #16]
 8008ce2:	b963      	cbnz	r3, 8008cfe <_svfiprintf_r+0x32>
 8008ce4:	2140      	movs	r1, #64	; 0x40
 8008ce6:	f7ff fb8f 	bl	8008408 <_malloc_r>
 8008cea:	6028      	str	r0, [r5, #0]
 8008cec:	6128      	str	r0, [r5, #16]
 8008cee:	b920      	cbnz	r0, 8008cfa <_svfiprintf_r+0x2e>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	603b      	str	r3, [r7, #0]
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf8:	e0d0      	b.n	8008e9c <_svfiprintf_r+0x1d0>
 8008cfa:	2340      	movs	r3, #64	; 0x40
 8008cfc:	616b      	str	r3, [r5, #20]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9309      	str	r3, [sp, #36]	; 0x24
 8008d02:	2320      	movs	r3, #32
 8008d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d0c:	2330      	movs	r3, #48	; 0x30
 8008d0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008eb4 <_svfiprintf_r+0x1e8>
 8008d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d16:	f04f 0901 	mov.w	r9, #1
 8008d1a:	4623      	mov	r3, r4
 8008d1c:	469a      	mov	sl, r3
 8008d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d22:	b10a      	cbz	r2, 8008d28 <_svfiprintf_r+0x5c>
 8008d24:	2a25      	cmp	r2, #37	; 0x25
 8008d26:	d1f9      	bne.n	8008d1c <_svfiprintf_r+0x50>
 8008d28:	ebba 0b04 	subs.w	fp, sl, r4
 8008d2c:	d00b      	beq.n	8008d46 <_svfiprintf_r+0x7a>
 8008d2e:	465b      	mov	r3, fp
 8008d30:	4622      	mov	r2, r4
 8008d32:	4629      	mov	r1, r5
 8008d34:	4638      	mov	r0, r7
 8008d36:	f7ff ff6f 	bl	8008c18 <__ssputs_r>
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	f000 80a9 	beq.w	8008e92 <_svfiprintf_r+0x1c6>
 8008d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d42:	445a      	add	r2, fp
 8008d44:	9209      	str	r2, [sp, #36]	; 0x24
 8008d46:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 80a1 	beq.w	8008e92 <_svfiprintf_r+0x1c6>
 8008d50:	2300      	movs	r3, #0
 8008d52:	f04f 32ff 	mov.w	r2, #4294967295
 8008d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d5a:	f10a 0a01 	add.w	sl, sl, #1
 8008d5e:	9304      	str	r3, [sp, #16]
 8008d60:	9307      	str	r3, [sp, #28]
 8008d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d66:	931a      	str	r3, [sp, #104]	; 0x68
 8008d68:	4654      	mov	r4, sl
 8008d6a:	2205      	movs	r2, #5
 8008d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d70:	4850      	ldr	r0, [pc, #320]	; (8008eb4 <_svfiprintf_r+0x1e8>)
 8008d72:	f7f7 fa65 	bl	8000240 <memchr>
 8008d76:	9a04      	ldr	r2, [sp, #16]
 8008d78:	b9d8      	cbnz	r0, 8008db2 <_svfiprintf_r+0xe6>
 8008d7a:	06d0      	lsls	r0, r2, #27
 8008d7c:	bf44      	itt	mi
 8008d7e:	2320      	movmi	r3, #32
 8008d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d84:	0711      	lsls	r1, r2, #28
 8008d86:	bf44      	itt	mi
 8008d88:	232b      	movmi	r3, #43	; 0x2b
 8008d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d92:	2b2a      	cmp	r3, #42	; 0x2a
 8008d94:	d015      	beq.n	8008dc2 <_svfiprintf_r+0xf6>
 8008d96:	9a07      	ldr	r2, [sp, #28]
 8008d98:	4654      	mov	r4, sl
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	f04f 0c0a 	mov.w	ip, #10
 8008da0:	4621      	mov	r1, r4
 8008da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da6:	3b30      	subs	r3, #48	; 0x30
 8008da8:	2b09      	cmp	r3, #9
 8008daa:	d94d      	bls.n	8008e48 <_svfiprintf_r+0x17c>
 8008dac:	b1b0      	cbz	r0, 8008ddc <_svfiprintf_r+0x110>
 8008dae:	9207      	str	r2, [sp, #28]
 8008db0:	e014      	b.n	8008ddc <_svfiprintf_r+0x110>
 8008db2:	eba0 0308 	sub.w	r3, r0, r8
 8008db6:	fa09 f303 	lsl.w	r3, r9, r3
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	46a2      	mov	sl, r4
 8008dc0:	e7d2      	b.n	8008d68 <_svfiprintf_r+0x9c>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	1d19      	adds	r1, r3, #4
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	9103      	str	r1, [sp, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	bfbb      	ittet	lt
 8008dce:	425b      	neglt	r3, r3
 8008dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd4:	9307      	strge	r3, [sp, #28]
 8008dd6:	9307      	strlt	r3, [sp, #28]
 8008dd8:	bfb8      	it	lt
 8008dda:	9204      	strlt	r2, [sp, #16]
 8008ddc:	7823      	ldrb	r3, [r4, #0]
 8008dde:	2b2e      	cmp	r3, #46	; 0x2e
 8008de0:	d10c      	bne.n	8008dfc <_svfiprintf_r+0x130>
 8008de2:	7863      	ldrb	r3, [r4, #1]
 8008de4:	2b2a      	cmp	r3, #42	; 0x2a
 8008de6:	d134      	bne.n	8008e52 <_svfiprintf_r+0x186>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	1d1a      	adds	r2, r3, #4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	9203      	str	r2, [sp, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bfb8      	it	lt
 8008df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008df8:	3402      	adds	r4, #2
 8008dfa:	9305      	str	r3, [sp, #20]
 8008dfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008ec4 <_svfiprintf_r+0x1f8>
 8008e00:	7821      	ldrb	r1, [r4, #0]
 8008e02:	2203      	movs	r2, #3
 8008e04:	4650      	mov	r0, sl
 8008e06:	f7f7 fa1b 	bl	8000240 <memchr>
 8008e0a:	b138      	cbz	r0, 8008e1c <_svfiprintf_r+0x150>
 8008e0c:	9b04      	ldr	r3, [sp, #16]
 8008e0e:	eba0 000a 	sub.w	r0, r0, sl
 8008e12:	2240      	movs	r2, #64	; 0x40
 8008e14:	4082      	lsls	r2, r0
 8008e16:	4313      	orrs	r3, r2
 8008e18:	3401      	adds	r4, #1
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e20:	4825      	ldr	r0, [pc, #148]	; (8008eb8 <_svfiprintf_r+0x1ec>)
 8008e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e26:	2206      	movs	r2, #6
 8008e28:	f7f7 fa0a 	bl	8000240 <memchr>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d038      	beq.n	8008ea2 <_svfiprintf_r+0x1d6>
 8008e30:	4b22      	ldr	r3, [pc, #136]	; (8008ebc <_svfiprintf_r+0x1f0>)
 8008e32:	bb1b      	cbnz	r3, 8008e7c <_svfiprintf_r+0x1b0>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	3307      	adds	r3, #7
 8008e38:	f023 0307 	bic.w	r3, r3, #7
 8008e3c:	3308      	adds	r3, #8
 8008e3e:	9303      	str	r3, [sp, #12]
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	4433      	add	r3, r6
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	e768      	b.n	8008d1a <_svfiprintf_r+0x4e>
 8008e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	2001      	movs	r0, #1
 8008e50:	e7a6      	b.n	8008da0 <_svfiprintf_r+0xd4>
 8008e52:	2300      	movs	r3, #0
 8008e54:	3401      	adds	r4, #1
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	f04f 0c0a 	mov.w	ip, #10
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e64:	3a30      	subs	r2, #48	; 0x30
 8008e66:	2a09      	cmp	r2, #9
 8008e68:	d903      	bls.n	8008e72 <_svfiprintf_r+0x1a6>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0c6      	beq.n	8008dfc <_svfiprintf_r+0x130>
 8008e6e:	9105      	str	r1, [sp, #20]
 8008e70:	e7c4      	b.n	8008dfc <_svfiprintf_r+0x130>
 8008e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e76:	4604      	mov	r4, r0
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e7f0      	b.n	8008e5e <_svfiprintf_r+0x192>
 8008e7c:	ab03      	add	r3, sp, #12
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	462a      	mov	r2, r5
 8008e82:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <_svfiprintf_r+0x1f4>)
 8008e84:	a904      	add	r1, sp, #16
 8008e86:	4638      	mov	r0, r7
 8008e88:	f7fd fef6 	bl	8006c78 <_printf_float>
 8008e8c:	1c42      	adds	r2, r0, #1
 8008e8e:	4606      	mov	r6, r0
 8008e90:	d1d6      	bne.n	8008e40 <_svfiprintf_r+0x174>
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	065b      	lsls	r3, r3, #25
 8008e96:	f53f af2d 	bmi.w	8008cf4 <_svfiprintf_r+0x28>
 8008e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e9c:	b01d      	add	sp, #116	; 0x74
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	ab03      	add	r3, sp, #12
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <_svfiprintf_r+0x1f4>)
 8008eaa:	a904      	add	r1, sp, #16
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7fe f96b 	bl	8007188 <_printf_i>
 8008eb2:	e7eb      	b.n	8008e8c <_svfiprintf_r+0x1c0>
 8008eb4:	08009bc4 	.word	0x08009bc4
 8008eb8:	08009bce 	.word	0x08009bce
 8008ebc:	08006c79 	.word	0x08006c79
 8008ec0:	08008c19 	.word	0x08008c19
 8008ec4:	08009bca 	.word	0x08009bca

08008ec8 <__sflush_r>:
 8008ec8:	898a      	ldrh	r2, [r1, #12]
 8008eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ece:	4605      	mov	r5, r0
 8008ed0:	0710      	lsls	r0, r2, #28
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	d458      	bmi.n	8008f88 <__sflush_r+0xc0>
 8008ed6:	684b      	ldr	r3, [r1, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dc05      	bgt.n	8008ee8 <__sflush_r+0x20>
 8008edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dc02      	bgt.n	8008ee8 <__sflush_r+0x20>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eea:	2e00      	cmp	r6, #0
 8008eec:	d0f9      	beq.n	8008ee2 <__sflush_r+0x1a>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ef4:	682f      	ldr	r7, [r5, #0]
 8008ef6:	6a21      	ldr	r1, [r4, #32]
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	d032      	beq.n	8008f62 <__sflush_r+0x9a>
 8008efc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	075a      	lsls	r2, r3, #29
 8008f02:	d505      	bpl.n	8008f10 <__sflush_r+0x48>
 8008f04:	6863      	ldr	r3, [r4, #4]
 8008f06:	1ac0      	subs	r0, r0, r3
 8008f08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f0a:	b10b      	cbz	r3, 8008f10 <__sflush_r+0x48>
 8008f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f0e:	1ac0      	subs	r0, r0, r3
 8008f10:	2300      	movs	r3, #0
 8008f12:	4602      	mov	r2, r0
 8008f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f16:	6a21      	ldr	r1, [r4, #32]
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b0      	blx	r6
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	d106      	bne.n	8008f30 <__sflush_r+0x68>
 8008f22:	6829      	ldr	r1, [r5, #0]
 8008f24:	291d      	cmp	r1, #29
 8008f26:	d82b      	bhi.n	8008f80 <__sflush_r+0xb8>
 8008f28:	4a29      	ldr	r2, [pc, #164]	; (8008fd0 <__sflush_r+0x108>)
 8008f2a:	410a      	asrs	r2, r1
 8008f2c:	07d6      	lsls	r6, r2, #31
 8008f2e:	d427      	bmi.n	8008f80 <__sflush_r+0xb8>
 8008f30:	2200      	movs	r2, #0
 8008f32:	6062      	str	r2, [r4, #4]
 8008f34:	04d9      	lsls	r1, r3, #19
 8008f36:	6922      	ldr	r2, [r4, #16]
 8008f38:	6022      	str	r2, [r4, #0]
 8008f3a:	d504      	bpl.n	8008f46 <__sflush_r+0x7e>
 8008f3c:	1c42      	adds	r2, r0, #1
 8008f3e:	d101      	bne.n	8008f44 <__sflush_r+0x7c>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	b903      	cbnz	r3, 8008f46 <__sflush_r+0x7e>
 8008f44:	6560      	str	r0, [r4, #84]	; 0x54
 8008f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f48:	602f      	str	r7, [r5, #0]
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	d0c9      	beq.n	8008ee2 <__sflush_r+0x1a>
 8008f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f52:	4299      	cmp	r1, r3
 8008f54:	d002      	beq.n	8008f5c <__sflush_r+0x94>
 8008f56:	4628      	mov	r0, r5
 8008f58:	f7ff f9e2 	bl	8008320 <_free_r>
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	6360      	str	r0, [r4, #52]	; 0x34
 8008f60:	e7c0      	b.n	8008ee4 <__sflush_r+0x1c>
 8008f62:	2301      	movs	r3, #1
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b0      	blx	r6
 8008f68:	1c41      	adds	r1, r0, #1
 8008f6a:	d1c8      	bne.n	8008efe <__sflush_r+0x36>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0c5      	beq.n	8008efe <__sflush_r+0x36>
 8008f72:	2b1d      	cmp	r3, #29
 8008f74:	d001      	beq.n	8008f7a <__sflush_r+0xb2>
 8008f76:	2b16      	cmp	r3, #22
 8008f78:	d101      	bne.n	8008f7e <__sflush_r+0xb6>
 8008f7a:	602f      	str	r7, [r5, #0]
 8008f7c:	e7b1      	b.n	8008ee2 <__sflush_r+0x1a>
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	e7ad      	b.n	8008ee4 <__sflush_r+0x1c>
 8008f88:	690f      	ldr	r7, [r1, #16]
 8008f8a:	2f00      	cmp	r7, #0
 8008f8c:	d0a9      	beq.n	8008ee2 <__sflush_r+0x1a>
 8008f8e:	0793      	lsls	r3, r2, #30
 8008f90:	680e      	ldr	r6, [r1, #0]
 8008f92:	bf08      	it	eq
 8008f94:	694b      	ldreq	r3, [r1, #20]
 8008f96:	600f      	str	r7, [r1, #0]
 8008f98:	bf18      	it	ne
 8008f9a:	2300      	movne	r3, #0
 8008f9c:	eba6 0807 	sub.w	r8, r6, r7
 8008fa0:	608b      	str	r3, [r1, #8]
 8008fa2:	f1b8 0f00 	cmp.w	r8, #0
 8008fa6:	dd9c      	ble.n	8008ee2 <__sflush_r+0x1a>
 8008fa8:	6a21      	ldr	r1, [r4, #32]
 8008faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fac:	4643      	mov	r3, r8
 8008fae:	463a      	mov	r2, r7
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b0      	blx	r6
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	dc06      	bgt.n	8008fc6 <__sflush_r+0xfe>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc4:	e78e      	b.n	8008ee4 <__sflush_r+0x1c>
 8008fc6:	4407      	add	r7, r0
 8008fc8:	eba8 0800 	sub.w	r8, r8, r0
 8008fcc:	e7e9      	b.n	8008fa2 <__sflush_r+0xda>
 8008fce:	bf00      	nop
 8008fd0:	dfbffffe 	.word	0xdfbffffe

08008fd4 <_fflush_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	690b      	ldr	r3, [r1, #16]
 8008fd8:	4605      	mov	r5, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b913      	cbnz	r3, 8008fe4 <_fflush_r+0x10>
 8008fde:	2500      	movs	r5, #0
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	b118      	cbz	r0, 8008fee <_fflush_r+0x1a>
 8008fe6:	6a03      	ldr	r3, [r0, #32]
 8008fe8:	b90b      	cbnz	r3, 8008fee <_fflush_r+0x1a>
 8008fea:	f7fe fa7b 	bl	80074e4 <__sinit>
 8008fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0f3      	beq.n	8008fde <_fflush_r+0xa>
 8008ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ff8:	07d0      	lsls	r0, r2, #31
 8008ffa:	d404      	bmi.n	8009006 <_fflush_r+0x32>
 8008ffc:	0599      	lsls	r1, r3, #22
 8008ffe:	d402      	bmi.n	8009006 <_fflush_r+0x32>
 8009000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009002:	f7fe fb86 	bl	8007712 <__retarget_lock_acquire_recursive>
 8009006:	4628      	mov	r0, r5
 8009008:	4621      	mov	r1, r4
 800900a:	f7ff ff5d 	bl	8008ec8 <__sflush_r>
 800900e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009010:	07da      	lsls	r2, r3, #31
 8009012:	4605      	mov	r5, r0
 8009014:	d4e4      	bmi.n	8008fe0 <_fflush_r+0xc>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	059b      	lsls	r3, r3, #22
 800901a:	d4e1      	bmi.n	8008fe0 <_fflush_r+0xc>
 800901c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800901e:	f7fe fb79 	bl	8007714 <__retarget_lock_release_recursive>
 8009022:	e7dd      	b.n	8008fe0 <_fflush_r+0xc>

08009024 <memmove>:
 8009024:	4288      	cmp	r0, r1
 8009026:	b510      	push	{r4, lr}
 8009028:	eb01 0402 	add.w	r4, r1, r2
 800902c:	d902      	bls.n	8009034 <memmove+0x10>
 800902e:	4284      	cmp	r4, r0
 8009030:	4623      	mov	r3, r4
 8009032:	d807      	bhi.n	8009044 <memmove+0x20>
 8009034:	1e43      	subs	r3, r0, #1
 8009036:	42a1      	cmp	r1, r4
 8009038:	d008      	beq.n	800904c <memmove+0x28>
 800903a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800903e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009042:	e7f8      	b.n	8009036 <memmove+0x12>
 8009044:	4402      	add	r2, r0
 8009046:	4601      	mov	r1, r0
 8009048:	428a      	cmp	r2, r1
 800904a:	d100      	bne.n	800904e <memmove+0x2a>
 800904c:	bd10      	pop	{r4, pc}
 800904e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009056:	e7f7      	b.n	8009048 <memmove+0x24>

08009058 <_sbrk_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4d06      	ldr	r5, [pc, #24]	; (8009074 <_sbrk_r+0x1c>)
 800905c:	2300      	movs	r3, #0
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	602b      	str	r3, [r5, #0]
 8009064:	f7f8 fc0e 	bl	8001884 <_sbrk>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_sbrk_r+0x1a>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_sbrk_r+0x1a>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20004b38 	.word	0x20004b38

08009078 <__assert_func>:
 8009078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800907a:	4614      	mov	r4, r2
 800907c:	461a      	mov	r2, r3
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <__assert_func+0x2c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4605      	mov	r5, r0
 8009084:	68d8      	ldr	r0, [r3, #12]
 8009086:	b14c      	cbz	r4, 800909c <__assert_func+0x24>
 8009088:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <__assert_func+0x30>)
 800908a:	9100      	str	r1, [sp, #0]
 800908c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009090:	4906      	ldr	r1, [pc, #24]	; (80090ac <__assert_func+0x34>)
 8009092:	462b      	mov	r3, r5
 8009094:	f000 f872 	bl	800917c <fiprintf>
 8009098:	f000 f882 	bl	80091a0 <abort>
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <__assert_func+0x38>)
 800909e:	461c      	mov	r4, r3
 80090a0:	e7f3      	b.n	800908a <__assert_func+0x12>
 80090a2:	bf00      	nop
 80090a4:	2000007c 	.word	0x2000007c
 80090a8:	08009bdf 	.word	0x08009bdf
 80090ac:	08009bec 	.word	0x08009bec
 80090b0:	08009c1a 	.word	0x08009c1a

080090b4 <_calloc_r>:
 80090b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090b6:	fba1 2402 	umull	r2, r4, r1, r2
 80090ba:	b94c      	cbnz	r4, 80090d0 <_calloc_r+0x1c>
 80090bc:	4611      	mov	r1, r2
 80090be:	9201      	str	r2, [sp, #4]
 80090c0:	f7ff f9a2 	bl	8008408 <_malloc_r>
 80090c4:	9a01      	ldr	r2, [sp, #4]
 80090c6:	4605      	mov	r5, r0
 80090c8:	b930      	cbnz	r0, 80090d8 <_calloc_r+0x24>
 80090ca:	4628      	mov	r0, r5
 80090cc:	b003      	add	sp, #12
 80090ce:	bd30      	pop	{r4, r5, pc}
 80090d0:	220c      	movs	r2, #12
 80090d2:	6002      	str	r2, [r0, #0]
 80090d4:	2500      	movs	r5, #0
 80090d6:	e7f8      	b.n	80090ca <_calloc_r+0x16>
 80090d8:	4621      	mov	r1, r4
 80090da:	f7fe fa9c 	bl	8007616 <memset>
 80090de:	e7f4      	b.n	80090ca <_calloc_r+0x16>

080090e0 <__ascii_mbtowc>:
 80090e0:	b082      	sub	sp, #8
 80090e2:	b901      	cbnz	r1, 80090e6 <__ascii_mbtowc+0x6>
 80090e4:	a901      	add	r1, sp, #4
 80090e6:	b142      	cbz	r2, 80090fa <__ascii_mbtowc+0x1a>
 80090e8:	b14b      	cbz	r3, 80090fe <__ascii_mbtowc+0x1e>
 80090ea:	7813      	ldrb	r3, [r2, #0]
 80090ec:	600b      	str	r3, [r1, #0]
 80090ee:	7812      	ldrb	r2, [r2, #0]
 80090f0:	1e10      	subs	r0, r2, #0
 80090f2:	bf18      	it	ne
 80090f4:	2001      	movne	r0, #1
 80090f6:	b002      	add	sp, #8
 80090f8:	4770      	bx	lr
 80090fa:	4610      	mov	r0, r2
 80090fc:	e7fb      	b.n	80090f6 <__ascii_mbtowc+0x16>
 80090fe:	f06f 0001 	mvn.w	r0, #1
 8009102:	e7f8      	b.n	80090f6 <__ascii_mbtowc+0x16>

08009104 <_realloc_r>:
 8009104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009108:	4680      	mov	r8, r0
 800910a:	4614      	mov	r4, r2
 800910c:	460e      	mov	r6, r1
 800910e:	b921      	cbnz	r1, 800911a <_realloc_r+0x16>
 8009110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009114:	4611      	mov	r1, r2
 8009116:	f7ff b977 	b.w	8008408 <_malloc_r>
 800911a:	b92a      	cbnz	r2, 8009128 <_realloc_r+0x24>
 800911c:	f7ff f900 	bl	8008320 <_free_r>
 8009120:	4625      	mov	r5, r4
 8009122:	4628      	mov	r0, r5
 8009124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009128:	f000 f841 	bl	80091ae <_malloc_usable_size_r>
 800912c:	4284      	cmp	r4, r0
 800912e:	4607      	mov	r7, r0
 8009130:	d802      	bhi.n	8009138 <_realloc_r+0x34>
 8009132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009136:	d812      	bhi.n	800915e <_realloc_r+0x5a>
 8009138:	4621      	mov	r1, r4
 800913a:	4640      	mov	r0, r8
 800913c:	f7ff f964 	bl	8008408 <_malloc_r>
 8009140:	4605      	mov	r5, r0
 8009142:	2800      	cmp	r0, #0
 8009144:	d0ed      	beq.n	8009122 <_realloc_r+0x1e>
 8009146:	42bc      	cmp	r4, r7
 8009148:	4622      	mov	r2, r4
 800914a:	4631      	mov	r1, r6
 800914c:	bf28      	it	cs
 800914e:	463a      	movcs	r2, r7
 8009150:	f7fe fae1 	bl	8007716 <memcpy>
 8009154:	4631      	mov	r1, r6
 8009156:	4640      	mov	r0, r8
 8009158:	f7ff f8e2 	bl	8008320 <_free_r>
 800915c:	e7e1      	b.n	8009122 <_realloc_r+0x1e>
 800915e:	4635      	mov	r5, r6
 8009160:	e7df      	b.n	8009122 <_realloc_r+0x1e>

08009162 <__ascii_wctomb>:
 8009162:	b149      	cbz	r1, 8009178 <__ascii_wctomb+0x16>
 8009164:	2aff      	cmp	r2, #255	; 0xff
 8009166:	bf85      	ittet	hi
 8009168:	238a      	movhi	r3, #138	; 0x8a
 800916a:	6003      	strhi	r3, [r0, #0]
 800916c:	700a      	strbls	r2, [r1, #0]
 800916e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009172:	bf98      	it	ls
 8009174:	2001      	movls	r0, #1
 8009176:	4770      	bx	lr
 8009178:	4608      	mov	r0, r1
 800917a:	4770      	bx	lr

0800917c <fiprintf>:
 800917c:	b40e      	push	{r1, r2, r3}
 800917e:	b503      	push	{r0, r1, lr}
 8009180:	4601      	mov	r1, r0
 8009182:	ab03      	add	r3, sp, #12
 8009184:	4805      	ldr	r0, [pc, #20]	; (800919c <fiprintf+0x20>)
 8009186:	f853 2b04 	ldr.w	r2, [r3], #4
 800918a:	6800      	ldr	r0, [r0, #0]
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	f000 f83f 	bl	8009210 <_vfiprintf_r>
 8009192:	b002      	add	sp, #8
 8009194:	f85d eb04 	ldr.w	lr, [sp], #4
 8009198:	b003      	add	sp, #12
 800919a:	4770      	bx	lr
 800919c:	2000007c 	.word	0x2000007c

080091a0 <abort>:
 80091a0:	b508      	push	{r3, lr}
 80091a2:	2006      	movs	r0, #6
 80091a4:	f000 fa0c 	bl	80095c0 <raise>
 80091a8:	2001      	movs	r0, #1
 80091aa:	f7f8 faf3 	bl	8001794 <_exit>

080091ae <_malloc_usable_size_r>:
 80091ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b2:	1f18      	subs	r0, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bfbc      	itt	lt
 80091b8:	580b      	ldrlt	r3, [r1, r0]
 80091ba:	18c0      	addlt	r0, r0, r3
 80091bc:	4770      	bx	lr

080091be <__sfputc_r>:
 80091be:	6893      	ldr	r3, [r2, #8]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	b410      	push	{r4}
 80091c6:	6093      	str	r3, [r2, #8]
 80091c8:	da08      	bge.n	80091dc <__sfputc_r+0x1e>
 80091ca:	6994      	ldr	r4, [r2, #24]
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	db01      	blt.n	80091d4 <__sfputc_r+0x16>
 80091d0:	290a      	cmp	r1, #10
 80091d2:	d103      	bne.n	80091dc <__sfputc_r+0x1e>
 80091d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091d8:	f000 b934 	b.w	8009444 <__swbuf_r>
 80091dc:	6813      	ldr	r3, [r2, #0]
 80091de:	1c58      	adds	r0, r3, #1
 80091e0:	6010      	str	r0, [r2, #0]
 80091e2:	7019      	strb	r1, [r3, #0]
 80091e4:	4608      	mov	r0, r1
 80091e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <__sfputs_r>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	4606      	mov	r6, r0
 80091f0:	460f      	mov	r7, r1
 80091f2:	4614      	mov	r4, r2
 80091f4:	18d5      	adds	r5, r2, r3
 80091f6:	42ac      	cmp	r4, r5
 80091f8:	d101      	bne.n	80091fe <__sfputs_r+0x12>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e007      	b.n	800920e <__sfputs_r+0x22>
 80091fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009202:	463a      	mov	r2, r7
 8009204:	4630      	mov	r0, r6
 8009206:	f7ff ffda 	bl	80091be <__sfputc_r>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	d1f3      	bne.n	80091f6 <__sfputs_r+0xa>
 800920e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009210 <_vfiprintf_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	460d      	mov	r5, r1
 8009216:	b09d      	sub	sp, #116	; 0x74
 8009218:	4614      	mov	r4, r2
 800921a:	4698      	mov	r8, r3
 800921c:	4606      	mov	r6, r0
 800921e:	b118      	cbz	r0, 8009228 <_vfiprintf_r+0x18>
 8009220:	6a03      	ldr	r3, [r0, #32]
 8009222:	b90b      	cbnz	r3, 8009228 <_vfiprintf_r+0x18>
 8009224:	f7fe f95e 	bl	80074e4 <__sinit>
 8009228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800922a:	07d9      	lsls	r1, r3, #31
 800922c:	d405      	bmi.n	800923a <_vfiprintf_r+0x2a>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	059a      	lsls	r2, r3, #22
 8009232:	d402      	bmi.n	800923a <_vfiprintf_r+0x2a>
 8009234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009236:	f7fe fa6c 	bl	8007712 <__retarget_lock_acquire_recursive>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	071b      	lsls	r3, r3, #28
 800923e:	d501      	bpl.n	8009244 <_vfiprintf_r+0x34>
 8009240:	692b      	ldr	r3, [r5, #16]
 8009242:	b99b      	cbnz	r3, 800926c <_vfiprintf_r+0x5c>
 8009244:	4629      	mov	r1, r5
 8009246:	4630      	mov	r0, r6
 8009248:	f000 f93a 	bl	80094c0 <__swsetup_r>
 800924c:	b170      	cbz	r0, 800926c <_vfiprintf_r+0x5c>
 800924e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009250:	07dc      	lsls	r4, r3, #31
 8009252:	d504      	bpl.n	800925e <_vfiprintf_r+0x4e>
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	b01d      	add	sp, #116	; 0x74
 800925a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925e:	89ab      	ldrh	r3, [r5, #12]
 8009260:	0598      	lsls	r0, r3, #22
 8009262:	d4f7      	bmi.n	8009254 <_vfiprintf_r+0x44>
 8009264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009266:	f7fe fa55 	bl	8007714 <__retarget_lock_release_recursive>
 800926a:	e7f3      	b.n	8009254 <_vfiprintf_r+0x44>
 800926c:	2300      	movs	r3, #0
 800926e:	9309      	str	r3, [sp, #36]	; 0x24
 8009270:	2320      	movs	r3, #32
 8009272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009276:	f8cd 800c 	str.w	r8, [sp, #12]
 800927a:	2330      	movs	r3, #48	; 0x30
 800927c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009430 <_vfiprintf_r+0x220>
 8009280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009284:	f04f 0901 	mov.w	r9, #1
 8009288:	4623      	mov	r3, r4
 800928a:	469a      	mov	sl, r3
 800928c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009290:	b10a      	cbz	r2, 8009296 <_vfiprintf_r+0x86>
 8009292:	2a25      	cmp	r2, #37	; 0x25
 8009294:	d1f9      	bne.n	800928a <_vfiprintf_r+0x7a>
 8009296:	ebba 0b04 	subs.w	fp, sl, r4
 800929a:	d00b      	beq.n	80092b4 <_vfiprintf_r+0xa4>
 800929c:	465b      	mov	r3, fp
 800929e:	4622      	mov	r2, r4
 80092a0:	4629      	mov	r1, r5
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff ffa2 	bl	80091ec <__sfputs_r>
 80092a8:	3001      	adds	r0, #1
 80092aa:	f000 80a9 	beq.w	8009400 <_vfiprintf_r+0x1f0>
 80092ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b0:	445a      	add	r2, fp
 80092b2:	9209      	str	r2, [sp, #36]	; 0x24
 80092b4:	f89a 3000 	ldrb.w	r3, [sl]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 80a1 	beq.w	8009400 <_vfiprintf_r+0x1f0>
 80092be:	2300      	movs	r3, #0
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295
 80092c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c8:	f10a 0a01 	add.w	sl, sl, #1
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	9307      	str	r3, [sp, #28]
 80092d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092d4:	931a      	str	r3, [sp, #104]	; 0x68
 80092d6:	4654      	mov	r4, sl
 80092d8:	2205      	movs	r2, #5
 80092da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092de:	4854      	ldr	r0, [pc, #336]	; (8009430 <_vfiprintf_r+0x220>)
 80092e0:	f7f6 ffae 	bl	8000240 <memchr>
 80092e4:	9a04      	ldr	r2, [sp, #16]
 80092e6:	b9d8      	cbnz	r0, 8009320 <_vfiprintf_r+0x110>
 80092e8:	06d1      	lsls	r1, r2, #27
 80092ea:	bf44      	itt	mi
 80092ec:	2320      	movmi	r3, #32
 80092ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f2:	0713      	lsls	r3, r2, #28
 80092f4:	bf44      	itt	mi
 80092f6:	232b      	movmi	r3, #43	; 0x2b
 80092f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009300:	2b2a      	cmp	r3, #42	; 0x2a
 8009302:	d015      	beq.n	8009330 <_vfiprintf_r+0x120>
 8009304:	9a07      	ldr	r2, [sp, #28]
 8009306:	4654      	mov	r4, sl
 8009308:	2000      	movs	r0, #0
 800930a:	f04f 0c0a 	mov.w	ip, #10
 800930e:	4621      	mov	r1, r4
 8009310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009314:	3b30      	subs	r3, #48	; 0x30
 8009316:	2b09      	cmp	r3, #9
 8009318:	d94d      	bls.n	80093b6 <_vfiprintf_r+0x1a6>
 800931a:	b1b0      	cbz	r0, 800934a <_vfiprintf_r+0x13a>
 800931c:	9207      	str	r2, [sp, #28]
 800931e:	e014      	b.n	800934a <_vfiprintf_r+0x13a>
 8009320:	eba0 0308 	sub.w	r3, r0, r8
 8009324:	fa09 f303 	lsl.w	r3, r9, r3
 8009328:	4313      	orrs	r3, r2
 800932a:	9304      	str	r3, [sp, #16]
 800932c:	46a2      	mov	sl, r4
 800932e:	e7d2      	b.n	80092d6 <_vfiprintf_r+0xc6>
 8009330:	9b03      	ldr	r3, [sp, #12]
 8009332:	1d19      	adds	r1, r3, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	9103      	str	r1, [sp, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	bfbb      	ittet	lt
 800933c:	425b      	neglt	r3, r3
 800933e:	f042 0202 	orrlt.w	r2, r2, #2
 8009342:	9307      	strge	r3, [sp, #28]
 8009344:	9307      	strlt	r3, [sp, #28]
 8009346:	bfb8      	it	lt
 8009348:	9204      	strlt	r2, [sp, #16]
 800934a:	7823      	ldrb	r3, [r4, #0]
 800934c:	2b2e      	cmp	r3, #46	; 0x2e
 800934e:	d10c      	bne.n	800936a <_vfiprintf_r+0x15a>
 8009350:	7863      	ldrb	r3, [r4, #1]
 8009352:	2b2a      	cmp	r3, #42	; 0x2a
 8009354:	d134      	bne.n	80093c0 <_vfiprintf_r+0x1b0>
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	1d1a      	adds	r2, r3, #4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	9203      	str	r2, [sp, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	bfb8      	it	lt
 8009362:	f04f 33ff 	movlt.w	r3, #4294967295
 8009366:	3402      	adds	r4, #2
 8009368:	9305      	str	r3, [sp, #20]
 800936a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009440 <_vfiprintf_r+0x230>
 800936e:	7821      	ldrb	r1, [r4, #0]
 8009370:	2203      	movs	r2, #3
 8009372:	4650      	mov	r0, sl
 8009374:	f7f6 ff64 	bl	8000240 <memchr>
 8009378:	b138      	cbz	r0, 800938a <_vfiprintf_r+0x17a>
 800937a:	9b04      	ldr	r3, [sp, #16]
 800937c:	eba0 000a 	sub.w	r0, r0, sl
 8009380:	2240      	movs	r2, #64	; 0x40
 8009382:	4082      	lsls	r2, r0
 8009384:	4313      	orrs	r3, r2
 8009386:	3401      	adds	r4, #1
 8009388:	9304      	str	r3, [sp, #16]
 800938a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938e:	4829      	ldr	r0, [pc, #164]	; (8009434 <_vfiprintf_r+0x224>)
 8009390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009394:	2206      	movs	r2, #6
 8009396:	f7f6 ff53 	bl	8000240 <memchr>
 800939a:	2800      	cmp	r0, #0
 800939c:	d03f      	beq.n	800941e <_vfiprintf_r+0x20e>
 800939e:	4b26      	ldr	r3, [pc, #152]	; (8009438 <_vfiprintf_r+0x228>)
 80093a0:	bb1b      	cbnz	r3, 80093ea <_vfiprintf_r+0x1da>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	3307      	adds	r3, #7
 80093a6:	f023 0307 	bic.w	r3, r3, #7
 80093aa:	3308      	adds	r3, #8
 80093ac:	9303      	str	r3, [sp, #12]
 80093ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b0:	443b      	add	r3, r7
 80093b2:	9309      	str	r3, [sp, #36]	; 0x24
 80093b4:	e768      	b.n	8009288 <_vfiprintf_r+0x78>
 80093b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ba:	460c      	mov	r4, r1
 80093bc:	2001      	movs	r0, #1
 80093be:	e7a6      	b.n	800930e <_vfiprintf_r+0xfe>
 80093c0:	2300      	movs	r3, #0
 80093c2:	3401      	adds	r4, #1
 80093c4:	9305      	str	r3, [sp, #20]
 80093c6:	4619      	mov	r1, r3
 80093c8:	f04f 0c0a 	mov.w	ip, #10
 80093cc:	4620      	mov	r0, r4
 80093ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d2:	3a30      	subs	r2, #48	; 0x30
 80093d4:	2a09      	cmp	r2, #9
 80093d6:	d903      	bls.n	80093e0 <_vfiprintf_r+0x1d0>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0c6      	beq.n	800936a <_vfiprintf_r+0x15a>
 80093dc:	9105      	str	r1, [sp, #20]
 80093de:	e7c4      	b.n	800936a <_vfiprintf_r+0x15a>
 80093e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e4:	4604      	mov	r4, r0
 80093e6:	2301      	movs	r3, #1
 80093e8:	e7f0      	b.n	80093cc <_vfiprintf_r+0x1bc>
 80093ea:	ab03      	add	r3, sp, #12
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	462a      	mov	r2, r5
 80093f0:	4b12      	ldr	r3, [pc, #72]	; (800943c <_vfiprintf_r+0x22c>)
 80093f2:	a904      	add	r1, sp, #16
 80093f4:	4630      	mov	r0, r6
 80093f6:	f7fd fc3f 	bl	8006c78 <_printf_float>
 80093fa:	4607      	mov	r7, r0
 80093fc:	1c78      	adds	r0, r7, #1
 80093fe:	d1d6      	bne.n	80093ae <_vfiprintf_r+0x19e>
 8009400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009402:	07d9      	lsls	r1, r3, #31
 8009404:	d405      	bmi.n	8009412 <_vfiprintf_r+0x202>
 8009406:	89ab      	ldrh	r3, [r5, #12]
 8009408:	059a      	lsls	r2, r3, #22
 800940a:	d402      	bmi.n	8009412 <_vfiprintf_r+0x202>
 800940c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800940e:	f7fe f981 	bl	8007714 <__retarget_lock_release_recursive>
 8009412:	89ab      	ldrh	r3, [r5, #12]
 8009414:	065b      	lsls	r3, r3, #25
 8009416:	f53f af1d 	bmi.w	8009254 <_vfiprintf_r+0x44>
 800941a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800941c:	e71c      	b.n	8009258 <_vfiprintf_r+0x48>
 800941e:	ab03      	add	r3, sp, #12
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	462a      	mov	r2, r5
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <_vfiprintf_r+0x22c>)
 8009426:	a904      	add	r1, sp, #16
 8009428:	4630      	mov	r0, r6
 800942a:	f7fd fead 	bl	8007188 <_printf_i>
 800942e:	e7e4      	b.n	80093fa <_vfiprintf_r+0x1ea>
 8009430:	08009bc4 	.word	0x08009bc4
 8009434:	08009bce 	.word	0x08009bce
 8009438:	08006c79 	.word	0x08006c79
 800943c:	080091ed 	.word	0x080091ed
 8009440:	08009bca 	.word	0x08009bca

08009444 <__swbuf_r>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	460e      	mov	r6, r1
 8009448:	4614      	mov	r4, r2
 800944a:	4605      	mov	r5, r0
 800944c:	b118      	cbz	r0, 8009456 <__swbuf_r+0x12>
 800944e:	6a03      	ldr	r3, [r0, #32]
 8009450:	b90b      	cbnz	r3, 8009456 <__swbuf_r+0x12>
 8009452:	f7fe f847 	bl	80074e4 <__sinit>
 8009456:	69a3      	ldr	r3, [r4, #24]
 8009458:	60a3      	str	r3, [r4, #8]
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	071a      	lsls	r2, r3, #28
 800945e:	d525      	bpl.n	80094ac <__swbuf_r+0x68>
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	b31b      	cbz	r3, 80094ac <__swbuf_r+0x68>
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	6922      	ldr	r2, [r4, #16]
 8009468:	1a98      	subs	r0, r3, r2
 800946a:	6963      	ldr	r3, [r4, #20]
 800946c:	b2f6      	uxtb	r6, r6
 800946e:	4283      	cmp	r3, r0
 8009470:	4637      	mov	r7, r6
 8009472:	dc04      	bgt.n	800947e <__swbuf_r+0x3a>
 8009474:	4621      	mov	r1, r4
 8009476:	4628      	mov	r0, r5
 8009478:	f7ff fdac 	bl	8008fd4 <_fflush_r>
 800947c:	b9e0      	cbnz	r0, 80094b8 <__swbuf_r+0x74>
 800947e:	68a3      	ldr	r3, [r4, #8]
 8009480:	3b01      	subs	r3, #1
 8009482:	60a3      	str	r3, [r4, #8]
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	6022      	str	r2, [r4, #0]
 800948a:	701e      	strb	r6, [r3, #0]
 800948c:	6962      	ldr	r2, [r4, #20]
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	429a      	cmp	r2, r3
 8009492:	d004      	beq.n	800949e <__swbuf_r+0x5a>
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	07db      	lsls	r3, r3, #31
 8009498:	d506      	bpl.n	80094a8 <__swbuf_r+0x64>
 800949a:	2e0a      	cmp	r6, #10
 800949c:	d104      	bne.n	80094a8 <__swbuf_r+0x64>
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f7ff fd97 	bl	8008fd4 <_fflush_r>
 80094a6:	b938      	cbnz	r0, 80094b8 <__swbuf_r+0x74>
 80094a8:	4638      	mov	r0, r7
 80094aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ac:	4621      	mov	r1, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 f806 	bl	80094c0 <__swsetup_r>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d0d5      	beq.n	8009464 <__swbuf_r+0x20>
 80094b8:	f04f 37ff 	mov.w	r7, #4294967295
 80094bc:	e7f4      	b.n	80094a8 <__swbuf_r+0x64>
	...

080094c0 <__swsetup_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4b2a      	ldr	r3, [pc, #168]	; (800956c <__swsetup_r+0xac>)
 80094c4:	4605      	mov	r5, r0
 80094c6:	6818      	ldr	r0, [r3, #0]
 80094c8:	460c      	mov	r4, r1
 80094ca:	b118      	cbz	r0, 80094d4 <__swsetup_r+0x14>
 80094cc:	6a03      	ldr	r3, [r0, #32]
 80094ce:	b90b      	cbnz	r3, 80094d4 <__swsetup_r+0x14>
 80094d0:	f7fe f808 	bl	80074e4 <__sinit>
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094da:	0718      	lsls	r0, r3, #28
 80094dc:	d422      	bmi.n	8009524 <__swsetup_r+0x64>
 80094de:	06d9      	lsls	r1, r3, #27
 80094e0:	d407      	bmi.n	80094f2 <__swsetup_r+0x32>
 80094e2:	2309      	movs	r3, #9
 80094e4:	602b      	str	r3, [r5, #0]
 80094e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094ea:	81a3      	strh	r3, [r4, #12]
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
 80094f0:	e034      	b.n	800955c <__swsetup_r+0x9c>
 80094f2:	0758      	lsls	r0, r3, #29
 80094f4:	d512      	bpl.n	800951c <__swsetup_r+0x5c>
 80094f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094f8:	b141      	cbz	r1, 800950c <__swsetup_r+0x4c>
 80094fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094fe:	4299      	cmp	r1, r3
 8009500:	d002      	beq.n	8009508 <__swsetup_r+0x48>
 8009502:	4628      	mov	r0, r5
 8009504:	f7fe ff0c 	bl	8008320 <_free_r>
 8009508:	2300      	movs	r3, #0
 800950a:	6363      	str	r3, [r4, #52]	; 0x34
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009512:	81a3      	strh	r3, [r4, #12]
 8009514:	2300      	movs	r3, #0
 8009516:	6063      	str	r3, [r4, #4]
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f043 0308 	orr.w	r3, r3, #8
 8009522:	81a3      	strh	r3, [r4, #12]
 8009524:	6923      	ldr	r3, [r4, #16]
 8009526:	b94b      	cbnz	r3, 800953c <__swsetup_r+0x7c>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800952e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009532:	d003      	beq.n	800953c <__swsetup_r+0x7c>
 8009534:	4621      	mov	r1, r4
 8009536:	4628      	mov	r0, r5
 8009538:	f000 f884 	bl	8009644 <__smakebuf_r>
 800953c:	89a0      	ldrh	r0, [r4, #12]
 800953e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009542:	f010 0301 	ands.w	r3, r0, #1
 8009546:	d00a      	beq.n	800955e <__swsetup_r+0x9e>
 8009548:	2300      	movs	r3, #0
 800954a:	60a3      	str	r3, [r4, #8]
 800954c:	6963      	ldr	r3, [r4, #20]
 800954e:	425b      	negs	r3, r3
 8009550:	61a3      	str	r3, [r4, #24]
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	b943      	cbnz	r3, 8009568 <__swsetup_r+0xa8>
 8009556:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800955a:	d1c4      	bne.n	80094e6 <__swsetup_r+0x26>
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	0781      	lsls	r1, r0, #30
 8009560:	bf58      	it	pl
 8009562:	6963      	ldrpl	r3, [r4, #20]
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	e7f4      	b.n	8009552 <__swsetup_r+0x92>
 8009568:	2000      	movs	r0, #0
 800956a:	e7f7      	b.n	800955c <__swsetup_r+0x9c>
 800956c:	2000007c 	.word	0x2000007c

08009570 <_raise_r>:
 8009570:	291f      	cmp	r1, #31
 8009572:	b538      	push	{r3, r4, r5, lr}
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	d904      	bls.n	8009584 <_raise_r+0x14>
 800957a:	2316      	movs	r3, #22
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	f04f 30ff 	mov.w	r0, #4294967295
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009586:	b112      	cbz	r2, 800958e <_raise_r+0x1e>
 8009588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800958c:	b94b      	cbnz	r3, 80095a2 <_raise_r+0x32>
 800958e:	4620      	mov	r0, r4
 8009590:	f000 f830 	bl	80095f4 <_getpid_r>
 8009594:	462a      	mov	r2, r5
 8009596:	4601      	mov	r1, r0
 8009598:	4620      	mov	r0, r4
 800959a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800959e:	f000 b817 	b.w	80095d0 <_kill_r>
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d00a      	beq.n	80095bc <_raise_r+0x4c>
 80095a6:	1c59      	adds	r1, r3, #1
 80095a8:	d103      	bne.n	80095b2 <_raise_r+0x42>
 80095aa:	2316      	movs	r3, #22
 80095ac:	6003      	str	r3, [r0, #0]
 80095ae:	2001      	movs	r0, #1
 80095b0:	e7e7      	b.n	8009582 <_raise_r+0x12>
 80095b2:	2400      	movs	r4, #0
 80095b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095b8:	4628      	mov	r0, r5
 80095ba:	4798      	blx	r3
 80095bc:	2000      	movs	r0, #0
 80095be:	e7e0      	b.n	8009582 <_raise_r+0x12>

080095c0 <raise>:
 80095c0:	4b02      	ldr	r3, [pc, #8]	; (80095cc <raise+0xc>)
 80095c2:	4601      	mov	r1, r0
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	f7ff bfd3 	b.w	8009570 <_raise_r>
 80095ca:	bf00      	nop
 80095cc:	2000007c 	.word	0x2000007c

080095d0 <_kill_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	; (80095f0 <_kill_r+0x20>)
 80095d4:	2300      	movs	r3, #0
 80095d6:	4604      	mov	r4, r0
 80095d8:	4608      	mov	r0, r1
 80095da:	4611      	mov	r1, r2
 80095dc:	602b      	str	r3, [r5, #0]
 80095de:	f7f8 f8c9 	bl	8001774 <_kill>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	d102      	bne.n	80095ec <_kill_r+0x1c>
 80095e6:	682b      	ldr	r3, [r5, #0]
 80095e8:	b103      	cbz	r3, 80095ec <_kill_r+0x1c>
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	bd38      	pop	{r3, r4, r5, pc}
 80095ee:	bf00      	nop
 80095f0:	20004b38 	.word	0x20004b38

080095f4 <_getpid_r>:
 80095f4:	f7f8 b8b6 	b.w	8001764 <_getpid>

080095f8 <__swhatbuf_r>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009600:	2900      	cmp	r1, #0
 8009602:	b096      	sub	sp, #88	; 0x58
 8009604:	4615      	mov	r5, r2
 8009606:	461e      	mov	r6, r3
 8009608:	da0d      	bge.n	8009626 <__swhatbuf_r+0x2e>
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009610:	f04f 0100 	mov.w	r1, #0
 8009614:	bf0c      	ite	eq
 8009616:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800961a:	2340      	movne	r3, #64	; 0x40
 800961c:	2000      	movs	r0, #0
 800961e:	6031      	str	r1, [r6, #0]
 8009620:	602b      	str	r3, [r5, #0]
 8009622:	b016      	add	sp, #88	; 0x58
 8009624:	bd70      	pop	{r4, r5, r6, pc}
 8009626:	466a      	mov	r2, sp
 8009628:	f000 f848 	bl	80096bc <_fstat_r>
 800962c:	2800      	cmp	r0, #0
 800962e:	dbec      	blt.n	800960a <__swhatbuf_r+0x12>
 8009630:	9901      	ldr	r1, [sp, #4]
 8009632:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009636:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800963a:	4259      	negs	r1, r3
 800963c:	4159      	adcs	r1, r3
 800963e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009642:	e7eb      	b.n	800961c <__swhatbuf_r+0x24>

08009644 <__smakebuf_r>:
 8009644:	898b      	ldrh	r3, [r1, #12]
 8009646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009648:	079d      	lsls	r5, r3, #30
 800964a:	4606      	mov	r6, r0
 800964c:	460c      	mov	r4, r1
 800964e:	d507      	bpl.n	8009660 <__smakebuf_r+0x1c>
 8009650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	6123      	str	r3, [r4, #16]
 8009658:	2301      	movs	r3, #1
 800965a:	6163      	str	r3, [r4, #20]
 800965c:	b002      	add	sp, #8
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	ab01      	add	r3, sp, #4
 8009662:	466a      	mov	r2, sp
 8009664:	f7ff ffc8 	bl	80095f8 <__swhatbuf_r>
 8009668:	9900      	ldr	r1, [sp, #0]
 800966a:	4605      	mov	r5, r0
 800966c:	4630      	mov	r0, r6
 800966e:	f7fe fecb 	bl	8008408 <_malloc_r>
 8009672:	b948      	cbnz	r0, 8009688 <__smakebuf_r+0x44>
 8009674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009678:	059a      	lsls	r2, r3, #22
 800967a:	d4ef      	bmi.n	800965c <__smakebuf_r+0x18>
 800967c:	f023 0303 	bic.w	r3, r3, #3
 8009680:	f043 0302 	orr.w	r3, r3, #2
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	e7e3      	b.n	8009650 <__smakebuf_r+0xc>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	6020      	str	r0, [r4, #0]
 800968c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	6163      	str	r3, [r4, #20]
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	6120      	str	r0, [r4, #16]
 800969a:	b15b      	cbz	r3, 80096b4 <__smakebuf_r+0x70>
 800969c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 f81d 	bl	80096e0 <_isatty_r>
 80096a6:	b128      	cbz	r0, 80096b4 <__smakebuf_r+0x70>
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	f023 0303 	bic.w	r3, r3, #3
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	431d      	orrs	r5, r3
 80096b8:	81a5      	strh	r5, [r4, #12]
 80096ba:	e7cf      	b.n	800965c <__smakebuf_r+0x18>

080096bc <_fstat_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d07      	ldr	r5, [pc, #28]	; (80096dc <_fstat_r+0x20>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	4611      	mov	r1, r2
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	f7f8 f8b2 	bl	8001832 <_fstat>
 80096ce:	1c43      	adds	r3, r0, #1
 80096d0:	d102      	bne.n	80096d8 <_fstat_r+0x1c>
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	b103      	cbz	r3, 80096d8 <_fstat_r+0x1c>
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	bf00      	nop
 80096dc:	20004b38 	.word	0x20004b38

080096e0 <_isatty_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4d06      	ldr	r5, [pc, #24]	; (80096fc <_isatty_r+0x1c>)
 80096e4:	2300      	movs	r3, #0
 80096e6:	4604      	mov	r4, r0
 80096e8:	4608      	mov	r0, r1
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	f7f8 f8b1 	bl	8001852 <_isatty>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_isatty_r+0x1a>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_isatty_r+0x1a>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	20004b38 	.word	0x20004b38

08009700 <_init>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr

0800970c <_fini>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	bf00      	nop
 8009710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009712:	bc08      	pop	{r3}
 8009714:	469e      	mov	lr, r3
 8009716:	4770      	bx	lr
