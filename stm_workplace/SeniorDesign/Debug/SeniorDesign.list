
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cc0  0800cde0  0800cde0  0001cde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaa0  0800eaa0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eaa0  0800eaa0  0001eaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eaa8  0800eaa8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eaa8  0800eaa8  0001eaa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eaac  0800eaac  0001eaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800eab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005308  200001e4  0800ec94  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054ec  0800ec94  000254ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024f6c  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005048  00000000  00000000  000451c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d10  00000000  00000000  0004a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001671  00000000  00000000  0004bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf94  00000000  00000000  0004d591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024bb0  00000000  00000000  0007a525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111ce5  00000000  00000000  0009f0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089a4  00000000  00000000  001b0dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b9760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cdc8 	.word	0x0800cdc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800cdc8 	.word	0x0800cdc8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_9;
 8000602:	2309      	movs	r3, #9
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f002 fac7 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f001 fbde 	bl	8001de0 <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <readFlow>:
float readFlow(float voltage)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	ed87 0a01 	vstr	s0, [r7, #4]
	//	instFlow = roundf(instFlow);*/
	//	return instFlow;
//	instFlow = (voltage - 0.662)/  0.0132;
//	return instFlow;

	instFlow = (voltage/voltageDivider - (float)referenceVolt)/scalingFactor;
 800063a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000678 <readFlow+0x48>
 800063e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000646:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800067c <readFlow+0x4c>
 800064a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000652:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000680 <readFlow+0x50>
 8000656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <readFlow+0x54>)
 800065c:	edc3 7a00 	vstr	s15, [r3]
	return instFlow;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <readFlow+0x54>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	ee07 3a90 	vmov	s15, r3
}
 8000668:	eeb0 0a67 	vmov.f32	s0, s15
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	3f298953 	.word	0x3f298953
 800067c:	00000001 	.word	0x00000001
 8000680:	3ca3d70a 	.word	0x3ca3d70a
 8000684:	20000200 	.word	0x20000200

08000688 <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800069c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80006cc <setFlowRate+0x44>
 80006a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006a4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80006d0 <setFlowRate+0x48>
 80006a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80006d4 <setFlowRate+0x4c>
 80006b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006b8:	eef0 7a66 	vmov.f32	s15, s13

}
 80006bc:	eeb0 0a67 	vmov.f32	s0, s15
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	3ca3d70a 	.word	0x3ca3d70a
 80006d0:	00000001 	.word	0x00000001
 80006d4:	3fc147ae 	.word	0x3fc147ae

080006d8 <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
return;
 80006dc:	bf00      	nop
}
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <flowStateOpen>:
void flowStateOpen(void){
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
return;
 80006ea:	bf00      	nop
}
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <flowStateControl>:
void flowStateControl(void){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
return;
 80006f8:	bf00      	nop
}
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	pumpTestsParameters[0].currentState = &pumpTestsParameters[0].stateList[0];
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <main+0x68>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <main+0x68>)
 800070c:	615a      	str	r2, [r3, #20]
	pumpTestsParameters[1].currentState = &pumpTestsParameters[1].stateList[0];
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <main+0x68>)
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <main+0x6c>)
 8000712:	665a      	str	r2, [r3, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f002 f819 	bl	800274a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f838 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 f9b2 	bl	8000a84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000720:	f000 f952 	bl	80009c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000724:	f000 f980 	bl	8000a28 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000728:	f000 f8a2 	bl	8000870 <MX_ADC1_Init>
  MX_DAC_Init();
 800072c:	f000 f8da 	bl	80008e4 <MX_DAC_Init>
  MX_TIM10_Init();
 8000730:	f000 f902 	bl	8000938 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000734:	f000 f924 	bl	8000980 <MX_TIM11_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000738:	f006 fc84 	bl	8007044 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <main+0x70>)
 800073e:	2100      	movs	r1, #0
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <main+0x74>)
 8000742:	f006 fce9 	bl	8007118 <osThreadNew>
 8000746:	4603      	mov	r3, r0
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <main+0x78>)
 800074a:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 800074c:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <main+0x7c>)
 800074e:	2100      	movs	r1, #0
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <main+0x80>)
 8000752:	f006 fce1 	bl	8007118 <osThreadNew>
 8000756:	4603      	mov	r3, r0
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <main+0x84>)
 800075a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <main+0x84>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fd7f 	bl	8007264 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000766:	f006 fca1 	bl	80070ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x66>
 800076c:	20000890 	.word	0x20000890
 8000770:	200008e0 	.word	0x200008e0
 8000774:	0800ce14 	.word	0x0800ce14
 8000778:	08000cd9 	.word	0x08000cd9
 800077c:	20000888 	.word	0x20000888
 8000780:	0800ce38 	.word	0x0800ce38
 8000784:	080019b9 	.word	0x080019b9
 8000788:	2000088c 	.word	0x2000088c

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00a f8ff 	bl	800a99e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f003 fa3c 	bl	8003c2c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <SystemClock_Config+0xdc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <SystemClock_Config+0xdc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <SystemClock_Config+0xdc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <SystemClock_Config+0xe0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <SystemClock_Config+0xe0>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <SystemClock_Config+0xe0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fa69 	bl	8003cec <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000820:	f001 fade 	bl	8001de0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000824:	f003 fa12 	bl	8003c4c <HAL_PWREx_EnableOverDrive>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800082e:	f001 fad7 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2103      	movs	r1, #3
 800084e:	4618      	mov	r0, r3
 8000850:	f003 fcfa 	bl	8004248 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800085a:	f001 fac1 	bl	8001de0 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	; 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_ADC1_Init+0x68>)
 8000876:	4a19      	ldr	r2, [pc, #100]	; (80008dc <MX_ADC1_Init+0x6c>)
 8000878:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_ADC1_Init+0x68>)
 800087c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000880:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_ADC1_Init+0x68>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_ADC1_Init+0x68>)
 800088a:	2201      	movs	r2, #1
 800088c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_ADC1_Init+0x68>)
 8000890:	2201      	movs	r2, #1
 8000892:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_ADC1_Init+0x68>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_ADC1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <MX_ADC1_Init+0x70>)
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008be:	2201      	movs	r2, #1
 80008c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_ADC1_Init+0x68>)
 80008c4:	f001 ff92 	bl	80027ec <HAL_ADC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80008ce:	f001 fa87 	bl	8001de0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000204 	.word	0x20000204
 80008dc:	40012000 	.word	0x40012000
 80008e0:	0f000001 	.word	0x0f000001

080008e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_DAC_Init+0x4c>)
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_DAC_Init+0x50>)
 80008f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_DAC_Init+0x4c>)
 80008fa:	f002 fc87 	bl	800320c <HAL_DAC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000904:	f001 fa6c 	bl	8001de0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_DAC_Init+0x4c>)
 8000918:	f002 fd75 	bl	8003406 <HAL_DAC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000922:	f001 fa5d 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000024c 	.word	0x2000024c
 8000934:	40007400 	.word	0x40007400

08000938 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_TIM10_Init+0x40>)
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <MX_TIM10_Init+0x44>)
 8000940:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48000 - 1;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_TIM10_Init+0x40>)
 8000944:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000948:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_TIM10_Init+0x40>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000 - 1;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_TIM10_Init+0x40>)
 8000952:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000956:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_TIM10_Init+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_TIM10_Init+0x40>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_TIM10_Init+0x40>)
 8000966:	f004 faef 	bl	8004f48 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000970:	f001 fa36 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000260 	.word	0x20000260
 800097c:	40014400 	.word	0x40014400

08000980 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_TIM11_Init+0x40>)
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <MX_TIM11_Init+0x44>)
 8000988:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 48000;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_TIM11_Init+0x40>)
 800098c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000990:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_TIM11_Init+0x40>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_TIM11_Init+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_TIM11_Init+0x40>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_TIM11_Init+0x40>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM11_Init+0x40>)
 80009ac:	f004 facc 	bl	8004f48 <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80009b6:	f001 fa13 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200002ac 	.word	0x200002ac
 80009c4:	40014800 	.word	0x40014800

080009c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART3_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a0c:	f004 fda0 	bl	8005550 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f001 f9e3 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002f8 	.word	0x200002f8
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2206      	movs	r2, #6
 8000a38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	f002 ff95 	bl	800399a <HAL_PCD_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a76:	f001 f9b3 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000380 	.word	0x20000380

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b7e      	ldr	r3, [pc, #504]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a7d      	ldr	r2, [pc, #500]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b7b      	ldr	r3, [pc, #492]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab2:	4b78      	ldr	r3, [pc, #480]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a77      	ldr	r2, [pc, #476]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ab8:	f043 0320 	orr.w	r3, r3, #32
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b75      	ldr	r3, [pc, #468]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0320 	and.w	r3, r3, #32
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	4b72      	ldr	r3, [pc, #456]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a71      	ldr	r2, [pc, #452]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b6c      	ldr	r3, [pc, #432]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6b      	ldr	r2, [pc, #428]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b69      	ldr	r3, [pc, #420]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b66      	ldr	r3, [pc, #408]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a65      	ldr	r2, [pc, #404]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a5f      	ldr	r2, [pc, #380]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b5d      	ldr	r3, [pc, #372]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a59      	ldr	r2, [pc, #356]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b57      	ldr	r3, [pc, #348]	; (8000c94 <MX_GPIO_Init+0x210>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000b42:	2200      	movs	r2, #0
 8000b44:	2137      	movs	r1, #55	; 0x37
 8000b46:	4854      	ldr	r0, [pc, #336]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b48:	f002 fef4 	bl	8003934 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b52:	4852      	ldr	r0, [pc, #328]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000b54:	f002 feee 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2140      	movs	r1, #64	; 0x40
 8000b5c:	4850      	ldr	r0, [pc, #320]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000b5e:	f002 fee9 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	484a      	ldr	r0, [pc, #296]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b7a:	f002 fd2f 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF4
                           PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000b7e:	2337      	movs	r3, #55	; 0x37
 8000b80:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4840      	ldr	r0, [pc, #256]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b96:	f002 fd21 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b9a:	2332      	movs	r3, #50	; 0x32
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000baa:	230b      	movs	r3, #11
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000bb6:	f002 fd11 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bba:	2386      	movs	r3, #134	; 0x86
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bca:	230b      	movs	r3, #11
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4834      	ldr	r0, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000bd6:	f002 fd01 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bda:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	482a      	ldr	r0, [pc, #168]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000bf4:	f002 fcf2 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4821      	ldr	r0, [pc, #132]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000c16:	f002 fce1 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c1a:	2340      	movs	r3, #64	; 0x40
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c32:	f002 fcd3 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4815      	ldr	r0, [pc, #84]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c4a:	f002 fcc7 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DI3_Pin DI2_Pin DI1_Pin */
  GPIO_InitStruct.Pin = DI3_Pin|DI2_Pin|DI1_Pin;
 8000c4e:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000c64:	f002 fcba 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c86:	f002 fca9 	bl	80035dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40021400 	.word	0x40021400
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40021800 	.word	0x40021800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020000 	.word	0x40020000

08000cac <resetTime>:
        //HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 5);
    }
}


void resetTime(){
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	seconds = 0;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <resetTime+0x20>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
	minutes = 0;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <resetTime+0x24>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	hours = 0;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <resetTime+0x28>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	2000095a 	.word	0x2000095a
 8000cd0:	20000959 	.word	0x20000959
 8000cd4:	20000958 	.word	0x20000958

08000cd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(pumpTestsParameters[pump].eNextState) {
 8000ce0:	4bc3      	ldr	r3, [pc, #780]	; (8000ff0 <StartDefaultTask+0x318>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4ac3      	ldr	r2, [pc, #780]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000ce8:	460b      	mov	r3, r1
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b0f      	cmp	r3, #15
 8000cf8:	f200 8645 	bhi.w	8001986 <StartDefaultTask+0xcae>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <StartDefaultTask+0x2c>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d45 	.word	0x08000d45
 8000d08:	08000deb 	.word	0x08000deb
 8000d0c:	08000e5f 	.word	0x08000e5f
 8000d10:	08001025 	.word	0x08001025
 8000d14:	080010c5 	.word	0x080010c5
 8000d18:	08001271 	.word	0x08001271
 8000d1c:	08001321 	.word	0x08001321
 8000d20:	080013f5 	.word	0x080013f5
 8000d24:	0800148f 	.word	0x0800148f
 8000d28:	08001593 	.word	0x08001593
 8000d2c:	08001635 	.word	0x08001635
 8000d30:	08001765 	.word	0x08001765
 8000d34:	080017d3 	.word	0x080017d3
 8000d38:	080018a7 	.word	0x080018a7
 8000d3c:	080018f1 	.word	0x080018f1
 8000d40:	08001965 	.word	0x08001965
	  			case START:
					volts = setFlowRate(0);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fc9f 	bl	8000688 <setFlowRate>
 8000d4a:	eef0 7a40 	vmov.f32	s15, s0
 8000d4e:	4baa      	ldr	r3, [pc, #680]	; (8000ff8 <StartDefaultTask+0x320>)
 8000d50:	edc3 7a00 	vstr	s15, [r3]
					dacSet(&hdac, DAC_CHANNEL_1, volts);
 8000d54:	4ba8      	ldr	r3, [pc, #672]	; (8000ff8 <StartDefaultTask+0x320>)
 8000d56:	edd3 7a00 	vldr	s15, [r3]
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	2100      	movs	r1, #0
 8000d60:	48a6      	ldr	r0, [pc, #664]	; (8000ffc <StartDefaultTask+0x324>)
 8000d62:	f001 f845 	bl	8001df0 <dacSet>
//	  				pumpTestsParameters[0].stateList[7] = ULTIMATE_MEASURE_TEST_INIT;
//	  				pumpTestsParameters[0].stateList[8] = IDLE;
//	  				pumpTestsParameters[0].stateList[9] = 0;

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000d66:	4ba2      	ldr	r3, [pc, #648]	; (8000ff0 <StartDefaultTask+0x318>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	3318      	adds	r3, #24
 8000d76:	4a9f      	ldr	r2, [pc, #636]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000d78:	1899      	adds	r1, r3, r2
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	2201      	movs	r2, #1
 8000d80:	489f      	ldr	r0, [pc, #636]	; (8001000 <StartDefaultTask+0x328>)
 8000d82:	f004 fc33 	bl	80055ec <HAL_UART_Transmit>

					// Receives State List
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[pump].stateList, 20, HAL_MAX_DELAY);
 8000d86:	4b9a      	ldr	r3, [pc, #616]	; (8000ff0 <StartDefaultTask+0x318>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4a97      	ldr	r2, [pc, #604]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000d96:	1899      	adds	r1, r3, r2
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	2214      	movs	r2, #20
 8000d9e:	4898      	ldr	r0, [pc, #608]	; (8001000 <StartDefaultTask+0x328>)
 8000da0:	f004 fca7 	bl	80056f2 <HAL_UART_Receive>

					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000da4:	4b92      	ldr	r3, [pc, #584]	; (8000ff0 <StartDefaultTask+0x318>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4992      	ldr	r1, [pc, #584]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	3314      	adds	r3, #20
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	1c48      	adds	r0, r1, #1
 8000dbc:	4c8d      	ldr	r4, [pc, #564]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	4423      	add	r3, r4
 8000dc8:	3314      	adds	r3, #20
 8000dca:	6018      	str	r0, [r3, #0]
 8000dcc:	4b88      	ldr	r3, [pc, #544]	; (8000ff0 <StartDefaultTask+0x318>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	7809      	ldrb	r1, [r1, #0]
 8000dd4:	4a87      	ldr	r2, [pc, #540]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4403      	add	r3, r0
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	3318      	adds	r3, #24
 8000de2:	460a      	mov	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]

	  				break;
 8000de6:	f000 bdda 	b.w	800199e <StartDefaultTask+0xcc6>
//					pumpTestsParameters[0].VATI[5] = 1;		// flow controller closed
//					pumpTestsParameters[0].VATI[6] = 3;		// mTorr
//					pumpTestsParameters[0].VATI[7] = 50;		// temperature in C

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000dea:	4b81      	ldr	r3, [pc, #516]	; (8000ff0 <StartDefaultTask+0x318>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	3318      	adds	r3, #24
 8000dfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000dfc:	1899      	adds	r1, r3, r2
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	2201      	movs	r2, #1
 8000e04:	487e      	ldr	r0, [pc, #504]	; (8001000 <StartDefaultTask+0x328>)
 8000e06:	f004 fbf1 	bl	80055ec <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].VATI[0], 8, HAL_MAX_DELAY);
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	2208      	movs	r2, #8
 8000e10:	497c      	ldr	r1, [pc, #496]	; (8001004 <StartDefaultTask+0x32c>)
 8000e12:	487b      	ldr	r0, [pc, #492]	; (8001000 <StartDefaultTask+0x328>)
 8000e14:	f004 fc6d 	bl	80056f2 <HAL_UART_Receive>

	  				flowStateClose();
 8000e18:	f7ff fc5e 	bl	80006d8 <flowStateClose>
	  				stepperOpen();
 8000e1c:	f001 f868 	bl	8001ef0 <stepperOpen>
	  				solenoidOpen();
 8000e20:	f001 f858 	bl	8001ed4 <solenoidOpen>
	  				solenoidClose();
 8000e24:	f001 f85d 	bl	8001ee2 <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000e28:	4877      	ldr	r0, [pc, #476]	; (8001008 <StartDefaultTask+0x330>)
 8000e2a:	f001 fbf1 	bl	8002610 <vacuumGaugeADC>

	  				pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
 8000e2e:	4b70      	ldr	r3, [pc, #448]	; (8000ff0 <StartDefaultTask+0x318>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4619      	mov	r1, r3
 8000e34:	4a6f      	ldr	r2, [pc, #444]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000e36:	460b      	mov	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	4413      	add	r3, r2
 8000e40:	3318      	adds	r3, #24
 8000e42:	2202      	movs	r2, #2
 8000e44:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 8000e46:	4871      	ldr	r0, [pc, #452]	; (800100c <StartDefaultTask+0x334>)
 8000e48:	f004 f8d6 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 8000e4c:	f7ff ff2e 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 8000e50:	4b6f      	ldr	r3, [pc, #444]	; (8001010 <StartDefaultTask+0x338>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f006 fa39 	bl	80072cc <osThreadResume>
	  				break;
 8000e5a:	f000 bda0 	b.w	800199e <StartDefaultTask+0xcc6>
	  			case VAC_ACHIEVMENT_TEST:
	  				volts = adcGet(&hadc1);
 8000e5e:	486a      	ldr	r0, [pc, #424]	; (8001008 <StartDefaultTask+0x330>)
 8000e60:	f000 fffa 	bl	8001e58 <adcGet>
 8000e64:	eef0 7a40 	vmov.f32	s15, s0
 8000e68:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <StartDefaultTask+0x320>)
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 8000e6e:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <StartDefaultTask+0x320>)
 8000e70:	edd3 7a00 	vldr	s15, [r3]
 8000e74:	eeb0 0a67 	vmov.f32	s0, s15
 8000e78:	f001 fbee 	bl	8002658 <readVacuum>
 8000e7c:	eef0 7a40 	vmov.f32	s15, s0
 8000e80:	4b64      	ldr	r3, [pc, #400]	; (8001014 <StartDefaultTask+0x33c>)
 8000e82:	edc3 7a00 	vstr	s15, [r3]

	  				vacuumScale = 1000; // Remove this once STM is connected to hardware
 8000e86:	4b63      	ldr	r3, [pc, #396]	; (8001014 <StartDefaultTask+0x33c>)
 8000e88:	4a63      	ldr	r2, [pc, #396]	; (8001018 <StartDefaultTask+0x340>)
 8000e8a:	601a      	str	r2, [r3, #0]

	  				if(vacuumScale <= (float)pumpTestsParameters[pump].VATI[6] / 1000.0){	// Success
 8000e8c:	4b61      	ldr	r3, [pc, #388]	; (8001014 <StartDefaultTask+0x33c>)
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e96:	4b56      	ldr	r3, [pc, #344]	; (8000ff0 <StartDefaultTask+0x318>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4413      	add	r3, r2
 8000ea8:	331f      	adds	r3, #31
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	ee07 3a90 	vmov	s15, r3
 8000eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000eb8:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 8000fe8 <StartDefaultTask+0x310>
 8000ebc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000ec0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec8:	d829      	bhi.n	8000f1e <StartDefaultTask+0x246>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8000eca:	4850      	ldr	r0, [pc, #320]	; (800100c <StartDefaultTask+0x334>)
 8000ecc:	f004 f90c 	bl	80050e8 <HAL_TIM_Base_Stop_IT>
		  				osThreadSuspend(sendDataHandle);
 8000ed0:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <StartDefaultTask+0x338>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 f9c5 	bl	8007264 <osThreadSuspend>
		  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000eda:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <StartDefaultTask+0x318>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4944      	ldr	r1, [pc, #272]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	440b      	add	r3, r1
 8000eec:	3314      	adds	r3, #20
 8000eee:	6819      	ldr	r1, [r3, #0]
 8000ef0:	1c48      	adds	r0, r1, #1
 8000ef2:	4c40      	ldr	r4, [pc, #256]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	4423      	add	r3, r4
 8000efe:	3314      	adds	r3, #20
 8000f00:	6018      	str	r0, [r3, #0]
 8000f02:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <StartDefaultTask+0x318>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	7809      	ldrb	r1, [r1, #0]
 8000f0a:	4a3a      	ldr	r2, [pc, #232]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4403      	add	r3, r0
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	4413      	add	r3, r2
 8000f16:	3318      	adds	r3, #24
 8000f18:	460a      	mov	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e05e      	b.n	8000fdc <StartDefaultTask+0x304>
	  				}else if(25 >= pumpTestsParameters[pump].VATI[7]){	// if current temp is >= temp limit
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <StartDefaultTask+0x318>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4a33      	ldr	r2, [pc, #204]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000f26:	460b      	mov	r3, r1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	4413      	add	r3, r2
 8000f30:	3320      	adds	r3, #32
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b19      	cmp	r3, #25
 8000f36:	d819      	bhi.n	8000f6c <StartDefaultTask+0x294>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8000f38:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <StartDefaultTask+0x318>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4a2d      	ldr	r2, [pc, #180]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000f40:	460b      	mov	r3, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	4413      	add	r3, r2
 8000f4a:	3318      	adds	r3, #24
 8000f4c:	220e      	movs	r2, #14
 8000f4e:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <StartDefaultTask+0x318>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000f58:	460b      	mov	r3, r1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4413      	add	r3, r2
 8000f62:	334e      	adds	r3, #78	; 0x4e
 8000f64:	2202      	movs	r2, #2
 8000f66:	701a      	strb	r2, [r3, #0]
	  					break;
 8000f68:	f000 bd19 	b.w	800199e <StartDefaultTask+0xcc6>
	  				}else if(pumpTestsParameters[pump].VATI[2] == hours && pumpTestsParameters[pump].VATI[3] == minutes){
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <StartDefaultTask+0x318>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000f74:	460b      	mov	r3, r1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	4413      	add	r3, r2
 8000f7e:	331b      	adds	r3, #27
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <StartDefaultTask+0x344>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d128      	bne.n	8000fdc <StartDefaultTask+0x304>
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <StartDefaultTask+0x318>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000f92:	460b      	mov	r3, r1
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	4413      	add	r3, r2
 8000f9c:	331c      	adds	r3, #28
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <StartDefaultTask+0x348>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d119      	bne.n	8000fdc <StartDefaultTask+0x304>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <StartDefaultTask+0x318>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4413      	add	r3, r2
 8000fba:	3318      	adds	r3, #24
 8000fbc:	220e      	movs	r2, #14
 8000fbe:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <StartDefaultTask+0x318>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <StartDefaultTask+0x31c>)
 8000fc8:	460b      	mov	r3, r1
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	4413      	add	r3, r2
 8000fd2:	334e      	adds	r3, #78	; 0x4e
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	701a      	strb	r2, [r3, #0]
	  					break;
 8000fd8:	f000 bce1 	b.w	800199e <StartDefaultTask+0xcc6>
	  				}

	  				osDelay(100); // Checks condition every 100 ms
 8000fdc:	2064      	movs	r0, #100	; 0x64
 8000fde:	f006 f9a9 	bl	8007334 <osDelay>

	  				break;
 8000fe2:	f000 bcdc 	b.w	800199e <StartDefaultTask+0xcc6>
 8000fe6:	bf00      	nop
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	408f4000 	.word	0x408f4000
 8000ff0:	20000930 	.word	0x20000930
 8000ff4:	20000890 	.word	0x20000890
 8000ff8:	20000934 	.word	0x20000934
 8000ffc:	2000024c 	.word	0x2000024c
 8001000:	200002f8 	.word	0x200002f8
 8001004:	200008a9 	.word	0x200008a9
 8001008:	20000204 	.word	0x20000204
 800100c:	20000260 	.word	0x20000260
 8001010:	2000088c 	.word	0x2000088c
 8001014:	2000093c 	.word	0x2000093c
 8001018:	447a0000 	.word	0x447a0000
 800101c:	20000958 	.word	0x20000958
 8001020:	20000959 	.word	0x20000959
//					pumpTestsParameters[0].STI[6] = 0;		// mTorr
//					pumpTestsParameters[0].STI[7] = 50;		// temperature in C
//					pumpTestsParameters[0].STI[8] = 50;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001024:	4baf      	ldr	r3, [pc, #700]	; (80012e4 <StartDefaultTask+0x60c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	3318      	adds	r3, #24
 8001034:	4aac      	ldr	r2, [pc, #688]	; (80012e8 <StartDefaultTask+0x610>)
 8001036:	1899      	adds	r1, r3, r2
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	2201      	movs	r2, #1
 800103e:	48ab      	ldr	r0, [pc, #684]	; (80012ec <StartDefaultTask+0x614>)
 8001040:	f004 fad4 	bl	80055ec <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].STI[0], 9, HAL_MAX_DELAY);
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	2209      	movs	r2, #9
 800104a:	49a9      	ldr	r1, [pc, #676]	; (80012f0 <StartDefaultTask+0x618>)
 800104c:	48a7      	ldr	r0, [pc, #668]	; (80012ec <StartDefaultTask+0x614>)
 800104e:	f004 fb50 	bl	80056f2 <HAL_UART_Receive>

	  				flowStateControl();
 8001052:	f7ff fb4f 	bl	80006f4 <flowStateControl>
	  				stepperOpen();
 8001056:	f000 ff4b 	bl	8001ef0 <stepperOpen>
	  				solenoidOpen();
 800105a:	f000 ff3b 	bl	8001ed4 <solenoidOpen>
	  				solenoidClose();
 800105e:	f000 ff40 	bl	8001ee2 <solenoidClose>
	  				flowControllerADC(&hadc1);
 8001062:	48a4      	ldr	r0, [pc, #656]	; (80012f4 <StartDefaultTask+0x61c>)
 8001064:	f7ff fac2 	bl	80005ec <flowControllerADC>


	  				pumpTestsParameters[pump].eNextState = SPECIAL_TEST;
 8001068:	4b9e      	ldr	r3, [pc, #632]	; (80012e4 <StartDefaultTask+0x60c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	4a9e      	ldr	r2, [pc, #632]	; (80012e8 <StartDefaultTask+0x610>)
 8001070:	460b      	mov	r3, r1
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4413      	add	r3, r2
 800107a:	3318      	adds	r3, #24
 800107c:	2204      	movs	r2, #4
 800107e:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 8001080:	489d      	ldr	r0, [pc, #628]	; (80012f8 <StartDefaultTask+0x620>)
 8001082:	f003 ffb9 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 8001086:	f7ff fe11 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 800108a:	4b9c      	ldr	r3, [pc, #624]	; (80012fc <StartDefaultTask+0x624>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f006 f91c 	bl	80072cc <osThreadResume>
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].STI[8]));
 8001094:	4b93      	ldr	r3, [pc, #588]	; (80012e4 <StartDefaultTask+0x60c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4a93      	ldr	r2, [pc, #588]	; (80012e8 <StartDefaultTask+0x610>)
 800109c:	460b      	mov	r3, r1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	3329      	adds	r3, #41	; 0x29
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff faec 	bl	8000688 <setFlowRate>
 80010b0:	eef0 7a40 	vmov.f32	s15, s0
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	2100      	movs	r1, #0
 80010ba:	4891      	ldr	r0, [pc, #580]	; (8001300 <StartDefaultTask+0x628>)
 80010bc:	f000 fe98 	bl	8001df0 <dacSet>
	  				break;
 80010c0:	f000 bc6d 	b.w	800199e <StartDefaultTask+0xcc6>
	  			case SPECIAL_TEST:
//	  				sprintf(msg,"SPECIAL_TEST Scanning\r\n");
//					printMsg(msg, &huart3);
//					osDelay(1000);

	  				flowControllerADC(&hadc1);
 80010c4:	488b      	ldr	r0, [pc, #556]	; (80012f4 <StartDefaultTask+0x61c>)
 80010c6:	f7ff fa91 	bl	80005ec <flowControllerADC>
					volts = adcGet(&hadc1);
 80010ca:	488a      	ldr	r0, [pc, #552]	; (80012f4 <StartDefaultTask+0x61c>)
 80010cc:	f000 fec4 	bl	8001e58 <adcGet>
 80010d0:	eef0 7a40 	vmov.f32	s15, s0
 80010d4:	4b8b      	ldr	r3, [pc, #556]	; (8001304 <StartDefaultTask+0x62c>)
 80010d6:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 80010da:	4b8a      	ldr	r3, [pc, #552]	; (8001304 <StartDefaultTask+0x62c>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eeb0 0a67 	vmov.f32	s0, s15
 80010e4:	f7ff faa4 	bl	8000630 <readFlow>
 80010e8:	eef0 7a40 	vmov.f32	s15, s0
 80010ec:	4b86      	ldr	r3, [pc, #536]	; (8001308 <StartDefaultTask+0x630>)
 80010ee:	edc3 7a00 	vstr	s15, [r3]

					vacuumGaugeADC(&hadc1);
 80010f2:	4880      	ldr	r0, [pc, #512]	; (80012f4 <StartDefaultTask+0x61c>)
 80010f4:	f001 fa8c 	bl	8002610 <vacuumGaugeADC>
	  				volts = adcGet(&hadc1);
 80010f8:	487e      	ldr	r0, [pc, #504]	; (80012f4 <StartDefaultTask+0x61c>)
 80010fa:	f000 fead 	bl	8001e58 <adcGet>
 80010fe:	eef0 7a40 	vmov.f32	s15, s0
 8001102:	4b80      	ldr	r3, [pc, #512]	; (8001304 <StartDefaultTask+0x62c>)
 8001104:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 8001108:	4b7e      	ldr	r3, [pc, #504]	; (8001304 <StartDefaultTask+0x62c>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	f001 faa1 	bl	8002658 <readVacuum>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	4b7c      	ldr	r3, [pc, #496]	; (800130c <StartDefaultTask+0x634>)
 800111c:	edc3 7a00 	vstr	s15, [r3]

	  				flowRate = 0;		// Remove this Once STM is connected to the hardware
 8001120:	4b79      	ldr	r3, [pc, #484]	; (8001308 <StartDefaultTask+0x630>)
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
	  				vacuumScale = 1000;	// Remove this Once STM is connected to the hardware
 8001128:	4b78      	ldr	r3, [pc, #480]	; (800130c <StartDefaultTask+0x634>)
 800112a:	4a79      	ldr	r2, [pc, #484]	; (8001310 <StartDefaultTask+0x638>)
 800112c:	601a      	str	r2, [r3, #0]

	  				if((uint8_t)flowRate == pumpTestsParameters[pump].STI[8]){	// success
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <StartDefaultTask+0x630>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001138:	edc7 7a00 	vstr	s15, [r7]
 800113c:	783b      	ldrb	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <StartDefaultTask+0x60c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	4968      	ldr	r1, [pc, #416]	; (80012e8 <StartDefaultTask+0x610>)
 8001148:	4603      	mov	r3, r0
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4403      	add	r3, r0
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	440b      	add	r3, r1
 8001152:	3329      	adds	r3, #41	; 0x29
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d129      	bne.n	80011ae <StartDefaultTask+0x4d6>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 800115a:	4867      	ldr	r0, [pc, #412]	; (80012f8 <StartDefaultTask+0x620>)
 800115c:	f003 ffc4 	bl	80050e8 <HAL_TIM_Base_Stop_IT>
						osThreadSuspend(sendDataHandle);
 8001160:	4b66      	ldr	r3, [pc, #408]	; (80012fc <StartDefaultTask+0x624>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f006 f87d 	bl	8007264 <osThreadSuspend>
						pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 800116a:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <StartDefaultTask+0x60c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	495d      	ldr	r1, [pc, #372]	; (80012e8 <StartDefaultTask+0x610>)
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	440b      	add	r3, r1
 800117c:	3314      	adds	r3, #20
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	1c48      	adds	r0, r1, #1
 8001182:	4c59      	ldr	r4, [pc, #356]	; (80012e8 <StartDefaultTask+0x610>)
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4423      	add	r3, r4
 800118e:	3314      	adds	r3, #20
 8001190:	6018      	str	r0, [r3, #0]
 8001192:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <StartDefaultTask+0x60c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	7809      	ldrb	r1, [r1, #0]
 800119a:	4a53      	ldr	r2, [pc, #332]	; (80012e8 <StartDefaultTask+0x610>)
 800119c:	4603      	mov	r3, r0
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4403      	add	r3, r0
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	3318      	adds	r3, #24
 80011a8:	460a      	mov	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e05c      	b.n	8001268 <StartDefaultTask+0x590>
	  				}else if(25 >= pumpTestsParameters[pump].STI[7]){	// if current temp is >= temp limit
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <StartDefaultTask+0x60c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <StartDefaultTask+0x610>)
 80011b6:	460b      	mov	r3, r1
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	3328      	adds	r3, #40	; 0x28
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b19      	cmp	r3, #25
 80011c6:	d818      	bhi.n	80011fa <StartDefaultTask+0x522>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <StartDefaultTask+0x60c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4a46      	ldr	r2, [pc, #280]	; (80012e8 <StartDefaultTask+0x610>)
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	3318      	adds	r3, #24
 80011dc:	220e      	movs	r2, #14
 80011de:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 80011e0:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <StartDefaultTask+0x60c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4a40      	ldr	r2, [pc, #256]	; (80012e8 <StartDefaultTask+0x610>)
 80011e8:	460b      	mov	r3, r1
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	4413      	add	r3, r2
 80011f2:	334e      	adds	r3, #78	; 0x4e
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]
	  					break;
 80011f8:	e3d1      	b.n	800199e <StartDefaultTask+0xcc6>
	  				}else if(pumpTestsParameters[pump].STI[2] == hours && pumpTestsParameters[pump].STI[3] == minutes){
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <StartDefaultTask+0x60c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	4a39      	ldr	r2, [pc, #228]	; (80012e8 <StartDefaultTask+0x610>)
 8001202:	460b      	mov	r3, r1
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	3323      	adds	r3, #35	; 0x23
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b40      	ldr	r3, [pc, #256]	; (8001314 <StartDefaultTask+0x63c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d127      	bne.n	8001268 <StartDefaultTask+0x590>
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <StartDefaultTask+0x60c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <StartDefaultTask+0x610>)
 8001220:	460b      	mov	r3, r1
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4413      	add	r3, r2
 800122a:	3324      	adds	r3, #36	; 0x24
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <StartDefaultTask+0x640>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d118      	bne.n	8001268 <StartDefaultTask+0x590>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <StartDefaultTask+0x60c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	4a2a      	ldr	r2, [pc, #168]	; (80012e8 <StartDefaultTask+0x610>)
 800123e:	460b      	mov	r3, r1
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4413      	add	r3, r2
 8001248:	3318      	adds	r3, #24
 800124a:	220e      	movs	r2, #14
 800124c:	701a      	strb	r2, [r3, #0]
						pumpTestsParameters[pump].pumpStatus = FAILURE;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <StartDefaultTask+0x60c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <StartDefaultTask+0x610>)
 8001256:	460b      	mov	r3, r1
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4413      	add	r3, r2
 8001260:	334e      	adds	r3, #78	; 0x4e
 8001262:	2202      	movs	r2, #2
 8001264:	701a      	strb	r2, [r3, #0]
						break;
 8001266:	e39a      	b.n	800199e <StartDefaultTask+0xcc6>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f006 f863 	bl	8007334 <osDelay>
					break;
 800126e:	e396      	b.n	800199e <StartDefaultTask+0xcc6>
//					pumpTestsParameters[0].WUI[5] = 0;		// flow controller open
//					pumpTestsParameters[0].WUI[6] = 0;		// mTorr
//					pumpTestsParameters[0].WUI[7] = 100;	// temperature in C

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <StartDefaultTask+0x60c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	3318      	adds	r3, #24
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <StartDefaultTask+0x610>)
 8001282:	1899      	adds	r1, r3, r2
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	2201      	movs	r2, #1
 800128a:	4818      	ldr	r0, [pc, #96]	; (80012ec <StartDefaultTask+0x614>)
 800128c:	f004 f9ae 	bl	80055ec <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].WUI[0], 8, HAL_MAX_DELAY);
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	2208      	movs	r2, #8
 8001296:	4921      	ldr	r1, [pc, #132]	; (800131c <StartDefaultTask+0x644>)
 8001298:	4814      	ldr	r0, [pc, #80]	; (80012ec <StartDefaultTask+0x614>)
 800129a:	f004 fa2a 	bl	80056f2 <HAL_UART_Receive>

	  				flowStateOpen();
 800129e:	f7ff fa22 	bl	80006e6 <flowStateOpen>
	  				stepperOpen();
 80012a2:	f000 fe25 	bl	8001ef0 <stepperOpen>
	  				solenoidOpen();
 80012a6:	f000 fe15 	bl	8001ed4 <solenoidOpen>
	  				solenoidClose();
 80012aa:	f000 fe1a 	bl	8001ee2 <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <StartDefaultTask+0x61c>)
 80012b0:	f001 f9ae 	bl	8002610 <vacuumGaugeADC>

	  				pumpTestsParameters[pump].eNextState = WARM_UP;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <StartDefaultTask+0x60c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <StartDefaultTask+0x610>)
 80012bc:	460b      	mov	r3, r1
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	3318      	adds	r3, #24
 80012c8:	2206      	movs	r2, #6
 80012ca:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <StartDefaultTask+0x620>)
 80012ce:	f003 fe93 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80012d2:	f7ff fceb 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <StartDefaultTask+0x624>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fff6 	bl	80072cc <osThreadResume>
	  				break;
 80012e0:	e35d      	b.n	800199e <StartDefaultTask+0xcc6>
 80012e2:	bf00      	nop
 80012e4:	20000930 	.word	0x20000930
 80012e8:	20000890 	.word	0x20000890
 80012ec:	200002f8 	.word	0x200002f8
 80012f0:	200008b1 	.word	0x200008b1
 80012f4:	20000204 	.word	0x20000204
 80012f8:	20000260 	.word	0x20000260
 80012fc:	2000088c 	.word	0x2000088c
 8001300:	2000024c 	.word	0x2000024c
 8001304:	20000934 	.word	0x20000934
 8001308:	20000938 	.word	0x20000938
 800130c:	2000093c 	.word	0x2000093c
 8001310:	447a0000 	.word	0x447a0000
 8001314:	20000958 	.word	0x20000958
 8001318:	20000959 	.word	0x20000959
 800131c:	200008ba 	.word	0x200008ba
	  			case WARM_UP:

	  				// record internal/external temperatures
	  				if(pumpTestsParameters[pump].WUI[2] == hours && pumpTestsParameters[pump].WUI[3] == minutes){
 8001320:	4bb7      	ldr	r3, [pc, #732]	; (8001600 <StartDefaultTask+0x928>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	4ab7      	ldr	r2, [pc, #732]	; (8001604 <StartDefaultTask+0x92c>)
 8001328:	460b      	mov	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	332c      	adds	r3, #44	; 0x2c
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	4bb4      	ldr	r3, [pc, #720]	; (8001608 <StartDefaultTask+0x930>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d138      	bne.n	80013b0 <StartDefaultTask+0x6d8>
 800133e:	4bb0      	ldr	r3, [pc, #704]	; (8001600 <StartDefaultTask+0x928>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4619      	mov	r1, r3
 8001344:	4aaf      	ldr	r2, [pc, #700]	; (8001604 <StartDefaultTask+0x92c>)
 8001346:	460b      	mov	r3, r1
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	4413      	add	r3, r2
 8001350:	332d      	adds	r3, #45	; 0x2d
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	4bad      	ldr	r3, [pc, #692]	; (800160c <StartDefaultTask+0x934>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d129      	bne.n	80013b0 <StartDefaultTask+0x6d8>
	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 800135c:	48ac      	ldr	r0, [pc, #688]	; (8001610 <StartDefaultTask+0x938>)
 800135e:	f003 fec3 	bl	80050e8 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 8001362:	4bac      	ldr	r3, [pc, #688]	; (8001614 <StartDefaultTask+0x93c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f005 ff7c 	bl	8007264 <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 800136c:	4ba4      	ldr	r3, [pc, #656]	; (8001600 <StartDefaultTask+0x928>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	49a4      	ldr	r1, [pc, #656]	; (8001604 <StartDefaultTask+0x92c>)
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	440b      	add	r3, r1
 800137e:	3314      	adds	r3, #20
 8001380:	6819      	ldr	r1, [r3, #0]
 8001382:	1c48      	adds	r0, r1, #1
 8001384:	4c9f      	ldr	r4, [pc, #636]	; (8001604 <StartDefaultTask+0x92c>)
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4423      	add	r3, r4
 8001390:	3314      	adds	r3, #20
 8001392:	6018      	str	r0, [r3, #0]
 8001394:	4b9a      	ldr	r3, [pc, #616]	; (8001600 <StartDefaultTask+0x928>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	7809      	ldrb	r1, [r1, #0]
 800139c:	4a99      	ldr	r2, [pc, #612]	; (8001604 <StartDefaultTask+0x92c>)
 800139e:	4603      	mov	r3, r0
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4403      	add	r3, r0
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	3318      	adds	r3, #24
 80013aa:	460a      	mov	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e01d      	b.n	80013ec <StartDefaultTask+0x714>
	  				}else if(25 >= pumpTestsParameters[0].WUI[7]){	// if current temp is >= temp limit
 80013b0:	4b94      	ldr	r3, [pc, #592]	; (8001604 <StartDefaultTask+0x92c>)
 80013b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013b6:	2b19      	cmp	r3, #25
 80013b8:	d818      	bhi.n	80013ec <StartDefaultTask+0x714>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80013ba:	4b91      	ldr	r3, [pc, #580]	; (8001600 <StartDefaultTask+0x928>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	4a90      	ldr	r2, [pc, #576]	; (8001604 <StartDefaultTask+0x92c>)
 80013c2:	460b      	mov	r3, r1
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4413      	add	r3, r2
 80013cc:	3318      	adds	r3, #24
 80013ce:	220e      	movs	r2, #14
 80013d0:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 80013d2:	4b8b      	ldr	r3, [pc, #556]	; (8001600 <StartDefaultTask+0x928>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4a8a      	ldr	r2, [pc, #552]	; (8001604 <StartDefaultTask+0x92c>)
 80013da:	460b      	mov	r3, r1
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	334e      	adds	r3, #78	; 0x4e
 80013e6:	2202      	movs	r2, #2
 80013e8:	701a      	strb	r2, [r3, #0]
	  					break;
 80013ea:	e2d8      	b.n	800199e <StartDefaultTask+0xcc6>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 80013ec:	2064      	movs	r0, #100	; 0x64
 80013ee:	f005 ffa1 	bl	8007334 <osDelay>
	  				break;
 80013f2:	e2d4      	b.n	800199e <StartDefaultTask+0xcc6>
//					pumpTestsParameters[0].LTI[6] = 0;		// mTorr
//					pumpTestsParameters[0].LTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].LTI[8] = 50;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80013f4:	4b82      	ldr	r3, [pc, #520]	; (8001600 <StartDefaultTask+0x928>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	3318      	adds	r3, #24
 8001404:	4a7f      	ldr	r2, [pc, #508]	; (8001604 <StartDefaultTask+0x92c>)
 8001406:	1899      	adds	r1, r3, r2
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	2201      	movs	r2, #1
 800140e:	4882      	ldr	r0, [pc, #520]	; (8001618 <StartDefaultTask+0x940>)
 8001410:	f004 f8ec 	bl	80055ec <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].LTI[0], 8, HAL_MAX_DELAY);
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	2208      	movs	r2, #8
 800141a:	4980      	ldr	r1, [pc, #512]	; (800161c <StartDefaultTask+0x944>)
 800141c:	487e      	ldr	r0, [pc, #504]	; (8001618 <StartDefaultTask+0x940>)
 800141e:	f004 f968 	bl	80056f2 <HAL_UART_Receive>

	  				stepperOpen();
 8001422:	f000 fd65 	bl	8001ef0 <stepperOpen>
	  				solenoidOpen();
 8001426:	f000 fd55 	bl	8001ed4 <solenoidOpen>
	  				solenoidClose();
 800142a:	f000 fd5a 	bl	8001ee2 <solenoidClose>
	  				flowControllerADC(&hadc1);
 800142e:	487c      	ldr	r0, [pc, #496]	; (8001620 <StartDefaultTask+0x948>)
 8001430:	f7ff f8dc 	bl	80005ec <flowControllerADC>

	  				pumpTestsParameters[pump].eNextState = LOAD_TEST;
 8001434:	4b72      	ldr	r3, [pc, #456]	; (8001600 <StartDefaultTask+0x928>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4a72      	ldr	r2, [pc, #456]	; (8001604 <StartDefaultTask+0x92c>)
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	4413      	add	r3, r2
 8001446:	3318      	adds	r3, #24
 8001448:	2208      	movs	r2, #8
 800144a:	701a      	strb	r2, [r3, #0]
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
 800144c:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <StartDefaultTask+0x928>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	4a6c      	ldr	r2, [pc, #432]	; (8001604 <StartDefaultTask+0x92c>)
 8001454:	460b      	mov	r3, r1
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	333a      	adds	r3, #58	; 0x3a
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f910 	bl	8000688 <setFlowRate>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	2100      	movs	r1, #0
 8001472:	486c      	ldr	r0, [pc, #432]	; (8001624 <StartDefaultTask+0x94c>)
 8001474:	f000 fcbc 	bl	8001df0 <dacSet>
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 8001478:	4865      	ldr	r0, [pc, #404]	; (8001610 <StartDefaultTask+0x938>)
 800147a:	f003 fdbd 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 800147e:	f7ff fc15 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 8001482:	4b64      	ldr	r3, [pc, #400]	; (8001614 <StartDefaultTask+0x93c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f005 ff20 	bl	80072cc <osThreadResume>

	  				break;
 800148c:	e287      	b.n	800199e <StartDefaultTask+0xcc6>
	  			case LOAD_TEST:

					volts = adcGet(&hadc1);
 800148e:	4864      	ldr	r0, [pc, #400]	; (8001620 <StartDefaultTask+0x948>)
 8001490:	f000 fce2 	bl	8001e58 <adcGet>
 8001494:	eef0 7a40 	vmov.f32	s15, s0
 8001498:	4b63      	ldr	r3, [pc, #396]	; (8001628 <StartDefaultTask+0x950>)
 800149a:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 800149e:	4b62      	ldr	r3, [pc, #392]	; (8001628 <StartDefaultTask+0x950>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	f7ff f8c2 	bl	8000630 <readFlow>
 80014ac:	eef0 7a40 	vmov.f32	s15, s0
 80014b0:	4b5e      	ldr	r3, [pc, #376]	; (800162c <StartDefaultTask+0x954>)
 80014b2:	edc3 7a00 	vstr	s15, [r3]

					flowRate = 0;	// Remove this Once STM is connected to the hardware
 80014b6:	4b5d      	ldr	r3, [pc, #372]	; (800162c <StartDefaultTask+0x954>)
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

	  				if(pumpTestsParameters[pump].LTI[2] == hours && pumpTestsParameters[pump].LTI[3] == minutes){
 80014be:	4b50      	ldr	r3, [pc, #320]	; (8001600 <StartDefaultTask+0x928>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4a4f      	ldr	r2, [pc, #316]	; (8001604 <StartDefaultTask+0x92c>)
 80014c6:	460b      	mov	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	3334      	adds	r3, #52	; 0x34
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <StartDefaultTask+0x930>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d138      	bne.n	800154e <StartDefaultTask+0x876>
 80014dc:	4b48      	ldr	r3, [pc, #288]	; (8001600 <StartDefaultTask+0x928>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4a48      	ldr	r2, [pc, #288]	; (8001604 <StartDefaultTask+0x92c>)
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4413      	add	r3, r2
 80014ee:	3335      	adds	r3, #53	; 0x35
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	4b46      	ldr	r3, [pc, #280]	; (800160c <StartDefaultTask+0x934>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d129      	bne.n	800154e <StartDefaultTask+0x876>
//	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80014fa:	4845      	ldr	r0, [pc, #276]	; (8001610 <StartDefaultTask+0x938>)
 80014fc:	f003 fdf4 	bl	80050e8 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 8001500:	4b44      	ldr	r3, [pc, #272]	; (8001614 <StartDefaultTask+0x93c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fead 	bl	8007264 <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <StartDefaultTask+0x928>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	493c      	ldr	r1, [pc, #240]	; (8001604 <StartDefaultTask+0x92c>)
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	440b      	add	r3, r1
 800151c:	3314      	adds	r3, #20
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	1c48      	adds	r0, r1, #1
 8001522:	4c38      	ldr	r4, [pc, #224]	; (8001604 <StartDefaultTask+0x92c>)
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4423      	add	r3, r4
 800152e:	3314      	adds	r3, #20
 8001530:	6018      	str	r0, [r3, #0]
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <StartDefaultTask+0x928>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	7809      	ldrb	r1, [r1, #0]
 800153a:	4a32      	ldr	r2, [pc, #200]	; (8001604 <StartDefaultTask+0x92c>)
 800153c:	4603      	mov	r3, r0
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4403      	add	r3, r0
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	3318      	adds	r3, #24
 8001548:	460a      	mov	r2, r1
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e01d      	b.n	800158a <StartDefaultTask+0x8b2>
	  				}else if(25 >= pumpTestsParameters[0].LTI[7]){	// if current temp is >= temp limit
 800154e:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <StartDefaultTask+0x92c>)
 8001550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001554:	2b19      	cmp	r3, #25
 8001556:	d818      	bhi.n	800158a <StartDefaultTask+0x8b2>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <StartDefaultTask+0x928>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4a29      	ldr	r2, [pc, #164]	; (8001604 <StartDefaultTask+0x92c>)
 8001560:	460b      	mov	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	3318      	adds	r3, #24
 800156c:	220e      	movs	r2, #14
 800156e:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <StartDefaultTask+0x928>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <StartDefaultTask+0x92c>)
 8001578:	460b      	mov	r3, r1
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	334e      	adds	r3, #78	; 0x4e
 8001584:	2202      	movs	r2, #2
 8001586:	701a      	strb	r2, [r3, #0]
	  					break;
 8001588:	e209      	b.n	800199e <StartDefaultTask+0xcc6>
	  				}

	  				osDelay(100);	// Checks condition every 100 ms
 800158a:	2064      	movs	r0, #100	; 0x64
 800158c:	f005 fed2 	bl	8007334 <osDelay>
	  				break;
 8001590:	e205      	b.n	800199e <StartDefaultTask+0xcc6>
//					pumpTestsParameters[0].OTI[6] = 0;		// mTorr
//					pumpTestsParameters[0].OTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].OTI[8] = 0;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <StartDefaultTask+0x928>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	3318      	adds	r3, #24
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <StartDefaultTask+0x92c>)
 80015a4:	1899      	adds	r1, r3, r2
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	2201      	movs	r2, #1
 80015ac:	481a      	ldr	r0, [pc, #104]	; (8001618 <StartDefaultTask+0x940>)
 80015ae:	f004 f81d 	bl	80055ec <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].OTI[0], 8, HAL_MAX_DELAY);
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	2208      	movs	r2, #8
 80015b8:	491d      	ldr	r1, [pc, #116]	; (8001630 <StartDefaultTask+0x958>)
 80015ba:	4817      	ldr	r0, [pc, #92]	; (8001618 <StartDefaultTask+0x940>)
 80015bc:	f004 f899 	bl	80056f2 <HAL_UART_Receive>

	  				stepperOpen();
 80015c0:	f000 fc96 	bl	8001ef0 <stepperOpen>
	  				solenoidOpen();
 80015c4:	f000 fc86 	bl	8001ed4 <solenoidOpen>
	  				solenoidClose();
 80015c8:	f000 fc8b 	bl	8001ee2 <solenoidClose>
	  				flowControllerADC(&hadc1);
 80015cc:	4814      	ldr	r0, [pc, #80]	; (8001620 <StartDefaultTask+0x948>)
 80015ce:	f7ff f80d 	bl	80005ec <flowControllerADC>

	  				pumpTestsParameters[pump].eNextState = OPERATION_TEST;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <StartDefaultTask+0x928>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <StartDefaultTask+0x92c>)
 80015da:	460b      	mov	r3, r1
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	3318      	adds	r3, #24
 80015e6:	220a      	movs	r2, #10
 80015e8:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <StartDefaultTask+0x938>)
 80015ec:	f003 fd04 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80015f0:	f7ff fb5c 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <StartDefaultTask+0x93c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f005 fe67 	bl	80072cc <osThreadResume>

	  				break;
 80015fe:	e1ce      	b.n	800199e <StartDefaultTask+0xcc6>
 8001600:	20000930 	.word	0x20000930
 8001604:	20000890 	.word	0x20000890
 8001608:	20000958 	.word	0x20000958
 800160c:	20000959 	.word	0x20000959
 8001610:	20000260 	.word	0x20000260
 8001614:	2000088c 	.word	0x2000088c
 8001618:	200002f8 	.word	0x200002f8
 800161c:	200008c2 	.word	0x200008c2
 8001620:	20000204 	.word	0x20000204
 8001624:	2000024c 	.word	0x2000024c
 8001628:	20000934 	.word	0x20000934
 800162c:	20000938 	.word	0x20000938
 8001630:	200008cb 	.word	0x200008cb
	  			case OPERATION_TEST:

	  				flowControllerADC(&hadc1);
 8001634:	48a2      	ldr	r0, [pc, #648]	; (80018c0 <StartDefaultTask+0xbe8>)
 8001636:	f7fe ffd9 	bl	80005ec <flowControllerADC>
					volts = adcGet(&hadc1);
 800163a:	48a1      	ldr	r0, [pc, #644]	; (80018c0 <StartDefaultTask+0xbe8>)
 800163c:	f000 fc0c 	bl	8001e58 <adcGet>
 8001640:	eef0 7a40 	vmov.f32	s15, s0
 8001644:	4b9f      	ldr	r3, [pc, #636]	; (80018c4 <StartDefaultTask+0xbec>)
 8001646:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 800164a:	4b9e      	ldr	r3, [pc, #632]	; (80018c4 <StartDefaultTask+0xbec>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	f7fe ffec 	bl	8000630 <readFlow>
 8001658:	eef0 7a40 	vmov.f32	s15, s0
 800165c:	4b9a      	ldr	r3, [pc, #616]	; (80018c8 <StartDefaultTask+0xbf0>)
 800165e:	edc3 7a00 	vstr	s15, [r3]

					vacuumGaugeADC(&hadc1);
 8001662:	4897      	ldr	r0, [pc, #604]	; (80018c0 <StartDefaultTask+0xbe8>)
 8001664:	f000 ffd4 	bl	8002610 <vacuumGaugeADC>
					volts = adcGet(&hadc1);
 8001668:	4895      	ldr	r0, [pc, #596]	; (80018c0 <StartDefaultTask+0xbe8>)
 800166a:	f000 fbf5 	bl	8001e58 <adcGet>
 800166e:	eef0 7a40 	vmov.f32	s15, s0
 8001672:	4b94      	ldr	r3, [pc, #592]	; (80018c4 <StartDefaultTask+0xbec>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(volts);
 8001678:	4b92      	ldr	r3, [pc, #584]	; (80018c4 <StartDefaultTask+0xbec>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	eeb0 0a67 	vmov.f32	s0, s15
 8001682:	f000 ffe9 	bl	8002658 <readVacuum>
 8001686:	eef0 7a40 	vmov.f32	s15, s0
 800168a:	4b90      	ldr	r3, [pc, #576]	; (80018cc <StartDefaultTask+0xbf4>)
 800168c:	edc3 7a00 	vstr	s15, [r3]

	  				if(pumpTestsParameters[pump].OTI[2] == hours && pumpTestsParameters[pump].OTI[3] == minutes){
 8001690:	4b8f      	ldr	r3, [pc, #572]	; (80018d0 <StartDefaultTask+0xbf8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	4a8f      	ldr	r2, [pc, #572]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	333d      	adds	r3, #61	; 0x3d
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	4b8c      	ldr	r3, [pc, #560]	; (80018d8 <StartDefaultTask+0xc00>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d138      	bne.n	8001720 <StartDefaultTask+0xa48>
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <StartDefaultTask+0xbf8>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <StartDefaultTask+0xbfc>)
 80016b6:	460b      	mov	r3, r1
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	4413      	add	r3, r2
 80016c0:	333e      	adds	r3, #62	; 0x3e
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b85      	ldr	r3, [pc, #532]	; (80018dc <StartDefaultTask+0xc04>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d129      	bne.n	8001720 <StartDefaultTask+0xa48>
	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80016cc:	4884      	ldr	r0, [pc, #528]	; (80018e0 <StartDefaultTask+0xc08>)
 80016ce:	f003 fd0b 	bl	80050e8 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 80016d2:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <StartDefaultTask+0xc0c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f005 fdc4 	bl	8007264 <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 80016dc:	4b7c      	ldr	r3, [pc, #496]	; (80018d0 <StartDefaultTask+0xbf8>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	497c      	ldr	r1, [pc, #496]	; (80018d4 <StartDefaultTask+0xbfc>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	440b      	add	r3, r1
 80016ee:	3314      	adds	r3, #20
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	1c48      	adds	r0, r1, #1
 80016f4:	4c77      	ldr	r4, [pc, #476]	; (80018d4 <StartDefaultTask+0xbfc>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4423      	add	r3, r4
 8001700:	3314      	adds	r3, #20
 8001702:	6018      	str	r0, [r3, #0]
 8001704:	4b72      	ldr	r3, [pc, #456]	; (80018d0 <StartDefaultTask+0xbf8>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	7809      	ldrb	r1, [r1, #0]
 800170c:	4a71      	ldr	r2, [pc, #452]	; (80018d4 <StartDefaultTask+0xbfc>)
 800170e:	4603      	mov	r3, r0
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4403      	add	r3, r0
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	4413      	add	r3, r2
 8001718:	3318      	adds	r3, #24
 800171a:	460a      	mov	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	e01d      	b.n	800175c <StartDefaultTask+0xa84>
	  				}else if(25 >= pumpTestsParameters[0].OTI[7]){	// if current temp is >= temp limit
 8001720:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001726:	2b19      	cmp	r3, #25
 8001728:	d818      	bhi.n	800175c <StartDefaultTask+0xa84>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 800172a:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <StartDefaultTask+0xbf8>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	4a68      	ldr	r2, [pc, #416]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001732:	460b      	mov	r3, r1
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	3318      	adds	r3, #24
 800173e:	220e      	movs	r2, #14
 8001740:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <StartDefaultTask+0xbf8>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	4a62      	ldr	r2, [pc, #392]	; (80018d4 <StartDefaultTask+0xbfc>)
 800174a:	460b      	mov	r3, r1
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	334e      	adds	r3, #78	; 0x4e
 8001756:	2202      	movs	r2, #2
 8001758:	701a      	strb	r2, [r3, #0]
	  					break;
 800175a:	e120      	b.n	800199e <StartDefaultTask+0xcc6>
	  				}
	  				osDelay(100);
 800175c:	2064      	movs	r0, #100	; 0x64
 800175e:	f005 fde9 	bl	8007334 <osDelay>
	  				break;
 8001762:	e11c      	b.n	800199e <StartDefaultTask+0xcc6>
//					pumpTestsParameters[0].UMTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].UMI[8] = 50;		// Flow Rate
//					pumpTestsParameters[0].UMTI[9] = 15;	// Pressure in kPA

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001764:	4b5a      	ldr	r3, [pc, #360]	; (80018d0 <StartDefaultTask+0xbf8>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	3318      	adds	r3, #24
 8001774:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001776:	1899      	adds	r1, r3, r2
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	2201      	movs	r2, #1
 800177e:	485a      	ldr	r0, [pc, #360]	; (80018e8 <StartDefaultTask+0xc10>)
 8001780:	f003 ff34 	bl	80055ec <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].UMTI[0], 9, HAL_MAX_DELAY);
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	2209      	movs	r2, #9
 800178a:	4958      	ldr	r1, [pc, #352]	; (80018ec <StartDefaultTask+0xc14>)
 800178c:	4856      	ldr	r0, [pc, #344]	; (80018e8 <StartDefaultTask+0xc10>)
 800178e:	f003 ffb0 	bl	80056f2 <HAL_UART_Receive>

	  				stepperOpen();
 8001792:	f000 fbad 	bl	8001ef0 <stepperOpen>
	  				solenoidOpen();
 8001796:	f000 fb9d 	bl	8001ed4 <solenoidOpen>
	  				solenoidClose();
 800179a:	f000 fba2 	bl	8001ee2 <solenoidClose>
	  				flowControllerADC(&hadc1);
 800179e:	4848      	ldr	r0, [pc, #288]	; (80018c0 <StartDefaultTask+0xbe8>)
 80017a0:	f7fe ff24 	bl	80005ec <flowControllerADC>

					pumpTestsParameters[pump].eNextState = ULTIMATE_MEASURE_TEST;
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <StartDefaultTask+0xbf8>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4a4a      	ldr	r2, [pc, #296]	; (80018d4 <StartDefaultTask+0xbfc>)
 80017ac:	460b      	mov	r3, r1
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	3318      	adds	r3, #24
 80017b8:	220c      	movs	r2, #12
 80017ba:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80017bc:	4848      	ldr	r0, [pc, #288]	; (80018e0 <StartDefaultTask+0xc08>)
 80017be:	f003 fc1b 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80017c2:	f7ff fa73 	bl	8000cac <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <StartDefaultTask+0xc0c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 fd7e 	bl	80072cc <osThreadResume>

	  				break;
 80017d0:	e0e5      	b.n	800199e <StartDefaultTask+0xcc6>
	  			case ULTIMATE_MEASURE_TEST:


	  				if(pumpTestsParameters[pump].UMTI[2] == hours && pumpTestsParameters[pump].UMTI[3] == minutes){
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <StartDefaultTask+0xbf8>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4a3e      	ldr	r2, [pc, #248]	; (80018d4 <StartDefaultTask+0xbfc>)
 80017da:	460b      	mov	r3, r1
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	3346      	adds	r3, #70	; 0x46
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <StartDefaultTask+0xc00>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d138      	bne.n	8001862 <StartDefaultTask+0xb8a>
 80017f0:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <StartDefaultTask+0xbf8>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4a37      	ldr	r2, [pc, #220]	; (80018d4 <StartDefaultTask+0xbfc>)
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	3347      	adds	r3, #71	; 0x47
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <StartDefaultTask+0xc04>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d129      	bne.n	8001862 <StartDefaultTask+0xb8a>
	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 800180e:	4834      	ldr	r0, [pc, #208]	; (80018e0 <StartDefaultTask+0xc08>)
 8001810:	f003 fc6a 	bl	80050e8 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <StartDefaultTask+0xc0c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f005 fd23 	bl	8007264 <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <StartDefaultTask+0xbf8>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	492b      	ldr	r1, [pc, #172]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	440b      	add	r3, r1
 8001830:	3314      	adds	r3, #20
 8001832:	6819      	ldr	r1, [r3, #0]
 8001834:	1c48      	adds	r0, r1, #1
 8001836:	4c27      	ldr	r4, [pc, #156]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4423      	add	r3, r4
 8001842:	3314      	adds	r3, #20
 8001844:	6018      	str	r0, [r3, #0]
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <StartDefaultTask+0xbf8>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	7809      	ldrb	r1, [r1, #0]
 800184e:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001850:	4603      	mov	r3, r0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4403      	add	r3, r0
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	3318      	adds	r3, #24
 800185c:	460a      	mov	r2, r1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e01d      	b.n	800189e <StartDefaultTask+0xbc6>
	  				}else if(25 >= pumpTestsParameters[0].UMTI[7]){	// if current temp is >= temp limit
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001864:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001868:	2b19      	cmp	r3, #25
 800186a:	d818      	bhi.n	800189e <StartDefaultTask+0xbc6>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <StartDefaultTask+0xbf8>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <StartDefaultTask+0xbfc>)
 8001874:	460b      	mov	r3, r1
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	4413      	add	r3, r2
 800187e:	3318      	adds	r3, #24
 8001880:	220e      	movs	r2, #14
 8001882:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <StartDefaultTask+0xbf8>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <StartDefaultTask+0xbfc>)
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	334e      	adds	r3, #78	; 0x4e
 8001898:	2202      	movs	r2, #2
 800189a:	701a      	strb	r2, [r3, #0]
	  					break;
 800189c:	e07f      	b.n	800199e <StartDefaultTask+0xcc6>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 800189e:	2064      	movs	r0, #100	; 0x64
 80018a0:	f005 fd48 	bl	8007334 <osDelay>
	  				break;
 80018a4:	e07b      	b.n	800199e <StartDefaultTask+0xcc6>
//	  				volts = adcGet(&hadc1);
//	  				vacuumScale = readVacuum(volts);
//	  				sprintf(msg, "Vacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r", volts, vacuumScale);
//	  				printMsg(msg, &huart3);
//	  				pumpTestsParameters[pump].eNextState = IDLE;
					osDelay(1000);
 80018a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018aa:	f005 fd43 	bl	8007334 <osDelay>
					osThreadResume(sendDataHandle);
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <StartDefaultTask+0xc0c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 fd0a 	bl	80072cc <osThreadResume>
					HAL_TIM_Base_Start_IT(&htim10);
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <StartDefaultTask+0xc08>)
 80018ba:	f003 fb9d 	bl	8004ff8 <HAL_TIM_Base_Start_IT>

	  				break;
 80018be:	e06e      	b.n	800199e <StartDefaultTask+0xcc6>
 80018c0:	20000204 	.word	0x20000204
 80018c4:	20000934 	.word	0x20000934
 80018c8:	20000938 	.word	0x20000938
 80018cc:	2000093c 	.word	0x2000093c
 80018d0:	20000930 	.word	0x20000930
 80018d4:	20000890 	.word	0x20000890
 80018d8:	20000958 	.word	0x20000958
 80018dc:	20000959 	.word	0x20000959
 80018e0:	20000260 	.word	0x20000260
 80018e4:	2000088c 	.word	0x2000088c
 80018e8:	200002f8 	.word	0x200002f8
 80018ec:	200008d4 	.word	0x200008d4
	  			case FAIL_STATE:
	  				HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <StartDefaultTask+0xccc>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	3318      	adds	r3, #24
 8001900:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <StartDefaultTask+0xcd0>)
 8001902:	1899      	adds	r1, r3, r2
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	2201      	movs	r2, #1
 800190a:	4828      	ldr	r0, [pc, #160]	; (80019ac <StartDefaultTask+0xcd4>)
 800190c:	f003 fe6e 	bl	80055ec <HAL_UART_Transmit>
	  				HAL_TIM_Base_Stop_IT(&htim10);
 8001910:	4827      	ldr	r0, [pc, #156]	; (80019b0 <StartDefaultTask+0xcd8>)
 8001912:	f003 fbe9 	bl	80050e8 <HAL_TIM_Base_Stop_IT>
	  				osThreadSuspend(sendDataHandle);
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <StartDefaultTask+0xcdc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f005 fca2 	bl	8007264 <osThreadSuspend>
	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <StartDefaultTask+0xccc>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4920      	ldr	r1, [pc, #128]	; (80019a8 <StartDefaultTask+0xcd0>)
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	440b      	add	r3, r1
 8001932:	3314      	adds	r3, #20
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	1c48      	adds	r0, r1, #1
 8001938:	4c1b      	ldr	r4, [pc, #108]	; (80019a8 <StartDefaultTask+0xcd0>)
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4423      	add	r3, r4
 8001944:	3314      	adds	r3, #20
 8001946:	6018      	str	r0, [r3, #0]
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <StartDefaultTask+0xccc>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	7809      	ldrb	r1, [r1, #0]
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <StartDefaultTask+0xcd0>)
 8001952:	4603      	mov	r3, r0
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4403      	add	r3, r0
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	3318      	adds	r3, #24
 800195e:	460a      	mov	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
	  				break;
 8001962:	e01c      	b.n	800199e <StartDefaultTask+0xcc6>
	  			case STOP:
	  				pumpTestsParameters[pump].eNextState = STOP;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <StartDefaultTask+0xccc>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <StartDefaultTask+0xcd0>)
 800196c:	460b      	mov	r3, r1
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	3318      	adds	r3, #24
 8001978:	220f      	movs	r2, #15
 800197a:	701a      	strb	r2, [r3, #0]
	  				HAL_Delay(5000);
 800197c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001980:	f000 ff10 	bl	80027a4 <HAL_Delay>
	  				break;
 8001984:	e00b      	b.n	800199e <StartDefaultTask+0xcc6>
	  			default:
	  				pumpTestsParameters[pump].eNextState = STOP;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <StartDefaultTask+0xccc>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <StartDefaultTask+0xcd0>)
 800198e:	460b      	mov	r3, r1
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	3318      	adds	r3, #24
 800199a:	220f      	movs	r2, #15
 800199c:	701a      	strb	r2, [r3, #0]
	  switch(pumpTestsParameters[pump].eNextState) {
 800199e:	f7ff b99f 	b.w	8000ce0 <StartDefaultTask+0x8>
 80019a2:	bf00      	nop
 80019a4:	20000930 	.word	0x20000930
 80019a8:	20000890 	.word	0x20000890
 80019ac:	200002f8 	.word	0x200002f8
 80019b0:	20000260 	.word	0x20000260
 80019b4:	2000088c 	.word	0x2000088c

080019b8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
//	sprintf(msg,"Sending Data\r\n");
//	printMsg(msg, &huart3);



    switch(pumpTestsParameters[pump].eNextState){
 80019c0:	4ba7      	ldr	r3, [pc, #668]	; (8001c60 <StartTask02+0x2a8>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	4aa7      	ldr	r2, [pc, #668]	; (8001c64 <StartTask02+0x2ac>)
 80019c8:	460b      	mov	r3, r1
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	3318      	adds	r3, #24
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	3b02      	subs	r3, #2
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	f200 8182 	bhi.w	8001ce2 <StartTask02+0x32a>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <StartTask02+0x2c>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a19 	.word	0x08001a19
 80019e8:	08001ce3 	.word	0x08001ce3
 80019ec:	08001a63 	.word	0x08001a63
 80019f0:	08001ce3 	.word	0x08001ce3
 80019f4:	08001ac3 	.word	0x08001ac3
 80019f8:	08001ce3 	.word	0x08001ce3
 80019fc:	08001af7 	.word	0x08001af7
 8001a00:	08001ce3 	.word	0x08001ce3
 8001a04:	08001b41 	.word	0x08001b41
 8001a08:	08001ce3 	.word	0x08001ce3
 8001a0c:	08001ba1 	.word	0x08001ba1
 8001a10:	08001c01 	.word	0x08001c01
 8001a14:	08001c85 	.word	0x08001c85
    case VAC_ACHIEVMENT_TEST:
    	tx_buffer[0] = VAC_ACHIEVMENT_TEST;
 8001a18:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <StartTask02+0x2b0>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001a1e:	4b90      	ldr	r3, [pc, #576]	; (8001c60 <StartTask02+0x2a8>)
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	4b91      	ldr	r3, [pc, #580]	; (8001c68 <StartTask02+0x2b0>)
 8001a24:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001a26:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <StartTask02+0x2b4>)
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b8f      	ldr	r3, [pc, #572]	; (8001c68 <StartTask02+0x2b0>)
 8001a2c:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001a2e:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <StartTask02+0x2b8>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b8d      	ldr	r3, [pc, #564]	; (8001c68 <StartTask02+0x2b0>)
 8001a34:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001a36:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <StartTask02+0x2bc>)
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <StartTask02+0x2b0>)
 8001a3c:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <StartTask02+0x2c0>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a48:	edc7 7a00 	vstr	s15, [r7]
 8001a4c:	783b      	ldrb	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b85      	ldr	r3, [pc, #532]	; (8001c68 <StartTask02+0x2b0>)
 8001a52:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001a54:	4b84      	ldr	r3, [pc, #528]	; (8001c68 <StartTask02+0x2b0>)
 8001a56:	2219      	movs	r2, #25
 8001a58:	719a      	strb	r2, [r3, #6]
    	tx_buffer_size = 7;
 8001a5a:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <StartTask02+0x2c4>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	701a      	strb	r2, [r3, #0]
    	break;
 8001a60:	e140      	b.n	8001ce4 <StartTask02+0x32c>
    case SPECIAL_TEST:
    	tx_buffer[0] = SPECIAL_TEST;
 8001a62:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <StartTask02+0x2b0>)
 8001a64:	2204      	movs	r2, #4
 8001a66:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001a68:	4b7d      	ldr	r3, [pc, #500]	; (8001c60 <StartTask02+0x2a8>)
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	4b7e      	ldr	r3, [pc, #504]	; (8001c68 <StartTask02+0x2b0>)
 8001a6e:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001a70:	4b7e      	ldr	r3, [pc, #504]	; (8001c6c <StartTask02+0x2b4>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	4b7c      	ldr	r3, [pc, #496]	; (8001c68 <StartTask02+0x2b0>)
 8001a76:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001a78:	4b7d      	ldr	r3, [pc, #500]	; (8001c70 <StartTask02+0x2b8>)
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <StartTask02+0x2b0>)
 8001a7e:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001a80:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <StartTask02+0x2bc>)
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	4b78      	ldr	r3, [pc, #480]	; (8001c68 <StartTask02+0x2b0>)
 8001a86:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001a88:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <StartTask02+0x2c0>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a92:	edc7 7a00 	vstr	s15, [r7]
 8001a96:	783b      	ldrb	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <StartTask02+0x2b0>)
 8001a9c:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001a9e:	4b72      	ldr	r3, [pc, #456]	; (8001c68 <StartTask02+0x2b0>)
 8001aa0:	2219      	movs	r2, #25
 8001aa2:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001aa4:	4b76      	ldr	r3, [pc, #472]	; (8001c80 <StartTask02+0x2c8>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aae:	edc7 7a00 	vstr	s15, [r7]
 8001ab2:	783b      	ldrb	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <StartTask02+0x2b0>)
 8001ab8:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001aba:	4b70      	ldr	r3, [pc, #448]	; (8001c7c <StartTask02+0x2c4>)
 8001abc:	2208      	movs	r2, #8
 8001abe:	701a      	strb	r2, [r3, #0]
    	break;
 8001ac0:	e110      	b.n	8001ce4 <StartTask02+0x32c>
    case WARM_UP:
    	tx_buffer[0] = WARM_UP;
 8001ac2:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <StartTask02+0x2b0>)
 8001ac4:	2206      	movs	r2, #6
 8001ac6:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001ac8:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <StartTask02+0x2a8>)
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <StartTask02+0x2b0>)
 8001ace:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001ad0:	4b66      	ldr	r3, [pc, #408]	; (8001c6c <StartTask02+0x2b4>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <StartTask02+0x2b0>)
 8001ad6:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001ad8:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <StartTask02+0x2b8>)
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <StartTask02+0x2b0>)
 8001ade:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001ae0:	4b64      	ldr	r3, [pc, #400]	; (8001c74 <StartTask02+0x2bc>)
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <StartTask02+0x2b0>)
 8001ae6:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = 25;						// temperature in C
 8001ae8:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <StartTask02+0x2b0>)
 8001aea:	2219      	movs	r2, #25
 8001aec:	715a      	strb	r2, [r3, #5]
    	tx_buffer_size = 6;
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <StartTask02+0x2c4>)
 8001af0:	2206      	movs	r2, #6
 8001af2:	701a      	strb	r2, [r3, #0]
    	break;
 8001af4:	e0f6      	b.n	8001ce4 <StartTask02+0x32c>
    case LOAD_TEST:
    	tx_buffer[0] = LOAD_TEST;
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <StartTask02+0x2b0>)
 8001af8:	2208      	movs	r2, #8
 8001afa:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001afc:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <StartTask02+0x2a8>)
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <StartTask02+0x2b0>)
 8001b02:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <StartTask02+0x2b4>)
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <StartTask02+0x2b0>)
 8001b0a:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001b0c:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <StartTask02+0x2b8>)
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <StartTask02+0x2b0>)
 8001b12:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001b14:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <StartTask02+0x2bc>)
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <StartTask02+0x2b0>)
 8001b1a:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) flowRate;		// L/min
 8001b1c:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <StartTask02+0x2c8>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b26:	edc7 7a00 	vstr	s15, [r7]
 8001b2a:	783b      	ldrb	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <StartTask02+0x2b0>)
 8001b30:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001b32:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <StartTask02+0x2b0>)
 8001b34:	2219      	movs	r2, #25
 8001b36:	719a      	strb	r2, [r3, #6]
    	tx_buffer_size = 7;
 8001b38:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <StartTask02+0x2c4>)
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	701a      	strb	r2, [r3, #0]
    	break;
 8001b3e:	e0d1      	b.n	8001ce4 <StartTask02+0x32c>
    case OPERATION_TEST:
    	tx_buffer[0] = OPERATION_TEST;
 8001b40:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <StartTask02+0x2b0>)
 8001b42:	220a      	movs	r2, #10
 8001b44:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <StartTask02+0x2a8>)
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <StartTask02+0x2b0>)
 8001b4c:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <StartTask02+0x2b4>)
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	4b45      	ldr	r3, [pc, #276]	; (8001c68 <StartTask02+0x2b0>)
 8001b54:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <StartTask02+0x2b8>)
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <StartTask02+0x2b0>)
 8001b5c:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001b5e:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <StartTask02+0x2bc>)
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <StartTask02+0x2b0>)
 8001b64:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <StartTask02+0x2c0>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b70:	edc7 7a00 	vstr	s15, [r7]
 8001b74:	783b      	ldrb	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <StartTask02+0x2b0>)
 8001b7a:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <StartTask02+0x2b0>)
 8001b7e:	2219      	movs	r2, #25
 8001b80:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <StartTask02+0x2c8>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8c:	edc7 7a00 	vstr	s15, [r7]
 8001b90:	783b      	ldrb	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <StartTask02+0x2b0>)
 8001b96:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <StartTask02+0x2c4>)
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	701a      	strb	r2, [r3, #0]
    	break;
 8001b9e:	e0a1      	b.n	8001ce4 <StartTask02+0x32c>
    case ULTIMATE_MEASURE_TEST:
    	tx_buffer[0] = ULTIMATE_MEASURE_TEST;
 8001ba0:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <StartTask02+0x2b0>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <StartTask02+0x2a8>)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <StartTask02+0x2b0>)
 8001bac:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <StartTask02+0x2b4>)
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <StartTask02+0x2b0>)
 8001bb4:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <StartTask02+0x2b8>)
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <StartTask02+0x2b0>)
 8001bbc:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <StartTask02+0x2bc>)
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <StartTask02+0x2b0>)
 8001bc4:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <StartTask02+0x2c0>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd0:	edc7 7a00 	vstr	s15, [r7]
 8001bd4:	783b      	ldrb	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <StartTask02+0x2b0>)
 8001bda:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <StartTask02+0x2b0>)
 8001bde:	2219      	movs	r2, #25
 8001be0:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <StartTask02+0x2c8>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bec:	edc7 7a00 	vstr	s15, [r7]
 8001bf0:	783b      	ldrb	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <StartTask02+0x2b0>)
 8001bf6:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <StartTask02+0x2c4>)
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	701a      	strb	r2, [r3, #0]
    	break;
 8001bfe:	e071      	b.n	8001ce4 <StartTask02+0x32c>
    case IDLE:
    	tx_buffer[0] = IDLE;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <StartTask02+0x2b0>)
 8001c02:	220d      	movs	r2, #13
 8001c04:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <StartTask02+0x2a8>)
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <StartTask02+0x2b0>)
 8001c0c:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <StartTask02+0x2b4>)
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <StartTask02+0x2b0>)
 8001c14:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <StartTask02+0x2b8>)
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <StartTask02+0x2b0>)
 8001c1c:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <StartTask02+0x2bc>)
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <StartTask02+0x2b0>)
 8001c24:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <StartTask02+0x2c0>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c30:	edc7 7a00 	vstr	s15, [r7]
 8001c34:	783b      	ldrb	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <StartTask02+0x2b0>)
 8001c3a:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <StartTask02+0x2b0>)
 8001c3e:	2219      	movs	r2, #25
 8001c40:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <StartTask02+0x2c8>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4c:	edc7 7a00 	vstr	s15, [r7]
 8001c50:	783b      	ldrb	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <StartTask02+0x2b0>)
 8001c56:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <StartTask02+0x2c4>)
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	701a      	strb	r2, [r3, #0]
    	break;
 8001c5e:	e041      	b.n	8001ce4 <StartTask02+0x32c>
 8001c60:	20000930 	.word	0x20000930
 8001c64:	20000890 	.word	0x20000890
 8001c68:	20000940 	.word	0x20000940
 8001c6c:	20000958 	.word	0x20000958
 8001c70:	20000959 	.word	0x20000959
 8001c74:	2000095a 	.word	0x2000095a
 8001c78:	2000093c 	.word	0x2000093c
 8001c7c:	20000954 	.word	0x20000954
 8001c80:	20000938 	.word	0x20000938
    case FAIL_STATE:
    	tx_buffer[0] = FAIL_STATE;
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <StartTask02+0x348>)
 8001c86:	220e      	movs	r2, #14
 8001c88:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <StartTask02+0x34c>)
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <StartTask02+0x348>)
 8001c90:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <StartTask02+0x350>)
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <StartTask02+0x348>)
 8001c98:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <StartTask02+0x354>)
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <StartTask02+0x348>)
 8001ca0:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <StartTask02+0x358>)
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <StartTask02+0x348>)
 8001ca8:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <StartTask02+0x35c>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb4:	edc7 7a00 	vstr	s15, [r7]
 8001cb8:	783b      	ldrb	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <StartTask02+0x348>)
 8001cbe:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <StartTask02+0x348>)
 8001cc2:	2219      	movs	r2, #25
 8001cc4:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <StartTask02+0x360>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd0:	edc7 7a00 	vstr	s15, [r7]
 8001cd4:	783b      	ldrb	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <StartTask02+0x348>)
 8001cda:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <StartTask02+0x364>)
 8001cde:	2208      	movs	r2, #8
 8001ce0:	701a      	strb	r2, [r3, #0]
    default:
    	break;
 8001ce2:	bf00      	nop

    }
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buffer, tx_buffer_size);
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <StartTask02+0x364>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	4904      	ldr	r1, [pc, #16]	; (8001d00 <StartTask02+0x348>)
 8001cee:	480c      	ldr	r0, [pc, #48]	; (8001d20 <StartTask02+0x368>)
 8001cf0:	f003 fdc4 	bl	800587c <HAL_UART_Transmit_IT>
    osDelay(1000);
 8001cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf8:	f005 fb1c 	bl	8007334 <osDelay>
    switch(pumpTestsParameters[pump].eNextState){
 8001cfc:	e660      	b.n	80019c0 <StartTask02+0x8>
 8001cfe:	bf00      	nop
 8001d00:	20000940 	.word	0x20000940
 8001d04:	20000930 	.word	0x20000930
 8001d08:	20000958 	.word	0x20000958
 8001d0c:	20000959 	.word	0x20000959
 8001d10:	2000095a 	.word	0x2000095a
 8001d14:	2000093c 	.word	0x2000093c
 8001d18:	20000938 	.word	0x20000938
 8001d1c:	20000954 	.word	0x20000954
 8001d20:	200002f8 	.word	0x200002f8

08001d24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d36:	f000 fd15 	bl	8002764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim10) { // This a timer period = 1 sec
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d11f      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x5e>
  		seconds++;
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d4c:	701a      	strb	r2, [r3, #0]
  		if(seconds == 60){
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b3c      	cmp	r3, #60	; 0x3c
 8001d54:	d115      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x5e>
  			seconds = 0;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
  			minutes++;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d66:	701a      	strb	r2, [r3, #0]
  			if(minutes == 60){
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b3c      	cmp	r3, #60	; 0x3c
 8001d6e:	d108      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x5e>
  				minutes = 0;
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
  				hours++;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d80:	701a      	strb	r2, [r3, #0]
  			}
  		}
  	}
  if(htim == &htim11) { // This is for PWM
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d115      	bne.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x92>
	pulseCount++;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d94:	801a      	strh	r2, [r3, #0]
	if(pulseCount >= 3200){
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001d9e:	d306      	bcc.n	8001dae <HAL_TIM_PeriodElapsedCallback+0x8a>
		//HAL_TIM_Base_Stop_IT(&htim7);
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 8001da0:	2110      	movs	r1, #16
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001da4:	f001 fddf 	bl	8003966 <HAL_GPIO_TogglePin>
		pulseCount = 0;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	801a      	strh	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_5);
 8001dae:	2120      	movs	r1, #32
 8001db0:	480a      	ldr	r0, [pc, #40]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001db2:	f001 fdd8 	bl	8003966 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 1 */
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40001000 	.word	0x40001000
 8001dc4:	20000260 	.word	0x20000260
 8001dc8:	2000095a 	.word	0x2000095a
 8001dcc:	20000959 	.word	0x20000959
 8001dd0:	20000958 	.word	0x20000958
 8001dd4:	200002ac 	.word	0x200002ac
 8001dd8:	20000956 	.word	0x20000956
 8001ddc:	40021400 	.word	0x40021400

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <Error_Handler+0x8>
 8001dea:	0000      	movs	r0, r0
 8001dec:	0000      	movs	r0, r0
	...

08001df0 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f001 fa25 	bl	8003250 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 8001e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e0e:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001e40 <dacSet+0x50>
 8001e12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e16:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001e48 <dacSet+0x58>
 8001e1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e22:	ee17 2a90 	vmov	r2, s15
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <dacSet+0x60>)
 8001e28:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <dacSet+0x60>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f001 fab8 	bl	80033a8 <HAL_DAC_SetValue>
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	66666666 	.word	0x66666666
 8001e44:	400a6666 	.word	0x400a6666
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40affe00 	.word	0x40affe00
 8001e50:	2000095c 	.word	0x2000095c
 8001e54:	00000000 	.word	0x00000000

08001e58 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fd07 	bl	8002874 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 8001e66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fe04 	bl	8002a78 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fe8c 	bl	8002b8e <HAL_ADC_GetValue>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <adcGet+0x70>)
 8001e7c:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <adcGet+0x70>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e8a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001ecc <adcGet+0x74>
 8001e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e96:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001ec0 <adcGet+0x68>
 8001e9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <adcGet+0x78>)
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fdb1 	bl	8002a10 <HAL_ADC_Stop>
	return adcVolts;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <adcGet+0x78>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	ee07 3a90 	vmov	s15, r3
}
 8001eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	66666666 	.word	0x66666666
 8001ec4:	400a6666 	.word	0x400a6666
 8001ec8:	20000960 	.word	0x20000960
 8001ecc:	457ff000 	.word	0x457ff000
 8001ed0:	20000964 	.word	0x20000964

08001ed4 <solenoidOpen>:
    // Now you can use buffer as a string
    //HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);

}

void solenoidOpen(){
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 1);	// 3.3 V
	return;
 8001ed8:	bf00      	nop
}
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <solenoidClose>:
void solenoidClose(){
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 0);	// gnd
	return;
 8001ee6:	bf00      	nop
}
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <stepperOpen>:
// Public Functions		------------------------------------------------//

void stepperClose(){
}

void stepperOpen(){
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f001 f93b 	bl	80031b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <HAL_ADC_MspInit+0xa4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d13b      	bne.n	8001fea <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_ADC_MspInit+0xa8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fba:	2360      	movs	r3, #96	; 0x60
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480b      	ldr	r0, [pc, #44]	; (8001ffc <HAL_ADC_MspInit+0xac>)
 8001fce:	f001 fb05 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4806      	ldr	r0, [pc, #24]	; (8002000 <HAL_ADC_MspInit+0xb0>)
 8001fe6:	f001 faf9 	bl	80035dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40012000 	.word	0x40012000
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400

08002004 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_DAC_MspInit+0x84>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12b      	bne.n	800207e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_DAC_MspInit+0x88>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a18      	ldr	r2, [pc, #96]	; (800208c <HAL_DAC_MspInit+0x88>)
 800202c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_DAC_MspInit+0x88>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_DAC_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_DAC_MspInit+0x88>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_DAC_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002056:	2310      	movs	r3, #16
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205a:	2303      	movs	r3, #3
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <HAL_DAC_MspInit+0x8c>)
 800206a:	f001 fab7 	bl	80035dc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	210f      	movs	r1, #15
 8002072:	2036      	movs	r0, #54	; 0x36
 8002074:	f001 f8a0 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002078:	2036      	movs	r0, #54	; 0x36
 800207a:	f001 f8b9 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	; 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40007400 	.word	0x40007400
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000

08002094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_TIM_Base_MspInit+0x78>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d114      	bne.n	80020d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_TIM_Base_MspInit+0x7c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_TIM_Base_MspInit+0x7c>)
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_TIM_Base_MspInit+0x7c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2105      	movs	r1, #5
 80020c2:	2019      	movs	r0, #25
 80020c4:	f001 f878 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020c8:	2019      	movs	r0, #25
 80020ca:	f001 f891 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80020ce:	e018      	b.n	8002102 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM11)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <HAL_TIM_Base_MspInit+0x80>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d113      	bne.n	8002102 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_TIM_Base_MspInit+0x7c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <HAL_TIM_Base_MspInit+0x7c>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_TIM_Base_MspInit+0x7c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2105      	movs	r1, #5
 80020f6:	201a      	movs	r0, #26
 80020f8:	f001 f85e 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80020fc:	201a      	movs	r0, #26
 80020fe:	f001 f877 	bl	80031f0 <HAL_NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40014400 	.word	0x40014400
 8002110:	40023800 	.word	0x40023800
 8002114:	40014800 	.word	0x40014800

08002118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0ae      	sub	sp, #184	; 0xb8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2290      	movs	r2, #144	; 0x90
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f008 fc30 	bl	800a99e <memset>
  if(huart->Instance==USART3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a26      	ldr	r2, [pc, #152]	; (80021dc <HAL_UART_MspInit+0xc4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d144      	bne.n	80021d2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800214e:	2300      	movs	r3, #0
 8002150:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4618      	mov	r0, r3
 8002158:	f002 face 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002162:	f7ff fe3d 	bl	8001de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_UART_MspInit+0xc8>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_UART_MspInit+0xc8>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_UART_MspInit+0xc8>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_UART_MspInit+0xc8>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_UART_MspInit+0xc8>)
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_UART_MspInit+0xc8>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800219a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021b0:	2307      	movs	r3, #7
 80021b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <HAL_UART_MspInit+0xcc>)
 80021be:	f001 fa0d 	bl	80035dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2105      	movs	r1, #5
 80021c6:	2027      	movs	r0, #39	; 0x27
 80021c8:	f000 fff6 	bl	80031b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021cc:	2027      	movs	r0, #39	; 0x27
 80021ce:	f001 f80f 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021d2:	bf00      	nop
 80021d4:	37b8      	adds	r7, #184	; 0xb8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40004800 	.word	0x40004800
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020c00 	.word	0x40020c00

080021e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0ae      	sub	sp, #184	; 0xb8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2290      	movs	r2, #144	; 0x90
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f008 fbc8 	bl	800a99e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002216:	d159      	bne.n	80022cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002218:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800221c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4618      	mov	r0, r3
 800222a:	f002 fa65 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002234:	f7ff fdd4 	bl	8001de0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	4a25      	ldr	r2, [pc, #148]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6313      	str	r3, [r2, #48]	; 0x30
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002250:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800226a:	230a      	movs	r3, #10
 800226c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002274:	4619      	mov	r1, r3
 8002276:	4818      	ldr	r0, [pc, #96]	; (80022d8 <HAL_PCD_MspInit+0xf0>)
 8002278:	f001 f9b0 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800227c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002290:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002294:	4619      	mov	r1, r3
 8002296:	4810      	ldr	r0, [pc, #64]	; (80022d8 <HAL_PCD_MspInit+0xf0>)
 8002298:	f001 f9a0 	bl	80035dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 800229e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 80022a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a6:	6353      	str	r3, [r2, #52]	; 0x34
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 80022ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022be:	6453      	str	r3, [r2, #68]	; 0x44
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_PCD_MspInit+0xec>)
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022cc:	bf00      	nop
 80022ce:	37b8      	adds	r7, #184	; 0xb8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000

080022dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08e      	sub	sp, #56	; 0x38
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022ec:	4b33      	ldr	r3, [pc, #204]	; (80023bc <HAL_InitTick+0xe0>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a32      	ldr	r2, [pc, #200]	; (80023bc <HAL_InitTick+0xe0>)
 80022f2:	f043 0310 	orr.w	r3, r3, #16
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_InitTick+0xe0>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002304:	f107 0210 	add.w	r2, r7, #16
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f002 f9c0 	bl	8004694 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d103      	bne.n	8002326 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800231e:	f002 f991 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 8002322:	6378      	str	r0, [r7, #52]	; 0x34
 8002324:	e004      	b.n	8002330 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002326:	f002 f98d 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 800232a:	4603      	mov	r3, r0
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <HAL_InitTick+0xe4>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	3b01      	subs	r3, #1
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_InitTick+0xe8>)
 8002340:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_InitTick+0xec>)
 8002342:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <HAL_InitTick+0xe8>)
 8002346:	f240 32e7 	movw	r2, #999	; 0x3e7
 800234a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800234c:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_InitTick+0xe8>)
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_InitTick+0xe8>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_InitTick+0xe8>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_InitTick+0xe8>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002364:	4817      	ldr	r0, [pc, #92]	; (80023c4 <HAL_InitTick+0xe8>)
 8002366:	f002 fdef 	bl	8004f48 <HAL_TIM_Base_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002370:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002374:	2b00      	cmp	r3, #0
 8002376:	d11b      	bne.n	80023b0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002378:	4812      	ldr	r0, [pc, #72]	; (80023c4 <HAL_InitTick+0xe8>)
 800237a:	f002 fe3d 	bl	8004ff8 <HAL_TIM_Base_Start_IT>
 800237e:	4603      	mov	r3, r0
 8002380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002384:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002388:	2b00      	cmp	r3, #0
 800238a:	d111      	bne.n	80023b0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800238c:	2036      	movs	r0, #54	; 0x36
 800238e:	f000 ff2f 	bl	80031f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d808      	bhi.n	80023aa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002398:	2200      	movs	r2, #0
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	2036      	movs	r0, #54	; 0x36
 800239e:	f000 ff0b 	bl	80031b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_InitTick+0xf0>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e002      	b.n	80023b0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3738      	adds	r7, #56	; 0x38
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	431bde83 	.word	0x431bde83
 80023c4:	20000968 	.word	0x20000968
 80023c8:	40001000 	.word	0x40001000
 80023cc:	20000010 	.word	0x20000010

080023d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023d4:	e7fe      	b.n	80023d4 <NMI_Handler+0x4>

080023d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <HardFault_Handler+0x4>

080023dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <MemManage_Handler+0x4>

080023e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <UsageFault_Handler+0x4>

080023ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002402:	f002 fea0 	bl	8005146 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000260 	.word	0x20000260

08002410 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002416:	f002 fe96 	bl	8005146 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200002ac 	.word	0x200002ac

08002424 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <USART3_IRQHandler+0x10>)
 800242a:	f003 fa85 	bl	8005938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200002f8 	.word	0x200002f8

08002438 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <TIM6_DAC_IRQHandler+0x20>)
 800243e:	791b      	ldrb	r3, [r3, #4]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002446:	4804      	ldr	r0, [pc, #16]	; (8002458 <TIM6_DAC_IRQHandler+0x20>)
 8002448:	f000 ff54 	bl	80032f4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <TIM6_DAC_IRQHandler+0x24>)
 800244e:	f002 fe7a 	bl	8005146 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000024c 	.word	0x2000024c
 800245c:	20000968 	.word	0x20000968

08002460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_kill>:

int _kill(int pid, int sig)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800247a:	f008 fb39 	bl	800aaf0 <__errno>
 800247e:	4603      	mov	r3, r0
 8002480:	2216      	movs	r2, #22
 8002482:	601a      	str	r2, [r3, #0]
  return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <_exit>:

void _exit (int status)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ffe7 	bl	8002470 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024a2:	e7fe      	b.n	80024a2 <_exit+0x12>

080024a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e00a      	b.n	80024cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024b6:	f3af 8000 	nop.w
 80024ba:	4601      	mov	r1, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	b2ca      	uxtb	r2, r1
 80024c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbf0      	blt.n	80024b6 <_read+0x12>
  }

  return len;
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e009      	b.n	8002504 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	60ba      	str	r2, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbf1      	blt.n	80024f0 <_write+0x12>
  }
  return len;
 800250c:	687b      	ldr	r3, [r7, #4]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_close>:

int _close(int file)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800253e:	605a      	str	r2, [r3, #4]
  return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <_isatty>:

int _isatty(int file)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <_sbrk+0x5c>)
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <_sbrk+0x60>)
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <_sbrk+0x64>)
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <_sbrk+0x68>)
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <_sbrk+0x64>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d207      	bcs.n	80025c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b0:	f008 fa9e 	bl	800aaf0 <__errno>
 80025b4:	4603      	mov	r3, r0
 80025b6:	220c      	movs	r2, #12
 80025b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	e009      	b.n	80025d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <_sbrk+0x64>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <_sbrk+0x64>)
 80025d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d2:	68fb      	ldr	r3, [r7, #12]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20080000 	.word	0x20080000
 80025e0:	00000400 	.word	0x00000400
 80025e4:	200009b4 	.word	0x200009b4
 80025e8:	200054f0 	.word	0x200054f0

080025ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <SystemInit+0x20>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <SystemInit+0x20>)
 80025f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 8002626:	2306      	movs	r3, #6
 8002628:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800262a:	2301      	movs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800262e:	2301      	movs	r3, #1
 8002630:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fab5 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 8002644:	f7ff fbcc 	bl	8001de0 <Error_Handler>
	}
	return;
 8002648:	bf00      	nop
 800264a:	bf00      	nop
}
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	0000      	movs	r0, r0
 8002654:	0000      	movs	r0, r0
	...

08002658 <readVacuum>:

float readVacuum(float voltage){
 8002658:	b580      	push	{r7, lr}
 800265a:	ed2d 8b02 	vpush	{d8}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	ed87 0a01 	vstr	s0, [r7, #4]

	float exponent = (voltage * 3.13 - referenceVoltage)/scalingFactor;
 8002666:	edd7 7a01 	vldr	s15, [r7, #4]
 800266a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800266e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80026e0 <readVacuum+0x88>
 8002672:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <readVacuum+0x90>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002680:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <readVacuum+0x94>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800268e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002692:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002696:	edc7 7a03 	vstr	s15, [r7, #12]
	pressure = referencePressure * pow(10, exponent);
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <readVacuum+0x98>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80026a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026ac:	eeb0 1b47 	vmov.f64	d1, d7
 80026b0:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80026b4:	f00a f8c8 	bl	800c848 <pow>
 80026b8:	eeb0 7b40 	vmov.f64	d7, d0
 80026bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80026c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <readVacuum+0x9c>)
 80026c6:	edc3 7a00 	vstr	s15, [r3]

	return pressure;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <readVacuum+0x9c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	ee07 3a90 	vmov	s15, r3
}
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	ecbd 8b02 	vpop	{d8}
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	70a3d70a 	.word	0x70a3d70a
 80026e4:	40090a3d 	.word	0x40090a3d
 80026e8:	20000008 	.word	0x20000008
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	20000004 	.word	0x20000004
 80026f4:	200009b8 	.word	0x200009b8

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026fe:	490e      	ldr	r1, [pc, #56]	; (8002738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002714:	4c0b      	ldr	r4, [pc, #44]	; (8002744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002722:	f7ff ff63 	bl	80025ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002726:	f008 f9e9 	bl	800aafc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7fd ffeb 	bl	8000704 <main>
  bx  lr    
 800272e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800273c:	0800eab0 	.word	0x0800eab0
  ldr r2, =_sbss
 8002740:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002744:	200054ec 	.word	0x200054ec

08002748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC_IRQHandler>

0800274a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274e:	2003      	movs	r0, #3
 8002750:	f000 fd27 	bl	80031a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002754:	200f      	movs	r0, #15
 8002756:	f7ff fdc1 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800275a:	f7ff fbd1 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x20>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x24>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_IncTick+0x24>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000014 	.word	0x20000014
 8002788:	200009bc 	.word	0x200009bc

0800278c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_GetTick+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	200009bc 	.word	0x200009bc

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff ffee 	bl	800278c <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d005      	beq.n	80027ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_Delay+0x44>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ca:	bf00      	nop
 80027cc:	f7ff ffde 	bl	800278c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d8f7      	bhi.n	80027cc <HAL_Delay+0x28>
  {
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000014 	.word	0x20000014

080027ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e031      	b.n	8002866 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fba0 	bl	8001f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d116      	bne.n	8002858 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_ADC_Init+0x84>)
 8002830:	4013      	ands	r3, r2
 8002832:	f043 0202 	orr.w	r2, r3, #2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fb0a 	bl	8002e54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f023 0303 	bic.w	r3, r3, #3
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
 8002856:	e001      	b.n	800285c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	ffffeefd 	.word	0xffffeefd

08002874 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_ADC_Start+0x1a>
 800288a:	2302      	movs	r3, #2
 800288c:	e0ad      	b.n	80029ea <HAL_ADC_Start+0x176>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d018      	beq.n	80028d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_ADC_Start+0x184>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a50      	ldr	r2, [pc, #320]	; (80029fc <HAL_ADC_Start+0x188>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0c9a      	lsrs	r2, r3, #18
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f9      	bne.n	80028ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d175      	bne.n	80029d0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e8:	4b45      	ldr	r3, [pc, #276]	; (8002a00 <HAL_ADC_Start+0x18c>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800290a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d106      	bne.n	800292e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	f023 0206 	bic.w	r2, r3, #6
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
 800292c:	e002      	b.n	8002934 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002944:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_ADC_Start+0x190>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d143      	bne.n	80029e8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e03a      	b.n	80029e8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_ADC_Start+0x194>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10e      	bne.n	800299a <HAL_ADC_Start+0x126>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002998:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_ADC_Start+0x190>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d120      	bne.n	80029e8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <HAL_ADC_Start+0x198>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d11b      	bne.n	80029e8 <HAL_ADC_Start+0x174>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d114      	bne.n	80029e8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	e00b      	b.n	80029e8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f043 0210 	orr.w	r2, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83
 8002a00:	fffff8fe 	.word	0xfffff8fe
 8002a04:	40012300 	.word	0x40012300
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	40012200 	.word	0x40012200

08002a10 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_Stop+0x16>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e01f      	b.n	8002a66 <HAL_ADC_Stop+0x56>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_ADC_Stop+0x64>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	ffffeefe 	.word	0xffffeefe

08002a78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a94:	d113      	bne.n	8002abe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa4:	d10b      	bne.n	8002abe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e063      	b.n	8002b86 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002abe:	f7ff fe65 	bl	800278c <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ac4:	e021      	b.n	8002b0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d01d      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x6c>
 8002ad4:	f7ff fe5a 	bl	800278c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d212      	bcs.n	8002b0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d00b      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0204 	orr.w	r2, r3, #4
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e03d      	b.n	8002b86 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d1d6      	bne.n	8002ac6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0212 	mvn.w	r2, #18
 8002b20:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d123      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11f      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d111      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1c>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e136      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x28a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d93a      	bls.n	8002c4a <HAL_ADC_ConfigChannel+0xa2>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bdc:	d035      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68d9      	ldr	r1, [r3, #12]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b1e      	subs	r3, #30
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	400a      	ands	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8d      	ldr	r2, [pc, #564]	; (8002e40 <HAL_ADC_ConfigChannel+0x298>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10a      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	061a      	lsls	r2, r3, #24
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c22:	e035      	b.n	8002c90 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68d9      	ldr	r1, [r3, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4403      	add	r3, r0
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c48:	e022      	b.n	8002c90 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6919      	ldr	r1, [r3, #16]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	2207      	movs	r2, #7
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43da      	mvns	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6919      	ldr	r1, [r3, #16]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4618      	mov	r0, r3
 8002c80:	4603      	mov	r3, r0
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4403      	add	r3, r0
 8002c86:	409a      	lsls	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d824      	bhi.n	8002ce2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b05      	subs	r3, #5
 8002caa:	221f      	movs	r2, #31
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b05      	subs	r3, #5
 8002cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce0:	e04c      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d824      	bhi.n	8002d34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b23      	subs	r3, #35	; 0x23
 8002cfc:	221f      	movs	r2, #31
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	400a      	ands	r2, r1
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3b23      	subs	r3, #35	; 0x23
 8002d26:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
 8002d32:	e023      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	3b41      	subs	r3, #65	; 0x41
 8002d46:	221f      	movs	r2, #31
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	400a      	ands	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b41      	subs	r3, #65	; 0x41
 8002d70:	fa00 f203 	lsl.w	r2, r0, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a30      	ldr	r2, [pc, #192]	; (8002e44 <HAL_ADC_ConfigChannel+0x29c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1f4>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <HAL_ADC_ConfigChannel+0x29c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10f      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x21e>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b12      	cmp	r3, #18
 8002dac:	d10b      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002db4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002db8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002dba:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <HAL_ADC_ConfigChannel+0x29c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d12b      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x280>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_ADC_ConfigChannel+0x298>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x23a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b11      	cmp	r3, #17
 8002de0:	d122      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002de8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_ADC_ConfigChannel+0x298>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d111      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_ADC_ConfigChannel+0x2a4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_ADC_ConfigChannel+0x2a8>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9a      	lsrs	r2, r3, #18
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e1a:	e002      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f9      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	10000012 	.word	0x10000012
 8002e44:	40012000 	.word	0x40012000
 8002e48:	40012300 	.word	0x40012300
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	431bde83 	.word	0x431bde83

08002e54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e5c:	4b78      	ldr	r3, [pc, #480]	; (8003040 <ADC_Init+0x1ec>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a77      	ldr	r2, [pc, #476]	; (8003040 <ADC_Init+0x1ec>)
 8002e62:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e66:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e68:	4b75      	ldr	r3, [pc, #468]	; (8003040 <ADC_Init+0x1ec>)
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4973      	ldr	r1, [pc, #460]	; (8003040 <ADC_Init+0x1ec>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	021a      	lsls	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6899      	ldr	r1, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	4a58      	ldr	r2, [pc, #352]	; (8003044 <ADC_Init+0x1f0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6899      	ldr	r1, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	e00f      	b.n	8002f4e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0202 	bic.w	r2, r2, #2
 8002f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6899      	ldr	r1, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	005a      	lsls	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	035a      	lsls	r2, r3, #13
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e007      	b.n	8002fc4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	051a      	lsls	r2, r3, #20
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6899      	ldr	r1, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003006:	025a      	lsls	r2, r3, #9
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6899      	ldr	r1, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	029a      	lsls	r2, r3, #10
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40012300 	.word	0x40012300
 8003044:	0f000001 	.word	0x0f000001

08003048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <__NVIC_SetPriorityGrouping+0x40>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 8003072:	4313      	orrs	r3, r2
 8003074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003076:	4a04      	ldr	r2, [pc, #16]	; (8003088 <__NVIC_SetPriorityGrouping+0x40>)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	60d3      	str	r3, [r2, #12]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00
 800308c:	05fa0000 	.word	0x05fa0000

08003090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	; (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
         );
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ff4c 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ca:	f7ff ff61 	bl	8003090 <__NVIC_GetPriorityGrouping>
 80031ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	6978      	ldr	r0, [r7, #20]
 80031d6:	f7ff ffb1 	bl	800313c <NVIC_EncodePriority>
 80031da:	4602      	mov	r2, r0
 80031dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff80 	bl	80030e8 <__NVIC_SetPriority>
}
 80031e8:	bf00      	nop
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff54 	bl	80030ac <__NVIC_EnableIRQ>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e014      	b.n	8003248 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	791b      	ldrb	r3, [r3, #4]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe fee8 	bl	8002004 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	795b      	ldrb	r3, [r3, #5]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_DAC_Start+0x16>
 8003262:	2302      	movs	r3, #2
 8003264:	e040      	b.n	80032e8 <HAL_DAC_Start+0x98>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2201      	movs	r2, #1
 8003280:	409a      	lsls	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10f      	bne.n	80032b0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800329a:	2b3c      	cmp	r3, #60	; 0x3c
 800329c:	d11d      	bne.n	80032da <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e014      	b.n	80032da <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	213c      	movs	r1, #60	; 0x3c
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d107      	bne.n	80032da <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0202 	orr.w	r2, r2, #2
 80032d8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330a:	d120      	bne.n	800334e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	d118      	bne.n	800334e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2204      	movs	r2, #4
 8003320:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003336:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003346:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f852 	bl	80033f2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335c:	d120      	bne.n	80033a0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800336c:	d118      	bne.n	80033a0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f043 0202 	orr.w	r2, r3, #2
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003388:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003398:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f882 	bl	80034a4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3308      	adds	r3, #8
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e004      	b.n	80033dc <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	3314      	adds	r3, #20
 80033da:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	461a      	mov	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003406:	b480      	push	{r7}
 8003408:	b087      	sub	sp, #28
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	795b      	ldrb	r3, [r3, #5]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_DAC_ConfigChannel+0x18>
 800341a:	2302      	movs	r3, #2
 800341c:	e03c      	b.n	8003498 <HAL_DAC_ConfigChannel+0x92>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2202      	movs	r2, #2
 8003428:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	f640 72fe 	movw	r2, #4094	; 0xffe
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4013      	ands	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	22c0      	movs	r2, #192	; 0xc0
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43da      	mvns	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	400a      	ands	r2, r1
 8003488:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034c6:	f7ff f961 	bl	800278c <HAL_GetTick>
 80034ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d008      	beq.n	80034ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e052      	b.n	8003590 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0216 	bic.w	r2, r2, #22
 80034f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003508:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_DMA_Abort+0x62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0208 	bic.w	r2, r2, #8
 8003528:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353a:	e013      	b.n	8003564 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800353c:	f7ff f926 	bl	800278c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b05      	cmp	r3, #5
 8003548:	d90c      	bls.n	8003564 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e015      	b.n	8003590 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e4      	bne.n	800353c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	223f      	movs	r2, #63	; 0x3f
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00c      	b.n	80035d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2205      	movs	r2, #5
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e175      	b.n	80038e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	f040 8164 	bne.w	80038e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d005      	beq.n	8003632 <HAL_GPIO_Init+0x56>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d130      	bne.n	8003694 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 0201 	and.w	r2, r3, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d017      	beq.n	80036d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d123      	bne.n	8003724 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	08da      	lsrs	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3208      	adds	r2, #8
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80be 	beq.w	80038e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	4b66      	ldr	r3, [pc, #408]	; (8003900 <HAL_GPIO_Init+0x324>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	4a65      	ldr	r2, [pc, #404]	; (8003900 <HAL_GPIO_Init+0x324>)
 800376c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003770:	6453      	str	r3, [r2, #68]	; 0x44
 8003772:	4b63      	ldr	r3, [pc, #396]	; (8003900 <HAL_GPIO_Init+0x324>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800377e:	4a61      	ldr	r2, [pc, #388]	; (8003904 <HAL_GPIO_Init+0x328>)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	3302      	adds	r3, #2
 8003786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	220f      	movs	r2, #15
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_GPIO_Init+0x32c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d037      	beq.n	800381a <HAL_GPIO_Init+0x23e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a57      	ldr	r2, [pc, #348]	; (800390c <HAL_GPIO_Init+0x330>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d031      	beq.n	8003816 <HAL_GPIO_Init+0x23a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a56      	ldr	r2, [pc, #344]	; (8003910 <HAL_GPIO_Init+0x334>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02b      	beq.n	8003812 <HAL_GPIO_Init+0x236>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a55      	ldr	r2, [pc, #340]	; (8003914 <HAL_GPIO_Init+0x338>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d025      	beq.n	800380e <HAL_GPIO_Init+0x232>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a54      	ldr	r2, [pc, #336]	; (8003918 <HAL_GPIO_Init+0x33c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01f      	beq.n	800380a <HAL_GPIO_Init+0x22e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a53      	ldr	r2, [pc, #332]	; (800391c <HAL_GPIO_Init+0x340>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d019      	beq.n	8003806 <HAL_GPIO_Init+0x22a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_GPIO_Init+0x344>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_GPIO_Init+0x226>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a51      	ldr	r2, [pc, #324]	; (8003924 <HAL_GPIO_Init+0x348>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00d      	beq.n	80037fe <HAL_GPIO_Init+0x222>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a50      	ldr	r2, [pc, #320]	; (8003928 <HAL_GPIO_Init+0x34c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x21e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4f      	ldr	r2, [pc, #316]	; (800392c <HAL_GPIO_Init+0x350>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_GPIO_Init+0x21a>
 80037f2:	2309      	movs	r3, #9
 80037f4:	e012      	b.n	800381c <HAL_GPIO_Init+0x240>
 80037f6:	230a      	movs	r3, #10
 80037f8:	e010      	b.n	800381c <HAL_GPIO_Init+0x240>
 80037fa:	2308      	movs	r3, #8
 80037fc:	e00e      	b.n	800381c <HAL_GPIO_Init+0x240>
 80037fe:	2307      	movs	r3, #7
 8003800:	e00c      	b.n	800381c <HAL_GPIO_Init+0x240>
 8003802:	2306      	movs	r3, #6
 8003804:	e00a      	b.n	800381c <HAL_GPIO_Init+0x240>
 8003806:	2305      	movs	r3, #5
 8003808:	e008      	b.n	800381c <HAL_GPIO_Init+0x240>
 800380a:	2304      	movs	r3, #4
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x240>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <HAL_GPIO_Init+0x240>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <HAL_GPIO_Init+0x240>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_GPIO_Init+0x240>
 800381a:	2300      	movs	r3, #0
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f002 0203 	and.w	r2, r2, #3
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	4093      	lsls	r3, r2
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800382c:	4935      	ldr	r1, [pc, #212]	; (8003904 <HAL_GPIO_Init+0x328>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <HAL_GPIO_Init+0x354>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800385e:	4a34      	ldr	r2, [pc, #208]	; (8003930 <HAL_GPIO_Init+0x354>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_GPIO_Init+0x354>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003888:	4a29      	ldr	r2, [pc, #164]	; (8003930 <HAL_GPIO_Init+0x354>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_GPIO_Init+0x354>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038b2:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <HAL_GPIO_Init+0x354>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_GPIO_Init+0x354>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <HAL_GPIO_Init+0x354>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	f67f ae86 	bls.w	80035fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40013800 	.word	0x40013800
 8003908:	40020000 	.word	0x40020000
 800390c:	40020400 	.word	0x40020400
 8003910:	40020800 	.word	0x40020800
 8003914:	40020c00 	.word	0x40020c00
 8003918:	40021000 	.word	0x40021000
 800391c:	40021400 	.word	0x40021400
 8003920:	40021800 	.word	0x40021800
 8003924:	40021c00 	.word	0x40021c00
 8003928:	40022000 	.word	0x40022000
 800392c:	40022400 	.word	0x40022400
 8003930:	40013c00 	.word	0x40013c00

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	041a      	lsls	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003978:	887a      	ldrh	r2, [r7, #2]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	041a      	lsls	r2, r3, #16
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	43d9      	mvns	r1, r3
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	400b      	ands	r3, r1
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	619a      	str	r2, [r3, #24]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800399a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399c:	b08f      	sub	sp, #60	; 0x3c
 800399e:	af0a      	add	r7, sp, #40	; 0x28
 80039a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e116      	b.n	8003bda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fe fc0e 	bl	80021e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2203      	movs	r2, #3
 80039d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 f886 	bl	8006afc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	687e      	ldr	r6, [r7, #4]
 80039f8:	466d      	mov	r5, sp
 80039fa:	f106 0410 	add.w	r4, r6, #16
 80039fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a0e:	1d33      	adds	r3, r6, #4
 8003a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a12:	6838      	ldr	r0, [r7, #0]
 8003a14:	f003 f81a 	bl	8006a4c <USB_CoreInit>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0d7      	b.n	8003bda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 f874 	bl	8006b1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
 8003a3a:	e04a      	b.n	8003ad2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	333d      	adds	r3, #61	; 0x3d
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a50:	7bfa      	ldrb	r2, [r7, #15]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	333c      	adds	r3, #60	; 0x3c
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	b298      	uxth	r0, r3
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3344      	adds	r3, #68	; 0x44
 8003a78:	4602      	mov	r2, r0
 8003a7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3340      	adds	r3, #64	; 0x40
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3348      	adds	r3, #72	; 0x48
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	334c      	adds	r3, #76	; 0x4c
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ab8:	7bfa      	ldrb	r2, [r7, #15]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3354      	adds	r3, #84	; 0x54
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3af      	bcc.n	8003a3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	e044      	b.n	8003b6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3b5      	bcc.n	8003ae2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	687e      	ldr	r6, [r7, #4]
 8003b7e:	466d      	mov	r5, sp
 8003b80:	f106 0410 	add.w	r4, r6, #16
 8003b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b90:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b94:	1d33      	adds	r3, r6, #4
 8003b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b98:	6838      	ldr	r0, [r7, #0]
 8003b9a:	f003 f80d 	bl	8006bb8 <USB_DevInit>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e014      	b.n	8003bda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d102      	bne.n	8003bce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f80b 	bl	8003be4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f003 f9cb 	bl	8006f6e <USB_DevDisconnect>

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003be4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	10000003 	.word	0x10000003

08003c2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40007000 	.word	0x40007000

08003c4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c7a:	f7fe fd87 	bl	800278c <HAL_GetTick>
 8003c7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c80:	e009      	b.n	8003c96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c82:	f7fe fd83 	bl	800278c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c90:	d901      	bls.n	8003c96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e022      	b.n	8003cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca2:	d1ee      	bne.n	8003c82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0f      	ldr	r2, [pc, #60]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb0:	f7fe fd6c 	bl	800278c <HAL_GetTick>
 8003cb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cb6:	e009      	b.n	8003ccc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cb8:	f7fe fd68 	bl	800278c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc6:	d901      	bls.n	8003ccc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e007      	b.n	8003cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd8:	d1ee      	bne.n	8003cb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40007000 	.word	0x40007000

08003cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e29b      	b.n	800423a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8087 	beq.w	8003e1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d10:	4b96      	ldr	r3, [pc, #600]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d00c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1c:	4b93      	ldr	r3, [pc, #588]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d112      	bne.n	8003d4e <HAL_RCC_OscConfig+0x62>
 8003d28:	4b90      	ldr	r3, [pc, #576]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d36:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d06c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x130>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d168      	bne.n	8003e1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e275      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x7a>
 8003d58:	4b84      	ldr	r3, [pc, #528]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a83      	ldr	r2, [pc, #524]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e02e      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x9c>
 8003d6e:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7e      	ldr	r2, [pc, #504]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b7c      	ldr	r3, [pc, #496]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7b      	ldr	r2, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e01d      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCC_OscConfig+0xc0>
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a72      	ldr	r2, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd8>
 8003dac:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6e      	ldr	r2, [pc, #440]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a6b      	ldr	r2, [pc, #428]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d013      	beq.n	8003df4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fcde 	bl	800278c <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fe fcda 	bl	800278c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	; 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e229      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xe8>
 8003df2:	e014      	b.n	8003e1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe fcca 	bl	800278c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fe fcc6 	bl	800278c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e215      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x110>
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d069      	beq.n	8003efe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2a:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b4d      	ldr	r3, [pc, #308]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d11c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x190>
 8003e42:	4b4a      	ldr	r3, [pc, #296]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d116      	bne.n	8003e7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e1e9      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	493d      	ldr	r1, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	e040      	b.n	8003efe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d023      	beq.n	8003ecc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e84:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a38      	ldr	r2, [pc, #224]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe fc7c 	bl	800278c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e98:	f7fe fc78 	bl	800278c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1c7      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eaa:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b2d      	ldr	r3, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4929      	ldr	r1, [pc, #164]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
 8003eca:	e018      	b.n	8003efe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fc58 	bl	800278c <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee0:	f7fe fc54 	bl	800278c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e1a3      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d038      	beq.n	8003f7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d019      	beq.n	8003f46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f12:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fc35 	bl	800278c <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f26:	f7fe fc31 	bl	800278c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e180      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x23a>
 8003f44:	e01a      	b.n	8003f7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <HAL_RCC_OscConfig+0x280>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fe fc1b 	bl	800278c <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	e00a      	b.n	8003f70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fc17 	bl	800278c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d903      	bls.n	8003f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e166      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
 8003f6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	4b92      	ldr	r3, [pc, #584]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ee      	bne.n	8003f5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80a4 	beq.w	80040d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b8c      	ldr	r3, [pc, #560]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b89      	ldr	r3, [pc, #548]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4a88      	ldr	r2, [pc, #544]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa2:	4b86      	ldr	r3, [pc, #536]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb2:	4b83      	ldr	r3, [pc, #524]	; (80041c0 <HAL_RCC_OscConfig+0x4d4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fbe:	4b80      	ldr	r3, [pc, #512]	; (80041c0 <HAL_RCC_OscConfig+0x4d4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7f      	ldr	r2, [pc, #508]	; (80041c0 <HAL_RCC_OscConfig+0x4d4>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fe fbdf 	bl	800278c <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fe fbdb 	bl	800278c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	; 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e12a      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe4:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x4d4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x31a>
 8003ff8:	4b70      	ldr	r3, [pc, #448]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a6f      	ldr	r2, [pc, #444]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	e02d      	b.n	8004062 <HAL_RCC_OscConfig+0x376>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x33c>
 800400e:	4b6b      	ldr	r3, [pc, #428]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a6a      	ldr	r2, [pc, #424]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	4b68      	ldr	r3, [pc, #416]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a67      	ldr	r2, [pc, #412]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	e01c      	b.n	8004062 <HAL_RCC_OscConfig+0x376>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x35e>
 8004030:	4b62      	ldr	r3, [pc, #392]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a61      	ldr	r2, [pc, #388]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	4b5f      	ldr	r3, [pc, #380]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a5e      	ldr	r2, [pc, #376]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x376>
 800404a:	4b5c      	ldr	r3, [pc, #368]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a5b      	ldr	r2, [pc, #364]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
 8004056:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a58      	ldr	r2, [pc, #352]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d015      	beq.n	8004096 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe fb8f 	bl	800278c <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe fb8b 	bl	800278c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0d8      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ee      	beq.n	8004072 <HAL_RCC_OscConfig+0x386>
 8004094:	e014      	b.n	80040c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7fe fb79 	bl	800278c <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fe fb75 	bl	800278c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0c2      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a3c      	ldr	r2, [pc, #240]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80ae 	beq.w	8004238 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040dc:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d06d      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d14b      	bne.n	8004188 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b32      	ldr	r3, [pc, #200]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a31      	ldr	r2, [pc, #196]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe fb46 	bl	800278c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe fb42 	bl	800278c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e091      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b29      	ldr	r3, [pc, #164]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	019b      	lsls	r3, r3, #6
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	491b      	ldr	r1, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800415a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800415e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fe fb14 	bl	800278c <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004168:	f7fe fb10 	bl	800278c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e05f      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x47c>
 8004186:	e057      	b.n	8004238 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 800418e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe fafa 	bl	800278c <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419c:	f7fe faf6 	bl	800278c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e045      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_RCC_OscConfig+0x4d0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x4b0>
 80041ba:	e03d      	b.n	8004238 <HAL_RCC_OscConfig+0x54c>
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041c4:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <HAL_RCC_OscConfig+0x558>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d030      	beq.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d129      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d122      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d119      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	3b01      	subs	r3, #1
 800420e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d10f      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0d0      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d910      	bls.n	8004290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b67      	ldr	r3, [pc, #412]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 020f 	bic.w	r2, r3, #15
 8004276:	4965      	ldr	r1, [pc, #404]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b63      	ldr	r3, [pc, #396]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0b8      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a8:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a52      	ldr	r2, [pc, #328]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042cc:	4b50      	ldr	r3, [pc, #320]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	494d      	ldr	r1, [pc, #308]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d040      	beq.n	800436c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d115      	bne.n	800432a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07f      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e073      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06b      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 0203 	bic.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4936      	ldr	r1, [pc, #216]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	4313      	orrs	r3, r2
 800433a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433c:	f7fe fa26 	bl	800278c <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7fe fa22 	bl	800278c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e053      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 020c 	and.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d1eb      	bne.n	8004344 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d210      	bcs.n	800439c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	4922      	ldr	r1, [pc, #136]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e032      	b.n	8004402 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4916      	ldr	r1, [pc, #88]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	490e      	ldr	r1, [pc, #56]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043da:	f000 f821 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	490a      	ldr	r1, [pc, #40]	; (8004414 <HAL_RCC_ClockConfig+0x1cc>)
 80043ec:	5ccb      	ldrb	r3, [r1, r3]
 80043ee:	fa22 f303 	lsr.w	r3, r2, r3
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1d0>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x1d4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd ff6e 	bl	80022dc <HAL_InitTick>

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40023c00 	.word	0x40023c00
 8004410:	40023800 	.word	0x40023800
 8004414:	0800ce5c 	.word	0x0800ce5c
 8004418:	20000000 	.word	0x20000000
 800441c:	20000010 	.word	0x20000010

08004420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004424:	b094      	sub	sp, #80	; 0x50
 8004426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	647b      	str	r3, [r7, #68]	; 0x44
 800442c:	2300      	movs	r3, #0
 800442e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004430:	2300      	movs	r3, #0
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004438:	4b79      	ldr	r3, [pc, #484]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d00d      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x40>
 8004444:	2b08      	cmp	r3, #8
 8004446:	f200 80e1 	bhi.w	800460c <HAL_RCC_GetSysClockFreq+0x1ec>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x34>
 800444e:	2b04      	cmp	r3, #4
 8004450:	d003      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x3a>
 8004452:	e0db      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b73      	ldr	r3, [pc, #460]	; (8004624 <HAL_RCC_GetSysClockFreq+0x204>)
 8004456:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004458:	e0db      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800445a:	4b73      	ldr	r3, [pc, #460]	; (8004628 <HAL_RCC_GetSysClockFreq+0x208>)
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800445e:	e0d8      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004460:	4b6f      	ldr	r3, [pc, #444]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004468:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800446a:	4b6d      	ldr	r3, [pc, #436]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d063      	beq.n	800453e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004476:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	2200      	movs	r2, #0
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004480:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
 800448a:	2300      	movs	r3, #0
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
 800448e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004492:	4622      	mov	r2, r4
 8004494:	462b      	mov	r3, r5
 8004496:	f04f 0000 	mov.w	r0, #0
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	0159      	lsls	r1, r3, #5
 80044a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a4:	0150      	lsls	r0, r2, #5
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4621      	mov	r1, r4
 80044ac:	1a51      	subs	r1, r2, r1
 80044ae:	6139      	str	r1, [r7, #16]
 80044b0:	4629      	mov	r1, r5
 80044b2:	eb63 0301 	sbc.w	r3, r3, r1
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c4:	4659      	mov	r1, fp
 80044c6:	018b      	lsls	r3, r1, #6
 80044c8:	4651      	mov	r1, sl
 80044ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ce:	4651      	mov	r1, sl
 80044d0:	018a      	lsls	r2, r1, #6
 80044d2:	4651      	mov	r1, sl
 80044d4:	ebb2 0801 	subs.w	r8, r2, r1
 80044d8:	4659      	mov	r1, fp
 80044da:	eb63 0901 	sbc.w	r9, r3, r1
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044f2:	4690      	mov	r8, r2
 80044f4:	4699      	mov	r9, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	eb18 0303 	adds.w	r3, r8, r3
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	462b      	mov	r3, r5
 8004500:	eb49 0303 	adc.w	r3, r9, r3
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004512:	4629      	mov	r1, r5
 8004514:	024b      	lsls	r3, r1, #9
 8004516:	4621      	mov	r1, r4
 8004518:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800451c:	4621      	mov	r1, r4
 800451e:	024a      	lsls	r2, r1, #9
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004526:	2200      	movs	r2, #0
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
 800452a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004530:	f7fb fede 	bl	80002f0 <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4613      	mov	r3, r2
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	e058      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453e:	4b38      	ldr	r3, [pc, #224]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	2200      	movs	r2, #0
 8004546:	4618      	mov	r0, r3
 8004548:	4611      	mov	r1, r2
 800454a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	2300      	movs	r3, #0
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
 8004554:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	f04f 0000 	mov.w	r0, #0
 8004560:	f04f 0100 	mov.w	r1, #0
 8004564:	0159      	lsls	r1, r3, #5
 8004566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800456a:	0150      	lsls	r0, r2, #5
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4641      	mov	r1, r8
 8004572:	ebb2 0a01 	subs.w	sl, r2, r1
 8004576:	4649      	mov	r1, r9
 8004578:	eb63 0b01 	sbc.w	fp, r3, r1
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004588:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800458c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004590:	ebb2 040a 	subs.w	r4, r2, sl
 8004594:	eb63 050b 	sbc.w	r5, r3, fp
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	00eb      	lsls	r3, r5, #3
 80045a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a6:	00e2      	lsls	r2, r4, #3
 80045a8:	4614      	mov	r4, r2
 80045aa:	461d      	mov	r5, r3
 80045ac:	4643      	mov	r3, r8
 80045ae:	18e3      	adds	r3, r4, r3
 80045b0:	603b      	str	r3, [r7, #0]
 80045b2:	464b      	mov	r3, r9
 80045b4:	eb45 0303 	adc.w	r3, r5, r3
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045c6:	4629      	mov	r1, r5
 80045c8:	028b      	lsls	r3, r1, #10
 80045ca:	4621      	mov	r1, r4
 80045cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045d0:	4621      	mov	r1, r4
 80045d2:	028a      	lsls	r2, r1, #10
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045da:	2200      	movs	r2, #0
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	61fa      	str	r2, [r7, #28]
 80045e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045e4:	f7fb fe84 	bl	80002f0 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4613      	mov	r3, r2
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	3301      	adds	r3, #1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800460a:	e002      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetSysClockFreq+0x204>)
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004614:	4618      	mov	r0, r3
 8004616:	3750      	adds	r7, #80	; 0x50
 8004618:	46bd      	mov	sp, r7
 800461a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	00f42400 	.word	0x00f42400
 8004628:	007a1200 	.word	0x007a1200

0800462c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <HAL_RCC_GetHCLKFreq+0x14>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000000 	.word	0x20000000

08004644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004648:	f7ff fff0 	bl	800462c <HAL_RCC_GetHCLKFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0a9b      	lsrs	r3, r3, #10
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4903      	ldr	r1, [pc, #12]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800465a:	5ccb      	ldrb	r3, [r1, r3]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	0800ce6c 	.word	0x0800ce6c

0800466c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004670:	f7ff ffdc 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0b5b      	lsrs	r3, r3, #13
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	0800ce6c 	.word	0x0800ce6c

08004694 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	220f      	movs	r2, #15
 80046a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046a4:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_RCC_GetClockConfig+0x5c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0203 	and.w	r2, r3, #3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_RCC_GetClockConfig+0x5c>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <HAL_RCC_GetClockConfig+0x5c>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_GetClockConfig+0x5c>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	08db      	lsrs	r3, r3, #3
 80046ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <HAL_RCC_GetClockConfig+0x60>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40023c00 	.word	0x40023c00

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004720:	4b69      	ldr	r3, [pc, #420]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a68      	ldr	r2, [pc, #416]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800472a:	6093      	str	r3, [r2, #8]
 800472c:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	4964      	ldr	r1, [pc, #400]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004742:	2301      	movs	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d017      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004752:	4b5d      	ldr	r3, [pc, #372]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	4959      	ldr	r1, [pc, #356]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800478e:	4b4e      	ldr	r3, [pc, #312]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004794:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	494a      	ldr	r1, [pc, #296]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ac:	d101      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 808b 	beq.w	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	4a39      	ldr	r2, [pc, #228]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6413      	str	r3, [r2, #64]	; 0x40
 80047e8:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047f4:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a34      	ldr	r2, [pc, #208]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fd ffc4 	bl	800278c <HAL_GetTick>
 8004804:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fd ffc0 	bl	800278c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e38f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800481a:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d035      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d02e      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004844:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484e:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800485a:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004864:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800486c:	4b16      	ldr	r3, [pc, #88]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d114      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd ff88 	bl	800278c <HAL_GetTick>
 800487c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487e:	e00a      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fd ff84 	bl	800278c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e351      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ee      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ae:	d111      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048be:	400b      	ands	r3, r1
 80048c0:	4901      	ldr	r1, [pc, #4]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40007000 	.word	0x40007000
 80048d0:	0ffffcff 	.word	0x0ffffcff
 80048d4:	4bac      	ldr	r3, [pc, #688]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4aab      	ldr	r2, [pc, #684]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048de:	6093      	str	r3, [r2, #8]
 80048e0:	4ba9      	ldr	r3, [pc, #676]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ec:	49a6      	ldr	r1, [pc, #664]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d010      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048fe:	4ba2      	ldr	r3, [pc, #648]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004904:	4aa0      	ldr	r2, [pc, #640]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800490e:	4b9e      	ldr	r3, [pc, #632]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004910:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	499b      	ldr	r1, [pc, #620]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492c:	4b96      	ldr	r3, [pc, #600]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493a:	4993      	ldr	r1, [pc, #588]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800494e:	4b8e      	ldr	r3, [pc, #568]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495c:	498a      	ldr	r1, [pc, #552]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004970:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497e:	4982      	ldr	r1, [pc, #520]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004992:	4b7d      	ldr	r3, [pc, #500]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4979      	ldr	r1, [pc, #484]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049b4:	4b74      	ldr	r3, [pc, #464]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4971      	ldr	r1, [pc, #452]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049d6:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f023 020c 	bic.w	r2, r3, #12
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e4:	4968      	ldr	r1, [pc, #416]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049f8:	4b63      	ldr	r3, [pc, #396]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	4960      	ldr	r1, [pc, #384]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a1a:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	4957      	ldr	r1, [pc, #348]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a3c:	4b52      	ldr	r3, [pc, #328]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	494f      	ldr	r1, [pc, #316]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	4946      	ldr	r1, [pc, #280]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a80:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	493e      	ldr	r1, [pc, #248]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab0:	4935      	ldr	r1, [pc, #212]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ac4:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad2:	492d      	ldr	r1, [pc, #180]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d011      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ae6:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af4:	4924      	ldr	r1, [pc, #144]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b04:	d101      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b16:	2301      	movs	r3, #1
 8004b18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b34:	4914      	ldr	r1, [pc, #80]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b58:	490b      	ldr	r1, [pc, #44]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00f      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7c:	4902      	ldr	r1, [pc, #8]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00b      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b98:	4b8a      	ldr	r3, [pc, #552]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	4986      	ldr	r1, [pc, #536]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bbc:	4b81      	ldr	r3, [pc, #516]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bcc:	497d      	ldr	r1, [pc, #500]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d006      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80d6 	beq.w	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004be8:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a75      	ldr	r2, [pc, #468]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fd fdca 	bl	800278c <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bfc:	f7fd fdc6 	bl	800278c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e195      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c0e:	4b6d      	ldr	r3, [pc, #436]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d021      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11d      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c2e:	4b65      	ldr	r3, [pc, #404]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c3c:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c42:	0e1b      	lsrs	r3, r3, #24
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	019a      	lsls	r2, r3, #6
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	4958      	ldr	r1, [pc, #352]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d004      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02e      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c94:	d129      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c96:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ca4:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	0f1b      	lsrs	r3, r3, #28
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	019a      	lsls	r2, r3, #6
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	493e      	ldr	r1, [pc, #248]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cd2:	4b3c      	ldr	r3, [pc, #240]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd8:	f023 021f 	bic.w	r2, r3, #31
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	4938      	ldr	r1, [pc, #224]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01d      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	0e1b      	lsrs	r3, r3, #24
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0a:	0f1b      	lsrs	r3, r3, #28
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	019a      	lsls	r2, r3, #6
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	061b      	lsls	r3, r3, #24
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	071b      	lsls	r3, r3, #28
 8004d2a:	4926      	ldr	r1, [pc, #152]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d011      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	019a      	lsls	r2, r3, #6
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	061b      	lsls	r3, r3, #24
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	071b      	lsls	r3, r3, #28
 8004d5a:	491a      	ldr	r1, [pc, #104]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6e:	f7fd fd0d 	bl	800278c <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d76:	f7fd fd09 	bl	800278c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b64      	cmp	r3, #100	; 0x64
 8004d82:	d901      	bls.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e0d8      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	f040 80ce 	bne.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da8:	f7fd fcf0 	bl	800278c <HAL_GetTick>
 8004dac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004db0:	f7fd fcec 	bl	800278c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b64      	cmp	r3, #100	; 0x64
 8004dbc:	d904      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0bb      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dc8:	4b5e      	ldr	r3, [pc, #376]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd4:	d0ec      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d02e      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d12a      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dfe:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e0c:	4b4d      	ldr	r3, [pc, #308]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	0f1b      	lsrs	r3, r3, #28
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	019a      	lsls	r2, r3, #6
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	041b      	lsls	r3, r3, #16
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	071b      	lsls	r3, r3, #28
 8004e32:	4944      	ldr	r1, [pc, #272]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e3a:	4b42      	ldr	r3, [pc, #264]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	493d      	ldr	r1, [pc, #244]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d022      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e68:	d11d      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e6a:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	0e1b      	lsrs	r3, r3, #24
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e78:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	0f1b      	lsrs	r3, r3, #28
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	019a      	lsls	r2, r3, #6
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	431a      	orrs	r2, r3
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	071b      	lsls	r3, r3, #28
 8004e9e:	4929      	ldr	r1, [pc, #164]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d028      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eb2:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	0e1b      	lsrs	r3, r3, #24
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ec0:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	019a      	lsls	r2, r3, #6
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	061b      	lsls	r3, r3, #24
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	071b      	lsls	r3, r3, #28
 8004ee6:	4917      	ldr	r1, [pc, #92]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	4911      	ldr	r1, [pc, #68]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a0e      	ldr	r2, [pc, #56]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f10:	f7fd fc3c 	bl	800278c <HAL_GetTick>
 8004f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f18:	f7fd fc38 	bl	800278c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e007      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f36:	d1ef      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e049      	b.n	8004fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fd f890 	bl	8002094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fa24 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e054      	b.n	80050ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a26      	ldr	r2, [pc, #152]	; (80050c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d022      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503a:	d01d      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_TIM_Base_Start_IT+0xe4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d115      	bne.n	80050a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b06      	cmp	r3, #6
 8005088:	d015      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d011      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40001800 	.word	0x40001800
 80050e4:	00010007 	.word	0x00010007

080050e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a1a      	ldr	r2, [r3, #32]
 8005106:	f241 1311 	movw	r3, #4369	; 0x1111
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10f      	bne.n	8005130 <HAL_TIM_Base_Stop_IT+0x48>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	f240 4344 	movw	r3, #1092	; 0x444
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d107      	bne.n	8005130 <HAL_TIM_Base_Stop_IT+0x48>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0201 	bic.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d122      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d11b      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0202 	mvn.w	r2, #2
 8005172:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f905 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 800518e:	e005      	b.n	800519c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8f7 	bl	8005384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f908 	bl	80053ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d122      	bne.n	80051f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d11b      	bne.n	80051f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0204 	mvn.w	r2, #4
 80051c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f8db 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 80051e2:	e005      	b.n	80051f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f8cd 	bl	8005384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f8de 	bl	80053ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d122      	bne.n	800524a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b08      	cmp	r3, #8
 8005210:	d11b      	bne.n	800524a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0208 	mvn.w	r2, #8
 800521a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2204      	movs	r2, #4
 8005220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f8b1 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8005236:	e005      	b.n	8005244 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8a3 	bl	8005384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f8b4 	bl	80053ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b10      	cmp	r3, #16
 8005256:	d122      	bne.n	800529e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b10      	cmp	r3, #16
 8005264:	d11b      	bne.n	800529e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f06f 0210 	mvn.w	r2, #16
 800526e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2208      	movs	r2, #8
 8005274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f887 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 800528a:	e005      	b.n	8005298 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f879 	bl	8005384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f88a 	bl	80053ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10e      	bne.n	80052ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d107      	bne.n	80052ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0201 	mvn.w	r2, #1
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fc fd2d 	bl	8001d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	2b80      	cmp	r3, #128	; 0x80
 80052d6:	d10e      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b80      	cmp	r3, #128	; 0x80
 80052e4:	d107      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f919 	bl	8005528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005304:	d10e      	bne.n	8005324 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b80      	cmp	r3, #128	; 0x80
 8005312:	d107      	bne.n	8005324 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f90c 	bl	800553c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b40      	cmp	r3, #64	; 0x40
 8005330:	d10e      	bne.n	8005350 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d107      	bne.n	8005350 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f838 	bl	80053c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b20      	cmp	r3, #32
 800535c:	d10e      	bne.n	800537c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b20      	cmp	r3, #32
 800536a:	d107      	bne.n	800537c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0220 	mvn.w	r2, #32
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f8cc 	bl	8005514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800537c:	bf00      	nop
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a40      	ldr	r2, [pc, #256]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d00f      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3d      	ldr	r2, [pc, #244]	; (80054ec <TIM_Base_SetConfig+0x118>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00b      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3c      	ldr	r2, [pc, #240]	; (80054f0 <TIM_Base_SetConfig+0x11c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d007      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3b      	ldr	r2, [pc, #236]	; (80054f4 <TIM_Base_SetConfig+0x120>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a3a      	ldr	r2, [pc, #232]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d108      	bne.n	8005426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2f      	ldr	r2, [pc, #188]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d02b      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d027      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2c      	ldr	r2, [pc, #176]	; (80054ec <TIM_Base_SetConfig+0x118>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d023      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2b      	ldr	r2, [pc, #172]	; (80054f0 <TIM_Base_SetConfig+0x11c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01f      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <TIM_Base_SetConfig+0x120>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01b      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d017      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a28      	ldr	r2, [pc, #160]	; (80054fc <TIM_Base_SetConfig+0x128>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a27      	ldr	r2, [pc, #156]	; (8005500 <TIM_Base_SetConfig+0x12c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00f      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a26      	ldr	r2, [pc, #152]	; (8005504 <TIM_Base_SetConfig+0x130>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a25      	ldr	r2, [pc, #148]	; (8005508 <TIM_Base_SetConfig+0x134>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a24      	ldr	r2, [pc, #144]	; (800550c <TIM_Base_SetConfig+0x138>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a23      	ldr	r2, [pc, #140]	; (8005510 <TIM_Base_SetConfig+0x13c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d108      	bne.n	8005498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a0c      	ldr	r2, [pc, #48]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d103      	bne.n	80054d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	615a      	str	r2, [r3, #20]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40010400 	.word	0x40010400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800
 8005508:	40001800 	.word	0x40001800
 800550c:	40001c00 	.word	0x40001c00
 8005510:	40002000 	.word	0x40002000

08005514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e040      	b.n	80055e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fdd0 	bl	8002118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	; 0x24
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fce4 	bl	8005f5c <UART_SetConfig>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e022      	b.n	80055e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 ff3c 	bl	8006424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 ffc3 	bl	8006568 <UART_CheckIdleState>
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	; 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005600:	2b20      	cmp	r3, #32
 8005602:	d171      	bne.n	80056e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_UART_Transmit+0x24>
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e06a      	b.n	80056ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2221      	movs	r2, #33	; 0x21
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fd f8b3 	bl	800278c <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d108      	bne.n	8005654 <HAL_UART_Transmit+0x68>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e003      	b.n	800565c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800565c:	e02c      	b.n	80056b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2200      	movs	r2, #0
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 ffca 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e038      	b.n	80056ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10b      	bne.n	8005696 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800568c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3302      	adds	r3, #2
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	e007      	b.n	80056a6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1cc      	bne.n	800565e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 ff97 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e005      	b.n	80056ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b08a      	sub	sp, #40	; 0x28
 80056f6:	af02      	add	r7, sp, #8
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005708:	2b20      	cmp	r3, #32
 800570a:	f040 80b1 	bne.w	8005870 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_UART_Receive+0x28>
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0a9      	b.n	8005872 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2222      	movs	r2, #34	; 0x22
 800572a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005734:	f7fd f82a 	bl	800278c <HAL_GetTick>
 8005738:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	88fa      	ldrh	r2, [r7, #6]
 8005746:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005752:	d10e      	bne.n	8005772 <HAL_UART_Receive+0x80>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d105      	bne.n	8005768 <HAL_UART_Receive+0x76>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005766:	e02d      	b.n	80057c4 <HAL_UART_Receive+0xd2>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	22ff      	movs	r2, #255	; 0xff
 800576c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005770:	e028      	b.n	80057c4 <HAL_UART_Receive+0xd2>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10d      	bne.n	8005796 <HAL_UART_Receive+0xa4>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <HAL_UART_Receive+0x9a>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	22ff      	movs	r2, #255	; 0xff
 8005786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800578a:	e01b      	b.n	80057c4 <HAL_UART_Receive+0xd2>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	227f      	movs	r2, #127	; 0x7f
 8005790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005794:	e016      	b.n	80057c4 <HAL_UART_Receive+0xd2>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800579e:	d10d      	bne.n	80057bc <HAL_UART_Receive+0xca>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <HAL_UART_Receive+0xc0>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	227f      	movs	r2, #127	; 0x7f
 80057ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057b0:	e008      	b.n	80057c4 <HAL_UART_Receive+0xd2>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	223f      	movs	r2, #63	; 0x3f
 80057b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ba:	e003      	b.n	80057c4 <HAL_UART_Receive+0xd2>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d4:	d108      	bne.n	80057e8 <HAL_UART_Receive+0xf6>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d104      	bne.n	80057e8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	e003      	b.n	80057f0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80057f0:	e032      	b.n	8005858 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2120      	movs	r1, #32
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 ff00 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e032      	b.n	8005872 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10c      	bne.n	800582c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	b29a      	uxth	r2, r3
 800581a:	8a7b      	ldrh	r3, [r7, #18]
 800581c:	4013      	ands	r3, r2
 800581e:	b29a      	uxth	r2, r3
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	3302      	adds	r3, #2
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	e00c      	b.n	8005846 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	b2da      	uxtb	r2, r3
 8005834:	8a7b      	ldrh	r3, [r7, #18]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	4013      	ands	r3, r2
 800583a:	b2da      	uxtb	r2, r3
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1c6      	bne.n	80057f2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800587c:	b480      	push	{r7}
 800587e:	b08b      	sub	sp, #44	; 0x2c
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	2b20      	cmp	r3, #32
 8005890:	d147      	bne.n	8005922 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_UART_Transmit_IT+0x22>
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e040      	b.n	8005924 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2221      	movs	r2, #33	; 0x21
 80058ca:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d4:	d107      	bne.n	80058e6 <HAL_UART_Transmit_IT+0x6a>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a13      	ldr	r2, [pc, #76]	; (8005930 <HAL_UART_Transmit_IT+0xb4>)
 80058e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80058e4:	e002      	b.n	80058ec <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4a12      	ldr	r2, [pc, #72]	; (8005934 <HAL_UART_Transmit_IT+0xb8>)
 80058ea:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	613b      	str	r3, [r7, #16]
   return(result);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	623b      	str	r3, [r7, #32]
 800590c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	69f9      	ldr	r1, [r7, #28]
 8005910:	6a3a      	ldr	r2, [r7, #32]
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	61bb      	str	r3, [r7, #24]
   return(result);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e6      	bne.n	80058ec <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
  }
}
 8005924:	4618      	mov	r0, r3
 8005926:	372c      	adds	r7, #44	; 0x2c
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	08006939 	.word	0x08006939
 8005934:	08006883 	.word	0x08006883

08005938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b0ba      	sub	sp, #232	; 0xe8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800595e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005962:	f640 030f 	movw	r3, #2063	; 0x80f
 8005966:	4013      	ands	r3, r2
 8005968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800596c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d115      	bne.n	80059a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00f      	beq.n	80059a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 82ac 	beq.w	8005eee <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	4798      	blx	r3
      }
      return;
 800599e:	e2a6      	b.n	8005eee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8117 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80059ba:	4b85      	ldr	r3, [pc, #532]	; (8005bd0 <HAL_UART_IRQHandler+0x298>)
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 810a 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d011      	beq.n	80059f4 <HAL_UART_IRQHandler+0xbc>
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2201      	movs	r2, #1
 80059e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ea:	f043 0201 	orr.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d011      	beq.n	8005a24 <HAL_UART_IRQHandler+0xec>
 8005a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2202      	movs	r2, #2
 8005a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d011      	beq.n	8005a54 <HAL_UART_IRQHandler+0x11c>
 8005a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2204      	movs	r2, #4
 8005a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4a:	f043 0202 	orr.w	r2, r3, #2
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d017      	beq.n	8005a90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a86:	f043 0208 	orr.w	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x18a>
 8005a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00c      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8212 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d005      	beq.n	8005b1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d04f      	beq.n	8005bba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fe37 	bl	800678e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	d141      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3308      	adds	r3, #8
 8005b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1d9      	bne.n	8005b2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d013      	beq.n	8005baa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b86:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <HAL_UART_IRQHandler+0x29c>)
 8005b88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fd fd02 	bl	8003598 <HAL_DMA_Abort_IT>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d017      	beq.n	8005bca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	e00f      	b.n	8005bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9b6 	bl	8005f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	e00b      	b.n	8005bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9b2 	bl	8005f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb8:	e007      	b.n	8005bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9ae 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005bc8:	e193      	b.n	8005ef2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bca:	bf00      	nop
    return;
 8005bcc:	e191      	b.n	8005ef2 <HAL_UART_IRQHandler+0x5ba>
 8005bce:	bf00      	nop
 8005bd0:	04000120 	.word	0x04000120
 8005bd4:	08006857 	.word	0x08006857

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	f040 814c 	bne.w	8005e7a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8145 	beq.w	8005e7a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 813e 	beq.w	8005e7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2210      	movs	r2, #16
 8005c04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	f040 80b6 	bne.w	8005d82 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 8165 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c36:	429a      	cmp	r2, r3
 8005c38:	f080 815d 	bcs.w	8005ef6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c50:	f000 8086 	beq.w	8005d60 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1da      	bne.n	8005c54 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e1      	bne.n	8005c9e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3308      	adds	r3, #8
 8005ce0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e3      	bne.n	8005cda <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d30:	f023 0310 	bic.w	r3, r3, #16
 8005d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d42:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e4      	bne.n	8005d20 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fd fbac 	bl	80034b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8d8 	bl	8005f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d80:	e0b9      	b.n	8005ef6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80ab 	beq.w	8005efa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80a6 	beq.w	8005efa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e4      	bne.n	8005dae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	623b      	str	r3, [r7, #32]
   return(result);
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e08:	633a      	str	r2, [r7, #48]	; 0x30
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e3      	bne.n	8005de4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f023 0310 	bic.w	r3, r3, #16
 8005e44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	69b9      	ldr	r1, [r7, #24]
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e4      	bne.n	8005e30 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f85c 	bl	8005f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e78:	e03f      	b.n	8005efa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00e      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x56c>
 8005e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f853 	bl	8005f48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ea2:	e02d      	b.n	8005f00 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00e      	beq.n	8005ece <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01c      	beq.n	8005efe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
    }
    return;
 8005ecc:	e017      	b.n	8005efe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d012      	beq.n	8005f00 <HAL_UART_IRQHandler+0x5c8>
 8005eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00c      	beq.n	8005f00 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fd86 	bl	80069f8 <UART_EndTransmit_IT>
    return;
 8005eec:	e008      	b.n	8005f00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005eee:	bf00      	nop
 8005ef0:	e006      	b.n	8005f00 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005ef2:	bf00      	nop
 8005ef4:	e004      	b.n	8005f00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005ef6:	bf00      	nop
 8005ef8:	e002      	b.n	8005f00 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005efa:	bf00      	nop
 8005efc:	e000      	b.n	8005f00 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005efe:	bf00      	nop
  }

}
 8005f00:	37e8      	adds	r7, #232	; 0xe8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop

08005f08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4ba6      	ldr	r3, [pc, #664]	; (8006220 <UART_SetConfig+0x2c4>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a94      	ldr	r2, [pc, #592]	; (8006224 <UART_SetConfig+0x2c8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d120      	bne.n	800601a <UART_SetConfig+0xbe>
 8005fd8:	4b93      	ldr	r3, [pc, #588]	; (8006228 <UART_SetConfig+0x2cc>)
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d816      	bhi.n	8006014 <UART_SetConfig+0xb8>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x90>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08005ffd 	.word	0x08005ffd
 8005ff0:	08006009 	.word	0x08006009
 8005ff4:	08006003 	.word	0x08006003
 8005ff8:	0800600f 	.word	0x0800600f
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e150      	b.n	80062a4 <UART_SetConfig+0x348>
 8006002:	2302      	movs	r3, #2
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e14d      	b.n	80062a4 <UART_SetConfig+0x348>
 8006008:	2304      	movs	r3, #4
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e14a      	b.n	80062a4 <UART_SetConfig+0x348>
 800600e:	2308      	movs	r3, #8
 8006010:	77fb      	strb	r3, [r7, #31]
 8006012:	e147      	b.n	80062a4 <UART_SetConfig+0x348>
 8006014:	2310      	movs	r3, #16
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	e144      	b.n	80062a4 <UART_SetConfig+0x348>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a83      	ldr	r2, [pc, #524]	; (800622c <UART_SetConfig+0x2d0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d132      	bne.n	800608a <UART_SetConfig+0x12e>
 8006024:	4b80      	ldr	r3, [pc, #512]	; (8006228 <UART_SetConfig+0x2cc>)
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	2b0c      	cmp	r3, #12
 8006030:	d828      	bhi.n	8006084 <UART_SetConfig+0x128>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0xdc>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800606d 	.word	0x0800606d
 800603c:	08006085 	.word	0x08006085
 8006040:	08006085 	.word	0x08006085
 8006044:	08006085 	.word	0x08006085
 8006048:	08006079 	.word	0x08006079
 800604c:	08006085 	.word	0x08006085
 8006050:	08006085 	.word	0x08006085
 8006054:	08006085 	.word	0x08006085
 8006058:	08006073 	.word	0x08006073
 800605c:	08006085 	.word	0x08006085
 8006060:	08006085 	.word	0x08006085
 8006064:	08006085 	.word	0x08006085
 8006068:	0800607f 	.word	0x0800607f
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e118      	b.n	80062a4 <UART_SetConfig+0x348>
 8006072:	2302      	movs	r3, #2
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e115      	b.n	80062a4 <UART_SetConfig+0x348>
 8006078:	2304      	movs	r3, #4
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e112      	b.n	80062a4 <UART_SetConfig+0x348>
 800607e:	2308      	movs	r3, #8
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e10f      	b.n	80062a4 <UART_SetConfig+0x348>
 8006084:	2310      	movs	r3, #16
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e10c      	b.n	80062a4 <UART_SetConfig+0x348>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a68      	ldr	r2, [pc, #416]	; (8006230 <UART_SetConfig+0x2d4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d120      	bne.n	80060d6 <UART_SetConfig+0x17a>
 8006094:	4b64      	ldr	r3, [pc, #400]	; (8006228 <UART_SetConfig+0x2cc>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800609e:	2b30      	cmp	r3, #48	; 0x30
 80060a0:	d013      	beq.n	80060ca <UART_SetConfig+0x16e>
 80060a2:	2b30      	cmp	r3, #48	; 0x30
 80060a4:	d814      	bhi.n	80060d0 <UART_SetConfig+0x174>
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d009      	beq.n	80060be <UART_SetConfig+0x162>
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d810      	bhi.n	80060d0 <UART_SetConfig+0x174>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <UART_SetConfig+0x15c>
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d006      	beq.n	80060c4 <UART_SetConfig+0x168>
 80060b6:	e00b      	b.n	80060d0 <UART_SetConfig+0x174>
 80060b8:	2300      	movs	r3, #0
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e0f2      	b.n	80062a4 <UART_SetConfig+0x348>
 80060be:	2302      	movs	r3, #2
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e0ef      	b.n	80062a4 <UART_SetConfig+0x348>
 80060c4:	2304      	movs	r3, #4
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e0ec      	b.n	80062a4 <UART_SetConfig+0x348>
 80060ca:	2308      	movs	r3, #8
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e0e9      	b.n	80062a4 <UART_SetConfig+0x348>
 80060d0:	2310      	movs	r3, #16
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e0e6      	b.n	80062a4 <UART_SetConfig+0x348>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a56      	ldr	r2, [pc, #344]	; (8006234 <UART_SetConfig+0x2d8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d120      	bne.n	8006122 <UART_SetConfig+0x1c6>
 80060e0:	4b51      	ldr	r3, [pc, #324]	; (8006228 <UART_SetConfig+0x2cc>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060ea:	2bc0      	cmp	r3, #192	; 0xc0
 80060ec:	d013      	beq.n	8006116 <UART_SetConfig+0x1ba>
 80060ee:	2bc0      	cmp	r3, #192	; 0xc0
 80060f0:	d814      	bhi.n	800611c <UART_SetConfig+0x1c0>
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d009      	beq.n	800610a <UART_SetConfig+0x1ae>
 80060f6:	2b80      	cmp	r3, #128	; 0x80
 80060f8:	d810      	bhi.n	800611c <UART_SetConfig+0x1c0>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <UART_SetConfig+0x1a8>
 80060fe:	2b40      	cmp	r3, #64	; 0x40
 8006100:	d006      	beq.n	8006110 <UART_SetConfig+0x1b4>
 8006102:	e00b      	b.n	800611c <UART_SetConfig+0x1c0>
 8006104:	2300      	movs	r3, #0
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e0cc      	b.n	80062a4 <UART_SetConfig+0x348>
 800610a:	2302      	movs	r3, #2
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e0c9      	b.n	80062a4 <UART_SetConfig+0x348>
 8006110:	2304      	movs	r3, #4
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e0c6      	b.n	80062a4 <UART_SetConfig+0x348>
 8006116:	2308      	movs	r3, #8
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e0c3      	b.n	80062a4 <UART_SetConfig+0x348>
 800611c:	2310      	movs	r3, #16
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e0c0      	b.n	80062a4 <UART_SetConfig+0x348>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a44      	ldr	r2, [pc, #272]	; (8006238 <UART_SetConfig+0x2dc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d125      	bne.n	8006178 <UART_SetConfig+0x21c>
 800612c:	4b3e      	ldr	r3, [pc, #248]	; (8006228 <UART_SetConfig+0x2cc>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800613a:	d017      	beq.n	800616c <UART_SetConfig+0x210>
 800613c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006140:	d817      	bhi.n	8006172 <UART_SetConfig+0x216>
 8006142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006146:	d00b      	beq.n	8006160 <UART_SetConfig+0x204>
 8006148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614c:	d811      	bhi.n	8006172 <UART_SetConfig+0x216>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <UART_SetConfig+0x1fe>
 8006152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006156:	d006      	beq.n	8006166 <UART_SetConfig+0x20a>
 8006158:	e00b      	b.n	8006172 <UART_SetConfig+0x216>
 800615a:	2300      	movs	r3, #0
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e0a1      	b.n	80062a4 <UART_SetConfig+0x348>
 8006160:	2302      	movs	r3, #2
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e09e      	b.n	80062a4 <UART_SetConfig+0x348>
 8006166:	2304      	movs	r3, #4
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e09b      	b.n	80062a4 <UART_SetConfig+0x348>
 800616c:	2308      	movs	r3, #8
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e098      	b.n	80062a4 <UART_SetConfig+0x348>
 8006172:	2310      	movs	r3, #16
 8006174:	77fb      	strb	r3, [r7, #31]
 8006176:	e095      	b.n	80062a4 <UART_SetConfig+0x348>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2f      	ldr	r2, [pc, #188]	; (800623c <UART_SetConfig+0x2e0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d125      	bne.n	80061ce <UART_SetConfig+0x272>
 8006182:	4b29      	ldr	r3, [pc, #164]	; (8006228 <UART_SetConfig+0x2cc>)
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800618c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006190:	d017      	beq.n	80061c2 <UART_SetConfig+0x266>
 8006192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006196:	d817      	bhi.n	80061c8 <UART_SetConfig+0x26c>
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619c:	d00b      	beq.n	80061b6 <UART_SetConfig+0x25a>
 800619e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a2:	d811      	bhi.n	80061c8 <UART_SetConfig+0x26c>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <UART_SetConfig+0x254>
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ac:	d006      	beq.n	80061bc <UART_SetConfig+0x260>
 80061ae:	e00b      	b.n	80061c8 <UART_SetConfig+0x26c>
 80061b0:	2301      	movs	r3, #1
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e076      	b.n	80062a4 <UART_SetConfig+0x348>
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e073      	b.n	80062a4 <UART_SetConfig+0x348>
 80061bc:	2304      	movs	r3, #4
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e070      	b.n	80062a4 <UART_SetConfig+0x348>
 80061c2:	2308      	movs	r3, #8
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e06d      	b.n	80062a4 <UART_SetConfig+0x348>
 80061c8:	2310      	movs	r3, #16
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e06a      	b.n	80062a4 <UART_SetConfig+0x348>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <UART_SetConfig+0x2e4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d138      	bne.n	800624a <UART_SetConfig+0x2ee>
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <UART_SetConfig+0x2cc>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061e6:	d017      	beq.n	8006218 <UART_SetConfig+0x2bc>
 80061e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061ec:	d82a      	bhi.n	8006244 <UART_SetConfig+0x2e8>
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f2:	d00b      	beq.n	800620c <UART_SetConfig+0x2b0>
 80061f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f8:	d824      	bhi.n	8006244 <UART_SetConfig+0x2e8>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <UART_SetConfig+0x2aa>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d006      	beq.n	8006212 <UART_SetConfig+0x2b6>
 8006204:	e01e      	b.n	8006244 <UART_SetConfig+0x2e8>
 8006206:	2300      	movs	r3, #0
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e04b      	b.n	80062a4 <UART_SetConfig+0x348>
 800620c:	2302      	movs	r3, #2
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e048      	b.n	80062a4 <UART_SetConfig+0x348>
 8006212:	2304      	movs	r3, #4
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e045      	b.n	80062a4 <UART_SetConfig+0x348>
 8006218:	2308      	movs	r3, #8
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e042      	b.n	80062a4 <UART_SetConfig+0x348>
 800621e:	bf00      	nop
 8006220:	efff69f3 	.word	0xefff69f3
 8006224:	40011000 	.word	0x40011000
 8006228:	40023800 	.word	0x40023800
 800622c:	40004400 	.word	0x40004400
 8006230:	40004800 	.word	0x40004800
 8006234:	40004c00 	.word	0x40004c00
 8006238:	40005000 	.word	0x40005000
 800623c:	40011400 	.word	0x40011400
 8006240:	40007800 	.word	0x40007800
 8006244:	2310      	movs	r3, #16
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e02c      	b.n	80062a4 <UART_SetConfig+0x348>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a72      	ldr	r2, [pc, #456]	; (8006418 <UART_SetConfig+0x4bc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d125      	bne.n	80062a0 <UART_SetConfig+0x344>
 8006254:	4b71      	ldr	r3, [pc, #452]	; (800641c <UART_SetConfig+0x4c0>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800625e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006262:	d017      	beq.n	8006294 <UART_SetConfig+0x338>
 8006264:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006268:	d817      	bhi.n	800629a <UART_SetConfig+0x33e>
 800626a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800626e:	d00b      	beq.n	8006288 <UART_SetConfig+0x32c>
 8006270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006274:	d811      	bhi.n	800629a <UART_SetConfig+0x33e>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <UART_SetConfig+0x326>
 800627a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800627e:	d006      	beq.n	800628e <UART_SetConfig+0x332>
 8006280:	e00b      	b.n	800629a <UART_SetConfig+0x33e>
 8006282:	2300      	movs	r3, #0
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e00d      	b.n	80062a4 <UART_SetConfig+0x348>
 8006288:	2302      	movs	r3, #2
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e00a      	b.n	80062a4 <UART_SetConfig+0x348>
 800628e:	2304      	movs	r3, #4
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e007      	b.n	80062a4 <UART_SetConfig+0x348>
 8006294:	2308      	movs	r3, #8
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e004      	b.n	80062a4 <UART_SetConfig+0x348>
 800629a:	2310      	movs	r3, #16
 800629c:	77fb      	strb	r3, [r7, #31]
 800629e:	e001      	b.n	80062a4 <UART_SetConfig+0x348>
 80062a0:	2310      	movs	r3, #16
 80062a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ac:	d15b      	bne.n	8006366 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d828      	bhi.n	8006306 <UART_SetConfig+0x3aa>
 80062b4:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <UART_SetConfig+0x360>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	08006307 	.word	0x08006307
 80062cc:	080062f7 	.word	0x080062f7
 80062d0:	08006307 	.word	0x08006307
 80062d4:	08006307 	.word	0x08006307
 80062d8:	08006307 	.word	0x08006307
 80062dc:	080062ff 	.word	0x080062ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e0:	f7fe f9b0 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 80062e4:	61b8      	str	r0, [r7, #24]
        break;
 80062e6:	e013      	b.n	8006310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e8:	f7fe f9c0 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 80062ec:	61b8      	str	r0, [r7, #24]
        break;
 80062ee:	e00f      	b.n	8006310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f0:	4b4b      	ldr	r3, [pc, #300]	; (8006420 <UART_SetConfig+0x4c4>)
 80062f2:	61bb      	str	r3, [r7, #24]
        break;
 80062f4:	e00c      	b.n	8006310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f6:	f7fe f893 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80062fa:	61b8      	str	r0, [r7, #24]
        break;
 80062fc:	e008      	b.n	8006310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006302:	61bb      	str	r3, [r7, #24]
        break;
 8006304:	e004      	b.n	8006310 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	77bb      	strb	r3, [r7, #30]
        break;
 800630e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d074      	beq.n	8006400 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	005a      	lsls	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	441a      	add	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d916      	bls.n	8006360 <UART_SetConfig+0x404>
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d212      	bcs.n	8006360 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f023 030f 	bic.w	r3, r3, #15
 8006342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	b29b      	uxth	r3, r3
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	b29a      	uxth	r2, r3
 8006350:	89fb      	ldrh	r3, [r7, #14]
 8006352:	4313      	orrs	r3, r2
 8006354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	89fa      	ldrh	r2, [r7, #14]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	e04f      	b.n	8006400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	77bb      	strb	r3, [r7, #30]
 8006364:	e04c      	b.n	8006400 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006366:	7ffb      	ldrb	r3, [r7, #31]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d828      	bhi.n	80063be <UART_SetConfig+0x462>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <UART_SetConfig+0x418>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006399 	.word	0x08006399
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063a9 	.word	0x080063a9
 8006380:	080063bf 	.word	0x080063bf
 8006384:	080063af 	.word	0x080063af
 8006388:	080063bf 	.word	0x080063bf
 800638c:	080063bf 	.word	0x080063bf
 8006390:	080063bf 	.word	0x080063bf
 8006394:	080063b7 	.word	0x080063b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006398:	f7fe f954 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 800639c:	61b8      	str	r0, [r7, #24]
        break;
 800639e:	e013      	b.n	80063c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a0:	f7fe f964 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 80063a4:	61b8      	str	r0, [r7, #24]
        break;
 80063a6:	e00f      	b.n	80063c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a8:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <UART_SetConfig+0x4c4>)
 80063aa:	61bb      	str	r3, [r7, #24]
        break;
 80063ac:	e00c      	b.n	80063c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ae:	f7fe f837 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80063b2:	61b8      	str	r0, [r7, #24]
        break;
 80063b4:	e008      	b.n	80063c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ba:	61bb      	str	r3, [r7, #24]
        break;
 80063bc:	e004      	b.n	80063c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	77bb      	strb	r3, [r7, #30]
        break;
 80063c6:	bf00      	nop
    }

    if (pclk != 0U)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d018      	beq.n	8006400 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	085a      	lsrs	r2, r3, #1
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	441a      	add	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b0f      	cmp	r3, #15
 80063e6:	d909      	bls.n	80063fc <UART_SetConfig+0x4a0>
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ee:	d205      	bcs.n	80063fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e001      	b.n	8006400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800640c:	7fbb      	ldrb	r3, [r7, #30]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40007c00 	.word	0x40007c00
 800641c:	40023800 	.word	0x40023800
 8006420:	00f42400 	.word	0x00f42400

08006424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01a      	beq.n	800653a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006522:	d10a      	bne.n	800653a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	605a      	str	r2, [r3, #4]
  }
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af02      	add	r7, sp, #8
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006578:	f7fc f908 	bl	800278c <HAL_GetTick>
 800657c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b08      	cmp	r3, #8
 800658a:	d10e      	bne.n	80065aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800658c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f831 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e027      	b.n	80065fa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d10e      	bne.n	80065d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f81b 	bl	8006602 <UART_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e011      	b.n	80065fa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b09c      	sub	sp, #112	; 0x70
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	603b      	str	r3, [r7, #0]
 800660e:	4613      	mov	r3, r2
 8006610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006612:	e0a7      	b.n	8006764 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	f000 80a3 	beq.w	8006764 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661e:	f7fc f8b5 	bl	800278c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800662a:	429a      	cmp	r2, r3
 800662c:	d302      	bcc.n	8006634 <UART_WaitOnFlagUntilTimeout+0x32>
 800662e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006630:	2b00      	cmp	r3, #0
 8006632:	d13f      	bne.n	80066b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006648:	667b      	str	r3, [r7, #100]	; 0x64
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006654:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e6      	bne.n	8006634 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	663b      	str	r3, [r7, #96]	; 0x60
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006686:	64ba      	str	r2, [r7, #72]	; 0x48
 8006688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800668c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e068      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d050      	beq.n	8006764 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d0:	d148      	bne.n	8006764 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
 80066fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e6      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3308      	adds	r3, #8
 8006714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	613b      	str	r3, [r7, #16]
   return(result);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f023 0301 	bic.w	r3, r3, #1
 8006724:	66bb      	str	r3, [r7, #104]	; 0x68
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3308      	adds	r3, #8
 800672c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800672e:	623a      	str	r2, [r7, #32]
 8006730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	69f9      	ldr	r1, [r7, #28]
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	61bb      	str	r3, [r7, #24]
   return(result);
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e5      	bne.n	800670e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e010      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4013      	ands	r3, r2
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	429a      	cmp	r2, r3
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	429a      	cmp	r2, r3
 8006780:	f43f af48 	beq.w	8006614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3770      	adds	r7, #112	; 0x70
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800678e:	b480      	push	{r7}
 8006790:	b095      	sub	sp, #84	; 0x54
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b4:	643b      	str	r3, [r7, #64]	; 0x40
 80067b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e6      	bne.n	8006796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3308      	adds	r3, #8
 80067e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e5      	bne.n	80067c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006800:	2b01      	cmp	r3, #1
 8006802:	d118      	bne.n	8006836 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	60bb      	str	r3, [r7, #8]
   return(result);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f023 0310 	bic.w	r3, r3, #16
 8006818:	647b      	str	r3, [r7, #68]	; 0x44
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6979      	ldr	r1, [r7, #20]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	613b      	str	r3, [r7, #16]
   return(result);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e6      	bne.n	8006804 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	669a      	str	r2, [r3, #104]	; 0x68
}
 800684a:	bf00      	nop
 800684c:	3754      	adds	r7, #84	; 0x54
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff fb51 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006882:	b480      	push	{r7}
 8006884:	b08f      	sub	sp, #60	; 0x3c
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800688e:	2b21      	cmp	r3, #33	; 0x21
 8006890:	d14c      	bne.n	800692c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d132      	bne.n	8006904 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068be:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e6      	bne.n	800689e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068e4:	633b      	str	r3, [r7, #48]	; 0x30
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6979      	ldr	r1, [r7, #20]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	613b      	str	r3, [r7, #16]
   return(result);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e6      	bne.n	80068d0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006902:	e013      	b.n	800692c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800692c:	bf00      	nop
 800692e:	373c      	adds	r7, #60	; 0x3c
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b091      	sub	sp, #68	; 0x44
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006944:	2b21      	cmp	r3, #33	; 0x21
 8006946:	d151      	bne.n	80069ec <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d132      	bne.n	80069ba <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	623b      	str	r3, [r7, #32]
   return(result);
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006968:	63bb      	str	r3, [r7, #56]	; 0x38
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
 8006974:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60fb      	str	r3, [r7, #12]
   return(result);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800699a:	637b      	str	r3, [r7, #52]	; 0x34
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	61fb      	str	r3, [r7, #28]
 80069a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	69b9      	ldr	r1, [r7, #24]
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	617b      	str	r3, [r7, #20]
   return(result);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e6      	bne.n	8006986 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80069b8:	e018      	b.n	80069ec <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ce:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80069ec:	bf00      	nop
 80069ee:	3744      	adds	r7, #68	; 0x44
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6979      	ldr	r1, [r7, #20]
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e6      	bne.n	8006a00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fa62 	bl	8005f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a44:	bf00      	nop
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	f107 001c 	add.w	r0, r7, #28
 8006a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d120      	bne.n	8006aa6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <USB_CoreInit+0xac>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d105      	bne.n	8006a9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa96 	bl	8006fcc <USB_CoreReset>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]
 8006aa4:	e010      	b.n	8006ac8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa8a 	bl	8006fcc <USB_CoreReset>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d10b      	bne.n	8006ae6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f043 0206 	orr.w	r2, r3, #6
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f043 0220 	orr.w	r2, r3, #32
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006af2:	b004      	add	sp, #16
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	ffbdffbf 	.word	0xffbdffbf

08006afc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f023 0201 	bic.w	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	460b      	mov	r3, r1
 8006b28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d115      	bne.n	8006b6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f7fb fe29 	bl	80027a4 <HAL_Delay>
      ms++;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3301      	adds	r3, #1
 8006b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa29 	bl	8006fb0 <USB_GetMode>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d01e      	beq.n	8006ba2 <USB_SetCurrentMode+0x84>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b31      	cmp	r3, #49	; 0x31
 8006b68:	d9f0      	bls.n	8006b4c <USB_SetCurrentMode+0x2e>
 8006b6a:	e01a      	b.n	8006ba2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d115      	bne.n	8006b9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b7e:	2001      	movs	r0, #1
 8006b80:	f7fb fe10 	bl	80027a4 <HAL_Delay>
      ms++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa10 	bl	8006fb0 <USB_GetMode>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <USB_SetCurrentMode+0x84>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b31      	cmp	r3, #49	; 0x31
 8006b9a:	d9f0      	bls.n	8006b7e <USB_SetCurrentMode+0x60>
 8006b9c:	e001      	b.n	8006ba2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e005      	b.n	8006bae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b32      	cmp	r3, #50	; 0x32
 8006ba6:	d101      	bne.n	8006bac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bb8:	b084      	sub	sp, #16
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	e009      	b.n	8006bec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3340      	adds	r3, #64	; 0x40
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	2200      	movs	r2, #0
 8006be4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	3301      	adds	r3, #1
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b0e      	cmp	r3, #14
 8006bf0:	d9f2      	bls.n	8006bd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11c      	bne.n	8006c32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c06:	f043 0302 	orr.w	r3, r3, #2
 8006c0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	e005      	b.n	8006c3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c44:	461a      	mov	r2, r3
 8006c46:	2300      	movs	r3, #0
 8006c48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c50:	4619      	mov	r1, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c58:	461a      	mov	r2, r3
 8006c5a:	680b      	ldr	r3, [r1, #0]
 8006c5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d10c      	bne.n	8006c7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f965 	bl	8006f3c <USB_SetDevSpeed>
 8006c72:	e008      	b.n	8006c86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c74:	2101      	movs	r1, #1
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f960 	bl	8006f3c <USB_SetDevSpeed>
 8006c7c:	e003      	b.n	8006c86 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c7e:	2103      	movs	r1, #3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f95b 	bl	8006f3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c86:	2110      	movs	r1, #16
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f8f3 	bl	8006e74 <USB_FlushTxFifo>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f91f 	bl	8006edc <USB_FlushRxFifo>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	461a      	mov	r2, r3
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	e043      	b.n	8006d5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce8:	d118      	bne.n	8006d1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e013      	b.n	8006d2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	461a      	mov	r2, r3
 8006d14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	e008      	b.n	8006d2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	3301      	adds	r3, #1
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d3b7      	bcc.n	8006cd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d62:	2300      	movs	r3, #0
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	e043      	b.n	8006df0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d7e:	d118      	bne.n	8006db2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d92:	461a      	mov	r2, r3
 8006d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	e013      	b.n	8006dc4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	461a      	mov	r2, r3
 8006daa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	e008      	b.n	8006dc4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	461a      	mov	r2, r3
 8006de4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006de8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3301      	adds	r3, #1
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d3b7      	bcc.n	8006d68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d105      	bne.n	8006e2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f043 0210 	orr.w	r2, r3, #16
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <USB_DevInit+0x2b4>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f043 0208 	orr.w	r2, r3, #8
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d105      	bne.n	8006e5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699a      	ldr	r2, [r3, #24]
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <USB_DevInit+0x2b8>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e68:	b004      	add	sp, #16
 8006e6a:	4770      	bx	lr
 8006e6c:	803c3800 	.word	0x803c3800
 8006e70:	40000004 	.word	0x40000004

08006e74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <USB_FlushTxFifo+0x64>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d901      	bls.n	8006e94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e01b      	b.n	8006ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	daf2      	bge.n	8006e82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	019b      	lsls	r3, r3, #6
 8006ea4:	f043 0220 	orr.w	r2, r3, #32
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <USB_FlushTxFifo+0x64>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e006      	b.n	8006ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d0f0      	beq.n	8006eac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	00030d40 	.word	0x00030d40

08006edc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4a11      	ldr	r2, [pc, #68]	; (8006f38 <USB_FlushRxFifo+0x5c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d901      	bls.n	8006efa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e018      	b.n	8006f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	daf2      	bge.n	8006ee8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2210      	movs	r2, #16
 8006f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4a08      	ldr	r2, [pc, #32]	; (8006f38 <USB_FlushRxFifo+0x5c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e006      	b.n	8006f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b10      	cmp	r3, #16
 8006f28:	d0f0      	beq.n	8006f0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	00030d40 	.word	0x00030d40

08006f3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f88:	f023 0303 	bic.w	r3, r3, #3
 8006f8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9c:	f043 0302 	orr.w	r3, r3, #2
 8006fa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a13      	ldr	r2, [pc, #76]	; (8007030 <USB_CoreReset+0x64>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d901      	bls.n	8006fea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e01b      	b.n	8007022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	daf2      	bge.n	8006fd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f043 0201 	orr.w	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3301      	adds	r3, #1
 8007006:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4a09      	ldr	r2, [pc, #36]	; (8007030 <USB_CoreReset+0x64>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d901      	bls.n	8007014 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e006      	b.n	8007022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b01      	cmp	r3, #1
 800701e:	d0f0      	beq.n	8007002 <USB_CoreReset+0x36>

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	00030d40 	.word	0x00030d40

08007034 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800704a:	f3ef 8305 	mrs	r3, IPSR
 800704e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007050:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10f      	bne.n	8007076 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007056:	f3ef 8310 	mrs	r3, PRIMASK
 800705a:	607b      	str	r3, [r7, #4]
  return(result);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d105      	bne.n	800706e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007062:	f3ef 8311 	mrs	r3, BASEPRI
 8007066:	603b      	str	r3, [r7, #0]
  return(result);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <osKernelInitialize+0x3a>
 800706e:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <osKernelInitialize+0x64>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d103      	bne.n	800707e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007076:	f06f 0305 	mvn.w	r3, #5
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e00c      	b.n	8007098 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800707e:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <osKernelInitialize+0x64>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007086:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <osKernelInitialize+0x64>)
 8007088:	2201      	movs	r2, #1
 800708a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e002      	b.n	8007098 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007092:	f04f 33ff 	mov.w	r3, #4294967295
 8007096:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007098:	68fb      	ldr	r3, [r7, #12]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	200009c0 	.word	0x200009c0

080070ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070b2:	f3ef 8305 	mrs	r3, IPSR
 80070b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80070b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10f      	bne.n	80070de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070be:	f3ef 8310 	mrs	r3, PRIMASK
 80070c2:	607b      	str	r3, [r7, #4]
  return(result);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070ca:	f3ef 8311 	mrs	r3, BASEPRI
 80070ce:	603b      	str	r3, [r7, #0]
  return(result);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <osKernelStart+0x3a>
 80070d6:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <osKernelStart+0x68>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d103      	bne.n	80070e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80070de:	f06f 0305 	mvn.w	r3, #5
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e010      	b.n	8007108 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070e6:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <osKernelStart+0x68>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d109      	bne.n	8007102 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80070ee:	f7ff ffa1 	bl	8007034 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80070f2:	4b08      	ldr	r3, [pc, #32]	; (8007114 <osKernelStart+0x68>)
 80070f4:	2202      	movs	r2, #2
 80070f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80070f8:	f001 fa3e 	bl	8008578 <vTaskStartScheduler>
      stat = osOK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e002      	b.n	8007108 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007102:	f04f 33ff 	mov.w	r3, #4294967295
 8007106:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007108:	68fb      	ldr	r3, [r7, #12]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	200009c0 	.word	0x200009c0

08007118 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b090      	sub	sp, #64	; 0x40
 800711c:	af04      	add	r7, sp, #16
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007128:	f3ef 8305 	mrs	r3, IPSR
 800712c:	61fb      	str	r3, [r7, #28]
  return(result);
 800712e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 808f 	bne.w	8007254 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007136:	f3ef 8310 	mrs	r3, PRIMASK
 800713a:	61bb      	str	r3, [r7, #24]
  return(result);
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007142:	f3ef 8311 	mrs	r3, BASEPRI
 8007146:	617b      	str	r3, [r7, #20]
  return(result);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <osThreadNew+0x3e>
 800714e:	4b44      	ldr	r3, [pc, #272]	; (8007260 <osThreadNew+0x148>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b02      	cmp	r3, #2
 8007154:	d07e      	beq.n	8007254 <osThreadNew+0x13c>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d07b      	beq.n	8007254 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007160:	2318      	movs	r3, #24
 8007162:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007168:	f04f 33ff 	mov.w	r3, #4294967295
 800716c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d045      	beq.n	8007200 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <osThreadNew+0x6a>
        name = attr->name;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d008      	beq.n	80071a8 <osThreadNew+0x90>
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	2b38      	cmp	r3, #56	; 0x38
 800719a:	d805      	bhi.n	80071a8 <osThreadNew+0x90>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <osThreadNew+0x94>
        return (NULL);
 80071a8:	2300      	movs	r3, #0
 80071aa:	e054      	b.n	8007256 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	089b      	lsrs	r3, r3, #2
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <osThreadNew+0xca>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2ba7      	cmp	r3, #167	; 0xa7
 80071ca:	d90a      	bls.n	80071e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <osThreadNew+0xca>
        mem = 1;
 80071dc:	2301      	movs	r3, #1
 80071de:	623b      	str	r3, [r7, #32]
 80071e0:	e010      	b.n	8007204 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10c      	bne.n	8007204 <osThreadNew+0xec>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d108      	bne.n	8007204 <osThreadNew+0xec>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <osThreadNew+0xec>
          mem = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	623b      	str	r3, [r7, #32]
 80071fe:	e001      	b.n	8007204 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d110      	bne.n	800722c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007212:	9202      	str	r2, [sp, #8]
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800721e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fea7 	bl	8007f74 <xTaskCreateStatic>
 8007226:	4603      	mov	r3, r0
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	e013      	b.n	8007254 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d110      	bne.n	8007254 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	b29a      	uxth	r2, r3
 8007236:	f107 0310 	add.w	r3, r7, #16
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fef8 	bl	800803a <xTaskCreate>
 800724a:	4603      	mov	r3, r0
 800724c:	2b01      	cmp	r3, #1
 800724e:	d001      	beq.n	8007254 <osThreadNew+0x13c>
          hTask = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007254:	693b      	ldr	r3, [r7, #16]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3730      	adds	r7, #48	; 0x30
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	200009c0 	.word	0x200009c0

08007264 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007270:	f3ef 8305 	mrs	r3, IPSR
 8007274:	617b      	str	r3, [r7, #20]
  return(result);
 8007276:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10f      	bne.n	800729c <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727c:	f3ef 8310 	mrs	r3, PRIMASK
 8007280:	613b      	str	r3, [r7, #16]
  return(result);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007288:	f3ef 8311 	mrs	r3, BASEPRI
 800728c:	60fb      	str	r3, [r7, #12]
  return(result);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <osThreadSuspend+0x40>
 8007294:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <osThreadSuspend+0x64>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d103      	bne.n	80072a4 <osThreadSuspend+0x40>
    stat = osErrorISR;
 800729c:	f06f 0305 	mvn.w	r3, #5
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	e00b      	b.n	80072bc <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80072aa:	f06f 0303 	mvn.w	r3, #3
 80072ae:	61fb      	str	r3, [r7, #28]
 80072b0:	e004      	b.n	80072bc <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80072b6:	69b8      	ldr	r0, [r7, #24]
 80072b8:	f001 f852 	bl	8008360 <vTaskSuspend>
  }

  return (stat);
 80072bc:	69fb      	ldr	r3, [r7, #28]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	200009c0 	.word	0x200009c0

080072cc <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072d8:	f3ef 8305 	mrs	r3, IPSR
 80072dc:	617b      	str	r3, [r7, #20]
  return(result);
 80072de:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10f      	bne.n	8007304 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e4:	f3ef 8310 	mrs	r3, PRIMASK
 80072e8:	613b      	str	r3, [r7, #16]
  return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d105      	bne.n	80072fc <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072f0:	f3ef 8311 	mrs	r3, BASEPRI
 80072f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d007      	beq.n	800730c <osThreadResume+0x40>
 80072fc:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <osThreadResume+0x64>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d103      	bne.n	800730c <osThreadResume+0x40>
    stat = osErrorISR;
 8007304:	f06f 0305 	mvn.w	r3, #5
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	e00b      	b.n	8007324 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <osThreadResume+0x4e>
    stat = osErrorParameter;
 8007312:	f06f 0303 	mvn.w	r3, #3
 8007316:	61fb      	str	r3, [r7, #28]
 8007318:	e004      	b.n	8007324 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800731e:	69b8      	ldr	r0, [r7, #24]
 8007320:	f001 f8ca 	bl	80084b8 <vTaskResume>
  }

  return (stat);
 8007324:	69fb      	ldr	r3, [r7, #28]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	200009c0 	.word	0x200009c0

08007334 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733c:	f3ef 8305 	mrs	r3, IPSR
 8007340:	613b      	str	r3, [r7, #16]
  return(result);
 8007342:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10f      	bne.n	8007368 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007348:	f3ef 8310 	mrs	r3, PRIMASK
 800734c:	60fb      	str	r3, [r7, #12]
  return(result);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007354:	f3ef 8311 	mrs	r3, BASEPRI
 8007358:	60bb      	str	r3, [r7, #8]
  return(result);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d007      	beq.n	8007370 <osDelay+0x3c>
 8007360:	4b0a      	ldr	r3, [pc, #40]	; (800738c <osDelay+0x58>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d103      	bne.n	8007370 <osDelay+0x3c>
    stat = osErrorISR;
 8007368:	f06f 0305 	mvn.w	r3, #5
 800736c:	617b      	str	r3, [r7, #20]
 800736e:	e007      	b.n	8007380 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <osDelay+0x4c>
      vTaskDelay(ticks);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 ffba 	bl	80082f4 <vTaskDelay>
    }
  }

  return (stat);
 8007380:	697b      	ldr	r3, [r7, #20]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	200009c0 	.word	0x200009c0

08007390 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4a07      	ldr	r2, [pc, #28]	; (80073bc <vApplicationGetIdleTaskMemory+0x2c>)
 80073a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	4a06      	ldr	r2, [pc, #24]	; (80073c0 <vApplicationGetIdleTaskMemory+0x30>)
 80073a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2280      	movs	r2, #128	; 0x80
 80073ac:	601a      	str	r2, [r3, #0]
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	200009c4 	.word	0x200009c4
 80073c0:	20000a6c 	.word	0x20000a6c

080073c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4a07      	ldr	r2, [pc, #28]	; (80073f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80073d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4a06      	ldr	r2, [pc, #24]	; (80073f4 <vApplicationGetTimerTaskMemory+0x30>)
 80073da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073e2:	601a      	str	r2, [r3, #0]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	20000c6c 	.word	0x20000c6c
 80073f4:	20000d14 	.word	0x20000d14

080073f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f103 0208 	add.w	r2, r3, #8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f04f 32ff 	mov.w	r2, #4294967295
 8007410:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f103 0208 	add.w	r2, r3, #8
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f103 0208 	add.w	r2, r3, #8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
}
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b0:	d103      	bne.n	80074ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	e00c      	b.n	80074d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3308      	adds	r3, #8
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	e002      	b.n	80074c8 <vListInsert+0x2e>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d2f6      	bcs.n	80074c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	601a      	str	r2, [r3, #0]
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6892      	ldr	r2, [r2, #8]
 8007522:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6852      	ldr	r2, [r2, #4]
 800752c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d103      	bne.n	8007540 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	1e5a      	subs	r2, r3, #1
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10c      	bne.n	800758e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	b672      	cpsid	i
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	b662      	cpsie	i
 8007588:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800758e:	f002 f9b5 	bl	80098fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800759e:	fb01 f303 	mul.w	r3, r1, r3
 80075a2:	441a      	add	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075be:	3b01      	subs	r3, #1
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	441a      	add	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	22ff      	movs	r2, #255	; 0xff
 80075d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	22ff      	movs	r2, #255	; 0xff
 80075da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d114      	bne.n	800760e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01a      	beq.n	8007622 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3310      	adds	r3, #16
 80075f0:	4618      	mov	r0, r3
 80075f2:	f001 fa69 	bl	8008ac8 <xTaskRemoveFromEventList>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d012      	beq.n	8007622 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075fc:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <xQueueGenericReset+0xd0>)
 80075fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	e009      	b.n	8007622 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3310      	adds	r3, #16
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff fef0 	bl	80073f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3324      	adds	r3, #36	; 0x24
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff feeb 	bl	80073f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007622:	f002 f99f 	bl	8009964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007626:	2301      	movs	r3, #1
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08e      	sub	sp, #56	; 0x38
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10c      	bne.n	8007662 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	b672      	cpsid	i
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	b662      	cpsie	i
 800765c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10c      	bne.n	8007682 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	b672      	cpsid	i
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	b662      	cpsie	i
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800767e:	bf00      	nop
 8007680:	e7fe      	b.n	8007680 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <xQueueGenericCreateStatic+0x5a>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <xQueueGenericCreateStatic+0x5e>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <xQueueGenericCreateStatic+0x60>
 8007692:	2300      	movs	r3, #0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10c      	bne.n	80076b2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	b672      	cpsid	i
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	b662      	cpsie	i
 80076ac:	623b      	str	r3, [r7, #32]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d102      	bne.n	80076be <xQueueGenericCreateStatic+0x8a>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <xQueueGenericCreateStatic+0x8e>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <xQueueGenericCreateStatic+0x90>
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10c      	bne.n	80076e2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	b672      	cpsid	i
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	b662      	cpsie	i
 80076dc:	61fb      	str	r3, [r7, #28]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076e2:	2350      	movs	r3, #80	; 0x50
 80076e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b50      	cmp	r3, #80	; 0x50
 80076ea:	d00c      	beq.n	8007706 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	b672      	cpsid	i
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	b662      	cpsie	i
 8007700:	61bb      	str	r3, [r7, #24]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007706:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800771a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f805 	bl	8007738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007730:	4618      	mov	r0, r3
 8007732:	3730      	adds	r7, #48	; 0x30
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e002      	b.n	800775a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007766:	2101      	movs	r1, #1
 8007768:	69b8      	ldr	r0, [r7, #24]
 800776a:	f7ff fef9 	bl	8007560 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08e      	sub	sp, #56	; 0x38
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10c      	bne.n	80077b6 <xQueueGenericSend+0x36>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	b672      	cpsid	i
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	b662      	cpsie	i
 80077b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <xQueueGenericSend+0x44>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <xQueueGenericSend+0x48>
 80077c4:	2301      	movs	r3, #1
 80077c6:	e000      	b.n	80077ca <xQueueGenericSend+0x4a>
 80077c8:	2300      	movs	r3, #0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10c      	bne.n	80077e8 <xQueueGenericSend+0x68>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	b672      	cpsid	i
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	b662      	cpsie	i
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d103      	bne.n	80077f6 <xQueueGenericSend+0x76>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <xQueueGenericSend+0x7a>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <xQueueGenericSend+0x7c>
 80077fa:	2300      	movs	r3, #0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10c      	bne.n	800781a <xQueueGenericSend+0x9a>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	b672      	cpsid	i
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	b662      	cpsie	i
 8007814:	623b      	str	r3, [r7, #32]
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800781a:	f001 fb1f 	bl	8008e5c <xTaskGetSchedulerState>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <xQueueGenericSend+0xaa>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <xQueueGenericSend+0xae>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <xQueueGenericSend+0xb0>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10c      	bne.n	800784e <xQueueGenericSend+0xce>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	b672      	cpsid	i
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	b662      	cpsie	i
 8007848:	61fb      	str	r3, [r7, #28]
}
 800784a:	bf00      	nop
 800784c:	e7fe      	b.n	800784c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800784e:	f002 f855 	bl	80098fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	429a      	cmp	r2, r3
 800785c:	d302      	bcc.n	8007864 <xQueueGenericSend+0xe4>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d129      	bne.n	80078b8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800786a:	f000 fa15 	bl	8007c98 <prvCopyDataToQueue>
 800786e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	2b00      	cmp	r3, #0
 8007876:	d010      	beq.n	800789a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	3324      	adds	r3, #36	; 0x24
 800787c:	4618      	mov	r0, r3
 800787e:	f001 f923 	bl	8008ac8 <xTaskRemoveFromEventList>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d013      	beq.n	80078b0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007888:	4b3f      	ldr	r3, [pc, #252]	; (8007988 <xQueueGenericSend+0x208>)
 800788a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	e00a      	b.n	80078b0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d007      	beq.n	80078b0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078a0:	4b39      	ldr	r3, [pc, #228]	; (8007988 <xQueueGenericSend+0x208>)
 80078a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078b0:	f002 f858 	bl	8009964 <vPortExitCritical>
				return pdPASS;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e063      	b.n	8007980 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078be:	f002 f851 	bl	8009964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e05c      	b.n	8007980 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078cc:	f107 0314 	add.w	r3, r7, #20
 80078d0:	4618      	mov	r0, r3
 80078d2:	f001 f95f 	bl	8008b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078d6:	2301      	movs	r3, #1
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078da:	f002 f843 	bl	8009964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078de:	f000 febf 	bl	8008660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078e2:	f002 f80b 	bl	80098fc <vPortEnterCritical>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ec:	b25b      	sxtb	r3, r3
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d103      	bne.n	80078fc <xQueueGenericSend+0x17c>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007902:	b25b      	sxtb	r3, r3
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007908:	d103      	bne.n	8007912 <xQueueGenericSend+0x192>
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007912:	f002 f827 	bl	8009964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007916:	1d3a      	adds	r2, r7, #4
 8007918:	f107 0314 	add.w	r3, r7, #20
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f001 f94e 	bl	8008bc0 <xTaskCheckForTimeOut>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d124      	bne.n	8007974 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800792a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800792c:	f000 faac 	bl	8007e88 <prvIsQueueFull>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d018      	beq.n	8007968 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	3310      	adds	r3, #16
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4611      	mov	r1, r2
 800793e:	4618      	mov	r0, r3
 8007940:	f001 f86e 	bl	8008a20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007946:	f000 fa37 	bl	8007db8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800794a:	f000 fe97 	bl	800867c <xTaskResumeAll>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f47f af7c 	bne.w	800784e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007956:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <xQueueGenericSend+0x208>)
 8007958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	e772      	b.n	800784e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800796a:	f000 fa25 	bl	8007db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800796e:	f000 fe85 	bl	800867c <xTaskResumeAll>
 8007972:	e76c      	b.n	800784e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007976:	f000 fa1f 	bl	8007db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800797a:	f000 fe7f 	bl	800867c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800797e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007980:	4618      	mov	r0, r3
 8007982:	3738      	adds	r7, #56	; 0x38
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08e      	sub	sp, #56	; 0x38
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	b672      	cpsid	i
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	b662      	cpsie	i
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d103      	bne.n	80079cc <xQueueGenericSendFromISR+0x40>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <xQueueGenericSendFromISR+0x44>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <xQueueGenericSendFromISR+0x46>
 80079d0:	2300      	movs	r3, #0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	b672      	cpsid	i
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	b662      	cpsie	i
 80079ea:	623b      	str	r3, [r7, #32]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d103      	bne.n	80079fe <xQueueGenericSendFromISR+0x72>
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d101      	bne.n	8007a02 <xQueueGenericSendFromISR+0x76>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <xQueueGenericSendFromISR+0x78>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10c      	bne.n	8007a22 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	b672      	cpsid	i
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	b662      	cpsie	i
 8007a1c:	61fb      	str	r3, [r7, #28]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a22:	f002 f853 	bl	8009acc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a26:	f3ef 8211 	mrs	r2, BASEPRI
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	b672      	cpsid	i
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	b662      	cpsie	i
 8007a3e:	61ba      	str	r2, [r7, #24]
 8007a40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d302      	bcc.n	8007a58 <xQueueGenericSendFromISR+0xcc>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d12c      	bne.n	8007ab2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a68:	f000 f916 	bl	8007c98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a74:	d112      	bne.n	8007a9c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d016      	beq.n	8007aac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	3324      	adds	r3, #36	; 0x24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 f820 	bl	8008ac8 <xTaskRemoveFromEventList>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00e      	beq.n	8007aac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e007      	b.n	8007aac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	b25a      	sxtb	r2, r3
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007aac:	2301      	movs	r3, #1
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ab0:	e001      	b.n	8007ab6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ac0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3738      	adds	r7, #56	; 0x38
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08c      	sub	sp, #48	; 0x30
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10c      	bne.n	8007b00 <xQueueReceive+0x34>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	b672      	cpsid	i
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	b662      	cpsie	i
 8007afa:	623b      	str	r3, [r7, #32]
}
 8007afc:	bf00      	nop
 8007afe:	e7fe      	b.n	8007afe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <xQueueReceive+0x42>
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <xQueueReceive+0x46>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <xQueueReceive+0x48>
 8007b12:	2300      	movs	r3, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10c      	bne.n	8007b32 <xQueueReceive+0x66>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	61fb      	str	r3, [r7, #28]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b32:	f001 f993 	bl	8008e5c <xTaskGetSchedulerState>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <xQueueReceive+0x76>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <xQueueReceive+0x7a>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueReceive+0x7c>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10c      	bne.n	8007b66 <xQueueReceive+0x9a>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	b672      	cpsid	i
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	b662      	cpsie	i
 8007b60:	61bb      	str	r3, [r7, #24]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b66:	f001 fec9 	bl	80098fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01f      	beq.n	8007bb6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b7a:	f000 f8f7 	bl	8007d6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	1e5a      	subs	r2, r3, #1
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00f      	beq.n	8007bae <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	3310      	adds	r3, #16
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 ff98 	bl	8008ac8 <xTaskRemoveFromEventList>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d007      	beq.n	8007bae <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b9e:	4b3d      	ldr	r3, [pc, #244]	; (8007c94 <xQueueReceive+0x1c8>)
 8007ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bae:	f001 fed9 	bl	8009964 <vPortExitCritical>
				return pdPASS;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e069      	b.n	8007c8a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d103      	bne.n	8007bc4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bbc:	f001 fed2 	bl	8009964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e062      	b.n	8007c8a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d106      	bne.n	8007bd8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bca:	f107 0310 	add.w	r3, r7, #16
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 ffe0 	bl	8008b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bd8:	f001 fec4 	bl	8009964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bdc:	f000 fd40 	bl	8008660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007be0:	f001 fe8c 	bl	80098fc <vPortEnterCritical>
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d103      	bne.n	8007bfa <xQueueReceive+0x12e>
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c00:	b25b      	sxtb	r3, r3
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d103      	bne.n	8007c10 <xQueueReceive+0x144>
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c10:	f001 fea8 	bl	8009964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c14:	1d3a      	adds	r2, r7, #4
 8007c16:	f107 0310 	add.w	r3, r7, #16
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 ffcf 	bl	8008bc0 <xTaskCheckForTimeOut>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d123      	bne.n	8007c70 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c2a:	f000 f917 	bl	8007e5c <prvIsQueueEmpty>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d017      	beq.n	8007c64 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 feef 	bl	8008a20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c44:	f000 f8b8 	bl	8007db8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c48:	f000 fd18 	bl	800867c <xTaskResumeAll>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d189      	bne.n	8007b66 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007c52:	4b10      	ldr	r3, [pc, #64]	; (8007c94 <xQueueReceive+0x1c8>)
 8007c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	e780      	b.n	8007b66 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c66:	f000 f8a7 	bl	8007db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c6a:	f000 fd07 	bl	800867c <xTaskResumeAll>
 8007c6e:	e77a      	b.n	8007b66 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c72:	f000 f8a1 	bl	8007db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c76:	f000 fd01 	bl	800867c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7c:	f000 f8ee 	bl	8007e5c <prvIsQueueEmpty>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f43f af6f 	beq.w	8007b66 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3730      	adds	r7, #48	; 0x30
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	e000ed04 	.word	0xe000ed04

08007c98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10d      	bne.n	8007cd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d14d      	bne.n	8007d5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f8e8 	bl	8008e98 <xTaskPriorityDisinherit>
 8007cc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	609a      	str	r2, [r3, #8]
 8007cd0:	e043      	b.n	8007d5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d119      	bne.n	8007d0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6858      	ldr	r0, [r3, #4]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	f002 ff31 	bl	800ab4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d32b      	bcc.n	8007d5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	e026      	b.n	8007d5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68d8      	ldr	r0, [r3, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	461a      	mov	r2, r3
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	f002 ff17 	bl	800ab4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	425b      	negs	r3, r3
 8007d26:	441a      	add	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d207      	bcs.n	8007d48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	425b      	negs	r3, r3
 8007d42:	441a      	add	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d105      	bne.n	8007d5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d62:	697b      	ldr	r3, [r7, #20]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d018      	beq.n	8007db0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	441a      	add	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d303      	bcc.n	8007da0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68d9      	ldr	r1, [r3, #12]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	461a      	mov	r2, r3
 8007daa:	6838      	ldr	r0, [r7, #0]
 8007dac:	f002 fecd 	bl	800ab4a <memcpy>
	}
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dc0:	f001 fd9c 	bl	80098fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dcc:	e011      	b.n	8007df2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d012      	beq.n	8007dfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3324      	adds	r3, #36	; 0x24
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fe74 	bl	8008ac8 <xTaskRemoveFromEventList>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007de6:	f000 ff51 	bl	8008c8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dce9      	bgt.n	8007dce <prvUnlockQueue+0x16>
 8007dfa:	e000      	b.n	8007dfe <prvUnlockQueue+0x46>
					break;
 8007dfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	22ff      	movs	r2, #255	; 0xff
 8007e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e06:	f001 fdad 	bl	8009964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e0a:	f001 fd77 	bl	80098fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e16:	e011      	b.n	8007e3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d012      	beq.n	8007e46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3310      	adds	r3, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fe4f 	bl	8008ac8 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e30:	f000 ff2c 	bl	8008c8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dce9      	bgt.n	8007e18 <prvUnlockQueue+0x60>
 8007e44:	e000      	b.n	8007e48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	22ff      	movs	r2, #255	; 0xff
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e50:	f001 fd88 	bl	8009964 <vPortExitCritical>
}
 8007e54:	bf00      	nop
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e64:	f001 fd4a 	bl	80098fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e001      	b.n	8007e7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e7a:	f001 fd73 	bl	8009964 <vPortExitCritical>

	return xReturn;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e90:	f001 fd34 	bl	80098fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d102      	bne.n	8007ea6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e001      	b.n	8007eaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eaa:	f001 fd5b 	bl	8009964 <vPortExitCritical>

	return xReturn;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	e014      	b.n	8007ef2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ec8:	4a0f      	ldr	r2, [pc, #60]	; (8007f08 <vQueueAddToRegistry+0x50>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ed4:	490c      	ldr	r1, [pc, #48]	; (8007f08 <vQueueAddToRegistry+0x50>)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ede:	4a0a      	ldr	r2, [pc, #40]	; (8007f08 <vQueueAddToRegistry+0x50>)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007eea:	e006      	b.n	8007efa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b07      	cmp	r3, #7
 8007ef6:	d9e7      	bls.n	8007ec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ef8:	bf00      	nop
 8007efa:	bf00      	nop
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20001114 	.word	0x20001114

08007f0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f1c:	f001 fcee 	bl	80098fc <vPortEnterCritical>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2c:	d103      	bne.n	8007f36 <vQueueWaitForMessageRestricted+0x2a>
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f3c:	b25b      	sxtb	r3, r3
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d103      	bne.n	8007f4c <vQueueWaitForMessageRestricted+0x40>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f4c:	f001 fd0a 	bl	8009964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d106      	bne.n	8007f66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	3324      	adds	r3, #36	; 0x24
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fd83 	bl	8008a6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f66:	6978      	ldr	r0, [r7, #20]
 8007f68:	f7ff ff26 	bl	8007db8 <prvUnlockQueue>
	}
 8007f6c:	bf00      	nop
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08e      	sub	sp, #56	; 0x38
 8007f78:	af04      	add	r7, sp, #16
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10c      	bne.n	8007fa2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	623b      	str	r3, [r7, #32]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10c      	bne.n	8007fc2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	b672      	cpsid	i
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	b662      	cpsie	i
 8007fbc:	61fb      	str	r3, [r7, #28]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fc2:	23a8      	movs	r3, #168	; 0xa8
 8007fc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2ba8      	cmp	r3, #168	; 0xa8
 8007fca:	d00c      	beq.n	8007fe6 <xTaskCreateStatic+0x72>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	b672      	cpsid	i
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	b662      	cpsie	i
 8007fe0:	61bb      	str	r3, [r7, #24]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fe6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01e      	beq.n	800802c <xTaskCreateStatic+0xb8>
 8007fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01b      	beq.n	800802c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ffc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	2202      	movs	r2, #2
 8008002:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008006:	2300      	movs	r3, #0
 8008008:	9303      	str	r3, [sp, #12]
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	9302      	str	r3, [sp, #8]
 800800e:	f107 0314 	add.w	r3, r7, #20
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 f850 	bl	80080c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008026:	f000 f8f5 	bl	8008214 <prvAddNewTaskToReadyList>
 800802a:	e001      	b.n	8008030 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008030:	697b      	ldr	r3, [r7, #20]
	}
 8008032:	4618      	mov	r0, r3
 8008034:	3728      	adds	r7, #40	; 0x28
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800803a:	b580      	push	{r7, lr}
 800803c:	b08c      	sub	sp, #48	; 0x30
 800803e:	af04      	add	r7, sp, #16
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	4613      	mov	r3, r2
 8008048:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4618      	mov	r0, r3
 8008050:	f001 fd80 	bl	8009b54 <pvPortMalloc>
 8008054:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00e      	beq.n	800807a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800805c:	20a8      	movs	r0, #168	; 0xa8
 800805e:	f001 fd79 	bl	8009b54 <pvPortMalloc>
 8008062:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	631a      	str	r2, [r3, #48]	; 0x30
 8008070:	e005      	b.n	800807e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008072:	6978      	ldr	r0, [r7, #20]
 8008074:	f001 fe38 	bl	8009ce8 <vPortFree>
 8008078:	e001      	b.n	800807e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d017      	beq.n	80080b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800808c:	88fa      	ldrh	r2, [r7, #6]
 800808e:	2300      	movs	r3, #0
 8008090:	9303      	str	r3, [sp, #12]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 f80e 	bl	80080c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080a8:	69f8      	ldr	r0, [r7, #28]
 80080aa:	f000 f8b3 	bl	8008214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080ae:	2301      	movs	r3, #1
 80080b0:	61bb      	str	r3, [r7, #24]
 80080b2:	e002      	b.n	80080ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295
 80080b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080ba:	69bb      	ldr	r3, [r7, #24]
	}
 80080bc:	4618      	mov	r0, r3
 80080be:	3720      	adds	r7, #32
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	461a      	mov	r2, r3
 80080dc:	21a5      	movs	r1, #165	; 0xa5
 80080de:	f002 fc5e 	bl	800a99e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80080ec:	440b      	add	r3, r1
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f023 0307 	bic.w	r3, r3, #7
 80080fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00c      	beq.n	8008120 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	b672      	cpsid	i
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	b662      	cpsie	i
 800811a:	617b      	str	r3, [r7, #20]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01f      	beq.n	8008166 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	e012      	b.n	8008152 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	7819      	ldrb	r1, [r3, #0]
 8008134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	3334      	adds	r3, #52	; 0x34
 800813c:	460a      	mov	r2, r1
 800813e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	3301      	adds	r3, #1
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	2b0f      	cmp	r3, #15
 8008156:	d9e9      	bls.n	800812c <prvInitialiseNewTask+0x68>
 8008158:	e000      	b.n	800815c <prvInitialiseNewTask+0x98>
			{
				break;
 800815a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008164:	e003      	b.n	800816e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	2b37      	cmp	r3, #55	; 0x37
 8008172:	d901      	bls.n	8008178 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008174:	2337      	movs	r3, #55	; 0x37
 8008176:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	2200      	movs	r2, #0
 8008188:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	3304      	adds	r3, #4
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff f952 	bl	8007438 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	3318      	adds	r3, #24
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff f94d 	bl	8007438 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	3354      	adds	r3, #84	; 0x54
 80081c8:	224c      	movs	r2, #76	; 0x4c
 80081ca:	2100      	movs	r1, #0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f002 fbe6 	bl	800a99e <memset>
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	4a0c      	ldr	r2, [pc, #48]	; (8008208 <prvInitialiseNewTask+0x144>)
 80081d6:	659a      	str	r2, [r3, #88]	; 0x58
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	4a0c      	ldr	r2, [pc, #48]	; (800820c <prvInitialiseNewTask+0x148>)
 80081dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	4a0b      	ldr	r2, [pc, #44]	; (8008210 <prvInitialiseNewTask+0x14c>)
 80081e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	69b8      	ldr	r0, [r7, #24]
 80081ea:	f001 fa77 	bl	80096dc <pxPortInitialiseStack>
 80081ee:	4602      	mov	r2, r0
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008200:	bf00      	nop
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	200053a0 	.word	0x200053a0
 800820c:	20005408 	.word	0x20005408
 8008210:	20005470 	.word	0x20005470

08008214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800821c:	f001 fb6e 	bl	80098fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008220:	4b2d      	ldr	r3, [pc, #180]	; (80082d8 <prvAddNewTaskToReadyList+0xc4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3301      	adds	r3, #1
 8008226:	4a2c      	ldr	r2, [pc, #176]	; (80082d8 <prvAddNewTaskToReadyList+0xc4>)
 8008228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800822a:	4b2c      	ldr	r3, [pc, #176]	; (80082dc <prvAddNewTaskToReadyList+0xc8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d109      	bne.n	8008246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008232:	4a2a      	ldr	r2, [pc, #168]	; (80082dc <prvAddNewTaskToReadyList+0xc8>)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008238:	4b27      	ldr	r3, [pc, #156]	; (80082d8 <prvAddNewTaskToReadyList+0xc4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d110      	bne.n	8008262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008240:	f000 fd48 	bl	8008cd4 <prvInitialiseTaskLists>
 8008244:	e00d      	b.n	8008262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008246:	4b26      	ldr	r3, [pc, #152]	; (80082e0 <prvAddNewTaskToReadyList+0xcc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800824e:	4b23      	ldr	r3, [pc, #140]	; (80082dc <prvAddNewTaskToReadyList+0xc8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	429a      	cmp	r2, r3
 800825a:	d802      	bhi.n	8008262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800825c:	4a1f      	ldr	r2, [pc, #124]	; (80082dc <prvAddNewTaskToReadyList+0xc8>)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008262:	4b20      	ldr	r3, [pc, #128]	; (80082e4 <prvAddNewTaskToReadyList+0xd0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3301      	adds	r3, #1
 8008268:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <prvAddNewTaskToReadyList+0xd0>)
 800826a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800826c:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <prvAddNewTaskToReadyList+0xd0>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008278:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <prvAddNewTaskToReadyList+0xd4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d903      	bls.n	8008288 <prvAddNewTaskToReadyList+0x74>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	4a18      	ldr	r2, [pc, #96]	; (80082e8 <prvAddNewTaskToReadyList+0xd4>)
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4a15      	ldr	r2, [pc, #84]	; (80082ec <prvAddNewTaskToReadyList+0xd8>)
 8008296:	441a      	add	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3304      	adds	r3, #4
 800829c:	4619      	mov	r1, r3
 800829e:	4610      	mov	r0, r2
 80082a0:	f7ff f8d7 	bl	8007452 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082a4:	f001 fb5e 	bl	8009964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082a8:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <prvAddNewTaskToReadyList+0xcc>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00e      	beq.n	80082ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082b0:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <prvAddNewTaskToReadyList+0xc8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d207      	bcs.n	80082ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <prvAddNewTaskToReadyList+0xdc>)
 80082c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20001628 	.word	0x20001628
 80082dc:	20001154 	.word	0x20001154
 80082e0:	20001634 	.word	0x20001634
 80082e4:	20001644 	.word	0x20001644
 80082e8:	20001630 	.word	0x20001630
 80082ec:	20001158 	.word	0x20001158
 80082f0:	e000ed04 	.word	0xe000ed04

080082f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d019      	beq.n	800833a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008306:	4b14      	ldr	r3, [pc, #80]	; (8008358 <vTaskDelay+0x64>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00c      	beq.n	8008328 <vTaskDelay+0x34>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	b672      	cpsid	i
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	b662      	cpsie	i
 8008322:	60bb      	str	r3, [r7, #8]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008328:	f000 f99a 	bl	8008660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800832c:	2100      	movs	r1, #0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fe24 	bl	8008f7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008334:	f000 f9a2 	bl	800867c <xTaskResumeAll>
 8008338:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d107      	bne.n	8008350 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008340:	4b06      	ldr	r3, [pc, #24]	; (800835c <vTaskDelay+0x68>)
 8008342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20001650 	.word	0x20001650
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008368:	f001 fac8 	bl	80098fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d102      	bne.n	8008378 <vTaskSuspend+0x18>
 8008372:	4b31      	ldr	r3, [pc, #196]	; (8008438 <vTaskSuspend+0xd8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	e000      	b.n	800837a <vTaskSuspend+0x1a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3304      	adds	r3, #4
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff f8c3 	bl	800750c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3318      	adds	r3, #24
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff f8ba 	bl	800750c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3304      	adds	r3, #4
 800839c:	4619      	mov	r1, r3
 800839e:	4827      	ldr	r0, [pc, #156]	; (800843c <vTaskSuspend+0xdc>)
 80083a0:	f7ff f857 	bl	8007452 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d103      	bne.n	80083b8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80083b8:	f001 fad4 	bl	8009964 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80083bc:	4b20      	ldr	r3, [pc, #128]	; (8008440 <vTaskSuspend+0xe0>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80083c4:	f001 fa9a 	bl	80098fc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80083c8:	f000 fd28 	bl	8008e1c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80083cc:	f001 faca 	bl	8009964 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80083d0:	4b19      	ldr	r3, [pc, #100]	; (8008438 <vTaskSuspend+0xd8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d129      	bne.n	800842e <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 80083da:	4b19      	ldr	r3, [pc, #100]	; (8008440 <vTaskSuspend+0xe0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d019      	beq.n	8008416 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80083e2:	4b18      	ldr	r3, [pc, #96]	; (8008444 <vTaskSuspend+0xe4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00c      	beq.n	8008404 <vTaskSuspend+0xa4>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	b672      	cpsid	i
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	b662      	cpsie	i
 80083fe:	60bb      	str	r3, [r7, #8]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8008404:	4b10      	ldr	r3, [pc, #64]	; (8008448 <vTaskSuspend+0xe8>)
 8008406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008414:	e00b      	b.n	800842e <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <vTaskSuspend+0xdc>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b0c      	ldr	r3, [pc, #48]	; (800844c <vTaskSuspend+0xec>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d103      	bne.n	800842a <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8008422:	4b05      	ldr	r3, [pc, #20]	; (8008438 <vTaskSuspend+0xd8>)
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
	}
 8008428:	e001      	b.n	800842e <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800842a:	f000 fa93 	bl	8008954 <vTaskSwitchContext>
	}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20001154 	.word	0x20001154
 800843c:	20001614 	.word	0x20001614
 8008440:	20001634 	.word	0x20001634
 8008444:	20001650 	.word	0x20001650
 8008448:	e000ed04 	.word	0xe000ed04
 800844c:	20001628 	.word	0x20001628

08008450 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10c      	bne.n	8008480 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	b672      	cpsid	i
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	b662      	cpsie	i
 800847a:	60fb      	str	r3, [r7, #12]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <prvTaskIsTaskSuspended+0x60>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d10a      	bne.n	80084a0 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	4a09      	ldr	r2, [pc, #36]	; (80084b4 <prvTaskIsTaskSuspended+0x64>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d005      	beq.n	80084a0 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800849c:	2301      	movs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084a0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80084a2:	4618      	mov	r0, r3
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	20001614 	.word	0x20001614
 80084b4:	200015e8 	.word	0x200015e8

080084b8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10c      	bne.n	80084e4 <vTaskResume+0x2c>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	b672      	cpsid	i
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	b662      	cpsie	i
 80084de:	60bb      	str	r3, [r7, #8]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80084e4:	4b20      	ldr	r3, [pc, #128]	; (8008568 <vTaskResume+0xb0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d038      	beq.n	8008560 <vTaskResume+0xa8>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d035      	beq.n	8008560 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 80084f4:	f001 fa02 	bl	80098fc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff ffa9 	bl	8008450 <prvTaskIsTaskSuspended>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d02b      	beq.n	800855c <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3304      	adds	r3, #4
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe ffff 	bl	800750c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008512:	4b16      	ldr	r3, [pc, #88]	; (800856c <vTaskResume+0xb4>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d903      	bls.n	8008522 <vTaskResume+0x6a>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	4a13      	ldr	r2, [pc, #76]	; (800856c <vTaskResume+0xb4>)
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4a10      	ldr	r2, [pc, #64]	; (8008570 <vTaskResume+0xb8>)
 8008530:	441a      	add	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3304      	adds	r3, #4
 8008536:	4619      	mov	r1, r3
 8008538:	4610      	mov	r0, r2
 800853a:	f7fe ff8a 	bl	8007452 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <vTaskResume+0xb0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	429a      	cmp	r2, r3
 800854a:	d307      	bcc.n	800855c <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800854c:	4b09      	ldr	r3, [pc, #36]	; (8008574 <vTaskResume+0xbc>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800855c:	f001 fa02 	bl	8009964 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20001154 	.word	0x20001154
 800856c:	20001630 	.word	0x20001630
 8008570:	20001158 	.word	0x20001158
 8008574:	e000ed04 	.word	0xe000ed04

08008578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b08a      	sub	sp, #40	; 0x28
 800857c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008586:	463a      	mov	r2, r7
 8008588:	1d39      	adds	r1, r7, #4
 800858a:	f107 0308 	add.w	r3, r7, #8
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fefe 	bl	8007390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	9202      	str	r2, [sp, #8]
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	2300      	movs	r3, #0
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	2300      	movs	r3, #0
 80085a4:	460a      	mov	r2, r1
 80085a6:	4926      	ldr	r1, [pc, #152]	; (8008640 <vTaskStartScheduler+0xc8>)
 80085a8:	4826      	ldr	r0, [pc, #152]	; (8008644 <vTaskStartScheduler+0xcc>)
 80085aa:	f7ff fce3 	bl	8007f74 <xTaskCreateStatic>
 80085ae:	4603      	mov	r3, r0
 80085b0:	4a25      	ldr	r2, [pc, #148]	; (8008648 <vTaskStartScheduler+0xd0>)
 80085b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085b4:	4b24      	ldr	r3, [pc, #144]	; (8008648 <vTaskStartScheduler+0xd0>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085bc:	2301      	movs	r3, #1
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e001      	b.n	80085c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d102      	bne.n	80085d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085cc:	f000 fd2a 	bl	8009024 <xTimerCreateTimerTask>
 80085d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d11d      	bne.n	8008614 <vTaskStartScheduler+0x9c>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	b672      	cpsid	i
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	b662      	cpsie	i
 80085ec:	613b      	str	r3, [r7, #16]
}
 80085ee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085f0:	4b16      	ldr	r3, [pc, #88]	; (800864c <vTaskStartScheduler+0xd4>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3354      	adds	r3, #84	; 0x54
 80085f6:	4a16      	ldr	r2, [pc, #88]	; (8008650 <vTaskStartScheduler+0xd8>)
 80085f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085fa:	4b16      	ldr	r3, [pc, #88]	; (8008654 <vTaskStartScheduler+0xdc>)
 80085fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008600:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008602:	4b15      	ldr	r3, [pc, #84]	; (8008658 <vTaskStartScheduler+0xe0>)
 8008604:	2201      	movs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008608:	4b14      	ldr	r3, [pc, #80]	; (800865c <vTaskStartScheduler+0xe4>)
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800860e:	f001 f8f7 	bl	8009800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008612:	e010      	b.n	8008636 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d10c      	bne.n	8008636 <vTaskStartScheduler+0xbe>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	b672      	cpsid	i
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	b662      	cpsie	i
 8008630:	60fb      	str	r3, [r7, #12]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <vTaskStartScheduler+0xbc>
}
 8008636:	bf00      	nop
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	0800cdfc 	.word	0x0800cdfc
 8008644:	08008ca5 	.word	0x08008ca5
 8008648:	2000164c 	.word	0x2000164c
 800864c:	20001154 	.word	0x20001154
 8008650:	20000074 	.word	0x20000074
 8008654:	20001648 	.word	0x20001648
 8008658:	20001634 	.word	0x20001634
 800865c:	2000162c 	.word	0x2000162c

08008660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008664:	4b04      	ldr	r3, [pc, #16]	; (8008678 <vTaskSuspendAll+0x18>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	4a03      	ldr	r2, [pc, #12]	; (8008678 <vTaskSuspendAll+0x18>)
 800866c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800866e:	bf00      	nop
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	20001650 	.word	0x20001650

0800867c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008686:	2300      	movs	r3, #0
 8008688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800868a:	4b43      	ldr	r3, [pc, #268]	; (8008798 <xTaskResumeAll+0x11c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10c      	bne.n	80086ac <xTaskResumeAll+0x30>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	b672      	cpsid	i
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	b662      	cpsie	i
 80086a6:	603b      	str	r3, [r7, #0]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086ac:	f001 f926 	bl	80098fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086b0:	4b39      	ldr	r3, [pc, #228]	; (8008798 <xTaskResumeAll+0x11c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	4a38      	ldr	r2, [pc, #224]	; (8008798 <xTaskResumeAll+0x11c>)
 80086b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ba:	4b37      	ldr	r3, [pc, #220]	; (8008798 <xTaskResumeAll+0x11c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d162      	bne.n	8008788 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086c2:	4b36      	ldr	r3, [pc, #216]	; (800879c <xTaskResumeAll+0x120>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d05e      	beq.n	8008788 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086ca:	e02f      	b.n	800872c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086cc:	4b34      	ldr	r3, [pc, #208]	; (80087a0 <xTaskResumeAll+0x124>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3318      	adds	r3, #24
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe ff17 	bl	800750c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe ff12 	bl	800750c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ec:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <xTaskResumeAll+0x128>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d903      	bls.n	80086fc <xTaskResumeAll+0x80>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	4a2a      	ldr	r2, [pc, #168]	; (80087a4 <xTaskResumeAll+0x128>)
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <xTaskResumeAll+0x12c>)
 800870a:	441a      	add	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3304      	adds	r3, #4
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f7fe fe9d 	bl	8007452 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	4b23      	ldr	r3, [pc, #140]	; (80087ac <xTaskResumeAll+0x130>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	429a      	cmp	r2, r3
 8008724:	d302      	bcc.n	800872c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008726:	4b22      	ldr	r3, [pc, #136]	; (80087b0 <xTaskResumeAll+0x134>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800872c:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <xTaskResumeAll+0x124>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1cb      	bne.n	80086cc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800873a:	f000 fb6f 	bl	8008e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800873e:	4b1d      	ldr	r3, [pc, #116]	; (80087b4 <xTaskResumeAll+0x138>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d010      	beq.n	800876c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800874a:	f000 f847 	bl	80087dc <xTaskIncrementTick>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008754:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <xTaskResumeAll+0x134>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f1      	bne.n	800874a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008766:	4b13      	ldr	r3, [pc, #76]	; (80087b4 <xTaskResumeAll+0x138>)
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800876c:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <xTaskResumeAll+0x134>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d009      	beq.n	8008788 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008774:	2301      	movs	r3, #1
 8008776:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008778:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <xTaskResumeAll+0x13c>)
 800877a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008788:	f001 f8ec 	bl	8009964 <vPortExitCritical>

	return xAlreadyYielded;
 800878c:	68bb      	ldr	r3, [r7, #8]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20001650 	.word	0x20001650
 800879c:	20001628 	.word	0x20001628
 80087a0:	200015e8 	.word	0x200015e8
 80087a4:	20001630 	.word	0x20001630
 80087a8:	20001158 	.word	0x20001158
 80087ac:	20001154 	.word	0x20001154
 80087b0:	2000163c 	.word	0x2000163c
 80087b4:	20001638 	.word	0x20001638
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087c2:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <xTaskGetTickCount+0x1c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087c8:	687b      	ldr	r3, [r7, #4]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	2000162c 	.word	0x2000162c

080087dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087e6:	4b50      	ldr	r3, [pc, #320]	; (8008928 <xTaskIncrementTick+0x14c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f040 808b 	bne.w	8008906 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087f0:	4b4e      	ldr	r3, [pc, #312]	; (800892c <xTaskIncrementTick+0x150>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3301      	adds	r3, #1
 80087f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087f8:	4a4c      	ldr	r2, [pc, #304]	; (800892c <xTaskIncrementTick+0x150>)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d122      	bne.n	800884a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008804:	4b4a      	ldr	r3, [pc, #296]	; (8008930 <xTaskIncrementTick+0x154>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <xTaskIncrementTick+0x4c>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	b672      	cpsid	i
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	b662      	cpsie	i
 8008822:	603b      	str	r3, [r7, #0]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <xTaskIncrementTick+0x4a>
 8008828:	4b41      	ldr	r3, [pc, #260]	; (8008930 <xTaskIncrementTick+0x154>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	4b41      	ldr	r3, [pc, #260]	; (8008934 <xTaskIncrementTick+0x158>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a3f      	ldr	r2, [pc, #252]	; (8008930 <xTaskIncrementTick+0x154>)
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	4a3f      	ldr	r2, [pc, #252]	; (8008934 <xTaskIncrementTick+0x158>)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	4b3e      	ldr	r3, [pc, #248]	; (8008938 <xTaskIncrementTick+0x15c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3301      	adds	r3, #1
 8008842:	4a3d      	ldr	r2, [pc, #244]	; (8008938 <xTaskIncrementTick+0x15c>)
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	f000 fae9 	bl	8008e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800884a:	4b3c      	ldr	r3, [pc, #240]	; (800893c <xTaskIncrementTick+0x160>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	429a      	cmp	r2, r3
 8008852:	d349      	bcc.n	80088e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008854:	4b36      	ldr	r3, [pc, #216]	; (8008930 <xTaskIncrementTick+0x154>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d104      	bne.n	8008868 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800885e:	4b37      	ldr	r3, [pc, #220]	; (800893c <xTaskIncrementTick+0x160>)
 8008860:	f04f 32ff 	mov.w	r2, #4294967295
 8008864:	601a      	str	r2, [r3, #0]
					break;
 8008866:	e03f      	b.n	80088e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008868:	4b31      	ldr	r3, [pc, #196]	; (8008930 <xTaskIncrementTick+0x154>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	429a      	cmp	r2, r3
 800887e:	d203      	bcs.n	8008888 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008880:	4a2e      	ldr	r2, [pc, #184]	; (800893c <xTaskIncrementTick+0x160>)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008886:	e02f      	b.n	80088e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	3304      	adds	r3, #4
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fe3d 	bl	800750c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	2b00      	cmp	r3, #0
 8008898:	d004      	beq.n	80088a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	3318      	adds	r3, #24
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fe34 	bl	800750c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a8:	4b25      	ldr	r3, [pc, #148]	; (8008940 <xTaskIncrementTick+0x164>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d903      	bls.n	80088b8 <xTaskIncrementTick+0xdc>
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	4a22      	ldr	r2, [pc, #136]	; (8008940 <xTaskIncrementTick+0x164>)
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4a1f      	ldr	r2, [pc, #124]	; (8008944 <xTaskIncrementTick+0x168>)
 80088c6:	441a      	add	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	3304      	adds	r3, #4
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f7fe fdbf 	bl	8007452 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	4b1b      	ldr	r3, [pc, #108]	; (8008948 <xTaskIncrementTick+0x16c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	429a      	cmp	r2, r3
 80088e0:	d3b8      	bcc.n	8008854 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80088e2:	2301      	movs	r3, #1
 80088e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088e6:	e7b5      	b.n	8008854 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088e8:	4b17      	ldr	r3, [pc, #92]	; (8008948 <xTaskIncrementTick+0x16c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	4915      	ldr	r1, [pc, #84]	; (8008944 <xTaskIncrementTick+0x168>)
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	440b      	add	r3, r1
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d907      	bls.n	8008910 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008900:	2301      	movs	r3, #1
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	e004      	b.n	8008910 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008906:	4b11      	ldr	r3, [pc, #68]	; (800894c <xTaskIncrementTick+0x170>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3301      	adds	r3, #1
 800890c:	4a0f      	ldr	r2, [pc, #60]	; (800894c <xTaskIncrementTick+0x170>)
 800890e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008910:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <xTaskIncrementTick+0x174>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008918:	2301      	movs	r3, #1
 800891a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800891c:	697b      	ldr	r3, [r7, #20]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20001650 	.word	0x20001650
 800892c:	2000162c 	.word	0x2000162c
 8008930:	200015e0 	.word	0x200015e0
 8008934:	200015e4 	.word	0x200015e4
 8008938:	20001640 	.word	0x20001640
 800893c:	20001648 	.word	0x20001648
 8008940:	20001630 	.word	0x20001630
 8008944:	20001158 	.word	0x20001158
 8008948:	20001154 	.word	0x20001154
 800894c:	20001638 	.word	0x20001638
 8008950:	2000163c 	.word	0x2000163c

08008954 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800895a:	4b2b      	ldr	r3, [pc, #172]	; (8008a08 <vTaskSwitchContext+0xb4>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008962:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <vTaskSwitchContext+0xb8>)
 8008964:	2201      	movs	r2, #1
 8008966:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008968:	e048      	b.n	80089fc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800896a:	4b28      	ldr	r3, [pc, #160]	; (8008a0c <vTaskSwitchContext+0xb8>)
 800896c:	2200      	movs	r2, #0
 800896e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008970:	4b27      	ldr	r3, [pc, #156]	; (8008a10 <vTaskSwitchContext+0xbc>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	e012      	b.n	800899e <vTaskSwitchContext+0x4a>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10c      	bne.n	8008998 <vTaskSwitchContext+0x44>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	b672      	cpsid	i
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	b662      	cpsie	i
 8008992:	607b      	str	r3, [r7, #4]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <vTaskSwitchContext+0x42>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b01      	subs	r3, #1
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	491d      	ldr	r1, [pc, #116]	; (8008a14 <vTaskSwitchContext+0xc0>)
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0e2      	beq.n	8008978 <vTaskSwitchContext+0x24>
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4a15      	ldr	r2, [pc, #84]	; (8008a14 <vTaskSwitchContext+0xc0>)
 80089be:	4413      	add	r3, r2
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	605a      	str	r2, [r3, #4]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	3308      	adds	r3, #8
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d104      	bne.n	80089e2 <vTaskSwitchContext+0x8e>
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	605a      	str	r2, [r3, #4]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	4a0b      	ldr	r2, [pc, #44]	; (8008a18 <vTaskSwitchContext+0xc4>)
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <vTaskSwitchContext+0xbc>)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <vTaskSwitchContext+0xc4>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3354      	adds	r3, #84	; 0x54
 80089f8:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <vTaskSwitchContext+0xc8>)
 80089fa:	6013      	str	r3, [r2, #0]
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	20001650 	.word	0x20001650
 8008a0c:	2000163c 	.word	0x2000163c
 8008a10:	20001630 	.word	0x20001630
 8008a14:	20001158 	.word	0x20001158
 8008a18:	20001154 	.word	0x20001154
 8008a1c:	20000074 	.word	0x20000074

08008a20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10c      	bne.n	8008a4a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	b672      	cpsid	i
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	b662      	cpsie	i
 8008a44:	60fb      	str	r3, [r7, #12]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <vTaskPlaceOnEventList+0x48>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3318      	adds	r3, #24
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fe fd21 	bl	800749a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a58:	2101      	movs	r1, #1
 8008a5a:	6838      	ldr	r0, [r7, #0]
 8008a5c:	f000 fa8e 	bl	8008f7c <prvAddCurrentTaskToDelayedList>
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20001154 	.word	0x20001154

08008a6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10c      	bne.n	8008a98 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	b672      	cpsid	i
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	b662      	cpsie	i
 8008a92:	617b      	str	r3, [r7, #20]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a98:	4b0a      	ldr	r3, [pc, #40]	; (8008ac4 <vTaskPlaceOnEventListRestricted+0x58>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3318      	adds	r3, #24
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7fe fcd6 	bl	8007452 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008aac:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	68b8      	ldr	r0, [r7, #8]
 8008ab6:	f000 fa61 	bl	8008f7c <prvAddCurrentTaskToDelayedList>
	}
 8008aba:	bf00      	nop
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20001154 	.word	0x20001154

08008ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10c      	bne.n	8008af8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	b672      	cpsid	i
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	b662      	cpsie	i
 8008af2:	60fb      	str	r3, [r7, #12]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	3318      	adds	r3, #24
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe fd05 	bl	800750c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b02:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <xTaskRemoveFromEventList+0xb4>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d11d      	bne.n	8008b46 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fcfc 	bl	800750c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b18:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <xTaskRemoveFromEventList+0xb8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d903      	bls.n	8008b28 <xTaskRemoveFromEventList+0x60>
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	4a16      	ldr	r2, [pc, #88]	; (8008b80 <xTaskRemoveFromEventList+0xb8>)
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4a13      	ldr	r2, [pc, #76]	; (8008b84 <xTaskRemoveFromEventList+0xbc>)
 8008b36:	441a      	add	r2, r3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	f7fe fc87 	bl	8007452 <vListInsertEnd>
 8008b44:	e005      	b.n	8008b52 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	3318      	adds	r3, #24
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	480e      	ldr	r0, [pc, #56]	; (8008b88 <xTaskRemoveFromEventList+0xc0>)
 8008b4e:	f7fe fc80 	bl	8007452 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <xTaskRemoveFromEventList+0xc4>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d905      	bls.n	8008b6c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <xTaskRemoveFromEventList+0xc8>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e001      	b.n	8008b70 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b70:	697b      	ldr	r3, [r7, #20]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20001650 	.word	0x20001650
 8008b80:	20001630 	.word	0x20001630
 8008b84:	20001158 	.word	0x20001158
 8008b88:	200015e8 	.word	0x200015e8
 8008b8c:	20001154 	.word	0x20001154
 8008b90:	2000163c 	.word	0x2000163c

08008b94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <vTaskInternalSetTimeOutState+0x24>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <vTaskInternalSetTimeOutState+0x28>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	605a      	str	r2, [r3, #4]
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	20001640 	.word	0x20001640
 8008bbc:	2000162c 	.word	0x2000162c

08008bc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10c      	bne.n	8008bea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	b672      	cpsid	i
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	b662      	cpsie	i
 8008be4:	613b      	str	r3, [r7, #16]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10c      	bne.n	8008c0a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	b672      	cpsid	i
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	b662      	cpsie	i
 8008c04:	60fb      	str	r3, [r7, #12]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008c0a:	f000 fe77 	bl	80098fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c0e:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <xTaskCheckForTimeOut+0xc4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c26:	d102      	bne.n	8008c2e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e023      	b.n	8008c76 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b15      	ldr	r3, [pc, #84]	; (8008c88 <xTaskCheckForTimeOut+0xc8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d007      	beq.n	8008c4a <xTaskCheckForTimeOut+0x8a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d302      	bcc.n	8008c4a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e015      	b.n	8008c76 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d20b      	bcs.n	8008c6c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	1ad2      	subs	r2, r2, r3
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff ff97 	bl	8008b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	e004      	b.n	8008c76 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c72:	2301      	movs	r3, #1
 8008c74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c76:	f000 fe75 	bl	8009964 <vPortExitCritical>

	return xReturn;
 8008c7a:	69fb      	ldr	r3, [r7, #28]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3720      	adds	r7, #32
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	2000162c 	.word	0x2000162c
 8008c88:	20001640 	.word	0x20001640

08008c8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c90:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <vTaskMissedYield+0x14>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	601a      	str	r2, [r3, #0]
}
 8008c96:	bf00      	nop
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	2000163c 	.word	0x2000163c

08008ca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cac:	f000 f852 	bl	8008d54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <prvIdleTask+0x28>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d9f9      	bls.n	8008cac <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cb8:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <prvIdleTask+0x2c>)
 8008cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cc8:	e7f0      	b.n	8008cac <prvIdleTask+0x8>
 8008cca:	bf00      	nop
 8008ccc:	20001158 	.word	0x20001158
 8008cd0:	e000ed04 	.word	0xe000ed04

08008cd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cda:	2300      	movs	r3, #0
 8008cdc:	607b      	str	r3, [r7, #4]
 8008cde:	e00c      	b.n	8008cfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4a12      	ldr	r2, [pc, #72]	; (8008d34 <prvInitialiseTaskLists+0x60>)
 8008cec:	4413      	add	r3, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fb82 	bl	80073f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	607b      	str	r3, [r7, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b37      	cmp	r3, #55	; 0x37
 8008cfe:	d9ef      	bls.n	8008ce0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d00:	480d      	ldr	r0, [pc, #52]	; (8008d38 <prvInitialiseTaskLists+0x64>)
 8008d02:	f7fe fb79 	bl	80073f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d06:	480d      	ldr	r0, [pc, #52]	; (8008d3c <prvInitialiseTaskLists+0x68>)
 8008d08:	f7fe fb76 	bl	80073f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d0c:	480c      	ldr	r0, [pc, #48]	; (8008d40 <prvInitialiseTaskLists+0x6c>)
 8008d0e:	f7fe fb73 	bl	80073f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d12:	480c      	ldr	r0, [pc, #48]	; (8008d44 <prvInitialiseTaskLists+0x70>)
 8008d14:	f7fe fb70 	bl	80073f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d18:	480b      	ldr	r0, [pc, #44]	; (8008d48 <prvInitialiseTaskLists+0x74>)
 8008d1a:	f7fe fb6d 	bl	80073f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d1e:	4b0b      	ldr	r3, [pc, #44]	; (8008d4c <prvInitialiseTaskLists+0x78>)
 8008d20:	4a05      	ldr	r2, [pc, #20]	; (8008d38 <prvInitialiseTaskLists+0x64>)
 8008d22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d24:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <prvInitialiseTaskLists+0x7c>)
 8008d26:	4a05      	ldr	r2, [pc, #20]	; (8008d3c <prvInitialiseTaskLists+0x68>)
 8008d28:	601a      	str	r2, [r3, #0]
}
 8008d2a:	bf00      	nop
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20001158 	.word	0x20001158
 8008d38:	200015b8 	.word	0x200015b8
 8008d3c:	200015cc 	.word	0x200015cc
 8008d40:	200015e8 	.word	0x200015e8
 8008d44:	200015fc 	.word	0x200015fc
 8008d48:	20001614 	.word	0x20001614
 8008d4c:	200015e0 	.word	0x200015e0
 8008d50:	200015e4 	.word	0x200015e4

08008d54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d5a:	e019      	b.n	8008d90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d5c:	f000 fdce 	bl	80098fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d60:	4b10      	ldr	r3, [pc, #64]	; (8008da4 <prvCheckTasksWaitingTermination+0x50>)
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fbcd 	bl	800750c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d72:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <prvCheckTasksWaitingTermination+0x54>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	4a0b      	ldr	r2, [pc, #44]	; (8008da8 <prvCheckTasksWaitingTermination+0x54>)
 8008d7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <prvCheckTasksWaitingTermination+0x58>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	4a0a      	ldr	r2, [pc, #40]	; (8008dac <prvCheckTasksWaitingTermination+0x58>)
 8008d84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d86:	f000 fded 	bl	8009964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f810 	bl	8008db0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d90:	4b06      	ldr	r3, [pc, #24]	; (8008dac <prvCheckTasksWaitingTermination+0x58>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e1      	bne.n	8008d5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200015fc 	.word	0x200015fc
 8008da8:	20001628 	.word	0x20001628
 8008dac:	20001610 	.word	0x20001610

08008db0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3354      	adds	r3, #84	; 0x54
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f001 fe0b 	bl	800a9d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d108      	bne.n	8008dde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 ff89 	bl	8009ce8 <vPortFree>
				vPortFree( pxTCB );
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 ff86 	bl	8009ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ddc:	e01a      	b.n	8008e14 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d103      	bne.n	8008df0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 ff7d 	bl	8009ce8 <vPortFree>
	}
 8008dee:	e011      	b.n	8008e14 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d00c      	beq.n	8008e14 <prvDeleteTCB+0x64>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	b672      	cpsid	i
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	b662      	cpsie	i
 8008e0e:	60fb      	str	r3, [r7, #12]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <prvDeleteTCB+0x62>
	}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e22:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <prvResetNextTaskUnblockTime+0x38>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <prvResetNextTaskUnblockTime+0x3c>)
 8008e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e34:	e008      	b.n	8008e48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e36:	4b07      	ldr	r3, [pc, #28]	; (8008e54 <prvResetNextTaskUnblockTime+0x38>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	4a04      	ldr	r2, [pc, #16]	; (8008e58 <prvResetNextTaskUnblockTime+0x3c>)
 8008e46:	6013      	str	r3, [r2, #0]
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	200015e0 	.word	0x200015e0
 8008e58:	20001648 	.word	0x20001648

08008e5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e62:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <xTaskGetSchedulerState+0x34>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	607b      	str	r3, [r7, #4]
 8008e6e:	e008      	b.n	8008e82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e70:	4b08      	ldr	r3, [pc, #32]	; (8008e94 <xTaskGetSchedulerState+0x38>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	607b      	str	r3, [r7, #4]
 8008e7c:	e001      	b.n	8008e82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e82:	687b      	ldr	r3, [r7, #4]
	}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	20001634 	.word	0x20001634
 8008e94:	20001650 	.word	0x20001650

08008e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d05a      	beq.n	8008f64 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008eae:	4b30      	ldr	r3, [pc, #192]	; (8008f70 <xTaskPriorityDisinherit+0xd8>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d00c      	beq.n	8008ed2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	b672      	cpsid	i
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	b662      	cpsie	i
 8008ecc:	60fb      	str	r3, [r7, #12]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10c      	bne.n	8008ef4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	b672      	cpsid	i
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	b662      	cpsie	i
 8008eee:	60bb      	str	r3, [r7, #8]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef8:	1e5a      	subs	r2, r3, #1
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d02c      	beq.n	8008f64 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d128      	bne.n	8008f64 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	3304      	adds	r3, #4
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe faf8 	bl	800750c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f34:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <xTaskPriorityDisinherit+0xdc>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d903      	bls.n	8008f44 <xTaskPriorityDisinherit+0xac>
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	4a0c      	ldr	r2, [pc, #48]	; (8008f74 <xTaskPriorityDisinherit+0xdc>)
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <xTaskPriorityDisinherit+0xe0>)
 8008f52:	441a      	add	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	f7fe fa79 	bl	8007452 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f64:	697b      	ldr	r3, [r7, #20]
	}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20001154 	.word	0x20001154
 8008f74:	20001630 	.word	0x20001630
 8008f78:	20001158 	.word	0x20001158

08008f7c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f86:	4b21      	ldr	r3, [pc, #132]	; (800900c <prvAddCurrentTaskToDelayedList+0x90>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f8c:	4b20      	ldr	r3, [pc, #128]	; (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3304      	adds	r3, #4
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe faba 	bl	800750c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9e:	d10a      	bne.n	8008fb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fa6:	4b1a      	ldr	r3, [pc, #104]	; (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4819      	ldr	r0, [pc, #100]	; (8009014 <prvAddCurrentTaskToDelayedList+0x98>)
 8008fb0:	f7fe fa4f 	bl	8007452 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fb4:	e026      	b.n	8009004 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fbe:	4b14      	ldr	r3, [pc, #80]	; (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d209      	bcs.n	8008fe2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f7fe fa5d 	bl	800749a <vListInsert>
}
 8008fe0:	e010      	b.n	8009004 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fe2:	4b0e      	ldr	r3, [pc, #56]	; (800901c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3304      	adds	r3, #4
 8008fec:	4619      	mov	r1, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	f7fe fa53 	bl	800749a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d202      	bcs.n	8009004 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ffe:	4a08      	ldr	r2, [pc, #32]	; (8009020 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6013      	str	r3, [r2, #0]
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	2000162c 	.word	0x2000162c
 8009010:	20001154 	.word	0x20001154
 8009014:	20001614 	.word	0x20001614
 8009018:	200015e4 	.word	0x200015e4
 800901c:	200015e0 	.word	0x200015e0
 8009020:	20001648 	.word	0x20001648

08009024 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800902e:	f000 fb15 	bl	800965c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009032:	4b1d      	ldr	r3, [pc, #116]	; (80090a8 <xTimerCreateTimerTask+0x84>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d021      	beq.n	800907e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009042:	1d3a      	adds	r2, r7, #4
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	f107 030c 	add.w	r3, r7, #12
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe f9b9 	bl	80073c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	9202      	str	r2, [sp, #8]
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	2302      	movs	r3, #2
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	2300      	movs	r3, #0
 8009062:	460a      	mov	r2, r1
 8009064:	4911      	ldr	r1, [pc, #68]	; (80090ac <xTimerCreateTimerTask+0x88>)
 8009066:	4812      	ldr	r0, [pc, #72]	; (80090b0 <xTimerCreateTimerTask+0x8c>)
 8009068:	f7fe ff84 	bl	8007f74 <xTaskCreateStatic>
 800906c:	4603      	mov	r3, r0
 800906e:	4a11      	ldr	r2, [pc, #68]	; (80090b4 <xTimerCreateTimerTask+0x90>)
 8009070:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009072:	4b10      	ldr	r3, [pc, #64]	; (80090b4 <xTimerCreateTimerTask+0x90>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800907a:	2301      	movs	r3, #1
 800907c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10c      	bne.n	800909e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	b672      	cpsid	i
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	b662      	cpsie	i
 8009098:	613b      	str	r3, [r7, #16]
}
 800909a:	bf00      	nop
 800909c:	e7fe      	b.n	800909c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800909e:	697b      	ldr	r3, [r7, #20]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	20001684 	.word	0x20001684
 80090ac:	0800ce04 	.word	0x0800ce04
 80090b0:	080091f5 	.word	0x080091f5
 80090b4:	20001688 	.word	0x20001688

080090b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08a      	sub	sp, #40	; 0x28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10c      	bne.n	80090ea <xTimerGenericCommand+0x32>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	b672      	cpsid	i
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	b662      	cpsie	i
 80090e4:	623b      	str	r3, [r7, #32]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090ea:	4b1a      	ldr	r3, [pc, #104]	; (8009154 <xTimerGenericCommand+0x9c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d02a      	beq.n	8009148 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b05      	cmp	r3, #5
 8009102:	dc18      	bgt.n	8009136 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009104:	f7ff feaa 	bl	8008e5c <xTaskGetSchedulerState>
 8009108:	4603      	mov	r3, r0
 800910a:	2b02      	cmp	r3, #2
 800910c:	d109      	bne.n	8009122 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800910e:	4b11      	ldr	r3, [pc, #68]	; (8009154 <xTimerGenericCommand+0x9c>)
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f107 0110 	add.w	r1, r7, #16
 8009116:	2300      	movs	r3, #0
 8009118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911a:	f7fe fb31 	bl	8007780 <xQueueGenericSend>
 800911e:	6278      	str	r0, [r7, #36]	; 0x24
 8009120:	e012      	b.n	8009148 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009122:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <xTimerGenericCommand+0x9c>)
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f107 0110 	add.w	r1, r7, #16
 800912a:	2300      	movs	r3, #0
 800912c:	2200      	movs	r2, #0
 800912e:	f7fe fb27 	bl	8007780 <xQueueGenericSend>
 8009132:	6278      	str	r0, [r7, #36]	; 0x24
 8009134:	e008      	b.n	8009148 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009136:	4b07      	ldr	r3, [pc, #28]	; (8009154 <xTimerGenericCommand+0x9c>)
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	f107 0110 	add.w	r1, r7, #16
 800913e:	2300      	movs	r3, #0
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	f7fe fc23 	bl	800798c <xQueueGenericSendFromISR>
 8009146:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800914a:	4618      	mov	r0, r3
 800914c:	3728      	adds	r7, #40	; 0x28
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20001684 	.word	0x20001684

08009158 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af02      	add	r7, sp, #8
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009162:	4b23      	ldr	r3, [pc, #140]	; (80091f0 <prvProcessExpiredTimer+0x98>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3304      	adds	r3, #4
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe f9cb 	bl	800750c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d024      	beq.n	80091ce <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	699a      	ldr	r2, [r3, #24]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	18d1      	adds	r1, r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	6978      	ldr	r0, [r7, #20]
 8009192:	f000 f8d3 	bl	800933c <prvInsertTimerInActiveList>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d021      	beq.n	80091e0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800919c:	2300      	movs	r3, #0
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	2100      	movs	r1, #0
 80091a6:	6978      	ldr	r0, [r7, #20]
 80091a8:	f7ff ff86 	bl	80090b8 <xTimerGenericCommand>
 80091ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d115      	bne.n	80091e0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	b672      	cpsid	i
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	b662      	cpsie	i
 80091c8:	60fb      	str	r3, [r7, #12]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091d4:	f023 0301 	bic.w	r3, r3, #1
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	6978      	ldr	r0, [r7, #20]
 80091e6:	4798      	blx	r3
}
 80091e8:	bf00      	nop
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	2000167c 	.word	0x2000167c

080091f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091fc:	f107 0308 	add.w	r3, r7, #8
 8009200:	4618      	mov	r0, r3
 8009202:	f000 f857 	bl	80092b4 <prvGetNextExpireTime>
 8009206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	4619      	mov	r1, r3
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 f803 	bl	8009218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009212:	f000 f8d5 	bl	80093c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009216:	e7f1      	b.n	80091fc <prvTimerTask+0x8>

08009218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009222:	f7ff fa1d 	bl	8008660 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009226:	f107 0308 	add.w	r3, r7, #8
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f866 	bl	80092fc <prvSampleTimeNow>
 8009230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d130      	bne.n	800929a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <prvProcessTimerOrBlockTask+0x3c>
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	429a      	cmp	r2, r3
 8009244:	d806      	bhi.n	8009254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009246:	f7ff fa19 	bl	800867c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff ff83 	bl	8009158 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009252:	e024      	b.n	800929e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d008      	beq.n	800926c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800925a:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <prvProcessTimerOrBlockTask+0x90>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <prvProcessTimerOrBlockTask+0x50>
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <prvProcessTimerOrBlockTask+0x52>
 8009268:	2300      	movs	r3, #0
 800926a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800926c:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <prvProcessTimerOrBlockTask+0x94>)
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4619      	mov	r1, r3
 800927a:	f7fe fe47 	bl	8007f0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800927e:	f7ff f9fd 	bl	800867c <xTaskResumeAll>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009288:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <prvProcessTimerOrBlockTask+0x98>)
 800928a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	f3bf 8f6f 	isb	sy
}
 8009298:	e001      	b.n	800929e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800929a:	f7ff f9ef 	bl	800867c <xTaskResumeAll>
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20001680 	.word	0x20001680
 80092ac:	20001684 	.word	0x20001684
 80092b0:	e000ed04 	.word	0xe000ed04

080092b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092bc:	4b0e      	ldr	r3, [pc, #56]	; (80092f8 <prvGetNextExpireTime+0x44>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <prvGetNextExpireTime+0x16>
 80092c6:	2201      	movs	r2, #1
 80092c8:	e000      	b.n	80092cc <prvGetNextExpireTime+0x18>
 80092ca:	2200      	movs	r2, #0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d105      	bne.n	80092e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <prvGetNextExpireTime+0x44>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e001      	b.n	80092e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092e8:	68fb      	ldr	r3, [r7, #12]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	2000167c 	.word	0x2000167c

080092fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009304:	f7ff fa5a 	bl	80087bc <xTaskGetTickCount>
 8009308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800930a:	4b0b      	ldr	r3, [pc, #44]	; (8009338 <prvSampleTimeNow+0x3c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	429a      	cmp	r2, r3
 8009312:	d205      	bcs.n	8009320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009314:	f000 f93c 	bl	8009590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e002      	b.n	8009326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009326:	4a04      	ldr	r2, [pc, #16]	; (8009338 <prvSampleTimeNow+0x3c>)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800932c:	68fb      	ldr	r3, [r7, #12]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	2000168c 	.word	0x2000168c

0800933c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d812      	bhi.n	8009388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	429a      	cmp	r2, r3
 800936e:	d302      	bcc.n	8009376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009370:	2301      	movs	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	e01b      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <prvInsertTimerInActiveList+0x7c>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3304      	adds	r3, #4
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f7fe f88a 	bl	800749a <vListInsert>
 8009386:	e012      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d206      	bcs.n	800939e <prvInsertTimerInActiveList+0x62>
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	429a      	cmp	r2, r3
 8009396:	d302      	bcc.n	800939e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e007      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800939e:	4b07      	ldr	r3, [pc, #28]	; (80093bc <prvInsertTimerInActiveList+0x80>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fe f876 	bl	800749a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093ae:	697b      	ldr	r3, [r7, #20]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20001680 	.word	0x20001680
 80093bc:	2000167c 	.word	0x2000167c

080093c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08e      	sub	sp, #56	; 0x38
 80093c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093c6:	e0d0      	b.n	800956a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	da1a      	bge.n	8009404 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093ce:	1d3b      	adds	r3, r7, #4
 80093d0:	3304      	adds	r3, #4
 80093d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10c      	bne.n	80093f4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	b672      	cpsid	i
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	b662      	cpsie	i
 80093ee:	61fb      	str	r3, [r7, #28]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fa:	6850      	ldr	r0, [r2, #4]
 80093fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fe:	6892      	ldr	r2, [r2, #8]
 8009400:	4611      	mov	r1, r2
 8009402:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f2c0 80af 	blt.w	800956a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d004      	beq.n	8009422 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	3304      	adds	r3, #4
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe f875 	bl	800750c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009422:	463b      	mov	r3, r7
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff ff69 	bl	80092fc <prvSampleTimeNow>
 800942a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b09      	cmp	r3, #9
 8009430:	f200 809a 	bhi.w	8009568 <prvProcessReceivedCommands+0x1a8>
 8009434:	a201      	add	r2, pc, #4	; (adr r2, 800943c <prvProcessReceivedCommands+0x7c>)
 8009436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943a:	bf00      	nop
 800943c:	08009465 	.word	0x08009465
 8009440:	08009465 	.word	0x08009465
 8009444:	08009465 	.word	0x08009465
 8009448:	080094dd 	.word	0x080094dd
 800944c:	080094f1 	.word	0x080094f1
 8009450:	0800953f 	.word	0x0800953f
 8009454:	08009465 	.word	0x08009465
 8009458:	08009465 	.word	0x08009465
 800945c:	080094dd 	.word	0x080094dd
 8009460:	080094f1 	.word	0x080094f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800946a:	f043 0301 	orr.w	r3, r3, #1
 800946e:	b2da      	uxtb	r2, r3
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	18d1      	adds	r1, r2, r3
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009484:	f7ff ff5a 	bl	800933c <prvInsertTimerInActiveList>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d06d      	beq.n	800956a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009494:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d062      	beq.n	800956a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	441a      	add	r2, r3
 80094ac:	2300      	movs	r3, #0
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	2300      	movs	r3, #0
 80094b2:	2100      	movs	r1, #0
 80094b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b6:	f7ff fdff 	bl	80090b8 <xTimerGenericCommand>
 80094ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d153      	bne.n	800956a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	b672      	cpsid	i
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	b662      	cpsie	i
 80094d6:	61bb      	str	r3, [r7, #24]
}
 80094d8:	bf00      	nop
 80094da:	e7fe      	b.n	80094da <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e2:	f023 0301 	bic.w	r3, r3, #1
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094ee:	e03c      	b.n	800956a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094f6:	f043 0301 	orr.w	r3, r3, #1
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10c      	bne.n	800952a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	b672      	cpsid	i
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	b662      	cpsie	i
 8009524:	617b      	str	r3, [r7, #20]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	18d1      	adds	r1, r2, r3
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009538:	f7ff ff00 	bl	800933c <prvInsertTimerInActiveList>
					break;
 800953c:	e015      	b.n	800956a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d103      	bne.n	8009554 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800954c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954e:	f000 fbcb 	bl	8009ce8 <vPortFree>
 8009552:	e00a      	b.n	800956a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800955a:	f023 0301 	bic.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009566:	e000      	b.n	800956a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8009568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800956a:	4b08      	ldr	r3, [pc, #32]	; (800958c <prvProcessReceivedCommands+0x1cc>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	1d39      	adds	r1, r7, #4
 8009570:	2200      	movs	r2, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe faaa 	bl	8007acc <xQueueReceive>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	f47f af24 	bne.w	80093c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	3730      	adds	r7, #48	; 0x30
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20001684 	.word	0x20001684

08009590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009596:	e04a      	b.n	800962e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009598:	4b2e      	ldr	r3, [pc, #184]	; (8009654 <prvSwitchTimerLists+0xc4>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a2:	4b2c      	ldr	r3, [pc, #176]	; (8009654 <prvSwitchTimerLists+0xc4>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fd ffab 	bl	800750c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d030      	beq.n	800962e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4413      	add	r3, r2
 80095d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d90e      	bls.n	80095fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ea:	4b1a      	ldr	r3, [pc, #104]	; (8009654 <prvSwitchTimerLists+0xc4>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4619      	mov	r1, r3
 80095f4:	4610      	mov	r0, r2
 80095f6:	f7fd ff50 	bl	800749a <vListInsert>
 80095fa:	e018      	b.n	800962e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095fc:	2300      	movs	r3, #0
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	2300      	movs	r3, #0
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	2100      	movs	r1, #0
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff fd56 	bl	80090b8 <xTimerGenericCommand>
 800960c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10c      	bne.n	800962e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	b672      	cpsid	i
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	b662      	cpsie	i
 8009628:	603b      	str	r3, [r7, #0]
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <prvSwitchTimerLists+0xc4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1af      	bne.n	8009598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009638:	4b06      	ldr	r3, [pc, #24]	; (8009654 <prvSwitchTimerLists+0xc4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800963e:	4b06      	ldr	r3, [pc, #24]	; (8009658 <prvSwitchTimerLists+0xc8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a04      	ldr	r2, [pc, #16]	; (8009654 <prvSwitchTimerLists+0xc4>)
 8009644:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009646:	4a04      	ldr	r2, [pc, #16]	; (8009658 <prvSwitchTimerLists+0xc8>)
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	6013      	str	r3, [r2, #0]
}
 800964c:	bf00      	nop
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	2000167c 	.word	0x2000167c
 8009658:	20001680 	.word	0x20001680

0800965c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009662:	f000 f94b 	bl	80098fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009666:	4b15      	ldr	r3, [pc, #84]	; (80096bc <prvCheckForValidListAndQueue+0x60>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d120      	bne.n	80096b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800966e:	4814      	ldr	r0, [pc, #80]	; (80096c0 <prvCheckForValidListAndQueue+0x64>)
 8009670:	f7fd fec2 	bl	80073f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009674:	4813      	ldr	r0, [pc, #76]	; (80096c4 <prvCheckForValidListAndQueue+0x68>)
 8009676:	f7fd febf 	bl	80073f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800967a:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <prvCheckForValidListAndQueue+0x6c>)
 800967c:	4a10      	ldr	r2, [pc, #64]	; (80096c0 <prvCheckForValidListAndQueue+0x64>)
 800967e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009680:	4b12      	ldr	r3, [pc, #72]	; (80096cc <prvCheckForValidListAndQueue+0x70>)
 8009682:	4a10      	ldr	r2, [pc, #64]	; (80096c4 <prvCheckForValidListAndQueue+0x68>)
 8009684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009686:	2300      	movs	r3, #0
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <prvCheckForValidListAndQueue+0x74>)
 800968c:	4a11      	ldr	r2, [pc, #68]	; (80096d4 <prvCheckForValidListAndQueue+0x78>)
 800968e:	2110      	movs	r1, #16
 8009690:	200a      	movs	r0, #10
 8009692:	f7fd ffcf 	bl	8007634 <xQueueGenericCreateStatic>
 8009696:	4603      	mov	r3, r0
 8009698:	4a08      	ldr	r2, [pc, #32]	; (80096bc <prvCheckForValidListAndQueue+0x60>)
 800969a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800969c:	4b07      	ldr	r3, [pc, #28]	; (80096bc <prvCheckForValidListAndQueue+0x60>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096a4:	4b05      	ldr	r3, [pc, #20]	; (80096bc <prvCheckForValidListAndQueue+0x60>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	490b      	ldr	r1, [pc, #44]	; (80096d8 <prvCheckForValidListAndQueue+0x7c>)
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fc04 	bl	8007eb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096b0:	f000 f958 	bl	8009964 <vPortExitCritical>
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20001684 	.word	0x20001684
 80096c0:	20001654 	.word	0x20001654
 80096c4:	20001668 	.word	0x20001668
 80096c8:	2000167c 	.word	0x2000167c
 80096cc:	20001680 	.word	0x20001680
 80096d0:	20001730 	.word	0x20001730
 80096d4:	20001690 	.word	0x20001690
 80096d8:	0800ce0c 	.word	0x0800ce0c

080096dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3b04      	subs	r3, #4
 80096ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3b04      	subs	r3, #4
 80096fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f023 0201 	bic.w	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3b04      	subs	r3, #4
 800970a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800970c:	4a0c      	ldr	r2, [pc, #48]	; (8009740 <pxPortInitialiseStack+0x64>)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3b14      	subs	r3, #20
 8009716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3b04      	subs	r3, #4
 8009722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f06f 0202 	mvn.w	r2, #2
 800972a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3b20      	subs	r3, #32
 8009730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009732:	68fb      	ldr	r3, [r7, #12]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	08009745 	.word	0x08009745

08009744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800974e:	4b14      	ldr	r3, [pc, #80]	; (80097a0 <prvTaskExitError+0x5c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d00c      	beq.n	8009772 <prvTaskExitError+0x2e>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	b672      	cpsid	i
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	b662      	cpsie	i
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <prvTaskExitError+0x2c>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	b672      	cpsid	i
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	b662      	cpsie	i
 8009786:	60bb      	str	r3, [r7, #8]
}
 8009788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800978a:	bf00      	nop
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0fc      	beq.n	800978c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009792:	bf00      	nop
 8009794:	bf00      	nop
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	20000018 	.word	0x20000018
	...

080097b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <pxCurrentTCBConst2>)
 80097b2:	6819      	ldr	r1, [r3, #0]
 80097b4:	6808      	ldr	r0, [r1, #0]
 80097b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	f380 8809 	msr	PSP, r0
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f380 8811 	msr	BASEPRI, r0
 80097ca:	4770      	bx	lr
 80097cc:	f3af 8000 	nop.w

080097d0 <pxCurrentTCBConst2>:
 80097d0:	20001154 	.word	0x20001154
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop

080097d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097d8:	4808      	ldr	r0, [pc, #32]	; (80097fc <prvPortStartFirstTask+0x24>)
 80097da:	6800      	ldr	r0, [r0, #0]
 80097dc:	6800      	ldr	r0, [r0, #0]
 80097de:	f380 8808 	msr	MSP, r0
 80097e2:	f04f 0000 	mov.w	r0, #0
 80097e6:	f380 8814 	msr	CONTROL, r0
 80097ea:	b662      	cpsie	i
 80097ec:	b661      	cpsie	f
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	df00      	svc	0
 80097f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097fa:	bf00      	nop
 80097fc:	e000ed08 	.word	0xe000ed08

08009800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009806:	4b37      	ldr	r3, [pc, #220]	; (80098e4 <xPortStartScheduler+0xe4>)
 8009808:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	22ff      	movs	r2, #255	; 0xff
 8009816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009828:	b2da      	uxtb	r2, r3
 800982a:	4b2f      	ldr	r3, [pc, #188]	; (80098e8 <xPortStartScheduler+0xe8>)
 800982c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800982e:	4b2f      	ldr	r3, [pc, #188]	; (80098ec <xPortStartScheduler+0xec>)
 8009830:	2207      	movs	r2, #7
 8009832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009834:	e009      	b.n	800984a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009836:	4b2d      	ldr	r3, [pc, #180]	; (80098ec <xPortStartScheduler+0xec>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3b01      	subs	r3, #1
 800983c:	4a2b      	ldr	r2, [pc, #172]	; (80098ec <xPortStartScheduler+0xec>)
 800983e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	b2db      	uxtb	r3, r3
 8009848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009852:	2b80      	cmp	r3, #128	; 0x80
 8009854:	d0ef      	beq.n	8009836 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009856:	4b25      	ldr	r3, [pc, #148]	; (80098ec <xPortStartScheduler+0xec>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f1c3 0307 	rsb	r3, r3, #7
 800985e:	2b04      	cmp	r3, #4
 8009860:	d00c      	beq.n	800987c <xPortStartScheduler+0x7c>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	b672      	cpsid	i
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	b662      	cpsie	i
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800987c:	4b1b      	ldr	r3, [pc, #108]	; (80098ec <xPortStartScheduler+0xec>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	4a1a      	ldr	r2, [pc, #104]	; (80098ec <xPortStartScheduler+0xec>)
 8009884:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009886:	4b19      	ldr	r3, [pc, #100]	; (80098ec <xPortStartScheduler+0xec>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800988e:	4a17      	ldr	r2, [pc, #92]	; (80098ec <xPortStartScheduler+0xec>)
 8009890:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	b2da      	uxtb	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800989a:	4b15      	ldr	r3, [pc, #84]	; (80098f0 <xPortStartScheduler+0xf0>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a14      	ldr	r2, [pc, #80]	; (80098f0 <xPortStartScheduler+0xf0>)
 80098a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098a6:	4b12      	ldr	r3, [pc, #72]	; (80098f0 <xPortStartScheduler+0xf0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a11      	ldr	r2, [pc, #68]	; (80098f0 <xPortStartScheduler+0xf0>)
 80098ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098b2:	f000 f8dd 	bl	8009a70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098b6:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <xPortStartScheduler+0xf4>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098bc:	f000 f8fc 	bl	8009ab8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098c0:	4b0d      	ldr	r3, [pc, #52]	; (80098f8 <xPortStartScheduler+0xf8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a0c      	ldr	r2, [pc, #48]	; (80098f8 <xPortStartScheduler+0xf8>)
 80098c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098cc:	f7ff ff84 	bl	80097d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098d0:	f7ff f840 	bl	8008954 <vTaskSwitchContext>
	prvTaskExitError();
 80098d4:	f7ff ff36 	bl	8009744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	e000e400 	.word	0xe000e400
 80098e8:	20001780 	.word	0x20001780
 80098ec:	20001784 	.word	0x20001784
 80098f0:	e000ed20 	.word	0xe000ed20
 80098f4:	20000018 	.word	0x20000018
 80098f8:	e000ef34 	.word	0xe000ef34

080098fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	b672      	cpsid	i
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	b662      	cpsie	i
 8009916:	607b      	str	r3, [r7, #4]
}
 8009918:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800991a:	4b10      	ldr	r3, [pc, #64]	; (800995c <vPortEnterCritical+0x60>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3301      	adds	r3, #1
 8009920:	4a0e      	ldr	r2, [pc, #56]	; (800995c <vPortEnterCritical+0x60>)
 8009922:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009924:	4b0d      	ldr	r3, [pc, #52]	; (800995c <vPortEnterCritical+0x60>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d111      	bne.n	8009950 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800992c:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <vPortEnterCritical+0x64>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00c      	beq.n	8009950 <vPortEnterCritical+0x54>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993a:	b672      	cpsid	i
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	b662      	cpsie	i
 800994a:	603b      	str	r3, [r7, #0]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <vPortEnterCritical+0x52>
	}
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	20000018 	.word	0x20000018
 8009960:	e000ed04 	.word	0xe000ed04

08009964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800996a:	4b13      	ldr	r3, [pc, #76]	; (80099b8 <vPortExitCritical+0x54>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10c      	bne.n	800998c <vPortExitCritical+0x28>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	b672      	cpsid	i
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	b662      	cpsie	i
 8009986:	607b      	str	r3, [r7, #4]
}
 8009988:	bf00      	nop
 800998a:	e7fe      	b.n	800998a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <vPortExitCritical+0x54>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3b01      	subs	r3, #1
 8009992:	4a09      	ldr	r2, [pc, #36]	; (80099b8 <vPortExitCritical+0x54>)
 8009994:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009996:	4b08      	ldr	r3, [pc, #32]	; (80099b8 <vPortExitCritical+0x54>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d105      	bne.n	80099aa <vPortExitCritical+0x46>
 800999e:	2300      	movs	r3, #0
 80099a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	f383 8811 	msr	BASEPRI, r3
}
 80099a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20000018 	.word	0x20000018
 80099bc:	00000000 	.word	0x00000000

080099c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099c0:	f3ef 8009 	mrs	r0, PSP
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4b15      	ldr	r3, [pc, #84]	; (8009a20 <pxCurrentTCBConst>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	f01e 0f10 	tst.w	lr, #16
 80099d0:	bf08      	it	eq
 80099d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	6010      	str	r0, [r2, #0]
 80099dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099e4:	b672      	cpsid	i
 80099e6:	f380 8811 	msr	BASEPRI, r0
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	b662      	cpsie	i
 80099f4:	f7fe ffae 	bl	8008954 <vTaskSwitchContext>
 80099f8:	f04f 0000 	mov.w	r0, #0
 80099fc:	f380 8811 	msr	BASEPRI, r0
 8009a00:	bc09      	pop	{r0, r3}
 8009a02:	6819      	ldr	r1, [r3, #0]
 8009a04:	6808      	ldr	r0, [r1, #0]
 8009a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0a:	f01e 0f10 	tst.w	lr, #16
 8009a0e:	bf08      	it	eq
 8009a10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a14:	f380 8809 	msr	PSP, r0
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop

08009a20 <pxCurrentTCBConst>:
 8009a20:	20001154 	.word	0x20001154
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop

08009a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	b672      	cpsid	i
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	b662      	cpsie	i
 8009a42:	607b      	str	r3, [r7, #4]
}
 8009a44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a46:	f7fe fec9 	bl	80087dc <xTaskIncrementTick>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a50:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <SysTick_Handler+0x44>)
 8009a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	f383 8811 	msr	BASEPRI, r3
}
 8009a62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	e000ed04 	.word	0xe000ed04

08009a70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a70:	b480      	push	{r7}
 8009a72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a74:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <vPortSetupTimerInterrupt+0x34>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <vPortSetupTimerInterrupt+0x38>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a80:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <vPortSetupTimerInterrupt+0x3c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a0a      	ldr	r2, [pc, #40]	; (8009ab0 <vPortSetupTimerInterrupt+0x40>)
 8009a86:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8a:	099b      	lsrs	r3, r3, #6
 8009a8c:	4a09      	ldr	r2, [pc, #36]	; (8009ab4 <vPortSetupTimerInterrupt+0x44>)
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a92:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <vPortSetupTimerInterrupt+0x34>)
 8009a94:	2207      	movs	r2, #7
 8009a96:	601a      	str	r2, [r3, #0]
}
 8009a98:	bf00      	nop
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	e000e010 	.word	0xe000e010
 8009aa8:	e000e018 	.word	0xe000e018
 8009aac:	20000000 	.word	0x20000000
 8009ab0:	10624dd3 	.word	0x10624dd3
 8009ab4:	e000e014 	.word	0xe000e014

08009ab8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ab8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ac8 <vPortEnableVFP+0x10>
 8009abc:	6801      	ldr	r1, [r0, #0]
 8009abe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ac2:	6001      	str	r1, [r0, #0]
 8009ac4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ac6:	bf00      	nop
 8009ac8:	e000ed88 	.word	0xe000ed88

08009acc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ad2:	f3ef 8305 	mrs	r3, IPSR
 8009ad6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b0f      	cmp	r3, #15
 8009adc:	d916      	bls.n	8009b0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ade:	4a19      	ldr	r2, [pc, #100]	; (8009b44 <vPortValidateInterruptPriority+0x78>)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ae8:	4b17      	ldr	r3, [pc, #92]	; (8009b48 <vPortValidateInterruptPriority+0x7c>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	7afa      	ldrb	r2, [r7, #11]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d20c      	bcs.n	8009b0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	b672      	cpsid	i
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	b662      	cpsie	i
 8009b06:	607b      	str	r3, [r7, #4]
}
 8009b08:	bf00      	nop
 8009b0a:	e7fe      	b.n	8009b0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b0c:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <vPortValidateInterruptPriority+0x80>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b14:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <vPortValidateInterruptPriority+0x84>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d90c      	bls.n	8009b36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	b672      	cpsid	i
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	b662      	cpsie	i
 8009b30:	603b      	str	r3, [r7, #0]
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <vPortValidateInterruptPriority+0x68>
	}
 8009b36:	bf00      	nop
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	e000e3f0 	.word	0xe000e3f0
 8009b48:	20001780 	.word	0x20001780
 8009b4c:	e000ed0c 	.word	0xe000ed0c
 8009b50:	20001784 	.word	0x20001784

08009b54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b60:	f7fe fd7e 	bl	8008660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b64:	4b5b      	ldr	r3, [pc, #364]	; (8009cd4 <pvPortMalloc+0x180>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b6c:	f000 f91a 	bl	8009da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b70:	4b59      	ldr	r3, [pc, #356]	; (8009cd8 <pvPortMalloc+0x184>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4013      	ands	r3, r2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f040 8092 	bne.w	8009ca2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01f      	beq.n	8009bc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009b84:	2208      	movs	r2, #8
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4413      	add	r3, r2
 8009b8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d016      	beq.n	8009bc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f023 0307 	bic.w	r3, r3, #7
 8009b9c:	3308      	adds	r3, #8
 8009b9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f003 0307 	and.w	r3, r3, #7
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00c      	beq.n	8009bc4 <pvPortMalloc+0x70>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	b672      	cpsid	i
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	b662      	cpsie	i
 8009bbe:	617b      	str	r3, [r7, #20]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d06b      	beq.n	8009ca2 <pvPortMalloc+0x14e>
 8009bca:	4b44      	ldr	r3, [pc, #272]	; (8009cdc <pvPortMalloc+0x188>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d866      	bhi.n	8009ca2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bd4:	4b42      	ldr	r3, [pc, #264]	; (8009ce0 <pvPortMalloc+0x18c>)
 8009bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bd8:	4b41      	ldr	r3, [pc, #260]	; (8009ce0 <pvPortMalloc+0x18c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bde:	e004      	b.n	8009bea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d903      	bls.n	8009bfc <pvPortMalloc+0xa8>
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1f1      	bne.n	8009be0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bfc:	4b35      	ldr	r3, [pc, #212]	; (8009cd4 <pvPortMalloc+0x180>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d04d      	beq.n	8009ca2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2208      	movs	r2, #8
 8009c0c:	4413      	add	r3, r2
 8009c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	2308      	movs	r3, #8
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d921      	bls.n	8009c6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00c      	beq.n	8009c54 <pvPortMalloc+0x100>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	b672      	cpsid	i
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	b662      	cpsie	i
 8009c4e:	613b      	str	r3, [r7, #16]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	1ad2      	subs	r2, r2, r3
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c66:	69b8      	ldr	r0, [r7, #24]
 8009c68:	f000 f8fe 	bl	8009e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c6c:	4b1b      	ldr	r3, [pc, #108]	; (8009cdc <pvPortMalloc+0x188>)
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	4a19      	ldr	r2, [pc, #100]	; (8009cdc <pvPortMalloc+0x188>)
 8009c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c7a:	4b18      	ldr	r3, [pc, #96]	; (8009cdc <pvPortMalloc+0x188>)
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	4b19      	ldr	r3, [pc, #100]	; (8009ce4 <pvPortMalloc+0x190>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d203      	bcs.n	8009c8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c86:	4b15      	ldr	r3, [pc, #84]	; (8009cdc <pvPortMalloc+0x188>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a16      	ldr	r2, [pc, #88]	; (8009ce4 <pvPortMalloc+0x190>)
 8009c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <pvPortMalloc+0x184>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ca2:	f7fe fceb 	bl	800867c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	f003 0307 	and.w	r3, r3, #7
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00c      	beq.n	8009cca <pvPortMalloc+0x176>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	b672      	cpsid	i
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	b662      	cpsie	i
 8009cc4:	60fb      	str	r3, [r7, #12]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <pvPortMalloc+0x174>
	return pvReturn;
 8009cca:	69fb      	ldr	r3, [r7, #28]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3728      	adds	r7, #40	; 0x28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20005390 	.word	0x20005390
 8009cd8:	2000539c 	.word	0x2000539c
 8009cdc:	20005394 	.word	0x20005394
 8009ce0:	20005388 	.word	0x20005388
 8009ce4:	20005398 	.word	0x20005398

08009ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d04c      	beq.n	8009d94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cfa:	2308      	movs	r3, #8
 8009cfc:	425b      	negs	r3, r3
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	4413      	add	r3, r2
 8009d02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	4b23      	ldr	r3, [pc, #140]	; (8009d9c <vPortFree+0xb4>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4013      	ands	r3, r2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10c      	bne.n	8009d30 <vPortFree+0x48>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1a:	b672      	cpsid	i
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	b662      	cpsie	i
 8009d2a:	60fb      	str	r3, [r7, #12]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00c      	beq.n	8009d52 <vPortFree+0x6a>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	b672      	cpsid	i
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	b662      	cpsie	i
 8009d4c:	60bb      	str	r3, [r7, #8]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <vPortFree+0xb4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d019      	beq.n	8009d94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d115      	bne.n	8009d94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <vPortFree+0xb4>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	43db      	mvns	r3, r3
 8009d72:	401a      	ands	r2, r3
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d78:	f7fe fc72 	bl	8008660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <vPortFree+0xb8>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4413      	add	r3, r2
 8009d86:	4a06      	ldr	r2, [pc, #24]	; (8009da0 <vPortFree+0xb8>)
 8009d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d8a:	6938      	ldr	r0, [r7, #16]
 8009d8c:	f000 f86c 	bl	8009e68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d90:	f7fe fc74 	bl	800867c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d94:	bf00      	nop
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	2000539c 	.word	0x2000539c
 8009da0:	20005394 	.word	0x20005394

08009da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009daa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009db0:	4b27      	ldr	r3, [pc, #156]	; (8009e50 <prvHeapInit+0xac>)
 8009db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f003 0307 	and.w	r3, r3, #7
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00c      	beq.n	8009dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3307      	adds	r3, #7
 8009dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 0307 	bic.w	r3, r3, #7
 8009dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	4a1f      	ldr	r2, [pc, #124]	; (8009e50 <prvHeapInit+0xac>)
 8009dd4:	4413      	add	r3, r2
 8009dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ddc:	4a1d      	ldr	r2, [pc, #116]	; (8009e54 <prvHeapInit+0xb0>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009de2:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <prvHeapInit+0xb0>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	4413      	add	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009df0:	2208      	movs	r2, #8
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0307 	bic.w	r3, r3, #7
 8009dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <prvHeapInit+0xb4>)
 8009e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e06:	4b14      	ldr	r3, [pc, #80]	; (8009e58 <prvHeapInit+0xb4>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e0e:	4b12      	ldr	r3, [pc, #72]	; (8009e58 <prvHeapInit+0xb4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <prvHeapInit+0xb4>)
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <prvHeapInit+0xb8>)
 8009e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <prvHeapInit+0xbc>)
 8009e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e3c:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <prvHeapInit+0xc0>)
 8009e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e42:	601a      	str	r2, [r3, #0]
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	20001788 	.word	0x20001788
 8009e54:	20005388 	.word	0x20005388
 8009e58:	20005390 	.word	0x20005390
 8009e5c:	20005398 	.word	0x20005398
 8009e60:	20005394 	.word	0x20005394
 8009e64:	2000539c 	.word	0x2000539c

08009e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e70:	4b28      	ldr	r3, [pc, #160]	; (8009f14 <prvInsertBlockIntoFreeList+0xac>)
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	e002      	b.n	8009e7c <prvInsertBlockIntoFreeList+0x14>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d8f7      	bhi.n	8009e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4413      	add	r3, r2
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d108      	bne.n	8009eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	441a      	add	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	441a      	add	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d118      	bne.n	8009ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d00d      	beq.n	8009ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	441a      	add	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	e008      	b.n	8009ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ee6:	4b0c      	ldr	r3, [pc, #48]	; (8009f18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e003      	b.n	8009ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d002      	beq.n	8009f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f06:	bf00      	nop
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20005388 	.word	0x20005388
 8009f18:	20005390 	.word	0x20005390

08009f1c <__cvt>:
 8009f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1e:	ed2d 8b02 	vpush	{d8}
 8009f22:	eeb0 8b40 	vmov.f64	d8, d0
 8009f26:	b085      	sub	sp, #20
 8009f28:	4617      	mov	r7, r2
 8009f2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009f2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009f2e:	ee18 2a90 	vmov	r2, s17
 8009f32:	f025 0520 	bic.w	r5, r5, #32
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	bfb6      	itet	lt
 8009f3a:	222d      	movlt	r2, #45	; 0x2d
 8009f3c:	2200      	movge	r2, #0
 8009f3e:	eeb1 8b40 	vneglt.f64	d8, d0
 8009f42:	2d46      	cmp	r5, #70	; 0x46
 8009f44:	460c      	mov	r4, r1
 8009f46:	701a      	strb	r2, [r3, #0]
 8009f48:	d004      	beq.n	8009f54 <__cvt+0x38>
 8009f4a:	2d45      	cmp	r5, #69	; 0x45
 8009f4c:	d100      	bne.n	8009f50 <__cvt+0x34>
 8009f4e:	3401      	adds	r4, #1
 8009f50:	2102      	movs	r1, #2
 8009f52:	e000      	b.n	8009f56 <__cvt+0x3a>
 8009f54:	2103      	movs	r1, #3
 8009f56:	ab03      	add	r3, sp, #12
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	ab02      	add	r3, sp, #8
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4633      	mov	r3, r6
 8009f62:	eeb0 0b48 	vmov.f64	d0, d8
 8009f66:	f000 fe87 	bl	800ac78 <_dtoa_r>
 8009f6a:	2d47      	cmp	r5, #71	; 0x47
 8009f6c:	d101      	bne.n	8009f72 <__cvt+0x56>
 8009f6e:	07fb      	lsls	r3, r7, #31
 8009f70:	d51a      	bpl.n	8009fa8 <__cvt+0x8c>
 8009f72:	2d46      	cmp	r5, #70	; 0x46
 8009f74:	eb00 0204 	add.w	r2, r0, r4
 8009f78:	d10c      	bne.n	8009f94 <__cvt+0x78>
 8009f7a:	7803      	ldrb	r3, [r0, #0]
 8009f7c:	2b30      	cmp	r3, #48	; 0x30
 8009f7e:	d107      	bne.n	8009f90 <__cvt+0x74>
 8009f80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f88:	bf1c      	itt	ne
 8009f8a:	f1c4 0401 	rsbne	r4, r4, #1
 8009f8e:	6034      	strne	r4, [r6, #0]
 8009f90:	6833      	ldr	r3, [r6, #0]
 8009f92:	441a      	add	r2, r3
 8009f94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9c:	bf08      	it	eq
 8009f9e:	9203      	streq	r2, [sp, #12]
 8009fa0:	2130      	movs	r1, #48	; 0x30
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d307      	bcc.n	8009fb8 <__cvt+0x9c>
 8009fa8:	9b03      	ldr	r3, [sp, #12]
 8009faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fac:	1a1b      	subs	r3, r3, r0
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	b005      	add	sp, #20
 8009fb2:	ecbd 8b02 	vpop	{d8}
 8009fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb8:	1c5c      	adds	r4, r3, #1
 8009fba:	9403      	str	r4, [sp, #12]
 8009fbc:	7019      	strb	r1, [r3, #0]
 8009fbe:	e7f0      	b.n	8009fa2 <__cvt+0x86>

08009fc0 <__exponent>:
 8009fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	bfb8      	it	lt
 8009fc8:	4249      	neglt	r1, r1
 8009fca:	f803 2b02 	strb.w	r2, [r3], #2
 8009fce:	bfb4      	ite	lt
 8009fd0:	222d      	movlt	r2, #45	; 0x2d
 8009fd2:	222b      	movge	r2, #43	; 0x2b
 8009fd4:	2909      	cmp	r1, #9
 8009fd6:	7042      	strb	r2, [r0, #1]
 8009fd8:	dd2a      	ble.n	800a030 <__exponent+0x70>
 8009fda:	f10d 0207 	add.w	r2, sp, #7
 8009fde:	4617      	mov	r7, r2
 8009fe0:	260a      	movs	r6, #10
 8009fe2:	4694      	mov	ip, r2
 8009fe4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009fe8:	fb06 1415 	mls	r4, r6, r5, r1
 8009fec:	3430      	adds	r4, #48	; 0x30
 8009fee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	2c63      	cmp	r4, #99	; 0x63
 8009ff6:	f102 32ff 	add.w	r2, r2, #4294967295
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	dcf1      	bgt.n	8009fe2 <__exponent+0x22>
 8009ffe:	3130      	adds	r1, #48	; 0x30
 800a000:	f1ac 0402 	sub.w	r4, ip, #2
 800a004:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a008:	1c41      	adds	r1, r0, #1
 800a00a:	4622      	mov	r2, r4
 800a00c:	42ba      	cmp	r2, r7
 800a00e:	d30a      	bcc.n	800a026 <__exponent+0x66>
 800a010:	f10d 0209 	add.w	r2, sp, #9
 800a014:	eba2 020c 	sub.w	r2, r2, ip
 800a018:	42bc      	cmp	r4, r7
 800a01a:	bf88      	it	hi
 800a01c:	2200      	movhi	r2, #0
 800a01e:	4413      	add	r3, r2
 800a020:	1a18      	subs	r0, r3, r0
 800a022:	b003      	add	sp, #12
 800a024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a026:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a02a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a02e:	e7ed      	b.n	800a00c <__exponent+0x4c>
 800a030:	2330      	movs	r3, #48	; 0x30
 800a032:	3130      	adds	r1, #48	; 0x30
 800a034:	7083      	strb	r3, [r0, #2]
 800a036:	70c1      	strb	r1, [r0, #3]
 800a038:	1d03      	adds	r3, r0, #4
 800a03a:	e7f1      	b.n	800a020 <__exponent+0x60>
 800a03c:	0000      	movs	r0, r0
	...

0800a040 <_printf_float>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	b08b      	sub	sp, #44	; 0x2c
 800a046:	460c      	mov	r4, r1
 800a048:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a04c:	4616      	mov	r6, r2
 800a04e:	461f      	mov	r7, r3
 800a050:	4605      	mov	r5, r0
 800a052:	f000 fcad 	bl	800a9b0 <_localeconv_r>
 800a056:	f8d0 b000 	ldr.w	fp, [r0]
 800a05a:	4658      	mov	r0, fp
 800a05c:	f7f6 f940 	bl	80002e0 <strlen>
 800a060:	2300      	movs	r3, #0
 800a062:	9308      	str	r3, [sp, #32]
 800a064:	f8d8 3000 	ldr.w	r3, [r8]
 800a068:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a06c:	6822      	ldr	r2, [r4, #0]
 800a06e:	3307      	adds	r3, #7
 800a070:	f023 0307 	bic.w	r3, r3, #7
 800a074:	f103 0108 	add.w	r1, r3, #8
 800a078:	f8c8 1000 	str.w	r1, [r8]
 800a07c:	ed93 0b00 	vldr	d0, [r3]
 800a080:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a2e0 <_printf_float+0x2a0>
 800a084:	eeb0 7bc0 	vabs.f64	d7, d0
 800a088:	eeb4 7b46 	vcmp.f64	d7, d6
 800a08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a090:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800a094:	4682      	mov	sl, r0
 800a096:	dd24      	ble.n	800a0e2 <_printf_float+0xa2>
 800a098:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a0:	d502      	bpl.n	800a0a8 <_printf_float+0x68>
 800a0a2:	232d      	movs	r3, #45	; 0x2d
 800a0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a8:	498f      	ldr	r1, [pc, #572]	; (800a2e8 <_printf_float+0x2a8>)
 800a0aa:	4b90      	ldr	r3, [pc, #576]	; (800a2ec <_printf_float+0x2ac>)
 800a0ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a0b0:	bf94      	ite	ls
 800a0b2:	4688      	movls	r8, r1
 800a0b4:	4698      	movhi	r8, r3
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	6123      	str	r3, [r4, #16]
 800a0ba:	f022 0204 	bic.w	r2, r2, #4
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6022      	str	r2, [r4, #0]
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	9700      	str	r7, [sp, #0]
 800a0c6:	4633      	mov	r3, r6
 800a0c8:	aa09      	add	r2, sp, #36	; 0x24
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 f9d1 	bl	800a474 <_printf_common>
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	f040 808a 	bne.w	800a1ec <_printf_float+0x1ac>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	b00b      	add	sp, #44	; 0x2c
 800a0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e2:	eeb4 0b40 	vcmp.f64	d0, d0
 800a0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ea:	d709      	bvc.n	800a100 <_printf_float+0xc0>
 800a0ec:	ee10 3a90 	vmov	r3, s1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bfbc      	itt	lt
 800a0f4:	232d      	movlt	r3, #45	; 0x2d
 800a0f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0fa:	497d      	ldr	r1, [pc, #500]	; (800a2f0 <_printf_float+0x2b0>)
 800a0fc:	4b7d      	ldr	r3, [pc, #500]	; (800a2f4 <_printf_float+0x2b4>)
 800a0fe:	e7d5      	b.n	800a0ac <_printf_float+0x6c>
 800a100:	6863      	ldr	r3, [r4, #4]
 800a102:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a106:	9104      	str	r1, [sp, #16]
 800a108:	1c59      	adds	r1, r3, #1
 800a10a:	d13c      	bne.n	800a186 <_printf_float+0x146>
 800a10c:	2306      	movs	r3, #6
 800a10e:	6063      	str	r3, [r4, #4]
 800a110:	2300      	movs	r3, #0
 800a112:	9303      	str	r3, [sp, #12]
 800a114:	ab08      	add	r3, sp, #32
 800a116:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a11a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a11e:	ab07      	add	r3, sp, #28
 800a120:	6861      	ldr	r1, [r4, #4]
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	6022      	str	r2, [r4, #0]
 800a126:	f10d 031b 	add.w	r3, sp, #27
 800a12a:	4628      	mov	r0, r5
 800a12c:	f7ff fef6 	bl	8009f1c <__cvt>
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	9907      	ldr	r1, [sp, #28]
 800a134:	2b47      	cmp	r3, #71	; 0x47
 800a136:	4680      	mov	r8, r0
 800a138:	d108      	bne.n	800a14c <_printf_float+0x10c>
 800a13a:	1cc8      	adds	r0, r1, #3
 800a13c:	db02      	blt.n	800a144 <_printf_float+0x104>
 800a13e:	6863      	ldr	r3, [r4, #4]
 800a140:	4299      	cmp	r1, r3
 800a142:	dd41      	ble.n	800a1c8 <_printf_float+0x188>
 800a144:	f1a9 0902 	sub.w	r9, r9, #2
 800a148:	fa5f f989 	uxtb.w	r9, r9
 800a14c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a150:	d820      	bhi.n	800a194 <_printf_float+0x154>
 800a152:	3901      	subs	r1, #1
 800a154:	464a      	mov	r2, r9
 800a156:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a15a:	9107      	str	r1, [sp, #28]
 800a15c:	f7ff ff30 	bl	8009fc0 <__exponent>
 800a160:	9a08      	ldr	r2, [sp, #32]
 800a162:	9004      	str	r0, [sp, #16]
 800a164:	1813      	adds	r3, r2, r0
 800a166:	2a01      	cmp	r2, #1
 800a168:	6123      	str	r3, [r4, #16]
 800a16a:	dc02      	bgt.n	800a172 <_printf_float+0x132>
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	07d2      	lsls	r2, r2, #31
 800a170:	d501      	bpl.n	800a176 <_printf_float+0x136>
 800a172:	3301      	adds	r3, #1
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0a2      	beq.n	800a0c4 <_printf_float+0x84>
 800a17e:	232d      	movs	r3, #45	; 0x2d
 800a180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a184:	e79e      	b.n	800a0c4 <_printf_float+0x84>
 800a186:	9904      	ldr	r1, [sp, #16]
 800a188:	2947      	cmp	r1, #71	; 0x47
 800a18a:	d1c1      	bne.n	800a110 <_printf_float+0xd0>
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1bf      	bne.n	800a110 <_printf_float+0xd0>
 800a190:	2301      	movs	r3, #1
 800a192:	e7bc      	b.n	800a10e <_printf_float+0xce>
 800a194:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a198:	d118      	bne.n	800a1cc <_printf_float+0x18c>
 800a19a:	2900      	cmp	r1, #0
 800a19c:	6863      	ldr	r3, [r4, #4]
 800a19e:	dd0b      	ble.n	800a1b8 <_printf_float+0x178>
 800a1a0:	6121      	str	r1, [r4, #16]
 800a1a2:	b913      	cbnz	r3, 800a1aa <_printf_float+0x16a>
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	07d0      	lsls	r0, r2, #31
 800a1a8:	d502      	bpl.n	800a1b0 <_printf_float+0x170>
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	440b      	add	r3, r1
 800a1ae:	6123      	str	r3, [r4, #16]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	e7de      	b.n	800a176 <_printf_float+0x136>
 800a1b8:	b913      	cbnz	r3, 800a1c0 <_printf_float+0x180>
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	07d2      	lsls	r2, r2, #31
 800a1be:	d501      	bpl.n	800a1c4 <_printf_float+0x184>
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	e7f4      	b.n	800a1ae <_printf_float+0x16e>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e7f2      	b.n	800a1ae <_printf_float+0x16e>
 800a1c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a1cc:	9b08      	ldr	r3, [sp, #32]
 800a1ce:	4299      	cmp	r1, r3
 800a1d0:	db05      	blt.n	800a1de <_printf_float+0x19e>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	6121      	str	r1, [r4, #16]
 800a1d6:	07d8      	lsls	r0, r3, #31
 800a1d8:	d5ea      	bpl.n	800a1b0 <_printf_float+0x170>
 800a1da:	1c4b      	adds	r3, r1, #1
 800a1dc:	e7e7      	b.n	800a1ae <_printf_float+0x16e>
 800a1de:	2900      	cmp	r1, #0
 800a1e0:	bfd4      	ite	le
 800a1e2:	f1c1 0202 	rsble	r2, r1, #2
 800a1e6:	2201      	movgt	r2, #1
 800a1e8:	4413      	add	r3, r2
 800a1ea:	e7e0      	b.n	800a1ae <_printf_float+0x16e>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	055a      	lsls	r2, r3, #21
 800a1f0:	d407      	bmi.n	800a202 <_printf_float+0x1c2>
 800a1f2:	6923      	ldr	r3, [r4, #16]
 800a1f4:	4642      	mov	r2, r8
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	47b8      	blx	r7
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d12a      	bne.n	800a256 <_printf_float+0x216>
 800a200:	e76a      	b.n	800a0d8 <_printf_float+0x98>
 800a202:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a206:	f240 80e0 	bls.w	800a3ca <_printf_float+0x38a>
 800a20a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a20e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a216:	d133      	bne.n	800a280 <_printf_float+0x240>
 800a218:	4a37      	ldr	r2, [pc, #220]	; (800a2f8 <_printf_float+0x2b8>)
 800a21a:	2301      	movs	r3, #1
 800a21c:	4631      	mov	r1, r6
 800a21e:	4628      	mov	r0, r5
 800a220:	47b8      	blx	r7
 800a222:	3001      	adds	r0, #1
 800a224:	f43f af58 	beq.w	800a0d8 <_printf_float+0x98>
 800a228:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	db02      	blt.n	800a236 <_printf_float+0x1f6>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	07d8      	lsls	r0, r3, #31
 800a234:	d50f      	bpl.n	800a256 <_printf_float+0x216>
 800a236:	4653      	mov	r3, sl
 800a238:	465a      	mov	r2, fp
 800a23a:	4631      	mov	r1, r6
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b8      	blx	r7
 800a240:	3001      	adds	r0, #1
 800a242:	f43f af49 	beq.w	800a0d8 <_printf_float+0x98>
 800a246:	f04f 0800 	mov.w	r8, #0
 800a24a:	f104 091a 	add.w	r9, r4, #26
 800a24e:	9b08      	ldr	r3, [sp, #32]
 800a250:	3b01      	subs	r3, #1
 800a252:	4543      	cmp	r3, r8
 800a254:	dc09      	bgt.n	800a26a <_printf_float+0x22a>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	079b      	lsls	r3, r3, #30
 800a25a:	f100 8106 	bmi.w	800a46a <_printf_float+0x42a>
 800a25e:	68e0      	ldr	r0, [r4, #12]
 800a260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a262:	4298      	cmp	r0, r3
 800a264:	bfb8      	it	lt
 800a266:	4618      	movlt	r0, r3
 800a268:	e738      	b.n	800a0dc <_printf_float+0x9c>
 800a26a:	2301      	movs	r3, #1
 800a26c:	464a      	mov	r2, r9
 800a26e:	4631      	mov	r1, r6
 800a270:	4628      	mov	r0, r5
 800a272:	47b8      	blx	r7
 800a274:	3001      	adds	r0, #1
 800a276:	f43f af2f 	beq.w	800a0d8 <_printf_float+0x98>
 800a27a:	f108 0801 	add.w	r8, r8, #1
 800a27e:	e7e6      	b.n	800a24e <_printf_float+0x20e>
 800a280:	9b07      	ldr	r3, [sp, #28]
 800a282:	2b00      	cmp	r3, #0
 800a284:	dc3a      	bgt.n	800a2fc <_printf_float+0x2bc>
 800a286:	4a1c      	ldr	r2, [pc, #112]	; (800a2f8 <_printf_float+0x2b8>)
 800a288:	2301      	movs	r3, #1
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b8      	blx	r7
 800a290:	3001      	adds	r0, #1
 800a292:	f43f af21 	beq.w	800a0d8 <_printf_float+0x98>
 800a296:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	d102      	bne.n	800a2a4 <_printf_float+0x264>
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	07d9      	lsls	r1, r3, #31
 800a2a2:	d5d8      	bpl.n	800a256 <_printf_float+0x216>
 800a2a4:	4653      	mov	r3, sl
 800a2a6:	465a      	mov	r2, fp
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b8      	blx	r7
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f43f af12 	beq.w	800a0d8 <_printf_float+0x98>
 800a2b4:	f04f 0900 	mov.w	r9, #0
 800a2b8:	f104 0a1a 	add.w	sl, r4, #26
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	425b      	negs	r3, r3
 800a2c0:	454b      	cmp	r3, r9
 800a2c2:	dc01      	bgt.n	800a2c8 <_printf_float+0x288>
 800a2c4:	9b08      	ldr	r3, [sp, #32]
 800a2c6:	e795      	b.n	800a1f4 <_printf_float+0x1b4>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	4652      	mov	r2, sl
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f af00 	beq.w	800a0d8 <_printf_float+0x98>
 800a2d8:	f109 0901 	add.w	r9, r9, #1
 800a2dc:	e7ee      	b.n	800a2bc <_printf_float+0x27c>
 800a2de:	bf00      	nop
 800a2e0:	ffffffff 	.word	0xffffffff
 800a2e4:	7fefffff 	.word	0x7fefffff
 800a2e8:	0800ce74 	.word	0x0800ce74
 800a2ec:	0800ce78 	.word	0x0800ce78
 800a2f0:	0800ce7c 	.word	0x0800ce7c
 800a2f4:	0800ce80 	.word	0x0800ce80
 800a2f8:	0800ce84 	.word	0x0800ce84
 800a2fc:	9a08      	ldr	r2, [sp, #32]
 800a2fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a300:	429a      	cmp	r2, r3
 800a302:	bfa8      	it	ge
 800a304:	461a      	movge	r2, r3
 800a306:	2a00      	cmp	r2, #0
 800a308:	4691      	mov	r9, r2
 800a30a:	dc38      	bgt.n	800a37e <_printf_float+0x33e>
 800a30c:	2300      	movs	r3, #0
 800a30e:	9305      	str	r3, [sp, #20]
 800a310:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a314:	f104 021a 	add.w	r2, r4, #26
 800a318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a31a:	9905      	ldr	r1, [sp, #20]
 800a31c:	9304      	str	r3, [sp, #16]
 800a31e:	eba3 0309 	sub.w	r3, r3, r9
 800a322:	428b      	cmp	r3, r1
 800a324:	dc33      	bgt.n	800a38e <_printf_float+0x34e>
 800a326:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	db3c      	blt.n	800a3a8 <_printf_float+0x368>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	07da      	lsls	r2, r3, #31
 800a332:	d439      	bmi.n	800a3a8 <_printf_float+0x368>
 800a334:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a338:	eba2 0903 	sub.w	r9, r2, r3
 800a33c:	9b04      	ldr	r3, [sp, #16]
 800a33e:	1ad2      	subs	r2, r2, r3
 800a340:	4591      	cmp	r9, r2
 800a342:	bfa8      	it	ge
 800a344:	4691      	movge	r9, r2
 800a346:	f1b9 0f00 	cmp.w	r9, #0
 800a34a:	dc35      	bgt.n	800a3b8 <_printf_float+0x378>
 800a34c:	f04f 0800 	mov.w	r8, #0
 800a350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a354:	f104 0a1a 	add.w	sl, r4, #26
 800a358:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	eba3 0309 	sub.w	r3, r3, r9
 800a362:	4543      	cmp	r3, r8
 800a364:	f77f af77 	ble.w	800a256 <_printf_float+0x216>
 800a368:	2301      	movs	r3, #1
 800a36a:	4652      	mov	r2, sl
 800a36c:	4631      	mov	r1, r6
 800a36e:	4628      	mov	r0, r5
 800a370:	47b8      	blx	r7
 800a372:	3001      	adds	r0, #1
 800a374:	f43f aeb0 	beq.w	800a0d8 <_printf_float+0x98>
 800a378:	f108 0801 	add.w	r8, r8, #1
 800a37c:	e7ec      	b.n	800a358 <_printf_float+0x318>
 800a37e:	4613      	mov	r3, r2
 800a380:	4631      	mov	r1, r6
 800a382:	4642      	mov	r2, r8
 800a384:	4628      	mov	r0, r5
 800a386:	47b8      	blx	r7
 800a388:	3001      	adds	r0, #1
 800a38a:	d1bf      	bne.n	800a30c <_printf_float+0x2cc>
 800a38c:	e6a4      	b.n	800a0d8 <_printf_float+0x98>
 800a38e:	2301      	movs	r3, #1
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	9204      	str	r2, [sp, #16]
 800a396:	47b8      	blx	r7
 800a398:	3001      	adds	r0, #1
 800a39a:	f43f ae9d 	beq.w	800a0d8 <_printf_float+0x98>
 800a39e:	9b05      	ldr	r3, [sp, #20]
 800a3a0:	9a04      	ldr	r2, [sp, #16]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	9305      	str	r3, [sp, #20]
 800a3a6:	e7b7      	b.n	800a318 <_printf_float+0x2d8>
 800a3a8:	4653      	mov	r3, sl
 800a3aa:	465a      	mov	r2, fp
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	d1be      	bne.n	800a334 <_printf_float+0x2f4>
 800a3b6:	e68f      	b.n	800a0d8 <_printf_float+0x98>
 800a3b8:	9a04      	ldr	r2, [sp, #16]
 800a3ba:	464b      	mov	r3, r9
 800a3bc:	4442      	add	r2, r8
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d1c1      	bne.n	800a34c <_printf_float+0x30c>
 800a3c8:	e686      	b.n	800a0d8 <_printf_float+0x98>
 800a3ca:	9a08      	ldr	r2, [sp, #32]
 800a3cc:	2a01      	cmp	r2, #1
 800a3ce:	dc01      	bgt.n	800a3d4 <_printf_float+0x394>
 800a3d0:	07db      	lsls	r3, r3, #31
 800a3d2:	d537      	bpl.n	800a444 <_printf_float+0x404>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f43f ae7a 	beq.w	800a0d8 <_printf_float+0x98>
 800a3e4:	4653      	mov	r3, sl
 800a3e6:	465a      	mov	r2, fp
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f43f ae72 	beq.w	800a0d8 <_printf_float+0x98>
 800a3f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a3f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a400:	9b08      	ldr	r3, [sp, #32]
 800a402:	d01a      	beq.n	800a43a <_printf_float+0x3fa>
 800a404:	3b01      	subs	r3, #1
 800a406:	f108 0201 	add.w	r2, r8, #1
 800a40a:	4631      	mov	r1, r6
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	d10e      	bne.n	800a432 <_printf_float+0x3f2>
 800a414:	e660      	b.n	800a0d8 <_printf_float+0x98>
 800a416:	2301      	movs	r3, #1
 800a418:	464a      	mov	r2, r9
 800a41a:	4631      	mov	r1, r6
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b8      	blx	r7
 800a420:	3001      	adds	r0, #1
 800a422:	f43f ae59 	beq.w	800a0d8 <_printf_float+0x98>
 800a426:	f108 0801 	add.w	r8, r8, #1
 800a42a:	9b08      	ldr	r3, [sp, #32]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	4543      	cmp	r3, r8
 800a430:	dcf1      	bgt.n	800a416 <_printf_float+0x3d6>
 800a432:	9b04      	ldr	r3, [sp, #16]
 800a434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a438:	e6dd      	b.n	800a1f6 <_printf_float+0x1b6>
 800a43a:	f04f 0800 	mov.w	r8, #0
 800a43e:	f104 091a 	add.w	r9, r4, #26
 800a442:	e7f2      	b.n	800a42a <_printf_float+0x3ea>
 800a444:	2301      	movs	r3, #1
 800a446:	4642      	mov	r2, r8
 800a448:	e7df      	b.n	800a40a <_printf_float+0x3ca>
 800a44a:	2301      	movs	r3, #1
 800a44c:	464a      	mov	r2, r9
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	f43f ae3f 	beq.w	800a0d8 <_printf_float+0x98>
 800a45a:	f108 0801 	add.w	r8, r8, #1
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a462:	1a5b      	subs	r3, r3, r1
 800a464:	4543      	cmp	r3, r8
 800a466:	dcf0      	bgt.n	800a44a <_printf_float+0x40a>
 800a468:	e6f9      	b.n	800a25e <_printf_float+0x21e>
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	f104 0919 	add.w	r9, r4, #25
 800a472:	e7f4      	b.n	800a45e <_printf_float+0x41e>

0800a474 <_printf_common>:
 800a474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	4616      	mov	r6, r2
 800a47a:	4699      	mov	r9, r3
 800a47c:	688a      	ldr	r2, [r1, #8]
 800a47e:	690b      	ldr	r3, [r1, #16]
 800a480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a484:	4293      	cmp	r3, r2
 800a486:	bfb8      	it	lt
 800a488:	4613      	movlt	r3, r2
 800a48a:	6033      	str	r3, [r6, #0]
 800a48c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a490:	4607      	mov	r7, r0
 800a492:	460c      	mov	r4, r1
 800a494:	b10a      	cbz	r2, 800a49a <_printf_common+0x26>
 800a496:	3301      	adds	r3, #1
 800a498:	6033      	str	r3, [r6, #0]
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	0699      	lsls	r1, r3, #26
 800a49e:	bf42      	ittt	mi
 800a4a0:	6833      	ldrmi	r3, [r6, #0]
 800a4a2:	3302      	addmi	r3, #2
 800a4a4:	6033      	strmi	r3, [r6, #0]
 800a4a6:	6825      	ldr	r5, [r4, #0]
 800a4a8:	f015 0506 	ands.w	r5, r5, #6
 800a4ac:	d106      	bne.n	800a4bc <_printf_common+0x48>
 800a4ae:	f104 0a19 	add.w	sl, r4, #25
 800a4b2:	68e3      	ldr	r3, [r4, #12]
 800a4b4:	6832      	ldr	r2, [r6, #0]
 800a4b6:	1a9b      	subs	r3, r3, r2
 800a4b8:	42ab      	cmp	r3, r5
 800a4ba:	dc26      	bgt.n	800a50a <_printf_common+0x96>
 800a4bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4c0:	1e13      	subs	r3, r2, #0
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	bf18      	it	ne
 800a4c6:	2301      	movne	r3, #1
 800a4c8:	0692      	lsls	r2, r2, #26
 800a4ca:	d42b      	bmi.n	800a524 <_printf_common+0xb0>
 800a4cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	47c0      	blx	r8
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d01e      	beq.n	800a518 <_printf_common+0xa4>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	6922      	ldr	r2, [r4, #16]
 800a4de:	f003 0306 	and.w	r3, r3, #6
 800a4e2:	2b04      	cmp	r3, #4
 800a4e4:	bf02      	ittt	eq
 800a4e6:	68e5      	ldreq	r5, [r4, #12]
 800a4e8:	6833      	ldreq	r3, [r6, #0]
 800a4ea:	1aed      	subeq	r5, r5, r3
 800a4ec:	68a3      	ldr	r3, [r4, #8]
 800a4ee:	bf0c      	ite	eq
 800a4f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4f4:	2500      	movne	r5, #0
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	bfc4      	itt	gt
 800a4fa:	1a9b      	subgt	r3, r3, r2
 800a4fc:	18ed      	addgt	r5, r5, r3
 800a4fe:	2600      	movs	r6, #0
 800a500:	341a      	adds	r4, #26
 800a502:	42b5      	cmp	r5, r6
 800a504:	d11a      	bne.n	800a53c <_printf_common+0xc8>
 800a506:	2000      	movs	r0, #0
 800a508:	e008      	b.n	800a51c <_printf_common+0xa8>
 800a50a:	2301      	movs	r3, #1
 800a50c:	4652      	mov	r2, sl
 800a50e:	4649      	mov	r1, r9
 800a510:	4638      	mov	r0, r7
 800a512:	47c0      	blx	r8
 800a514:	3001      	adds	r0, #1
 800a516:	d103      	bne.n	800a520 <_printf_common+0xac>
 800a518:	f04f 30ff 	mov.w	r0, #4294967295
 800a51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a520:	3501      	adds	r5, #1
 800a522:	e7c6      	b.n	800a4b2 <_printf_common+0x3e>
 800a524:	18e1      	adds	r1, r4, r3
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	2030      	movs	r0, #48	; 0x30
 800a52a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a52e:	4422      	add	r2, r4
 800a530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a538:	3302      	adds	r3, #2
 800a53a:	e7c7      	b.n	800a4cc <_printf_common+0x58>
 800a53c:	2301      	movs	r3, #1
 800a53e:	4622      	mov	r2, r4
 800a540:	4649      	mov	r1, r9
 800a542:	4638      	mov	r0, r7
 800a544:	47c0      	blx	r8
 800a546:	3001      	adds	r0, #1
 800a548:	d0e6      	beq.n	800a518 <_printf_common+0xa4>
 800a54a:	3601      	adds	r6, #1
 800a54c:	e7d9      	b.n	800a502 <_printf_common+0x8e>
	...

0800a550 <_printf_i>:
 800a550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a554:	7e0f      	ldrb	r7, [r1, #24]
 800a556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a558:	2f78      	cmp	r7, #120	; 0x78
 800a55a:	4691      	mov	r9, r2
 800a55c:	4680      	mov	r8, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	469a      	mov	sl, r3
 800a562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a566:	d807      	bhi.n	800a578 <_printf_i+0x28>
 800a568:	2f62      	cmp	r7, #98	; 0x62
 800a56a:	d80a      	bhi.n	800a582 <_printf_i+0x32>
 800a56c:	2f00      	cmp	r7, #0
 800a56e:	f000 80d4 	beq.w	800a71a <_printf_i+0x1ca>
 800a572:	2f58      	cmp	r7, #88	; 0x58
 800a574:	f000 80c0 	beq.w	800a6f8 <_printf_i+0x1a8>
 800a578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a57c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a580:	e03a      	b.n	800a5f8 <_printf_i+0xa8>
 800a582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a586:	2b15      	cmp	r3, #21
 800a588:	d8f6      	bhi.n	800a578 <_printf_i+0x28>
 800a58a:	a101      	add	r1, pc, #4	; (adr r1, 800a590 <_printf_i+0x40>)
 800a58c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a590:	0800a5e9 	.word	0x0800a5e9
 800a594:	0800a5fd 	.word	0x0800a5fd
 800a598:	0800a579 	.word	0x0800a579
 800a59c:	0800a579 	.word	0x0800a579
 800a5a0:	0800a579 	.word	0x0800a579
 800a5a4:	0800a579 	.word	0x0800a579
 800a5a8:	0800a5fd 	.word	0x0800a5fd
 800a5ac:	0800a579 	.word	0x0800a579
 800a5b0:	0800a579 	.word	0x0800a579
 800a5b4:	0800a579 	.word	0x0800a579
 800a5b8:	0800a579 	.word	0x0800a579
 800a5bc:	0800a701 	.word	0x0800a701
 800a5c0:	0800a629 	.word	0x0800a629
 800a5c4:	0800a6bb 	.word	0x0800a6bb
 800a5c8:	0800a579 	.word	0x0800a579
 800a5cc:	0800a579 	.word	0x0800a579
 800a5d0:	0800a723 	.word	0x0800a723
 800a5d4:	0800a579 	.word	0x0800a579
 800a5d8:	0800a629 	.word	0x0800a629
 800a5dc:	0800a579 	.word	0x0800a579
 800a5e0:	0800a579 	.word	0x0800a579
 800a5e4:	0800a6c3 	.word	0x0800a6c3
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	1d1a      	adds	r2, r3, #4
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	602a      	str	r2, [r5, #0]
 800a5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e09f      	b.n	800a73c <_printf_i+0x1ec>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	682b      	ldr	r3, [r5, #0]
 800a600:	0607      	lsls	r7, r0, #24
 800a602:	f103 0104 	add.w	r1, r3, #4
 800a606:	6029      	str	r1, [r5, #0]
 800a608:	d501      	bpl.n	800a60e <_printf_i+0xbe>
 800a60a:	681e      	ldr	r6, [r3, #0]
 800a60c:	e003      	b.n	800a616 <_printf_i+0xc6>
 800a60e:	0646      	lsls	r6, r0, #25
 800a610:	d5fb      	bpl.n	800a60a <_printf_i+0xba>
 800a612:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a616:	2e00      	cmp	r6, #0
 800a618:	da03      	bge.n	800a622 <_printf_i+0xd2>
 800a61a:	232d      	movs	r3, #45	; 0x2d
 800a61c:	4276      	negs	r6, r6
 800a61e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a622:	485a      	ldr	r0, [pc, #360]	; (800a78c <_printf_i+0x23c>)
 800a624:	230a      	movs	r3, #10
 800a626:	e012      	b.n	800a64e <_printf_i+0xfe>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	6820      	ldr	r0, [r4, #0]
 800a62c:	1d19      	adds	r1, r3, #4
 800a62e:	6029      	str	r1, [r5, #0]
 800a630:	0605      	lsls	r5, r0, #24
 800a632:	d501      	bpl.n	800a638 <_printf_i+0xe8>
 800a634:	681e      	ldr	r6, [r3, #0]
 800a636:	e002      	b.n	800a63e <_printf_i+0xee>
 800a638:	0641      	lsls	r1, r0, #25
 800a63a:	d5fb      	bpl.n	800a634 <_printf_i+0xe4>
 800a63c:	881e      	ldrh	r6, [r3, #0]
 800a63e:	4853      	ldr	r0, [pc, #332]	; (800a78c <_printf_i+0x23c>)
 800a640:	2f6f      	cmp	r7, #111	; 0x6f
 800a642:	bf0c      	ite	eq
 800a644:	2308      	moveq	r3, #8
 800a646:	230a      	movne	r3, #10
 800a648:	2100      	movs	r1, #0
 800a64a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a64e:	6865      	ldr	r5, [r4, #4]
 800a650:	60a5      	str	r5, [r4, #8]
 800a652:	2d00      	cmp	r5, #0
 800a654:	bfa2      	ittt	ge
 800a656:	6821      	ldrge	r1, [r4, #0]
 800a658:	f021 0104 	bicge.w	r1, r1, #4
 800a65c:	6021      	strge	r1, [r4, #0]
 800a65e:	b90e      	cbnz	r6, 800a664 <_printf_i+0x114>
 800a660:	2d00      	cmp	r5, #0
 800a662:	d04b      	beq.n	800a6fc <_printf_i+0x1ac>
 800a664:	4615      	mov	r5, r2
 800a666:	fbb6 f1f3 	udiv	r1, r6, r3
 800a66a:	fb03 6711 	mls	r7, r3, r1, r6
 800a66e:	5dc7      	ldrb	r7, [r0, r7]
 800a670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a674:	4637      	mov	r7, r6
 800a676:	42bb      	cmp	r3, r7
 800a678:	460e      	mov	r6, r1
 800a67a:	d9f4      	bls.n	800a666 <_printf_i+0x116>
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d10b      	bne.n	800a698 <_printf_i+0x148>
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	07de      	lsls	r6, r3, #31
 800a684:	d508      	bpl.n	800a698 <_printf_i+0x148>
 800a686:	6923      	ldr	r3, [r4, #16]
 800a688:	6861      	ldr	r1, [r4, #4]
 800a68a:	4299      	cmp	r1, r3
 800a68c:	bfde      	ittt	le
 800a68e:	2330      	movle	r3, #48	; 0x30
 800a690:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a694:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a698:	1b52      	subs	r2, r2, r5
 800a69a:	6122      	str	r2, [r4, #16]
 800a69c:	f8cd a000 	str.w	sl, [sp]
 800a6a0:	464b      	mov	r3, r9
 800a6a2:	aa03      	add	r2, sp, #12
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	f7ff fee4 	bl	800a474 <_printf_common>
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	d14a      	bne.n	800a746 <_printf_i+0x1f6>
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b4:	b004      	add	sp, #16
 800a6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	f043 0320 	orr.w	r3, r3, #32
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	4833      	ldr	r0, [pc, #204]	; (800a790 <_printf_i+0x240>)
 800a6c4:	2778      	movs	r7, #120	; 0x78
 800a6c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	6829      	ldr	r1, [r5, #0]
 800a6ce:	061f      	lsls	r7, r3, #24
 800a6d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6d4:	d402      	bmi.n	800a6dc <_printf_i+0x18c>
 800a6d6:	065f      	lsls	r7, r3, #25
 800a6d8:	bf48      	it	mi
 800a6da:	b2b6      	uxthmi	r6, r6
 800a6dc:	07df      	lsls	r7, r3, #31
 800a6de:	bf48      	it	mi
 800a6e0:	f043 0320 	orrmi.w	r3, r3, #32
 800a6e4:	6029      	str	r1, [r5, #0]
 800a6e6:	bf48      	it	mi
 800a6e8:	6023      	strmi	r3, [r4, #0]
 800a6ea:	b91e      	cbnz	r6, 800a6f4 <_printf_i+0x1a4>
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	f023 0320 	bic.w	r3, r3, #32
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	2310      	movs	r3, #16
 800a6f6:	e7a7      	b.n	800a648 <_printf_i+0xf8>
 800a6f8:	4824      	ldr	r0, [pc, #144]	; (800a78c <_printf_i+0x23c>)
 800a6fa:	e7e4      	b.n	800a6c6 <_printf_i+0x176>
 800a6fc:	4615      	mov	r5, r2
 800a6fe:	e7bd      	b.n	800a67c <_printf_i+0x12c>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	6826      	ldr	r6, [r4, #0]
 800a704:	6961      	ldr	r1, [r4, #20]
 800a706:	1d18      	adds	r0, r3, #4
 800a708:	6028      	str	r0, [r5, #0]
 800a70a:	0635      	lsls	r5, r6, #24
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	d501      	bpl.n	800a714 <_printf_i+0x1c4>
 800a710:	6019      	str	r1, [r3, #0]
 800a712:	e002      	b.n	800a71a <_printf_i+0x1ca>
 800a714:	0670      	lsls	r0, r6, #25
 800a716:	d5fb      	bpl.n	800a710 <_printf_i+0x1c0>
 800a718:	8019      	strh	r1, [r3, #0]
 800a71a:	2300      	movs	r3, #0
 800a71c:	6123      	str	r3, [r4, #16]
 800a71e:	4615      	mov	r5, r2
 800a720:	e7bc      	b.n	800a69c <_printf_i+0x14c>
 800a722:	682b      	ldr	r3, [r5, #0]
 800a724:	1d1a      	adds	r2, r3, #4
 800a726:	602a      	str	r2, [r5, #0]
 800a728:	681d      	ldr	r5, [r3, #0]
 800a72a:	6862      	ldr	r2, [r4, #4]
 800a72c:	2100      	movs	r1, #0
 800a72e:	4628      	mov	r0, r5
 800a730:	f7f5 fd86 	bl	8000240 <memchr>
 800a734:	b108      	cbz	r0, 800a73a <_printf_i+0x1ea>
 800a736:	1b40      	subs	r0, r0, r5
 800a738:	6060      	str	r0, [r4, #4]
 800a73a:	6863      	ldr	r3, [r4, #4]
 800a73c:	6123      	str	r3, [r4, #16]
 800a73e:	2300      	movs	r3, #0
 800a740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a744:	e7aa      	b.n	800a69c <_printf_i+0x14c>
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	462a      	mov	r2, r5
 800a74a:	4649      	mov	r1, r9
 800a74c:	4640      	mov	r0, r8
 800a74e:	47d0      	blx	sl
 800a750:	3001      	adds	r0, #1
 800a752:	d0ad      	beq.n	800a6b0 <_printf_i+0x160>
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	079b      	lsls	r3, r3, #30
 800a758:	d413      	bmi.n	800a782 <_printf_i+0x232>
 800a75a:	68e0      	ldr	r0, [r4, #12]
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	4298      	cmp	r0, r3
 800a760:	bfb8      	it	lt
 800a762:	4618      	movlt	r0, r3
 800a764:	e7a6      	b.n	800a6b4 <_printf_i+0x164>
 800a766:	2301      	movs	r3, #1
 800a768:	4632      	mov	r2, r6
 800a76a:	4649      	mov	r1, r9
 800a76c:	4640      	mov	r0, r8
 800a76e:	47d0      	blx	sl
 800a770:	3001      	adds	r0, #1
 800a772:	d09d      	beq.n	800a6b0 <_printf_i+0x160>
 800a774:	3501      	adds	r5, #1
 800a776:	68e3      	ldr	r3, [r4, #12]
 800a778:	9903      	ldr	r1, [sp, #12]
 800a77a:	1a5b      	subs	r3, r3, r1
 800a77c:	42ab      	cmp	r3, r5
 800a77e:	dcf2      	bgt.n	800a766 <_printf_i+0x216>
 800a780:	e7eb      	b.n	800a75a <_printf_i+0x20a>
 800a782:	2500      	movs	r5, #0
 800a784:	f104 0619 	add.w	r6, r4, #25
 800a788:	e7f5      	b.n	800a776 <_printf_i+0x226>
 800a78a:	bf00      	nop
 800a78c:	0800ce86 	.word	0x0800ce86
 800a790:	0800ce97 	.word	0x0800ce97

0800a794 <std>:
 800a794:	2300      	movs	r3, #0
 800a796:	b510      	push	{r4, lr}
 800a798:	4604      	mov	r4, r0
 800a79a:	e9c0 3300 	strd	r3, r3, [r0]
 800a79e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7a2:	6083      	str	r3, [r0, #8]
 800a7a4:	8181      	strh	r1, [r0, #12]
 800a7a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a7a8:	81c2      	strh	r2, [r0, #14]
 800a7aa:	6183      	str	r3, [r0, #24]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	2208      	movs	r2, #8
 800a7b0:	305c      	adds	r0, #92	; 0x5c
 800a7b2:	f000 f8f4 	bl	800a99e <memset>
 800a7b6:	4b0d      	ldr	r3, [pc, #52]	; (800a7ec <std+0x58>)
 800a7b8:	6263      	str	r3, [r4, #36]	; 0x24
 800a7ba:	4b0d      	ldr	r3, [pc, #52]	; (800a7f0 <std+0x5c>)
 800a7bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7be:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <std+0x60>)
 800a7c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7c2:	4b0d      	ldr	r3, [pc, #52]	; (800a7f8 <std+0x64>)
 800a7c4:	6323      	str	r3, [r4, #48]	; 0x30
 800a7c6:	4b0d      	ldr	r3, [pc, #52]	; (800a7fc <std+0x68>)
 800a7c8:	6224      	str	r4, [r4, #32]
 800a7ca:	429c      	cmp	r4, r3
 800a7cc:	d006      	beq.n	800a7dc <std+0x48>
 800a7ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a7d2:	4294      	cmp	r4, r2
 800a7d4:	d002      	beq.n	800a7dc <std+0x48>
 800a7d6:	33d0      	adds	r3, #208	; 0xd0
 800a7d8:	429c      	cmp	r4, r3
 800a7da:	d105      	bne.n	800a7e8 <std+0x54>
 800a7dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7e4:	f000 b9ae 	b.w	800ab44 <__retarget_lock_init_recursive>
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	bf00      	nop
 800a7ec:	0800a919 	.word	0x0800a919
 800a7f0:	0800a93b 	.word	0x0800a93b
 800a7f4:	0800a973 	.word	0x0800a973
 800a7f8:	0800a997 	.word	0x0800a997
 800a7fc:	200053a0 	.word	0x200053a0

0800a800 <stdio_exit_handler>:
 800a800:	4a02      	ldr	r2, [pc, #8]	; (800a80c <stdio_exit_handler+0xc>)
 800a802:	4903      	ldr	r1, [pc, #12]	; (800a810 <stdio_exit_handler+0x10>)
 800a804:	4803      	ldr	r0, [pc, #12]	; (800a814 <stdio_exit_handler+0x14>)
 800a806:	f000 b869 	b.w	800a8dc <_fwalk_sglue>
 800a80a:	bf00      	nop
 800a80c:	2000001c 	.word	0x2000001c
 800a810:	0800c155 	.word	0x0800c155
 800a814:	20000028 	.word	0x20000028

0800a818 <cleanup_stdio>:
 800a818:	6841      	ldr	r1, [r0, #4]
 800a81a:	4b0c      	ldr	r3, [pc, #48]	; (800a84c <cleanup_stdio+0x34>)
 800a81c:	4299      	cmp	r1, r3
 800a81e:	b510      	push	{r4, lr}
 800a820:	4604      	mov	r4, r0
 800a822:	d001      	beq.n	800a828 <cleanup_stdio+0x10>
 800a824:	f001 fc96 	bl	800c154 <_fflush_r>
 800a828:	68a1      	ldr	r1, [r4, #8]
 800a82a:	4b09      	ldr	r3, [pc, #36]	; (800a850 <cleanup_stdio+0x38>)
 800a82c:	4299      	cmp	r1, r3
 800a82e:	d002      	beq.n	800a836 <cleanup_stdio+0x1e>
 800a830:	4620      	mov	r0, r4
 800a832:	f001 fc8f 	bl	800c154 <_fflush_r>
 800a836:	68e1      	ldr	r1, [r4, #12]
 800a838:	4b06      	ldr	r3, [pc, #24]	; (800a854 <cleanup_stdio+0x3c>)
 800a83a:	4299      	cmp	r1, r3
 800a83c:	d004      	beq.n	800a848 <cleanup_stdio+0x30>
 800a83e:	4620      	mov	r0, r4
 800a840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a844:	f001 bc86 	b.w	800c154 <_fflush_r>
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	bf00      	nop
 800a84c:	200053a0 	.word	0x200053a0
 800a850:	20005408 	.word	0x20005408
 800a854:	20005470 	.word	0x20005470

0800a858 <global_stdio_init.part.0>:
 800a858:	b510      	push	{r4, lr}
 800a85a:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <global_stdio_init.part.0+0x30>)
 800a85c:	4c0b      	ldr	r4, [pc, #44]	; (800a88c <global_stdio_init.part.0+0x34>)
 800a85e:	4a0c      	ldr	r2, [pc, #48]	; (800a890 <global_stdio_init.part.0+0x38>)
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	4620      	mov	r0, r4
 800a864:	2200      	movs	r2, #0
 800a866:	2104      	movs	r1, #4
 800a868:	f7ff ff94 	bl	800a794 <std>
 800a86c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a870:	2201      	movs	r2, #1
 800a872:	2109      	movs	r1, #9
 800a874:	f7ff ff8e 	bl	800a794 <std>
 800a878:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a87c:	2202      	movs	r2, #2
 800a87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a882:	2112      	movs	r1, #18
 800a884:	f7ff bf86 	b.w	800a794 <std>
 800a888:	200054d8 	.word	0x200054d8
 800a88c:	200053a0 	.word	0x200053a0
 800a890:	0800a801 	.word	0x0800a801

0800a894 <__sfp_lock_acquire>:
 800a894:	4801      	ldr	r0, [pc, #4]	; (800a89c <__sfp_lock_acquire+0x8>)
 800a896:	f000 b956 	b.w	800ab46 <__retarget_lock_acquire_recursive>
 800a89a:	bf00      	nop
 800a89c:	200054e1 	.word	0x200054e1

0800a8a0 <__sfp_lock_release>:
 800a8a0:	4801      	ldr	r0, [pc, #4]	; (800a8a8 <__sfp_lock_release+0x8>)
 800a8a2:	f000 b951 	b.w	800ab48 <__retarget_lock_release_recursive>
 800a8a6:	bf00      	nop
 800a8a8:	200054e1 	.word	0x200054e1

0800a8ac <__sinit>:
 800a8ac:	b510      	push	{r4, lr}
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	f7ff fff0 	bl	800a894 <__sfp_lock_acquire>
 800a8b4:	6a23      	ldr	r3, [r4, #32]
 800a8b6:	b11b      	cbz	r3, 800a8c0 <__sinit+0x14>
 800a8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8bc:	f7ff bff0 	b.w	800a8a0 <__sfp_lock_release>
 800a8c0:	4b04      	ldr	r3, [pc, #16]	; (800a8d4 <__sinit+0x28>)
 800a8c2:	6223      	str	r3, [r4, #32]
 800a8c4:	4b04      	ldr	r3, [pc, #16]	; (800a8d8 <__sinit+0x2c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1f5      	bne.n	800a8b8 <__sinit+0xc>
 800a8cc:	f7ff ffc4 	bl	800a858 <global_stdio_init.part.0>
 800a8d0:	e7f2      	b.n	800a8b8 <__sinit+0xc>
 800a8d2:	bf00      	nop
 800a8d4:	0800a819 	.word	0x0800a819
 800a8d8:	200054d8 	.word	0x200054d8

0800a8dc <_fwalk_sglue>:
 800a8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	4688      	mov	r8, r1
 800a8e4:	4614      	mov	r4, r2
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a8f0:	d505      	bpl.n	800a8fe <_fwalk_sglue+0x22>
 800a8f2:	6824      	ldr	r4, [r4, #0]
 800a8f4:	2c00      	cmp	r4, #0
 800a8f6:	d1f7      	bne.n	800a8e8 <_fwalk_sglue+0xc>
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fe:	89ab      	ldrh	r3, [r5, #12]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d907      	bls.n	800a914 <_fwalk_sglue+0x38>
 800a904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a908:	3301      	adds	r3, #1
 800a90a:	d003      	beq.n	800a914 <_fwalk_sglue+0x38>
 800a90c:	4629      	mov	r1, r5
 800a90e:	4638      	mov	r0, r7
 800a910:	47c0      	blx	r8
 800a912:	4306      	orrs	r6, r0
 800a914:	3568      	adds	r5, #104	; 0x68
 800a916:	e7e9      	b.n	800a8ec <_fwalk_sglue+0x10>

0800a918 <__sread>:
 800a918:	b510      	push	{r4, lr}
 800a91a:	460c      	mov	r4, r1
 800a91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a920:	f000 f8c2 	bl	800aaa8 <_read_r>
 800a924:	2800      	cmp	r0, #0
 800a926:	bfab      	itete	ge
 800a928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a92a:	89a3      	ldrhlt	r3, [r4, #12]
 800a92c:	181b      	addge	r3, r3, r0
 800a92e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a932:	bfac      	ite	ge
 800a934:	6563      	strge	r3, [r4, #84]	; 0x54
 800a936:	81a3      	strhlt	r3, [r4, #12]
 800a938:	bd10      	pop	{r4, pc}

0800a93a <__swrite>:
 800a93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93e:	461f      	mov	r7, r3
 800a940:	898b      	ldrh	r3, [r1, #12]
 800a942:	05db      	lsls	r3, r3, #23
 800a944:	4605      	mov	r5, r0
 800a946:	460c      	mov	r4, r1
 800a948:	4616      	mov	r6, r2
 800a94a:	d505      	bpl.n	800a958 <__swrite+0x1e>
 800a94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a950:	2302      	movs	r3, #2
 800a952:	2200      	movs	r2, #0
 800a954:	f000 f896 	bl	800aa84 <_lseek_r>
 800a958:	89a3      	ldrh	r3, [r4, #12]
 800a95a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a95e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	4632      	mov	r2, r6
 800a966:	463b      	mov	r3, r7
 800a968:	4628      	mov	r0, r5
 800a96a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a96e:	f000 b8ad 	b.w	800aacc <_write_r>

0800a972 <__sseek>:
 800a972:	b510      	push	{r4, lr}
 800a974:	460c      	mov	r4, r1
 800a976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97a:	f000 f883 	bl	800aa84 <_lseek_r>
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	bf15      	itete	ne
 800a984:	6560      	strne	r0, [r4, #84]	; 0x54
 800a986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a98a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a98e:	81a3      	strheq	r3, [r4, #12]
 800a990:	bf18      	it	ne
 800a992:	81a3      	strhne	r3, [r4, #12]
 800a994:	bd10      	pop	{r4, pc}

0800a996 <__sclose>:
 800a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99a:	f000 b80d 	b.w	800a9b8 <_close_r>

0800a99e <memset>:
 800a99e:	4402      	add	r2, r0
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d100      	bne.n	800a9a8 <memset+0xa>
 800a9a6:	4770      	bx	lr
 800a9a8:	f803 1b01 	strb.w	r1, [r3], #1
 800a9ac:	e7f9      	b.n	800a9a2 <memset+0x4>
	...

0800a9b0 <_localeconv_r>:
 800a9b0:	4800      	ldr	r0, [pc, #0]	; (800a9b4 <_localeconv_r+0x4>)
 800a9b2:	4770      	bx	lr
 800a9b4:	20000168 	.word	0x20000168

0800a9b8 <_close_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4d06      	ldr	r5, [pc, #24]	; (800a9d4 <_close_r+0x1c>)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	602b      	str	r3, [r5, #0]
 800a9c4:	f7f7 fda7 	bl	8002516 <_close>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_close_r+0x1a>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_close_r+0x1a>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	200054dc 	.word	0x200054dc

0800a9d8 <_reclaim_reent>:
 800a9d8:	4b29      	ldr	r3, [pc, #164]	; (800aa80 <_reclaim_reent+0xa8>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4283      	cmp	r3, r0
 800a9de:	b570      	push	{r4, r5, r6, lr}
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	d04b      	beq.n	800aa7c <_reclaim_reent+0xa4>
 800a9e4:	69c3      	ldr	r3, [r0, #28]
 800a9e6:	b143      	cbz	r3, 800a9fa <_reclaim_reent+0x22>
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d144      	bne.n	800aa78 <_reclaim_reent+0xa0>
 800a9ee:	69e3      	ldr	r3, [r4, #28]
 800a9f0:	6819      	ldr	r1, [r3, #0]
 800a9f2:	b111      	cbz	r1, 800a9fa <_reclaim_reent+0x22>
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f000 feab 	bl	800b750 <_free_r>
 800a9fa:	6961      	ldr	r1, [r4, #20]
 800a9fc:	b111      	cbz	r1, 800aa04 <_reclaim_reent+0x2c>
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 fea6 	bl	800b750 <_free_r>
 800aa04:	69e1      	ldr	r1, [r4, #28]
 800aa06:	b111      	cbz	r1, 800aa0e <_reclaim_reent+0x36>
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fea1 	bl	800b750 <_free_r>
 800aa0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aa10:	b111      	cbz	r1, 800aa18 <_reclaim_reent+0x40>
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 fe9c 	bl	800b750 <_free_r>
 800aa18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa1a:	b111      	cbz	r1, 800aa22 <_reclaim_reent+0x4a>
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fe97 	bl	800b750 <_free_r>
 800aa22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa24:	b111      	cbz	r1, 800aa2c <_reclaim_reent+0x54>
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 fe92 	bl	800b750 <_free_r>
 800aa2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa2e:	b111      	cbz	r1, 800aa36 <_reclaim_reent+0x5e>
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 fe8d 	bl	800b750 <_free_r>
 800aa36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aa38:	b111      	cbz	r1, 800aa40 <_reclaim_reent+0x68>
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 fe88 	bl	800b750 <_free_r>
 800aa40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aa42:	b111      	cbz	r1, 800aa4a <_reclaim_reent+0x72>
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 fe83 	bl	800b750 <_free_r>
 800aa4a:	6a23      	ldr	r3, [r4, #32]
 800aa4c:	b1b3      	cbz	r3, 800aa7c <_reclaim_reent+0xa4>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa54:	4718      	bx	r3
 800aa56:	5949      	ldr	r1, [r1, r5]
 800aa58:	b941      	cbnz	r1, 800aa6c <_reclaim_reent+0x94>
 800aa5a:	3504      	adds	r5, #4
 800aa5c:	69e3      	ldr	r3, [r4, #28]
 800aa5e:	2d80      	cmp	r5, #128	; 0x80
 800aa60:	68d9      	ldr	r1, [r3, #12]
 800aa62:	d1f8      	bne.n	800aa56 <_reclaim_reent+0x7e>
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fe73 	bl	800b750 <_free_r>
 800aa6a:	e7c0      	b.n	800a9ee <_reclaim_reent+0x16>
 800aa6c:	680e      	ldr	r6, [r1, #0]
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 fe6e 	bl	800b750 <_free_r>
 800aa74:	4631      	mov	r1, r6
 800aa76:	e7ef      	b.n	800aa58 <_reclaim_reent+0x80>
 800aa78:	2500      	movs	r5, #0
 800aa7a:	e7ef      	b.n	800aa5c <_reclaim_reent+0x84>
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000074 	.word	0x20000074

0800aa84 <_lseek_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4d07      	ldr	r5, [pc, #28]	; (800aaa4 <_lseek_r+0x20>)
 800aa88:	4604      	mov	r4, r0
 800aa8a:	4608      	mov	r0, r1
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	2200      	movs	r2, #0
 800aa90:	602a      	str	r2, [r5, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	f7f7 fd66 	bl	8002564 <_lseek>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_lseek_r+0x1e>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_lseek_r+0x1e>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	200054dc 	.word	0x200054dc

0800aaa8 <_read_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	; (800aac8 <_read_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f7 fcf4 	bl	80024a4 <_read>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_read_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_read_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	200054dc 	.word	0x200054dc

0800aacc <_write_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	; (800aaec <_write_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7f7 fcff 	bl	80024de <_write>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_write_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_write_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	200054dc 	.word	0x200054dc

0800aaf0 <__errno>:
 800aaf0:	4b01      	ldr	r3, [pc, #4]	; (800aaf8 <__errno+0x8>)
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	20000074 	.word	0x20000074

0800aafc <__libc_init_array>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	4d0d      	ldr	r5, [pc, #52]	; (800ab34 <__libc_init_array+0x38>)
 800ab00:	4c0d      	ldr	r4, [pc, #52]	; (800ab38 <__libc_init_array+0x3c>)
 800ab02:	1b64      	subs	r4, r4, r5
 800ab04:	10a4      	asrs	r4, r4, #2
 800ab06:	2600      	movs	r6, #0
 800ab08:	42a6      	cmp	r6, r4
 800ab0a:	d109      	bne.n	800ab20 <__libc_init_array+0x24>
 800ab0c:	4d0b      	ldr	r5, [pc, #44]	; (800ab3c <__libc_init_array+0x40>)
 800ab0e:	4c0c      	ldr	r4, [pc, #48]	; (800ab40 <__libc_init_array+0x44>)
 800ab10:	f002 f95a 	bl	800cdc8 <_init>
 800ab14:	1b64      	subs	r4, r4, r5
 800ab16:	10a4      	asrs	r4, r4, #2
 800ab18:	2600      	movs	r6, #0
 800ab1a:	42a6      	cmp	r6, r4
 800ab1c:	d105      	bne.n	800ab2a <__libc_init_array+0x2e>
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}
 800ab20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab24:	4798      	blx	r3
 800ab26:	3601      	adds	r6, #1
 800ab28:	e7ee      	b.n	800ab08 <__libc_init_array+0xc>
 800ab2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab2e:	4798      	blx	r3
 800ab30:	3601      	adds	r6, #1
 800ab32:	e7f2      	b.n	800ab1a <__libc_init_array+0x1e>
 800ab34:	0800eaa8 	.word	0x0800eaa8
 800ab38:	0800eaa8 	.word	0x0800eaa8
 800ab3c:	0800eaa8 	.word	0x0800eaa8
 800ab40:	0800eaac 	.word	0x0800eaac

0800ab44 <__retarget_lock_init_recursive>:
 800ab44:	4770      	bx	lr

0800ab46 <__retarget_lock_acquire_recursive>:
 800ab46:	4770      	bx	lr

0800ab48 <__retarget_lock_release_recursive>:
 800ab48:	4770      	bx	lr

0800ab4a <memcpy>:
 800ab4a:	440a      	add	r2, r1
 800ab4c:	4291      	cmp	r1, r2
 800ab4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab52:	d100      	bne.n	800ab56 <memcpy+0xc>
 800ab54:	4770      	bx	lr
 800ab56:	b510      	push	{r4, lr}
 800ab58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab60:	4291      	cmp	r1, r2
 800ab62:	d1f9      	bne.n	800ab58 <memcpy+0xe>
 800ab64:	bd10      	pop	{r4, pc}

0800ab66 <quorem>:
 800ab66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6a:	6903      	ldr	r3, [r0, #16]
 800ab6c:	690c      	ldr	r4, [r1, #16]
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	4607      	mov	r7, r0
 800ab72:	db7e      	blt.n	800ac72 <quorem+0x10c>
 800ab74:	3c01      	subs	r4, #1
 800ab76:	f101 0814 	add.w	r8, r1, #20
 800ab7a:	f100 0514 	add.w	r5, r0, #20
 800ab7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab9c:	d331      	bcc.n	800ac02 <quorem+0x9c>
 800ab9e:	f04f 0e00 	mov.w	lr, #0
 800aba2:	4640      	mov	r0, r8
 800aba4:	46ac      	mov	ip, r5
 800aba6:	46f2      	mov	sl, lr
 800aba8:	f850 2b04 	ldr.w	r2, [r0], #4
 800abac:	b293      	uxth	r3, r2
 800abae:	fb06 e303 	mla	r3, r6, r3, lr
 800abb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abb6:	0c1a      	lsrs	r2, r3, #16
 800abb8:	b29b      	uxth	r3, r3
 800abba:	ebaa 0303 	sub.w	r3, sl, r3
 800abbe:	f8dc a000 	ldr.w	sl, [ip]
 800abc2:	fa13 f38a 	uxtah	r3, r3, sl
 800abc6:	fb06 220e 	mla	r2, r6, lr, r2
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	9b00      	ldr	r3, [sp, #0]
 800abce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abd2:	b292      	uxth	r2, r2
 800abd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abdc:	f8bd 3000 	ldrh.w	r3, [sp]
 800abe0:	4581      	cmp	r9, r0
 800abe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abe6:	f84c 3b04 	str.w	r3, [ip], #4
 800abea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abee:	d2db      	bcs.n	800aba8 <quorem+0x42>
 800abf0:	f855 300b 	ldr.w	r3, [r5, fp]
 800abf4:	b92b      	cbnz	r3, 800ac02 <quorem+0x9c>
 800abf6:	9b01      	ldr	r3, [sp, #4]
 800abf8:	3b04      	subs	r3, #4
 800abfa:	429d      	cmp	r5, r3
 800abfc:	461a      	mov	r2, r3
 800abfe:	d32c      	bcc.n	800ac5a <quorem+0xf4>
 800ac00:	613c      	str	r4, [r7, #16]
 800ac02:	4638      	mov	r0, r7
 800ac04:	f001 f920 	bl	800be48 <__mcmp>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	db22      	blt.n	800ac52 <quorem+0xec>
 800ac0c:	3601      	adds	r6, #1
 800ac0e:	4629      	mov	r1, r5
 800ac10:	2000      	movs	r0, #0
 800ac12:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac16:	f8d1 c000 	ldr.w	ip, [r1]
 800ac1a:	b293      	uxth	r3, r2
 800ac1c:	1ac3      	subs	r3, r0, r3
 800ac1e:	0c12      	lsrs	r2, r2, #16
 800ac20:	fa13 f38c 	uxtah	r3, r3, ip
 800ac24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac32:	45c1      	cmp	r9, r8
 800ac34:	f841 3b04 	str.w	r3, [r1], #4
 800ac38:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac3c:	d2e9      	bcs.n	800ac12 <quorem+0xac>
 800ac3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac46:	b922      	cbnz	r2, 800ac52 <quorem+0xec>
 800ac48:	3b04      	subs	r3, #4
 800ac4a:	429d      	cmp	r5, r3
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	d30a      	bcc.n	800ac66 <quorem+0x100>
 800ac50:	613c      	str	r4, [r7, #16]
 800ac52:	4630      	mov	r0, r6
 800ac54:	b003      	add	sp, #12
 800ac56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5a:	6812      	ldr	r2, [r2, #0]
 800ac5c:	3b04      	subs	r3, #4
 800ac5e:	2a00      	cmp	r2, #0
 800ac60:	d1ce      	bne.n	800ac00 <quorem+0x9a>
 800ac62:	3c01      	subs	r4, #1
 800ac64:	e7c9      	b.n	800abfa <quorem+0x94>
 800ac66:	6812      	ldr	r2, [r2, #0]
 800ac68:	3b04      	subs	r3, #4
 800ac6a:	2a00      	cmp	r2, #0
 800ac6c:	d1f0      	bne.n	800ac50 <quorem+0xea>
 800ac6e:	3c01      	subs	r4, #1
 800ac70:	e7eb      	b.n	800ac4a <quorem+0xe4>
 800ac72:	2000      	movs	r0, #0
 800ac74:	e7ee      	b.n	800ac54 <quorem+0xee>
	...

0800ac78 <_dtoa_r>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	ed2d 8b02 	vpush	{d8}
 800ac80:	69c5      	ldr	r5, [r0, #28]
 800ac82:	b091      	sub	sp, #68	; 0x44
 800ac84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac88:	ec59 8b10 	vmov	r8, r9, d0
 800ac8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ac8e:	9106      	str	r1, [sp, #24]
 800ac90:	4606      	mov	r6, r0
 800ac92:	9208      	str	r2, [sp, #32]
 800ac94:	930c      	str	r3, [sp, #48]	; 0x30
 800ac96:	b975      	cbnz	r5, 800acb6 <_dtoa_r+0x3e>
 800ac98:	2010      	movs	r0, #16
 800ac9a:	f000 fda5 	bl	800b7e8 <malloc>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	61f0      	str	r0, [r6, #28]
 800aca2:	b920      	cbnz	r0, 800acae <_dtoa_r+0x36>
 800aca4:	4ba6      	ldr	r3, [pc, #664]	; (800af40 <_dtoa_r+0x2c8>)
 800aca6:	21ef      	movs	r1, #239	; 0xef
 800aca8:	48a6      	ldr	r0, [pc, #664]	; (800af44 <_dtoa_r+0x2cc>)
 800acaa:	f001 fa8b 	bl	800c1c4 <__assert_func>
 800acae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acb2:	6005      	str	r5, [r0, #0]
 800acb4:	60c5      	str	r5, [r0, #12]
 800acb6:	69f3      	ldr	r3, [r6, #28]
 800acb8:	6819      	ldr	r1, [r3, #0]
 800acba:	b151      	cbz	r1, 800acd2 <_dtoa_r+0x5a>
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	604a      	str	r2, [r1, #4]
 800acc0:	2301      	movs	r3, #1
 800acc2:	4093      	lsls	r3, r2
 800acc4:	608b      	str	r3, [r1, #8]
 800acc6:	4630      	mov	r0, r6
 800acc8:	f000 fe82 	bl	800b9d0 <_Bfree>
 800accc:	69f3      	ldr	r3, [r6, #28]
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	f1b9 0300 	subs.w	r3, r9, #0
 800acd6:	bfbb      	ittet	lt
 800acd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800acdc:	9303      	strlt	r3, [sp, #12]
 800acde:	2300      	movge	r3, #0
 800ace0:	2201      	movlt	r2, #1
 800ace2:	bfac      	ite	ge
 800ace4:	6023      	strge	r3, [r4, #0]
 800ace6:	6022      	strlt	r2, [r4, #0]
 800ace8:	4b97      	ldr	r3, [pc, #604]	; (800af48 <_dtoa_r+0x2d0>)
 800acea:	9c03      	ldr	r4, [sp, #12]
 800acec:	43a3      	bics	r3, r4
 800acee:	d11c      	bne.n	800ad2a <_dtoa_r+0xb2>
 800acf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800acfc:	ea53 0308 	orrs.w	r3, r3, r8
 800ad00:	f000 84fb 	beq.w	800b6fa <_dtoa_r+0xa82>
 800ad04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad06:	b963      	cbnz	r3, 800ad22 <_dtoa_r+0xaa>
 800ad08:	4b90      	ldr	r3, [pc, #576]	; (800af4c <_dtoa_r+0x2d4>)
 800ad0a:	e020      	b.n	800ad4e <_dtoa_r+0xd6>
 800ad0c:	4b90      	ldr	r3, [pc, #576]	; (800af50 <_dtoa_r+0x2d8>)
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	3308      	adds	r3, #8
 800ad12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	9801      	ldr	r0, [sp, #4]
 800ad18:	b011      	add	sp, #68	; 0x44
 800ad1a:	ecbd 8b02 	vpop	{d8}
 800ad1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad22:	4b8a      	ldr	r3, [pc, #552]	; (800af4c <_dtoa_r+0x2d4>)
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	3303      	adds	r3, #3
 800ad28:	e7f3      	b.n	800ad12 <_dtoa_r+0x9a>
 800ad2a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ad2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad36:	d10c      	bne.n	800ad52 <_dtoa_r+0xda>
 800ad38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 84d7 	beq.w	800b6f4 <_dtoa_r+0xa7c>
 800ad46:	4b83      	ldr	r3, [pc, #524]	; (800af54 <_dtoa_r+0x2dc>)
 800ad48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	e7e1      	b.n	800ad16 <_dtoa_r+0x9e>
 800ad52:	aa0e      	add	r2, sp, #56	; 0x38
 800ad54:	a90f      	add	r1, sp, #60	; 0x3c
 800ad56:	4630      	mov	r0, r6
 800ad58:	eeb0 0b48 	vmov.f64	d0, d8
 800ad5c:	f001 f91a 	bl	800bf94 <__d2b>
 800ad60:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ad64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad66:	4605      	mov	r5, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d046      	beq.n	800adfa <_dtoa_r+0x182>
 800ad6c:	eeb0 7b48 	vmov.f64	d7, d8
 800ad70:	ee18 1a90 	vmov	r1, s17
 800ad74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ad78:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ad7c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ad80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad84:	2000      	movs	r0, #0
 800ad86:	ee07 1a90 	vmov	s15, r1
 800ad8a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800ad8e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800af28 <_dtoa_r+0x2b0>
 800ad92:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad96:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800af30 <_dtoa_r+0x2b8>
 800ad9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ad9e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800af38 <_dtoa_r+0x2c0>
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800adaa:	eeb0 7b46 	vmov.f64	d7, d6
 800adae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800adb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800adb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800adba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adbe:	ee16 ba90 	vmov	fp, s13
 800adc2:	9009      	str	r0, [sp, #36]	; 0x24
 800adc4:	d508      	bpl.n	800add8 <_dtoa_r+0x160>
 800adc6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800adca:	eeb4 6b47 	vcmp.f64	d6, d7
 800adce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add2:	bf18      	it	ne
 800add4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800add8:	f1bb 0f16 	cmp.w	fp, #22
 800addc:	d82b      	bhi.n	800ae36 <_dtoa_r+0x1be>
 800adde:	495e      	ldr	r1, [pc, #376]	; (800af58 <_dtoa_r+0x2e0>)
 800ade0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ade4:	ed91 7b00 	vldr	d7, [r1]
 800ade8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800adec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf0:	d501      	bpl.n	800adf6 <_dtoa_r+0x17e>
 800adf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adf6:	2100      	movs	r1, #0
 800adf8:	e01e      	b.n	800ae38 <_dtoa_r+0x1c0>
 800adfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adfc:	4413      	add	r3, r2
 800adfe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800ae02:	2920      	cmp	r1, #32
 800ae04:	bfc1      	itttt	gt
 800ae06:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800ae0a:	408c      	lslgt	r4, r1
 800ae0c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800ae10:	fa28 f101 	lsrgt.w	r1, r8, r1
 800ae14:	bfd6      	itet	le
 800ae16:	f1c1 0120 	rsble	r1, r1, #32
 800ae1a:	4321      	orrgt	r1, r4
 800ae1c:	fa08 f101 	lslle.w	r1, r8, r1
 800ae20:	ee07 1a90 	vmov	s15, r1
 800ae24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	ee17 1a90 	vmov	r1, s15
 800ae2e:	2001      	movs	r0, #1
 800ae30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ae34:	e7a7      	b.n	800ad86 <_dtoa_r+0x10e>
 800ae36:	2101      	movs	r1, #1
 800ae38:	1ad2      	subs	r2, r2, r3
 800ae3a:	1e53      	subs	r3, r2, #1
 800ae3c:	9305      	str	r3, [sp, #20]
 800ae3e:	bf45      	ittet	mi
 800ae40:	f1c2 0301 	rsbmi	r3, r2, #1
 800ae44:	9304      	strmi	r3, [sp, #16]
 800ae46:	2300      	movpl	r3, #0
 800ae48:	2300      	movmi	r3, #0
 800ae4a:	bf4c      	ite	mi
 800ae4c:	9305      	strmi	r3, [sp, #20]
 800ae4e:	9304      	strpl	r3, [sp, #16]
 800ae50:	f1bb 0f00 	cmp.w	fp, #0
 800ae54:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae56:	db18      	blt.n	800ae8a <_dtoa_r+0x212>
 800ae58:	9b05      	ldr	r3, [sp, #20]
 800ae5a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ae5e:	445b      	add	r3, fp
 800ae60:	9305      	str	r3, [sp, #20]
 800ae62:	2300      	movs	r3, #0
 800ae64:	9a06      	ldr	r2, [sp, #24]
 800ae66:	2a09      	cmp	r2, #9
 800ae68:	d848      	bhi.n	800aefc <_dtoa_r+0x284>
 800ae6a:	2a05      	cmp	r2, #5
 800ae6c:	bfc4      	itt	gt
 800ae6e:	3a04      	subgt	r2, #4
 800ae70:	9206      	strgt	r2, [sp, #24]
 800ae72:	9a06      	ldr	r2, [sp, #24]
 800ae74:	f1a2 0202 	sub.w	r2, r2, #2
 800ae78:	bfcc      	ite	gt
 800ae7a:	2400      	movgt	r4, #0
 800ae7c:	2401      	movle	r4, #1
 800ae7e:	2a03      	cmp	r2, #3
 800ae80:	d847      	bhi.n	800af12 <_dtoa_r+0x29a>
 800ae82:	e8df f002 	tbb	[pc, r2]
 800ae86:	2d0b      	.short	0x2d0b
 800ae88:	392b      	.short	0x392b
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	eba3 030b 	sub.w	r3, r3, fp
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	920a      	str	r2, [sp, #40]	; 0x28
 800ae96:	f1cb 0300 	rsb	r3, fp, #0
 800ae9a:	e7e3      	b.n	800ae64 <_dtoa_r+0x1ec>
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	9207      	str	r2, [sp, #28]
 800aea0:	9a08      	ldr	r2, [sp, #32]
 800aea2:	2a00      	cmp	r2, #0
 800aea4:	dc38      	bgt.n	800af18 <_dtoa_r+0x2a0>
 800aea6:	f04f 0a01 	mov.w	sl, #1
 800aeaa:	46d1      	mov	r9, sl
 800aeac:	4652      	mov	r2, sl
 800aeae:	f8cd a020 	str.w	sl, [sp, #32]
 800aeb2:	69f7      	ldr	r7, [r6, #28]
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	2004      	movs	r0, #4
 800aeb8:	f100 0c14 	add.w	ip, r0, #20
 800aebc:	4594      	cmp	ip, r2
 800aebe:	d930      	bls.n	800af22 <_dtoa_r+0x2aa>
 800aec0:	6079      	str	r1, [r7, #4]
 800aec2:	4630      	mov	r0, r6
 800aec4:	930d      	str	r3, [sp, #52]	; 0x34
 800aec6:	f000 fd43 	bl	800b950 <_Balloc>
 800aeca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aecc:	9001      	str	r0, [sp, #4]
 800aece:	4602      	mov	r2, r0
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d145      	bne.n	800af60 <_dtoa_r+0x2e8>
 800aed4:	4b21      	ldr	r3, [pc, #132]	; (800af5c <_dtoa_r+0x2e4>)
 800aed6:	f240 11af 	movw	r1, #431	; 0x1af
 800aeda:	e6e5      	b.n	800aca8 <_dtoa_r+0x30>
 800aedc:	2201      	movs	r2, #1
 800aede:	e7de      	b.n	800ae9e <_dtoa_r+0x226>
 800aee0:	2200      	movs	r2, #0
 800aee2:	9207      	str	r2, [sp, #28]
 800aee4:	9a08      	ldr	r2, [sp, #32]
 800aee6:	eb0b 0a02 	add.w	sl, fp, r2
 800aeea:	f10a 0901 	add.w	r9, sl, #1
 800aeee:	464a      	mov	r2, r9
 800aef0:	2a01      	cmp	r2, #1
 800aef2:	bfb8      	it	lt
 800aef4:	2201      	movlt	r2, #1
 800aef6:	e7dc      	b.n	800aeb2 <_dtoa_r+0x23a>
 800aef8:	2201      	movs	r2, #1
 800aefa:	e7f2      	b.n	800aee2 <_dtoa_r+0x26a>
 800aefc:	2401      	movs	r4, #1
 800aefe:	2200      	movs	r2, #0
 800af00:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800af04:	f04f 3aff 	mov.w	sl, #4294967295
 800af08:	2100      	movs	r1, #0
 800af0a:	46d1      	mov	r9, sl
 800af0c:	2212      	movs	r2, #18
 800af0e:	9108      	str	r1, [sp, #32]
 800af10:	e7cf      	b.n	800aeb2 <_dtoa_r+0x23a>
 800af12:	2201      	movs	r2, #1
 800af14:	9207      	str	r2, [sp, #28]
 800af16:	e7f5      	b.n	800af04 <_dtoa_r+0x28c>
 800af18:	f8dd a020 	ldr.w	sl, [sp, #32]
 800af1c:	46d1      	mov	r9, sl
 800af1e:	4652      	mov	r2, sl
 800af20:	e7c7      	b.n	800aeb2 <_dtoa_r+0x23a>
 800af22:	3101      	adds	r1, #1
 800af24:	0040      	lsls	r0, r0, #1
 800af26:	e7c7      	b.n	800aeb8 <_dtoa_r+0x240>
 800af28:	636f4361 	.word	0x636f4361
 800af2c:	3fd287a7 	.word	0x3fd287a7
 800af30:	8b60c8b3 	.word	0x8b60c8b3
 800af34:	3fc68a28 	.word	0x3fc68a28
 800af38:	509f79fb 	.word	0x509f79fb
 800af3c:	3fd34413 	.word	0x3fd34413
 800af40:	0800ceb5 	.word	0x0800ceb5
 800af44:	0800cecc 	.word	0x0800cecc
 800af48:	7ff00000 	.word	0x7ff00000
 800af4c:	0800ceb1 	.word	0x0800ceb1
 800af50:	0800cea8 	.word	0x0800cea8
 800af54:	0800ce85 	.word	0x0800ce85
 800af58:	0800cfb8 	.word	0x0800cfb8
 800af5c:	0800cf24 	.word	0x0800cf24
 800af60:	69f2      	ldr	r2, [r6, #28]
 800af62:	9901      	ldr	r1, [sp, #4]
 800af64:	6011      	str	r1, [r2, #0]
 800af66:	f1b9 0f0e 	cmp.w	r9, #14
 800af6a:	d86c      	bhi.n	800b046 <_dtoa_r+0x3ce>
 800af6c:	2c00      	cmp	r4, #0
 800af6e:	d06a      	beq.n	800b046 <_dtoa_r+0x3ce>
 800af70:	f1bb 0f00 	cmp.w	fp, #0
 800af74:	f340 80a0 	ble.w	800b0b8 <_dtoa_r+0x440>
 800af78:	4ac1      	ldr	r2, [pc, #772]	; (800b280 <_dtoa_r+0x608>)
 800af7a:	f00b 010f 	and.w	r1, fp, #15
 800af7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800af82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800af86:	ed92 7b00 	vldr	d7, [r2]
 800af8a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800af8e:	f000 8087 	beq.w	800b0a0 <_dtoa_r+0x428>
 800af92:	49bc      	ldr	r1, [pc, #752]	; (800b284 <_dtoa_r+0x60c>)
 800af94:	ed91 6b08 	vldr	d6, [r1, #32]
 800af98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800af9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800afa0:	f002 020f 	and.w	r2, r2, #15
 800afa4:	2103      	movs	r1, #3
 800afa6:	48b7      	ldr	r0, [pc, #732]	; (800b284 <_dtoa_r+0x60c>)
 800afa8:	2a00      	cmp	r2, #0
 800afaa:	d17b      	bne.n	800b0a4 <_dtoa_r+0x42c>
 800afac:	ed9d 6b02 	vldr	d6, [sp, #8]
 800afb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800afb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	f000 80a0 	beq.w	800b104 <_dtoa_r+0x48c>
 800afc4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800afc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800afcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd0:	f140 8098 	bpl.w	800b104 <_dtoa_r+0x48c>
 800afd4:	f1b9 0f00 	cmp.w	r9, #0
 800afd8:	f000 8094 	beq.w	800b104 <_dtoa_r+0x48c>
 800afdc:	f1ba 0f00 	cmp.w	sl, #0
 800afe0:	dd2f      	ble.n	800b042 <_dtoa_r+0x3ca>
 800afe2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800afe6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800afea:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afee:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aff2:	3101      	adds	r1, #1
 800aff4:	4654      	mov	r4, sl
 800aff6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800affa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800affe:	ee07 1a90 	vmov	s15, r1
 800b002:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b006:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b00a:	ee15 7a90 	vmov	r7, s11
 800b00e:	ec51 0b15 	vmov	r0, r1, d5
 800b012:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b016:	2c00      	cmp	r4, #0
 800b018:	d177      	bne.n	800b10a <_dtoa_r+0x492>
 800b01a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b01e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b022:	ec41 0b17 	vmov	d7, r0, r1
 800b026:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02e:	f300 826a 	bgt.w	800b506 <_dtoa_r+0x88e>
 800b032:	eeb1 7b47 	vneg.f64	d7, d7
 800b036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b03e:	f100 8260 	bmi.w	800b502 <_dtoa_r+0x88a>
 800b042:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b048:	2a00      	cmp	r2, #0
 800b04a:	f2c0 811d 	blt.w	800b288 <_dtoa_r+0x610>
 800b04e:	f1bb 0f0e 	cmp.w	fp, #14
 800b052:	f300 8119 	bgt.w	800b288 <_dtoa_r+0x610>
 800b056:	4b8a      	ldr	r3, [pc, #552]	; (800b280 <_dtoa_r+0x608>)
 800b058:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b05c:	ed93 6b00 	vldr	d6, [r3]
 800b060:	9b08      	ldr	r3, [sp, #32]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f280 80b7 	bge.w	800b1d6 <_dtoa_r+0x55e>
 800b068:	f1b9 0f00 	cmp.w	r9, #0
 800b06c:	f300 80b3 	bgt.w	800b1d6 <_dtoa_r+0x55e>
 800b070:	f040 8246 	bne.w	800b500 <_dtoa_r+0x888>
 800b074:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b078:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b07c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b080:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b088:	464c      	mov	r4, r9
 800b08a:	464f      	mov	r7, r9
 800b08c:	f280 821c 	bge.w	800b4c8 <_dtoa_r+0x850>
 800b090:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b094:	2331      	movs	r3, #49	; 0x31
 800b096:	f808 3b01 	strb.w	r3, [r8], #1
 800b09a:	f10b 0b01 	add.w	fp, fp, #1
 800b09e:	e218      	b.n	800b4d2 <_dtoa_r+0x85a>
 800b0a0:	2102      	movs	r1, #2
 800b0a2:	e780      	b.n	800afa6 <_dtoa_r+0x32e>
 800b0a4:	07d4      	lsls	r4, r2, #31
 800b0a6:	d504      	bpl.n	800b0b2 <_dtoa_r+0x43a>
 800b0a8:	ed90 6b00 	vldr	d6, [r0]
 800b0ac:	3101      	adds	r1, #1
 800b0ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0b2:	1052      	asrs	r2, r2, #1
 800b0b4:	3008      	adds	r0, #8
 800b0b6:	e777      	b.n	800afa8 <_dtoa_r+0x330>
 800b0b8:	d022      	beq.n	800b100 <_dtoa_r+0x488>
 800b0ba:	f1cb 0200 	rsb	r2, fp, #0
 800b0be:	4970      	ldr	r1, [pc, #448]	; (800b280 <_dtoa_r+0x608>)
 800b0c0:	f002 000f 	and.w	r0, r2, #15
 800b0c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b0c8:	ed91 7b00 	vldr	d7, [r1]
 800b0cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b0d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b0d4:	486b      	ldr	r0, [pc, #428]	; (800b284 <_dtoa_r+0x60c>)
 800b0d6:	1112      	asrs	r2, r2, #4
 800b0d8:	2400      	movs	r4, #0
 800b0da:	2102      	movs	r1, #2
 800b0dc:	b92a      	cbnz	r2, 800b0ea <_dtoa_r+0x472>
 800b0de:	2c00      	cmp	r4, #0
 800b0e0:	f43f af6a 	beq.w	800afb8 <_dtoa_r+0x340>
 800b0e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b0e8:	e766      	b.n	800afb8 <_dtoa_r+0x340>
 800b0ea:	07d7      	lsls	r7, r2, #31
 800b0ec:	d505      	bpl.n	800b0fa <_dtoa_r+0x482>
 800b0ee:	ed90 6b00 	vldr	d6, [r0]
 800b0f2:	3101      	adds	r1, #1
 800b0f4:	2401      	movs	r4, #1
 800b0f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0fa:	1052      	asrs	r2, r2, #1
 800b0fc:	3008      	adds	r0, #8
 800b0fe:	e7ed      	b.n	800b0dc <_dtoa_r+0x464>
 800b100:	2102      	movs	r1, #2
 800b102:	e759      	b.n	800afb8 <_dtoa_r+0x340>
 800b104:	465a      	mov	r2, fp
 800b106:	464c      	mov	r4, r9
 800b108:	e775      	b.n	800aff6 <_dtoa_r+0x37e>
 800b10a:	ec41 0b17 	vmov	d7, r0, r1
 800b10e:	495c      	ldr	r1, [pc, #368]	; (800b280 <_dtoa_r+0x608>)
 800b110:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b114:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b118:	9901      	ldr	r1, [sp, #4]
 800b11a:	440c      	add	r4, r1
 800b11c:	9907      	ldr	r1, [sp, #28]
 800b11e:	b351      	cbz	r1, 800b176 <_dtoa_r+0x4fe>
 800b120:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b124:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b128:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b12c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b130:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b134:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b138:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b13c:	ee14 1a90 	vmov	r1, s9
 800b140:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b144:	3130      	adds	r1, #48	; 0x30
 800b146:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b14a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b152:	f808 1b01 	strb.w	r1, [r8], #1
 800b156:	d439      	bmi.n	800b1cc <_dtoa_r+0x554>
 800b158:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b15c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b164:	d472      	bmi.n	800b24c <_dtoa_r+0x5d4>
 800b166:	45a0      	cmp	r8, r4
 800b168:	f43f af6b 	beq.w	800b042 <_dtoa_r+0x3ca>
 800b16c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b170:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b174:	e7e0      	b.n	800b138 <_dtoa_r+0x4c0>
 800b176:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b17a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b17e:	4620      	mov	r0, r4
 800b180:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b184:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b188:	ee14 1a90 	vmov	r1, s9
 800b18c:	3130      	adds	r1, #48	; 0x30
 800b18e:	f808 1b01 	strb.w	r1, [r8], #1
 800b192:	45a0      	cmp	r8, r4
 800b194:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b198:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b19c:	d118      	bne.n	800b1d0 <_dtoa_r+0x558>
 800b19e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b1a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b1a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ae:	dc4d      	bgt.n	800b24c <_dtoa_r+0x5d4>
 800b1b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b1b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1bc:	f57f af41 	bpl.w	800b042 <_dtoa_r+0x3ca>
 800b1c0:	4680      	mov	r8, r0
 800b1c2:	3801      	subs	r0, #1
 800b1c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b1c8:	2b30      	cmp	r3, #48	; 0x30
 800b1ca:	d0f9      	beq.n	800b1c0 <_dtoa_r+0x548>
 800b1cc:	4693      	mov	fp, r2
 800b1ce:	e02a      	b.n	800b226 <_dtoa_r+0x5ae>
 800b1d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b1d4:	e7d6      	b.n	800b184 <_dtoa_r+0x50c>
 800b1d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b1de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b1e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b1e6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b1ea:	ee15 3a10 	vmov	r3, s10
 800b1ee:	3330      	adds	r3, #48	; 0x30
 800b1f0:	f808 3b01 	strb.w	r3, [r8], #1
 800b1f4:	9b01      	ldr	r3, [sp, #4]
 800b1f6:	eba8 0303 	sub.w	r3, r8, r3
 800b1fa:	4599      	cmp	r9, r3
 800b1fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b200:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b204:	d133      	bne.n	800b26e <_dtoa_r+0x5f6>
 800b206:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b20a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b212:	dc1a      	bgt.n	800b24a <_dtoa_r+0x5d2>
 800b214:	eeb4 7b46 	vcmp.f64	d7, d6
 800b218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21c:	d103      	bne.n	800b226 <_dtoa_r+0x5ae>
 800b21e:	ee15 3a10 	vmov	r3, s10
 800b222:	07d9      	lsls	r1, r3, #31
 800b224:	d411      	bmi.n	800b24a <_dtoa_r+0x5d2>
 800b226:	4629      	mov	r1, r5
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 fbd1 	bl	800b9d0 <_Bfree>
 800b22e:	2300      	movs	r3, #0
 800b230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b232:	f888 3000 	strb.w	r3, [r8]
 800b236:	f10b 0301 	add.w	r3, fp, #1
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f43f ad69 	beq.w	800ad16 <_dtoa_r+0x9e>
 800b244:	f8c3 8000 	str.w	r8, [r3]
 800b248:	e565      	b.n	800ad16 <_dtoa_r+0x9e>
 800b24a:	465a      	mov	r2, fp
 800b24c:	4643      	mov	r3, r8
 800b24e:	4698      	mov	r8, r3
 800b250:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b254:	2939      	cmp	r1, #57	; 0x39
 800b256:	d106      	bne.n	800b266 <_dtoa_r+0x5ee>
 800b258:	9901      	ldr	r1, [sp, #4]
 800b25a:	4299      	cmp	r1, r3
 800b25c:	d1f7      	bne.n	800b24e <_dtoa_r+0x5d6>
 800b25e:	9801      	ldr	r0, [sp, #4]
 800b260:	2130      	movs	r1, #48	; 0x30
 800b262:	3201      	adds	r2, #1
 800b264:	7001      	strb	r1, [r0, #0]
 800b266:	7819      	ldrb	r1, [r3, #0]
 800b268:	3101      	adds	r1, #1
 800b26a:	7019      	strb	r1, [r3, #0]
 800b26c:	e7ae      	b.n	800b1cc <_dtoa_r+0x554>
 800b26e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b272:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27a:	d1b2      	bne.n	800b1e2 <_dtoa_r+0x56a>
 800b27c:	e7d3      	b.n	800b226 <_dtoa_r+0x5ae>
 800b27e:	bf00      	nop
 800b280:	0800cfb8 	.word	0x0800cfb8
 800b284:	0800cf90 	.word	0x0800cf90
 800b288:	9907      	ldr	r1, [sp, #28]
 800b28a:	2900      	cmp	r1, #0
 800b28c:	f000 80d0 	beq.w	800b430 <_dtoa_r+0x7b8>
 800b290:	9906      	ldr	r1, [sp, #24]
 800b292:	2901      	cmp	r1, #1
 800b294:	f300 80b4 	bgt.w	800b400 <_dtoa_r+0x788>
 800b298:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b29a:	2900      	cmp	r1, #0
 800b29c:	f000 80ac 	beq.w	800b3f8 <_dtoa_r+0x780>
 800b2a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b2a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b2a8:	461c      	mov	r4, r3
 800b2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ac:	9b04      	ldr	r3, [sp, #16]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	9304      	str	r3, [sp, #16]
 800b2b2:	9b05      	ldr	r3, [sp, #20]
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	4413      	add	r3, r2
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	9305      	str	r3, [sp, #20]
 800b2bc:	f000 fc3e 	bl	800bb3c <__i2b>
 800b2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	f1b8 0f00 	cmp.w	r8, #0
 800b2c8:	d00d      	beq.n	800b2e6 <_dtoa_r+0x66e>
 800b2ca:	9a05      	ldr	r2, [sp, #20]
 800b2cc:	2a00      	cmp	r2, #0
 800b2ce:	dd0a      	ble.n	800b2e6 <_dtoa_r+0x66e>
 800b2d0:	4542      	cmp	r2, r8
 800b2d2:	9904      	ldr	r1, [sp, #16]
 800b2d4:	bfa8      	it	ge
 800b2d6:	4642      	movge	r2, r8
 800b2d8:	1a89      	subs	r1, r1, r2
 800b2da:	9104      	str	r1, [sp, #16]
 800b2dc:	9905      	ldr	r1, [sp, #20]
 800b2de:	eba8 0802 	sub.w	r8, r8, r2
 800b2e2:	1a8a      	subs	r2, r1, r2
 800b2e4:	9205      	str	r2, [sp, #20]
 800b2e6:	b303      	cbz	r3, 800b32a <_dtoa_r+0x6b2>
 800b2e8:	9a07      	ldr	r2, [sp, #28]
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	f000 80a5 	beq.w	800b43a <_dtoa_r+0x7c2>
 800b2f0:	2c00      	cmp	r4, #0
 800b2f2:	dd13      	ble.n	800b31c <_dtoa_r+0x6a4>
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	930d      	str	r3, [sp, #52]	; 0x34
 800b2fc:	f000 fcde 	bl	800bcbc <__pow5mult>
 800b300:	462a      	mov	r2, r5
 800b302:	4601      	mov	r1, r0
 800b304:	4607      	mov	r7, r0
 800b306:	4630      	mov	r0, r6
 800b308:	f000 fc2e 	bl	800bb68 <__multiply>
 800b30c:	4629      	mov	r1, r5
 800b30e:	9009      	str	r0, [sp, #36]	; 0x24
 800b310:	4630      	mov	r0, r6
 800b312:	f000 fb5d 	bl	800b9d0 <_Bfree>
 800b316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b31a:	4615      	mov	r5, r2
 800b31c:	1b1a      	subs	r2, r3, r4
 800b31e:	d004      	beq.n	800b32a <_dtoa_r+0x6b2>
 800b320:	4629      	mov	r1, r5
 800b322:	4630      	mov	r0, r6
 800b324:	f000 fcca 	bl	800bcbc <__pow5mult>
 800b328:	4605      	mov	r5, r0
 800b32a:	2101      	movs	r1, #1
 800b32c:	4630      	mov	r0, r6
 800b32e:	f000 fc05 	bl	800bb3c <__i2b>
 800b332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b334:	2b00      	cmp	r3, #0
 800b336:	4604      	mov	r4, r0
 800b338:	f340 8081 	ble.w	800b43e <_dtoa_r+0x7c6>
 800b33c:	461a      	mov	r2, r3
 800b33e:	4601      	mov	r1, r0
 800b340:	4630      	mov	r0, r6
 800b342:	f000 fcbb 	bl	800bcbc <__pow5mult>
 800b346:	9b06      	ldr	r3, [sp, #24]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	4604      	mov	r4, r0
 800b34c:	dd7a      	ble.n	800b444 <_dtoa_r+0x7cc>
 800b34e:	2300      	movs	r3, #0
 800b350:	9309      	str	r3, [sp, #36]	; 0x24
 800b352:	6922      	ldr	r2, [r4, #16]
 800b354:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b358:	6910      	ldr	r0, [r2, #16]
 800b35a:	f000 fba1 	bl	800baa0 <__hi0bits>
 800b35e:	f1c0 0020 	rsb	r0, r0, #32
 800b362:	9b05      	ldr	r3, [sp, #20]
 800b364:	4418      	add	r0, r3
 800b366:	f010 001f 	ands.w	r0, r0, #31
 800b36a:	f000 8093 	beq.w	800b494 <_dtoa_r+0x81c>
 800b36e:	f1c0 0220 	rsb	r2, r0, #32
 800b372:	2a04      	cmp	r2, #4
 800b374:	f340 8085 	ble.w	800b482 <_dtoa_r+0x80a>
 800b378:	9b04      	ldr	r3, [sp, #16]
 800b37a:	f1c0 001c 	rsb	r0, r0, #28
 800b37e:	4403      	add	r3, r0
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	9b05      	ldr	r3, [sp, #20]
 800b384:	4480      	add	r8, r0
 800b386:	4403      	add	r3, r0
 800b388:	9305      	str	r3, [sp, #20]
 800b38a:	9b04      	ldr	r3, [sp, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dd05      	ble.n	800b39c <_dtoa_r+0x724>
 800b390:	4629      	mov	r1, r5
 800b392:	461a      	mov	r2, r3
 800b394:	4630      	mov	r0, r6
 800b396:	f000 fceb 	bl	800bd70 <__lshift>
 800b39a:	4605      	mov	r5, r0
 800b39c:	9b05      	ldr	r3, [sp, #20]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	dd05      	ble.n	800b3ae <_dtoa_r+0x736>
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	f000 fce2 	bl	800bd70 <__lshift>
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d071      	beq.n	800b498 <_dtoa_r+0x820>
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f000 fd46 	bl	800be48 <__mcmp>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	da6b      	bge.n	800b498 <_dtoa_r+0x820>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	220a      	movs	r2, #10
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f000 fb24 	bl	800ba14 <__multadd>
 800b3cc:	9b07      	ldr	r3, [sp, #28]
 800b3ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 8197 	beq.w	800b708 <_dtoa_r+0xa90>
 800b3da:	4639      	mov	r1, r7
 800b3dc:	2300      	movs	r3, #0
 800b3de:	220a      	movs	r2, #10
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f000 fb17 	bl	800ba14 <__multadd>
 800b3e6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ea:	4607      	mov	r7, r0
 800b3ec:	f300 8093 	bgt.w	800b516 <_dtoa_r+0x89e>
 800b3f0:	9b06      	ldr	r3, [sp, #24]
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	dc57      	bgt.n	800b4a6 <_dtoa_r+0x82e>
 800b3f6:	e08e      	b.n	800b516 <_dtoa_r+0x89e>
 800b3f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b3fe:	e751      	b.n	800b2a4 <_dtoa_r+0x62c>
 800b400:	f109 34ff 	add.w	r4, r9, #4294967295
 800b404:	42a3      	cmp	r3, r4
 800b406:	bfbf      	itttt	lt
 800b408:	1ae2      	sublt	r2, r4, r3
 800b40a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b40c:	189b      	addlt	r3, r3, r2
 800b40e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b410:	bfae      	itee	ge
 800b412:	1b1c      	subge	r4, r3, r4
 800b414:	4623      	movlt	r3, r4
 800b416:	2400      	movlt	r4, #0
 800b418:	f1b9 0f00 	cmp.w	r9, #0
 800b41c:	bfb5      	itete	lt
 800b41e:	9a04      	ldrlt	r2, [sp, #16]
 800b420:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b424:	eba2 0809 	sublt.w	r8, r2, r9
 800b428:	464a      	movge	r2, r9
 800b42a:	bfb8      	it	lt
 800b42c:	2200      	movlt	r2, #0
 800b42e:	e73c      	b.n	800b2aa <_dtoa_r+0x632>
 800b430:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b434:	9f07      	ldr	r7, [sp, #28]
 800b436:	461c      	mov	r4, r3
 800b438:	e744      	b.n	800b2c4 <_dtoa_r+0x64c>
 800b43a:	461a      	mov	r2, r3
 800b43c:	e770      	b.n	800b320 <_dtoa_r+0x6a8>
 800b43e:	9b06      	ldr	r3, [sp, #24]
 800b440:	2b01      	cmp	r3, #1
 800b442:	dc18      	bgt.n	800b476 <_dtoa_r+0x7fe>
 800b444:	9b02      	ldr	r3, [sp, #8]
 800b446:	b9b3      	cbnz	r3, 800b476 <_dtoa_r+0x7fe>
 800b448:	9b03      	ldr	r3, [sp, #12]
 800b44a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b44e:	b9a2      	cbnz	r2, 800b47a <_dtoa_r+0x802>
 800b450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b454:	0d12      	lsrs	r2, r2, #20
 800b456:	0512      	lsls	r2, r2, #20
 800b458:	b18a      	cbz	r2, 800b47e <_dtoa_r+0x806>
 800b45a:	9b04      	ldr	r3, [sp, #16]
 800b45c:	3301      	adds	r3, #1
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	9b05      	ldr	r3, [sp, #20]
 800b462:	3301      	adds	r3, #1
 800b464:	9305      	str	r3, [sp, #20]
 800b466:	2301      	movs	r3, #1
 800b468:	9309      	str	r3, [sp, #36]	; 0x24
 800b46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f47f af70 	bne.w	800b352 <_dtoa_r+0x6da>
 800b472:	2001      	movs	r0, #1
 800b474:	e775      	b.n	800b362 <_dtoa_r+0x6ea>
 800b476:	2300      	movs	r3, #0
 800b478:	e7f6      	b.n	800b468 <_dtoa_r+0x7f0>
 800b47a:	9b02      	ldr	r3, [sp, #8]
 800b47c:	e7f4      	b.n	800b468 <_dtoa_r+0x7f0>
 800b47e:	9209      	str	r2, [sp, #36]	; 0x24
 800b480:	e7f3      	b.n	800b46a <_dtoa_r+0x7f2>
 800b482:	d082      	beq.n	800b38a <_dtoa_r+0x712>
 800b484:	9b04      	ldr	r3, [sp, #16]
 800b486:	321c      	adds	r2, #28
 800b488:	4413      	add	r3, r2
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	9b05      	ldr	r3, [sp, #20]
 800b48e:	4490      	add	r8, r2
 800b490:	4413      	add	r3, r2
 800b492:	e779      	b.n	800b388 <_dtoa_r+0x710>
 800b494:	4602      	mov	r2, r0
 800b496:	e7f5      	b.n	800b484 <_dtoa_r+0x80c>
 800b498:	f1b9 0f00 	cmp.w	r9, #0
 800b49c:	dc36      	bgt.n	800b50c <_dtoa_r+0x894>
 800b49e:	9b06      	ldr	r3, [sp, #24]
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	dd33      	ble.n	800b50c <_dtoa_r+0x894>
 800b4a4:	46ca      	mov	sl, r9
 800b4a6:	f1ba 0f00 	cmp.w	sl, #0
 800b4aa:	d10d      	bne.n	800b4c8 <_dtoa_r+0x850>
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4653      	mov	r3, sl
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f000 faae 	bl	800ba14 <__multadd>
 800b4b8:	4601      	mov	r1, r0
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	4628      	mov	r0, r5
 800b4be:	f000 fcc3 	bl	800be48 <__mcmp>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	f73f ade4 	bgt.w	800b090 <_dtoa_r+0x418>
 800b4c8:	9b08      	ldr	r3, [sp, #32]
 800b4ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b4ce:	ea6f 0b03 	mvn.w	fp, r3
 800b4d2:	f04f 0900 	mov.w	r9, #0
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f000 fa79 	bl	800b9d0 <_Bfree>
 800b4de:	2f00      	cmp	r7, #0
 800b4e0:	f43f aea1 	beq.w	800b226 <_dtoa_r+0x5ae>
 800b4e4:	f1b9 0f00 	cmp.w	r9, #0
 800b4e8:	d005      	beq.n	800b4f6 <_dtoa_r+0x87e>
 800b4ea:	45b9      	cmp	r9, r7
 800b4ec:	d003      	beq.n	800b4f6 <_dtoa_r+0x87e>
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f000 fa6d 	bl	800b9d0 <_Bfree>
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f000 fa69 	bl	800b9d0 <_Bfree>
 800b4fe:	e692      	b.n	800b226 <_dtoa_r+0x5ae>
 800b500:	2400      	movs	r4, #0
 800b502:	4627      	mov	r7, r4
 800b504:	e7e0      	b.n	800b4c8 <_dtoa_r+0x850>
 800b506:	4693      	mov	fp, r2
 800b508:	4627      	mov	r7, r4
 800b50a:	e5c1      	b.n	800b090 <_dtoa_r+0x418>
 800b50c:	9b07      	ldr	r3, [sp, #28]
 800b50e:	46ca      	mov	sl, r9
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 8100 	beq.w	800b716 <_dtoa_r+0xa9e>
 800b516:	f1b8 0f00 	cmp.w	r8, #0
 800b51a:	dd05      	ble.n	800b528 <_dtoa_r+0x8b0>
 800b51c:	4639      	mov	r1, r7
 800b51e:	4642      	mov	r2, r8
 800b520:	4630      	mov	r0, r6
 800b522:	f000 fc25 	bl	800bd70 <__lshift>
 800b526:	4607      	mov	r7, r0
 800b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d05d      	beq.n	800b5ea <_dtoa_r+0x972>
 800b52e:	6879      	ldr	r1, [r7, #4]
 800b530:	4630      	mov	r0, r6
 800b532:	f000 fa0d 	bl	800b950 <_Balloc>
 800b536:	4680      	mov	r8, r0
 800b538:	b928      	cbnz	r0, 800b546 <_dtoa_r+0x8ce>
 800b53a:	4b82      	ldr	r3, [pc, #520]	; (800b744 <_dtoa_r+0xacc>)
 800b53c:	4602      	mov	r2, r0
 800b53e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b542:	f7ff bbb1 	b.w	800aca8 <_dtoa_r+0x30>
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	3202      	adds	r2, #2
 800b54a:	0092      	lsls	r2, r2, #2
 800b54c:	f107 010c 	add.w	r1, r7, #12
 800b550:	300c      	adds	r0, #12
 800b552:	f7ff fafa 	bl	800ab4a <memcpy>
 800b556:	2201      	movs	r2, #1
 800b558:	4641      	mov	r1, r8
 800b55a:	4630      	mov	r0, r6
 800b55c:	f000 fc08 	bl	800bd70 <__lshift>
 800b560:	9b01      	ldr	r3, [sp, #4]
 800b562:	3301      	adds	r3, #1
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	4453      	add	r3, sl
 800b56a:	9308      	str	r3, [sp, #32]
 800b56c:	9b02      	ldr	r3, [sp, #8]
 800b56e:	f003 0301 	and.w	r3, r3, #1
 800b572:	46b9      	mov	r9, r7
 800b574:	9307      	str	r3, [sp, #28]
 800b576:	4607      	mov	r7, r0
 800b578:	9b04      	ldr	r3, [sp, #16]
 800b57a:	4621      	mov	r1, r4
 800b57c:	3b01      	subs	r3, #1
 800b57e:	4628      	mov	r0, r5
 800b580:	9302      	str	r3, [sp, #8]
 800b582:	f7ff faf0 	bl	800ab66 <quorem>
 800b586:	4603      	mov	r3, r0
 800b588:	3330      	adds	r3, #48	; 0x30
 800b58a:	9005      	str	r0, [sp, #20]
 800b58c:	4649      	mov	r1, r9
 800b58e:	4628      	mov	r0, r5
 800b590:	9309      	str	r3, [sp, #36]	; 0x24
 800b592:	f000 fc59 	bl	800be48 <__mcmp>
 800b596:	463a      	mov	r2, r7
 800b598:	4682      	mov	sl, r0
 800b59a:	4621      	mov	r1, r4
 800b59c:	4630      	mov	r0, r6
 800b59e:	f000 fc6f 	bl	800be80 <__mdiff>
 800b5a2:	68c2      	ldr	r2, [r0, #12]
 800b5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	bb0a      	cbnz	r2, 800b5ee <_dtoa_r+0x976>
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f000 fc4b 	bl	800be48 <__mcmp>
 800b5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	4641      	mov	r1, r8
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b5be:	f000 fa07 	bl	800b9d0 <_Bfree>
 800b5c2:	9b06      	ldr	r3, [sp, #24]
 800b5c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b5ca:	ea43 0102 	orr.w	r1, r3, r2
 800b5ce:	9b07      	ldr	r3, [sp, #28]
 800b5d0:	4319      	orrs	r1, r3
 800b5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d4:	d10d      	bne.n	800b5f2 <_dtoa_r+0x97a>
 800b5d6:	2b39      	cmp	r3, #57	; 0x39
 800b5d8:	d029      	beq.n	800b62e <_dtoa_r+0x9b6>
 800b5da:	f1ba 0f00 	cmp.w	sl, #0
 800b5de:	dd01      	ble.n	800b5e4 <_dtoa_r+0x96c>
 800b5e0:	9b05      	ldr	r3, [sp, #20]
 800b5e2:	3331      	adds	r3, #49	; 0x31
 800b5e4:	9a02      	ldr	r2, [sp, #8]
 800b5e6:	7013      	strb	r3, [r2, #0]
 800b5e8:	e775      	b.n	800b4d6 <_dtoa_r+0x85e>
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	e7b8      	b.n	800b560 <_dtoa_r+0x8e8>
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	e7e1      	b.n	800b5b6 <_dtoa_r+0x93e>
 800b5f2:	f1ba 0f00 	cmp.w	sl, #0
 800b5f6:	db06      	blt.n	800b606 <_dtoa_r+0x98e>
 800b5f8:	9906      	ldr	r1, [sp, #24]
 800b5fa:	ea41 0a0a 	orr.w	sl, r1, sl
 800b5fe:	9907      	ldr	r1, [sp, #28]
 800b600:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b604:	d120      	bne.n	800b648 <_dtoa_r+0x9d0>
 800b606:	2a00      	cmp	r2, #0
 800b608:	ddec      	ble.n	800b5e4 <_dtoa_r+0x96c>
 800b60a:	4629      	mov	r1, r5
 800b60c:	2201      	movs	r2, #1
 800b60e:	4630      	mov	r0, r6
 800b610:	9304      	str	r3, [sp, #16]
 800b612:	f000 fbad 	bl	800bd70 <__lshift>
 800b616:	4621      	mov	r1, r4
 800b618:	4605      	mov	r5, r0
 800b61a:	f000 fc15 	bl	800be48 <__mcmp>
 800b61e:	2800      	cmp	r0, #0
 800b620:	9b04      	ldr	r3, [sp, #16]
 800b622:	dc02      	bgt.n	800b62a <_dtoa_r+0x9b2>
 800b624:	d1de      	bne.n	800b5e4 <_dtoa_r+0x96c>
 800b626:	07da      	lsls	r2, r3, #31
 800b628:	d5dc      	bpl.n	800b5e4 <_dtoa_r+0x96c>
 800b62a:	2b39      	cmp	r3, #57	; 0x39
 800b62c:	d1d8      	bne.n	800b5e0 <_dtoa_r+0x968>
 800b62e:	9a02      	ldr	r2, [sp, #8]
 800b630:	2339      	movs	r3, #57	; 0x39
 800b632:	7013      	strb	r3, [r2, #0]
 800b634:	4643      	mov	r3, r8
 800b636:	4698      	mov	r8, r3
 800b638:	3b01      	subs	r3, #1
 800b63a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b63e:	2a39      	cmp	r2, #57	; 0x39
 800b640:	d051      	beq.n	800b6e6 <_dtoa_r+0xa6e>
 800b642:	3201      	adds	r2, #1
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	e746      	b.n	800b4d6 <_dtoa_r+0x85e>
 800b648:	2a00      	cmp	r2, #0
 800b64a:	dd03      	ble.n	800b654 <_dtoa_r+0x9dc>
 800b64c:	2b39      	cmp	r3, #57	; 0x39
 800b64e:	d0ee      	beq.n	800b62e <_dtoa_r+0x9b6>
 800b650:	3301      	adds	r3, #1
 800b652:	e7c7      	b.n	800b5e4 <_dtoa_r+0x96c>
 800b654:	9a04      	ldr	r2, [sp, #16]
 800b656:	9908      	ldr	r1, [sp, #32]
 800b658:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b65c:	428a      	cmp	r2, r1
 800b65e:	d02b      	beq.n	800b6b8 <_dtoa_r+0xa40>
 800b660:	4629      	mov	r1, r5
 800b662:	2300      	movs	r3, #0
 800b664:	220a      	movs	r2, #10
 800b666:	4630      	mov	r0, r6
 800b668:	f000 f9d4 	bl	800ba14 <__multadd>
 800b66c:	45b9      	cmp	r9, r7
 800b66e:	4605      	mov	r5, r0
 800b670:	f04f 0300 	mov.w	r3, #0
 800b674:	f04f 020a 	mov.w	r2, #10
 800b678:	4649      	mov	r1, r9
 800b67a:	4630      	mov	r0, r6
 800b67c:	d107      	bne.n	800b68e <_dtoa_r+0xa16>
 800b67e:	f000 f9c9 	bl	800ba14 <__multadd>
 800b682:	4681      	mov	r9, r0
 800b684:	4607      	mov	r7, r0
 800b686:	9b04      	ldr	r3, [sp, #16]
 800b688:	3301      	adds	r3, #1
 800b68a:	9304      	str	r3, [sp, #16]
 800b68c:	e774      	b.n	800b578 <_dtoa_r+0x900>
 800b68e:	f000 f9c1 	bl	800ba14 <__multadd>
 800b692:	4639      	mov	r1, r7
 800b694:	4681      	mov	r9, r0
 800b696:	2300      	movs	r3, #0
 800b698:	220a      	movs	r2, #10
 800b69a:	4630      	mov	r0, r6
 800b69c:	f000 f9ba 	bl	800ba14 <__multadd>
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	e7f0      	b.n	800b686 <_dtoa_r+0xa0e>
 800b6a4:	f1ba 0f00 	cmp.w	sl, #0
 800b6a8:	9a01      	ldr	r2, [sp, #4]
 800b6aa:	bfcc      	ite	gt
 800b6ac:	46d0      	movgt	r8, sl
 800b6ae:	f04f 0801 	movle.w	r8, #1
 800b6b2:	4490      	add	r8, r2
 800b6b4:	f04f 0900 	mov.w	r9, #0
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	4630      	mov	r0, r6
 800b6be:	9302      	str	r3, [sp, #8]
 800b6c0:	f000 fb56 	bl	800bd70 <__lshift>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	f000 fbbe 	bl	800be48 <__mcmp>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	dcb1      	bgt.n	800b634 <_dtoa_r+0x9bc>
 800b6d0:	d102      	bne.n	800b6d8 <_dtoa_r+0xa60>
 800b6d2:	9b02      	ldr	r3, [sp, #8]
 800b6d4:	07db      	lsls	r3, r3, #31
 800b6d6:	d4ad      	bmi.n	800b634 <_dtoa_r+0x9bc>
 800b6d8:	4643      	mov	r3, r8
 800b6da:	4698      	mov	r8, r3
 800b6dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6e0:	2a30      	cmp	r2, #48	; 0x30
 800b6e2:	d0fa      	beq.n	800b6da <_dtoa_r+0xa62>
 800b6e4:	e6f7      	b.n	800b4d6 <_dtoa_r+0x85e>
 800b6e6:	9a01      	ldr	r2, [sp, #4]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d1a4      	bne.n	800b636 <_dtoa_r+0x9be>
 800b6ec:	f10b 0b01 	add.w	fp, fp, #1
 800b6f0:	2331      	movs	r3, #49	; 0x31
 800b6f2:	e778      	b.n	800b5e6 <_dtoa_r+0x96e>
 800b6f4:	4b14      	ldr	r3, [pc, #80]	; (800b748 <_dtoa_r+0xad0>)
 800b6f6:	f7ff bb2a 	b.w	800ad4e <_dtoa_r+0xd6>
 800b6fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f47f ab05 	bne.w	800ad0c <_dtoa_r+0x94>
 800b702:	4b12      	ldr	r3, [pc, #72]	; (800b74c <_dtoa_r+0xad4>)
 800b704:	f7ff bb23 	b.w	800ad4e <_dtoa_r+0xd6>
 800b708:	f1ba 0f00 	cmp.w	sl, #0
 800b70c:	dc03      	bgt.n	800b716 <_dtoa_r+0xa9e>
 800b70e:	9b06      	ldr	r3, [sp, #24]
 800b710:	2b02      	cmp	r3, #2
 800b712:	f73f aec8 	bgt.w	800b4a6 <_dtoa_r+0x82e>
 800b716:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f7ff fa22 	bl	800ab66 <quorem>
 800b722:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b726:	f808 3b01 	strb.w	r3, [r8], #1
 800b72a:	9a01      	ldr	r2, [sp, #4]
 800b72c:	eba8 0202 	sub.w	r2, r8, r2
 800b730:	4592      	cmp	sl, r2
 800b732:	ddb7      	ble.n	800b6a4 <_dtoa_r+0xa2c>
 800b734:	4629      	mov	r1, r5
 800b736:	2300      	movs	r3, #0
 800b738:	220a      	movs	r2, #10
 800b73a:	4630      	mov	r0, r6
 800b73c:	f000 f96a 	bl	800ba14 <__multadd>
 800b740:	4605      	mov	r5, r0
 800b742:	e7ea      	b.n	800b71a <_dtoa_r+0xaa2>
 800b744:	0800cf24 	.word	0x0800cf24
 800b748:	0800ce84 	.word	0x0800ce84
 800b74c:	0800cea8 	.word	0x0800cea8

0800b750 <_free_r>:
 800b750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b752:	2900      	cmp	r1, #0
 800b754:	d044      	beq.n	800b7e0 <_free_r+0x90>
 800b756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b75a:	9001      	str	r0, [sp, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f1a1 0404 	sub.w	r4, r1, #4
 800b762:	bfb8      	it	lt
 800b764:	18e4      	addlt	r4, r4, r3
 800b766:	f000 f8e7 	bl	800b938 <__malloc_lock>
 800b76a:	4a1e      	ldr	r2, [pc, #120]	; (800b7e4 <_free_r+0x94>)
 800b76c:	9801      	ldr	r0, [sp, #4]
 800b76e:	6813      	ldr	r3, [r2, #0]
 800b770:	b933      	cbnz	r3, 800b780 <_free_r+0x30>
 800b772:	6063      	str	r3, [r4, #4]
 800b774:	6014      	str	r4, [r2, #0]
 800b776:	b003      	add	sp, #12
 800b778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b77c:	f000 b8e2 	b.w	800b944 <__malloc_unlock>
 800b780:	42a3      	cmp	r3, r4
 800b782:	d908      	bls.n	800b796 <_free_r+0x46>
 800b784:	6825      	ldr	r5, [r4, #0]
 800b786:	1961      	adds	r1, r4, r5
 800b788:	428b      	cmp	r3, r1
 800b78a:	bf01      	itttt	eq
 800b78c:	6819      	ldreq	r1, [r3, #0]
 800b78e:	685b      	ldreq	r3, [r3, #4]
 800b790:	1949      	addeq	r1, r1, r5
 800b792:	6021      	streq	r1, [r4, #0]
 800b794:	e7ed      	b.n	800b772 <_free_r+0x22>
 800b796:	461a      	mov	r2, r3
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	b10b      	cbz	r3, 800b7a0 <_free_r+0x50>
 800b79c:	42a3      	cmp	r3, r4
 800b79e:	d9fa      	bls.n	800b796 <_free_r+0x46>
 800b7a0:	6811      	ldr	r1, [r2, #0]
 800b7a2:	1855      	adds	r5, r2, r1
 800b7a4:	42a5      	cmp	r5, r4
 800b7a6:	d10b      	bne.n	800b7c0 <_free_r+0x70>
 800b7a8:	6824      	ldr	r4, [r4, #0]
 800b7aa:	4421      	add	r1, r4
 800b7ac:	1854      	adds	r4, r2, r1
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	6011      	str	r1, [r2, #0]
 800b7b2:	d1e0      	bne.n	800b776 <_free_r+0x26>
 800b7b4:	681c      	ldr	r4, [r3, #0]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	6053      	str	r3, [r2, #4]
 800b7ba:	440c      	add	r4, r1
 800b7bc:	6014      	str	r4, [r2, #0]
 800b7be:	e7da      	b.n	800b776 <_free_r+0x26>
 800b7c0:	d902      	bls.n	800b7c8 <_free_r+0x78>
 800b7c2:	230c      	movs	r3, #12
 800b7c4:	6003      	str	r3, [r0, #0]
 800b7c6:	e7d6      	b.n	800b776 <_free_r+0x26>
 800b7c8:	6825      	ldr	r5, [r4, #0]
 800b7ca:	1961      	adds	r1, r4, r5
 800b7cc:	428b      	cmp	r3, r1
 800b7ce:	bf04      	itt	eq
 800b7d0:	6819      	ldreq	r1, [r3, #0]
 800b7d2:	685b      	ldreq	r3, [r3, #4]
 800b7d4:	6063      	str	r3, [r4, #4]
 800b7d6:	bf04      	itt	eq
 800b7d8:	1949      	addeq	r1, r1, r5
 800b7da:	6021      	streq	r1, [r4, #0]
 800b7dc:	6054      	str	r4, [r2, #4]
 800b7de:	e7ca      	b.n	800b776 <_free_r+0x26>
 800b7e0:	b003      	add	sp, #12
 800b7e2:	bd30      	pop	{r4, r5, pc}
 800b7e4:	200054e4 	.word	0x200054e4

0800b7e8 <malloc>:
 800b7e8:	4b02      	ldr	r3, [pc, #8]	; (800b7f4 <malloc+0xc>)
 800b7ea:	4601      	mov	r1, r0
 800b7ec:	6818      	ldr	r0, [r3, #0]
 800b7ee:	f000 b823 	b.w	800b838 <_malloc_r>
 800b7f2:	bf00      	nop
 800b7f4:	20000074 	.word	0x20000074

0800b7f8 <sbrk_aligned>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	4e0e      	ldr	r6, [pc, #56]	; (800b834 <sbrk_aligned+0x3c>)
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	6831      	ldr	r1, [r6, #0]
 800b800:	4605      	mov	r5, r0
 800b802:	b911      	cbnz	r1, 800b80a <sbrk_aligned+0x12>
 800b804:	f000 fcce 	bl	800c1a4 <_sbrk_r>
 800b808:	6030      	str	r0, [r6, #0]
 800b80a:	4621      	mov	r1, r4
 800b80c:	4628      	mov	r0, r5
 800b80e:	f000 fcc9 	bl	800c1a4 <_sbrk_r>
 800b812:	1c43      	adds	r3, r0, #1
 800b814:	d00a      	beq.n	800b82c <sbrk_aligned+0x34>
 800b816:	1cc4      	adds	r4, r0, #3
 800b818:	f024 0403 	bic.w	r4, r4, #3
 800b81c:	42a0      	cmp	r0, r4
 800b81e:	d007      	beq.n	800b830 <sbrk_aligned+0x38>
 800b820:	1a21      	subs	r1, r4, r0
 800b822:	4628      	mov	r0, r5
 800b824:	f000 fcbe 	bl	800c1a4 <_sbrk_r>
 800b828:	3001      	adds	r0, #1
 800b82a:	d101      	bne.n	800b830 <sbrk_aligned+0x38>
 800b82c:	f04f 34ff 	mov.w	r4, #4294967295
 800b830:	4620      	mov	r0, r4
 800b832:	bd70      	pop	{r4, r5, r6, pc}
 800b834:	200054e8 	.word	0x200054e8

0800b838 <_malloc_r>:
 800b838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b83c:	1ccd      	adds	r5, r1, #3
 800b83e:	f025 0503 	bic.w	r5, r5, #3
 800b842:	3508      	adds	r5, #8
 800b844:	2d0c      	cmp	r5, #12
 800b846:	bf38      	it	cc
 800b848:	250c      	movcc	r5, #12
 800b84a:	2d00      	cmp	r5, #0
 800b84c:	4607      	mov	r7, r0
 800b84e:	db01      	blt.n	800b854 <_malloc_r+0x1c>
 800b850:	42a9      	cmp	r1, r5
 800b852:	d905      	bls.n	800b860 <_malloc_r+0x28>
 800b854:	230c      	movs	r3, #12
 800b856:	603b      	str	r3, [r7, #0]
 800b858:	2600      	movs	r6, #0
 800b85a:	4630      	mov	r0, r6
 800b85c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b860:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b934 <_malloc_r+0xfc>
 800b864:	f000 f868 	bl	800b938 <__malloc_lock>
 800b868:	f8d8 3000 	ldr.w	r3, [r8]
 800b86c:	461c      	mov	r4, r3
 800b86e:	bb5c      	cbnz	r4, 800b8c8 <_malloc_r+0x90>
 800b870:	4629      	mov	r1, r5
 800b872:	4638      	mov	r0, r7
 800b874:	f7ff ffc0 	bl	800b7f8 <sbrk_aligned>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	4604      	mov	r4, r0
 800b87c:	d155      	bne.n	800b92a <_malloc_r+0xf2>
 800b87e:	f8d8 4000 	ldr.w	r4, [r8]
 800b882:	4626      	mov	r6, r4
 800b884:	2e00      	cmp	r6, #0
 800b886:	d145      	bne.n	800b914 <_malloc_r+0xdc>
 800b888:	2c00      	cmp	r4, #0
 800b88a:	d048      	beq.n	800b91e <_malloc_r+0xe6>
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	4631      	mov	r1, r6
 800b890:	4638      	mov	r0, r7
 800b892:	eb04 0903 	add.w	r9, r4, r3
 800b896:	f000 fc85 	bl	800c1a4 <_sbrk_r>
 800b89a:	4581      	cmp	r9, r0
 800b89c:	d13f      	bne.n	800b91e <_malloc_r+0xe6>
 800b89e:	6821      	ldr	r1, [r4, #0]
 800b8a0:	1a6d      	subs	r5, r5, r1
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f7ff ffa7 	bl	800b7f8 <sbrk_aligned>
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d037      	beq.n	800b91e <_malloc_r+0xe6>
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	442b      	add	r3, r5
 800b8b2:	6023      	str	r3, [r4, #0]
 800b8b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d038      	beq.n	800b92e <_malloc_r+0xf6>
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	42a2      	cmp	r2, r4
 800b8c0:	d12b      	bne.n	800b91a <_malloc_r+0xe2>
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	605a      	str	r2, [r3, #4]
 800b8c6:	e00f      	b.n	800b8e8 <_malloc_r+0xb0>
 800b8c8:	6822      	ldr	r2, [r4, #0]
 800b8ca:	1b52      	subs	r2, r2, r5
 800b8cc:	d41f      	bmi.n	800b90e <_malloc_r+0xd6>
 800b8ce:	2a0b      	cmp	r2, #11
 800b8d0:	d917      	bls.n	800b902 <_malloc_r+0xca>
 800b8d2:	1961      	adds	r1, r4, r5
 800b8d4:	42a3      	cmp	r3, r4
 800b8d6:	6025      	str	r5, [r4, #0]
 800b8d8:	bf18      	it	ne
 800b8da:	6059      	strne	r1, [r3, #4]
 800b8dc:	6863      	ldr	r3, [r4, #4]
 800b8de:	bf08      	it	eq
 800b8e0:	f8c8 1000 	streq.w	r1, [r8]
 800b8e4:	5162      	str	r2, [r4, r5]
 800b8e6:	604b      	str	r3, [r1, #4]
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	f104 060b 	add.w	r6, r4, #11
 800b8ee:	f000 f829 	bl	800b944 <__malloc_unlock>
 800b8f2:	f026 0607 	bic.w	r6, r6, #7
 800b8f6:	1d23      	adds	r3, r4, #4
 800b8f8:	1af2      	subs	r2, r6, r3
 800b8fa:	d0ae      	beq.n	800b85a <_malloc_r+0x22>
 800b8fc:	1b9b      	subs	r3, r3, r6
 800b8fe:	50a3      	str	r3, [r4, r2]
 800b900:	e7ab      	b.n	800b85a <_malloc_r+0x22>
 800b902:	42a3      	cmp	r3, r4
 800b904:	6862      	ldr	r2, [r4, #4]
 800b906:	d1dd      	bne.n	800b8c4 <_malloc_r+0x8c>
 800b908:	f8c8 2000 	str.w	r2, [r8]
 800b90c:	e7ec      	b.n	800b8e8 <_malloc_r+0xb0>
 800b90e:	4623      	mov	r3, r4
 800b910:	6864      	ldr	r4, [r4, #4]
 800b912:	e7ac      	b.n	800b86e <_malloc_r+0x36>
 800b914:	4634      	mov	r4, r6
 800b916:	6876      	ldr	r6, [r6, #4]
 800b918:	e7b4      	b.n	800b884 <_malloc_r+0x4c>
 800b91a:	4613      	mov	r3, r2
 800b91c:	e7cc      	b.n	800b8b8 <_malloc_r+0x80>
 800b91e:	230c      	movs	r3, #12
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	4638      	mov	r0, r7
 800b924:	f000 f80e 	bl	800b944 <__malloc_unlock>
 800b928:	e797      	b.n	800b85a <_malloc_r+0x22>
 800b92a:	6025      	str	r5, [r4, #0]
 800b92c:	e7dc      	b.n	800b8e8 <_malloc_r+0xb0>
 800b92e:	605b      	str	r3, [r3, #4]
 800b930:	deff      	udf	#255	; 0xff
 800b932:	bf00      	nop
 800b934:	200054e4 	.word	0x200054e4

0800b938 <__malloc_lock>:
 800b938:	4801      	ldr	r0, [pc, #4]	; (800b940 <__malloc_lock+0x8>)
 800b93a:	f7ff b904 	b.w	800ab46 <__retarget_lock_acquire_recursive>
 800b93e:	bf00      	nop
 800b940:	200054e0 	.word	0x200054e0

0800b944 <__malloc_unlock>:
 800b944:	4801      	ldr	r0, [pc, #4]	; (800b94c <__malloc_unlock+0x8>)
 800b946:	f7ff b8ff 	b.w	800ab48 <__retarget_lock_release_recursive>
 800b94a:	bf00      	nop
 800b94c:	200054e0 	.word	0x200054e0

0800b950 <_Balloc>:
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	69c6      	ldr	r6, [r0, #28]
 800b954:	4604      	mov	r4, r0
 800b956:	460d      	mov	r5, r1
 800b958:	b976      	cbnz	r6, 800b978 <_Balloc+0x28>
 800b95a:	2010      	movs	r0, #16
 800b95c:	f7ff ff44 	bl	800b7e8 <malloc>
 800b960:	4602      	mov	r2, r0
 800b962:	61e0      	str	r0, [r4, #28]
 800b964:	b920      	cbnz	r0, 800b970 <_Balloc+0x20>
 800b966:	4b18      	ldr	r3, [pc, #96]	; (800b9c8 <_Balloc+0x78>)
 800b968:	4818      	ldr	r0, [pc, #96]	; (800b9cc <_Balloc+0x7c>)
 800b96a:	216b      	movs	r1, #107	; 0x6b
 800b96c:	f000 fc2a 	bl	800c1c4 <__assert_func>
 800b970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b974:	6006      	str	r6, [r0, #0]
 800b976:	60c6      	str	r6, [r0, #12]
 800b978:	69e6      	ldr	r6, [r4, #28]
 800b97a:	68f3      	ldr	r3, [r6, #12]
 800b97c:	b183      	cbz	r3, 800b9a0 <_Balloc+0x50>
 800b97e:	69e3      	ldr	r3, [r4, #28]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b986:	b9b8      	cbnz	r0, 800b9b8 <_Balloc+0x68>
 800b988:	2101      	movs	r1, #1
 800b98a:	fa01 f605 	lsl.w	r6, r1, r5
 800b98e:	1d72      	adds	r2, r6, #5
 800b990:	0092      	lsls	r2, r2, #2
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fc34 	bl	800c200 <_calloc_r>
 800b998:	b160      	cbz	r0, 800b9b4 <_Balloc+0x64>
 800b99a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b99e:	e00e      	b.n	800b9be <_Balloc+0x6e>
 800b9a0:	2221      	movs	r2, #33	; 0x21
 800b9a2:	2104      	movs	r1, #4
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f000 fc2b 	bl	800c200 <_calloc_r>
 800b9aa:	69e3      	ldr	r3, [r4, #28]
 800b9ac:	60f0      	str	r0, [r6, #12]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1e4      	bne.n	800b97e <_Balloc+0x2e>
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}
 800b9b8:	6802      	ldr	r2, [r0, #0]
 800b9ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9c4:	e7f7      	b.n	800b9b6 <_Balloc+0x66>
 800b9c6:	bf00      	nop
 800b9c8:	0800ceb5 	.word	0x0800ceb5
 800b9cc:	0800cf35 	.word	0x0800cf35

0800b9d0 <_Bfree>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	69c6      	ldr	r6, [r0, #28]
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	b976      	cbnz	r6, 800b9f8 <_Bfree+0x28>
 800b9da:	2010      	movs	r0, #16
 800b9dc:	f7ff ff04 	bl	800b7e8 <malloc>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	61e8      	str	r0, [r5, #28]
 800b9e4:	b920      	cbnz	r0, 800b9f0 <_Bfree+0x20>
 800b9e6:	4b09      	ldr	r3, [pc, #36]	; (800ba0c <_Bfree+0x3c>)
 800b9e8:	4809      	ldr	r0, [pc, #36]	; (800ba10 <_Bfree+0x40>)
 800b9ea:	218f      	movs	r1, #143	; 0x8f
 800b9ec:	f000 fbea 	bl	800c1c4 <__assert_func>
 800b9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9f4:	6006      	str	r6, [r0, #0]
 800b9f6:	60c6      	str	r6, [r0, #12]
 800b9f8:	b13c      	cbz	r4, 800ba0a <_Bfree+0x3a>
 800b9fa:	69eb      	ldr	r3, [r5, #28]
 800b9fc:	6862      	ldr	r2, [r4, #4]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba04:	6021      	str	r1, [r4, #0]
 800ba06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}
 800ba0c:	0800ceb5 	.word	0x0800ceb5
 800ba10:	0800cf35 	.word	0x0800cf35

0800ba14 <__multadd>:
 800ba14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba18:	690d      	ldr	r5, [r1, #16]
 800ba1a:	4607      	mov	r7, r0
 800ba1c:	460c      	mov	r4, r1
 800ba1e:	461e      	mov	r6, r3
 800ba20:	f101 0c14 	add.w	ip, r1, #20
 800ba24:	2000      	movs	r0, #0
 800ba26:	f8dc 3000 	ldr.w	r3, [ip]
 800ba2a:	b299      	uxth	r1, r3
 800ba2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ba30:	0c1e      	lsrs	r6, r3, #16
 800ba32:	0c0b      	lsrs	r3, r1, #16
 800ba34:	fb02 3306 	mla	r3, r2, r6, r3
 800ba38:	b289      	uxth	r1, r1
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba40:	4285      	cmp	r5, r0
 800ba42:	f84c 1b04 	str.w	r1, [ip], #4
 800ba46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba4a:	dcec      	bgt.n	800ba26 <__multadd+0x12>
 800ba4c:	b30e      	cbz	r6, 800ba92 <__multadd+0x7e>
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	42ab      	cmp	r3, r5
 800ba52:	dc19      	bgt.n	800ba88 <__multadd+0x74>
 800ba54:	6861      	ldr	r1, [r4, #4]
 800ba56:	4638      	mov	r0, r7
 800ba58:	3101      	adds	r1, #1
 800ba5a:	f7ff ff79 	bl	800b950 <_Balloc>
 800ba5e:	4680      	mov	r8, r0
 800ba60:	b928      	cbnz	r0, 800ba6e <__multadd+0x5a>
 800ba62:	4602      	mov	r2, r0
 800ba64:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <__multadd+0x84>)
 800ba66:	480d      	ldr	r0, [pc, #52]	; (800ba9c <__multadd+0x88>)
 800ba68:	21ba      	movs	r1, #186	; 0xba
 800ba6a:	f000 fbab 	bl	800c1c4 <__assert_func>
 800ba6e:	6922      	ldr	r2, [r4, #16]
 800ba70:	3202      	adds	r2, #2
 800ba72:	f104 010c 	add.w	r1, r4, #12
 800ba76:	0092      	lsls	r2, r2, #2
 800ba78:	300c      	adds	r0, #12
 800ba7a:	f7ff f866 	bl	800ab4a <memcpy>
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4638      	mov	r0, r7
 800ba82:	f7ff ffa5 	bl	800b9d0 <_Bfree>
 800ba86:	4644      	mov	r4, r8
 800ba88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba8c:	3501      	adds	r5, #1
 800ba8e:	615e      	str	r6, [r3, #20]
 800ba90:	6125      	str	r5, [r4, #16]
 800ba92:	4620      	mov	r0, r4
 800ba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba98:	0800cf24 	.word	0x0800cf24
 800ba9c:	0800cf35 	.word	0x0800cf35

0800baa0 <__hi0bits>:
 800baa0:	0c03      	lsrs	r3, r0, #16
 800baa2:	041b      	lsls	r3, r3, #16
 800baa4:	b9d3      	cbnz	r3, 800badc <__hi0bits+0x3c>
 800baa6:	0400      	lsls	r0, r0, #16
 800baa8:	2310      	movs	r3, #16
 800baaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baae:	bf04      	itt	eq
 800bab0:	0200      	lsleq	r0, r0, #8
 800bab2:	3308      	addeq	r3, #8
 800bab4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bab8:	bf04      	itt	eq
 800baba:	0100      	lsleq	r0, r0, #4
 800babc:	3304      	addeq	r3, #4
 800babe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bac2:	bf04      	itt	eq
 800bac4:	0080      	lsleq	r0, r0, #2
 800bac6:	3302      	addeq	r3, #2
 800bac8:	2800      	cmp	r0, #0
 800baca:	db05      	blt.n	800bad8 <__hi0bits+0x38>
 800bacc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bad0:	f103 0301 	add.w	r3, r3, #1
 800bad4:	bf08      	it	eq
 800bad6:	2320      	moveq	r3, #32
 800bad8:	4618      	mov	r0, r3
 800bada:	4770      	bx	lr
 800badc:	2300      	movs	r3, #0
 800bade:	e7e4      	b.n	800baaa <__hi0bits+0xa>

0800bae0 <__lo0bits>:
 800bae0:	6803      	ldr	r3, [r0, #0]
 800bae2:	f013 0207 	ands.w	r2, r3, #7
 800bae6:	d00c      	beq.n	800bb02 <__lo0bits+0x22>
 800bae8:	07d9      	lsls	r1, r3, #31
 800baea:	d422      	bmi.n	800bb32 <__lo0bits+0x52>
 800baec:	079a      	lsls	r2, r3, #30
 800baee:	bf49      	itett	mi
 800baf0:	085b      	lsrmi	r3, r3, #1
 800baf2:	089b      	lsrpl	r3, r3, #2
 800baf4:	6003      	strmi	r3, [r0, #0]
 800baf6:	2201      	movmi	r2, #1
 800baf8:	bf5c      	itt	pl
 800bafa:	6003      	strpl	r3, [r0, #0]
 800bafc:	2202      	movpl	r2, #2
 800bafe:	4610      	mov	r0, r2
 800bb00:	4770      	bx	lr
 800bb02:	b299      	uxth	r1, r3
 800bb04:	b909      	cbnz	r1, 800bb0a <__lo0bits+0x2a>
 800bb06:	0c1b      	lsrs	r3, r3, #16
 800bb08:	2210      	movs	r2, #16
 800bb0a:	b2d9      	uxtb	r1, r3
 800bb0c:	b909      	cbnz	r1, 800bb12 <__lo0bits+0x32>
 800bb0e:	3208      	adds	r2, #8
 800bb10:	0a1b      	lsrs	r3, r3, #8
 800bb12:	0719      	lsls	r1, r3, #28
 800bb14:	bf04      	itt	eq
 800bb16:	091b      	lsreq	r3, r3, #4
 800bb18:	3204      	addeq	r2, #4
 800bb1a:	0799      	lsls	r1, r3, #30
 800bb1c:	bf04      	itt	eq
 800bb1e:	089b      	lsreq	r3, r3, #2
 800bb20:	3202      	addeq	r2, #2
 800bb22:	07d9      	lsls	r1, r3, #31
 800bb24:	d403      	bmi.n	800bb2e <__lo0bits+0x4e>
 800bb26:	085b      	lsrs	r3, r3, #1
 800bb28:	f102 0201 	add.w	r2, r2, #1
 800bb2c:	d003      	beq.n	800bb36 <__lo0bits+0x56>
 800bb2e:	6003      	str	r3, [r0, #0]
 800bb30:	e7e5      	b.n	800bafe <__lo0bits+0x1e>
 800bb32:	2200      	movs	r2, #0
 800bb34:	e7e3      	b.n	800bafe <__lo0bits+0x1e>
 800bb36:	2220      	movs	r2, #32
 800bb38:	e7e1      	b.n	800bafe <__lo0bits+0x1e>
	...

0800bb3c <__i2b>:
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	460c      	mov	r4, r1
 800bb40:	2101      	movs	r1, #1
 800bb42:	f7ff ff05 	bl	800b950 <_Balloc>
 800bb46:	4602      	mov	r2, r0
 800bb48:	b928      	cbnz	r0, 800bb56 <__i2b+0x1a>
 800bb4a:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <__i2b+0x24>)
 800bb4c:	4805      	ldr	r0, [pc, #20]	; (800bb64 <__i2b+0x28>)
 800bb4e:	f240 1145 	movw	r1, #325	; 0x145
 800bb52:	f000 fb37 	bl	800c1c4 <__assert_func>
 800bb56:	2301      	movs	r3, #1
 800bb58:	6144      	str	r4, [r0, #20]
 800bb5a:	6103      	str	r3, [r0, #16]
 800bb5c:	bd10      	pop	{r4, pc}
 800bb5e:	bf00      	nop
 800bb60:	0800cf24 	.word	0x0800cf24
 800bb64:	0800cf35 	.word	0x0800cf35

0800bb68 <__multiply>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	4691      	mov	r9, r2
 800bb6e:	690a      	ldr	r2, [r1, #16]
 800bb70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	bfb8      	it	lt
 800bb78:	460b      	movlt	r3, r1
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	bfbc      	itt	lt
 800bb7e:	464c      	movlt	r4, r9
 800bb80:	4699      	movlt	r9, r3
 800bb82:	6927      	ldr	r7, [r4, #16]
 800bb84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	6861      	ldr	r1, [r4, #4]
 800bb8c:	eb07 060a 	add.w	r6, r7, sl
 800bb90:	42b3      	cmp	r3, r6
 800bb92:	b085      	sub	sp, #20
 800bb94:	bfb8      	it	lt
 800bb96:	3101      	addlt	r1, #1
 800bb98:	f7ff feda 	bl	800b950 <_Balloc>
 800bb9c:	b930      	cbnz	r0, 800bbac <__multiply+0x44>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	4b44      	ldr	r3, [pc, #272]	; (800bcb4 <__multiply+0x14c>)
 800bba2:	4845      	ldr	r0, [pc, #276]	; (800bcb8 <__multiply+0x150>)
 800bba4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bba8:	f000 fb0c 	bl	800c1c4 <__assert_func>
 800bbac:	f100 0514 	add.w	r5, r0, #20
 800bbb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbb4:	462b      	mov	r3, r5
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4543      	cmp	r3, r8
 800bbba:	d321      	bcc.n	800bc00 <__multiply+0x98>
 800bbbc:	f104 0314 	add.w	r3, r4, #20
 800bbc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bbc4:	f109 0314 	add.w	r3, r9, #20
 800bbc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbcc:	9202      	str	r2, [sp, #8]
 800bbce:	1b3a      	subs	r2, r7, r4
 800bbd0:	3a15      	subs	r2, #21
 800bbd2:	f022 0203 	bic.w	r2, r2, #3
 800bbd6:	3204      	adds	r2, #4
 800bbd8:	f104 0115 	add.w	r1, r4, #21
 800bbdc:	428f      	cmp	r7, r1
 800bbde:	bf38      	it	cc
 800bbe0:	2204      	movcc	r2, #4
 800bbe2:	9201      	str	r2, [sp, #4]
 800bbe4:	9a02      	ldr	r2, [sp, #8]
 800bbe6:	9303      	str	r3, [sp, #12]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d80c      	bhi.n	800bc06 <__multiply+0x9e>
 800bbec:	2e00      	cmp	r6, #0
 800bbee:	dd03      	ble.n	800bbf8 <__multiply+0x90>
 800bbf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d05b      	beq.n	800bcb0 <__multiply+0x148>
 800bbf8:	6106      	str	r6, [r0, #16]
 800bbfa:	b005      	add	sp, #20
 800bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc00:	f843 2b04 	str.w	r2, [r3], #4
 800bc04:	e7d8      	b.n	800bbb8 <__multiply+0x50>
 800bc06:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc0a:	f1ba 0f00 	cmp.w	sl, #0
 800bc0e:	d024      	beq.n	800bc5a <__multiply+0xf2>
 800bc10:	f104 0e14 	add.w	lr, r4, #20
 800bc14:	46a9      	mov	r9, r5
 800bc16:	f04f 0c00 	mov.w	ip, #0
 800bc1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc1e:	f8d9 1000 	ldr.w	r1, [r9]
 800bc22:	fa1f fb82 	uxth.w	fp, r2
 800bc26:	b289      	uxth	r1, r1
 800bc28:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc30:	f8d9 2000 	ldr.w	r2, [r9]
 800bc34:	4461      	add	r1, ip
 800bc36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc3a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc42:	b289      	uxth	r1, r1
 800bc44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc48:	4577      	cmp	r7, lr
 800bc4a:	f849 1b04 	str.w	r1, [r9], #4
 800bc4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc52:	d8e2      	bhi.n	800bc1a <__multiply+0xb2>
 800bc54:	9a01      	ldr	r2, [sp, #4]
 800bc56:	f845 c002 	str.w	ip, [r5, r2]
 800bc5a:	9a03      	ldr	r2, [sp, #12]
 800bc5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc60:	3304      	adds	r3, #4
 800bc62:	f1b9 0f00 	cmp.w	r9, #0
 800bc66:	d021      	beq.n	800bcac <__multiply+0x144>
 800bc68:	6829      	ldr	r1, [r5, #0]
 800bc6a:	f104 0c14 	add.w	ip, r4, #20
 800bc6e:	46ae      	mov	lr, r5
 800bc70:	f04f 0a00 	mov.w	sl, #0
 800bc74:	f8bc b000 	ldrh.w	fp, [ip]
 800bc78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc7c:	fb09 220b 	mla	r2, r9, fp, r2
 800bc80:	4452      	add	r2, sl
 800bc82:	b289      	uxth	r1, r1
 800bc84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc88:	f84e 1b04 	str.w	r1, [lr], #4
 800bc8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc94:	f8be 1000 	ldrh.w	r1, [lr]
 800bc98:	fb09 110a 	mla	r1, r9, sl, r1
 800bc9c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bca0:	4567      	cmp	r7, ip
 800bca2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bca6:	d8e5      	bhi.n	800bc74 <__multiply+0x10c>
 800bca8:	9a01      	ldr	r2, [sp, #4]
 800bcaa:	50a9      	str	r1, [r5, r2]
 800bcac:	3504      	adds	r5, #4
 800bcae:	e799      	b.n	800bbe4 <__multiply+0x7c>
 800bcb0:	3e01      	subs	r6, #1
 800bcb2:	e79b      	b.n	800bbec <__multiply+0x84>
 800bcb4:	0800cf24 	.word	0x0800cf24
 800bcb8:	0800cf35 	.word	0x0800cf35

0800bcbc <__pow5mult>:
 800bcbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc0:	4615      	mov	r5, r2
 800bcc2:	f012 0203 	ands.w	r2, r2, #3
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	460f      	mov	r7, r1
 800bcca:	d007      	beq.n	800bcdc <__pow5mult+0x20>
 800bccc:	4c25      	ldr	r4, [pc, #148]	; (800bd64 <__pow5mult+0xa8>)
 800bcce:	3a01      	subs	r2, #1
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcd6:	f7ff fe9d 	bl	800ba14 <__multadd>
 800bcda:	4607      	mov	r7, r0
 800bcdc:	10ad      	asrs	r5, r5, #2
 800bcde:	d03d      	beq.n	800bd5c <__pow5mult+0xa0>
 800bce0:	69f4      	ldr	r4, [r6, #28]
 800bce2:	b97c      	cbnz	r4, 800bd04 <__pow5mult+0x48>
 800bce4:	2010      	movs	r0, #16
 800bce6:	f7ff fd7f 	bl	800b7e8 <malloc>
 800bcea:	4602      	mov	r2, r0
 800bcec:	61f0      	str	r0, [r6, #28]
 800bcee:	b928      	cbnz	r0, 800bcfc <__pow5mult+0x40>
 800bcf0:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <__pow5mult+0xac>)
 800bcf2:	481e      	ldr	r0, [pc, #120]	; (800bd6c <__pow5mult+0xb0>)
 800bcf4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bcf8:	f000 fa64 	bl	800c1c4 <__assert_func>
 800bcfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd00:	6004      	str	r4, [r0, #0]
 800bd02:	60c4      	str	r4, [r0, #12]
 800bd04:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bd08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd0c:	b94c      	cbnz	r4, 800bd22 <__pow5mult+0x66>
 800bd0e:	f240 2171 	movw	r1, #625	; 0x271
 800bd12:	4630      	mov	r0, r6
 800bd14:	f7ff ff12 	bl	800bb3c <__i2b>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd1e:	4604      	mov	r4, r0
 800bd20:	6003      	str	r3, [r0, #0]
 800bd22:	f04f 0900 	mov.w	r9, #0
 800bd26:	07eb      	lsls	r3, r5, #31
 800bd28:	d50a      	bpl.n	800bd40 <__pow5mult+0x84>
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7ff ff1a 	bl	800bb68 <__multiply>
 800bd34:	4639      	mov	r1, r7
 800bd36:	4680      	mov	r8, r0
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7ff fe49 	bl	800b9d0 <_Bfree>
 800bd3e:	4647      	mov	r7, r8
 800bd40:	106d      	asrs	r5, r5, #1
 800bd42:	d00b      	beq.n	800bd5c <__pow5mult+0xa0>
 800bd44:	6820      	ldr	r0, [r4, #0]
 800bd46:	b938      	cbnz	r0, 800bd58 <__pow5mult+0x9c>
 800bd48:	4622      	mov	r2, r4
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f7ff ff0b 	bl	800bb68 <__multiply>
 800bd52:	6020      	str	r0, [r4, #0]
 800bd54:	f8c0 9000 	str.w	r9, [r0]
 800bd58:	4604      	mov	r4, r0
 800bd5a:	e7e4      	b.n	800bd26 <__pow5mult+0x6a>
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd62:	bf00      	nop
 800bd64:	0800d080 	.word	0x0800d080
 800bd68:	0800ceb5 	.word	0x0800ceb5
 800bd6c:	0800cf35 	.word	0x0800cf35

0800bd70 <__lshift>:
 800bd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd74:	460c      	mov	r4, r1
 800bd76:	6849      	ldr	r1, [r1, #4]
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd7e:	68a3      	ldr	r3, [r4, #8]
 800bd80:	4607      	mov	r7, r0
 800bd82:	4691      	mov	r9, r2
 800bd84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd88:	f108 0601 	add.w	r6, r8, #1
 800bd8c:	42b3      	cmp	r3, r6
 800bd8e:	db0b      	blt.n	800bda8 <__lshift+0x38>
 800bd90:	4638      	mov	r0, r7
 800bd92:	f7ff fddd 	bl	800b950 <_Balloc>
 800bd96:	4605      	mov	r5, r0
 800bd98:	b948      	cbnz	r0, 800bdae <__lshift+0x3e>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	4b28      	ldr	r3, [pc, #160]	; (800be40 <__lshift+0xd0>)
 800bd9e:	4829      	ldr	r0, [pc, #164]	; (800be44 <__lshift+0xd4>)
 800bda0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bda4:	f000 fa0e 	bl	800c1c4 <__assert_func>
 800bda8:	3101      	adds	r1, #1
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	e7ee      	b.n	800bd8c <__lshift+0x1c>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	f100 0114 	add.w	r1, r0, #20
 800bdb4:	f100 0210 	add.w	r2, r0, #16
 800bdb8:	4618      	mov	r0, r3
 800bdba:	4553      	cmp	r3, sl
 800bdbc:	db33      	blt.n	800be26 <__lshift+0xb6>
 800bdbe:	6920      	ldr	r0, [r4, #16]
 800bdc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdc4:	f104 0314 	add.w	r3, r4, #20
 800bdc8:	f019 091f 	ands.w	r9, r9, #31
 800bdcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdd4:	d02b      	beq.n	800be2e <__lshift+0xbe>
 800bdd6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdda:	468a      	mov	sl, r1
 800bddc:	2200      	movs	r2, #0
 800bdde:	6818      	ldr	r0, [r3, #0]
 800bde0:	fa00 f009 	lsl.w	r0, r0, r9
 800bde4:	4310      	orrs	r0, r2
 800bde6:	f84a 0b04 	str.w	r0, [sl], #4
 800bdea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdee:	459c      	cmp	ip, r3
 800bdf0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdf4:	d8f3      	bhi.n	800bdde <__lshift+0x6e>
 800bdf6:	ebac 0304 	sub.w	r3, ip, r4
 800bdfa:	3b15      	subs	r3, #21
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	3304      	adds	r3, #4
 800be02:	f104 0015 	add.w	r0, r4, #21
 800be06:	4584      	cmp	ip, r0
 800be08:	bf38      	it	cc
 800be0a:	2304      	movcc	r3, #4
 800be0c:	50ca      	str	r2, [r1, r3]
 800be0e:	b10a      	cbz	r2, 800be14 <__lshift+0xa4>
 800be10:	f108 0602 	add.w	r6, r8, #2
 800be14:	3e01      	subs	r6, #1
 800be16:	4638      	mov	r0, r7
 800be18:	612e      	str	r6, [r5, #16]
 800be1a:	4621      	mov	r1, r4
 800be1c:	f7ff fdd8 	bl	800b9d0 <_Bfree>
 800be20:	4628      	mov	r0, r5
 800be22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be26:	f842 0f04 	str.w	r0, [r2, #4]!
 800be2a:	3301      	adds	r3, #1
 800be2c:	e7c5      	b.n	800bdba <__lshift+0x4a>
 800be2e:	3904      	subs	r1, #4
 800be30:	f853 2b04 	ldr.w	r2, [r3], #4
 800be34:	f841 2f04 	str.w	r2, [r1, #4]!
 800be38:	459c      	cmp	ip, r3
 800be3a:	d8f9      	bhi.n	800be30 <__lshift+0xc0>
 800be3c:	e7ea      	b.n	800be14 <__lshift+0xa4>
 800be3e:	bf00      	nop
 800be40:	0800cf24 	.word	0x0800cf24
 800be44:	0800cf35 	.word	0x0800cf35

0800be48 <__mcmp>:
 800be48:	b530      	push	{r4, r5, lr}
 800be4a:	6902      	ldr	r2, [r0, #16]
 800be4c:	690c      	ldr	r4, [r1, #16]
 800be4e:	1b12      	subs	r2, r2, r4
 800be50:	d10e      	bne.n	800be70 <__mcmp+0x28>
 800be52:	f100 0314 	add.w	r3, r0, #20
 800be56:	3114      	adds	r1, #20
 800be58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be68:	42a5      	cmp	r5, r4
 800be6a:	d003      	beq.n	800be74 <__mcmp+0x2c>
 800be6c:	d305      	bcc.n	800be7a <__mcmp+0x32>
 800be6e:	2201      	movs	r2, #1
 800be70:	4610      	mov	r0, r2
 800be72:	bd30      	pop	{r4, r5, pc}
 800be74:	4283      	cmp	r3, r0
 800be76:	d3f3      	bcc.n	800be60 <__mcmp+0x18>
 800be78:	e7fa      	b.n	800be70 <__mcmp+0x28>
 800be7a:	f04f 32ff 	mov.w	r2, #4294967295
 800be7e:	e7f7      	b.n	800be70 <__mcmp+0x28>

0800be80 <__mdiff>:
 800be80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	460c      	mov	r4, r1
 800be86:	4606      	mov	r6, r0
 800be88:	4611      	mov	r1, r2
 800be8a:	4620      	mov	r0, r4
 800be8c:	4690      	mov	r8, r2
 800be8e:	f7ff ffdb 	bl	800be48 <__mcmp>
 800be92:	1e05      	subs	r5, r0, #0
 800be94:	d110      	bne.n	800beb8 <__mdiff+0x38>
 800be96:	4629      	mov	r1, r5
 800be98:	4630      	mov	r0, r6
 800be9a:	f7ff fd59 	bl	800b950 <_Balloc>
 800be9e:	b930      	cbnz	r0, 800beae <__mdiff+0x2e>
 800bea0:	4b3a      	ldr	r3, [pc, #232]	; (800bf8c <__mdiff+0x10c>)
 800bea2:	4602      	mov	r2, r0
 800bea4:	f240 2137 	movw	r1, #567	; 0x237
 800bea8:	4839      	ldr	r0, [pc, #228]	; (800bf90 <__mdiff+0x110>)
 800beaa:	f000 f98b 	bl	800c1c4 <__assert_func>
 800beae:	2301      	movs	r3, #1
 800beb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800beb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb8:	bfa4      	itt	ge
 800beba:	4643      	movge	r3, r8
 800bebc:	46a0      	movge	r8, r4
 800bebe:	4630      	mov	r0, r6
 800bec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bec4:	bfa6      	itte	ge
 800bec6:	461c      	movge	r4, r3
 800bec8:	2500      	movge	r5, #0
 800beca:	2501      	movlt	r5, #1
 800becc:	f7ff fd40 	bl	800b950 <_Balloc>
 800bed0:	b920      	cbnz	r0, 800bedc <__mdiff+0x5c>
 800bed2:	4b2e      	ldr	r3, [pc, #184]	; (800bf8c <__mdiff+0x10c>)
 800bed4:	4602      	mov	r2, r0
 800bed6:	f240 2145 	movw	r1, #581	; 0x245
 800beda:	e7e5      	b.n	800bea8 <__mdiff+0x28>
 800bedc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bee0:	6926      	ldr	r6, [r4, #16]
 800bee2:	60c5      	str	r5, [r0, #12]
 800bee4:	f104 0914 	add.w	r9, r4, #20
 800bee8:	f108 0514 	add.w	r5, r8, #20
 800beec:	f100 0e14 	add.w	lr, r0, #20
 800bef0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bef4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bef8:	f108 0210 	add.w	r2, r8, #16
 800befc:	46f2      	mov	sl, lr
 800befe:	2100      	movs	r1, #0
 800bf00:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf08:	fa11 f88b 	uxtah	r8, r1, fp
 800bf0c:	b299      	uxth	r1, r3
 800bf0e:	0c1b      	lsrs	r3, r3, #16
 800bf10:	eba8 0801 	sub.w	r8, r8, r1
 800bf14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf18:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf1c:	fa1f f888 	uxth.w	r8, r8
 800bf20:	1419      	asrs	r1, r3, #16
 800bf22:	454e      	cmp	r6, r9
 800bf24:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf28:	f84a 3b04 	str.w	r3, [sl], #4
 800bf2c:	d8e8      	bhi.n	800bf00 <__mdiff+0x80>
 800bf2e:	1b33      	subs	r3, r6, r4
 800bf30:	3b15      	subs	r3, #21
 800bf32:	f023 0303 	bic.w	r3, r3, #3
 800bf36:	3304      	adds	r3, #4
 800bf38:	3415      	adds	r4, #21
 800bf3a:	42a6      	cmp	r6, r4
 800bf3c:	bf38      	it	cc
 800bf3e:	2304      	movcc	r3, #4
 800bf40:	441d      	add	r5, r3
 800bf42:	4473      	add	r3, lr
 800bf44:	469e      	mov	lr, r3
 800bf46:	462e      	mov	r6, r5
 800bf48:	4566      	cmp	r6, ip
 800bf4a:	d30e      	bcc.n	800bf6a <__mdiff+0xea>
 800bf4c:	f10c 0203 	add.w	r2, ip, #3
 800bf50:	1b52      	subs	r2, r2, r5
 800bf52:	f022 0203 	bic.w	r2, r2, #3
 800bf56:	3d03      	subs	r5, #3
 800bf58:	45ac      	cmp	ip, r5
 800bf5a:	bf38      	it	cc
 800bf5c:	2200      	movcc	r2, #0
 800bf5e:	4413      	add	r3, r2
 800bf60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf64:	b17a      	cbz	r2, 800bf86 <__mdiff+0x106>
 800bf66:	6107      	str	r7, [r0, #16]
 800bf68:	e7a4      	b.n	800beb4 <__mdiff+0x34>
 800bf6a:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf6e:	fa11 f288 	uxtah	r2, r1, r8
 800bf72:	1414      	asrs	r4, r2, #16
 800bf74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf78:	b292      	uxth	r2, r2
 800bf7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf7e:	f84e 2b04 	str.w	r2, [lr], #4
 800bf82:	1421      	asrs	r1, r4, #16
 800bf84:	e7e0      	b.n	800bf48 <__mdiff+0xc8>
 800bf86:	3f01      	subs	r7, #1
 800bf88:	e7ea      	b.n	800bf60 <__mdiff+0xe0>
 800bf8a:	bf00      	nop
 800bf8c:	0800cf24 	.word	0x0800cf24
 800bf90:	0800cf35 	.word	0x0800cf35

0800bf94 <__d2b>:
 800bf94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf98:	460f      	mov	r7, r1
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	ec59 8b10 	vmov	r8, r9, d0
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	f7ff fcd5 	bl	800b950 <_Balloc>
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	b930      	cbnz	r0, 800bfb8 <__d2b+0x24>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	4b24      	ldr	r3, [pc, #144]	; (800c040 <__d2b+0xac>)
 800bfae:	4825      	ldr	r0, [pc, #148]	; (800c044 <__d2b+0xb0>)
 800bfb0:	f240 310f 	movw	r1, #783	; 0x30f
 800bfb4:	f000 f906 	bl	800c1c4 <__assert_func>
 800bfb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfc0:	bb2d      	cbnz	r5, 800c00e <__d2b+0x7a>
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	f1b8 0300 	subs.w	r3, r8, #0
 800bfc8:	d026      	beq.n	800c018 <__d2b+0x84>
 800bfca:	4668      	mov	r0, sp
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	f7ff fd87 	bl	800bae0 <__lo0bits>
 800bfd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfd6:	b1e8      	cbz	r0, 800c014 <__d2b+0x80>
 800bfd8:	f1c0 0320 	rsb	r3, r0, #32
 800bfdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe0:	430b      	orrs	r3, r1
 800bfe2:	40c2      	lsrs	r2, r0
 800bfe4:	6163      	str	r3, [r4, #20]
 800bfe6:	9201      	str	r2, [sp, #4]
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	61a3      	str	r3, [r4, #24]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	bf14      	ite	ne
 800bff0:	2202      	movne	r2, #2
 800bff2:	2201      	moveq	r2, #1
 800bff4:	6122      	str	r2, [r4, #16]
 800bff6:	b1bd      	cbz	r5, 800c028 <__d2b+0x94>
 800bff8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bffc:	4405      	add	r5, r0
 800bffe:	603d      	str	r5, [r7, #0]
 800c000:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c004:	6030      	str	r0, [r6, #0]
 800c006:	4620      	mov	r0, r4
 800c008:	b003      	add	sp, #12
 800c00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c00e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c012:	e7d6      	b.n	800bfc2 <__d2b+0x2e>
 800c014:	6161      	str	r1, [r4, #20]
 800c016:	e7e7      	b.n	800bfe8 <__d2b+0x54>
 800c018:	a801      	add	r0, sp, #4
 800c01a:	f7ff fd61 	bl	800bae0 <__lo0bits>
 800c01e:	9b01      	ldr	r3, [sp, #4]
 800c020:	6163      	str	r3, [r4, #20]
 800c022:	3020      	adds	r0, #32
 800c024:	2201      	movs	r2, #1
 800c026:	e7e5      	b.n	800bff4 <__d2b+0x60>
 800c028:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c02c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c030:	6038      	str	r0, [r7, #0]
 800c032:	6918      	ldr	r0, [r3, #16]
 800c034:	f7ff fd34 	bl	800baa0 <__hi0bits>
 800c038:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c03c:	e7e2      	b.n	800c004 <__d2b+0x70>
 800c03e:	bf00      	nop
 800c040:	0800cf24 	.word	0x0800cf24
 800c044:	0800cf35 	.word	0x0800cf35

0800c048 <__sflush_r>:
 800c048:	898a      	ldrh	r2, [r1, #12]
 800c04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04e:	4605      	mov	r5, r0
 800c050:	0710      	lsls	r0, r2, #28
 800c052:	460c      	mov	r4, r1
 800c054:	d458      	bmi.n	800c108 <__sflush_r+0xc0>
 800c056:	684b      	ldr	r3, [r1, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dc05      	bgt.n	800c068 <__sflush_r+0x20>
 800c05c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dc02      	bgt.n	800c068 <__sflush_r+0x20>
 800c062:	2000      	movs	r0, #0
 800c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	d0f9      	beq.n	800c062 <__sflush_r+0x1a>
 800c06e:	2300      	movs	r3, #0
 800c070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c074:	682f      	ldr	r7, [r5, #0]
 800c076:	6a21      	ldr	r1, [r4, #32]
 800c078:	602b      	str	r3, [r5, #0]
 800c07a:	d032      	beq.n	800c0e2 <__sflush_r+0x9a>
 800c07c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	075a      	lsls	r2, r3, #29
 800c082:	d505      	bpl.n	800c090 <__sflush_r+0x48>
 800c084:	6863      	ldr	r3, [r4, #4]
 800c086:	1ac0      	subs	r0, r0, r3
 800c088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c08a:	b10b      	cbz	r3, 800c090 <__sflush_r+0x48>
 800c08c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c08e:	1ac0      	subs	r0, r0, r3
 800c090:	2300      	movs	r3, #0
 800c092:	4602      	mov	r2, r0
 800c094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c096:	6a21      	ldr	r1, [r4, #32]
 800c098:	4628      	mov	r0, r5
 800c09a:	47b0      	blx	r6
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	d106      	bne.n	800c0b0 <__sflush_r+0x68>
 800c0a2:	6829      	ldr	r1, [r5, #0]
 800c0a4:	291d      	cmp	r1, #29
 800c0a6:	d82b      	bhi.n	800c100 <__sflush_r+0xb8>
 800c0a8:	4a29      	ldr	r2, [pc, #164]	; (800c150 <__sflush_r+0x108>)
 800c0aa:	410a      	asrs	r2, r1
 800c0ac:	07d6      	lsls	r6, r2, #31
 800c0ae:	d427      	bmi.n	800c100 <__sflush_r+0xb8>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	6062      	str	r2, [r4, #4]
 800c0b4:	04d9      	lsls	r1, r3, #19
 800c0b6:	6922      	ldr	r2, [r4, #16]
 800c0b8:	6022      	str	r2, [r4, #0]
 800c0ba:	d504      	bpl.n	800c0c6 <__sflush_r+0x7e>
 800c0bc:	1c42      	adds	r2, r0, #1
 800c0be:	d101      	bne.n	800c0c4 <__sflush_r+0x7c>
 800c0c0:	682b      	ldr	r3, [r5, #0]
 800c0c2:	b903      	cbnz	r3, 800c0c6 <__sflush_r+0x7e>
 800c0c4:	6560      	str	r0, [r4, #84]	; 0x54
 800c0c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0c8:	602f      	str	r7, [r5, #0]
 800c0ca:	2900      	cmp	r1, #0
 800c0cc:	d0c9      	beq.n	800c062 <__sflush_r+0x1a>
 800c0ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0d2:	4299      	cmp	r1, r3
 800c0d4:	d002      	beq.n	800c0dc <__sflush_r+0x94>
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f7ff fb3a 	bl	800b750 <_free_r>
 800c0dc:	2000      	movs	r0, #0
 800c0de:	6360      	str	r0, [r4, #52]	; 0x34
 800c0e0:	e7c0      	b.n	800c064 <__sflush_r+0x1c>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	47b0      	blx	r6
 800c0e8:	1c41      	adds	r1, r0, #1
 800c0ea:	d1c8      	bne.n	800c07e <__sflush_r+0x36>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d0c5      	beq.n	800c07e <__sflush_r+0x36>
 800c0f2:	2b1d      	cmp	r3, #29
 800c0f4:	d001      	beq.n	800c0fa <__sflush_r+0xb2>
 800c0f6:	2b16      	cmp	r3, #22
 800c0f8:	d101      	bne.n	800c0fe <__sflush_r+0xb6>
 800c0fa:	602f      	str	r7, [r5, #0]
 800c0fc:	e7b1      	b.n	800c062 <__sflush_r+0x1a>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	e7ad      	b.n	800c064 <__sflush_r+0x1c>
 800c108:	690f      	ldr	r7, [r1, #16]
 800c10a:	2f00      	cmp	r7, #0
 800c10c:	d0a9      	beq.n	800c062 <__sflush_r+0x1a>
 800c10e:	0793      	lsls	r3, r2, #30
 800c110:	680e      	ldr	r6, [r1, #0]
 800c112:	bf08      	it	eq
 800c114:	694b      	ldreq	r3, [r1, #20]
 800c116:	600f      	str	r7, [r1, #0]
 800c118:	bf18      	it	ne
 800c11a:	2300      	movne	r3, #0
 800c11c:	eba6 0807 	sub.w	r8, r6, r7
 800c120:	608b      	str	r3, [r1, #8]
 800c122:	f1b8 0f00 	cmp.w	r8, #0
 800c126:	dd9c      	ble.n	800c062 <__sflush_r+0x1a>
 800c128:	6a21      	ldr	r1, [r4, #32]
 800c12a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c12c:	4643      	mov	r3, r8
 800c12e:	463a      	mov	r2, r7
 800c130:	4628      	mov	r0, r5
 800c132:	47b0      	blx	r6
 800c134:	2800      	cmp	r0, #0
 800c136:	dc06      	bgt.n	800c146 <__sflush_r+0xfe>
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c13e:	81a3      	strh	r3, [r4, #12]
 800c140:	f04f 30ff 	mov.w	r0, #4294967295
 800c144:	e78e      	b.n	800c064 <__sflush_r+0x1c>
 800c146:	4407      	add	r7, r0
 800c148:	eba8 0800 	sub.w	r8, r8, r0
 800c14c:	e7e9      	b.n	800c122 <__sflush_r+0xda>
 800c14e:	bf00      	nop
 800c150:	dfbffffe 	.word	0xdfbffffe

0800c154 <_fflush_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	690b      	ldr	r3, [r1, #16]
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	b913      	cbnz	r3, 800c164 <_fflush_r+0x10>
 800c15e:	2500      	movs	r5, #0
 800c160:	4628      	mov	r0, r5
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	b118      	cbz	r0, 800c16e <_fflush_r+0x1a>
 800c166:	6a03      	ldr	r3, [r0, #32]
 800c168:	b90b      	cbnz	r3, 800c16e <_fflush_r+0x1a>
 800c16a:	f7fe fb9f 	bl	800a8ac <__sinit>
 800c16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0f3      	beq.n	800c15e <_fflush_r+0xa>
 800c176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c178:	07d0      	lsls	r0, r2, #31
 800c17a:	d404      	bmi.n	800c186 <_fflush_r+0x32>
 800c17c:	0599      	lsls	r1, r3, #22
 800c17e:	d402      	bmi.n	800c186 <_fflush_r+0x32>
 800c180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c182:	f7fe fce0 	bl	800ab46 <__retarget_lock_acquire_recursive>
 800c186:	4628      	mov	r0, r5
 800c188:	4621      	mov	r1, r4
 800c18a:	f7ff ff5d 	bl	800c048 <__sflush_r>
 800c18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c190:	07da      	lsls	r2, r3, #31
 800c192:	4605      	mov	r5, r0
 800c194:	d4e4      	bmi.n	800c160 <_fflush_r+0xc>
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	059b      	lsls	r3, r3, #22
 800c19a:	d4e1      	bmi.n	800c160 <_fflush_r+0xc>
 800c19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c19e:	f7fe fcd3 	bl	800ab48 <__retarget_lock_release_recursive>
 800c1a2:	e7dd      	b.n	800c160 <_fflush_r+0xc>

0800c1a4 <_sbrk_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4d06      	ldr	r5, [pc, #24]	; (800c1c0 <_sbrk_r+0x1c>)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	4608      	mov	r0, r1
 800c1ae:	602b      	str	r3, [r5, #0]
 800c1b0:	f7f6 f9e6 	bl	8002580 <_sbrk>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_sbrk_r+0x1a>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_sbrk_r+0x1a>
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	200054dc 	.word	0x200054dc

0800c1c4 <__assert_func>:
 800c1c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1c6:	4614      	mov	r4, r2
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4b09      	ldr	r3, [pc, #36]	; (800c1f0 <__assert_func+0x2c>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	68d8      	ldr	r0, [r3, #12]
 800c1d2:	b14c      	cbz	r4, 800c1e8 <__assert_func+0x24>
 800c1d4:	4b07      	ldr	r3, [pc, #28]	; (800c1f4 <__assert_func+0x30>)
 800c1d6:	9100      	str	r1, [sp, #0]
 800c1d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1dc:	4906      	ldr	r1, [pc, #24]	; (800c1f8 <__assert_func+0x34>)
 800c1de:	462b      	mov	r3, r5
 800c1e0:	f000 f844 	bl	800c26c <fiprintf>
 800c1e4:	f000 f854 	bl	800c290 <abort>
 800c1e8:	4b04      	ldr	r3, [pc, #16]	; (800c1fc <__assert_func+0x38>)
 800c1ea:	461c      	mov	r4, r3
 800c1ec:	e7f3      	b.n	800c1d6 <__assert_func+0x12>
 800c1ee:	bf00      	nop
 800c1f0:	20000074 	.word	0x20000074
 800c1f4:	0800d096 	.word	0x0800d096
 800c1f8:	0800d0a3 	.word	0x0800d0a3
 800c1fc:	0800d0d1 	.word	0x0800d0d1

0800c200 <_calloc_r>:
 800c200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c202:	fba1 2402 	umull	r2, r4, r1, r2
 800c206:	b94c      	cbnz	r4, 800c21c <_calloc_r+0x1c>
 800c208:	4611      	mov	r1, r2
 800c20a:	9201      	str	r2, [sp, #4]
 800c20c:	f7ff fb14 	bl	800b838 <_malloc_r>
 800c210:	9a01      	ldr	r2, [sp, #4]
 800c212:	4605      	mov	r5, r0
 800c214:	b930      	cbnz	r0, 800c224 <_calloc_r+0x24>
 800c216:	4628      	mov	r0, r5
 800c218:	b003      	add	sp, #12
 800c21a:	bd30      	pop	{r4, r5, pc}
 800c21c:	220c      	movs	r2, #12
 800c21e:	6002      	str	r2, [r0, #0]
 800c220:	2500      	movs	r5, #0
 800c222:	e7f8      	b.n	800c216 <_calloc_r+0x16>
 800c224:	4621      	mov	r1, r4
 800c226:	f7fe fbba 	bl	800a99e <memset>
 800c22a:	e7f4      	b.n	800c216 <_calloc_r+0x16>

0800c22c <__ascii_mbtowc>:
 800c22c:	b082      	sub	sp, #8
 800c22e:	b901      	cbnz	r1, 800c232 <__ascii_mbtowc+0x6>
 800c230:	a901      	add	r1, sp, #4
 800c232:	b142      	cbz	r2, 800c246 <__ascii_mbtowc+0x1a>
 800c234:	b14b      	cbz	r3, 800c24a <__ascii_mbtowc+0x1e>
 800c236:	7813      	ldrb	r3, [r2, #0]
 800c238:	600b      	str	r3, [r1, #0]
 800c23a:	7812      	ldrb	r2, [r2, #0]
 800c23c:	1e10      	subs	r0, r2, #0
 800c23e:	bf18      	it	ne
 800c240:	2001      	movne	r0, #1
 800c242:	b002      	add	sp, #8
 800c244:	4770      	bx	lr
 800c246:	4610      	mov	r0, r2
 800c248:	e7fb      	b.n	800c242 <__ascii_mbtowc+0x16>
 800c24a:	f06f 0001 	mvn.w	r0, #1
 800c24e:	e7f8      	b.n	800c242 <__ascii_mbtowc+0x16>

0800c250 <__ascii_wctomb>:
 800c250:	b149      	cbz	r1, 800c266 <__ascii_wctomb+0x16>
 800c252:	2aff      	cmp	r2, #255	; 0xff
 800c254:	bf85      	ittet	hi
 800c256:	238a      	movhi	r3, #138	; 0x8a
 800c258:	6003      	strhi	r3, [r0, #0]
 800c25a:	700a      	strbls	r2, [r1, #0]
 800c25c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c260:	bf98      	it	ls
 800c262:	2001      	movls	r0, #1
 800c264:	4770      	bx	lr
 800c266:	4608      	mov	r0, r1
 800c268:	4770      	bx	lr
	...

0800c26c <fiprintf>:
 800c26c:	b40e      	push	{r1, r2, r3}
 800c26e:	b503      	push	{r0, r1, lr}
 800c270:	4601      	mov	r1, r0
 800c272:	ab03      	add	r3, sp, #12
 800c274:	4805      	ldr	r0, [pc, #20]	; (800c28c <fiprintf+0x20>)
 800c276:	f853 2b04 	ldr.w	r2, [r3], #4
 800c27a:	6800      	ldr	r0, [r0, #0]
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	f000 f837 	bl	800c2f0 <_vfiprintf_r>
 800c282:	b002      	add	sp, #8
 800c284:	f85d eb04 	ldr.w	lr, [sp], #4
 800c288:	b003      	add	sp, #12
 800c28a:	4770      	bx	lr
 800c28c:	20000074 	.word	0x20000074

0800c290 <abort>:
 800c290:	b508      	push	{r3, lr}
 800c292:	2006      	movs	r0, #6
 800c294:	f000 fa04 	bl	800c6a0 <raise>
 800c298:	2001      	movs	r0, #1
 800c29a:	f7f6 f8f9 	bl	8002490 <_exit>

0800c29e <__sfputc_r>:
 800c29e:	6893      	ldr	r3, [r2, #8]
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	b410      	push	{r4}
 800c2a6:	6093      	str	r3, [r2, #8]
 800c2a8:	da08      	bge.n	800c2bc <__sfputc_r+0x1e>
 800c2aa:	6994      	ldr	r4, [r2, #24]
 800c2ac:	42a3      	cmp	r3, r4
 800c2ae:	db01      	blt.n	800c2b4 <__sfputc_r+0x16>
 800c2b0:	290a      	cmp	r1, #10
 800c2b2:	d103      	bne.n	800c2bc <__sfputc_r+0x1e>
 800c2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2b8:	f000 b934 	b.w	800c524 <__swbuf_r>
 800c2bc:	6813      	ldr	r3, [r2, #0]
 800c2be:	1c58      	adds	r0, r3, #1
 800c2c0:	6010      	str	r0, [r2, #0]
 800c2c2:	7019      	strb	r1, [r3, #0]
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <__sfputs_r>:
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	460f      	mov	r7, r1
 800c2d2:	4614      	mov	r4, r2
 800c2d4:	18d5      	adds	r5, r2, r3
 800c2d6:	42ac      	cmp	r4, r5
 800c2d8:	d101      	bne.n	800c2de <__sfputs_r+0x12>
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e007      	b.n	800c2ee <__sfputs_r+0x22>
 800c2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e2:	463a      	mov	r2, r7
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7ff ffda 	bl	800c29e <__sfputc_r>
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	d1f3      	bne.n	800c2d6 <__sfputs_r+0xa>
 800c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2f0 <_vfiprintf_r>:
 800c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	460d      	mov	r5, r1
 800c2f6:	b09d      	sub	sp, #116	; 0x74
 800c2f8:	4614      	mov	r4, r2
 800c2fa:	4698      	mov	r8, r3
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	b118      	cbz	r0, 800c308 <_vfiprintf_r+0x18>
 800c300:	6a03      	ldr	r3, [r0, #32]
 800c302:	b90b      	cbnz	r3, 800c308 <_vfiprintf_r+0x18>
 800c304:	f7fe fad2 	bl	800a8ac <__sinit>
 800c308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c30a:	07d9      	lsls	r1, r3, #31
 800c30c:	d405      	bmi.n	800c31a <_vfiprintf_r+0x2a>
 800c30e:	89ab      	ldrh	r3, [r5, #12]
 800c310:	059a      	lsls	r2, r3, #22
 800c312:	d402      	bmi.n	800c31a <_vfiprintf_r+0x2a>
 800c314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c316:	f7fe fc16 	bl	800ab46 <__retarget_lock_acquire_recursive>
 800c31a:	89ab      	ldrh	r3, [r5, #12]
 800c31c:	071b      	lsls	r3, r3, #28
 800c31e:	d501      	bpl.n	800c324 <_vfiprintf_r+0x34>
 800c320:	692b      	ldr	r3, [r5, #16]
 800c322:	b99b      	cbnz	r3, 800c34c <_vfiprintf_r+0x5c>
 800c324:	4629      	mov	r1, r5
 800c326:	4630      	mov	r0, r6
 800c328:	f000 f93a 	bl	800c5a0 <__swsetup_r>
 800c32c:	b170      	cbz	r0, 800c34c <_vfiprintf_r+0x5c>
 800c32e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c330:	07dc      	lsls	r4, r3, #31
 800c332:	d504      	bpl.n	800c33e <_vfiprintf_r+0x4e>
 800c334:	f04f 30ff 	mov.w	r0, #4294967295
 800c338:	b01d      	add	sp, #116	; 0x74
 800c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33e:	89ab      	ldrh	r3, [r5, #12]
 800c340:	0598      	lsls	r0, r3, #22
 800c342:	d4f7      	bmi.n	800c334 <_vfiprintf_r+0x44>
 800c344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c346:	f7fe fbff 	bl	800ab48 <__retarget_lock_release_recursive>
 800c34a:	e7f3      	b.n	800c334 <_vfiprintf_r+0x44>
 800c34c:	2300      	movs	r3, #0
 800c34e:	9309      	str	r3, [sp, #36]	; 0x24
 800c350:	2320      	movs	r3, #32
 800c352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c356:	f8cd 800c 	str.w	r8, [sp, #12]
 800c35a:	2330      	movs	r3, #48	; 0x30
 800c35c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c510 <_vfiprintf_r+0x220>
 800c360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c364:	f04f 0901 	mov.w	r9, #1
 800c368:	4623      	mov	r3, r4
 800c36a:	469a      	mov	sl, r3
 800c36c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c370:	b10a      	cbz	r2, 800c376 <_vfiprintf_r+0x86>
 800c372:	2a25      	cmp	r2, #37	; 0x25
 800c374:	d1f9      	bne.n	800c36a <_vfiprintf_r+0x7a>
 800c376:	ebba 0b04 	subs.w	fp, sl, r4
 800c37a:	d00b      	beq.n	800c394 <_vfiprintf_r+0xa4>
 800c37c:	465b      	mov	r3, fp
 800c37e:	4622      	mov	r2, r4
 800c380:	4629      	mov	r1, r5
 800c382:	4630      	mov	r0, r6
 800c384:	f7ff ffa2 	bl	800c2cc <__sfputs_r>
 800c388:	3001      	adds	r0, #1
 800c38a:	f000 80a9 	beq.w	800c4e0 <_vfiprintf_r+0x1f0>
 800c38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c390:	445a      	add	r2, fp
 800c392:	9209      	str	r2, [sp, #36]	; 0x24
 800c394:	f89a 3000 	ldrb.w	r3, [sl]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 80a1 	beq.w	800c4e0 <_vfiprintf_r+0x1f0>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3a8:	f10a 0a01 	add.w	sl, sl, #1
 800c3ac:	9304      	str	r3, [sp, #16]
 800c3ae:	9307      	str	r3, [sp, #28]
 800c3b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3b4:	931a      	str	r3, [sp, #104]	; 0x68
 800c3b6:	4654      	mov	r4, sl
 800c3b8:	2205      	movs	r2, #5
 800c3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3be:	4854      	ldr	r0, [pc, #336]	; (800c510 <_vfiprintf_r+0x220>)
 800c3c0:	f7f3 ff3e 	bl	8000240 <memchr>
 800c3c4:	9a04      	ldr	r2, [sp, #16]
 800c3c6:	b9d8      	cbnz	r0, 800c400 <_vfiprintf_r+0x110>
 800c3c8:	06d1      	lsls	r1, r2, #27
 800c3ca:	bf44      	itt	mi
 800c3cc:	2320      	movmi	r3, #32
 800c3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3d2:	0713      	lsls	r3, r2, #28
 800c3d4:	bf44      	itt	mi
 800c3d6:	232b      	movmi	r3, #43	; 0x2b
 800c3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c3e2:	d015      	beq.n	800c410 <_vfiprintf_r+0x120>
 800c3e4:	9a07      	ldr	r2, [sp, #28]
 800c3e6:	4654      	mov	r4, sl
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	f04f 0c0a 	mov.w	ip, #10
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3f4:	3b30      	subs	r3, #48	; 0x30
 800c3f6:	2b09      	cmp	r3, #9
 800c3f8:	d94d      	bls.n	800c496 <_vfiprintf_r+0x1a6>
 800c3fa:	b1b0      	cbz	r0, 800c42a <_vfiprintf_r+0x13a>
 800c3fc:	9207      	str	r2, [sp, #28]
 800c3fe:	e014      	b.n	800c42a <_vfiprintf_r+0x13a>
 800c400:	eba0 0308 	sub.w	r3, r0, r8
 800c404:	fa09 f303 	lsl.w	r3, r9, r3
 800c408:	4313      	orrs	r3, r2
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	46a2      	mov	sl, r4
 800c40e:	e7d2      	b.n	800c3b6 <_vfiprintf_r+0xc6>
 800c410:	9b03      	ldr	r3, [sp, #12]
 800c412:	1d19      	adds	r1, r3, #4
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	9103      	str	r1, [sp, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bfbb      	ittet	lt
 800c41c:	425b      	neglt	r3, r3
 800c41e:	f042 0202 	orrlt.w	r2, r2, #2
 800c422:	9307      	strge	r3, [sp, #28]
 800c424:	9307      	strlt	r3, [sp, #28]
 800c426:	bfb8      	it	lt
 800c428:	9204      	strlt	r2, [sp, #16]
 800c42a:	7823      	ldrb	r3, [r4, #0]
 800c42c:	2b2e      	cmp	r3, #46	; 0x2e
 800c42e:	d10c      	bne.n	800c44a <_vfiprintf_r+0x15a>
 800c430:	7863      	ldrb	r3, [r4, #1]
 800c432:	2b2a      	cmp	r3, #42	; 0x2a
 800c434:	d134      	bne.n	800c4a0 <_vfiprintf_r+0x1b0>
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	1d1a      	adds	r2, r3, #4
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	9203      	str	r2, [sp, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	bfb8      	it	lt
 800c442:	f04f 33ff 	movlt.w	r3, #4294967295
 800c446:	3402      	adds	r4, #2
 800c448:	9305      	str	r3, [sp, #20]
 800c44a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c520 <_vfiprintf_r+0x230>
 800c44e:	7821      	ldrb	r1, [r4, #0]
 800c450:	2203      	movs	r2, #3
 800c452:	4650      	mov	r0, sl
 800c454:	f7f3 fef4 	bl	8000240 <memchr>
 800c458:	b138      	cbz	r0, 800c46a <_vfiprintf_r+0x17a>
 800c45a:	9b04      	ldr	r3, [sp, #16]
 800c45c:	eba0 000a 	sub.w	r0, r0, sl
 800c460:	2240      	movs	r2, #64	; 0x40
 800c462:	4082      	lsls	r2, r0
 800c464:	4313      	orrs	r3, r2
 800c466:	3401      	adds	r4, #1
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c46e:	4829      	ldr	r0, [pc, #164]	; (800c514 <_vfiprintf_r+0x224>)
 800c470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c474:	2206      	movs	r2, #6
 800c476:	f7f3 fee3 	bl	8000240 <memchr>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d03f      	beq.n	800c4fe <_vfiprintf_r+0x20e>
 800c47e:	4b26      	ldr	r3, [pc, #152]	; (800c518 <_vfiprintf_r+0x228>)
 800c480:	bb1b      	cbnz	r3, 800c4ca <_vfiprintf_r+0x1da>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	3307      	adds	r3, #7
 800c486:	f023 0307 	bic.w	r3, r3, #7
 800c48a:	3308      	adds	r3, #8
 800c48c:	9303      	str	r3, [sp, #12]
 800c48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c490:	443b      	add	r3, r7
 800c492:	9309      	str	r3, [sp, #36]	; 0x24
 800c494:	e768      	b.n	800c368 <_vfiprintf_r+0x78>
 800c496:	fb0c 3202 	mla	r2, ip, r2, r3
 800c49a:	460c      	mov	r4, r1
 800c49c:	2001      	movs	r0, #1
 800c49e:	e7a6      	b.n	800c3ee <_vfiprintf_r+0xfe>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	3401      	adds	r4, #1
 800c4a4:	9305      	str	r3, [sp, #20]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	f04f 0c0a 	mov.w	ip, #10
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b2:	3a30      	subs	r2, #48	; 0x30
 800c4b4:	2a09      	cmp	r2, #9
 800c4b6:	d903      	bls.n	800c4c0 <_vfiprintf_r+0x1d0>
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d0c6      	beq.n	800c44a <_vfiprintf_r+0x15a>
 800c4bc:	9105      	str	r1, [sp, #20]
 800c4be:	e7c4      	b.n	800c44a <_vfiprintf_r+0x15a>
 800c4c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e7f0      	b.n	800c4ac <_vfiprintf_r+0x1bc>
 800c4ca:	ab03      	add	r3, sp, #12
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	462a      	mov	r2, r5
 800c4d0:	4b12      	ldr	r3, [pc, #72]	; (800c51c <_vfiprintf_r+0x22c>)
 800c4d2:	a904      	add	r1, sp, #16
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7fd fdb3 	bl	800a040 <_printf_float>
 800c4da:	4607      	mov	r7, r0
 800c4dc:	1c78      	adds	r0, r7, #1
 800c4de:	d1d6      	bne.n	800c48e <_vfiprintf_r+0x19e>
 800c4e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4e2:	07d9      	lsls	r1, r3, #31
 800c4e4:	d405      	bmi.n	800c4f2 <_vfiprintf_r+0x202>
 800c4e6:	89ab      	ldrh	r3, [r5, #12]
 800c4e8:	059a      	lsls	r2, r3, #22
 800c4ea:	d402      	bmi.n	800c4f2 <_vfiprintf_r+0x202>
 800c4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ee:	f7fe fb2b 	bl	800ab48 <__retarget_lock_release_recursive>
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	065b      	lsls	r3, r3, #25
 800c4f6:	f53f af1d 	bmi.w	800c334 <_vfiprintf_r+0x44>
 800c4fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4fc:	e71c      	b.n	800c338 <_vfiprintf_r+0x48>
 800c4fe:	ab03      	add	r3, sp, #12
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	462a      	mov	r2, r5
 800c504:	4b05      	ldr	r3, [pc, #20]	; (800c51c <_vfiprintf_r+0x22c>)
 800c506:	a904      	add	r1, sp, #16
 800c508:	4630      	mov	r0, r6
 800c50a:	f7fe f821 	bl	800a550 <_printf_i>
 800c50e:	e7e4      	b.n	800c4da <_vfiprintf_r+0x1ea>
 800c510:	0800d1d3 	.word	0x0800d1d3
 800c514:	0800d1dd 	.word	0x0800d1dd
 800c518:	0800a041 	.word	0x0800a041
 800c51c:	0800c2cd 	.word	0x0800c2cd
 800c520:	0800d1d9 	.word	0x0800d1d9

0800c524 <__swbuf_r>:
 800c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c526:	460e      	mov	r6, r1
 800c528:	4614      	mov	r4, r2
 800c52a:	4605      	mov	r5, r0
 800c52c:	b118      	cbz	r0, 800c536 <__swbuf_r+0x12>
 800c52e:	6a03      	ldr	r3, [r0, #32]
 800c530:	b90b      	cbnz	r3, 800c536 <__swbuf_r+0x12>
 800c532:	f7fe f9bb 	bl	800a8ac <__sinit>
 800c536:	69a3      	ldr	r3, [r4, #24]
 800c538:	60a3      	str	r3, [r4, #8]
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	071a      	lsls	r2, r3, #28
 800c53e:	d525      	bpl.n	800c58c <__swbuf_r+0x68>
 800c540:	6923      	ldr	r3, [r4, #16]
 800c542:	b31b      	cbz	r3, 800c58c <__swbuf_r+0x68>
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	6922      	ldr	r2, [r4, #16]
 800c548:	1a98      	subs	r0, r3, r2
 800c54a:	6963      	ldr	r3, [r4, #20]
 800c54c:	b2f6      	uxtb	r6, r6
 800c54e:	4283      	cmp	r3, r0
 800c550:	4637      	mov	r7, r6
 800c552:	dc04      	bgt.n	800c55e <__swbuf_r+0x3a>
 800c554:	4621      	mov	r1, r4
 800c556:	4628      	mov	r0, r5
 800c558:	f7ff fdfc 	bl	800c154 <_fflush_r>
 800c55c:	b9e0      	cbnz	r0, 800c598 <__swbuf_r+0x74>
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	3b01      	subs	r3, #1
 800c562:	60a3      	str	r3, [r4, #8]
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	6022      	str	r2, [r4, #0]
 800c56a:	701e      	strb	r6, [r3, #0]
 800c56c:	6962      	ldr	r2, [r4, #20]
 800c56e:	1c43      	adds	r3, r0, #1
 800c570:	429a      	cmp	r2, r3
 800c572:	d004      	beq.n	800c57e <__swbuf_r+0x5a>
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	07db      	lsls	r3, r3, #31
 800c578:	d506      	bpl.n	800c588 <__swbuf_r+0x64>
 800c57a:	2e0a      	cmp	r6, #10
 800c57c:	d104      	bne.n	800c588 <__swbuf_r+0x64>
 800c57e:	4621      	mov	r1, r4
 800c580:	4628      	mov	r0, r5
 800c582:	f7ff fde7 	bl	800c154 <_fflush_r>
 800c586:	b938      	cbnz	r0, 800c598 <__swbuf_r+0x74>
 800c588:	4638      	mov	r0, r7
 800c58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c58c:	4621      	mov	r1, r4
 800c58e:	4628      	mov	r0, r5
 800c590:	f000 f806 	bl	800c5a0 <__swsetup_r>
 800c594:	2800      	cmp	r0, #0
 800c596:	d0d5      	beq.n	800c544 <__swbuf_r+0x20>
 800c598:	f04f 37ff 	mov.w	r7, #4294967295
 800c59c:	e7f4      	b.n	800c588 <__swbuf_r+0x64>
	...

0800c5a0 <__swsetup_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4b2a      	ldr	r3, [pc, #168]	; (800c64c <__swsetup_r+0xac>)
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	6818      	ldr	r0, [r3, #0]
 800c5a8:	460c      	mov	r4, r1
 800c5aa:	b118      	cbz	r0, 800c5b4 <__swsetup_r+0x14>
 800c5ac:	6a03      	ldr	r3, [r0, #32]
 800c5ae:	b90b      	cbnz	r3, 800c5b4 <__swsetup_r+0x14>
 800c5b0:	f7fe f97c 	bl	800a8ac <__sinit>
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5ba:	0718      	lsls	r0, r3, #28
 800c5bc:	d422      	bmi.n	800c604 <__swsetup_r+0x64>
 800c5be:	06d9      	lsls	r1, r3, #27
 800c5c0:	d407      	bmi.n	800c5d2 <__swsetup_r+0x32>
 800c5c2:	2309      	movs	r3, #9
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5ca:	81a3      	strh	r3, [r4, #12]
 800c5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d0:	e034      	b.n	800c63c <__swsetup_r+0x9c>
 800c5d2:	0758      	lsls	r0, r3, #29
 800c5d4:	d512      	bpl.n	800c5fc <__swsetup_r+0x5c>
 800c5d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5d8:	b141      	cbz	r1, 800c5ec <__swsetup_r+0x4c>
 800c5da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5de:	4299      	cmp	r1, r3
 800c5e0:	d002      	beq.n	800c5e8 <__swsetup_r+0x48>
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f7ff f8b4 	bl	800b750 <_free_r>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	6363      	str	r3, [r4, #52]	; 0x34
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5f2:	81a3      	strh	r3, [r4, #12]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	6063      	str	r3, [r4, #4]
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	6023      	str	r3, [r4, #0]
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	f043 0308 	orr.w	r3, r3, #8
 800c602:	81a3      	strh	r3, [r4, #12]
 800c604:	6923      	ldr	r3, [r4, #16]
 800c606:	b94b      	cbnz	r3, 800c61c <__swsetup_r+0x7c>
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c60e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c612:	d003      	beq.n	800c61c <__swsetup_r+0x7c>
 800c614:	4621      	mov	r1, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f884 	bl	800c724 <__smakebuf_r>
 800c61c:	89a0      	ldrh	r0, [r4, #12]
 800c61e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c622:	f010 0301 	ands.w	r3, r0, #1
 800c626:	d00a      	beq.n	800c63e <__swsetup_r+0x9e>
 800c628:	2300      	movs	r3, #0
 800c62a:	60a3      	str	r3, [r4, #8]
 800c62c:	6963      	ldr	r3, [r4, #20]
 800c62e:	425b      	negs	r3, r3
 800c630:	61a3      	str	r3, [r4, #24]
 800c632:	6923      	ldr	r3, [r4, #16]
 800c634:	b943      	cbnz	r3, 800c648 <__swsetup_r+0xa8>
 800c636:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c63a:	d1c4      	bne.n	800c5c6 <__swsetup_r+0x26>
 800c63c:	bd38      	pop	{r3, r4, r5, pc}
 800c63e:	0781      	lsls	r1, r0, #30
 800c640:	bf58      	it	pl
 800c642:	6963      	ldrpl	r3, [r4, #20]
 800c644:	60a3      	str	r3, [r4, #8]
 800c646:	e7f4      	b.n	800c632 <__swsetup_r+0x92>
 800c648:	2000      	movs	r0, #0
 800c64a:	e7f7      	b.n	800c63c <__swsetup_r+0x9c>
 800c64c:	20000074 	.word	0x20000074

0800c650 <_raise_r>:
 800c650:	291f      	cmp	r1, #31
 800c652:	b538      	push	{r3, r4, r5, lr}
 800c654:	4604      	mov	r4, r0
 800c656:	460d      	mov	r5, r1
 800c658:	d904      	bls.n	800c664 <_raise_r+0x14>
 800c65a:	2316      	movs	r3, #22
 800c65c:	6003      	str	r3, [r0, #0]
 800c65e:	f04f 30ff 	mov.w	r0, #4294967295
 800c662:	bd38      	pop	{r3, r4, r5, pc}
 800c664:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c666:	b112      	cbz	r2, 800c66e <_raise_r+0x1e>
 800c668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c66c:	b94b      	cbnz	r3, 800c682 <_raise_r+0x32>
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 f830 	bl	800c6d4 <_getpid_r>
 800c674:	462a      	mov	r2, r5
 800c676:	4601      	mov	r1, r0
 800c678:	4620      	mov	r0, r4
 800c67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c67e:	f000 b817 	b.w	800c6b0 <_kill_r>
 800c682:	2b01      	cmp	r3, #1
 800c684:	d00a      	beq.n	800c69c <_raise_r+0x4c>
 800c686:	1c59      	adds	r1, r3, #1
 800c688:	d103      	bne.n	800c692 <_raise_r+0x42>
 800c68a:	2316      	movs	r3, #22
 800c68c:	6003      	str	r3, [r0, #0]
 800c68e:	2001      	movs	r0, #1
 800c690:	e7e7      	b.n	800c662 <_raise_r+0x12>
 800c692:	2400      	movs	r4, #0
 800c694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c698:	4628      	mov	r0, r5
 800c69a:	4798      	blx	r3
 800c69c:	2000      	movs	r0, #0
 800c69e:	e7e0      	b.n	800c662 <_raise_r+0x12>

0800c6a0 <raise>:
 800c6a0:	4b02      	ldr	r3, [pc, #8]	; (800c6ac <raise+0xc>)
 800c6a2:	4601      	mov	r1, r0
 800c6a4:	6818      	ldr	r0, [r3, #0]
 800c6a6:	f7ff bfd3 	b.w	800c650 <_raise_r>
 800c6aa:	bf00      	nop
 800c6ac:	20000074 	.word	0x20000074

0800c6b0 <_kill_r>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	4d07      	ldr	r5, [pc, #28]	; (800c6d0 <_kill_r+0x20>)
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	4608      	mov	r0, r1
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	602b      	str	r3, [r5, #0]
 800c6be:	f7f5 fed7 	bl	8002470 <_kill>
 800c6c2:	1c43      	adds	r3, r0, #1
 800c6c4:	d102      	bne.n	800c6cc <_kill_r+0x1c>
 800c6c6:	682b      	ldr	r3, [r5, #0]
 800c6c8:	b103      	cbz	r3, 800c6cc <_kill_r+0x1c>
 800c6ca:	6023      	str	r3, [r4, #0]
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	bf00      	nop
 800c6d0:	200054dc 	.word	0x200054dc

0800c6d4 <_getpid_r>:
 800c6d4:	f7f5 bec4 	b.w	8002460 <_getpid>

0800c6d8 <__swhatbuf_r>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	460c      	mov	r4, r1
 800c6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e0:	2900      	cmp	r1, #0
 800c6e2:	b096      	sub	sp, #88	; 0x58
 800c6e4:	4615      	mov	r5, r2
 800c6e6:	461e      	mov	r6, r3
 800c6e8:	da0d      	bge.n	800c706 <__swhatbuf_r+0x2e>
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c6f0:	f04f 0100 	mov.w	r1, #0
 800c6f4:	bf0c      	ite	eq
 800c6f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c6fa:	2340      	movne	r3, #64	; 0x40
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	6031      	str	r1, [r6, #0]
 800c700:	602b      	str	r3, [r5, #0]
 800c702:	b016      	add	sp, #88	; 0x58
 800c704:	bd70      	pop	{r4, r5, r6, pc}
 800c706:	466a      	mov	r2, sp
 800c708:	f000 f848 	bl	800c79c <_fstat_r>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	dbec      	blt.n	800c6ea <__swhatbuf_r+0x12>
 800c710:	9901      	ldr	r1, [sp, #4]
 800c712:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c716:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c71a:	4259      	negs	r1, r3
 800c71c:	4159      	adcs	r1, r3
 800c71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c722:	e7eb      	b.n	800c6fc <__swhatbuf_r+0x24>

0800c724 <__smakebuf_r>:
 800c724:	898b      	ldrh	r3, [r1, #12]
 800c726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c728:	079d      	lsls	r5, r3, #30
 800c72a:	4606      	mov	r6, r0
 800c72c:	460c      	mov	r4, r1
 800c72e:	d507      	bpl.n	800c740 <__smakebuf_r+0x1c>
 800c730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	6123      	str	r3, [r4, #16]
 800c738:	2301      	movs	r3, #1
 800c73a:	6163      	str	r3, [r4, #20]
 800c73c:	b002      	add	sp, #8
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	ab01      	add	r3, sp, #4
 800c742:	466a      	mov	r2, sp
 800c744:	f7ff ffc8 	bl	800c6d8 <__swhatbuf_r>
 800c748:	9900      	ldr	r1, [sp, #0]
 800c74a:	4605      	mov	r5, r0
 800c74c:	4630      	mov	r0, r6
 800c74e:	f7ff f873 	bl	800b838 <_malloc_r>
 800c752:	b948      	cbnz	r0, 800c768 <__smakebuf_r+0x44>
 800c754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c758:	059a      	lsls	r2, r3, #22
 800c75a:	d4ef      	bmi.n	800c73c <__smakebuf_r+0x18>
 800c75c:	f023 0303 	bic.w	r3, r3, #3
 800c760:	f043 0302 	orr.w	r3, r3, #2
 800c764:	81a3      	strh	r3, [r4, #12]
 800c766:	e7e3      	b.n	800c730 <__smakebuf_r+0xc>
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	6020      	str	r0, [r4, #0]
 800c76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c770:	81a3      	strh	r3, [r4, #12]
 800c772:	9b00      	ldr	r3, [sp, #0]
 800c774:	6163      	str	r3, [r4, #20]
 800c776:	9b01      	ldr	r3, [sp, #4]
 800c778:	6120      	str	r0, [r4, #16]
 800c77a:	b15b      	cbz	r3, 800c794 <__smakebuf_r+0x70>
 800c77c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c780:	4630      	mov	r0, r6
 800c782:	f000 f81d 	bl	800c7c0 <_isatty_r>
 800c786:	b128      	cbz	r0, 800c794 <__smakebuf_r+0x70>
 800c788:	89a3      	ldrh	r3, [r4, #12]
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	f043 0301 	orr.w	r3, r3, #1
 800c792:	81a3      	strh	r3, [r4, #12]
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	431d      	orrs	r5, r3
 800c798:	81a5      	strh	r5, [r4, #12]
 800c79a:	e7cf      	b.n	800c73c <__smakebuf_r+0x18>

0800c79c <_fstat_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d07      	ldr	r5, [pc, #28]	; (800c7bc <_fstat_r+0x20>)
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	602b      	str	r3, [r5, #0]
 800c7aa:	f7f5 fec0 	bl	800252e <_fstat>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	d102      	bne.n	800c7b8 <_fstat_r+0x1c>
 800c7b2:	682b      	ldr	r3, [r5, #0]
 800c7b4:	b103      	cbz	r3, 800c7b8 <_fstat_r+0x1c>
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ba:	bf00      	nop
 800c7bc:	200054dc 	.word	0x200054dc

0800c7c0 <_isatty_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d06      	ldr	r5, [pc, #24]	; (800c7dc <_isatty_r+0x1c>)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	602b      	str	r3, [r5, #0]
 800c7cc:	f7f5 febf 	bl	800254e <_isatty>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d102      	bne.n	800c7da <_isatty_r+0x1a>
 800c7d4:	682b      	ldr	r3, [r5, #0]
 800c7d6:	b103      	cbz	r3, 800c7da <_isatty_r+0x1a>
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	200054dc 	.word	0x200054dc

0800c7e0 <checkint>:
 800c7e0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c7e4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	b570      	push	{r4, r5, r6, lr}
 800c7ec:	dd2a      	ble.n	800c844 <checkint+0x64>
 800c7ee:	f240 4333 	movw	r3, #1075	; 0x433
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	dc24      	bgt.n	800c840 <checkint+0x60>
 800c7f6:	1a9b      	subs	r3, r3, r2
 800c7f8:	f1a3 0620 	sub.w	r6, r3, #32
 800c7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c800:	fa02 f403 	lsl.w	r4, r2, r3
 800c804:	fa02 f606 	lsl.w	r6, r2, r6
 800c808:	f1c3 0520 	rsb	r5, r3, #32
 800c80c:	fa22 f505 	lsr.w	r5, r2, r5
 800c810:	4334      	orrs	r4, r6
 800c812:	432c      	orrs	r4, r5
 800c814:	409a      	lsls	r2, r3
 800c816:	ea20 0202 	bic.w	r2, r0, r2
 800c81a:	ea21 0404 	bic.w	r4, r1, r4
 800c81e:	4322      	orrs	r2, r4
 800c820:	f1a3 0420 	sub.w	r4, r3, #32
 800c824:	f1c3 0220 	rsb	r2, r3, #32
 800c828:	d10c      	bne.n	800c844 <checkint+0x64>
 800c82a:	40d8      	lsrs	r0, r3
 800c82c:	fa01 f302 	lsl.w	r3, r1, r2
 800c830:	4318      	orrs	r0, r3
 800c832:	40e1      	lsrs	r1, r4
 800c834:	4308      	orrs	r0, r1
 800c836:	f000 0001 	and.w	r0, r0, #1
 800c83a:	f1d0 0002 	rsbs	r0, r0, #2
 800c83e:	bd70      	pop	{r4, r5, r6, pc}
 800c840:	2002      	movs	r0, #2
 800c842:	e7fc      	b.n	800c83e <checkint+0x5e>
 800c844:	2000      	movs	r0, #0
 800c846:	e7fa      	b.n	800c83e <checkint+0x5e>

0800c848 <pow>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	ee10 4a90 	vmov	r4, s1
 800c850:	ed2d 8b0a 	vpush	{d8-d12}
 800c854:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800c858:	ee11 aa90 	vmov	sl, s3
 800c85c:	f108 32ff 	add.w	r2, r8, #4294967295
 800c860:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800c864:	429a      	cmp	r2, r3
 800c866:	ee10 5a10 	vmov	r5, s0
 800c86a:	ee11 0a10 	vmov	r0, s2
 800c86e:	b087      	sub	sp, #28
 800c870:	46c4      	mov	ip, r8
 800c872:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800c876:	d806      	bhi.n	800c886 <pow+0x3e>
 800c878:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800c87c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800c880:	2b7f      	cmp	r3, #127	; 0x7f
 800c882:	f240 8156 	bls.w	800cb32 <pow+0x2ea>
 800c886:	1802      	adds	r2, r0, r0
 800c888:	eb4a 010a 	adc.w	r1, sl, sl
 800c88c:	f06f 0b01 	mvn.w	fp, #1
 800c890:	1e57      	subs	r7, r2, #1
 800c892:	f141 33ff 	adc.w	r3, r1, #4294967295
 800c896:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800c89a:	45bb      	cmp	fp, r7
 800c89c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c8a0:	d242      	bcs.n	800c928 <pow+0xe0>
 800c8a2:	ea52 0301 	orrs.w	r3, r2, r1
 800c8a6:	f04f 0300 	mov.w	r3, #0
 800c8aa:	d10c      	bne.n	800c8c6 <pow+0x7e>
 800c8ac:	196d      	adds	r5, r5, r5
 800c8ae:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800c8b2:	4164      	adcs	r4, r4
 800c8b4:	42ab      	cmp	r3, r5
 800c8b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c8ba:	41a3      	sbcs	r3, r4
 800c8bc:	f0c0 808f 	bcc.w	800c9de <pow+0x196>
 800c8c0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c8c4:	e02b      	b.n	800c91e <pow+0xd6>
 800c8c6:	4ed4      	ldr	r6, [pc, #848]	; (800cc18 <pow+0x3d0>)
 800c8c8:	42b4      	cmp	r4, r6
 800c8ca:	bf08      	it	eq
 800c8cc:	429d      	cmpeq	r5, r3
 800c8ce:	d109      	bne.n	800c8e4 <pow+0x9c>
 800c8d0:	1800      	adds	r0, r0, r0
 800c8d2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800c8d6:	eb4a 0a0a 	adc.w	sl, sl, sl
 800c8da:	4283      	cmp	r3, r0
 800c8dc:	4bcf      	ldr	r3, [pc, #828]	; (800cc1c <pow+0x3d4>)
 800c8de:	eb73 030a 	sbcs.w	r3, r3, sl
 800c8e2:	e7eb      	b.n	800c8bc <pow+0x74>
 800c8e4:	196d      	adds	r5, r5, r5
 800c8e6:	48ce      	ldr	r0, [pc, #824]	; (800cc20 <pow+0x3d8>)
 800c8e8:	4164      	adcs	r4, r4
 800c8ea:	42ab      	cmp	r3, r5
 800c8ec:	eb70 0604 	sbcs.w	r6, r0, r4
 800c8f0:	d375      	bcc.n	800c9de <pow+0x196>
 800c8f2:	4281      	cmp	r1, r0
 800c8f4:	bf08      	it	eq
 800c8f6:	429a      	cmpeq	r2, r3
 800c8f8:	d171      	bne.n	800c9de <pow+0x196>
 800c8fa:	4aca      	ldr	r2, [pc, #808]	; (800cc24 <pow+0x3dc>)
 800c8fc:	4294      	cmp	r4, r2
 800c8fe:	bf08      	it	eq
 800c900:	429d      	cmpeq	r5, r3
 800c902:	d0dd      	beq.n	800c8c0 <pow+0x78>
 800c904:	4294      	cmp	r4, r2
 800c906:	ea6f 0a0a 	mvn.w	sl, sl
 800c90a:	bf34      	ite	cc
 800c90c:	2400      	movcc	r4, #0
 800c90e:	2401      	movcs	r4, #1
 800c910:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800c914:	4554      	cmp	r4, sl
 800c916:	f040 81dc 	bne.w	800ccd2 <pow+0x48a>
 800c91a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800c91e:	b007      	add	sp, #28
 800c920:	ecbd 8b0a 	vpop	{d8-d12}
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	196f      	adds	r7, r5, r5
 800c92a:	eb44 0904 	adc.w	r9, r4, r4
 800c92e:	1e7a      	subs	r2, r7, #1
 800c930:	f169 0300 	sbc.w	r3, r9, #0
 800c934:	4593      	cmp	fp, r2
 800c936:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c93a:	d225      	bcs.n	800c988 <pow+0x140>
 800c93c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800c940:	2c00      	cmp	r4, #0
 800c942:	da13      	bge.n	800c96c <pow+0x124>
 800c944:	4651      	mov	r1, sl
 800c946:	f7ff ff4b 	bl	800c7e0 <checkint>
 800c94a:	2801      	cmp	r0, #1
 800c94c:	d10e      	bne.n	800c96c <pow+0x124>
 800c94e:	eeb1 0b40 	vneg.f64	d0, d0
 800c952:	ea57 0909 	orrs.w	r9, r7, r9
 800c956:	d10b      	bne.n	800c970 <pow+0x128>
 800c958:	f1ba 0f00 	cmp.w	sl, #0
 800c95c:	dadf      	bge.n	800c91e <pow+0xd6>
 800c95e:	b007      	add	sp, #28
 800c960:	ecbd 8b0a 	vpop	{d8-d12}
 800c964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c968:	f000 b9ea 	b.w	800cd40 <__math_divzero>
 800c96c:	2000      	movs	r0, #0
 800c96e:	e7f0      	b.n	800c952 <pow+0x10a>
 800c970:	f1ba 0f00 	cmp.w	sl, #0
 800c974:	dad3      	bge.n	800c91e <pow+0xd6>
 800c976:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c97a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c97e:	ed8d 7b00 	vstr	d7, [sp]
 800c982:	ed9d 0b00 	vldr	d0, [sp]
 800c986:	e7ca      	b.n	800c91e <pow+0xd6>
 800c988:	2c00      	cmp	r4, #0
 800c98a:	da2b      	bge.n	800c9e4 <pow+0x19c>
 800c98c:	4651      	mov	r1, sl
 800c98e:	f7ff ff27 	bl	800c7e0 <checkint>
 800c992:	b930      	cbnz	r0, 800c9a2 <pow+0x15a>
 800c994:	b007      	add	sp, #28
 800c996:	ecbd 8b0a 	vpop	{d8-d12}
 800c99a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99e:	f000 b9e7 	b.w	800cd70 <__math_invalid>
 800c9a2:	1e41      	subs	r1, r0, #1
 800c9a4:	4248      	negs	r0, r1
 800c9a6:	4148      	adcs	r0, r1
 800c9a8:	0480      	lsls	r0, r0, #18
 800c9aa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c9ae:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800c9b2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800c9b6:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800c9ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c9bc:	d92d      	bls.n	800ca1a <pow+0x1d2>
 800c9be:	4b96      	ldr	r3, [pc, #600]	; (800cc18 <pow+0x3d0>)
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	429c      	cmp	r4, r3
 800c9c4:	bf08      	it	eq
 800c9c6:	4285      	cmpeq	r5, r0
 800c9c8:	f43f af7a 	beq.w	800c8c0 <pow+0x78>
 800c9cc:	f240 31bd 	movw	r1, #957	; 0x3bd
 800c9d0:	428a      	cmp	r2, r1
 800c9d2:	d80c      	bhi.n	800c9ee <pow+0x1a6>
 800c9d4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c9d8:	42a8      	cmp	r0, r5
 800c9da:	41a3      	sbcs	r3, r4
 800c9dc:	d204      	bcs.n	800c9e8 <pow+0x1a0>
 800c9de:	ee31 0b00 	vadd.f64	d0, d1, d0
 800c9e2:	e79c      	b.n	800c91e <pow+0xd6>
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	e7e4      	b.n	800c9b2 <pow+0x16a>
 800c9e8:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c9ec:	e797      	b.n	800c91e <pow+0xd6>
 800c9ee:	2d01      	cmp	r5, #1
 800c9f0:	eb74 0303 	sbcs.w	r3, r4, r3
 800c9f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c9f8:	bf34      	ite	cc
 800c9fa:	2301      	movcc	r3, #1
 800c9fc:	2300      	movcs	r3, #0
 800c9fe:	4296      	cmp	r6, r2
 800ca00:	bf8c      	ite	hi
 800ca02:	2600      	movhi	r6, #0
 800ca04:	2601      	movls	r6, #1
 800ca06:	42b3      	cmp	r3, r6
 800ca08:	f000 809b 	beq.w	800cb42 <pow+0x2fa>
 800ca0c:	b007      	add	sp, #28
 800ca0e:	ecbd 8b0a 	vpop	{d8-d12}
 800ca12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca16:	f000 b98b 	b.w	800cd30 <__math_oflow>
 800ca1a:	f1bc 0f00 	cmp.w	ip, #0
 800ca1e:	d10b      	bne.n	800ca38 <pow+0x1f0>
 800ca20:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800cc08 <pow+0x3c0>
 800ca24:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ca28:	ec53 2b17 	vmov	r2, r3, d7
 800ca2c:	ee17 5a10 	vmov	r5, s14
 800ca30:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800ca34:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800ca38:	4b7b      	ldr	r3, [pc, #492]	; (800cc28 <pow+0x3e0>)
 800ca3a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ca3e:	4423      	add	r3, r4
 800ca40:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800ca44:	1519      	asrs	r1, r3, #20
 800ca46:	0d1b      	lsrs	r3, r3, #20
 800ca48:	051b      	lsls	r3, r3, #20
 800ca4a:	1ae7      	subs	r7, r4, r3
 800ca4c:	4b77      	ldr	r3, [pc, #476]	; (800cc2c <pow+0x3e4>)
 800ca4e:	ee03 1a10 	vmov	s6, r1
 800ca52:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800ca56:	1e2e      	subs	r6, r5, #0
 800ca58:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800ca5c:	ec47 6b15 	vmov	d5, r6, r7
 800ca60:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800ca64:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ca68:	ed93 7b00 	vldr	d7, [r3]
 800ca6c:	ed93 5b02 	vldr	d5, [r3, #8]
 800ca70:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800ca74:	eea3 2b07 	vfma.f64	d2, d3, d7
 800ca78:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800ca7c:	ee36 4b02 	vadd.f64	d4, d6, d2
 800ca80:	ee32 2b44 	vsub.f64	d2, d2, d4
 800ca84:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ca88:	ed93 5b04 	vldr	d5, [r3, #16]
 800ca8c:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ca90:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ca94:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ca98:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ca9c:	ee34 8b00 	vadd.f64	d8, d4, d0
 800caa0:	eeb0 9b40 	vmov.f64	d9, d0
 800caa4:	ee34 4b48 	vsub.f64	d4, d4, d8
 800caa8:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800caac:	ee34 ab00 	vadd.f64	d10, d4, d0
 800cab0:	ed93 5b06 	vldr	d5, [r3, #24]
 800cab4:	ee26 bb00 	vmul.f64	d11, d6, d0
 800cab8:	ee37 7b09 	vadd.f64	d7, d7, d9
 800cabc:	ed93 4b08 	vldr	d4, [r3, #32]
 800cac0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800cac4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800cac8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cacc:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800cad0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800cad4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cad8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800cadc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800cae0:	eea0 4b03 	vfma.f64	d4, d0, d3
 800cae4:	eea0 5b04 	vfma.f64	d5, d0, d4
 800cae8:	eeab 7b05 	vfma.f64	d7, d11, d5
 800caec:	ee38 4b07 	vadd.f64	d4, d8, d7
 800caf0:	ee21 6b04 	vmul.f64	d6, d1, d4
 800caf4:	ee16 3a90 	vmov	r3, s13
 800caf8:	eeb0 5b46 	vmov.f64	d5, d6
 800cafc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800cb00:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800cb04:	18b2      	adds	r2, r6, r2
 800cb06:	2a3e      	cmp	r2, #62	; 0x3e
 800cb08:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800cb0c:	ee38 8b44 	vsub.f64	d8, d8, d4
 800cb10:	ee38 8b07 	vadd.f64	d8, d8, d7
 800cb14:	eea1 5b08 	vfma.f64	d5, d1, d8
 800cb18:	d91b      	bls.n	800cb52 <pow+0x30a>
 800cb1a:	2a00      	cmp	r2, #0
 800cb1c:	da0b      	bge.n	800cb36 <pow+0x2ee>
 800cb1e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cb22:	ee36 0b00 	vadd.f64	d0, d6, d0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	f43f aef9 	beq.w	800c91e <pow+0xd6>
 800cb2c:	eeb1 0b40 	vneg.f64	d0, d0
 800cb30:	e6f5      	b.n	800c91e <pow+0xd6>
 800cb32:	2000      	movs	r0, #0
 800cb34:	e780      	b.n	800ca38 <pow+0x1f0>
 800cb36:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800cb3a:	d909      	bls.n	800cb50 <pow+0x308>
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f6bf af65 	bge.w	800ca0c <pow+0x1c4>
 800cb42:	b007      	add	sp, #28
 800cb44:	ecbd 8b0a 	vpop	{d8-d12}
 800cb48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	f000 b8e8 	b.w	800cd20 <__math_uflow>
 800cb50:	2600      	movs	r6, #0
 800cb52:	4937      	ldr	r1, [pc, #220]	; (800cc30 <pow+0x3e8>)
 800cb54:	ed91 4b02 	vldr	d4, [r1, #8]
 800cb58:	ed91 3b00 	vldr	d3, [r1]
 800cb5c:	eeb0 7b44 	vmov.f64	d7, d4
 800cb60:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cb64:	ee17 5a10 	vmov	r5, s14
 800cb68:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cb6c:	ed91 4b04 	vldr	d4, [r1, #16]
 800cb70:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800cb74:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cb78:	ed91 4b06 	vldr	d4, [r1, #24]
 800cb7c:	18dc      	adds	r4, r3, r3
 800cb7e:	f104 030f 	add.w	r3, r4, #15
 800cb82:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800cb86:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cb8a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800cb8e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cb92:	ee25 6b05 	vmul.f64	d6, d5, d5
 800cb96:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800cb9a:	ed91 4b08 	vldr	d4, [r1, #32]
 800cb9e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cba2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800cba6:	eea5 4b03 	vfma.f64	d4, d5, d3
 800cbaa:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800cbae:	eea6 7b04 	vfma.f64	d7, d6, d4
 800cbb2:	ee26 6b06 	vmul.f64	d6, d6, d6
 800cbb6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800cbba:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800cbbe:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800cbc2:	eea5 4b03 	vfma.f64	d4, d5, d3
 800cbc6:	1940      	adds	r0, r0, r5
 800cbc8:	2700      	movs	r7, #0
 800cbca:	eb17 020c 	adds.w	r2, r7, ip
 800cbce:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800cbd2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d176      	bne.n	800ccc8 <pow+0x480>
 800cbda:	42bd      	cmp	r5, r7
 800cbdc:	db2a      	blt.n	800cc34 <pow+0x3ec>
 800cbde:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800cbe2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	ec41 0b10 	vmov	d0, r0, r1
 800cbec:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cbf0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800cc10 <pow+0x3c8>
 800cbf4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cbf8:	b007      	add	sp, #28
 800cbfa:	ecbd 8b0a 	vpop	{d8-d12}
 800cbfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc02:	f000 b8cd 	b.w	800cda0 <__math_check_oflow>
 800cc06:	bf00      	nop
 800cc08:	00000000 	.word	0x00000000
 800cc0c:	43300000 	.word	0x43300000
 800cc10:	00000000 	.word	0x00000000
 800cc14:	7f000000 	.word	0x7f000000
 800cc18:	3ff00000 	.word	0x3ff00000
 800cc1c:	fff00000 	.word	0xfff00000
 800cc20:	ffe00000 	.word	0xffe00000
 800cc24:	7fe00000 	.word	0x7fe00000
 800cc28:	c0196aab 	.word	0xc0196aab
 800cc2c:	0800d1e8 	.word	0x0800d1e8
 800cc30:	0800e230 	.word	0x0800e230
 800cc34:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800cc38:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	ec41 0b15 	vmov	d5, r0, r1
 800cc42:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800cc46:	ee27 6b05 	vmul.f64	d6, d7, d5
 800cc4a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800cc4e:	eeb0 4bc7 	vabs.f64	d4, d7
 800cc52:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800cc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc5a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800ccd8 <pow+0x490>
 800cc5e:	d52a      	bpl.n	800ccb6 <pow+0x46e>
 800cc60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cc64:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6c:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cc70:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800cc74:	bf58      	it	pl
 800cc76:	eeb0 4b43 	vmovpl.f64	d4, d3
 800cc7a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800cc7e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800cc82:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cc86:	ee36 6b05 	vadd.f64	d6, d6, d5
 800cc8a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800cc8e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800cc92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9a:	d104      	bne.n	800cca6 <pow+0x45e>
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800cca2:	ec43 2b17 	vmov	d7, r2, r3
 800cca6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ccaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ccae:	ee26 6b00 	vmul.f64	d6, d6, d0
 800ccb2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ccb6:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ccba:	b007      	add	sp, #28
 800ccbc:	ecbd 8b0a 	vpop	{d8-d12}
 800ccc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc4:	f000 b863 	b.w	800cd8e <__math_check_uflow>
 800ccc8:	ec43 2b10 	vmov	d0, r2, r3
 800cccc:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ccd0:	e625      	b.n	800c91e <pow+0xd6>
 800ccd2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800cce0 <pow+0x498>
 800ccd6:	e622      	b.n	800c91e <pow+0xd6>
 800ccd8:	00000000 	.word	0x00000000
 800ccdc:	00100000 	.word	0x00100000
	...

0800cce8 <with_errno>:
 800cce8:	b513      	push	{r0, r1, r4, lr}
 800ccea:	4604      	mov	r4, r0
 800ccec:	ed8d 0b00 	vstr	d0, [sp]
 800ccf0:	f7fd fefe 	bl	800aaf0 <__errno>
 800ccf4:	ed9d 0b00 	vldr	d0, [sp]
 800ccf8:	6004      	str	r4, [r0, #0]
 800ccfa:	b002      	add	sp, #8
 800ccfc:	bd10      	pop	{r4, pc}

0800ccfe <xflow>:
 800ccfe:	b082      	sub	sp, #8
 800cd00:	b158      	cbz	r0, 800cd1a <xflow+0x1c>
 800cd02:	eeb1 7b40 	vneg.f64	d7, d0
 800cd06:	ed8d 7b00 	vstr	d7, [sp]
 800cd0a:	ed9d 7b00 	vldr	d7, [sp]
 800cd0e:	2022      	movs	r0, #34	; 0x22
 800cd10:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd14:	b002      	add	sp, #8
 800cd16:	f7ff bfe7 	b.w	800cce8 <with_errno>
 800cd1a:	eeb0 7b40 	vmov.f64	d7, d0
 800cd1e:	e7f2      	b.n	800cd06 <xflow+0x8>

0800cd20 <__math_uflow>:
 800cd20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd28 <__math_uflow+0x8>
 800cd24:	f7ff bfeb 	b.w	800ccfe <xflow>
 800cd28:	00000000 	.word	0x00000000
 800cd2c:	10000000 	.word	0x10000000

0800cd30 <__math_oflow>:
 800cd30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd38 <__math_oflow+0x8>
 800cd34:	f7ff bfe3 	b.w	800ccfe <xflow>
 800cd38:	00000000 	.word	0x00000000
 800cd3c:	70000000 	.word	0x70000000

0800cd40 <__math_divzero>:
 800cd40:	b082      	sub	sp, #8
 800cd42:	2800      	cmp	r0, #0
 800cd44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cd48:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800cd4c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800cd50:	ed8d 7b00 	vstr	d7, [sp]
 800cd54:	ed9d 0b00 	vldr	d0, [sp]
 800cd58:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800cd68 <__math_divzero+0x28>
 800cd5c:	2022      	movs	r0, #34	; 0x22
 800cd5e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800cd62:	b002      	add	sp, #8
 800cd64:	f7ff bfc0 	b.w	800cce8 <with_errno>
	...

0800cd70 <__math_invalid>:
 800cd70:	eeb0 7b40 	vmov.f64	d7, d0
 800cd74:	eeb4 7b47 	vcmp.f64	d7, d7
 800cd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800cd80:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800cd84:	d602      	bvs.n	800cd8c <__math_invalid+0x1c>
 800cd86:	2021      	movs	r0, #33	; 0x21
 800cd88:	f7ff bfae 	b.w	800cce8 <with_errno>
 800cd8c:	4770      	bx	lr

0800cd8e <__math_check_uflow>:
 800cd8e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd96:	d102      	bne.n	800cd9e <__math_check_uflow+0x10>
 800cd98:	2022      	movs	r0, #34	; 0x22
 800cd9a:	f7ff bfa5 	b.w	800cce8 <with_errno>
 800cd9e:	4770      	bx	lr

0800cda0 <__math_check_oflow>:
 800cda0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800cdc0 <__math_check_oflow+0x20>
 800cda4:	eeb0 7bc0 	vabs.f64	d7, d0
 800cda8:	eeb4 7b46 	vcmp.f64	d7, d6
 800cdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb0:	dd02      	ble.n	800cdb8 <__math_check_oflow+0x18>
 800cdb2:	2022      	movs	r0, #34	; 0x22
 800cdb4:	f7ff bf98 	b.w	800cce8 <with_errno>
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	f3af 8000 	nop.w
 800cdc0:	ffffffff 	.word	0xffffffff
 800cdc4:	7fefffff 	.word	0x7fefffff

0800cdc8 <_init>:
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	bf00      	nop
 800cdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdce:	bc08      	pop	{r3}
 800cdd0:	469e      	mov	lr, r3
 800cdd2:	4770      	bx	lr

0800cdd4 <_fini>:
 800cdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd6:	bf00      	nop
 800cdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdda:	bc08      	pop	{r3}
 800cddc:	469e      	mov	lr, r3
 800cdde:	4770      	bx	lr
