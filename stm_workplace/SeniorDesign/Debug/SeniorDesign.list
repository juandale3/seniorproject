
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cc0  0800d050  0800d050  0001d050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed10  0800ed10  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed10  0800ed10  0001ed10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed18  0800ed18  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed18  0800ed18  0001ed18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed1c  0800ed1c  0001ed1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ed20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000530c  200001f4  0800ef14  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005500  0800ef14  00025500  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024e9f  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f7c  00000000  00000000  00045104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d00  00000000  00000000  0004a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000166b  00000000  00000000  0004bd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cea6  00000000  00000000  0004d3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002445b  00000000  00000000  0007a291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111cce  00000000  00000000  0009e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089c0  00000000  00000000  001b03bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b8d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d038 	.word	0x0800d038

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0800d038 	.word	0x0800d038

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_3;
 8000602:	2303      	movs	r3, #3
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f002 fb73 	bl	8002d00 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f001 fc92 	bl	8001f48 <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <readFlow>:
float readFlow(float voltage)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	ed87 0a01 	vstr	s0, [r7, #4]
	//	instFlow = roundf(instFlow);*/
	//	return instFlow;
//	instFlow = (voltage - 0.662)/  0.0132;
//	return instFlow;

	instFlow = (voltage/voltageDivider - (float)referenceVolt)/scalingFactor;
 800063a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000678 <readFlow+0x48>
 800063e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000646:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800067c <readFlow+0x4c>
 800064a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000652:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000680 <readFlow+0x50>
 8000656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <readFlow+0x54>)
 800065c:	edc3 7a00 	vstr	s15, [r3]
	return instFlow;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <readFlow+0x54>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	ee07 3a90 	vmov	s15, r3
}
 8000668:	eeb0 0a67 	vmov.f32	s0, s15
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	3f298953 	.word	0x3f298953
 800067c:	00000001 	.word	0x00000001
 8000680:	3ca3d70a 	.word	0x3ca3d70a
 8000684:	20000210 	.word	0x20000210

08000688 <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800069c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80006cc <setFlowRate+0x44>
 80006a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006a4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80006d0 <setFlowRate+0x48>
 80006a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80006d4 <setFlowRate+0x4c>
 80006b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006b8:	eef0 7a66 	vmov.f32	s15, s13

}
 80006bc:	eeb0 0a67 	vmov.f32	s0, s15
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	3ca3d70a 	.word	0x3ca3d70a
 80006d0:	00000001 	.word	0x00000001
 80006d4:	3fc147ae 	.word	0x3fc147ae

080006d8 <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
return;
 80006dc:	bf00      	nop
}
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <flowStateOpen>:
void flowStateOpen(void){
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
return;
 80006ea:	bf00      	nop
}
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <flowStateControl>:
void flowStateControl(void){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
return;
 80006f8:	bf00      	nop
}
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <stepperOpen>:

void stepperClose(){
	steps = MAX_STEP;
}

void stepperOpen(){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	steps = 0;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <stepperOpen+0x14>)
 800070a:	2200      	movs	r2, #0
 800070c:	801a      	strh	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	20000218 	.word	0x20000218

0800071c <stepperStep>:

void stepperStep(uint16_t num){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
	if(num > MAX_STEP){
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800072c:	d904      	bls.n	8000738 <stepperStep+0x1c>
		steps = MAX_STEP;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <stepperStep+0x30>)
 8000730:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000734:	801a      	strh	r2, [r3, #0]
	}else{
	steps = num;
	}
}
 8000736:	e002      	b.n	800073e <stepperStep+0x22>
	steps = num;
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <stepperStep+0x30>)
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	8013      	strh	r3, [r2, #0]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000218 	.word	0x20000218

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	pumpTestsParameters[0].currentState = &pumpTestsParameters[0].stateList[0];
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <main+0x68>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <main+0x68>)
 8000758:	615a      	str	r2, [r3, #20]
	pumpTestsParameters[1].currentState = &pumpTestsParameters[1].stateList[0];
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <main+0x68>)
 800075c:	4a17      	ldr	r2, [pc, #92]	; (80007bc <main+0x6c>)
 800075e:	665a      	str	r2, [r3, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f002 f89f 	bl	80028a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f838 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f9ec 	bl	8000b44 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800076c:	f000 f98c 	bl	8000a88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000770:	f000 f9ba 	bl	8000ae8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000774:	f000 f8a2 	bl	80008bc <MX_ADC1_Init>
  MX_DAC_Init();
 8000778:	f000 f902 	bl	8000980 <MX_DAC_Init>
  MX_TIM10_Init();
 800077c:	f000 f960 	bl	8000a40 <MX_TIM10_Init>
  MX_TIM7_Init();
 8000780:	f000 f928 	bl	80009d4 <MX_TIM7_Init>
  // HAL_TIM_Base_Start_IT(&htim7);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000784:	f006 fd98 	bl	80072b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <main+0x70>)
 800078a:	2100      	movs	r1, #0
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <main+0x74>)
 800078e:	f006 fdfd 	bl	800738c <osThreadNew>
 8000792:	4603      	mov	r3, r0
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <main+0x78>)
 8000796:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <main+0x7c>)
 800079a:	2100      	movs	r1, #0
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <main+0x80>)
 800079e:	f006 fdf5 	bl	800738c <osThreadNew>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <main+0x84>)
 80007a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(sendDataHandle);
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <main+0x84>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 fe93 	bl	80074d8 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007b2:	f006 fdb5 	bl	8007320 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <main+0x66>
 80007b8:	200008a8 	.word	0x200008a8
 80007bc:	200008f8 	.word	0x200008f8
 80007c0:	0800d084 	.word	0x0800d084
 80007c4:	08000db9 	.word	0x08000db9
 80007c8:	200008a0 	.word	0x200008a0
 80007cc:	0800d0a8 	.word	0x0800d0a8
 80007d0:	08001aa9 	.word	0x08001aa9
 80007d4:	200008a4 	.word	0x200008a4

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2234      	movs	r2, #52	; 0x34
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00a fa11 	bl	800ac0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007fc:	f003 fac2 	bl	8003d84 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <SystemClock_Config+0xdc>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a2b      	ldr	r2, [pc, #172]	; (80008b4 <SystemClock_Config+0xdc>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <SystemClock_Config+0xdc>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <SystemClock_Config+0xe0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <SystemClock_Config+0xe0>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <SystemClock_Config+0xe0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000834:	2301      	movs	r3, #1
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800084c:	2360      	movs	r3, #96	; 0x60
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4618      	mov	r0, r3
 8000862:	f003 faef 	bl	8003e44 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800086c:	f001 fb6c 	bl	8001f48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000870:	f003 fa98 	bl	8003da4 <HAL_PWREx_EnableOverDrive>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800087a:	f001 fb65 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2302      	movs	r3, #2
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2103      	movs	r1, #3
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fd80 	bl	80043a0 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008a6:	f001 fb4f 	bl	8001f48 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_ADC1_Init+0xb8>)
 80008d0:	4a29      	ldr	r2, [pc, #164]	; (8000978 <MX_ADC1_Init+0xbc>)
 80008d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_ADC1_Init+0xb8>)
 80008d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_ADC1_Init+0xb8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_ADC1_Init+0xb8>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_ADC1_Init+0xb8>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_ADC1_Init+0xb8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_ADC1_Init+0xb8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_ADC1_Init+0xb8>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <MX_ADC1_Init+0xc0>)
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_ADC1_Init+0xb8>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_ADC1_Init+0xb8>)
 800090a:	2202      	movs	r2, #2
 800090c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_ADC1_Init+0xb8>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_ADC1_Init+0xb8>)
 8000918:	2201      	movs	r2, #1
 800091a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091c:	4815      	ldr	r0, [pc, #84]	; (8000974 <MX_ADC1_Init+0xb8>)
 800091e:	f002 f811 	bl	8002944 <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000928:	f001 fb0e 	bl	8001f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800092c:	2303      	movs	r3, #3
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000930:	2301      	movs	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000934:	2302      	movs	r3, #2
 8000936:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_ADC1_Init+0xb8>)
 800093e:	f002 f9df 	bl	8002d00 <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000948:	f001 fafe 	bl	8001f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800094c:	230a      	movs	r3, #10
 800094e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000950:	2302      	movs	r3, #2
 8000952:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000954:	2301      	movs	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_ADC1_Init+0xb8>)
 800095e:	f002 f9cf 	bl	8002d00 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000968:	f001 faee 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000021c 	.word	0x2000021c
 8000978:	40012000 	.word	0x40012000
 800097c:	0f000001 	.word	0x0f000001

08000980 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_DAC_Init+0x4c>)
 8000990:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <MX_DAC_Init+0x50>)
 8000992:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_DAC_Init+0x4c>)
 8000996:	f002 fce5 	bl	8003364 <HAL_DAC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009a0:	f001 fad2 	bl	8001f48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_DAC_Init+0x4c>)
 80009b4:	f002 fdd3 	bl	800355e <HAL_DAC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009be:	f001 fac3 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000264 	.word	0x20000264
 80009d0:	40007400 	.word	0x40007400

080009d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_TIM7_Init+0x64>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_TIM7_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600 - 1;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_TIM7_Init+0x64>)
 80009ec:	f242 527f 	movw	r2, #9599	; 0x257f
 80009f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_TIM7_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5 - 1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_TIM7_Init+0x64>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_TIM7_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_TIM7_Init+0x64>)
 8000a06:	f004 fb4b 	bl	80050a0 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a10:	f001 fa9a 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_TIM7_Init+0x64>)
 8000a22:	f004 fe23 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f001 fa8c 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000278 	.word	0x20000278
 8000a3c:	40001400 	.word	0x40001400

08000a40 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_TIM10_Init+0x40>)
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <MX_TIM10_Init+0x44>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 48000 - 1;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_TIM10_Init+0x40>)
 8000a4c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000a50:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_TIM10_Init+0x40>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000 - 1;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_TIM10_Init+0x40>)
 8000a5a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a5e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_TIM10_Init+0x40>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_TIM10_Init+0x40>)
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_TIM10_Init+0x40>)
 8000a6e:	f004 fb17 	bl	80050a0 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000a78:	f001 fa66 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200002c4 	.word	0x200002c4
 8000a84:	40014400 	.word	0x40014400

08000a88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_USART3_UART_Init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000acc:	f004 fe7a 	bl	80057c4 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f001 fa37 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000310 	.word	0x20000310
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000af2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af6:	2206      	movs	r2, #6
 8000af8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2c:	f002 ffe1 	bl	8003af2 <HAL_PCD_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b36:	f001 fa07 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000398 	.word	0x20000398

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b85      	ldr	r3, [pc, #532]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a84      	ldr	r2, [pc, #528]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b82      	ldr	r3, [pc, #520]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b72:	4b7f      	ldr	r3, [pc, #508]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a7e      	ldr	r2, [pc, #504]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b7c      	ldr	r3, [pc, #496]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	4b79      	ldr	r3, [pc, #484]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a78      	ldr	r2, [pc, #480]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b76      	ldr	r3, [pc, #472]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b73      	ldr	r3, [pc, #460]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a72      	ldr	r2, [pc, #456]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b70      	ldr	r3, [pc, #448]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b6d      	ldr	r3, [pc, #436]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a6c      	ldr	r2, [pc, #432]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b6a      	ldr	r3, [pc, #424]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b67      	ldr	r3, [pc, #412]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a66      	ldr	r2, [pc, #408]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b64      	ldr	r3, [pc, #400]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	4b61      	ldr	r3, [pc, #388]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a60      	ldr	r2, [pc, #384]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b5e      	ldr	r3, [pc, #376]	; (8000d70 <MX_GPIO_Init+0x22c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2130      	movs	r1, #48	; 0x30
 8000c06:	485b      	ldr	r0, [pc, #364]	; (8000d74 <MX_GPIO_Init+0x230>)
 8000c08:	f002 ff40 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_2|LD3_Pin|GPIO_PIN_6
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f244 01c5 	movw	r1, #16581	; 0x40c5
 8000c12:	4859      	ldr	r0, [pc, #356]	; (8000d78 <MX_GPIO_Init+0x234>)
 8000c14:	f002 ff3a 	bl	8003a8c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2140      	movs	r1, #64	; 0x40
 8000c1c:	4857      	ldr	r0, [pc, #348]	; (8000d7c <MX_GPIO_Init+0x238>)
 8000c1e:	f002 ff35 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4851      	ldr	r0, [pc, #324]	; (8000d80 <MX_GPIO_Init+0x23c>)
 8000c3a:	f002 fd7b 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c3e:	2310      	movs	r3, #16
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4847      	ldr	r0, [pc, #284]	; (8000d74 <MX_GPIO_Init+0x230>)
 8000c56:	f002 fd6d 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4840      	ldr	r0, [pc, #256]	; (8000d74 <MX_GPIO_Init+0x230>)
 8000c72:	f002 fd5f 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c76:	2332      	movs	r3, #50	; 0x32
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c86:	230b      	movs	r3, #11
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	483b      	ldr	r0, [pc, #236]	; (8000d80 <MX_GPIO_Init+0x23c>)
 8000c92:	f002 fd4f 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c96:	2386      	movs	r3, #134	; 0x86
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca6:	230b      	movs	r3, #11
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4834      	ldr	r0, [pc, #208]	; (8000d84 <MX_GPIO_Init+0x240>)
 8000cb2:	f002 fd3f 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB2 LD3_Pin PB6
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_2|LD3_Pin|GPIO_PIN_6
 8000cb6:	f244 03c5 	movw	r3, #16581	; 0x40c5
 8000cba:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	482a      	ldr	r0, [pc, #168]	; (8000d78 <MX_GPIO_Init+0x234>)
 8000cd0:	f002 fd30 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4821      	ldr	r0, [pc, #132]	; (8000d78 <MX_GPIO_Init+0x234>)
 8000cf2:	f002 fd1f 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cf6:	2340      	movs	r3, #64	; 0x40
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481b      	ldr	r0, [pc, #108]	; (8000d7c <MX_GPIO_Init+0x238>)
 8000d0e:	f002 fd11 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4815      	ldr	r0, [pc, #84]	; (8000d7c <MX_GPIO_Init+0x238>)
 8000d26:	f002 fd05 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI3_Pin DI2_Pin DI1_Pin */
  GPIO_InitStruct.Pin = DI3_Pin|DI2_Pin|DI1_Pin;
 8000d2a:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4810      	ldr	r0, [pc, #64]	; (8000d80 <MX_GPIO_Init+0x23c>)
 8000d40:	f002 fcf8 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d56:	230b      	movs	r3, #11
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_GPIO_Init+0x238>)
 8000d62:	f002 fce7 	bl	8003734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d66:	bf00      	nop
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40021400 	.word	0x40021400
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	40020800 	.word	0x40020800
 8000d84:	40020000 	.word	0x40020000

08000d88 <resetTime>:
        //HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, tx_buffer_size, HAL_MAX_DELAY);
        // Start a new receive operation
        //HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 5);
    }
}
void resetTime(){
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	seconds = 0;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <resetTime+0x20>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
	minutes = 0;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <resetTime+0x24>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
	hours = 0;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <resetTime+0x28>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	2000096f 	.word	0x2000096f
 8000dac:	2000096e 	.word	0x2000096e
 8000db0:	2000096d 	.word	0x2000096d
 8000db4:	00000000 	.word	0x00000000

08000db8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(pumpTestsParameters[pump].eNextState) {
 8000dc0:	4bc5      	ldr	r3, [pc, #788]	; (80010d8 <StartDefaultTask+0x320>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4ac5      	ldr	r2, [pc, #788]	; (80010dc <StartDefaultTask+0x324>)
 8000dc8:	460b      	mov	r3, r1
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	f200 864d 	bhi.w	8001a76 <StartDefaultTask+0xcbe>
 8000ddc:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <StartDefaultTask+0x2c>)
 8000dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de2:	bf00      	nop
 8000de4:	08000e25 	.word	0x08000e25
 8000de8:	08000ed3 	.word	0x08000ed3
 8000dec:	08000f47 	.word	0x08000f47
 8000df0:	08001111 	.word	0x08001111
 8000df4:	080011b1 	.word	0x080011b1
 8000df8:	0800135d 	.word	0x0800135d
 8000dfc:	0800140d 	.word	0x0800140d
 8000e00:	080014e1 	.word	0x080014e1
 8000e04:	0800157b 	.word	0x0800157b
 8000e08:	0800167f 	.word	0x0800167f
 8000e0c:	08001721 	.word	0x08001721
 8000e10:	08001851 	.word	0x08001851
 8000e14:	080018cd 	.word	0x080018cd
 8000e18:	080019a1 	.word	0x080019a1
 8000e1c:	080019e1 	.word	0x080019e1
 8000e20:	08001a55 	.word	0x08001a55
	  			case START:
	  				osThreadSuspend(sendDataHandle);
 8000e24:	4bae      	ldr	r3, [pc, #696]	; (80010e0 <StartDefaultTask+0x328>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 fb55 	bl	80074d8 <osThreadSuspend>
					volts = setFlowRate(0);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff fc2a 	bl	8000688 <setFlowRate>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	4baa      	ldr	r3, [pc, #680]	; (80010e4 <StartDefaultTask+0x32c>)
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
					flowControllerADC(&hadc1);
 8000e3e:	48aa      	ldr	r0, [pc, #680]	; (80010e8 <StartDefaultTask+0x330>)
 8000e40:	f7ff fbd4 	bl	80005ec <flowControllerADC>
					dacSet(&hdac, DAC_CHANNEL_1, volts);
 8000e44:	4ba7      	ldr	r3, [pc, #668]	; (80010e4 <StartDefaultTask+0x32c>)
 8000e46:	edd3 7a00 	vldr	s15, [r3]
 8000e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4e:	2100      	movs	r1, #0
 8000e50:	48a6      	ldr	r0, [pc, #664]	; (80010ec <StartDefaultTask+0x334>)
 8000e52:	f001 f881 	bl	8001f58 <dacSet>

					stepperOpen();
 8000e56:	f7ff fc55 	bl	8000704 <stepperOpen>
					HAL_TIM_Base_Start_IT(&htim7);
 8000e5a:	48a5      	ldr	r0, [pc, #660]	; (80010f0 <StartDefaultTask+0x338>)
 8000e5c:	f004 f978 	bl	8005150 <HAL_TIM_Base_Start_IT>
//	  				pumpTestsParameters[0].stateList[7] = ULTIMATE_MEASURE_TEST_INIT;
//	  				pumpTestsParameters[0].stateList[8] = IDLE;
//	  				pumpTestsParameters[0].stateList[9] = 0;

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000e60:	4b9d      	ldr	r3, [pc, #628]	; (80010d8 <StartDefaultTask+0x320>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	3318      	adds	r3, #24
 8000e70:	4a9a      	ldr	r2, [pc, #616]	; (80010dc <StartDefaultTask+0x324>)
 8000e72:	1899      	adds	r1, r3, r2
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295
 8000e78:	2201      	movs	r2, #1
 8000e7a:	489e      	ldr	r0, [pc, #632]	; (80010f4 <StartDefaultTask+0x33c>)
 8000e7c:	f004 fcf0 	bl	8005860 <HAL_UART_Transmit>

					// Receives State List
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[pump].stateList, 20, HAL_MAX_DELAY);
 8000e80:	4b95      	ldr	r3, [pc, #596]	; (80010d8 <StartDefaultTask+0x320>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4a93      	ldr	r2, [pc, #588]	; (80010dc <StartDefaultTask+0x324>)
 8000e90:	1899      	adds	r1, r3, r2
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	2214      	movs	r2, #20
 8000e98:	4896      	ldr	r0, [pc, #600]	; (80010f4 <StartDefaultTask+0x33c>)
 8000e9a:	f004 fd64 	bl	8005966 <HAL_UART_Receive>

					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState;
 8000e9e:	4b8e      	ldr	r3, [pc, #568]	; (80010d8 <StartDefaultTask+0x320>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4a8d      	ldr	r2, [pc, #564]	; (80010dc <StartDefaultTask+0x324>)
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	3314      	adds	r3, #20
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a88      	ldr	r2, [pc, #544]	; (80010d8 <StartDefaultTask+0x320>)
 8000eb6:	7812      	ldrb	r2, [r2, #0]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	7818      	ldrb	r0, [r3, #0]
 8000ebc:	4a87      	ldr	r2, [pc, #540]	; (80010dc <StartDefaultTask+0x324>)
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3318      	adds	r3, #24
 8000eca:	4602      	mov	r2, r0
 8000ecc:	701a      	strb	r2, [r3, #0]
	  				break;
 8000ece:	f000 bdde 	b.w	8001a8e <StartDefaultTask+0xcd6>
//					pumpTestsParameters[0].VATI[5] = 1;		// flow controller closed
//					pumpTestsParameters[0].VATI[6] = 3;		// mTorr
//					pumpTestsParameters[0].VATI[7] = 50;		// temperature in C

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8000ed2:	4b81      	ldr	r3, [pc, #516]	; (80010d8 <StartDefaultTask+0x320>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	3318      	adds	r3, #24
 8000ee2:	4a7e      	ldr	r2, [pc, #504]	; (80010dc <StartDefaultTask+0x324>)
 8000ee4:	1899      	adds	r1, r3, r2
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	2201      	movs	r2, #1
 8000eec:	4881      	ldr	r0, [pc, #516]	; (80010f4 <StartDefaultTask+0x33c>)
 8000eee:	f004 fcb7 	bl	8005860 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].VATI[0], 8, HAL_MAX_DELAY);
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	497f      	ldr	r1, [pc, #508]	; (80010f8 <StartDefaultTask+0x340>)
 8000efa:	487e      	ldr	r0, [pc, #504]	; (80010f4 <StartDefaultTask+0x33c>)
 8000efc:	f004 fd33 	bl	8005966 <HAL_UART_Receive>

	  				flowStateClose();
 8000f00:	f7ff fbea 	bl	80006d8 <flowStateClose>
	  				stepperOpen();
 8000f04:	f7ff fbfe 	bl	8000704 <stepperOpen>
	  				solenoidOpen();
 8000f08:	f001 f898 	bl	800203c <solenoidOpen>
	  				solenoidClose();
 8000f0c:	f001 f89d 	bl	800204a <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000f10:	4875      	ldr	r0, [pc, #468]	; (80010e8 <StartDefaultTask+0x330>)
 8000f12:	f001 fc29 	bl	8002768 <vacuumGaugeADC>

	  				pumpTestsParameters[pump].eNextState = VAC_ACHIEVMENT_TEST;
 8000f16:	4b70      	ldr	r3, [pc, #448]	; (80010d8 <StartDefaultTask+0x320>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4a6f      	ldr	r2, [pc, #444]	; (80010dc <StartDefaultTask+0x324>)
 8000f1e:	460b      	mov	r3, r1
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4413      	add	r3, r2
 8000f28:	3318      	adds	r3, #24
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 8000f2e:	4873      	ldr	r0, [pc, #460]	; (80010fc <StartDefaultTask+0x344>)
 8000f30:	f004 f90e 	bl	8005150 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 8000f34:	f7ff ff28 	bl	8000d88 <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 8000f38:	4b69      	ldr	r3, [pc, #420]	; (80010e0 <StartDefaultTask+0x328>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 faff 	bl	8007540 <osThreadResume>
	  				break;
 8000f42:	f000 bda4 	b.w	8001a8e <StartDefaultTask+0xcd6>
	  			case VAC_ACHIEVMENT_TEST:
	  				volts = adcGet(&hadc1);
 8000f46:	4868      	ldr	r0, [pc, #416]	; (80010e8 <StartDefaultTask+0x330>)
 8000f48:	f001 f83a 	bl	8001fc0 <adcGet>
 8000f4c:	eef0 7a40 	vmov.f32	s15, s0
 8000f50:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <StartDefaultTask+0x32c>)
 8000f52:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 8000f56:	4b63      	ldr	r3, [pc, #396]	; (80010e4 <StartDefaultTask+0x32c>)
 8000f58:	edd3 7a00 	vldr	s15, [r3]
 8000f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f60:	f001 fc26 	bl	80027b0 <readVacuum>
 8000f64:	eef0 7a40 	vmov.f32	s15, s0
 8000f68:	4b65      	ldr	r3, [pc, #404]	; (8001100 <StartDefaultTask+0x348>)
 8000f6a:	edc3 7a00 	vstr	s15, [r3]

	  				vacuumScale = 1000; // Remove this once STM is connected to hardware
 8000f6e:	4b64      	ldr	r3, [pc, #400]	; (8001100 <StartDefaultTask+0x348>)
 8000f70:	4a64      	ldr	r2, [pc, #400]	; (8001104 <StartDefaultTask+0x34c>)
 8000f72:	601a      	str	r2, [r3, #0]

	  				if(vacuumScale <= (float)pumpTestsParameters[pump].VATI[6] / 1000.0){	// Success
 8000f74:	4b62      	ldr	r3, [pc, #392]	; (8001100 <StartDefaultTask+0x348>)
 8000f76:	edd3 7a00 	vldr	s15, [r3]
 8000f7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f7e:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <StartDefaultTask+0x320>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4a55      	ldr	r2, [pc, #340]	; (80010dc <StartDefaultTask+0x324>)
 8000f86:	460b      	mov	r3, r1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	4413      	add	r3, r2
 8000f90:	331f      	adds	r3, #31
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f9c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fa0:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 80010d0 <StartDefaultTask+0x318>
 8000fa4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000fa8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d829      	bhi.n	8001006 <StartDefaultTask+0x24e>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8000fb2:	4852      	ldr	r0, [pc, #328]	; (80010fc <StartDefaultTask+0x344>)
 8000fb4:	f004 f944 	bl	8005240 <HAL_TIM_Base_Stop_IT>
		  				osThreadSuspend(sendDataHandle);
 8000fb8:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <StartDefaultTask+0x328>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f006 fa8b 	bl	80074d8 <osThreadSuspend>
		  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <StartDefaultTask+0x320>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4944      	ldr	r1, [pc, #272]	; (80010dc <StartDefaultTask+0x324>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3314      	adds	r3, #20
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	1c48      	adds	r0, r1, #1
 8000fda:	4c40      	ldr	r4, [pc, #256]	; (80010dc <StartDefaultTask+0x324>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4423      	add	r3, r4
 8000fe6:	3314      	adds	r3, #20
 8000fe8:	6018      	str	r0, [r3, #0]
 8000fea:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <StartDefaultTask+0x320>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	7809      	ldrb	r1, [r1, #0]
 8000ff2:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <StartDefaultTask+0x324>)
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4403      	add	r3, r0
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4413      	add	r3, r2
 8000ffe:	3318      	adds	r3, #24
 8001000:	460a      	mov	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e05e      	b.n	80010c4 <StartDefaultTask+0x30c>
	  				}else if(25 >= pumpTestsParameters[pump].VATI[7]){	// if current temp is >= temp limit
 8001006:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <StartDefaultTask+0x320>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4a33      	ldr	r2, [pc, #204]	; (80010dc <StartDefaultTask+0x324>)
 800100e:	460b      	mov	r3, r1
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	3320      	adds	r3, #32
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b19      	cmp	r3, #25
 800101e:	d819      	bhi.n	8001054 <StartDefaultTask+0x29c>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <StartDefaultTask+0x320>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	4a2d      	ldr	r2, [pc, #180]	; (80010dc <StartDefaultTask+0x324>)
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	4413      	add	r3, r2
 8001032:	3318      	adds	r3, #24
 8001034:	220e      	movs	r2, #14
 8001036:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <StartDefaultTask+0x320>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	4a27      	ldr	r2, [pc, #156]	; (80010dc <StartDefaultTask+0x324>)
 8001040:	460b      	mov	r3, r1
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	4413      	add	r3, r2
 800104a:	334e      	adds	r3, #78	; 0x4e
 800104c:	2202      	movs	r2, #2
 800104e:	701a      	strb	r2, [r3, #0]
	  					break;
 8001050:	f000 bd1d 	b.w	8001a8e <StartDefaultTask+0xcd6>
	  				}else if(pumpTestsParameters[pump].VATI[2] == hours && pumpTestsParameters[pump].VATI[3] == minutes){
 8001054:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <StartDefaultTask+0x320>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <StartDefaultTask+0x324>)
 800105c:	460b      	mov	r3, r1
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4413      	add	r3, r2
 8001066:	331b      	adds	r3, #27
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <StartDefaultTask+0x350>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d128      	bne.n	80010c4 <StartDefaultTask+0x30c>
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <StartDefaultTask+0x320>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <StartDefaultTask+0x324>)
 800107a:	460b      	mov	r3, r1
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	4413      	add	r3, r2
 8001084:	331c      	adds	r3, #28
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <StartDefaultTask+0x354>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d119      	bne.n	80010c4 <StartDefaultTask+0x30c>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <StartDefaultTask+0x320>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <StartDefaultTask+0x324>)
 8001098:	460b      	mov	r3, r1
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	3318      	adds	r3, #24
 80010a4:	220e      	movs	r2, #14
 80010a6:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <StartDefaultTask+0x320>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <StartDefaultTask+0x324>)
 80010b0:	460b      	mov	r3, r1
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	4413      	add	r3, r2
 80010ba:	334e      	adds	r3, #78	; 0x4e
 80010bc:	2202      	movs	r2, #2
 80010be:	701a      	strb	r2, [r3, #0]
	  					break;
 80010c0:	f000 bce5 	b.w	8001a8e <StartDefaultTask+0xcd6>
	  				}

	  				osDelay(100); // Checks condition every 100 ms
 80010c4:	2064      	movs	r0, #100	; 0x64
 80010c6:	f006 fa6f 	bl	80075a8 <osDelay>

	  				break;
 80010ca:	f000 bce0 	b.w	8001a8e <StartDefaultTask+0xcd6>
 80010ce:	bf00      	nop
 80010d0:	00000000 	.word	0x00000000
 80010d4:	408f4000 	.word	0x408f4000
 80010d8:	20000948 	.word	0x20000948
 80010dc:	200008a8 	.word	0x200008a8
 80010e0:	200008a4 	.word	0x200008a4
 80010e4:	2000094c 	.word	0x2000094c
 80010e8:	2000021c 	.word	0x2000021c
 80010ec:	20000264 	.word	0x20000264
 80010f0:	20000278 	.word	0x20000278
 80010f4:	20000310 	.word	0x20000310
 80010f8:	200008c1 	.word	0x200008c1
 80010fc:	200002c4 	.word	0x200002c4
 8001100:	20000954 	.word	0x20000954
 8001104:	447a0000 	.word	0x447a0000
 8001108:	2000096d 	.word	0x2000096d
 800110c:	2000096e 	.word	0x2000096e
//					pumpTestsParameters[0].STI[6] = 0;		// mTorr
//					pumpTestsParameters[0].STI[7] = 50;		// temperature in C
//					pumpTestsParameters[0].STI[8] = 50;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001110:	4baf      	ldr	r3, [pc, #700]	; (80013d0 <StartDefaultTask+0x618>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	3318      	adds	r3, #24
 8001120:	4aac      	ldr	r2, [pc, #688]	; (80013d4 <StartDefaultTask+0x61c>)
 8001122:	1899      	adds	r1, r3, r2
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	2201      	movs	r2, #1
 800112a:	48ab      	ldr	r0, [pc, #684]	; (80013d8 <StartDefaultTask+0x620>)
 800112c:	f004 fb98 	bl	8005860 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].STI[0], 9, HAL_MAX_DELAY);
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2209      	movs	r2, #9
 8001136:	49a9      	ldr	r1, [pc, #676]	; (80013dc <StartDefaultTask+0x624>)
 8001138:	48a7      	ldr	r0, [pc, #668]	; (80013d8 <StartDefaultTask+0x620>)
 800113a:	f004 fc14 	bl	8005966 <HAL_UART_Receive>

	  				flowStateControl();
 800113e:	f7ff fad9 	bl	80006f4 <flowStateControl>
	  				stepperOpen();
 8001142:	f7ff fadf 	bl	8000704 <stepperOpen>
	  				solenoidOpen();
 8001146:	f000 ff79 	bl	800203c <solenoidOpen>
	  				solenoidClose();
 800114a:	f000 ff7e 	bl	800204a <solenoidClose>
	  				flowControllerADC(&hadc1);
 800114e:	48a4      	ldr	r0, [pc, #656]	; (80013e0 <StartDefaultTask+0x628>)
 8001150:	f7ff fa4c 	bl	80005ec <flowControllerADC>


	  				pumpTestsParameters[pump].eNextState = SPECIAL_TEST;
 8001154:	4b9e      	ldr	r3, [pc, #632]	; (80013d0 <StartDefaultTask+0x618>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4a9e      	ldr	r2, [pc, #632]	; (80013d4 <StartDefaultTask+0x61c>)
 800115c:	460b      	mov	r3, r1
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	3318      	adds	r3, #24
 8001168:	2204      	movs	r2, #4
 800116a:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 800116c:	489d      	ldr	r0, [pc, #628]	; (80013e4 <StartDefaultTask+0x62c>)
 800116e:	f003 ffef 	bl	8005150 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 8001172:	f7ff fe09 	bl	8000d88 <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 8001176:	4b9c      	ldr	r3, [pc, #624]	; (80013e8 <StartDefaultTask+0x630>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f006 f9e0 	bl	8007540 <osThreadResume>
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].STI[8]));
 8001180:	4b93      	ldr	r3, [pc, #588]	; (80013d0 <StartDefaultTask+0x618>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	4a93      	ldr	r2, [pc, #588]	; (80013d4 <StartDefaultTask+0x61c>)
 8001188:	460b      	mov	r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	3329      	adds	r3, #41	; 0x29
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fa76 	bl	8000688 <setFlowRate>
 800119c:	eef0 7a40 	vmov.f32	s15, s0
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	2100      	movs	r1, #0
 80011a6:	4891      	ldr	r0, [pc, #580]	; (80013ec <StartDefaultTask+0x634>)
 80011a8:	f000 fed6 	bl	8001f58 <dacSet>
	  				break;
 80011ac:	f000 bc6f 	b.w	8001a8e <StartDefaultTask+0xcd6>
	  			case SPECIAL_TEST:
//	  				sprintf(msg,"SPECIAL_TEST Scanning\r\n");
//					printMsg(msg, &huart3);
//					osDelay(1000);

	  				flowControllerADC(&hadc1);
 80011b0:	488b      	ldr	r0, [pc, #556]	; (80013e0 <StartDefaultTask+0x628>)
 80011b2:	f7ff fa1b 	bl	80005ec <flowControllerADC>
					volts = adcGet(&hadc1);
 80011b6:	488a      	ldr	r0, [pc, #552]	; (80013e0 <StartDefaultTask+0x628>)
 80011b8:	f000 ff02 	bl	8001fc0 <adcGet>
 80011bc:	eef0 7a40 	vmov.f32	s15, s0
 80011c0:	4b8b      	ldr	r3, [pc, #556]	; (80013f0 <StartDefaultTask+0x638>)
 80011c2:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 80011c6:	4b8a      	ldr	r3, [pc, #552]	; (80013f0 <StartDefaultTask+0x638>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	f7ff fa2e 	bl	8000630 <readFlow>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	4b86      	ldr	r3, [pc, #536]	; (80013f4 <StartDefaultTask+0x63c>)
 80011da:	edc3 7a00 	vstr	s15, [r3]

					vacuumGaugeADC(&hadc1);
 80011de:	4880      	ldr	r0, [pc, #512]	; (80013e0 <StartDefaultTask+0x628>)
 80011e0:	f001 fac2 	bl	8002768 <vacuumGaugeADC>
	  				volts = adcGet(&hadc1);
 80011e4:	487e      	ldr	r0, [pc, #504]	; (80013e0 <StartDefaultTask+0x628>)
 80011e6:	f000 feeb 	bl	8001fc0 <adcGet>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	4b80      	ldr	r3, [pc, #512]	; (80013f0 <StartDefaultTask+0x638>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]
	  				vacuumScale = readVacuum(volts);
 80011f4:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <StartDefaultTask+0x638>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	eeb0 0a67 	vmov.f32	s0, s15
 80011fe:	f001 fad7 	bl	80027b0 <readVacuum>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <StartDefaultTask+0x640>)
 8001208:	edc3 7a00 	vstr	s15, [r3]

	  				flowRate = 0;		// Remove this Once STM is connected to the hardware
 800120c:	4b79      	ldr	r3, [pc, #484]	; (80013f4 <StartDefaultTask+0x63c>)
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
	  				vacuumScale = 1000;	// Remove this Once STM is connected to the hardware
 8001214:	4b78      	ldr	r3, [pc, #480]	; (80013f8 <StartDefaultTask+0x640>)
 8001216:	4a79      	ldr	r2, [pc, #484]	; (80013fc <StartDefaultTask+0x644>)
 8001218:	601a      	str	r2, [r3, #0]

	  				if((uint8_t)flowRate == pumpTestsParameters[pump].STI[8]){	// success
 800121a:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <StartDefaultTask+0x63c>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001224:	edc7 7a00 	vstr	s15, [r7]
 8001228:	783b      	ldrb	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <StartDefaultTask+0x618>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	4968      	ldr	r1, [pc, #416]	; (80013d4 <StartDefaultTask+0x61c>)
 8001234:	4603      	mov	r3, r0
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4403      	add	r3, r0
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	440b      	add	r3, r1
 800123e:	3329      	adds	r3, #41	; 0x29
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d129      	bne.n	800129a <StartDefaultTask+0x4e2>
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001246:	4867      	ldr	r0, [pc, #412]	; (80013e4 <StartDefaultTask+0x62c>)
 8001248:	f003 fffa 	bl	8005240 <HAL_TIM_Base_Stop_IT>
						osThreadSuspend(sendDataHandle);
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <StartDefaultTask+0x630>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f006 f941 	bl	80074d8 <osThreadSuspend>
						pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001256:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <StartDefaultTask+0x618>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	495d      	ldr	r1, [pc, #372]	; (80013d4 <StartDefaultTask+0x61c>)
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	3314      	adds	r3, #20
 800126a:	6819      	ldr	r1, [r3, #0]
 800126c:	1c48      	adds	r0, r1, #1
 800126e:	4c59      	ldr	r4, [pc, #356]	; (80013d4 <StartDefaultTask+0x61c>)
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4423      	add	r3, r4
 800127a:	3314      	adds	r3, #20
 800127c:	6018      	str	r0, [r3, #0]
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <StartDefaultTask+0x618>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	7809      	ldrb	r1, [r1, #0]
 8001286:	4a53      	ldr	r2, [pc, #332]	; (80013d4 <StartDefaultTask+0x61c>)
 8001288:	4603      	mov	r3, r0
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4403      	add	r3, r0
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	4413      	add	r3, r2
 8001292:	3318      	adds	r3, #24
 8001294:	460a      	mov	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e05c      	b.n	8001354 <StartDefaultTask+0x59c>
	  				}else if(25 >= pumpTestsParameters[pump].STI[7]){	// if current temp is >= temp limit
 800129a:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <StartDefaultTask+0x618>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4619      	mov	r1, r3
 80012a0:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <StartDefaultTask+0x61c>)
 80012a2:	460b      	mov	r3, r1
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	4413      	add	r3, r2
 80012ac:	3328      	adds	r3, #40	; 0x28
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b19      	cmp	r3, #25
 80012b2:	d818      	bhi.n	80012e6 <StartDefaultTask+0x52e>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80012b4:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <StartDefaultTask+0x618>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <StartDefaultTask+0x61c>)
 80012bc:	460b      	mov	r3, r1
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	3318      	adds	r3, #24
 80012c8:	220e      	movs	r2, #14
 80012ca:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 80012cc:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <StartDefaultTask+0x618>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4a40      	ldr	r2, [pc, #256]	; (80013d4 <StartDefaultTask+0x61c>)
 80012d4:	460b      	mov	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	334e      	adds	r3, #78	; 0x4e
 80012e0:	2202      	movs	r2, #2
 80012e2:	701a      	strb	r2, [r3, #0]
	  					break;
 80012e4:	e3d3      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  				}else if(pumpTestsParameters[pump].STI[2] == hours && pumpTestsParameters[pump].STI[3] == minutes){
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <StartDefaultTask+0x618>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4a39      	ldr	r2, [pc, #228]	; (80013d4 <StartDefaultTask+0x61c>)
 80012ee:	460b      	mov	r3, r1
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	3323      	adds	r3, #35	; 0x23
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	4b40      	ldr	r3, [pc, #256]	; (8001400 <StartDefaultTask+0x648>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d127      	bne.n	8001354 <StartDefaultTask+0x59c>
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <StartDefaultTask+0x618>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <StartDefaultTask+0x61c>)
 800130c:	460b      	mov	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	3324      	adds	r3, #36	; 0x24
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <StartDefaultTask+0x64c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d118      	bne.n	8001354 <StartDefaultTask+0x59c>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <StartDefaultTask+0x618>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <StartDefaultTask+0x61c>)
 800132a:	460b      	mov	r3, r1
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	4413      	add	r3, r2
 8001334:	3318      	adds	r3, #24
 8001336:	220e      	movs	r2, #14
 8001338:	701a      	strb	r2, [r3, #0]
						pumpTestsParameters[pump].pumpStatus = FAILURE;
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <StartDefaultTask+0x618>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <StartDefaultTask+0x61c>)
 8001342:	460b      	mov	r3, r1
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	334e      	adds	r3, #78	; 0x4e
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
						break;
 8001352:	e39c      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f006 f927 	bl	80075a8 <osDelay>
					break;
 800135a:	e398      	b.n	8001a8e <StartDefaultTask+0xcd6>
//					pumpTestsParameters[0].WUI[5] = 0;		// flow controller open
//					pumpTestsParameters[0].WUI[6] = 0;		// mTorr
//					pumpTestsParameters[0].WUI[7] = 100;	// temperature in C

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <StartDefaultTask+0x618>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	3318      	adds	r3, #24
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <StartDefaultTask+0x61c>)
 800136e:	1899      	adds	r1, r3, r2
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	2201      	movs	r2, #1
 8001376:	4818      	ldr	r0, [pc, #96]	; (80013d8 <StartDefaultTask+0x620>)
 8001378:	f004 fa72 	bl	8005860 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].WUI[0], 8, HAL_MAX_DELAY);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	2208      	movs	r2, #8
 8001382:	4921      	ldr	r1, [pc, #132]	; (8001408 <StartDefaultTask+0x650>)
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <StartDefaultTask+0x620>)
 8001386:	f004 faee 	bl	8005966 <HAL_UART_Receive>

	  				flowStateOpen();
 800138a:	f7ff f9ac 	bl	80006e6 <flowStateOpen>
	  				stepperOpen();
 800138e:	f7ff f9b9 	bl	8000704 <stepperOpen>
	  				solenoidOpen();
 8001392:	f000 fe53 	bl	800203c <solenoidOpen>
	  				solenoidClose();
 8001396:	f000 fe58 	bl	800204a <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <StartDefaultTask+0x628>)
 800139c:	f001 f9e4 	bl	8002768 <vacuumGaugeADC>

	  				pumpTestsParameters[pump].eNextState = WARM_UP;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <StartDefaultTask+0x618>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <StartDefaultTask+0x61c>)
 80013a8:	460b      	mov	r3, r1
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	3318      	adds	r3, #24
 80013b4:	2206      	movs	r2, #6
 80013b6:	701a      	strb	r2, [r3, #0]
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <StartDefaultTask+0x62c>)
 80013ba:	f003 fec9 	bl	8005150 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80013be:	f7ff fce3 	bl	8000d88 <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <StartDefaultTask+0x630>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 f8ba 	bl	8007540 <osThreadResume>
	  				break;
 80013cc:	e35f      	b.n	8001a8e <StartDefaultTask+0xcd6>
 80013ce:	bf00      	nop
 80013d0:	20000948 	.word	0x20000948
 80013d4:	200008a8 	.word	0x200008a8
 80013d8:	20000310 	.word	0x20000310
 80013dc:	200008c9 	.word	0x200008c9
 80013e0:	2000021c 	.word	0x2000021c
 80013e4:	200002c4 	.word	0x200002c4
 80013e8:	200008a4 	.word	0x200008a4
 80013ec:	20000264 	.word	0x20000264
 80013f0:	2000094c 	.word	0x2000094c
 80013f4:	20000950 	.word	0x20000950
 80013f8:	20000954 	.word	0x20000954
 80013fc:	447a0000 	.word	0x447a0000
 8001400:	2000096d 	.word	0x2000096d
 8001404:	2000096e 	.word	0x2000096e
 8001408:	200008d2 	.word	0x200008d2
	  			case WARM_UP:

	  				// record internal/external temperatures
	  				if(pumpTestsParameters[pump].WUI[2] == hours && pumpTestsParameters[pump].WUI[3] == minutes){
 800140c:	4bb7      	ldr	r3, [pc, #732]	; (80016ec <StartDefaultTask+0x934>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	4ab7      	ldr	r2, [pc, #732]	; (80016f0 <StartDefaultTask+0x938>)
 8001414:	460b      	mov	r3, r1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	332c      	adds	r3, #44	; 0x2c
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	4bb4      	ldr	r3, [pc, #720]	; (80016f4 <StartDefaultTask+0x93c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d138      	bne.n	800149c <StartDefaultTask+0x6e4>
 800142a:	4bb0      	ldr	r3, [pc, #704]	; (80016ec <StartDefaultTask+0x934>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4619      	mov	r1, r3
 8001430:	4aaf      	ldr	r2, [pc, #700]	; (80016f0 <StartDefaultTask+0x938>)
 8001432:	460b      	mov	r3, r1
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	332d      	adds	r3, #45	; 0x2d
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4bad      	ldr	r3, [pc, #692]	; (80016f8 <StartDefaultTask+0x940>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d129      	bne.n	800149c <StartDefaultTask+0x6e4>
	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001448:	48ac      	ldr	r0, [pc, #688]	; (80016fc <StartDefaultTask+0x944>)
 800144a:	f003 fef9 	bl	8005240 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 800144e:	4bac      	ldr	r3, [pc, #688]	; (8001700 <StartDefaultTask+0x948>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f006 f840 	bl	80074d8 <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001458:	4ba4      	ldr	r3, [pc, #656]	; (80016ec <StartDefaultTask+0x934>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	49a4      	ldr	r1, [pc, #656]	; (80016f0 <StartDefaultTask+0x938>)
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	440b      	add	r3, r1
 800146a:	3314      	adds	r3, #20
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	1c48      	adds	r0, r1, #1
 8001470:	4c9f      	ldr	r4, [pc, #636]	; (80016f0 <StartDefaultTask+0x938>)
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4423      	add	r3, r4
 800147c:	3314      	adds	r3, #20
 800147e:	6018      	str	r0, [r3, #0]
 8001480:	4b9a      	ldr	r3, [pc, #616]	; (80016ec <StartDefaultTask+0x934>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	7809      	ldrb	r1, [r1, #0]
 8001488:	4a99      	ldr	r2, [pc, #612]	; (80016f0 <StartDefaultTask+0x938>)
 800148a:	4603      	mov	r3, r0
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4403      	add	r3, r0
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	3318      	adds	r3, #24
 8001496:	460a      	mov	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e01d      	b.n	80014d8 <StartDefaultTask+0x720>
	  				}else if(25 >= pumpTestsParameters[0].WUI[7]){	// if current temp is >= temp limit
 800149c:	4b94      	ldr	r3, [pc, #592]	; (80016f0 <StartDefaultTask+0x938>)
 800149e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014a2:	2b19      	cmp	r3, #25
 80014a4:	d818      	bhi.n	80014d8 <StartDefaultTask+0x720>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 80014a6:	4b91      	ldr	r3, [pc, #580]	; (80016ec <StartDefaultTask+0x934>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4a90      	ldr	r2, [pc, #576]	; (80016f0 <StartDefaultTask+0x938>)
 80014ae:	460b      	mov	r3, r1
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	3318      	adds	r3, #24
 80014ba:	220e      	movs	r2, #14
 80014bc:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 80014be:	4b8b      	ldr	r3, [pc, #556]	; (80016ec <StartDefaultTask+0x934>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4a8a      	ldr	r2, [pc, #552]	; (80016f0 <StartDefaultTask+0x938>)
 80014c6:	460b      	mov	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	334e      	adds	r3, #78	; 0x4e
 80014d2:	2202      	movs	r2, #2
 80014d4:	701a      	strb	r2, [r3, #0]
	  					break;
 80014d6:	e2da      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 80014d8:	2064      	movs	r0, #100	; 0x64
 80014da:	f006 f865 	bl	80075a8 <osDelay>
	  				break;
 80014de:	e2d6      	b.n	8001a8e <StartDefaultTask+0xcd6>
//					pumpTestsParameters[0].LTI[6] = 0;		// mTorr
//					pumpTestsParameters[0].LTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].LTI[8] = 50;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80014e0:	4b82      	ldr	r3, [pc, #520]	; (80016ec <StartDefaultTask+0x934>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	3318      	adds	r3, #24
 80014f0:	4a7f      	ldr	r2, [pc, #508]	; (80016f0 <StartDefaultTask+0x938>)
 80014f2:	1899      	adds	r1, r3, r2
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	2201      	movs	r2, #1
 80014fa:	4882      	ldr	r0, [pc, #520]	; (8001704 <StartDefaultTask+0x94c>)
 80014fc:	f004 f9b0 	bl	8005860 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].LTI[0], 8, HAL_MAX_DELAY);
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	2208      	movs	r2, #8
 8001506:	4980      	ldr	r1, [pc, #512]	; (8001708 <StartDefaultTask+0x950>)
 8001508:	487e      	ldr	r0, [pc, #504]	; (8001704 <StartDefaultTask+0x94c>)
 800150a:	f004 fa2c 	bl	8005966 <HAL_UART_Receive>

	  				stepperOpen();
 800150e:	f7ff f8f9 	bl	8000704 <stepperOpen>
	  				solenoidOpen();
 8001512:	f000 fd93 	bl	800203c <solenoidOpen>
	  				solenoidClose();
 8001516:	f000 fd98 	bl	800204a <solenoidClose>
	  				flowControllerADC(&hadc1);
 800151a:	487c      	ldr	r0, [pc, #496]	; (800170c <StartDefaultTask+0x954>)
 800151c:	f7ff f866 	bl	80005ec <flowControllerADC>

	  				pumpTestsParameters[pump].eNextState = LOAD_TEST;
 8001520:	4b72      	ldr	r3, [pc, #456]	; (80016ec <StartDefaultTask+0x934>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	4a72      	ldr	r2, [pc, #456]	; (80016f0 <StartDefaultTask+0x938>)
 8001528:	460b      	mov	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	4413      	add	r3, r2
 8001532:	3318      	adds	r3, #24
 8001534:	2208      	movs	r2, #8
 8001536:	701a      	strb	r2, [r3, #0]
	  				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
 8001538:	4b6c      	ldr	r3, [pc, #432]	; (80016ec <StartDefaultTask+0x934>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	4a6c      	ldr	r2, [pc, #432]	; (80016f0 <StartDefaultTask+0x938>)
 8001540:	460b      	mov	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4413      	add	r3, r2
 800154a:	333a      	adds	r3, #58	; 0x3a
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f89a 	bl	8000688 <setFlowRate>
 8001554:	eef0 7a40 	vmov.f32	s15, s0
 8001558:	eeb0 0a67 	vmov.f32	s0, s15
 800155c:	2100      	movs	r1, #0
 800155e:	486c      	ldr	r0, [pc, #432]	; (8001710 <StartDefaultTask+0x958>)
 8001560:	f000 fcfa 	bl	8001f58 <dacSet>
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 8001564:	4865      	ldr	r0, [pc, #404]	; (80016fc <StartDefaultTask+0x944>)
 8001566:	f003 fdf3 	bl	8005150 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 800156a:	f7ff fc0d 	bl	8000d88 <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 800156e:	4b64      	ldr	r3, [pc, #400]	; (8001700 <StartDefaultTask+0x948>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f005 ffe4 	bl	8007540 <osThreadResume>

	  				break;
 8001578:	e289      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  			case LOAD_TEST:

					volts = adcGet(&hadc1);
 800157a:	4864      	ldr	r0, [pc, #400]	; (800170c <StartDefaultTask+0x954>)
 800157c:	f000 fd20 	bl	8001fc0 <adcGet>
 8001580:	eef0 7a40 	vmov.f32	s15, s0
 8001584:	4b63      	ldr	r3, [pc, #396]	; (8001714 <StartDefaultTask+0x95c>)
 8001586:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 800158a:	4b62      	ldr	r3, [pc, #392]	; (8001714 <StartDefaultTask+0x95c>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	f7ff f84c 	bl	8000630 <readFlow>
 8001598:	eef0 7a40 	vmov.f32	s15, s0
 800159c:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <StartDefaultTask+0x960>)
 800159e:	edc3 7a00 	vstr	s15, [r3]

					flowRate = 0;	// Remove this Once STM is connected to the hardware
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <StartDefaultTask+0x960>)
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

	  				if(pumpTestsParameters[pump].LTI[2] == hours && pumpTestsParameters[pump].LTI[3] == minutes){
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <StartDefaultTask+0x934>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4a4f      	ldr	r2, [pc, #316]	; (80016f0 <StartDefaultTask+0x938>)
 80015b2:	460b      	mov	r3, r1
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	3334      	adds	r3, #52	; 0x34
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <StartDefaultTask+0x93c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d138      	bne.n	800163a <StartDefaultTask+0x882>
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <StartDefaultTask+0x934>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <StartDefaultTask+0x938>)
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	3335      	adds	r3, #53	; 0x35
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <StartDefaultTask+0x940>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d129      	bne.n	800163a <StartDefaultTask+0x882>
//	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80015e6:	4845      	ldr	r0, [pc, #276]	; (80016fc <StartDefaultTask+0x944>)
 80015e8:	f003 fe2a 	bl	8005240 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 80015ec:	4b44      	ldr	r3, [pc, #272]	; (8001700 <StartDefaultTask+0x948>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 ff71 	bl	80074d8 <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 80015f6:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <StartDefaultTask+0x934>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	493c      	ldr	r1, [pc, #240]	; (80016f0 <StartDefaultTask+0x938>)
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	440b      	add	r3, r1
 8001608:	3314      	adds	r3, #20
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	1c48      	adds	r0, r1, #1
 800160e:	4c38      	ldr	r4, [pc, #224]	; (80016f0 <StartDefaultTask+0x938>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4423      	add	r3, r4
 800161a:	3314      	adds	r3, #20
 800161c:	6018      	str	r0, [r3, #0]
 800161e:	4b33      	ldr	r3, [pc, #204]	; (80016ec <StartDefaultTask+0x934>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	7809      	ldrb	r1, [r1, #0]
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <StartDefaultTask+0x938>)
 8001628:	4603      	mov	r3, r0
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4403      	add	r3, r0
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	3318      	adds	r3, #24
 8001634:	460a      	mov	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
 8001638:	e01d      	b.n	8001676 <StartDefaultTask+0x8be>
	  				}else if(25 >= pumpTestsParameters[0].LTI[7]){	// if current temp is >= temp limit
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <StartDefaultTask+0x938>)
 800163c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001640:	2b19      	cmp	r3, #25
 8001642:	d818      	bhi.n	8001676 <StartDefaultTask+0x8be>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <StartDefaultTask+0x934>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <StartDefaultTask+0x938>)
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4413      	add	r3, r2
 8001656:	3318      	adds	r3, #24
 8001658:	220e      	movs	r2, #14
 800165a:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <StartDefaultTask+0x934>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <StartDefaultTask+0x938>)
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4413      	add	r3, r2
 800166e:	334e      	adds	r3, #78	; 0x4e
 8001670:	2202      	movs	r2, #2
 8001672:	701a      	strb	r2, [r3, #0]
	  					break;
 8001674:	e20b      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  				}

	  				osDelay(100);	// Checks condition every 100 ms
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f005 ff96 	bl	80075a8 <osDelay>
	  				break;
 800167c:	e207      	b.n	8001a8e <StartDefaultTask+0xcd6>
//					pumpTestsParameters[0].OTI[6] = 0;		// mTorr
//					pumpTestsParameters[0].OTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].OTI[8] = 0;		// Flow Rate

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <StartDefaultTask+0x934>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	3318      	adds	r3, #24
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <StartDefaultTask+0x938>)
 8001690:	1899      	adds	r1, r3, r2
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	2201      	movs	r2, #1
 8001698:	481a      	ldr	r0, [pc, #104]	; (8001704 <StartDefaultTask+0x94c>)
 800169a:	f004 f8e1 	bl	8005860 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].OTI[0], 8, HAL_MAX_DELAY);
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	2208      	movs	r2, #8
 80016a4:	491d      	ldr	r1, [pc, #116]	; (800171c <StartDefaultTask+0x964>)
 80016a6:	4817      	ldr	r0, [pc, #92]	; (8001704 <StartDefaultTask+0x94c>)
 80016a8:	f004 f95d 	bl	8005966 <HAL_UART_Receive>

	  				stepperOpen();
 80016ac:	f7ff f82a 	bl	8000704 <stepperOpen>
	  				solenoidOpen();
 80016b0:	f000 fcc4 	bl	800203c <solenoidOpen>
	  				solenoidClose();
 80016b4:	f000 fcc9 	bl	800204a <solenoidClose>
	  				flowControllerADC(&hadc1);
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <StartDefaultTask+0x954>)
 80016ba:	f7fe ff97 	bl	80005ec <flowControllerADC>

	  				pumpTestsParameters[pump].eNextState = OPERATION_TEST;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <StartDefaultTask+0x934>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <StartDefaultTask+0x938>)
 80016c6:	460b      	mov	r3, r1
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	3318      	adds	r3, #24
 80016d2:	220a      	movs	r2, #10
 80016d4:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <StartDefaultTask+0x944>)
 80016d8:	f003 fd3a 	bl	8005150 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80016dc:	f7ff fb54 	bl	8000d88 <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <StartDefaultTask+0x948>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 ff2b 	bl	8007540 <osThreadResume>

	  				break;
 80016ea:	e1d0      	b.n	8001a8e <StartDefaultTask+0xcd6>
 80016ec:	20000948 	.word	0x20000948
 80016f0:	200008a8 	.word	0x200008a8
 80016f4:	2000096d 	.word	0x2000096d
 80016f8:	2000096e 	.word	0x2000096e
 80016fc:	200002c4 	.word	0x200002c4
 8001700:	200008a4 	.word	0x200008a4
 8001704:	20000310 	.word	0x20000310
 8001708:	200008da 	.word	0x200008da
 800170c:	2000021c 	.word	0x2000021c
 8001710:	20000264 	.word	0x20000264
 8001714:	2000094c 	.word	0x2000094c
 8001718:	20000950 	.word	0x20000950
 800171c:	200008e3 	.word	0x200008e3
	  			case OPERATION_TEST:

	  				flowControllerADC(&hadc1);
 8001720:	48a2      	ldr	r0, [pc, #648]	; (80019ac <StartDefaultTask+0xbf4>)
 8001722:	f7fe ff63 	bl	80005ec <flowControllerADC>
					volts = adcGet(&hadc1);
 8001726:	48a1      	ldr	r0, [pc, #644]	; (80019ac <StartDefaultTask+0xbf4>)
 8001728:	f000 fc4a 	bl	8001fc0 <adcGet>
 800172c:	eef0 7a40 	vmov.f32	s15, s0
 8001730:	4b9f      	ldr	r3, [pc, #636]	; (80019b0 <StartDefaultTask+0xbf8>)
 8001732:	edc3 7a00 	vstr	s15, [r3]
					flowRate = readFlow(volts);
 8001736:	4b9e      	ldr	r3, [pc, #632]	; (80019b0 <StartDefaultTask+0xbf8>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	f7fe ff76 	bl	8000630 <readFlow>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	4b9a      	ldr	r3, [pc, #616]	; (80019b4 <StartDefaultTask+0xbfc>)
 800174a:	edc3 7a00 	vstr	s15, [r3]

					vacuumGaugeADC(&hadc1);
 800174e:	4897      	ldr	r0, [pc, #604]	; (80019ac <StartDefaultTask+0xbf4>)
 8001750:	f001 f80a 	bl	8002768 <vacuumGaugeADC>
					volts = adcGet(&hadc1);
 8001754:	4895      	ldr	r0, [pc, #596]	; (80019ac <StartDefaultTask+0xbf4>)
 8001756:	f000 fc33 	bl	8001fc0 <adcGet>
 800175a:	eef0 7a40 	vmov.f32	s15, s0
 800175e:	4b94      	ldr	r3, [pc, #592]	; (80019b0 <StartDefaultTask+0xbf8>)
 8001760:	edc3 7a00 	vstr	s15, [r3]
					vacuumScale = readVacuum(volts);
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <StartDefaultTask+0xbf8>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	f001 f81f 	bl	80027b0 <readVacuum>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	4b90      	ldr	r3, [pc, #576]	; (80019b8 <StartDefaultTask+0xc00>)
 8001778:	edc3 7a00 	vstr	s15, [r3]

	  				if(pumpTestsParameters[pump].OTI[2] == hours && pumpTestsParameters[pump].OTI[3] == minutes){
 800177c:	4b8f      	ldr	r3, [pc, #572]	; (80019bc <StartDefaultTask+0xc04>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4a8f      	ldr	r2, [pc, #572]	; (80019c0 <StartDefaultTask+0xc08>)
 8001784:	460b      	mov	r3, r1
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	333d      	adds	r3, #61	; 0x3d
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <StartDefaultTask+0xc0c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d138      	bne.n	800180c <StartDefaultTask+0xa54>
 800179a:	4b88      	ldr	r3, [pc, #544]	; (80019bc <StartDefaultTask+0xc04>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	4a87      	ldr	r2, [pc, #540]	; (80019c0 <StartDefaultTask+0xc08>)
 80017a2:	460b      	mov	r3, r1
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	333e      	adds	r3, #62	; 0x3e
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <StartDefaultTask+0xc10>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d129      	bne.n	800180c <StartDefaultTask+0xa54>
	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 80017b8:	4884      	ldr	r0, [pc, #528]	; (80019cc <StartDefaultTask+0xc14>)
 80017ba:	f003 fd41 	bl	8005240 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 80017be:	4b84      	ldr	r3, [pc, #528]	; (80019d0 <StartDefaultTask+0xc18>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fe88 	bl	80074d8 <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 80017c8:	4b7c      	ldr	r3, [pc, #496]	; (80019bc <StartDefaultTask+0xc04>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	497c      	ldr	r1, [pc, #496]	; (80019c0 <StartDefaultTask+0xc08>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	440b      	add	r3, r1
 80017da:	3314      	adds	r3, #20
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	1c48      	adds	r0, r1, #1
 80017e0:	4c77      	ldr	r4, [pc, #476]	; (80019c0 <StartDefaultTask+0xc08>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4423      	add	r3, r4
 80017ec:	3314      	adds	r3, #20
 80017ee:	6018      	str	r0, [r3, #0]
 80017f0:	4b72      	ldr	r3, [pc, #456]	; (80019bc <StartDefaultTask+0xc04>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	7809      	ldrb	r1, [r1, #0]
 80017f8:	4a71      	ldr	r2, [pc, #452]	; (80019c0 <StartDefaultTask+0xc08>)
 80017fa:	4603      	mov	r3, r0
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4403      	add	r3, r0
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	3318      	adds	r3, #24
 8001806:	460a      	mov	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e01d      	b.n	8001848 <StartDefaultTask+0xa90>
	  				}else if(25 >= pumpTestsParameters[0].OTI[7]){	// if current temp is >= temp limit
 800180c:	4b6c      	ldr	r3, [pc, #432]	; (80019c0 <StartDefaultTask+0xc08>)
 800180e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001812:	2b19      	cmp	r3, #25
 8001814:	d818      	bhi.n	8001848 <StartDefaultTask+0xa90>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001816:	4b69      	ldr	r3, [pc, #420]	; (80019bc <StartDefaultTask+0xc04>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	4a68      	ldr	r2, [pc, #416]	; (80019c0 <StartDefaultTask+0xc08>)
 800181e:	460b      	mov	r3, r1
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	3318      	adds	r3, #24
 800182a:	220e      	movs	r2, #14
 800182c:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <StartDefaultTask+0xc04>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	4a62      	ldr	r2, [pc, #392]	; (80019c0 <StartDefaultTask+0xc08>)
 8001836:	460b      	mov	r3, r1
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	334e      	adds	r3, #78	; 0x4e
 8001842:	2202      	movs	r2, #2
 8001844:	701a      	strb	r2, [r3, #0]
	  					break;
 8001846:	e122      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  				}
	  				osDelay(100);
 8001848:	2064      	movs	r0, #100	; 0x64
 800184a:	f005 fead 	bl	80075a8 <osDelay>
	  				break;
 800184e:	e11e      	b.n	8001a8e <StartDefaultTask+0xcd6>
//					pumpTestsParameters[0].UMTI[7] = 100;	// temperature in C
//	  				pumpTestsParameters[0].UMI[8] = 50;		// Flow Rate
//					pumpTestsParameters[0].UMTI[9] = 15;	// Pressure in kPA

					// sends current State
					HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 8001850:	4b5a      	ldr	r3, [pc, #360]	; (80019bc <StartDefaultTask+0xc04>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	3318      	adds	r3, #24
 8001860:	4a57      	ldr	r2, [pc, #348]	; (80019c0 <StartDefaultTask+0xc08>)
 8001862:	1899      	adds	r1, r3, r2
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	2201      	movs	r2, #1
 800186a:	485a      	ldr	r0, [pc, #360]	; (80019d4 <StartDefaultTask+0xc1c>)
 800186c:	f003 fff8 	bl	8005860 <HAL_UART_Transmit>

					// Receives Parameters
					HAL_UART_Receive(&huart3, (uint8_t*)&pumpTestsParameters[0].UMTI[0], 9, HAL_MAX_DELAY);
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	2209      	movs	r2, #9
 8001876:	4958      	ldr	r1, [pc, #352]	; (80019d8 <StartDefaultTask+0xc20>)
 8001878:	4856      	ldr	r0, [pc, #344]	; (80019d4 <StartDefaultTask+0xc1c>)
 800187a:	f004 f874 	bl	8005966 <HAL_UART_Receive>

					stepperStep(800);				// close valve half way
 800187e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001882:	f7fe ff4b 	bl	800071c <stepperStep>
					HAL_TIM_Base_Start_IT(&htim7);	// starts closing
 8001886:	4855      	ldr	r0, [pc, #340]	; (80019dc <StartDefaultTask+0xc24>)
 8001888:	f003 fc62 	bl	8005150 <HAL_TIM_Base_Start_IT>
	  				stepperOpen();
 800188c:	f7fe ff3a 	bl	8000704 <stepperOpen>
	  				solenoidOpen();
 8001890:	f000 fbd4 	bl	800203c <solenoidOpen>
	  				solenoidClose();
 8001894:	f000 fbd9 	bl	800204a <solenoidClose>
	  				flowControllerADC(&hadc1);
 8001898:	4844      	ldr	r0, [pc, #272]	; (80019ac <StartDefaultTask+0xbf4>)
 800189a:	f7fe fea7 	bl	80005ec <flowControllerADC>



					pumpTestsParameters[pump].eNextState = ULTIMATE_MEASURE_TEST;
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <StartDefaultTask+0xc04>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <StartDefaultTask+0xc08>)
 80018a6:	460b      	mov	r3, r1
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4413      	add	r3, r2
 80018b0:	3318      	adds	r3, #24
 80018b2:	220c      	movs	r2, #12
 80018b4:	701a      	strb	r2, [r3, #0]
	  				//dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(pumpTestsParameters[pump].LTI[8]));
	  				HAL_TIM_Base_Start_IT(&htim10);	// Starts this timer
 80018b6:	4845      	ldr	r0, [pc, #276]	; (80019cc <StartDefaultTask+0xc14>)
 80018b8:	f003 fc4a 	bl	8005150 <HAL_TIM_Base_Start_IT>
	  				resetTime();					// Resets timer
 80018bc:	f7ff fa64 	bl	8000d88 <resetTime>
	  				osThreadResume(sendDataHandle);	// Starts data Transfer
 80018c0:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <StartDefaultTask+0xc18>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f005 fe3b 	bl	8007540 <osThreadResume>

	  				break;
 80018ca:	e0e0      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  			case ULTIMATE_MEASURE_TEST:


	  				if(pumpTestsParameters[pump].UMTI[2] == hours && pumpTestsParameters[pump].UMTI[3] == minutes){
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <StartDefaultTask+0xc04>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <StartDefaultTask+0xc08>)
 80018d4:	460b      	mov	r3, r1
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	4413      	add	r3, r2
 80018de:	3346      	adds	r3, #70	; 0x46
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <StartDefaultTask+0xc0c>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d138      	bne.n	800195c <StartDefaultTask+0xba4>
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <StartDefaultTask+0xc04>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <StartDefaultTask+0xc08>)
 80018f2:	460b      	mov	r3, r1
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	3347      	adds	r3, #71	; 0x47
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <StartDefaultTask+0xc10>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d129      	bne.n	800195c <StartDefaultTask+0xba4>
	  					// Success
	  					HAL_TIM_Base_Stop_IT(&htim10);
 8001908:	4830      	ldr	r0, [pc, #192]	; (80019cc <StartDefaultTask+0xc14>)
 800190a:	f003 fc99 	bl	8005240 <HAL_TIM_Base_Stop_IT>
	  					osThreadSuspend(sendDataHandle);
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <StartDefaultTask+0xc18>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f005 fde0 	bl	80074d8 <osThreadSuspend>
	  					pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <StartDefaultTask+0xc04>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4928      	ldr	r1, [pc, #160]	; (80019c0 <StartDefaultTask+0xc08>)
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	440b      	add	r3, r1
 800192a:	3314      	adds	r3, #20
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	1c48      	adds	r0, r1, #1
 8001930:	4c23      	ldr	r4, [pc, #140]	; (80019c0 <StartDefaultTask+0xc08>)
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4423      	add	r3, r4
 800193c:	3314      	adds	r3, #20
 800193e:	6018      	str	r0, [r3, #0]
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <StartDefaultTask+0xc04>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	7809      	ldrb	r1, [r1, #0]
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <StartDefaultTask+0xc08>)
 800194a:	4603      	mov	r3, r0
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4403      	add	r3, r0
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	3318      	adds	r3, #24
 8001956:	460a      	mov	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e01d      	b.n	8001998 <StartDefaultTask+0xbe0>
	  				}else if(25 >= pumpTestsParameters[0].UMTI[7]){	// if current temp is >= temp limit
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <StartDefaultTask+0xc08>)
 800195e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001962:	2b19      	cmp	r3, #25
 8001964:	d818      	bhi.n	8001998 <StartDefaultTask+0xbe0>
	  					pumpTestsParameters[pump].eNextState = FAIL_STATE;
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <StartDefaultTask+0xc04>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <StartDefaultTask+0xc08>)
 800196e:	460b      	mov	r3, r1
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	3318      	adds	r3, #24
 800197a:	220e      	movs	r2, #14
 800197c:	701a      	strb	r2, [r3, #0]
	  					pumpTestsParameters[pump].pumpStatus = FAILURE;
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <StartDefaultTask+0xc04>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <StartDefaultTask+0xc08>)
 8001986:	460b      	mov	r3, r1
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	334e      	adds	r3, #78	; 0x4e
 8001992:	2202      	movs	r2, #2
 8001994:	701a      	strb	r2, [r3, #0]
	  					break;
 8001996:	e07a      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  				}
	  				osDelay(100);	// Checks condition every 100 ms
 8001998:	2064      	movs	r0, #100	; 0x64
 800199a:	f005 fe05 	bl	80075a8 <osDelay>
	  				break;
 800199e:	e076      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  			case IDLE:

					osDelay(3000);
 80019a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019a4:	f005 fe00 	bl	80075a8 <osDelay>

	  				break;
 80019a8:	e071      	b.n	8001a8e <StartDefaultTask+0xcd6>
 80019aa:	bf00      	nop
 80019ac:	2000021c 	.word	0x2000021c
 80019b0:	2000094c 	.word	0x2000094c
 80019b4:	20000950 	.word	0x20000950
 80019b8:	20000954 	.word	0x20000954
 80019bc:	20000948 	.word	0x20000948
 80019c0:	200008a8 	.word	0x200008a8
 80019c4:	2000096d 	.word	0x2000096d
 80019c8:	2000096e 	.word	0x2000096e
 80019cc:	200002c4 	.word	0x200002c4
 80019d0:	200008a4 	.word	0x200008a4
 80019d4:	20000310 	.word	0x20000310
 80019d8:	200008ec 	.word	0x200008ec
 80019dc:	20000278 	.word	0x20000278
	  			case FAIL_STATE:
	  				HAL_UART_Transmit(&huart3, (uint8_t*)&pumpTestsParameters[pump].eNextState, 1, HAL_MAX_DELAY);
 80019e0:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <StartDefaultTask+0xcdc>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	3318      	adds	r3, #24
 80019f0:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <StartDefaultTask+0xce0>)
 80019f2:	1899      	adds	r1, r3, r2
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	2201      	movs	r2, #1
 80019fa:	4828      	ldr	r0, [pc, #160]	; (8001a9c <StartDefaultTask+0xce4>)
 80019fc:	f003 ff30 	bl	8005860 <HAL_UART_Transmit>
	  				HAL_TIM_Base_Stop_IT(&htim10);
 8001a00:	4827      	ldr	r0, [pc, #156]	; (8001aa0 <StartDefaultTask+0xce8>)
 8001a02:	f003 fc1d 	bl	8005240 <HAL_TIM_Base_Stop_IT>
	  				osThreadSuspend(sendDataHandle);
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <StartDefaultTask+0xcec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 fd64 	bl	80074d8 <osThreadSuspend>
	  				pumpTestsParameters[pump].eNextState = *(pumpTestsParameters[pump]).currentState++;
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <StartDefaultTask+0xcdc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4920      	ldr	r1, [pc, #128]	; (8001a98 <StartDefaultTask+0xce0>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	440b      	add	r3, r1
 8001a22:	3314      	adds	r3, #20
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	1c48      	adds	r0, r1, #1
 8001a28:	4c1b      	ldr	r4, [pc, #108]	; (8001a98 <StartDefaultTask+0xce0>)
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4423      	add	r3, r4
 8001a34:	3314      	adds	r3, #20
 8001a36:	6018      	str	r0, [r3, #0]
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <StartDefaultTask+0xcdc>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	7809      	ldrb	r1, [r1, #0]
 8001a40:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <StartDefaultTask+0xce0>)
 8001a42:	4603      	mov	r3, r0
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4403      	add	r3, r0
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3318      	adds	r3, #24
 8001a4e:	460a      	mov	r2, r1
 8001a50:	701a      	strb	r2, [r3, #0]
	  				break;
 8001a52:	e01c      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  			case STOP:
	  				pumpTestsParameters[pump].eNextState = STOP;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <StartDefaultTask+0xcdc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <StartDefaultTask+0xce0>)
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	4413      	add	r3, r2
 8001a66:	3318      	adds	r3, #24
 8001a68:	220f      	movs	r2, #15
 8001a6a:	701a      	strb	r2, [r3, #0]
	  				HAL_Delay(5000);
 8001a6c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a70:	f000 ff44 	bl	80028fc <HAL_Delay>
	  				break;
 8001a74:	e00b      	b.n	8001a8e <StartDefaultTask+0xcd6>
	  			default:
	  				pumpTestsParameters[pump].eNextState = START;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <StartDefaultTask+0xcdc>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <StartDefaultTask+0xce0>)
 8001a7e:	460b      	mov	r3, r1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4413      	add	r3, r2
 8001a88:	3318      	adds	r3, #24
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	  switch(pumpTestsParameters[pump].eNextState) {
 8001a8e:	f7ff b997 	b.w	8000dc0 <StartDefaultTask+0x8>
 8001a92:	bf00      	nop
 8001a94:	20000948 	.word	0x20000948
 8001a98:	200008a8 	.word	0x200008a8
 8001a9c:	20000310 	.word	0x20000310
 8001aa0:	200002c4 	.word	0x200002c4
 8001aa4:	200008a4 	.word	0x200008a4

08001aa8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
//	sprintf(msg,"Sending Data\r\n");
//	printMsg(msg, &huart3);



    switch(pumpTestsParameters[pump].eNextState){
 8001ab0:	4ba7      	ldr	r3, [pc, #668]	; (8001d50 <StartTask02+0x2a8>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4aa7      	ldr	r2, [pc, #668]	; (8001d54 <StartTask02+0x2ac>)
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3318      	adds	r3, #24
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	3b02      	subs	r3, #2
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	f200 8182 	bhi.w	8001dd2 <StartTask02+0x32a>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <StartTask02+0x2c>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001b09 	.word	0x08001b09
 8001ad8:	08001dd3 	.word	0x08001dd3
 8001adc:	08001b53 	.word	0x08001b53
 8001ae0:	08001dd3 	.word	0x08001dd3
 8001ae4:	08001bb3 	.word	0x08001bb3
 8001ae8:	08001dd3 	.word	0x08001dd3
 8001aec:	08001be7 	.word	0x08001be7
 8001af0:	08001dd3 	.word	0x08001dd3
 8001af4:	08001c31 	.word	0x08001c31
 8001af8:	08001dd3 	.word	0x08001dd3
 8001afc:	08001c91 	.word	0x08001c91
 8001b00:	08001cf1 	.word	0x08001cf1
 8001b04:	08001d75 	.word	0x08001d75
    case VAC_ACHIEVMENT_TEST:
    	tx_buffer[0] = VAC_ACHIEVMENT_TEST;
 8001b08:	4b93      	ldr	r3, [pc, #588]	; (8001d58 <StartTask02+0x2b0>)
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001b0e:	4b90      	ldr	r3, [pc, #576]	; (8001d50 <StartTask02+0x2a8>)
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	4b91      	ldr	r3, [pc, #580]	; (8001d58 <StartTask02+0x2b0>)
 8001b14:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001b16:	4b91      	ldr	r3, [pc, #580]	; (8001d5c <StartTask02+0x2b4>)
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	4b8f      	ldr	r3, [pc, #572]	; (8001d58 <StartTask02+0x2b0>)
 8001b1c:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001b1e:	4b90      	ldr	r3, [pc, #576]	; (8001d60 <StartTask02+0x2b8>)
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	4b8d      	ldr	r3, [pc, #564]	; (8001d58 <StartTask02+0x2b0>)
 8001b24:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001b26:	4b8f      	ldr	r3, [pc, #572]	; (8001d64 <StartTask02+0x2bc>)
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	4b8b      	ldr	r3, [pc, #556]	; (8001d58 <StartTask02+0x2b0>)
 8001b2c:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001b2e:	4b8e      	ldr	r3, [pc, #568]	; (8001d68 <StartTask02+0x2c0>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b38:	edc7 7a00 	vstr	s15, [r7]
 8001b3c:	783b      	ldrb	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b85      	ldr	r3, [pc, #532]	; (8001d58 <StartTask02+0x2b0>)
 8001b42:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001b44:	4b84      	ldr	r3, [pc, #528]	; (8001d58 <StartTask02+0x2b0>)
 8001b46:	2219      	movs	r2, #25
 8001b48:	719a      	strb	r2, [r3, #6]
    	tx_buffer_size = 7;
 8001b4a:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <StartTask02+0x2c4>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	701a      	strb	r2, [r3, #0]
    	break;
 8001b50:	e140      	b.n	8001dd4 <StartTask02+0x32c>
    case SPECIAL_TEST:
    	tx_buffer[0] = SPECIAL_TEST;
 8001b52:	4b81      	ldr	r3, [pc, #516]	; (8001d58 <StartTask02+0x2b0>)
 8001b54:	2204      	movs	r2, #4
 8001b56:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001b58:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <StartTask02+0x2a8>)
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	4b7e      	ldr	r3, [pc, #504]	; (8001d58 <StartTask02+0x2b0>)
 8001b5e:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001b60:	4b7e      	ldr	r3, [pc, #504]	; (8001d5c <StartTask02+0x2b4>)
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <StartTask02+0x2b0>)
 8001b66:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001b68:	4b7d      	ldr	r3, [pc, #500]	; (8001d60 <StartTask02+0x2b8>)
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	4b7a      	ldr	r3, [pc, #488]	; (8001d58 <StartTask02+0x2b0>)
 8001b6e:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001b70:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <StartTask02+0x2bc>)
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	4b78      	ldr	r3, [pc, #480]	; (8001d58 <StartTask02+0x2b0>)
 8001b76:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001b78:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <StartTask02+0x2c0>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b82:	edc7 7a00 	vstr	s15, [r7]
 8001b86:	783b      	ldrb	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b73      	ldr	r3, [pc, #460]	; (8001d58 <StartTask02+0x2b0>)
 8001b8c:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001b8e:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <StartTask02+0x2b0>)
 8001b90:	2219      	movs	r2, #25
 8001b92:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001b94:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <StartTask02+0x2c8>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9e:	edc7 7a00 	vstr	s15, [r7]
 8001ba2:	783b      	ldrb	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <StartTask02+0x2b0>)
 8001ba8:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001baa:	4b70      	ldr	r3, [pc, #448]	; (8001d6c <StartTask02+0x2c4>)
 8001bac:	2208      	movs	r2, #8
 8001bae:	701a      	strb	r2, [r3, #0]
    	break;
 8001bb0:	e110      	b.n	8001dd4 <StartTask02+0x32c>
    case WARM_UP:
    	tx_buffer[0] = WARM_UP;
 8001bb2:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <StartTask02+0x2b0>)
 8001bb4:	2206      	movs	r2, #6
 8001bb6:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001bb8:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <StartTask02+0x2a8>)
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <StartTask02+0x2b0>)
 8001bbe:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <StartTask02+0x2b4>)
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	4b64      	ldr	r3, [pc, #400]	; (8001d58 <StartTask02+0x2b0>)
 8001bc6:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001bc8:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <StartTask02+0x2b8>)
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <StartTask02+0x2b0>)
 8001bce:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <StartTask02+0x2bc>)
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	4b60      	ldr	r3, [pc, #384]	; (8001d58 <StartTask02+0x2b0>)
 8001bd6:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = 25;						// temperature in C
 8001bd8:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <StartTask02+0x2b0>)
 8001bda:	2219      	movs	r2, #25
 8001bdc:	715a      	strb	r2, [r3, #5]
    	tx_buffer_size = 6;
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <StartTask02+0x2c4>)
 8001be0:	2206      	movs	r2, #6
 8001be2:	701a      	strb	r2, [r3, #0]
    	break;
 8001be4:	e0f6      	b.n	8001dd4 <StartTask02+0x32c>
    case LOAD_TEST:
    	tx_buffer[0] = LOAD_TEST;
 8001be6:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <StartTask02+0x2b0>)
 8001be8:	2208      	movs	r2, #8
 8001bea:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001bec:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <StartTask02+0x2a8>)
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <StartTask02+0x2b0>)
 8001bf2:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001bf4:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <StartTask02+0x2b4>)
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <StartTask02+0x2b0>)
 8001bfa:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001bfc:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <StartTask02+0x2b8>)
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <StartTask02+0x2b0>)
 8001c02:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001c04:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <StartTask02+0x2bc>)
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <StartTask02+0x2b0>)
 8001c0a:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) flowRate;		// L/min
 8001c0c:	4b58      	ldr	r3, [pc, #352]	; (8001d70 <StartTask02+0x2c8>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c16:	edc7 7a00 	vstr	s15, [r7]
 8001c1a:	783b      	ldrb	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <StartTask02+0x2b0>)
 8001c20:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001c22:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <StartTask02+0x2b0>)
 8001c24:	2219      	movs	r2, #25
 8001c26:	719a      	strb	r2, [r3, #6]
    	tx_buffer_size = 7;
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <StartTask02+0x2c4>)
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	701a      	strb	r2, [r3, #0]
    	break;
 8001c2e:	e0d1      	b.n	8001dd4 <StartTask02+0x32c>
    case OPERATION_TEST:
    	tx_buffer[0] = OPERATION_TEST;
 8001c30:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <StartTask02+0x2b0>)
 8001c32:	220a      	movs	r2, #10
 8001c34:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001c36:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <StartTask02+0x2a8>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <StartTask02+0x2b0>)
 8001c3c:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <StartTask02+0x2b4>)
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b45      	ldr	r3, [pc, #276]	; (8001d58 <StartTask02+0x2b0>)
 8001c44:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <StartTask02+0x2b8>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <StartTask02+0x2b0>)
 8001c4c:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001c4e:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <StartTask02+0x2bc>)
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <StartTask02+0x2b0>)
 8001c54:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001c56:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <StartTask02+0x2c0>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c60:	edc7 7a00 	vstr	s15, [r7]
 8001c64:	783b      	ldrb	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <StartTask02+0x2b0>)
 8001c6a:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <StartTask02+0x2b0>)
 8001c6e:	2219      	movs	r2, #25
 8001c70:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <StartTask02+0x2c8>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7c:	edc7 7a00 	vstr	s15, [r7]
 8001c80:	783b      	ldrb	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <StartTask02+0x2b0>)
 8001c86:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <StartTask02+0x2c4>)
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	701a      	strb	r2, [r3, #0]
    	break;
 8001c8e:	e0a1      	b.n	8001dd4 <StartTask02+0x32c>
    case ULTIMATE_MEASURE_TEST:
    	tx_buffer[0] = ULTIMATE_MEASURE_TEST;
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <StartTask02+0x2b0>)
 8001c92:	220c      	movs	r2, #12
 8001c94:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <StartTask02+0x2a8>)
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <StartTask02+0x2b0>)
 8001c9c:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <StartTask02+0x2b4>)
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <StartTask02+0x2b0>)
 8001ca4:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <StartTask02+0x2b8>)
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <StartTask02+0x2b0>)
 8001cac:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <StartTask02+0x2bc>)
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <StartTask02+0x2b0>)
 8001cb4:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <StartTask02+0x2c0>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc0:	edc7 7a00 	vstr	s15, [r7]
 8001cc4:	783b      	ldrb	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <StartTask02+0x2b0>)
 8001cca:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <StartTask02+0x2b0>)
 8001cce:	2219      	movs	r2, #25
 8001cd0:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <StartTask02+0x2c8>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	edc7 7a00 	vstr	s15, [r7]
 8001ce0:	783b      	ldrb	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <StartTask02+0x2b0>)
 8001ce6:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <StartTask02+0x2c4>)
 8001cea:	2208      	movs	r2, #8
 8001cec:	701a      	strb	r2, [r3, #0]
    	break;
 8001cee:	e071      	b.n	8001dd4 <StartTask02+0x32c>
    case IDLE:
    	tx_buffer[0] = IDLE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <StartTask02+0x2b0>)
 8001cf2:	220d      	movs	r2, #13
 8001cf4:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <StartTask02+0x2a8>)
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <StartTask02+0x2b0>)
 8001cfc:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <StartTask02+0x2b4>)
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <StartTask02+0x2b0>)
 8001d04:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <StartTask02+0x2b8>)
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <StartTask02+0x2b0>)
 8001d0c:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <StartTask02+0x2bc>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <StartTask02+0x2b0>)
 8001d14:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <StartTask02+0x2c0>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d20:	edc7 7a00 	vstr	s15, [r7]
 8001d24:	783b      	ldrb	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <StartTask02+0x2b0>)
 8001d2a:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <StartTask02+0x2b0>)
 8001d2e:	2219      	movs	r2, #25
 8001d30:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <StartTask02+0x2c8>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d3c:	edc7 7a00 	vstr	s15, [r7]
 8001d40:	783b      	ldrb	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <StartTask02+0x2b0>)
 8001d46:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <StartTask02+0x2c4>)
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	701a      	strb	r2, [r3, #0]
    	break;
 8001d4e:	e041      	b.n	8001dd4 <StartTask02+0x32c>
 8001d50:	20000948 	.word	0x20000948
 8001d54:	200008a8 	.word	0x200008a8
 8001d58:	20000958 	.word	0x20000958
 8001d5c:	2000096d 	.word	0x2000096d
 8001d60:	2000096e 	.word	0x2000096e
 8001d64:	2000096f 	.word	0x2000096f
 8001d68:	20000954 	.word	0x20000954
 8001d6c:	2000096c 	.word	0x2000096c
 8001d70:	20000950 	.word	0x20000950
    case FAIL_STATE:
    	tx_buffer[0] = FAIL_STATE;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <StartTask02+0x348>)
 8001d76:	220e      	movs	r2, #14
 8001d78:	701a      	strb	r2, [r3, #0]
    	tx_buffer[1] = pump;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <StartTask02+0x34c>)
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <StartTask02+0x348>)
 8001d80:	705a      	strb	r2, [r3, #1]
    	tx_buffer[2] = hours;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <StartTask02+0x350>)
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <StartTask02+0x348>)
 8001d88:	709a      	strb	r2, [r3, #2]
    	tx_buffer[3] = minutes;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <StartTask02+0x354>)
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <StartTask02+0x348>)
 8001d90:	70da      	strb	r2, [r3, #3]
    	tx_buffer[4] = seconds;
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <StartTask02+0x358>)
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <StartTask02+0x348>)
 8001d98:	711a      	strb	r2, [r3, #4]
    	tx_buffer[5] = (uint8_t) vacuumScale;	// mTorr
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <StartTask02+0x35c>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da4:	edc7 7a00 	vstr	s15, [r7]
 8001da8:	783b      	ldrb	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <StartTask02+0x348>)
 8001dae:	715a      	strb	r2, [r3, #5]
    	tx_buffer[6] = 25;						// temperature in C
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <StartTask02+0x348>)
 8001db2:	2219      	movs	r2, #25
 8001db4:	719a      	strb	r2, [r3, #6]
    	tx_buffer[7] = (uint8_t) flowRate;		// L/min
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <StartTask02+0x360>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc0:	edc7 7a00 	vstr	s15, [r7]
 8001dc4:	783b      	ldrb	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <StartTask02+0x348>)
 8001dca:	71da      	strb	r2, [r3, #7]
    	tx_buffer_size = 8;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <StartTask02+0x364>)
 8001dce:	2208      	movs	r2, #8
 8001dd0:	701a      	strb	r2, [r3, #0]
    default:
    	break;
 8001dd2:	bf00      	nop

    }
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)tx_buffer, tx_buffer_size);
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <StartTask02+0x364>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4904      	ldr	r1, [pc, #16]	; (8001df0 <StartTask02+0x348>)
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <StartTask02+0x368>)
 8001de0:	f003 fe86 	bl	8005af0 <HAL_UART_Transmit_IT>
    osDelay(1000);
 8001de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de8:	f005 fbde 	bl	80075a8 <osDelay>
    switch(pumpTestsParameters[pump].eNextState){
 8001dec:	e660      	b.n	8001ab0 <StartTask02+0x8>
 8001dee:	bf00      	nop
 8001df0:	20000958 	.word	0x20000958
 8001df4:	20000948 	.word	0x20000948
 8001df8:	2000096d 	.word	0x2000096d
 8001dfc:	2000096e 	.word	0x2000096e
 8001e00:	2000096f 	.word	0x2000096f
 8001e04:	20000954 	.word	0x20000954
 8001e08:	20000950 	.word	0x20000950
 8001e0c:	2000096c 	.word	0x2000096c
 8001e10:	20000310 	.word	0x20000310

08001e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3b      	ldr	r2, [pc, #236]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e26:	f000 fd49 	bl	80028bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == &htim10) { // This a timer period = 1 sec
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a39      	ldr	r2, [pc, #228]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d11f      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x5e>
  		seconds++;
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e3c:	701a      	strb	r2, [r3, #0]
  		if(seconds == 60){
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b3c      	cmp	r3, #60	; 0x3c
 8001e44:	d115      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x5e>
  			seconds = 0;
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  			minutes++;
 8001e4c:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e56:	701a      	strb	r2, [r3, #0]
  			if(minutes == 60){
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b3c      	cmp	r3, #60	; 0x3c
 8001e5e:	d108      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x5e>
  				minutes = 0;
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
  				hours++;
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e70:	701a      	strb	r2, [r3, #0]
  			}
  		}
  	}
  if(htim->Instance == TIM7) { // This is for PWM
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d144      	bne.n	8001f06 <HAL_TIM_PeriodElapsedCallback+0xf2>
	  currPos = toggleCount/2;
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001e86:	801a      	strh	r2, [r3, #0]
	if(steps != currPos || (toggleCount%2) != 0){
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d106      	bne.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d02e      	beq.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0xec>
		if(steps > currPos ){
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d90e      	bls.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0xb8>
			HAL_GPIO_WritePin(dirGroup, dirPin, RESET);
 8001eae:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001eb4:	8811      	ldrh	r1, [r2, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fde7 	bl	8003a8c <HAL_GPIO_WritePin>
			toggleCount++;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	e00d      	b.n	8001ee8 <HAL_TIM_PeriodElapsedCallback+0xd4>
		}
		else {
			HAL_GPIO_WritePin(dirGroup, dirPin, SET);
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001ed2:	8811      	ldrh	r1, [r2, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 fdd8 	bl	8003a8c <HAL_GPIO_WritePin>
			toggleCount--;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ee6:	801a      	strh	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(pulGroup, pulPin);
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001eee:	8812      	ldrh	r2, [r2, #0]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fde3 	bl	8003abe <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim7);
 8001ef8:	4812      	ldr	r0, [pc, #72]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001efa:	f003 f929 	bl	8005150 <HAL_TIM_Base_Start_IT>
	}
	 //HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_5);
  }

  /* USER CODE END Callback 1 */
}
 8001efe:	e002      	b.n	8001f06 <HAL_TIM_PeriodElapsedCallback+0xf2>
		HAL_TIM_Base_Stop_IT(&htim7);
 8001f00:	4810      	ldr	r0, [pc, #64]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001f02:	f003 f99d 	bl	8005240 <HAL_TIM_Base_Stop_IT>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40001000 	.word	0x40001000
 8001f14:	200002c4 	.word	0x200002c4
 8001f18:	2000096f 	.word	0x2000096f
 8001f1c:	2000096e 	.word	0x2000096e
 8001f20:	2000096d 	.word	0x2000096d
 8001f24:	40001400 	.word	0x40001400
 8001f28:	20000214 	.word	0x20000214
 8001f2c:	20000216 	.word	0x20000216
 8001f30:	20000218 	.word	0x20000218
 8001f34:	20000008 	.word	0x20000008
 8001f38:	2000000c 	.word	0x2000000c
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004
 8001f44:	20000278 	.word	0x20000278

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <Error_Handler+0x8>
 8001f52:	0000      	movs	r0, r0
 8001f54:	0000      	movs	r0, r0
	...

08001f58 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f001 fa1d 	bl	80033a8 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 8001f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f72:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f76:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001fa8 <dacSet+0x50>
 8001f7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f7e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001fb0 <dacSet+0x58>
 8001f82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f86:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f8a:	ee17 2a90 	vmov	r2, s15
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <dacSet+0x60>)
 8001f90:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <dacSet+0x60>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f001 fab0 	bl	8003500 <HAL_DAC_SetValue>
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	66666666 	.word	0x66666666
 8001fac:	400a6666 	.word	0x400a6666
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	40affe00 	.word	0x40affe00
 8001fb8:	20000970 	.word	0x20000970
 8001fbc:	00000000 	.word	0x00000000

08001fc0 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fcff 	bl	80029cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 8001fce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fdfc 	bl	8002bd0 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fe84 	bl	8002ce6 <HAL_ADC_GetValue>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <adcGet+0x70>)
 8001fe4:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <adcGet+0x70>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ff2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002034 <adcGet+0x74>
 8001ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ffa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ffe:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8002028 <adcGet+0x68>
 8002002:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002006:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <adcGet+0x78>)
 800200c:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fda9 	bl	8002b68 <HAL_ADC_Stop>
	return adcVolts;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <adcGet+0x78>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	ee07 3a90 	vmov	s15, r3
}
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	66666666 	.word	0x66666666
 800202c:	400a6666 	.word	0x400a6666
 8002030:	20000974 	.word	0x20000974
 8002034:	457ff000 	.word	0x457ff000
 8002038:	20000978 	.word	0x20000978

0800203c <solenoidOpen>:
    // Now you can use buffer as a string
    //HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);

}

void solenoidOpen(){
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 1);	// 3.3 V
	return;
 8002040:	bf00      	nop
}
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <solenoidClose>:
void solenoidClose(){
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 0);	// gnd
	return;
 800204e:	bf00      	nop
}
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_MspInit+0x4c>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_MspInit+0x4c>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_MspInit+0x4c>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_MspInit+0x4c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_MspInit+0x4c>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_MspInit+0x4c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	210f      	movs	r1, #15
 8002092:	f06f 0001 	mvn.w	r0, #1
 8002096:	f001 f93b 	bl	8003310 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a21      	ldr	r2, [pc, #132]	; (800214c <HAL_ADC_MspInit+0xa4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d13b      	bne.n	8002142 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a20      	ldr	r2, [pc, #128]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_ADC_MspInit+0xa8>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002112:	2301      	movs	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002116:	2303      	movs	r3, #3
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <HAL_ADC_MspInit+0xac>)
 8002126:	f001 fb05 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800212a:	2368      	movs	r3, #104	; 0x68
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212e:	2303      	movs	r3, #3
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4806      	ldr	r0, [pc, #24]	; (8002158 <HAL_ADC_MspInit+0xb0>)
 800213e:	f001 faf9 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	; 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40012000 	.word	0x40012000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020800 	.word	0x40020800
 8002158:	40020000 	.word	0x40020000

0800215c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <HAL_DAC_MspInit+0x84>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d12b      	bne.n	80021d6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_DAC_MspInit+0x88>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_DAC_MspInit+0x88>)
 8002184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_DAC_MspInit+0x88>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_DAC_MspInit+0x88>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_DAC_MspInit+0x88>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_DAC_MspInit+0x88>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021ae:	2310      	movs	r3, #16
 80021b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b2:	2303      	movs	r3, #3
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4809      	ldr	r0, [pc, #36]	; (80021e8 <HAL_DAC_MspInit+0x8c>)
 80021c2:	f001 fab7 	bl	8003734 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	210f      	movs	r1, #15
 80021ca:	2036      	movs	r0, #54	; 0x36
 80021cc:	f001 f8a0 	bl	8003310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021d0:	2036      	movs	r0, #54	; 0x36
 80021d2:	f001 f8b9 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	; 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40007400 	.word	0x40007400
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000

080021ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_TIM_Base_MspInit+0x78>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d114      	bne.n	8002228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_TIM_Base_MspInit+0x7c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_TIM_Base_MspInit+0x7c>)
 8002204:	f043 0320 	orr.w	r3, r3, #32
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_TIM_Base_MspInit+0x7c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2105      	movs	r1, #5
 800221a:	2037      	movs	r0, #55	; 0x37
 800221c:	f001 f878 	bl	8003310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002220:	2037      	movs	r0, #55	; 0x37
 8002222:	f001 f891 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002226:	e018      	b.n	800225a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM10)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <HAL_TIM_Base_MspInit+0x80>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d113      	bne.n	800225a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_TIM_Base_MspInit+0x7c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <HAL_TIM_Base_MspInit+0x7c>)
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_TIM_Base_MspInit+0x7c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2105      	movs	r1, #5
 800224e:	2019      	movs	r0, #25
 8002250:	f001 f85e 	bl	8003310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002254:	2019      	movs	r0, #25
 8002256:	f001 f877 	bl	8003348 <HAL_NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40001400 	.word	0x40001400
 8002268:	40023800 	.word	0x40023800
 800226c:	40014400 	.word	0x40014400

08002270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b0ae      	sub	sp, #184	; 0xb8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2290      	movs	r2, #144	; 0x90
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f008 fcbc 	bl	800ac0e <memset>
  if(huart->Instance==USART3)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_UART_MspInit+0xc4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d144      	bne.n	800232a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 face 	bl	8004850 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022ba:	f7ff fe45 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_UART_MspInit+0xc8>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_UART_MspInit+0xc8>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_UART_MspInit+0xc8>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_UART_MspInit+0xc8>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_UART_MspInit+0xc8>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_UART_MspInit+0xc8>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002308:	2307      	movs	r3, #7
 800230a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002312:	4619      	mov	r1, r3
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <HAL_UART_MspInit+0xcc>)
 8002316:	f001 fa0d 	bl	8003734 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2105      	movs	r1, #5
 800231e:	2027      	movs	r0, #39	; 0x27
 8002320:	f000 fff6 	bl	8003310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002324:	2027      	movs	r0, #39	; 0x27
 8002326:	f001 f80f 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	37b8      	adds	r7, #184	; 0xb8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40004800 	.word	0x40004800
 8002338:	40023800 	.word	0x40023800
 800233c:	40020c00 	.word	0x40020c00

08002340 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0ae      	sub	sp, #184	; 0xb8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2290      	movs	r2, #144	; 0x90
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f008 fc54 	bl	800ac0e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800236e:	d159      	bne.n	8002424 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002374:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4618      	mov	r0, r3
 8002382:	f002 fa65 	bl	8004850 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800238c:	f7ff fddc 	bl	8001f48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_PCD_MspInit+0xec>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a25      	ldr	r2, [pc, #148]	; (800242c <HAL_PCD_MspInit+0xec>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_PCD_MspInit+0xec>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80023a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80023ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023c2:	230a      	movs	r3, #10
 80023c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4818      	ldr	r0, [pc, #96]	; (8002430 <HAL_PCD_MspInit+0xf0>)
 80023d0:	f001 f9b0 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80023d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4810      	ldr	r0, [pc, #64]	; (8002430 <HAL_PCD_MspInit+0xf0>)
 80023f0:	f001 f9a0 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_PCD_MspInit+0xec>)
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	4a0c      	ldr	r2, [pc, #48]	; (800242c <HAL_PCD_MspInit+0xec>)
 80023fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_PCD_MspInit+0xec>)
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_PCD_MspInit+0xec>)
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_PCD_MspInit+0xec>)
 8002412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002416:	6453      	str	r3, [r2, #68]	; 0x44
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_PCD_MspInit+0xec>)
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	37b8      	adds	r7, #184	; 0xb8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_InitTick+0xe0>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	4a32      	ldr	r2, [pc, #200]	; (8002514 <HAL_InitTick+0xe0>)
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	6413      	str	r3, [r2, #64]	; 0x40
 8002450:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_InitTick+0xe0>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800245c:	f107 0210 	add.w	r2, r7, #16
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f002 f9c0 	bl	80047ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002476:	f002 f991 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 800247a:	6378      	str	r0, [r7, #52]	; 0x34
 800247c:	e004      	b.n	8002488 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800247e:	f002 f98d 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8002482:	4603      	mov	r3, r0
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	4a23      	ldr	r2, [pc, #140]	; (8002518 <HAL_InitTick+0xe4>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	0c9b      	lsrs	r3, r3, #18
 8002492:	3b01      	subs	r3, #1
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_InitTick+0xe8>)
 8002498:	4a21      	ldr	r2, [pc, #132]	; (8002520 <HAL_InitTick+0xec>)
 800249a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800249c:	4b1f      	ldr	r3, [pc, #124]	; (800251c <HAL_InitTick+0xe8>)
 800249e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_InitTick+0xe8>)
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <HAL_InitTick+0xe8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_InitTick+0xe8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_InitTick+0xe8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024bc:	4817      	ldr	r0, [pc, #92]	; (800251c <HAL_InitTick+0xe8>)
 80024be:	f002 fdef 	bl	80050a0 <HAL_TIM_Base_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11b      	bne.n	8002508 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024d0:	4812      	ldr	r0, [pc, #72]	; (800251c <HAL_InitTick+0xe8>)
 80024d2:	f002 fe3d 	bl	8005150 <HAL_TIM_Base_Start_IT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024e4:	2036      	movs	r0, #54	; 0x36
 80024e6:	f000 ff2f 	bl	8003348 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d808      	bhi.n	8002502 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	2036      	movs	r0, #54	; 0x36
 80024f6:	f000 ff0b 	bl	8003310 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <HAL_InitTick+0xf0>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e002      	b.n	8002508 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800250c:	4618      	mov	r0, r3
 800250e:	3738      	adds	r7, #56	; 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	431bde83 	.word	0x431bde83
 800251c:	2000097c 	.word	0x2000097c
 8002520:	40001000 	.word	0x40001000
 8002524:	20000020 	.word	0x20000020

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800252c:	e7fe      	b.n	800252c <NMI_Handler+0x4>

0800252e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <HardFault_Handler+0x4>

08002534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <MemManage_Handler+0x4>

0800253a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <UsageFault_Handler+0x4>

08002546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800255a:	f002 fea0 	bl	800529e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200002c4 	.word	0x200002c4

08002568 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <USART3_IRQHandler+0x10>)
 800256e:	f003 fb1d 	bl	8005bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000310 	.word	0x20000310

0800257c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <TIM6_DAC_IRQHandler+0x20>)
 8002582:	791b      	ldrb	r3, [r3, #4]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800258a:	4804      	ldr	r0, [pc, #16]	; (800259c <TIM6_DAC_IRQHandler+0x20>)
 800258c:	f000 ff5e 	bl	800344c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002590:	4803      	ldr	r0, [pc, #12]	; (80025a0 <TIM6_DAC_IRQHandler+0x24>)
 8002592:	f002 fe84 	bl	800529e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000264 	.word	0x20000264
 80025a0:	2000097c 	.word	0x2000097c

080025a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <TIM7_IRQHandler+0x10>)
 80025aa:	f002 fe78 	bl	800529e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000278 	.word	0x20000278

080025b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return 1;
 80025bc:	2301      	movs	r3, #1
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_kill>:

int _kill(int pid, int sig)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025d2:	f008 fbc5 	bl	800ad60 <__errno>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2216      	movs	r2, #22
 80025da:	601a      	str	r2, [r3, #0]
  return -1;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_exit>:

void _exit (int status)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ffe7 	bl	80025c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025fa:	e7fe      	b.n	80025fa <_exit+0x12>

080025fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	e00a      	b.n	8002624 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800260e:	f3af 8000 	nop.w
 8002612:	4601      	mov	r1, r0
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	60ba      	str	r2, [r7, #8]
 800261a:	b2ca      	uxtb	r2, r1
 800261c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	dbf0      	blt.n	800260e <_read+0x12>
  }

  return len;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e009      	b.n	800265c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	60ba      	str	r2, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3301      	adds	r3, #1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	dbf1      	blt.n	8002648 <_write+0x12>
  }
  return len;
 8002664:	687b      	ldr	r3, [r7, #4]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_close>:

int _close(int file)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002696:	605a      	str	r2, [r3, #4]
  return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <_isatty>:

int _isatty(int file)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <_sbrk+0x5c>)
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <_sbrk+0x60>)
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <_sbrk+0x64>)
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <_sbrk+0x68>)
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <_sbrk+0x64>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	429a      	cmp	r2, r3
 8002706:	d207      	bcs.n	8002718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002708:	f008 fb2a 	bl	800ad60 <__errno>
 800270c:	4603      	mov	r3, r0
 800270e:	220c      	movs	r2, #12
 8002710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
 8002716:	e009      	b.n	800272c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <_sbrk+0x64>)
 8002728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800272a:	68fb      	ldr	r3, [r7, #12]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20080000 	.word	0x20080000
 8002738:	00000400 	.word	0x00000400
 800273c:	200009c8 	.word	0x200009c8
 8002740:	20005500 	.word	0x20005500

08002744 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <SystemInit+0x20>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <SystemInit+0x20>)
 8002750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_10;
 800277e:	230a      	movs	r3, #10
 8002780:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002782:	2301      	movs	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002786:	2301      	movs	r3, #1
 8002788:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fab5 	bl	8002d00 <HAL_ADC_ConfigChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 800279c:	f7ff fbd4 	bl	8001f48 <Error_Handler>
	}
	return;
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
}
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	0000      	movs	r0, r0
 80027ac:	0000      	movs	r0, r0
	...

080027b0 <readVacuum>:

float readVacuum(float voltage){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	ed2d 8b02 	vpush	{d8}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	ed87 0a01 	vstr	s0, [r7, #4]

	float exponent = (voltage * 3.13 - referenceVoltage)/scalingFactor;
 80027be:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027c6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002838 <readVacuum+0x88>
 80027ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <readVacuum+0x90>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027d8:	ee36 5b47 	vsub.f64	d5, d6, d7
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <readVacuum+0x94>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80027e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80027ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027ee:	edc7 7a03 	vstr	s15, [r7, #12]
	pressure = referencePressure * pow(10, exponent);
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <readVacuum+0x98>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80027fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002804:	eeb0 1b47 	vmov.f64	d1, d7
 8002808:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 800280c:	f00a f954 	bl	800cab8 <pow>
 8002810:	eeb0 7b40 	vmov.f64	d7, d0
 8002814:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002818:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <readVacuum+0x9c>)
 800281e:	edc3 7a00 	vstr	s15, [r3]

	return pressure;
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <readVacuum+0x9c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	ee07 3a90 	vmov	s15, r3
}
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	ecbd 8b02 	vpop	{d8}
 8002836:	bd80      	pop	{r7, pc}
 8002838:	70a3d70a 	.word	0x70a3d70a
 800283c:	40090a3d 	.word	0x40090a3d
 8002840:	20000018 	.word	0x20000018
 8002844:	2000001c 	.word	0x2000001c
 8002848:	20000014 	.word	0x20000014
 800284c:	200009cc 	.word	0x200009cc

08002850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002854:	480d      	ldr	r0, [pc, #52]	; (800288c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002856:	490e      	ldr	r1, [pc, #56]	; (8002890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800285c:	e002      	b.n	8002864 <LoopCopyDataInit>

0800285e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002862:	3304      	adds	r3, #4

08002864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002868:	d3f9      	bcc.n	800285e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800286c:	4c0b      	ldr	r4, [pc, #44]	; (800289c <LoopFillZerobss+0x26>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002870:	e001      	b.n	8002876 <LoopFillZerobss>

08002872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002874:	3204      	adds	r2, #4

08002876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002878:	d3fb      	bcc.n	8002872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800287a:	f7ff ff63 	bl	8002744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800287e:	f008 fa75 	bl	800ad6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002882:	f7fd ff65 	bl	8000750 <main>
  bx  lr    
 8002886:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002888:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002890:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002894:	0800ed20 	.word	0x0800ed20
  ldr r2, =_sbss
 8002898:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800289c:	20005500 	.word	0x20005500

080028a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a0:	e7fe      	b.n	80028a0 <ADC_IRQHandler>

080028a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a6:	2003      	movs	r0, #3
 80028a8:	f000 fd27 	bl	80032fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ac:	200f      	movs	r0, #15
 80028ae:	f7ff fdc1 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b2:	f7ff fbd1 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_IncTick+0x20>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_IncTick+0x24>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_IncTick+0x24>)
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000024 	.word	0x20000024
 80028e0:	200009d0 	.word	0x200009d0

080028e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return uwTick;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_GetTick+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	200009d0 	.word	0x200009d0

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff ffee 	bl	80028e4 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_Delay+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffde 	bl	80028e4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000024 	.word	0x20000024

08002944 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e031      	b.n	80029be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fba0 	bl	80020a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_ADC_Init+0x84>)
 8002988:	4013      	ands	r3, r2
 800298a:	f043 0202 	orr.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fb0a 	bl	8002fac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
 80029ae:	e001      	b.n	80029b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	ffffeefd 	.word	0xffffeefd

080029cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_Start+0x1a>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e0ad      	b.n	8002b42 <HAL_ADC_Start+0x176>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d018      	beq.n	8002a2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_ADC_Start+0x184>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a50      	ldr	r2, [pc, #320]	; (8002b54 <HAL_ADC_Start+0x188>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	0c9a      	lsrs	r2, r3, #18
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a20:	e002      	b.n	8002a28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f9      	bne.n	8002a22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d175      	bne.n	8002b28 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a40:	4b45      	ldr	r3, [pc, #276]	; (8002b58 <HAL_ADC_Start+0x18c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a76:	d106      	bne.n	8002a86 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f023 0206 	bic.w	r2, r3, #6
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
 8002a84:	e002      	b.n	8002a8c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a9e:	4b2f      	ldr	r3, [pc, #188]	; (8002b5c <HAL_ADC_Start+0x190>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d143      	bne.n	8002b40 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	e03a      	b.n	8002b40 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <HAL_ADC_Start+0x194>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d10e      	bne.n	8002af2 <HAL_ADC_Start+0x126>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002af0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_ADC_Start+0x190>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d120      	bne.n	8002b40 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_ADC_Start+0x198>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d11b      	bne.n	8002b40 <HAL_ADC_Start+0x174>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d114      	bne.n	8002b40 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	e00b      	b.n	8002b40 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 0210 	orr.w	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000010 	.word	0x20000010
 8002b54:	431bde83 	.word	0x431bde83
 8002b58:	fffff8fe 	.word	0xfffff8fe
 8002b5c:	40012300 	.word	0x40012300
 8002b60:	40012000 	.word	0x40012000
 8002b64:	40012200 	.word	0x40012200

08002b68 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Stop+0x16>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e01f      	b.n	8002bbe <HAL_ADC_Stop+0x56>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_ADC_Stop+0x64>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	ffffeefe 	.word	0xffffeefe

08002bd0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d113      	bne.n	8002c16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfc:	d10b      	bne.n	8002c16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e063      	b.n	8002cde <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c16:	f7ff fe65 	bl	80028e4 <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c1c:	e021      	b.n	8002c62 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d01d      	beq.n	8002c62 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_ADC_PollForConversion+0x6c>
 8002c2c:	f7ff fe5a 	bl	80028e4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d212      	bcs.n	8002c62 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d00b      	beq.n	8002c62 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0204 	orr.w	r2, r3, #4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e03d      	b.n	8002cde <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d1d6      	bne.n	8002c1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0212 	mvn.w	r2, #18
 8002c78:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d123      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11f      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d006      	beq.n	8002cb8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1c>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e136      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x28a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b09      	cmp	r3, #9
 8002d2a:	d93a      	bls.n	8002da2 <HAL_ADC_ConfigChannel+0xa2>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d34:	d035      	beq.n	8002da2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68d9      	ldr	r1, [r3, #12]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b1e      	subs	r3, #30
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	400a      	ands	r2, r1
 8002d5a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a8d      	ldr	r2, [pc, #564]	; (8002f98 <HAL_ADC_ConfigChannel+0x298>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10a      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68d9      	ldr	r1, [r3, #12]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	061a      	lsls	r2, r3, #24
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d7a:	e035      	b.n	8002de8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68d9      	ldr	r1, [r3, #12]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4403      	add	r3, r0
 8002d94:	3b1e      	subs	r3, #30
 8002d96:	409a      	lsls	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da0:	e022      	b.n	8002de8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6919      	ldr	r1, [r3, #16]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	2207      	movs	r2, #7
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6919      	ldr	r1, [r3, #16]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4603      	mov	r3, r0
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4403      	add	r3, r0
 8002dde:	409a      	lsls	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b06      	cmp	r3, #6
 8002dee:	d824      	bhi.n	8002e3a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b05      	subs	r3, #5
 8002e02:	221f      	movs	r2, #31
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	400a      	ands	r2, r1
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b05      	subs	r3, #5
 8002e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	635a      	str	r2, [r3, #52]	; 0x34
 8002e38:	e04c      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d824      	bhi.n	8002e8c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3b23      	subs	r3, #35	; 0x23
 8002e54:	221f      	movs	r2, #31
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	400a      	ands	r2, r1
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	4618      	mov	r0, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b23      	subs	r3, #35	; 0x23
 8002e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8a:	e023      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b41      	subs	r3, #65	; 0x41
 8002e9e:	221f      	movs	r2, #31
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	400a      	ands	r2, r1
 8002eac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b41      	subs	r3, #65	; 0x41
 8002ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <HAL_ADC_ConfigChannel+0x29c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10a      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1f4>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ee6:	d105      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ef2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a28      	ldr	r2, [pc, #160]	; (8002f9c <HAL_ADC_ConfigChannel+0x29c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10f      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x21e>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b12      	cmp	r3, #18
 8002f04:	d10b      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f10:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f12:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f1c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <HAL_ADC_ConfigChannel+0x29c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d12b      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x280>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_ADC_ConfigChannel+0x298>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x23a>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b11      	cmp	r3, #17
 8002f38:	d122      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f44:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f50:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <HAL_ADC_ConfigChannel+0x298>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d111      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0c9a      	lsrs	r2, r3, #18
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f72:	e002      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f9      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	10000012 	.word	0x10000012
 8002f9c:	40012000 	.word	0x40012000
 8002fa0:	40012300 	.word	0x40012300
 8002fa4:	20000010 	.word	0x20000010
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fb4:	4b78      	ldr	r3, [pc, #480]	; (8003198 <ADC_Init+0x1ec>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a77      	ldr	r2, [pc, #476]	; (8003198 <ADC_Init+0x1ec>)
 8002fba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fbe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fc0:	4b75      	ldr	r3, [pc, #468]	; (8003198 <ADC_Init+0x1ec>)
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4973      	ldr	r1, [pc, #460]	; (8003198 <ADC_Init+0x1ec>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	021a      	lsls	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003022:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	4a58      	ldr	r2, [pc, #352]	; (800319c <ADC_Init+0x1f0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800304e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	e00f      	b.n	80030a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0202 	bic.w	r2, r2, #2
 80030b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	3b01      	subs	r3, #1
 8003100:	035a      	lsls	r2, r3, #13
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	e007      	b.n	800311c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	3b01      	subs	r3, #1
 8003138:	051a      	lsls	r2, r3, #20
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800315e:	025a      	lsls	r2, r3, #9
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	029a      	lsls	r2, r3, #10
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40012300 	.word	0x40012300
 800319c:	0f000001 	.word	0x0f000001

080031a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <__NVIC_SetPriorityGrouping+0x40>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <__NVIC_SetPriorityGrouping+0x40>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00
 80031e4:	05fa0000 	.word	0x05fa0000

080031e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <__NVIC_EnableIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	; (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff4c 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003322:	f7ff ff61 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 8003326:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	6978      	ldr	r0, [r7, #20]
 800332e:	f7ff ffb1 	bl	8003294 <NVIC_EncodePriority>
 8003332:	4602      	mov	r2, r0
 8003334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff80 	bl	8003240 <__NVIC_SetPriority>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff54 	bl	8003204 <__NVIC_EnableIRQ>
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e014      	b.n	80033a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	791b      	ldrb	r3, [r3, #4]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fe fee8 	bl	800215c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	795b      	ldrb	r3, [r3, #5]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_DAC_Start+0x16>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e040      	b.n	8003440 <HAL_DAC_Start+0x98>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2201      	movs	r2, #1
 80033d8:	409a      	lsls	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80033f2:	2b3c      	cmp	r3, #60	; 0x3c
 80033f4:	d11d      	bne.n	8003432 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	e014      	b.n	8003432 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	213c      	movs	r1, #60	; 0x3c
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	429a      	cmp	r2, r3
 8003420:	d107      	bne.n	8003432 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0202 	orr.w	r2, r2, #2
 8003430:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003462:	d120      	bne.n	80034a6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003472:	d118      	bne.n	80034a6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2204      	movs	r2, #4
 8003478:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800348e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800349e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f852 	bl	800354a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b4:	d120      	bne.n	80034f8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c4:	d118      	bne.n	80034f8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f043 0202 	orr.w	r2, r3, #2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80034f0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f882 	bl	80035fc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d105      	bne.n	800352a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4413      	add	r3, r2
 8003524:	3308      	adds	r3, #8
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e004      	b.n	8003534 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	3314      	adds	r3, #20
 8003532:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	461a      	mov	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800355e:	b480      	push	{r7}
 8003560:	b087      	sub	sp, #28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	795b      	ldrb	r3, [r3, #5]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_DAC_ConfigChannel+0x18>
 8003572:	2302      	movs	r3, #2
 8003574:	e03c      	b.n	80035f0 <HAL_DAC_ConfigChannel+0x92>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2202      	movs	r2, #2
 8003580:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4013      	ands	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	22c0      	movs	r2, #192	; 0xc0
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43da      	mvns	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	400a      	ands	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800361e:	f7ff f961 	bl	80028e4 <HAL_GetTick>
 8003622:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d008      	beq.n	8003642 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e052      	b.n	80036e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0216 	bic.w	r2, r2, #22
 8003650:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003660:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_DMA_Abort+0x62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0208 	bic.w	r2, r2, #8
 8003680:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003692:	e013      	b.n	80036bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003694:	f7ff f926 	bl	80028e4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d90c      	bls.n	80036bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2203      	movs	r2, #3
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e015      	b.n	80036e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e4      	bne.n	8003694 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	223f      	movs	r2, #63	; 0x3f
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d004      	beq.n	800370e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e00c      	b.n	8003728 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2205      	movs	r2, #5
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e175      	b.n	8003a40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003754:	2201      	movs	r2, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	f040 8164 	bne.w	8003a3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d005      	beq.n	800378a <HAL_GPIO_Init+0x56>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d130      	bne.n	80037ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	2203      	movs	r2, #3
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c0:	2201      	movs	r2, #1
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0201 	and.w	r2, r3, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d017      	beq.n	8003828 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d123      	bne.n	800387c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	220f      	movs	r2, #15
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	08da      	lsrs	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3208      	adds	r2, #8
 8003876:	69b9      	ldr	r1, [r7, #24]
 8003878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0203 	and.w	r2, r3, #3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80be 	beq.w	8003a3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038be:	4b66      	ldr	r3, [pc, #408]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a65      	ldr	r2, [pc, #404]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038d6:	4a61      	ldr	r2, [pc, #388]	; (8003a5c <HAL_GPIO_Init+0x328>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_GPIO_Init+0x32c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d037      	beq.n	8003972 <HAL_GPIO_Init+0x23e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a57      	ldr	r2, [pc, #348]	; (8003a64 <HAL_GPIO_Init+0x330>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d031      	beq.n	800396e <HAL_GPIO_Init+0x23a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a56      	ldr	r2, [pc, #344]	; (8003a68 <HAL_GPIO_Init+0x334>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02b      	beq.n	800396a <HAL_GPIO_Init+0x236>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a55      	ldr	r2, [pc, #340]	; (8003a6c <HAL_GPIO_Init+0x338>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d025      	beq.n	8003966 <HAL_GPIO_Init+0x232>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a54      	ldr	r2, [pc, #336]	; (8003a70 <HAL_GPIO_Init+0x33c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01f      	beq.n	8003962 <HAL_GPIO_Init+0x22e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a53      	ldr	r2, [pc, #332]	; (8003a74 <HAL_GPIO_Init+0x340>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d019      	beq.n	800395e <HAL_GPIO_Init+0x22a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_GPIO_Init+0x344>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0x226>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a51      	ldr	r2, [pc, #324]	; (8003a7c <HAL_GPIO_Init+0x348>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00d      	beq.n	8003956 <HAL_GPIO_Init+0x222>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a50      	ldr	r2, [pc, #320]	; (8003a80 <HAL_GPIO_Init+0x34c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <HAL_GPIO_Init+0x21e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4f      	ldr	r2, [pc, #316]	; (8003a84 <HAL_GPIO_Init+0x350>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_GPIO_Init+0x21a>
 800394a:	2309      	movs	r3, #9
 800394c:	e012      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800394e:	230a      	movs	r3, #10
 8003950:	e010      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003952:	2308      	movs	r3, #8
 8003954:	e00e      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003956:	2307      	movs	r3, #7
 8003958:	e00c      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800395a:	2306      	movs	r3, #6
 800395c:	e00a      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800395e:	2305      	movs	r3, #5
 8003960:	e008      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003962:	2304      	movs	r3, #4
 8003964:	e006      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003966:	2303      	movs	r3, #3
 8003968:	e004      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800396a:	2302      	movs	r3, #2
 800396c:	e002      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003972:	2300      	movs	r3, #0
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	f002 0203 	and.w	r2, r2, #3
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	4093      	lsls	r3, r2
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003984:	4935      	ldr	r1, [pc, #212]	; (8003a5c <HAL_GPIO_Init+0x328>)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b6:	4a34      	ldr	r2, [pc, #208]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e0:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	f67f ae86 	bls.w	8003754 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020400 	.word	0x40020400
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020c00 	.word	0x40020c00
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40021400 	.word	0x40021400
 8003a78:	40021800 	.word	0x40021800
 8003a7c:	40021c00 	.word	0x40021c00
 8003a80:	40022000 	.word	0x40022000
 8003a84:	40022400 	.word	0x40022400
 8003a88:	40013c00 	.word	0x40013c00

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	041a      	lsls	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	400b      	ands	r3, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	619a      	str	r2, [r3, #24]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af4:	b08f      	sub	sp, #60	; 0x3c
 8003af6:	af0a      	add	r7, sp, #40	; 0x28
 8003af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e116      	b.n	8003d32 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe fc0e 	bl	8002340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2203      	movs	r2, #3
 8003b28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 f914 	bl	8006d70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	687e      	ldr	r6, [r7, #4]
 8003b50:	466d      	mov	r5, sp
 8003b52:	f106 0410 	add.w	r4, r6, #16
 8003b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b66:	1d33      	adds	r3, r6, #4
 8003b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b6a:	6838      	ldr	r0, [r7, #0]
 8003b6c:	f003 f8a8 	bl	8006cc0 <USB_CoreInit>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0d7      	b.n	8003d32 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f003 f902 	bl	8006d92 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e04a      	b.n	8003c2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	333d      	adds	r3, #61	; 0x3d
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	333c      	adds	r3, #60	; 0x3c
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	b298      	uxth	r0, r3
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3344      	adds	r3, #68	; 0x44
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3340      	adds	r3, #64	; 0x40
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3348      	adds	r3, #72	; 0x48
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	334c      	adds	r3, #76	; 0x4c
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3354      	adds	r3, #84	; 0x54
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	3301      	adds	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3af      	bcc.n	8003b94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	e044      	b.n	8003cc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c92:	7bfa      	ldrb	r2, [r7, #15]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d3b5      	bcc.n	8003c3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	687e      	ldr	r6, [r7, #4]
 8003cd6:	466d      	mov	r5, sp
 8003cd8:	f106 0410 	add.w	r4, r6, #16
 8003cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cec:	1d33      	adds	r3, r6, #4
 8003cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f003 f89b 	bl	8006e2c <USB_DevInit>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e014      	b.n	8003d32 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f80b 	bl	8003d3c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f003 fa59 	bl	80071e2 <USB_DevDisconnect>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	10000003 	.word	0x10000003

08003d84 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40007000 	.word	0x40007000

08003da4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b23      	ldr	r3, [pc, #140]	; (8003e3c <HAL_PWREx_EnableOverDrive+0x98>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a22      	ldr	r2, [pc, #136]	; (8003e3c <HAL_PWREx_EnableOverDrive+0x98>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dba:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_PWREx_EnableOverDrive+0x98>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd2:	f7fe fd87 	bl	80028e4 <HAL_GetTick>
 8003dd6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dd8:	e009      	b.n	8003dee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dda:	f7fe fd83 	bl	80028e4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de8:	d901      	bls.n	8003dee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e022      	b.n	8003e34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dee:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfa:	d1ee      	bne.n	8003dda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e08:	f7fe fd6c 	bl	80028e4 <HAL_GetTick>
 8003e0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e0e:	e009      	b.n	8003e24 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e10:	f7fe fd68 	bl	80028e4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e1e:	d901      	bls.n	8003e24 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e007      	b.n	8003e34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e30:	d1ee      	bne.n	8003e10 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000

08003e44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e29b      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8087 	beq.w	8003f76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e68:	4b96      	ldr	r3, [pc, #600]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d00c      	beq.n	8003e8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e74:	4b93      	ldr	r3, [pc, #588]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d112      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x62>
 8003e80:	4b90      	ldr	r3, [pc, #576]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e8c:	d10b      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8e:	4b8d      	ldr	r3, [pc, #564]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d06c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x130>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d168      	bne.n	8003f74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e275      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d106      	bne.n	8003ebe <HAL_RCC_OscConfig+0x7a>
 8003eb0:	4b84      	ldr	r3, [pc, #528]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a83      	ldr	r2, [pc, #524]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	e02e      	b.n	8003f1c <HAL_RCC_OscConfig+0xd8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x9c>
 8003ec6:	4b7f      	ldr	r3, [pc, #508]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a7e      	ldr	r2, [pc, #504]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	4b7c      	ldr	r3, [pc, #496]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7b      	ldr	r2, [pc, #492]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e01d      	b.n	8003f1c <HAL_RCC_OscConfig+0xd8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0xc0>
 8003eea:	4b76      	ldr	r3, [pc, #472]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a75      	ldr	r2, [pc, #468]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b73      	ldr	r3, [pc, #460]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a72      	ldr	r2, [pc, #456]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_OscConfig+0xd8>
 8003f04:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a6e      	ldr	r2, [pc, #440]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b6c      	ldr	r3, [pc, #432]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a6b      	ldr	r2, [pc, #428]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d013      	beq.n	8003f4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fe fcde 	bl	80028e4 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fe fcda 	bl	80028e4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e229      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b61      	ldr	r3, [pc, #388]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0xe8>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fe fcca 	bl	80028e4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fe fcc6 	bl	80028e4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e215      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	4b57      	ldr	r3, [pc, #348]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x110>
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d069      	beq.n	8004056 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f82:	4b50      	ldr	r3, [pc, #320]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8e:	4b4d      	ldr	r3, [pc, #308]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d11c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x190>
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d116      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa6:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_RCC_OscConfig+0x17a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e1e9      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbe:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	493d      	ldr	r1, [pc, #244]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	e040      	b.n	8004056 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d023      	beq.n	8004024 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fdc:	4b39      	ldr	r3, [pc, #228]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a38      	ldr	r2, [pc, #224]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fc7c 	bl	80028e4 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fe fc78 	bl	80028e4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1c7      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400e:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4929      	ldr	r1, [pc, #164]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 800401e:	4313      	orrs	r3, r2
 8004020:	600b      	str	r3, [r1, #0]
 8004022:	e018      	b.n	8004056 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004024:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fe fc58 	bl	80028e4 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004038:	f7fe fc54 	bl	80028e4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e1a3      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d038      	beq.n	80040d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d019      	beq.n	800409e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800406a:	4b16      	ldr	r3, [pc, #88]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fe fc35 	bl	80028e4 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fe fc31 	bl	80028e4 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e180      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 8004092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x23a>
 800409c:	e01a      	b.n	80040d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 80040a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a2:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <HAL_RCC_OscConfig+0x280>)
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fe fc1b 	bl	80028e4 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fe fc17 	bl	80028e4 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d903      	bls.n	80040c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e166      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
 80040c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c8:	4b92      	ldr	r3, [pc, #584]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1ee      	bne.n	80040b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80a4 	beq.w	800422a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e2:	4b8c      	ldr	r3, [pc, #560]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10d      	bne.n	800410a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	4b89      	ldr	r3, [pc, #548]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a88      	ldr	r2, [pc, #544]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b86      	ldr	r3, [pc, #536]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410a:	4b83      	ldr	r3, [pc, #524]	; (8004318 <HAL_RCC_OscConfig+0x4d4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d118      	bne.n	8004148 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004116:	4b80      	ldr	r3, [pc, #512]	; (8004318 <HAL_RCC_OscConfig+0x4d4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7f      	ldr	r2, [pc, #508]	; (8004318 <HAL_RCC_OscConfig+0x4d4>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004122:	f7fe fbdf 	bl	80028e4 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412a:	f7fe fbdb 	bl	80028e4 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b64      	cmp	r3, #100	; 0x64
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e12a      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413c:	4b76      	ldr	r3, [pc, #472]	; (8004318 <HAL_RCC_OscConfig+0x4d4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x31a>
 8004150:	4b70      	ldr	r3, [pc, #448]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a6f      	ldr	r2, [pc, #444]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
 800415c:	e02d      	b.n	80041ba <HAL_RCC_OscConfig+0x376>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0x33c>
 8004166:	4b6b      	ldr	r3, [pc, #428]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a6a      	ldr	r2, [pc, #424]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
 8004172:	4b68      	ldr	r3, [pc, #416]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	4a67      	ldr	r2, [pc, #412]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004178:	f023 0304 	bic.w	r3, r3, #4
 800417c:	6713      	str	r3, [r2, #112]	; 0x70
 800417e:	e01c      	b.n	80041ba <HAL_RCC_OscConfig+0x376>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b05      	cmp	r3, #5
 8004186:	d10c      	bne.n	80041a2 <HAL_RCC_OscConfig+0x35e>
 8004188:	4b62      	ldr	r3, [pc, #392]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	4a61      	ldr	r2, [pc, #388]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 800418e:	f043 0304 	orr.w	r3, r3, #4
 8004192:	6713      	str	r3, [r2, #112]	; 0x70
 8004194:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	4a5e      	ldr	r2, [pc, #376]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	6713      	str	r3, [r2, #112]	; 0x70
 80041a0:	e00b      	b.n	80041ba <HAL_RCC_OscConfig+0x376>
 80041a2:	4b5c      	ldr	r3, [pc, #368]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a5b      	ldr	r2, [pc, #364]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
 80041ae:	4b59      	ldr	r3, [pc, #356]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	4a58      	ldr	r2, [pc, #352]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d015      	beq.n	80041ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7fe fb8f 	bl	80028e4 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fe fb8b 	bl	80028e4 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e0d8      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e0:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ee      	beq.n	80041ca <HAL_RCC_OscConfig+0x386>
 80041ec:	e014      	b.n	8004218 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe fb79 	bl	80028e4 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fe fb75 	bl	80028e4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	; 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e0c2      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420c:	4b41      	ldr	r3, [pc, #260]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ee      	bne.n	80041f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421e:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004228:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80ae 	beq.w	8004390 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004234:	4b37      	ldr	r3, [pc, #220]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d06d      	beq.n	800431c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d14b      	bne.n	80042e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004248:	4b32      	ldr	r3, [pc, #200]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a31      	ldr	r2, [pc, #196]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe fb46 	bl	80028e4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fe fb42 	bl	80028e4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e091      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	3b01      	subs	r3, #1
 8004294:	041b      	lsls	r3, r3, #16
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	071b      	lsls	r3, r3, #28
 80042a6:	491b      	ldr	r1, [pc, #108]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a18      	ldr	r2, [pc, #96]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80042b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fe fb14 	bl	80028e4 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fe fb10 	bl	80028e4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e05f      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x47c>
 80042de:	e057      	b.n	8004390 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0b      	ldr	r2, [pc, #44]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fe fafa 	bl	80028e4 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fe faf6 	bl	80028e4 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e045      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	4b03      	ldr	r3, [pc, #12]	; (8004314 <HAL_RCC_OscConfig+0x4d0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4b0>
 8004312:	e03d      	b.n	8004390 <HAL_RCC_OscConfig+0x54c>
 8004314:	40023800 	.word	0x40023800
 8004318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800431c:	4b1f      	ldr	r3, [pc, #124]	; (800439c <HAL_RCC_OscConfig+0x558>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d030      	beq.n	800438c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d129      	bne.n	800438c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d122      	bne.n	800438c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004352:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004354:	4293      	cmp	r3, r2
 8004356:	d119      	bne.n	800438c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d10f      	bne.n	800438c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0d0      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b8:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d910      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b67      	ldr	r3, [pc, #412]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 020f 	bic.w	r2, r3, #15
 80043ce:	4965      	ldr	r1, [pc, #404]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0b8      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004400:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a58      	ldr	r2, [pc, #352]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800440a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a52      	ldr	r2, [pc, #328]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800441e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004422:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	494d      	ldr	r1, [pc, #308]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d040      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d115      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004462:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e073      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06b      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004482:	4b39      	ldr	r3, [pc, #228]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f023 0203 	bic.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4936      	ldr	r1, [pc, #216]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004494:	f7fe fa26 	bl	80028e4 <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449c:	f7fe fa22 	bl	80028e4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e053      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 020c 	and.w	r2, r3, #12
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d1eb      	bne.n	800449c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d210      	bcs.n	80044f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 020f 	bic.w	r2, r3, #15
 80044da:	4922      	ldr	r1, [pc, #136]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4916      	ldr	r1, [pc, #88]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	490e      	ldr	r1, [pc, #56]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004532:	f000 f821 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8004536:	4602      	mov	r2, r0
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	490a      	ldr	r1, [pc, #40]	; (800456c <HAL_RCC_ClockConfig+0x1cc>)
 8004544:	5ccb      	ldrb	r3, [r1, r3]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1d0>)
 800454c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1d4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd ff6e 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023c00 	.word	0x40023c00
 8004568:	40023800 	.word	0x40023800
 800456c:	0800d0cc 	.word	0x0800d0cc
 8004570:	20000010 	.word	0x20000010
 8004574:	20000020 	.word	0x20000020

08004578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b094      	sub	sp, #80	; 0x50
 800457e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	647b      	str	r3, [r7, #68]	; 0x44
 8004584:	2300      	movs	r3, #0
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004588:	2300      	movs	r3, #0
 800458a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004590:	4b79      	ldr	r3, [pc, #484]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d00d      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x40>
 800459c:	2b08      	cmp	r3, #8
 800459e:	f200 80e1 	bhi.w	8004764 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x34>
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045aa:	e0db      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b73      	ldr	r3, [pc, #460]	; (800477c <HAL_RCC_GetSysClockFreq+0x204>)
 80045ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045b0:	e0db      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045b2:	4b73      	ldr	r3, [pc, #460]	; (8004780 <HAL_RCC_GetSysClockFreq+0x208>)
 80045b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045b6:	e0d8      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b8:	4b6f      	ldr	r3, [pc, #444]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045c2:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d063      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ce:	4b6a      	ldr	r3, [pc, #424]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	2200      	movs	r2, #0
 80045d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30
 80045e2:	2300      	movs	r3, #0
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	f04f 0000 	mov.w	r0, #0
 80045f2:	f04f 0100 	mov.w	r1, #0
 80045f6:	0159      	lsls	r1, r3, #5
 80045f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045fc:	0150      	lsls	r0, r2, #5
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4621      	mov	r1, r4
 8004604:	1a51      	subs	r1, r2, r1
 8004606:	6139      	str	r1, [r7, #16]
 8004608:	4629      	mov	r1, r5
 800460a:	eb63 0301 	sbc.w	r3, r3, r1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800461c:	4659      	mov	r1, fp
 800461e:	018b      	lsls	r3, r1, #6
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004626:	4651      	mov	r1, sl
 8004628:	018a      	lsls	r2, r1, #6
 800462a:	4651      	mov	r1, sl
 800462c:	ebb2 0801 	subs.w	r8, r2, r1
 8004630:	4659      	mov	r1, fp
 8004632:	eb63 0901 	sbc.w	r9, r3, r1
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800464a:	4690      	mov	r8, r2
 800464c:	4699      	mov	r9, r3
 800464e:	4623      	mov	r3, r4
 8004650:	eb18 0303 	adds.w	r3, r8, r3
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	462b      	mov	r3, r5
 8004658:	eb49 0303 	adc.w	r3, r9, r3
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800466a:	4629      	mov	r1, r5
 800466c:	024b      	lsls	r3, r1, #9
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004674:	4621      	mov	r1, r4
 8004676:	024a      	lsls	r2, r1, #9
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467e:	2200      	movs	r2, #0
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
 8004682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004688:	f7fb fe32 	bl	80002f0 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004694:	e058      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	2200      	movs	r2, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	4611      	mov	r1, r2
 80046a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	2300      	movs	r3, #0
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
 80046ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	f04f 0000 	mov.w	r0, #0
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	0159      	lsls	r1, r3, #5
 80046be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c2:	0150      	lsls	r0, r2, #5
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4641      	mov	r1, r8
 80046ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ce:	4649      	mov	r1, r9
 80046d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046e8:	ebb2 040a 	subs.w	r4, r2, sl
 80046ec:	eb63 050b 	sbc.w	r5, r3, fp
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	00eb      	lsls	r3, r5, #3
 80046fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fe:	00e2      	lsls	r2, r4, #3
 8004700:	4614      	mov	r4, r2
 8004702:	461d      	mov	r5, r3
 8004704:	4643      	mov	r3, r8
 8004706:	18e3      	adds	r3, r4, r3
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	464b      	mov	r3, r9
 800470c:	eb45 0303 	adc.w	r3, r5, r3
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800471e:	4629      	mov	r1, r5
 8004720:	028b      	lsls	r3, r1, #10
 8004722:	4621      	mov	r1, r4
 8004724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004728:	4621      	mov	r1, r4
 800472a:	028a      	lsls	r2, r1, #10
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004732:	2200      	movs	r2, #0
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	61fa      	str	r2, [r7, #28]
 8004738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473c:	f7fb fdd8 	bl	80002f0 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4613      	mov	r3, r2
 8004746:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	3301      	adds	r3, #1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004762:	e002      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCC_GetSysClockFreq+0x204>)
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800476c:	4618      	mov	r0, r3
 800476e:	3750      	adds	r7, #80	; 0x50
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	00f42400 	.word	0x00f42400
 8004780:	007a1200 	.word	0x007a1200

08004784 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_RCC_GetHCLKFreq+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000010 	.word	0x20000010

0800479c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047a0:	f7ff fff0 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	0a9b      	lsrs	r3, r3, #10
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4903      	ldr	r1, [pc, #12]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	0800d0dc 	.word	0x0800d0dc

080047c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047c8:	f7ff ffdc 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0b5b      	lsrs	r3, r3, #13
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	0800d0dc 	.word	0x0800d0dc

080047ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	220f      	movs	r2, #15
 80047fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCC_GetClockConfig+0x5c>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0203 	and.w	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <HAL_RCC_GetClockConfig+0x5c>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <HAL_RCC_GetClockConfig+0x5c>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <HAL_RCC_GetClockConfig+0x5c>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	08db      	lsrs	r3, r3, #3
 8004826:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <HAL_RCC_GetClockConfig+0x60>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 020f 	and.w	r2, r3, #15
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	601a      	str	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800
 800484c:	40023c00 	.word	0x40023c00

08004850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004878:	4b69      	ldr	r3, [pc, #420]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a68      	ldr	r2, [pc, #416]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004882:	6093      	str	r3, [r2, #8]
 8004884:	4b66      	ldr	r3, [pc, #408]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488c:	4964      	ldr	r1, [pc, #400]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048aa:	4b5d      	ldr	r3, [pc, #372]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	4959      	ldr	r1, [pc, #356]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c8:	d101      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d017      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048e6:	4b4e      	ldr	r3, [pc, #312]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	494a      	ldr	r1, [pc, #296]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004904:	d101      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004906:	2301      	movs	r3, #1
 8004908:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004922:	2301      	movs	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 808b 	beq.w	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004934:	4b3a      	ldr	r3, [pc, #232]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	4a39      	ldr	r2, [pc, #228]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	6413      	str	r3, [r2, #64]	; 0x40
 8004940:	4b37      	ldr	r3, [pc, #220]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800494c:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a34      	ldr	r2, [pc, #208]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fd ffc4 	bl	80028e4 <HAL_GetTick>
 800495c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004960:	f7fd ffc0 	bl	80028e4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e38f      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004972:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800497e:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004986:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d035      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d02e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800499c:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049be:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d114      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fd ff88 	bl	80028e4 <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fd ff84 	bl	80028e4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e351      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ee      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a06:	d111      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a16:	400b      	ands	r3, r1
 8004a18:	4901      	ldr	r1, [pc, #4]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40007000 	.word	0x40007000
 8004a28:	0ffffcff 	.word	0x0ffffcff
 8004a2c:	4bac      	ldr	r3, [pc, #688]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4aab      	ldr	r2, [pc, #684]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a36:	6093      	str	r3, [r2, #8]
 8004a38:	4ba9      	ldr	r3, [pc, #676]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	49a6      	ldr	r1, [pc, #664]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d010      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a56:	4ba2      	ldr	r3, [pc, #648]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5c:	4aa0      	ldr	r2, [pc, #640]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a66:	4b9e      	ldr	r3, [pc, #632]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	499b      	ldr	r1, [pc, #620]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a84:	4b96      	ldr	r3, [pc, #600]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a92:	4993      	ldr	r1, [pc, #588]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aa6:	4b8e      	ldr	r3, [pc, #568]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab4:	498a      	ldr	r1, [pc, #552]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ac8:	4b85      	ldr	r3, [pc, #532]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad6:	4982      	ldr	r1, [pc, #520]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aea:	4b7d      	ldr	r3, [pc, #500]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	4979      	ldr	r1, [pc, #484]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b0c:	4b74      	ldr	r3, [pc, #464]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	4971      	ldr	r1, [pc, #452]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b2e:	4b6c      	ldr	r3, [pc, #432]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f023 020c 	bic.w	r2, r3, #12
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3c:	4968      	ldr	r1, [pc, #416]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b50:	4b63      	ldr	r3, [pc, #396]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	4960      	ldr	r1, [pc, #384]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b72:	4b5b      	ldr	r3, [pc, #364]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b80:	4957      	ldr	r1, [pc, #348]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b94:	4b52      	ldr	r3, [pc, #328]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	494f      	ldr	r1, [pc, #316]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bb6:	4b4a      	ldr	r3, [pc, #296]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc4:	4946      	ldr	r1, [pc, #280]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004bd8:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	493e      	ldr	r1, [pc, #248]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c08:	4935      	ldr	r1, [pc, #212]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c1c:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2a:	492d      	ldr	r1, [pc, #180]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d011      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c3e:	4b28      	ldr	r3, [pc, #160]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4c:	4924      	ldr	r1, [pc, #144]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c7e:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8c:	4914      	ldr	r1, [pc, #80]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb0:	490b      	ldr	r1, [pc, #44]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00f      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd4:	4902      	ldr	r1, [pc, #8]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cdc:	e002      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cf0:	4b8a      	ldr	r3, [pc, #552]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	4986      	ldr	r1, [pc, #536]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d14:	4b81      	ldr	r3, [pc, #516]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d24:	497d      	ldr	r1, [pc, #500]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d006      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80d6 	beq.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d40:	4b76      	ldr	r3, [pc, #472]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a75      	ldr	r2, [pc, #468]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fd fdca 	bl	80028e4 <HAL_GetTick>
 8004d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d54:	f7fd fdc6 	bl	80028e4 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e195      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d66:	4b6d      	ldr	r3, [pc, #436]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d021      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d11d      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d86:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d94:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9a:	0e1b      	lsrs	r3, r3, #24
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	019a      	lsls	r2, r3, #6
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	061b      	lsls	r3, r3, #24
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	071b      	lsls	r3, r3, #28
 8004dba:	4958      	ldr	r1, [pc, #352]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d02e      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dec:	d129      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dee:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dfc:	4b47      	ldr	r3, [pc, #284]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e02:	0f1b      	lsrs	r3, r3, #28
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	019a      	lsls	r2, r3, #6
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	061b      	lsls	r3, r3, #24
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	071b      	lsls	r3, r3, #28
 8004e22:	493e      	ldr	r1, [pc, #248]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e2a:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e30:	f023 021f 	bic.w	r2, r3, #31
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	4938      	ldr	r1, [pc, #224]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01d      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e4e:	4b33      	ldr	r3, [pc, #204]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e54:	0e1b      	lsrs	r3, r3, #24
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e5c:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e62:	0f1b      	lsrs	r3, r3, #28
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	019a      	lsls	r2, r3, #6
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	431a      	orrs	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	4926      	ldr	r1, [pc, #152]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d011      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	019a      	lsls	r2, r3, #6
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	041b      	lsls	r3, r3, #16
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	071b      	lsls	r3, r3, #28
 8004eb2:	491a      	ldr	r1, [pc, #104]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec6:	f7fd fd0d 	bl	80028e4 <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ece:	f7fd fd09 	bl	80028e4 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b64      	cmp	r3, #100	; 0x64
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e0d8      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	f040 80ce 	bne.w	8005090 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fd fcf0 	bl	80028e4 <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f06:	e00b      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f08:	f7fd fcec 	bl	80028e4 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d904      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e0bb      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f1a:	bf00      	nop
 8004f1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f20:	4b5e      	ldr	r3, [pc, #376]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f2c:	d0ec      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d02e      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d12a      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f56:	4b51      	ldr	r3, [pc, #324]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f64:	4b4d      	ldr	r3, [pc, #308]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	0f1b      	lsrs	r3, r3, #28
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	019a      	lsls	r2, r3, #6
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	061b      	lsls	r3, r3, #24
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	4944      	ldr	r1, [pc, #272]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f92:	4b42      	ldr	r3, [pc, #264]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	493d      	ldr	r1, [pc, #244]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d022      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc0:	d11d      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fc2:	4b36      	ldr	r3, [pc, #216]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fd0:	4b32      	ldr	r3, [pc, #200]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	0f1b      	lsrs	r3, r3, #28
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	019a      	lsls	r2, r3, #6
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	071b      	lsls	r3, r3, #28
 8004ff6:	4929      	ldr	r1, [pc, #164]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d028      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	0e1b      	lsrs	r3, r3, #24
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005018:	4b20      	ldr	r3, [pc, #128]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	0c1b      	lsrs	r3, r3, #16
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	019a      	lsls	r2, r3, #6
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	041b      	lsls	r3, r3, #16
 8005030:	431a      	orrs	r2, r3
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	071b      	lsls	r3, r3, #28
 800503e:	4917      	ldr	r1, [pc, #92]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4911      	ldr	r1, [pc, #68]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a0e      	ldr	r2, [pc, #56]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005068:	f7fd fc3c 	bl	80028e4 <HAL_GetTick>
 800506c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005070:	f7fd fc38 	bl	80028e4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e007      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005082:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800508a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800508e:	d1ef      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800

080050a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e049      	b.n	8005146 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fd f890 	bl	80021ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f000 fa24 	bl	800552c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d001      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e054      	b.n	8005212 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a26      	ldr	r2, [pc, #152]	; (8005220 <HAL_TIM_Base_Start_IT+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d022      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x80>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d01d      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x80>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a22      	ldr	r2, [pc, #136]	; (8005224 <HAL_TIM_Base_Start_IT+0xd4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d018      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x80>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a21      	ldr	r2, [pc, #132]	; (8005228 <HAL_TIM_Base_Start_IT+0xd8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d013      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x80>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1f      	ldr	r2, [pc, #124]	; (800522c <HAL_TIM_Base_Start_IT+0xdc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00e      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x80>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <HAL_TIM_Base_Start_IT+0xe0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d009      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x80>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <HAL_TIM_Base_Start_IT+0xe4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x80>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <HAL_TIM_Base_Start_IT+0xe8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d115      	bne.n	80051fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	4b19      	ldr	r3, [pc, #100]	; (800523c <HAL_TIM_Base_Start_IT+0xec>)
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b06      	cmp	r3, #6
 80051e0:	d015      	beq.n	800520e <HAL_TIM_Base_Start_IT+0xbe>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e8:	d011      	beq.n	800520e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fa:	e008      	b.n	800520e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e000      	b.n	8005210 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40010400 	.word	0x40010400
 8005234:	40014000 	.word	0x40014000
 8005238:	40001800 	.word	0x40001800
 800523c:	00010007 	.word	0x00010007

08005240 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10f      	bne.n	8005288 <HAL_TIM_Base_Stop_IT+0x48>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	f240 4344 	movw	r3, #1092	; 0x444
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_TIM_Base_Stop_IT+0x48>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d122      	bne.n	80052fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d11b      	bne.n	80052fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0202 	mvn.w	r2, #2
 80052ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f905 	bl	80054f0 <HAL_TIM_IC_CaptureCallback>
 80052e6:	e005      	b.n	80052f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8f7 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f908 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d122      	bne.n	800534e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d11b      	bne.n	800534e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f06f 0204 	mvn.w	r2, #4
 800531e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f8db 	bl	80054f0 <HAL_TIM_IC_CaptureCallback>
 800533a:	e005      	b.n	8005348 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f8cd 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8de 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d122      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b08      	cmp	r3, #8
 8005368:	d11b      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0208 	mvn.w	r2, #8
 8005372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2204      	movs	r2, #4
 8005378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f8b1 	bl	80054f0 <HAL_TIM_IC_CaptureCallback>
 800538e:	e005      	b.n	800539c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8a3 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8b4 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d122      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d11b      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f06f 0210 	mvn.w	r2, #16
 80053c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2208      	movs	r2, #8
 80053cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f887 	bl	80054f0 <HAL_TIM_IC_CaptureCallback>
 80053e2:	e005      	b.n	80053f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f879 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f88a 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0201 	mvn.w	r2, #1
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fc fcf9 	bl	8001e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f9a7 	bl	800579c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545c:	d10e      	bne.n	800547c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b80      	cmp	r3, #128	; 0x80
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f99a 	bl	80057b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d10e      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f838 	bl	8005518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0220 	mvn.w	r2, #32
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f95a 	bl	8005788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a40      	ldr	r2, [pc, #256]	; (8005640 <TIM_Base_SetConfig+0x114>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554a:	d00f      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3d      	ldr	r2, [pc, #244]	; (8005644 <TIM_Base_SetConfig+0x118>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00b      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a3c      	ldr	r2, [pc, #240]	; (8005648 <TIM_Base_SetConfig+0x11c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d007      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a3b      	ldr	r2, [pc, #236]	; (800564c <TIM_Base_SetConfig+0x120>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a3a      	ldr	r2, [pc, #232]	; (8005650 <TIM_Base_SetConfig+0x124>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2f      	ldr	r2, [pc, #188]	; (8005640 <TIM_Base_SetConfig+0x114>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02b      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d027      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2c      	ldr	r2, [pc, #176]	; (8005644 <TIM_Base_SetConfig+0x118>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d023      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2b      	ldr	r2, [pc, #172]	; (8005648 <TIM_Base_SetConfig+0x11c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01f      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2a      	ldr	r2, [pc, #168]	; (800564c <TIM_Base_SetConfig+0x120>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01b      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a29      	ldr	r2, [pc, #164]	; (8005650 <TIM_Base_SetConfig+0x124>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d017      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a28      	ldr	r2, [pc, #160]	; (8005654 <TIM_Base_SetConfig+0x128>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a27      	ldr	r2, [pc, #156]	; (8005658 <TIM_Base_SetConfig+0x12c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00f      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a26      	ldr	r2, [pc, #152]	; (800565c <TIM_Base_SetConfig+0x130>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00b      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a25      	ldr	r2, [pc, #148]	; (8005660 <TIM_Base_SetConfig+0x134>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d007      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a24      	ldr	r2, [pc, #144]	; (8005664 <TIM_Base_SetConfig+0x138>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a23      	ldr	r2, [pc, #140]	; (8005668 <TIM_Base_SetConfig+0x13c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d108      	bne.n	80055f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a0a      	ldr	r2, [pc, #40]	; (8005640 <TIM_Base_SetConfig+0x114>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_Base_SetConfig+0xf8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a0c      	ldr	r2, [pc, #48]	; (8005650 <TIM_Base_SetConfig+0x124>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d103      	bne.n	800562c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	615a      	str	r2, [r3, #20]
}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40010000 	.word	0x40010000
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	40010400 	.word	0x40010400
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800
 8005660:	40001800 	.word	0x40001800
 8005664:	40001c00 	.word	0x40001c00
 8005668:	40002000 	.word	0x40002000

0800566c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005680:	2302      	movs	r3, #2
 8005682:	e06d      	b.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a30      	ldr	r2, [pc, #192]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2f      	ldr	r2, [pc, #188]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d108      	bne.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a20      	ldr	r2, [pc, #128]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d022      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d01d      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d018      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a15      	ldr	r2, [pc, #84]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d009      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a16      	ldr	r2, [pc, #88]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a15      	ldr	r2, [pc, #84]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10c      	bne.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40010000 	.word	0x40010000
 8005770:	40010400 	.word	0x40010400
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40014000 	.word	0x40014000
 8005784:	40001800 	.word	0x40001800

08005788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e040      	b.n	8005858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc fd42 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	; 0x24
 80057f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fce4 	bl	80061d0 <UART_SetConfig>
 8005808:	4603      	mov	r3, r0
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e022      	b.n	8005858 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 ff3c 	bl	8006698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800582e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800583e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 ffc3 	bl	80067dc <UART_CheckIdleState>
 8005856:	4603      	mov	r3, r0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	; 0x28
 8005864:	af02      	add	r7, sp, #8
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005874:	2b20      	cmp	r3, #32
 8005876:	d171      	bne.n	800595c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_UART_Transmit+0x24>
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e06a      	b.n	800595e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2221      	movs	r2, #33	; 0x21
 8005894:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005896:	f7fd f825 	bl	80028e4 <HAL_GetTick>
 800589a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	88fa      	ldrh	r2, [r7, #6]
 80058a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d108      	bne.n	80058c8 <HAL_UART_Transmit+0x68>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e003      	b.n	80058d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d0:	e02c      	b.n	800592c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 ffca 	bl	8006876 <UART_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e038      	b.n	800595e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005900:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	3302      	adds	r3, #2
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	e007      	b.n	800591a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	781a      	ldrb	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	3301      	adds	r3, #1
 8005918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1cc      	bne.n	80058d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2200      	movs	r2, #0
 8005940:	2140      	movs	r1, #64	; 0x40
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 ff97 	bl	8006876 <UART_WaitOnFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e005      	b.n	800595e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b08a      	sub	sp, #40	; 0x28
 800596a:	af02      	add	r7, sp, #8
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597c:	2b20      	cmp	r3, #32
 800597e:	f040 80b1 	bne.w	8005ae4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_UART_Receive+0x28>
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e0a9      	b.n	8005ae6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2222      	movs	r2, #34	; 0x22
 800599e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059a8:	f7fc ff9c 	bl	80028e4 <HAL_GetTick>
 80059ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	88fa      	ldrh	r2, [r7, #6]
 80059b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c6:	d10e      	bne.n	80059e6 <HAL_UART_Receive+0x80>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <HAL_UART_Receive+0x76>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80059d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059da:	e02d      	b.n	8005a38 <HAL_UART_Receive+0xd2>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	22ff      	movs	r2, #255	; 0xff
 80059e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059e4:	e028      	b.n	8005a38 <HAL_UART_Receive+0xd2>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10d      	bne.n	8005a0a <HAL_UART_Receive+0xa4>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <HAL_UART_Receive+0x9a>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	22ff      	movs	r2, #255	; 0xff
 80059fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059fe:	e01b      	b.n	8005a38 <HAL_UART_Receive+0xd2>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	227f      	movs	r2, #127	; 0x7f
 8005a04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a08:	e016      	b.n	8005a38 <HAL_UART_Receive+0xd2>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a12:	d10d      	bne.n	8005a30 <HAL_UART_Receive+0xca>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <HAL_UART_Receive+0xc0>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	227f      	movs	r2, #127	; 0x7f
 8005a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a24:	e008      	b.n	8005a38 <HAL_UART_Receive+0xd2>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	223f      	movs	r2, #63	; 0x3f
 8005a2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a2e:	e003      	b.n	8005a38 <HAL_UART_Receive+0xd2>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a3e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d108      	bne.n	8005a5c <HAL_UART_Receive+0xf6>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e003      	b.n	8005a64 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a64:	e032      	b.n	8005acc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2120      	movs	r1, #32
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 ff00 	bl	8006876 <UART_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e032      	b.n	8005ae6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	8a7b      	ldrh	r3, [r7, #18]
 8005a90:	4013      	ands	r3, r2
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e00c      	b.n	8005aba <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	8a7b      	ldrh	r3, [r7, #18]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	4013      	ands	r3, r2
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1c6      	bne.n	8005a66 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b08b      	sub	sp, #44	; 0x2c
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d147      	bne.n	8005b96 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_UART_Transmit_IT+0x22>
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e040      	b.n	8005b98 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	88fa      	ldrh	r2, [r7, #6]
 8005b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2221      	movs	r2, #33	; 0x21
 8005b3e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d107      	bne.n	8005b5a <HAL_UART_Transmit_IT+0x6a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <HAL_UART_Transmit_IT+0xb4>)
 8005b56:	66da      	str	r2, [r3, #108]	; 0x6c
 8005b58:	e002      	b.n	8005b60 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <HAL_UART_Transmit_IT+0xb8>)
 8005b5e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	69f9      	ldr	r1, [r7, #28]
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e6      	bne.n	8005b60 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
  }
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	372c      	adds	r7, #44	; 0x2c
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	08006bad 	.word	0x08006bad
 8005ba8:	08006af7 	.word	0x08006af7

08005bac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b0ba      	sub	sp, #232	; 0xe8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005bd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005bda:	4013      	ands	r3, r2
 8005bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d115      	bne.n	8005c14 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00f      	beq.n	8005c14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 82ac 	beq.w	8006162 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
      }
      return;
 8005c12:	e2a6      	b.n	8006162 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8117 	beq.w	8005e4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c2e:	4b85      	ldr	r3, [pc, #532]	; (8005e44 <HAL_UART_IRQHandler+0x298>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 810a 	beq.w	8005e4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d011      	beq.n	8005c68 <HAL_UART_IRQHandler+0xbc>
 8005c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2201      	movs	r2, #1
 8005c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c5e:	f043 0201 	orr.w	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d011      	beq.n	8005c98 <HAL_UART_IRQHandler+0xec>
 8005c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2202      	movs	r2, #2
 8005c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c8e:	f043 0204 	orr.w	r2, r3, #4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d011      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x11c>
 8005ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cbe:	f043 0202 	orr.w	r2, r3, #2
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d017      	beq.n	8005d04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfa:	f043 0208 	orr.w	r2, r3, #8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d012      	beq.n	8005d36 <HAL_UART_IRQHandler+0x18a>
 8005d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00c      	beq.n	8005d36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8212 	beq.w	8006166 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00d      	beq.n	8005d6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	d005      	beq.n	8005d8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04f      	beq.n	8005e2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fe37 	bl	8006a02 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d141      	bne.n	8005e26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1d9      	bne.n	8005da2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d013      	beq.n	8005e1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfa:	4a13      	ldr	r2, [pc, #76]	; (8005e48 <HAL_UART_IRQHandler+0x29c>)
 8005dfc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fd fc74 	bl	80036f0 <HAL_DMA_Abort_IT>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d017      	beq.n	8005e3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	e00f      	b.n	8005e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f9b6 	bl	8006190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	e00b      	b.n	8005e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f9b2 	bl	8006190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	e007      	b.n	8005e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f9ae 	bl	8006190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005e3c:	e193      	b.n	8006166 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3e:	bf00      	nop
    return;
 8005e40:	e191      	b.n	8006166 <HAL_UART_IRQHandler+0x5ba>
 8005e42:	bf00      	nop
 8005e44:	04000120 	.word	0x04000120
 8005e48:	08006acb 	.word	0x08006acb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	f040 814c 	bne.w	80060ee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 8145 	beq.w	80060ee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 813e 	beq.w	80060ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2210      	movs	r2, #16
 8005e78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	f040 80b6 	bne.w	8005ff6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8165 	beq.w	800616a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	f080 815d 	bcs.w	800616a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec4:	f000 8086 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ef6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1da      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3308      	adds	r3, #8
 8005f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e1      	bne.n	8005f12 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e3      	bne.n	8005f4e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa4:	f023 0310 	bic.w	r3, r3, #16
 8005fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e4      	bne.n	8005f94 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd fb1e 	bl	8003610 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8d8 	bl	80061a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ff4:	e0b9      	b.n	800616a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006002:	b29b      	uxth	r3, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 80ab 	beq.w	800616e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a6 	beq.w	800616e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006044:	647b      	str	r3, [r7, #68]	; 0x44
 8006046:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800604a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e4      	bne.n	8006022 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	623b      	str	r3, [r7, #32]
   return(result);
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800607c:	633a      	str	r2, [r7, #48]	; 0x30
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e3      	bne.n	8006058 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f023 0310 	bic.w	r3, r3, #16
 80060b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	69b9      	ldr	r1, [r7, #24]
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	617b      	str	r3, [r7, #20]
   return(result);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e4      	bne.n	80060a4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f85c 	bl	80061a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060ec:	e03f      	b.n	800616e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <HAL_UART_IRQHandler+0x56c>
 80060fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800610e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f853 	bl	80061bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006116:	e02d      	b.n	8006174 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01c      	beq.n	8006172 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
    }
    return;
 8006140:	e017      	b.n	8006172 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d012      	beq.n	8006174 <HAL_UART_IRQHandler+0x5c8>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00c      	beq.n	8006174 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd86 	bl	8006c6c <UART_EndTransmit_IT>
    return;
 8006160:	e008      	b.n	8006174 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006162:	bf00      	nop
 8006164:	e006      	b.n	8006174 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006166:	bf00      	nop
 8006168:	e004      	b.n	8006174 <HAL_UART_IRQHandler+0x5c8>
      return;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <HAL_UART_IRQHandler+0x5c8>
      return;
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006172:	bf00      	nop
  }

}
 8006174:	37e8      	adds	r7, #232	; 0xe8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop

0800617c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4ba6      	ldr	r3, [pc, #664]	; (8006494 <UART_SetConfig+0x2c4>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	6979      	ldr	r1, [r7, #20]
 8006204:	430b      	orrs	r3, r1
 8006206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	430a      	orrs	r2, r1
 8006240:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a94      	ldr	r2, [pc, #592]	; (8006498 <UART_SetConfig+0x2c8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d120      	bne.n	800628e <UART_SetConfig+0xbe>
 800624c:	4b93      	ldr	r3, [pc, #588]	; (800649c <UART_SetConfig+0x2cc>)
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d816      	bhi.n	8006288 <UART_SetConfig+0xb8>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <UART_SetConfig+0x90>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006271 	.word	0x08006271
 8006264:	0800627d 	.word	0x0800627d
 8006268:	08006277 	.word	0x08006277
 800626c:	08006283 	.word	0x08006283
 8006270:	2301      	movs	r3, #1
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e150      	b.n	8006518 <UART_SetConfig+0x348>
 8006276:	2302      	movs	r3, #2
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e14d      	b.n	8006518 <UART_SetConfig+0x348>
 800627c:	2304      	movs	r3, #4
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e14a      	b.n	8006518 <UART_SetConfig+0x348>
 8006282:	2308      	movs	r3, #8
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e147      	b.n	8006518 <UART_SetConfig+0x348>
 8006288:	2310      	movs	r3, #16
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e144      	b.n	8006518 <UART_SetConfig+0x348>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a83      	ldr	r2, [pc, #524]	; (80064a0 <UART_SetConfig+0x2d0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d132      	bne.n	80062fe <UART_SetConfig+0x12e>
 8006298:	4b80      	ldr	r3, [pc, #512]	; (800649c <UART_SetConfig+0x2cc>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	2b0c      	cmp	r3, #12
 80062a4:	d828      	bhi.n	80062f8 <UART_SetConfig+0x128>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <UART_SetConfig+0xdc>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062e1 	.word	0x080062e1
 80062b0:	080062f9 	.word	0x080062f9
 80062b4:	080062f9 	.word	0x080062f9
 80062b8:	080062f9 	.word	0x080062f9
 80062bc:	080062ed 	.word	0x080062ed
 80062c0:	080062f9 	.word	0x080062f9
 80062c4:	080062f9 	.word	0x080062f9
 80062c8:	080062f9 	.word	0x080062f9
 80062cc:	080062e7 	.word	0x080062e7
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	080062f9 	.word	0x080062f9
 80062dc:	080062f3 	.word	0x080062f3
 80062e0:	2300      	movs	r3, #0
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e118      	b.n	8006518 <UART_SetConfig+0x348>
 80062e6:	2302      	movs	r3, #2
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e115      	b.n	8006518 <UART_SetConfig+0x348>
 80062ec:	2304      	movs	r3, #4
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e112      	b.n	8006518 <UART_SetConfig+0x348>
 80062f2:	2308      	movs	r3, #8
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e10f      	b.n	8006518 <UART_SetConfig+0x348>
 80062f8:	2310      	movs	r3, #16
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e10c      	b.n	8006518 <UART_SetConfig+0x348>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a68      	ldr	r2, [pc, #416]	; (80064a4 <UART_SetConfig+0x2d4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d120      	bne.n	800634a <UART_SetConfig+0x17a>
 8006308:	4b64      	ldr	r3, [pc, #400]	; (800649c <UART_SetConfig+0x2cc>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d013      	beq.n	800633e <UART_SetConfig+0x16e>
 8006316:	2b30      	cmp	r3, #48	; 0x30
 8006318:	d814      	bhi.n	8006344 <UART_SetConfig+0x174>
 800631a:	2b20      	cmp	r3, #32
 800631c:	d009      	beq.n	8006332 <UART_SetConfig+0x162>
 800631e:	2b20      	cmp	r3, #32
 8006320:	d810      	bhi.n	8006344 <UART_SetConfig+0x174>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <UART_SetConfig+0x15c>
 8006326:	2b10      	cmp	r3, #16
 8006328:	d006      	beq.n	8006338 <UART_SetConfig+0x168>
 800632a:	e00b      	b.n	8006344 <UART_SetConfig+0x174>
 800632c:	2300      	movs	r3, #0
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e0f2      	b.n	8006518 <UART_SetConfig+0x348>
 8006332:	2302      	movs	r3, #2
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e0ef      	b.n	8006518 <UART_SetConfig+0x348>
 8006338:	2304      	movs	r3, #4
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e0ec      	b.n	8006518 <UART_SetConfig+0x348>
 800633e:	2308      	movs	r3, #8
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e0e9      	b.n	8006518 <UART_SetConfig+0x348>
 8006344:	2310      	movs	r3, #16
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e0e6      	b.n	8006518 <UART_SetConfig+0x348>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a56      	ldr	r2, [pc, #344]	; (80064a8 <UART_SetConfig+0x2d8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d120      	bne.n	8006396 <UART_SetConfig+0x1c6>
 8006354:	4b51      	ldr	r3, [pc, #324]	; (800649c <UART_SetConfig+0x2cc>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800635e:	2bc0      	cmp	r3, #192	; 0xc0
 8006360:	d013      	beq.n	800638a <UART_SetConfig+0x1ba>
 8006362:	2bc0      	cmp	r3, #192	; 0xc0
 8006364:	d814      	bhi.n	8006390 <UART_SetConfig+0x1c0>
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d009      	beq.n	800637e <UART_SetConfig+0x1ae>
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d810      	bhi.n	8006390 <UART_SetConfig+0x1c0>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <UART_SetConfig+0x1a8>
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d006      	beq.n	8006384 <UART_SetConfig+0x1b4>
 8006376:	e00b      	b.n	8006390 <UART_SetConfig+0x1c0>
 8006378:	2300      	movs	r3, #0
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e0cc      	b.n	8006518 <UART_SetConfig+0x348>
 800637e:	2302      	movs	r3, #2
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e0c9      	b.n	8006518 <UART_SetConfig+0x348>
 8006384:	2304      	movs	r3, #4
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e0c6      	b.n	8006518 <UART_SetConfig+0x348>
 800638a:	2308      	movs	r3, #8
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e0c3      	b.n	8006518 <UART_SetConfig+0x348>
 8006390:	2310      	movs	r3, #16
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e0c0      	b.n	8006518 <UART_SetConfig+0x348>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a44      	ldr	r2, [pc, #272]	; (80064ac <UART_SetConfig+0x2dc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d125      	bne.n	80063ec <UART_SetConfig+0x21c>
 80063a0:	4b3e      	ldr	r3, [pc, #248]	; (800649c <UART_SetConfig+0x2cc>)
 80063a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ae:	d017      	beq.n	80063e0 <UART_SetConfig+0x210>
 80063b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b4:	d817      	bhi.n	80063e6 <UART_SetConfig+0x216>
 80063b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ba:	d00b      	beq.n	80063d4 <UART_SetConfig+0x204>
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c0:	d811      	bhi.n	80063e6 <UART_SetConfig+0x216>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <UART_SetConfig+0x1fe>
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ca:	d006      	beq.n	80063da <UART_SetConfig+0x20a>
 80063cc:	e00b      	b.n	80063e6 <UART_SetConfig+0x216>
 80063ce:	2300      	movs	r3, #0
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e0a1      	b.n	8006518 <UART_SetConfig+0x348>
 80063d4:	2302      	movs	r3, #2
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e09e      	b.n	8006518 <UART_SetConfig+0x348>
 80063da:	2304      	movs	r3, #4
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e09b      	b.n	8006518 <UART_SetConfig+0x348>
 80063e0:	2308      	movs	r3, #8
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e098      	b.n	8006518 <UART_SetConfig+0x348>
 80063e6:	2310      	movs	r3, #16
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e095      	b.n	8006518 <UART_SetConfig+0x348>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2f      	ldr	r2, [pc, #188]	; (80064b0 <UART_SetConfig+0x2e0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d125      	bne.n	8006442 <UART_SetConfig+0x272>
 80063f6:	4b29      	ldr	r3, [pc, #164]	; (800649c <UART_SetConfig+0x2cc>)
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006404:	d017      	beq.n	8006436 <UART_SetConfig+0x266>
 8006406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800640a:	d817      	bhi.n	800643c <UART_SetConfig+0x26c>
 800640c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006410:	d00b      	beq.n	800642a <UART_SetConfig+0x25a>
 8006412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006416:	d811      	bhi.n	800643c <UART_SetConfig+0x26c>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <UART_SetConfig+0x254>
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006420:	d006      	beq.n	8006430 <UART_SetConfig+0x260>
 8006422:	e00b      	b.n	800643c <UART_SetConfig+0x26c>
 8006424:	2301      	movs	r3, #1
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e076      	b.n	8006518 <UART_SetConfig+0x348>
 800642a:	2302      	movs	r3, #2
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e073      	b.n	8006518 <UART_SetConfig+0x348>
 8006430:	2304      	movs	r3, #4
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e070      	b.n	8006518 <UART_SetConfig+0x348>
 8006436:	2308      	movs	r3, #8
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e06d      	b.n	8006518 <UART_SetConfig+0x348>
 800643c:	2310      	movs	r3, #16
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e06a      	b.n	8006518 <UART_SetConfig+0x348>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <UART_SetConfig+0x2e4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d138      	bne.n	80064be <UART_SetConfig+0x2ee>
 800644c:	4b13      	ldr	r3, [pc, #76]	; (800649c <UART_SetConfig+0x2cc>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006456:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800645a:	d017      	beq.n	800648c <UART_SetConfig+0x2bc>
 800645c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006460:	d82a      	bhi.n	80064b8 <UART_SetConfig+0x2e8>
 8006462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006466:	d00b      	beq.n	8006480 <UART_SetConfig+0x2b0>
 8006468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646c:	d824      	bhi.n	80064b8 <UART_SetConfig+0x2e8>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <UART_SetConfig+0x2aa>
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006476:	d006      	beq.n	8006486 <UART_SetConfig+0x2b6>
 8006478:	e01e      	b.n	80064b8 <UART_SetConfig+0x2e8>
 800647a:	2300      	movs	r3, #0
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e04b      	b.n	8006518 <UART_SetConfig+0x348>
 8006480:	2302      	movs	r3, #2
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e048      	b.n	8006518 <UART_SetConfig+0x348>
 8006486:	2304      	movs	r3, #4
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e045      	b.n	8006518 <UART_SetConfig+0x348>
 800648c:	2308      	movs	r3, #8
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e042      	b.n	8006518 <UART_SetConfig+0x348>
 8006492:	bf00      	nop
 8006494:	efff69f3 	.word	0xefff69f3
 8006498:	40011000 	.word	0x40011000
 800649c:	40023800 	.word	0x40023800
 80064a0:	40004400 	.word	0x40004400
 80064a4:	40004800 	.word	0x40004800
 80064a8:	40004c00 	.word	0x40004c00
 80064ac:	40005000 	.word	0x40005000
 80064b0:	40011400 	.word	0x40011400
 80064b4:	40007800 	.word	0x40007800
 80064b8:	2310      	movs	r3, #16
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e02c      	b.n	8006518 <UART_SetConfig+0x348>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a72      	ldr	r2, [pc, #456]	; (800668c <UART_SetConfig+0x4bc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d125      	bne.n	8006514 <UART_SetConfig+0x344>
 80064c8:	4b71      	ldr	r3, [pc, #452]	; (8006690 <UART_SetConfig+0x4c0>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064d6:	d017      	beq.n	8006508 <UART_SetConfig+0x338>
 80064d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064dc:	d817      	bhi.n	800650e <UART_SetConfig+0x33e>
 80064de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e2:	d00b      	beq.n	80064fc <UART_SetConfig+0x32c>
 80064e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e8:	d811      	bhi.n	800650e <UART_SetConfig+0x33e>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <UART_SetConfig+0x326>
 80064ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f2:	d006      	beq.n	8006502 <UART_SetConfig+0x332>
 80064f4:	e00b      	b.n	800650e <UART_SetConfig+0x33e>
 80064f6:	2300      	movs	r3, #0
 80064f8:	77fb      	strb	r3, [r7, #31]
 80064fa:	e00d      	b.n	8006518 <UART_SetConfig+0x348>
 80064fc:	2302      	movs	r3, #2
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e00a      	b.n	8006518 <UART_SetConfig+0x348>
 8006502:	2304      	movs	r3, #4
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e007      	b.n	8006518 <UART_SetConfig+0x348>
 8006508:	2308      	movs	r3, #8
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e004      	b.n	8006518 <UART_SetConfig+0x348>
 800650e:	2310      	movs	r3, #16
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e001      	b.n	8006518 <UART_SetConfig+0x348>
 8006514:	2310      	movs	r3, #16
 8006516:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006520:	d15b      	bne.n	80065da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006522:	7ffb      	ldrb	r3, [r7, #31]
 8006524:	2b08      	cmp	r3, #8
 8006526:	d828      	bhi.n	800657a <UART_SetConfig+0x3aa>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x360>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006555 	.word	0x08006555
 8006534:	0800655d 	.word	0x0800655d
 8006538:	08006565 	.word	0x08006565
 800653c:	0800657b 	.word	0x0800657b
 8006540:	0800656b 	.word	0x0800656b
 8006544:	0800657b 	.word	0x0800657b
 8006548:	0800657b 	.word	0x0800657b
 800654c:	0800657b 	.word	0x0800657b
 8006550:	08006573 	.word	0x08006573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fe f922 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8006558:	61b8      	str	r0, [r7, #24]
        break;
 800655a:	e013      	b.n	8006584 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800655c:	f7fe f932 	bl	80047c4 <HAL_RCC_GetPCLK2Freq>
 8006560:	61b8      	str	r0, [r7, #24]
        break;
 8006562:	e00f      	b.n	8006584 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006564:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <UART_SetConfig+0x4c4>)
 8006566:	61bb      	str	r3, [r7, #24]
        break;
 8006568:	e00c      	b.n	8006584 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800656a:	f7fe f805 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 800656e:	61b8      	str	r0, [r7, #24]
        break;
 8006570:	e008      	b.n	8006584 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006576:	61bb      	str	r3, [r7, #24]
        break;
 8006578:	e004      	b.n	8006584 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	77bb      	strb	r3, [r7, #30]
        break;
 8006582:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d074      	beq.n	8006674 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	005a      	lsls	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	085b      	lsrs	r3, r3, #1
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b0f      	cmp	r3, #15
 80065a4:	d916      	bls.n	80065d4 <UART_SetConfig+0x404>
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ac:	d212      	bcs.n	80065d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f023 030f 	bic.w	r3, r3, #15
 80065b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	89fb      	ldrh	r3, [r7, #14]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	89fa      	ldrh	r2, [r7, #14]
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	e04f      	b.n	8006674 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	77bb      	strb	r3, [r7, #30]
 80065d8:	e04c      	b.n	8006674 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065da:	7ffb      	ldrb	r3, [r7, #31]
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d828      	bhi.n	8006632 <UART_SetConfig+0x462>
 80065e0:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <UART_SetConfig+0x418>)
 80065e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e6:	bf00      	nop
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	08006615 	.word	0x08006615
 80065f0:	0800661d 	.word	0x0800661d
 80065f4:	08006633 	.word	0x08006633
 80065f8:	08006623 	.word	0x08006623
 80065fc:	08006633 	.word	0x08006633
 8006600:	08006633 	.word	0x08006633
 8006604:	08006633 	.word	0x08006633
 8006608:	0800662b 	.word	0x0800662b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800660c:	f7fe f8c6 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8006610:	61b8      	str	r0, [r7, #24]
        break;
 8006612:	e013      	b.n	800663c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006614:	f7fe f8d6 	bl	80047c4 <HAL_RCC_GetPCLK2Freq>
 8006618:	61b8      	str	r0, [r7, #24]
        break;
 800661a:	e00f      	b.n	800663c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800661c:	4b1d      	ldr	r3, [pc, #116]	; (8006694 <UART_SetConfig+0x4c4>)
 800661e:	61bb      	str	r3, [r7, #24]
        break;
 8006620:	e00c      	b.n	800663c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006622:	f7fd ffa9 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8006626:	61b8      	str	r0, [r7, #24]
        break;
 8006628:	e008      	b.n	800663c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662e:	61bb      	str	r3, [r7, #24]
        break;
 8006630:	e004      	b.n	800663c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	77bb      	strb	r3, [r7, #30]
        break;
 800663a:	bf00      	nop
    }

    if (pclk != 0U)
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d018      	beq.n	8006674 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	085a      	lsrs	r2, r3, #1
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	441a      	add	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b0f      	cmp	r3, #15
 800665a:	d909      	bls.n	8006670 <UART_SetConfig+0x4a0>
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006662:	d205      	bcs.n	8006670 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	e001      	b.n	8006674 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006680:	7fbb      	ldrb	r3, [r7, #30]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40007c00 	.word	0x40007c00
 8006690:	40023800 	.word	0x40023800
 8006694:	00f42400 	.word	0x00f42400

08006698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00a      	beq.n	8006706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01a      	beq.n	80067ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006796:	d10a      	bne.n	80067ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]
  }
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067ec:	f7fc f87a 	bl	80028e4 <HAL_GetTick>
 80067f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d10e      	bne.n	800681e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f831 	bl	8006876 <UART_WaitOnFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e027      	b.n	800686e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b04      	cmp	r3, #4
 800682a:	d10e      	bne.n	800684a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800682c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f81b 	bl	8006876 <UART_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e011      	b.n	800686e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b09c      	sub	sp, #112	; 0x70
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	603b      	str	r3, [r7, #0]
 8006882:	4613      	mov	r3, r2
 8006884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006886:	e0a7      	b.n	80069d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	f000 80a3 	beq.w	80069d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006892:	f7fc f827 	bl	80028e4 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800689e:	429a      	cmp	r2, r3
 80068a0:	d302      	bcc.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80068a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d13f      	bne.n	8006928 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068bc:	667b      	str	r3, [r7, #100]	; 0x64
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	663b      	str	r3, [r7, #96]	; 0x60
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e5      	bne.n	80068da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e068      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d050      	beq.n	80069d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006944:	d148      	bne.n	80069d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800694e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696e:	637b      	str	r3, [r7, #52]	; 0x34
 8006970:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e6      	bne.n	8006950 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	613b      	str	r3, [r7, #16]
   return(result);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	66bb      	str	r3, [r7, #104]	; 0x68
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069a2:	623a      	str	r2, [r7, #32]
 80069a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	69f9      	ldr	r1, [r7, #28]
 80069a8:	6a3a      	ldr	r2, [r7, #32]
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e5      	bne.n	8006982 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e010      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4013      	ands	r3, r2
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f43f af48 	beq.w	8006888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3770      	adds	r7, #112	; 0x70
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b095      	sub	sp, #84	; 0x54
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a28:	643b      	str	r3, [r7, #64]	; 0x40
 8006a2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e6      	bne.n	8006a0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3308      	adds	r3, #8
 8006a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f023 0301 	bic.w	r3, r3, #1
 8006a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e5      	bne.n	8006a3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d118      	bne.n	8006aaa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f023 0310 	bic.w	r3, r3, #16
 8006a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6979      	ldr	r1, [r7, #20]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e6      	bne.n	8006a78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006abe:	bf00      	nop
 8006ac0:	3754      	adds	r7, #84	; 0x54
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff fb51 	bl	8006190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b08f      	sub	sp, #60	; 0x3c
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b02:	2b21      	cmp	r3, #33	; 0x21
 8006b04:	d14c      	bne.n	8006ba0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d132      	bne.n	8006b78 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b32:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	61bb      	str	r3, [r7, #24]
 8006b64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6979      	ldr	r1, [r7, #20]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e6      	bne.n	8006b44 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006b76:	e013      	b.n	8006ba0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7c:	781a      	ldrb	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006ba0:	bf00      	nop
 8006ba2:	373c      	adds	r7, #60	; 0x3c
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b091      	sub	sp, #68	; 0x44
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bb8:	2b21      	cmp	r3, #33	; 0x21
 8006bba:	d151      	bne.n	8006c60 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d132      	bne.n	8006c2e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	633b      	str	r3, [r7, #48]	; 0x30
 8006be8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e6      	bne.n	8006bc8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	69b9      	ldr	r1, [r7, #24]
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	617b      	str	r3, [r7, #20]
   return(result);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e6      	bne.n	8006bfa <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006c2c:	e018      	b.n	8006c60 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006c60:	bf00      	nop
 8006c62:	3744      	adds	r7, #68	; 0x44
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e6      	bne.n	8006c74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff fa62 	bl	800617c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb8:	bf00      	nop
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	f107 001c 	add.w	r0, r7, #28
 8006cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d120      	bne.n	8006d1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	4b20      	ldr	r3, [pc, #128]	; (8006d6c <USB_CoreInit+0xac>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d105      	bne.n	8006d0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa96 	bl	8007240 <USB_CoreReset>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	e010      	b.n	8006d3c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa8a 	bl	8007240 <USB_CoreReset>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d10b      	bne.n	8006d5a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f043 0206 	orr.w	r2, r3, #6
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f043 0220 	orr.w	r2, r3, #32
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d66:	b004      	add	sp, #16
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	ffbdffbf 	.word	0xffbdffbf

08006d70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f023 0201 	bic.w	r2, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dae:	78fb      	ldrb	r3, [r7, #3]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d115      	bne.n	8006de0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	f7fb fd9b 	bl	80028fc <HAL_Delay>
      ms++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fa29 	bl	8007224 <USB_GetMode>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d01e      	beq.n	8006e16 <USB_SetCurrentMode+0x84>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b31      	cmp	r3, #49	; 0x31
 8006ddc:	d9f0      	bls.n	8006dc0 <USB_SetCurrentMode+0x2e>
 8006dde:	e01a      	b.n	8006e16 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d115      	bne.n	8006e12 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006df2:	2001      	movs	r0, #1
 8006df4:	f7fb fd82 	bl	80028fc <HAL_Delay>
      ms++;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa10 	bl	8007224 <USB_GetMode>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <USB_SetCurrentMode+0x84>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b31      	cmp	r3, #49	; 0x31
 8006e0e:	d9f0      	bls.n	8006df2 <USB_SetCurrentMode+0x60>
 8006e10:	e001      	b.n	8006e16 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e005      	b.n	8006e22 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b32      	cmp	r3, #50	; 0x32
 8006e1a:	d101      	bne.n	8006e20 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b086      	sub	sp, #24
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	e009      	b.n	8006e60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	3340      	adds	r3, #64	; 0x40
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b0e      	cmp	r3, #14
 8006e64:	d9f2      	bls.n	8006e4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11c      	bne.n	8006ea6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7a:	f043 0302 	orr.w	r3, r3, #2
 8006e7e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e005      	b.n	8006eb2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eb8:	461a      	mov	r2, r3
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ecc:	461a      	mov	r2, r3
 8006ece:	680b      	ldr	r3, [r1, #0]
 8006ed0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d10c      	bne.n	8006ef2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ede:	2100      	movs	r1, #0
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f965 	bl	80071b0 <USB_SetDevSpeed>
 8006ee6:	e008      	b.n	8006efa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ee8:	2101      	movs	r1, #1
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f960 	bl	80071b0 <USB_SetDevSpeed>
 8006ef0:	e003      	b.n	8006efa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ef2:	2103      	movs	r1, #3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f95b 	bl	80071b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006efa:	2110      	movs	r1, #16
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f8f3 	bl	80070e8 <USB_FlushTxFifo>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f91f 	bl	8007150 <USB_FlushRxFifo>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	461a      	mov	r2, r3
 8006f24:	2300      	movs	r3, #0
 8006f26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2e:	461a      	mov	r2, r3
 8006f30:	2300      	movs	r3, #0
 8006f32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	e043      	b.n	8006fce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f5c:	d118      	bne.n	8006f90 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f70:	461a      	mov	r2, r3
 8006f72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	e013      	b.n	8006fa2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f86:	461a      	mov	r2, r3
 8006f88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	e008      	b.n	8006fa2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	461a      	mov	r2, r3
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d3b7      	bcc.n	8006f46 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	e043      	b.n	8007064 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff2:	d118      	bne.n	8007026 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007006:	461a      	mov	r2, r3
 8007008:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e013      	b.n	8007038 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701c:	461a      	mov	r2, r3
 800701e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	e008      	b.n	8007038 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007032:	461a      	mov	r2, r3
 8007034:	2300      	movs	r3, #0
 8007036:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007044:	461a      	mov	r2, r3
 8007046:	2300      	movs	r3, #0
 8007048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	461a      	mov	r2, r3
 8007058:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800705c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	429a      	cmp	r2, r3
 800706a:	d3b7      	bcc.n	8006fdc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800707a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800707e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800708c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	f043 0210 	orr.w	r2, r3, #16
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <USB_DevInit+0x2b4>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	f043 0208 	orr.w	r2, r3, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d105      	bne.n	80070d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <USB_DevInit+0x2b8>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070dc:	b004      	add	sp, #16
 80070de:	4770      	bx	lr
 80070e0:	803c3800 	.word	0x803c3800
 80070e4:	40000004 	.word	0x40000004

080070e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4a13      	ldr	r2, [pc, #76]	; (800714c <USB_FlushTxFifo+0x64>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d901      	bls.n	8007108 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e01b      	b.n	8007140 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	daf2      	bge.n	80070f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	019b      	lsls	r3, r3, #6
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <USB_FlushTxFifo+0x64>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e006      	b.n	8007140 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b20      	cmp	r3, #32
 800713c:	d0f0      	beq.n	8007120 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	00030d40 	.word	0x00030d40

08007150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4a11      	ldr	r2, [pc, #68]	; (80071ac <USB_FlushRxFifo+0x5c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e018      	b.n	80071a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	daf2      	bge.n	800715c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2210      	movs	r2, #16
 800717e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3301      	adds	r3, #1
 8007184:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4a08      	ldr	r2, [pc, #32]	; (80071ac <USB_FlushRxFifo+0x5c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d901      	bls.n	8007192 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e006      	b.n	80071a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b10      	cmp	r3, #16
 800719c:	d0f0      	beq.n	8007180 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	00030d40 	.word	0x00030d40

080071b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071d0:	4313      	orrs	r3, r2
 80071d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071fc:	f023 0303 	bic.w	r3, r3, #3
 8007200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007210:	f043 0302 	orr.w	r3, r3, #2
 8007214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f003 0301 	and.w	r3, r3, #1
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3301      	adds	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a13      	ldr	r2, [pc, #76]	; (80072a4 <USB_CoreReset+0x64>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d901      	bls.n	800725e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e01b      	b.n	8007296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	daf2      	bge.n	800724c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f043 0201 	orr.w	r2, r3, #1
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <USB_CoreReset+0x64>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d901      	bls.n	8007288 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e006      	b.n	8007296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b01      	cmp	r3, #1
 8007292:	d0f0      	beq.n	8007276 <USB_CoreReset+0x36>

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	00030d40 	.word	0x00030d40

080072a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80072ac:	bf00      	nop
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
	...

080072b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072be:	f3ef 8305 	mrs	r3, IPSR
 80072c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80072c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10f      	bne.n	80072ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ca:	f3ef 8310 	mrs	r3, PRIMASK
 80072ce:	607b      	str	r3, [r7, #4]
  return(result);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d105      	bne.n	80072e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072d6:	f3ef 8311 	mrs	r3, BASEPRI
 80072da:	603b      	str	r3, [r7, #0]
  return(result);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <osKernelInitialize+0x3a>
 80072e2:	4b0e      	ldr	r3, [pc, #56]	; (800731c <osKernelInitialize+0x64>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d103      	bne.n	80072f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80072ea:	f06f 0305 	mvn.w	r3, #5
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e00c      	b.n	800730c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072f2:	4b0a      	ldr	r3, [pc, #40]	; (800731c <osKernelInitialize+0x64>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072fa:	4b08      	ldr	r3, [pc, #32]	; (800731c <osKernelInitialize+0x64>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e002      	b.n	800730c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007306:	f04f 33ff 	mov.w	r3, #4294967295
 800730a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800730c:	68fb      	ldr	r3, [r7, #12]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	200009d4 	.word	0x200009d4

08007320 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007326:	f3ef 8305 	mrs	r3, IPSR
 800732a:	60bb      	str	r3, [r7, #8]
  return(result);
 800732c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10f      	bne.n	8007352 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007332:	f3ef 8310 	mrs	r3, PRIMASK
 8007336:	607b      	str	r3, [r7, #4]
  return(result);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800733e:	f3ef 8311 	mrs	r3, BASEPRI
 8007342:	603b      	str	r3, [r7, #0]
  return(result);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <osKernelStart+0x3a>
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <osKernelStart+0x68>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d103      	bne.n	800735a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007352:	f06f 0305 	mvn.w	r3, #5
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e010      	b.n	800737c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800735a:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <osKernelStart+0x68>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d109      	bne.n	8007376 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007362:	f7ff ffa1 	bl	80072a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007366:	4b08      	ldr	r3, [pc, #32]	; (8007388 <osKernelStart+0x68>)
 8007368:	2202      	movs	r2, #2
 800736a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800736c:	f001 fa3e 	bl	80087ec <vTaskStartScheduler>
      stat = osOK;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e002      	b.n	800737c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007376:	f04f 33ff 	mov.w	r3, #4294967295
 800737a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200009d4 	.word	0x200009d4

0800738c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b090      	sub	sp, #64	; 0x40
 8007390:	af04      	add	r7, sp, #16
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800739c:	f3ef 8305 	mrs	r3, IPSR
 80073a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80073a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 808f 	bne.w	80074c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073aa:	f3ef 8310 	mrs	r3, PRIMASK
 80073ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d105      	bne.n	80073c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073b6:	f3ef 8311 	mrs	r3, BASEPRI
 80073ba:	617b      	str	r3, [r7, #20]
  return(result);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <osThreadNew+0x3e>
 80073c2:	4b44      	ldr	r3, [pc, #272]	; (80074d4 <osThreadNew+0x148>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d07e      	beq.n	80074c8 <osThreadNew+0x13c>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d07b      	beq.n	80074c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80073d0:	2380      	movs	r3, #128	; 0x80
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80073d4:	2318      	movs	r3, #24
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80073dc:	f04f 33ff 	mov.w	r3, #4294967295
 80073e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d045      	beq.n	8007474 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <osThreadNew+0x6a>
        name = attr->name;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <osThreadNew+0x90>
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	2b38      	cmp	r3, #56	; 0x38
 800740e:	d805      	bhi.n	800741c <osThreadNew+0x90>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <osThreadNew+0x94>
        return (NULL);
 800741c:	2300      	movs	r3, #0
 800741e:	e054      	b.n	80074ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	089b      	lsrs	r3, r3, #2
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00e      	beq.n	8007456 <osThreadNew+0xca>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2ba7      	cmp	r3, #167	; 0xa7
 800743e:	d90a      	bls.n	8007456 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007444:	2b00      	cmp	r3, #0
 8007446:	d006      	beq.n	8007456 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <osThreadNew+0xca>
        mem = 1;
 8007450:	2301      	movs	r3, #1
 8007452:	623b      	str	r3, [r7, #32]
 8007454:	e010      	b.n	8007478 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10c      	bne.n	8007478 <osThreadNew+0xec>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d108      	bne.n	8007478 <osThreadNew+0xec>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d104      	bne.n	8007478 <osThreadNew+0xec>
          mem = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	623b      	str	r3, [r7, #32]
 8007472:	e001      	b.n	8007478 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d110      	bne.n	80074a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007486:	9202      	str	r2, [sp, #8]
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fea7 	bl	80081e8 <xTaskCreateStatic>
 800749a:	4603      	mov	r3, r0
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	e013      	b.n	80074c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d110      	bne.n	80074c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	f107 0310 	add.w	r3, r7, #16
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fef8 	bl	80082ae <xTaskCreate>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d001      	beq.n	80074c8 <osThreadNew+0x13c>
          hTask = NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074c8:	693b      	ldr	r3, [r7, #16]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3730      	adds	r7, #48	; 0x30
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200009d4 	.word	0x200009d4

080074d8 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e4:	f3ef 8305 	mrs	r3, IPSR
 80074e8:	617b      	str	r3, [r7, #20]
  return(result);
 80074ea:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10f      	bne.n	8007510 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f0:	f3ef 8310 	mrs	r3, PRIMASK
 80074f4:	613b      	str	r3, [r7, #16]
  return(result);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d105      	bne.n	8007508 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007500:	60fb      	str	r3, [r7, #12]
  return(result);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <osThreadSuspend+0x40>
 8007508:	4b0c      	ldr	r3, [pc, #48]	; (800753c <osThreadSuspend+0x64>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d103      	bne.n	8007518 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8007510:	f06f 0305 	mvn.w	r3, #5
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	e00b      	b.n	8007530 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800751e:	f06f 0303 	mvn.w	r3, #3
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e004      	b.n	8007530 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800752a:	69b8      	ldr	r0, [r7, #24]
 800752c:	f001 f852 	bl	80085d4 <vTaskSuspend>
  }

  return (stat);
 8007530:	69fb      	ldr	r3, [r7, #28]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	200009d4 	.word	0x200009d4

08007540 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754c:	f3ef 8305 	mrs	r3, IPSR
 8007550:	617b      	str	r3, [r7, #20]
  return(result);
 8007552:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10f      	bne.n	8007578 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007558:	f3ef 8310 	mrs	r3, PRIMASK
 800755c:	613b      	str	r3, [r7, #16]
  return(result);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007564:	f3ef 8311 	mrs	r3, BASEPRI
 8007568:	60fb      	str	r3, [r7, #12]
  return(result);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <osThreadResume+0x40>
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <osThreadResume+0x64>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d103      	bne.n	8007580 <osThreadResume+0x40>
    stat = osErrorISR;
 8007578:	f06f 0305 	mvn.w	r3, #5
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	e00b      	b.n	8007598 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8007586:	f06f 0303 	mvn.w	r3, #3
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	e004      	b.n	8007598 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8007592:	69b8      	ldr	r0, [r7, #24]
 8007594:	f001 f8ca 	bl	800872c <vTaskResume>
  }

  return (stat);
 8007598:	69fb      	ldr	r3, [r7, #28]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	200009d4 	.word	0x200009d4

080075a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b0:	f3ef 8305 	mrs	r3, IPSR
 80075b4:	613b      	str	r3, [r7, #16]
  return(result);
 80075b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10f      	bne.n	80075dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075bc:	f3ef 8310 	mrs	r3, PRIMASK
 80075c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075c8:	f3ef 8311 	mrs	r3, BASEPRI
 80075cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d007      	beq.n	80075e4 <osDelay+0x3c>
 80075d4:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <osDelay+0x58>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d103      	bne.n	80075e4 <osDelay+0x3c>
    stat = osErrorISR;
 80075dc:	f06f 0305 	mvn.w	r3, #5
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e007      	b.n	80075f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 ffba 	bl	8008568 <vTaskDelay>
    }
  }

  return (stat);
 80075f4:	697b      	ldr	r3, [r7, #20]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200009d4 	.word	0x200009d4

08007604 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a07      	ldr	r2, [pc, #28]	; (8007630 <vApplicationGetIdleTaskMemory+0x2c>)
 8007614:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4a06      	ldr	r2, [pc, #24]	; (8007634 <vApplicationGetIdleTaskMemory+0x30>)
 800761a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2280      	movs	r2, #128	; 0x80
 8007620:	601a      	str	r2, [r3, #0]
}
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	200009d8 	.word	0x200009d8
 8007634:	20000a80 	.word	0x20000a80

08007638 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4a07      	ldr	r2, [pc, #28]	; (8007664 <vApplicationGetTimerTaskMemory+0x2c>)
 8007648:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	4a06      	ldr	r2, [pc, #24]	; (8007668 <vApplicationGetTimerTaskMemory+0x30>)
 800764e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007656:	601a      	str	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	20000c80 	.word	0x20000c80
 8007668:	20000d28 	.word	0x20000d28

0800766c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f103 0208 	add.w	r2, r3, #8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f04f 32ff 	mov.w	r2, #4294967295
 8007684:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f103 0208 	add.w	r2, r3, #8
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f103 0208 	add.w	r2, r3, #8
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	601a      	str	r2, [r3, #0]
}
 8007702:	bf00      	nop
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007724:	d103      	bne.n	800772e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	e00c      	b.n	8007748 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3308      	adds	r3, #8
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e002      	b.n	800773c <vListInsert+0x2e>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	429a      	cmp	r2, r3
 8007746:	d2f6      	bcs.n	8007736 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6892      	ldr	r2, [r2, #8]
 8007796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6852      	ldr	r2, [r2, #4]
 80077a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d103      	bne.n	80077b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	1e5a      	subs	r2, r3, #1
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10c      	bne.n	8007802 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	b672      	cpsid	i
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	b662      	cpsie	i
 80077fc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007802:	f002 f9b3 	bl	8009b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007812:	fb01 f303 	mul.w	r3, r1, r3
 8007816:	441a      	add	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	3b01      	subs	r3, #1
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	441a      	add	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	22ff      	movs	r2, #255	; 0xff
 8007846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d114      	bne.n	8007882 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01a      	beq.n	8007896 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3310      	adds	r3, #16
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fa69 	bl	8008d3c <xTaskRemoveFromEventList>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d012      	beq.n	8007896 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <xQueueGenericReset+0xd0>)
 8007872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	e009      	b.n	8007896 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3310      	adds	r3, #16
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff fef0 	bl	800766c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3324      	adds	r3, #36	; 0x24
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff feeb 	bl	800766c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007896:	f002 f99d 	bl	8009bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800789a:	2301      	movs	r3, #1
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08e      	sub	sp, #56	; 0x38
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10c      	bne.n	80078d6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	b672      	cpsid	i
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	b662      	cpsie	i
 80078d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10c      	bne.n	80078f6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	b672      	cpsid	i
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	b662      	cpsie	i
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <xQueueGenericCreateStatic+0x5a>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <xQueueGenericCreateStatic+0x5e>
 8007902:	2301      	movs	r3, #1
 8007904:	e000      	b.n	8007908 <xQueueGenericCreateStatic+0x60>
 8007906:	2300      	movs	r3, #0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10c      	bne.n	8007926 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	b672      	cpsid	i
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	b662      	cpsie	i
 8007920:	623b      	str	r3, [r7, #32]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d102      	bne.n	8007932 <xQueueGenericCreateStatic+0x8a>
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <xQueueGenericCreateStatic+0x8e>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <xQueueGenericCreateStatic+0x90>
 8007936:	2300      	movs	r3, #0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10c      	bne.n	8007956 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	b672      	cpsid	i
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	b662      	cpsie	i
 8007950:	61fb      	str	r3, [r7, #28]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007956:	2350      	movs	r3, #80	; 0x50
 8007958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b50      	cmp	r3, #80	; 0x50
 800795e:	d00c      	beq.n	800797a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	b672      	cpsid	i
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	b662      	cpsie	i
 8007974:	61bb      	str	r3, [r7, #24]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800797a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800798e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	4613      	mov	r3, r2
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f805 	bl	80079ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3730      	adds	r7, #48	; 0x30
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	e002      	b.n	80079ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079da:	2101      	movs	r1, #1
 80079dc:	69b8      	ldr	r0, [r7, #24]
 80079de:	f7ff fef9 	bl	80077d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08e      	sub	sp, #56	; 0x38
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10c      	bne.n	8007a2a <xQueueGenericSend+0x36>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	b672      	cpsid	i
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	b662      	cpsie	i
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d103      	bne.n	8007a38 <xQueueGenericSend+0x44>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <xQueueGenericSend+0x48>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <xQueueGenericSend+0x4a>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10c      	bne.n	8007a5c <xQueueGenericSend+0x68>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	b672      	cpsid	i
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	b662      	cpsie	i
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d103      	bne.n	8007a6a <xQueueGenericSend+0x76>
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <xQueueGenericSend+0x7a>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <xQueueGenericSend+0x7c>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10c      	bne.n	8007a8e <xQueueGenericSend+0x9a>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	b672      	cpsid	i
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	b662      	cpsie	i
 8007a88:	623b      	str	r3, [r7, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a8e:	f001 fb1f 	bl	80090d0 <xTaskGetSchedulerState>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <xQueueGenericSend+0xaa>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <xQueueGenericSend+0xae>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <xQueueGenericSend+0xb0>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10c      	bne.n	8007ac2 <xQueueGenericSend+0xce>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	b672      	cpsid	i
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	b662      	cpsie	i
 8007abc:	61fb      	str	r3, [r7, #28]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ac2:	f002 f853 	bl	8009b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d302      	bcc.n	8007ad8 <xQueueGenericSend+0xe4>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d129      	bne.n	8007b2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ade:	f000 fa15 	bl	8007f0c <prvCopyDataToQueue>
 8007ae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d010      	beq.n	8007b0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	3324      	adds	r3, #36	; 0x24
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f923 	bl	8008d3c <xTaskRemoveFromEventList>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d013      	beq.n	8007b24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007afc:	4b3f      	ldr	r3, [pc, #252]	; (8007bfc <xQueueGenericSend+0x208>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	e00a      	b.n	8007b24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d007      	beq.n	8007b24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b14:	4b39      	ldr	r3, [pc, #228]	; (8007bfc <xQueueGenericSend+0x208>)
 8007b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b24:	f002 f856 	bl	8009bd4 <vPortExitCritical>
				return pdPASS;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e063      	b.n	8007bf4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d103      	bne.n	8007b3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b32:	f002 f84f 	bl	8009bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	e05c      	b.n	8007bf4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d106      	bne.n	8007b4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b40:	f107 0314 	add.w	r3, r7, #20
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 f95f 	bl	8008e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b4e:	f002 f841 	bl	8009bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b52:	f000 febf 	bl	80088d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b56:	f002 f809 	bl	8009b6c <vPortEnterCritical>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b60:	b25b      	sxtb	r3, r3
 8007b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b66:	d103      	bne.n	8007b70 <xQueueGenericSend+0x17c>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b76:	b25b      	sxtb	r3, r3
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d103      	bne.n	8007b86 <xQueueGenericSend+0x192>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b86:	f002 f825 	bl	8009bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b8a:	1d3a      	adds	r2, r7, #4
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	4611      	mov	r1, r2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 f94e 	bl	8008e34 <xTaskCheckForTimeOut>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d124      	bne.n	8007be8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba0:	f000 faac 	bl	80080fc <prvIsQueueFull>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d018      	beq.n	8007bdc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	3310      	adds	r3, #16
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 f86e 	bl	8008c94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bba:	f000 fa37 	bl	800802c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bbe:	f000 fe97 	bl	80088f0 <xTaskResumeAll>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f47f af7c 	bne.w	8007ac2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007bca:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <xQueueGenericSend+0x208>)
 8007bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	e772      	b.n	8007ac2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bde:	f000 fa25 	bl	800802c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007be2:	f000 fe85 	bl	80088f0 <xTaskResumeAll>
 8007be6:	e76c      	b.n	8007ac2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bea:	f000 fa1f 	bl	800802c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bee:	f000 fe7f 	bl	80088f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3738      	adds	r7, #56	; 0x38
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	e000ed04 	.word	0xe000ed04

08007c00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08e      	sub	sp, #56	; 0x38
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10c      	bne.n	8007c32 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	b672      	cpsid	i
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	b662      	cpsie	i
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d103      	bne.n	8007c40 <xQueueGenericSendFromISR+0x40>
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <xQueueGenericSendFromISR+0x44>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <xQueueGenericSendFromISR+0x46>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10c      	bne.n	8007c64 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	b672      	cpsid	i
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	b662      	cpsie	i
 8007c5e:	623b      	str	r3, [r7, #32]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d103      	bne.n	8007c72 <xQueueGenericSendFromISR+0x72>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <xQueueGenericSendFromISR+0x76>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <xQueueGenericSendFromISR+0x78>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10c      	bne.n	8007c96 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	b672      	cpsid	i
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	b662      	cpsie	i
 8007c90:	61fb      	str	r3, [r7, #28]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c96:	f002 f851 	bl	8009d3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c9a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	b672      	cpsid	i
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	b662      	cpsie	i
 8007cb2:	61ba      	str	r2, [r7, #24]
 8007cb4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d302      	bcc.n	8007ccc <xQueueGenericSendFromISR+0xcc>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d12c      	bne.n	8007d26 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cdc:	f000 f916 	bl	8007f0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ce0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d112      	bne.n	8007d10 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d016      	beq.n	8007d20 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	3324      	adds	r3, #36	; 0x24
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 f820 	bl	8008d3c <xTaskRemoveFromEventList>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00e      	beq.n	8007d20 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	e007      	b.n	8007d20 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d14:	3301      	adds	r3, #1
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	b25a      	sxtb	r2, r3
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d20:	2301      	movs	r3, #1
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007d24:	e001      	b.n	8007d2a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d26:	2300      	movs	r3, #0
 8007d28:	637b      	str	r3, [r7, #52]	; 0x34
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3738      	adds	r7, #56	; 0x38
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08c      	sub	sp, #48	; 0x30
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10c      	bne.n	8007d74 <xQueueReceive+0x34>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	b672      	cpsid	i
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	b662      	cpsie	i
 8007d6e:	623b      	str	r3, [r7, #32]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d103      	bne.n	8007d82 <xQueueReceive+0x42>
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <xQueueReceive+0x46>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <xQueueReceive+0x48>
 8007d86:	2300      	movs	r3, #0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10c      	bne.n	8007da6 <xQueueReceive+0x66>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	b672      	cpsid	i
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	b662      	cpsie	i
 8007da0:	61fb      	str	r3, [r7, #28]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007da6:	f001 f993 	bl	80090d0 <xTaskGetSchedulerState>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <xQueueReceive+0x76>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <xQueueReceive+0x7a>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e000      	b.n	8007dbc <xQueueReceive+0x7c>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10c      	bne.n	8007dda <xQueueReceive+0x9a>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	b672      	cpsid	i
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	b662      	cpsie	i
 8007dd4:	61bb      	str	r3, [r7, #24]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dda:	f001 fec7 	bl	8009b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01f      	beq.n	8007e2a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dee:	f000 f8f7 	bl	8007fe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	1e5a      	subs	r2, r3, #1
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00f      	beq.n	8007e22 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	3310      	adds	r3, #16
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 ff98 	bl	8008d3c <xTaskRemoveFromEventList>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e12:	4b3d      	ldr	r3, [pc, #244]	; (8007f08 <xQueueReceive+0x1c8>)
 8007e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e22:	f001 fed7 	bl	8009bd4 <vPortExitCritical>
				return pdPASS;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e069      	b.n	8007efe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d103      	bne.n	8007e38 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e30:	f001 fed0 	bl	8009bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e062      	b.n	8007efe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e3e:	f107 0310 	add.w	r3, r7, #16
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 ffe0 	bl	8008e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e4c:	f001 fec2 	bl	8009bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e50:	f000 fd40 	bl	80088d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e54:	f001 fe8a 	bl	8009b6c <vPortEnterCritical>
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e5e:	b25b      	sxtb	r3, r3
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d103      	bne.n	8007e6e <xQueueReceive+0x12e>
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d103      	bne.n	8007e84 <xQueueReceive+0x144>
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e84:	f001 fea6 	bl	8009bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e88:	1d3a      	adds	r2, r7, #4
 8007e8a:	f107 0310 	add.w	r3, r7, #16
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 ffcf 	bl	8008e34 <xTaskCheckForTimeOut>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d123      	bne.n	8007ee4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e9e:	f000 f917 	bl	80080d0 <prvIsQueueEmpty>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d017      	beq.n	8007ed8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	3324      	adds	r3, #36	; 0x24
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 feef 	bl	8008c94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb8:	f000 f8b8 	bl	800802c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ebc:	f000 fd18 	bl	80088f0 <xTaskResumeAll>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d189      	bne.n	8007dda <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007ec6:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <xQueueReceive+0x1c8>)
 8007ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	e780      	b.n	8007dda <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eda:	f000 f8a7 	bl	800802c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ede:	f000 fd07 	bl	80088f0 <xTaskResumeAll>
 8007ee2:	e77a      	b.n	8007dda <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee6:	f000 f8a1 	bl	800802c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eea:	f000 fd01 	bl	80088f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef0:	f000 f8ee 	bl	80080d0 <prvIsQueueEmpty>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f43f af6f 	beq.w	8007dda <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007efc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3730      	adds	r7, #48	; 0x30
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10d      	bne.n	8007f46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d14d      	bne.n	8007fce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 f8e8 	bl	800910c <xTaskPriorityDisinherit>
 8007f3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	e043      	b.n	8007fce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d119      	bne.n	8007f80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6858      	ldr	r0, [r3, #4]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	461a      	mov	r2, r3
 8007f56:	68b9      	ldr	r1, [r7, #8]
 8007f58:	f002 ff2f 	bl	800adba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d32b      	bcc.n	8007fce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	605a      	str	r2, [r3, #4]
 8007f7e:	e026      	b.n	8007fce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68d8      	ldr	r0, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	461a      	mov	r2, r3
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	f002 ff15 	bl	800adba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	425b      	negs	r3, r3
 8007f9a:	441a      	add	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d207      	bcs.n	8007fbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d105      	bne.n	8007fce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007fd6:	697b      	ldr	r3, [r7, #20]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d018      	beq.n	8008024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	441a      	add	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	429a      	cmp	r2, r3
 800800a:	d303      	bcc.n	8008014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68d9      	ldr	r1, [r3, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	461a      	mov	r2, r3
 800801e:	6838      	ldr	r0, [r7, #0]
 8008020:	f002 fecb 	bl	800adba <memcpy>
	}
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008034:	f001 fd9a 	bl	8009b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800803e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008040:	e011      	b.n	8008066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	d012      	beq.n	8008070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3324      	adds	r3, #36	; 0x24
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fe74 	bl	8008d3c <xTaskRemoveFromEventList>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800805a:	f000 ff51 	bl	8008f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	3b01      	subs	r3, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800806a:	2b00      	cmp	r3, #0
 800806c:	dce9      	bgt.n	8008042 <prvUnlockQueue+0x16>
 800806e:	e000      	b.n	8008072 <prvUnlockQueue+0x46>
					break;
 8008070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800807a:	f001 fdab 	bl	8009bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800807e:	f001 fd75 	bl	8009b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800808a:	e011      	b.n	80080b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d012      	beq.n	80080ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3310      	adds	r3, #16
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fe4f 	bl	8008d3c <xTaskRemoveFromEventList>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080a4:	f000 ff2c 	bl	8008f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dce9      	bgt.n	800808c <prvUnlockQueue+0x60>
 80080b8:	e000      	b.n	80080bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	22ff      	movs	r2, #255	; 0xff
 80080c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080c4:	f001 fd86 	bl	8009bd4 <vPortExitCritical>
}
 80080c8:	bf00      	nop
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080d8:	f001 fd48 	bl	8009b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080e4:	2301      	movs	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e001      	b.n	80080ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080ee:	f001 fd71 	bl	8009bd4 <vPortExitCritical>

	return xReturn;
 80080f2:	68fb      	ldr	r3, [r7, #12]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008104:	f001 fd32 	bl	8009b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	429a      	cmp	r2, r3
 8008112:	d102      	bne.n	800811a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	e001      	b.n	800811e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800811e:	f001 fd59 	bl	8009bd4 <vPortExitCritical>

	return xReturn;
 8008122:	68fb      	ldr	r3, [r7, #12]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	e014      	b.n	8008166 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800813c:	4a0f      	ldr	r2, [pc, #60]	; (800817c <vQueueAddToRegistry+0x50>)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10b      	bne.n	8008160 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008148:	490c      	ldr	r1, [pc, #48]	; (800817c <vQueueAddToRegistry+0x50>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008152:	4a0a      	ldr	r2, [pc, #40]	; (800817c <vQueueAddToRegistry+0x50>)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	4413      	add	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800815e:	e006      	b.n	800816e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b07      	cmp	r3, #7
 800816a:	d9e7      	bls.n	800813c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20001128 	.word	0x20001128

08008180 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008190:	f001 fcec 	bl	8009b6c <vPortEnterCritical>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800819a:	b25b      	sxtb	r3, r3
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d103      	bne.n	80081aa <vQueueWaitForMessageRestricted+0x2a>
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d103      	bne.n	80081c0 <vQueueWaitForMessageRestricted+0x40>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081c0:	f001 fd08 	bl	8009bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	3324      	adds	r3, #36	; 0x24
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fd83 	bl	8008ce0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081da:	6978      	ldr	r0, [r7, #20]
 80081dc:	f7ff ff26 	bl	800802c <prvUnlockQueue>
	}
 80081e0:	bf00      	nop
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08e      	sub	sp, #56	; 0x38
 80081ec:	af04      	add	r7, sp, #16
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10c      	bne.n	8008216 <xTaskCreateStatic+0x2e>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	b672      	cpsid	i
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	b662      	cpsie	i
 8008210:	623b      	str	r3, [r7, #32]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10c      	bne.n	8008236 <xTaskCreateStatic+0x4e>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
 8008230:	61fb      	str	r3, [r7, #28]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008236:	23a8      	movs	r3, #168	; 0xa8
 8008238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2ba8      	cmp	r3, #168	; 0xa8
 800823e:	d00c      	beq.n	800825a <xTaskCreateStatic+0x72>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	b672      	cpsid	i
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	b662      	cpsie	i
 8008254:	61bb      	str	r3, [r7, #24]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800825a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01e      	beq.n	80082a0 <xTaskCreateStatic+0xb8>
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01b      	beq.n	80082a0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008270:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	2202      	movs	r2, #2
 8008276:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800827a:	2300      	movs	r3, #0
 800827c:	9303      	str	r3, [sp, #12]
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	f107 0314 	add.w	r3, r7, #20
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 f850 	bl	8008338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800829a:	f000 f8f5 	bl	8008488 <prvAddNewTaskToReadyList>
 800829e:	e001      	b.n	80082a4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082a4:	697b      	ldr	r3, [r7, #20]
	}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3728      	adds	r7, #40	; 0x28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b08c      	sub	sp, #48	; 0x30
 80082b2:	af04      	add	r7, sp, #16
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 fd7e 	bl	8009dc4 <pvPortMalloc>
 80082c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00e      	beq.n	80082ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082d0:	20a8      	movs	r0, #168	; 0xa8
 80082d2:	f001 fd77 	bl	8009dc4 <pvPortMalloc>
 80082d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30
 80082e4:	e005      	b.n	80082f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082e6:	6978      	ldr	r0, [r7, #20]
 80082e8:	f001 fe36 	bl	8009f58 <vPortFree>
 80082ec:	e001      	b.n	80082f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d017      	beq.n	8008328 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008300:	88fa      	ldrh	r2, [r7, #6]
 8008302:	2300      	movs	r3, #0
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	9302      	str	r3, [sp, #8]
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f80e 	bl	8008338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800831c:	69f8      	ldr	r0, [r7, #28]
 800831e:	f000 f8b3 	bl	8008488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008322:	2301      	movs	r3, #1
 8008324:	61bb      	str	r3, [r7, #24]
 8008326:	e002      	b.n	800832e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008328:	f04f 33ff 	mov.w	r3, #4294967295
 800832c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800832e:	69bb      	ldr	r3, [r7, #24]
	}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	461a      	mov	r2, r3
 8008350:	21a5      	movs	r1, #165	; 0xa5
 8008352:	f002 fc5c 	bl	800ac0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008360:	440b      	add	r3, r1
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	f023 0307 	bic.w	r3, r3, #7
 800836e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00c      	beq.n	8008394 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	b672      	cpsid	i
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	b662      	cpsie	i
 800838e:	617b      	str	r3, [r7, #20]
}
 8008390:	bf00      	nop
 8008392:	e7fe      	b.n	8008392 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01f      	beq.n	80083da <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	e012      	b.n	80083c6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	7819      	ldrb	r1, [r3, #0]
 80083a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	4413      	add	r3, r2
 80083ae:	3334      	adds	r3, #52	; 0x34
 80083b0:	460a      	mov	r2, r1
 80083b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d006      	beq.n	80083ce <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3301      	adds	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	2b0f      	cmp	r3, #15
 80083ca:	d9e9      	bls.n	80083a0 <prvInitialiseNewTask+0x68>
 80083cc:	e000      	b.n	80083d0 <prvInitialiseNewTask+0x98>
			{
				break;
 80083ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083d8:	e003      	b.n	80083e2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	2b37      	cmp	r3, #55	; 0x37
 80083e6:	d901      	bls.n	80083ec <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083e8:	2337      	movs	r3, #55	; 0x37
 80083ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	2200      	movs	r2, #0
 80083fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	3304      	adds	r3, #4
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff f952 	bl	80076ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	3318      	adds	r3, #24
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff f94d 	bl	80076ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008416:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008426:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	2200      	movs	r2, #0
 800842c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	2200      	movs	r2, #0
 8008434:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	3354      	adds	r3, #84	; 0x54
 800843c:	224c      	movs	r2, #76	; 0x4c
 800843e:	2100      	movs	r1, #0
 8008440:	4618      	mov	r0, r3
 8008442:	f002 fbe4 	bl	800ac0e <memset>
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	4a0c      	ldr	r2, [pc, #48]	; (800847c <prvInitialiseNewTask+0x144>)
 800844a:	659a      	str	r2, [r3, #88]	; 0x58
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	4a0c      	ldr	r2, [pc, #48]	; (8008480 <prvInitialiseNewTask+0x148>)
 8008450:	65da      	str	r2, [r3, #92]	; 0x5c
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	4a0b      	ldr	r2, [pc, #44]	; (8008484 <prvInitialiseNewTask+0x14c>)
 8008456:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	69b8      	ldr	r0, [r7, #24]
 800845e:	f001 fa77 	bl	8009950 <pxPortInitialiseStack>
 8008462:	4602      	mov	r2, r0
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008472:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008474:	bf00      	nop
 8008476:	3720      	adds	r7, #32
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200053b4 	.word	0x200053b4
 8008480:	2000541c 	.word	0x2000541c
 8008484:	20005484 	.word	0x20005484

08008488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008490:	f001 fb6c 	bl	8009b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008494:	4b2d      	ldr	r3, [pc, #180]	; (800854c <prvAddNewTaskToReadyList+0xc4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3301      	adds	r3, #1
 800849a:	4a2c      	ldr	r2, [pc, #176]	; (800854c <prvAddNewTaskToReadyList+0xc4>)
 800849c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800849e:	4b2c      	ldr	r3, [pc, #176]	; (8008550 <prvAddNewTaskToReadyList+0xc8>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084a6:	4a2a      	ldr	r2, [pc, #168]	; (8008550 <prvAddNewTaskToReadyList+0xc8>)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084ac:	4b27      	ldr	r3, [pc, #156]	; (800854c <prvAddNewTaskToReadyList+0xc4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d110      	bne.n	80084d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084b4:	f000 fd48 	bl	8008f48 <prvInitialiseTaskLists>
 80084b8:	e00d      	b.n	80084d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084ba:	4b26      	ldr	r3, [pc, #152]	; (8008554 <prvAddNewTaskToReadyList+0xcc>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084c2:	4b23      	ldr	r3, [pc, #140]	; (8008550 <prvAddNewTaskToReadyList+0xc8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d802      	bhi.n	80084d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084d0:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <prvAddNewTaskToReadyList+0xc8>)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084d6:	4b20      	ldr	r3, [pc, #128]	; (8008558 <prvAddNewTaskToReadyList+0xd0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3301      	adds	r3, #1
 80084dc:	4a1e      	ldr	r2, [pc, #120]	; (8008558 <prvAddNewTaskToReadyList+0xd0>)
 80084de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084e0:	4b1d      	ldr	r3, [pc, #116]	; (8008558 <prvAddNewTaskToReadyList+0xd0>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <prvAddNewTaskToReadyList+0xd4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d903      	bls.n	80084fc <prvAddNewTaskToReadyList+0x74>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	4a18      	ldr	r2, [pc, #96]	; (800855c <prvAddNewTaskToReadyList+0xd4>)
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4a15      	ldr	r2, [pc, #84]	; (8008560 <prvAddNewTaskToReadyList+0xd8>)
 800850a:	441a      	add	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f7ff f8d7 	bl	80076c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008518:	f001 fb5c 	bl	8009bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800851c:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <prvAddNewTaskToReadyList+0xcc>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00e      	beq.n	8008542 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008524:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <prvAddNewTaskToReadyList+0xc8>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852e:	429a      	cmp	r2, r3
 8008530:	d207      	bcs.n	8008542 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008532:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <prvAddNewTaskToReadyList+0xdc>)
 8008534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	2000163c 	.word	0x2000163c
 8008550:	20001168 	.word	0x20001168
 8008554:	20001648 	.word	0x20001648
 8008558:	20001658 	.word	0x20001658
 800855c:	20001644 	.word	0x20001644
 8008560:	2000116c 	.word	0x2000116c
 8008564:	e000ed04 	.word	0xe000ed04

08008568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d019      	beq.n	80085ae <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800857a:	4b14      	ldr	r3, [pc, #80]	; (80085cc <vTaskDelay+0x64>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00c      	beq.n	800859c <vTaskDelay+0x34>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	b672      	cpsid	i
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	b662      	cpsie	i
 8008596:	60bb      	str	r3, [r7, #8]
}
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800859c:	f000 f99a 	bl	80088d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085a0:	2100      	movs	r1, #0
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fe24 	bl	80091f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085a8:	f000 f9a2 	bl	80088f0 <xTaskResumeAll>
 80085ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <vTaskDelay+0x68>)
 80085b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20001664 	.word	0x20001664
 80085d0:	e000ed04 	.word	0xe000ed04

080085d4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80085dc:	f001 fac6 	bl	8009b6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d102      	bne.n	80085ec <vTaskSuspend+0x18>
 80085e6:	4b31      	ldr	r3, [pc, #196]	; (80086ac <vTaskSuspend+0xd8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	e000      	b.n	80085ee <vTaskSuspend+0x1a>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff f8c3 	bl	8007780 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3318      	adds	r3, #24
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff f8ba 	bl	8007780 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4827      	ldr	r0, [pc, #156]	; (80086b0 <vTaskSuspend+0xdc>)
 8008614:	f7ff f857 	bl	80076c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b01      	cmp	r3, #1
 8008622:	d103      	bne.n	800862c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800862c:	f001 fad2 	bl	8009bd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008630:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <vTaskSuspend+0xe0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008638:	f001 fa98 	bl	8009b6c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800863c:	f000 fd28 	bl	8009090 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008640:	f001 fac8 	bl	8009bd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008644:	4b19      	ldr	r3, [pc, #100]	; (80086ac <vTaskSuspend+0xd8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	429a      	cmp	r2, r3
 800864c:	d129      	bne.n	80086a2 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800864e:	4b19      	ldr	r3, [pc, #100]	; (80086b4 <vTaskSuspend+0xe0>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d019      	beq.n	800868a <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008656:	4b18      	ldr	r3, [pc, #96]	; (80086b8 <vTaskSuspend+0xe4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <vTaskSuspend+0xa4>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	b672      	cpsid	i
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	b662      	cpsie	i
 8008672:	60bb      	str	r3, [r7, #8]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <vTaskSuspend+0xe8>)
 800867a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008688:	e00b      	b.n	80086a2 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <vTaskSuspend+0xdc>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <vTaskSuspend+0xec>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d103      	bne.n	800869e <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8008696:	4b05      	ldr	r3, [pc, #20]	; (80086ac <vTaskSuspend+0xd8>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
	}
 800869c:	e001      	b.n	80086a2 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800869e:	f000 fa93 	bl	8008bc8 <vTaskSwitchContext>
	}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20001168 	.word	0x20001168
 80086b0:	20001628 	.word	0x20001628
 80086b4:	20001648 	.word	0x20001648
 80086b8:	20001664 	.word	0x20001664
 80086bc:	e000ed04 	.word	0xe000ed04
 80086c0:	2000163c 	.word	0x2000163c

080086c4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10c      	bne.n	80086f4 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	b672      	cpsid	i
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	b662      	cpsie	i
 80086ee:	60fb      	str	r3, [r7, #12]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <prvTaskIsTaskSuspended+0x60>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d10a      	bne.n	8008714 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	4a09      	ldr	r2, [pc, #36]	; (8008728 <prvTaskIsTaskSuspended+0x64>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d005      	beq.n	8008714 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8008710:	2301      	movs	r3, #1
 8008712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008714:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008716:	4618      	mov	r0, r3
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20001628 	.word	0x20001628
 8008728:	200015fc 	.word	0x200015fc

0800872c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10c      	bne.n	8008758 <vTaskResume+0x2c>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	b672      	cpsid	i
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	b662      	cpsie	i
 8008752:	60bb      	str	r3, [r7, #8]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008758:	4b20      	ldr	r3, [pc, #128]	; (80087dc <vTaskResume+0xb0>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	429a      	cmp	r2, r3
 8008760:	d038      	beq.n	80087d4 <vTaskResume+0xa8>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d035      	beq.n	80087d4 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8008768:	f001 fa00 	bl	8009b6c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7ff ffa9 	bl	80086c4 <prvTaskIsTaskSuspended>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d02b      	beq.n	80087d0 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3304      	adds	r3, #4
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe ffff 	bl	8007780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008786:	4b16      	ldr	r3, [pc, #88]	; (80087e0 <vTaskResume+0xb4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d903      	bls.n	8008796 <vTaskResume+0x6a>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	4a13      	ldr	r2, [pc, #76]	; (80087e0 <vTaskResume+0xb4>)
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4a10      	ldr	r2, [pc, #64]	; (80087e4 <vTaskResume+0xb8>)
 80087a4:	441a      	add	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3304      	adds	r3, #4
 80087aa:	4619      	mov	r1, r3
 80087ac:	4610      	mov	r0, r2
 80087ae:	f7fe ff8a 	bl	80076c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b6:	4b09      	ldr	r3, [pc, #36]	; (80087dc <vTaskResume+0xb0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087bc:	429a      	cmp	r2, r3
 80087be:	d307      	bcc.n	80087d0 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80087c0:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <vTaskResume+0xbc>)
 80087c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80087d0:	f001 fa00 	bl	8009bd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087d4:	bf00      	nop
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20001168 	.word	0x20001168
 80087e0:	20001644 	.word	0x20001644
 80087e4:	2000116c 	.word	0x2000116c
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087fa:	463a      	mov	r2, r7
 80087fc:	1d39      	adds	r1, r7, #4
 80087fe:	f107 0308 	add.w	r3, r7, #8
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fefe 	bl	8007604 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	9202      	str	r2, [sp, #8]
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	2300      	movs	r3, #0
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	2300      	movs	r3, #0
 8008818:	460a      	mov	r2, r1
 800881a:	4926      	ldr	r1, [pc, #152]	; (80088b4 <vTaskStartScheduler+0xc8>)
 800881c:	4826      	ldr	r0, [pc, #152]	; (80088b8 <vTaskStartScheduler+0xcc>)
 800881e:	f7ff fce3 	bl	80081e8 <xTaskCreateStatic>
 8008822:	4603      	mov	r3, r0
 8008824:	4a25      	ldr	r2, [pc, #148]	; (80088bc <vTaskStartScheduler+0xd0>)
 8008826:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008828:	4b24      	ldr	r3, [pc, #144]	; (80088bc <vTaskStartScheduler+0xd0>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008830:	2301      	movs	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	e001      	b.n	800883a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d102      	bne.n	8008846 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008840:	f000 fd2a 	bl	8009298 <xTimerCreateTimerTask>
 8008844:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d11d      	bne.n	8008888 <vTaskStartScheduler+0x9c>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	b672      	cpsid	i
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	b662      	cpsie	i
 8008860:	613b      	str	r3, [r7, #16]
}
 8008862:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008864:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <vTaskStartScheduler+0xd4>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3354      	adds	r3, #84	; 0x54
 800886a:	4a16      	ldr	r2, [pc, #88]	; (80088c4 <vTaskStartScheduler+0xd8>)
 800886c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800886e:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <vTaskStartScheduler+0xdc>)
 8008870:	f04f 32ff 	mov.w	r2, #4294967295
 8008874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008876:	4b15      	ldr	r3, [pc, #84]	; (80088cc <vTaskStartScheduler+0xe0>)
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800887c:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <vTaskStartScheduler+0xe4>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008882:	f001 f8f5 	bl	8009a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008886:	e010      	b.n	80088aa <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888e:	d10c      	bne.n	80088aa <vTaskStartScheduler+0xbe>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	b672      	cpsid	i
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	b662      	cpsie	i
 80088a4:	60fb      	str	r3, [r7, #12]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <vTaskStartScheduler+0xbc>
}
 80088aa:	bf00      	nop
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	0800d06c 	.word	0x0800d06c
 80088b8:	08008f19 	.word	0x08008f19
 80088bc:	20001660 	.word	0x20001660
 80088c0:	20001168 	.word	0x20001168
 80088c4:	20000084 	.word	0x20000084
 80088c8:	2000165c 	.word	0x2000165c
 80088cc:	20001648 	.word	0x20001648
 80088d0:	20001640 	.word	0x20001640

080088d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <vTaskSuspendAll+0x18>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	4a03      	ldr	r2, [pc, #12]	; (80088ec <vTaskSuspendAll+0x18>)
 80088e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80088e2:	bf00      	nop
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	20001664 	.word	0x20001664

080088f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088fe:	4b43      	ldr	r3, [pc, #268]	; (8008a0c <xTaskResumeAll+0x11c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10c      	bne.n	8008920 <xTaskResumeAll+0x30>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	b672      	cpsid	i
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	b662      	cpsie	i
 800891a:	603b      	str	r3, [r7, #0]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008920:	f001 f924 	bl	8009b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008924:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <xTaskResumeAll+0x11c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3b01      	subs	r3, #1
 800892a:	4a38      	ldr	r2, [pc, #224]	; (8008a0c <xTaskResumeAll+0x11c>)
 800892c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800892e:	4b37      	ldr	r3, [pc, #220]	; (8008a0c <xTaskResumeAll+0x11c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d162      	bne.n	80089fc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008936:	4b36      	ldr	r3, [pc, #216]	; (8008a10 <xTaskResumeAll+0x120>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d05e      	beq.n	80089fc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800893e:	e02f      	b.n	80089a0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008940:	4b34      	ldr	r3, [pc, #208]	; (8008a14 <xTaskResumeAll+0x124>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3318      	adds	r3, #24
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe ff17 	bl	8007780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3304      	adds	r3, #4
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe ff12 	bl	8007780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008960:	4b2d      	ldr	r3, [pc, #180]	; (8008a18 <xTaskResumeAll+0x128>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d903      	bls.n	8008970 <xTaskResumeAll+0x80>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	4a2a      	ldr	r2, [pc, #168]	; (8008a18 <xTaskResumeAll+0x128>)
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4a27      	ldr	r2, [pc, #156]	; (8008a1c <xTaskResumeAll+0x12c>)
 800897e:	441a      	add	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7fe fe9d 	bl	80076c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008990:	4b23      	ldr	r3, [pc, #140]	; (8008a20 <xTaskResumeAll+0x130>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	429a      	cmp	r2, r3
 8008998:	d302      	bcc.n	80089a0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800899a:	4b22      	ldr	r3, [pc, #136]	; (8008a24 <xTaskResumeAll+0x134>)
 800899c:	2201      	movs	r2, #1
 800899e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089a0:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <xTaskResumeAll+0x124>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1cb      	bne.n	8008940 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089ae:	f000 fb6f 	bl	8009090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089b2:	4b1d      	ldr	r3, [pc, #116]	; (8008a28 <xTaskResumeAll+0x138>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d010      	beq.n	80089e0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089be:	f000 f847 	bl	8008a50 <xTaskIncrementTick>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80089c8:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <xTaskResumeAll+0x134>)
 80089ca:	2201      	movs	r2, #1
 80089cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f1      	bne.n	80089be <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80089da:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <xTaskResumeAll+0x138>)
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089e0:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <xTaskResumeAll+0x134>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089e8:	2301      	movs	r3, #1
 80089ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089ec:	4b0f      	ldr	r3, [pc, #60]	; (8008a2c <xTaskResumeAll+0x13c>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089fc:	f001 f8ea 	bl	8009bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a00:	68bb      	ldr	r3, [r7, #8]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20001664 	.word	0x20001664
 8008a10:	2000163c 	.word	0x2000163c
 8008a14:	200015fc 	.word	0x200015fc
 8008a18:	20001644 	.word	0x20001644
 8008a1c:	2000116c 	.word	0x2000116c
 8008a20:	20001168 	.word	0x20001168
 8008a24:	20001650 	.word	0x20001650
 8008a28:	2000164c 	.word	0x2000164c
 8008a2c:	e000ed04 	.word	0xe000ed04

08008a30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <xTaskGetTickCount+0x1c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a3c:	687b      	ldr	r3, [r7, #4]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20001640 	.word	0x20001640

08008a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a5a:	4b50      	ldr	r3, [pc, #320]	; (8008b9c <xTaskIncrementTick+0x14c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f040 808b 	bne.w	8008b7a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a64:	4b4e      	ldr	r3, [pc, #312]	; (8008ba0 <xTaskIncrementTick+0x150>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a6c:	4a4c      	ldr	r2, [pc, #304]	; (8008ba0 <xTaskIncrementTick+0x150>)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d122      	bne.n	8008abe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a78:	4b4a      	ldr	r3, [pc, #296]	; (8008ba4 <xTaskIncrementTick+0x154>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00c      	beq.n	8008a9c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	b672      	cpsid	i
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	b662      	cpsie	i
 8008a96:	603b      	str	r3, [r7, #0]
}
 8008a98:	bf00      	nop
 8008a9a:	e7fe      	b.n	8008a9a <xTaskIncrementTick+0x4a>
 8008a9c:	4b41      	ldr	r3, [pc, #260]	; (8008ba4 <xTaskIncrementTick+0x154>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	4b41      	ldr	r3, [pc, #260]	; (8008ba8 <xTaskIncrementTick+0x158>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a3f      	ldr	r2, [pc, #252]	; (8008ba4 <xTaskIncrementTick+0x154>)
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	; (8008ba8 <xTaskIncrementTick+0x158>)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4b3e      	ldr	r3, [pc, #248]	; (8008bac <xTaskIncrementTick+0x15c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	4a3d      	ldr	r2, [pc, #244]	; (8008bac <xTaskIncrementTick+0x15c>)
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	f000 fae9 	bl	8009090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008abe:	4b3c      	ldr	r3, [pc, #240]	; (8008bb0 <xTaskIncrementTick+0x160>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d349      	bcc.n	8008b5c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ac8:	4b36      	ldr	r3, [pc, #216]	; (8008ba4 <xTaskIncrementTick+0x154>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d104      	bne.n	8008adc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad2:	4b37      	ldr	r3, [pc, #220]	; (8008bb0 <xTaskIncrementTick+0x160>)
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad8:	601a      	str	r2, [r3, #0]
					break;
 8008ada:	e03f      	b.n	8008b5c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008adc:	4b31      	ldr	r3, [pc, #196]	; (8008ba4 <xTaskIncrementTick+0x154>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d203      	bcs.n	8008afc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008af4:	4a2e      	ldr	r2, [pc, #184]	; (8008bb0 <xTaskIncrementTick+0x160>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008afa:	e02f      	b.n	8008b5c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fe3d 	bl	8007780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	3318      	adds	r3, #24
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fe34 	bl	8007780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1c:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <xTaskIncrementTick+0x164>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d903      	bls.n	8008b2c <xTaskIncrementTick+0xdc>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	4a22      	ldr	r2, [pc, #136]	; (8008bb4 <xTaskIncrementTick+0x164>)
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4a1f      	ldr	r2, [pc, #124]	; (8008bb8 <xTaskIncrementTick+0x168>)
 8008b3a:	441a      	add	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f7fe fdbf 	bl	80076c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4c:	4b1b      	ldr	r3, [pc, #108]	; (8008bbc <xTaskIncrementTick+0x16c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d3b8      	bcc.n	8008ac8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008b56:	2301      	movs	r3, #1
 8008b58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b5a:	e7b5      	b.n	8008ac8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b5c:	4b17      	ldr	r3, [pc, #92]	; (8008bbc <xTaskIncrementTick+0x16c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b62:	4915      	ldr	r1, [pc, #84]	; (8008bb8 <xTaskIncrementTick+0x168>)
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d907      	bls.n	8008b84 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008b74:	2301      	movs	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	e004      	b.n	8008b84 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b7a:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <xTaskIncrementTick+0x170>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <xTaskIncrementTick+0x170>)
 8008b82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b84:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <xTaskIncrementTick+0x174>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b90:	697b      	ldr	r3, [r7, #20]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20001664 	.word	0x20001664
 8008ba0:	20001640 	.word	0x20001640
 8008ba4:	200015f4 	.word	0x200015f4
 8008ba8:	200015f8 	.word	0x200015f8
 8008bac:	20001654 	.word	0x20001654
 8008bb0:	2000165c 	.word	0x2000165c
 8008bb4:	20001644 	.word	0x20001644
 8008bb8:	2000116c 	.word	0x2000116c
 8008bbc:	20001168 	.word	0x20001168
 8008bc0:	2000164c 	.word	0x2000164c
 8008bc4:	20001650 	.word	0x20001650

08008bc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bce:	4b2b      	ldr	r3, [pc, #172]	; (8008c7c <vTaskSwitchContext+0xb4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bd6:	4b2a      	ldr	r3, [pc, #168]	; (8008c80 <vTaskSwitchContext+0xb8>)
 8008bd8:	2201      	movs	r2, #1
 8008bda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bdc:	e048      	b.n	8008c70 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008bde:	4b28      	ldr	r3, [pc, #160]	; (8008c80 <vTaskSwitchContext+0xb8>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be4:	4b27      	ldr	r3, [pc, #156]	; (8008c84 <vTaskSwitchContext+0xbc>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	e012      	b.n	8008c12 <vTaskSwitchContext+0x4a>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10c      	bne.n	8008c0c <vTaskSwitchContext+0x44>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	b672      	cpsid	i
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	b662      	cpsie	i
 8008c06:	607b      	str	r3, [r7, #4]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <vTaskSwitchContext+0x42>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	491d      	ldr	r1, [pc, #116]	; (8008c88 <vTaskSwitchContext+0xc0>)
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0e2      	beq.n	8008bec <vTaskSwitchContext+0x24>
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4a15      	ldr	r2, [pc, #84]	; (8008c88 <vTaskSwitchContext+0xc0>)
 8008c32:	4413      	add	r3, r2
 8008c34:	60bb      	str	r3, [r7, #8]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	605a      	str	r2, [r3, #4]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	3308      	adds	r3, #8
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d104      	bne.n	8008c56 <vTaskSwitchContext+0x8e>
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	605a      	str	r2, [r3, #4]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	4a0b      	ldr	r2, [pc, #44]	; (8008c8c <vTaskSwitchContext+0xc4>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	4a08      	ldr	r2, [pc, #32]	; (8008c84 <vTaskSwitchContext+0xbc>)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c66:	4b09      	ldr	r3, [pc, #36]	; (8008c8c <vTaskSwitchContext+0xc4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3354      	adds	r3, #84	; 0x54
 8008c6c:	4a08      	ldr	r2, [pc, #32]	; (8008c90 <vTaskSwitchContext+0xc8>)
 8008c6e:	6013      	str	r3, [r2, #0]
}
 8008c70:	bf00      	nop
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	20001664 	.word	0x20001664
 8008c80:	20001650 	.word	0x20001650
 8008c84:	20001644 	.word	0x20001644
 8008c88:	2000116c 	.word	0x2000116c
 8008c8c:	20001168 	.word	0x20001168
 8008c90:	20000084 	.word	0x20000084

08008c94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10c      	bne.n	8008cbe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	b672      	cpsid	i
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	b662      	cpsie	i
 8008cb8:	60fb      	str	r3, [r7, #12]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cbe:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <vTaskPlaceOnEventList+0x48>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3318      	adds	r3, #24
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7fe fd21 	bl	800770e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ccc:	2101      	movs	r1, #1
 8008cce:	6838      	ldr	r0, [r7, #0]
 8008cd0:	f000 fa8e 	bl	80091f0 <prvAddCurrentTaskToDelayedList>
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20001168 	.word	0x20001168

08008ce0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10c      	bne.n	8008d0c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	b672      	cpsid	i
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	b662      	cpsie	i
 8008d06:	617b      	str	r3, [r7, #20]
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	; (8008d38 <vTaskPlaceOnEventListRestricted+0x58>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3318      	adds	r3, #24
 8008d12:	4619      	mov	r1, r3
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7fe fcd6 	bl	80076c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008d20:	f04f 33ff 	mov.w	r3, #4294967295
 8008d24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	68b8      	ldr	r0, [r7, #8]
 8008d2a:	f000 fa61 	bl	80091f0 <prvAddCurrentTaskToDelayedList>
	}
 8008d2e:	bf00      	nop
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20001168 	.word	0x20001168

08008d3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10c      	bne.n	8008d6c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	b672      	cpsid	i
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	b662      	cpsie	i
 8008d66:	60fb      	str	r3, [r7, #12]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	3318      	adds	r3, #24
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fd05 	bl	8007780 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d76:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <xTaskRemoveFromEventList+0xb4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d11d      	bne.n	8008dba <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fcfc 	bl	8007780 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4b19      	ldr	r3, [pc, #100]	; (8008df4 <xTaskRemoveFromEventList+0xb8>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d903      	bls.n	8008d9c <xTaskRemoveFromEventList+0x60>
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	4a16      	ldr	r2, [pc, #88]	; (8008df4 <xTaskRemoveFromEventList+0xb8>)
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4a13      	ldr	r2, [pc, #76]	; (8008df8 <xTaskRemoveFromEventList+0xbc>)
 8008daa:	441a      	add	r2, r3
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe fc87 	bl	80076c6 <vListInsertEnd>
 8008db8:	e005      	b.n	8008dc6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	3318      	adds	r3, #24
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	480e      	ldr	r0, [pc, #56]	; (8008dfc <xTaskRemoveFromEventList+0xc0>)
 8008dc2:	f7fe fc80 	bl	80076c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dca:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <xTaskRemoveFromEventList+0xc4>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d905      	bls.n	8008de0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <xTaskRemoveFromEventList+0xc8>)
 8008dda:	2201      	movs	r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	e001      	b.n	8008de4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008de4:	697b      	ldr	r3, [r7, #20]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20001664 	.word	0x20001664
 8008df4:	20001644 	.word	0x20001644
 8008df8:	2000116c 	.word	0x2000116c
 8008dfc:	200015fc 	.word	0x200015fc
 8008e00:	20001168 	.word	0x20001168
 8008e04:	20001650 	.word	0x20001650

08008e08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e10:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <vTaskInternalSetTimeOutState+0x24>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e18:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <vTaskInternalSetTimeOutState+0x28>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	605a      	str	r2, [r3, #4]
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20001654 	.word	0x20001654
 8008e30:	20001640 	.word	0x20001640

08008e34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10c      	bne.n	8008e5e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	b672      	cpsid	i
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	b662      	cpsie	i
 8008e58:	613b      	str	r3, [r7, #16]
}
 8008e5a:	bf00      	nop
 8008e5c:	e7fe      	b.n	8008e5c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10c      	bne.n	8008e7e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	b672      	cpsid	i
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	b662      	cpsie	i
 8008e78:	60fb      	str	r3, [r7, #12]
}
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008e7e:	f000 fe75 	bl	8009b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e82:	4b1d      	ldr	r3, [pc, #116]	; (8008ef8 <xTaskCheckForTimeOut+0xc4>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d102      	bne.n	8008ea2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	e023      	b.n	8008eea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4b15      	ldr	r3, [pc, #84]	; (8008efc <xTaskCheckForTimeOut+0xc8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d007      	beq.n	8008ebe <xTaskCheckForTimeOut+0x8a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d302      	bcc.n	8008ebe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	e015      	b.n	8008eea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d20b      	bcs.n	8008ee0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff ff97 	bl	8008e08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	e004      	b.n	8008eea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008eea:	f000 fe73 	bl	8009bd4 <vPortExitCritical>

	return xReturn;
 8008eee:	69fb      	ldr	r3, [r7, #28]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3720      	adds	r7, #32
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20001640 	.word	0x20001640
 8008efc:	20001654 	.word	0x20001654

08008f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f04:	4b03      	ldr	r3, [pc, #12]	; (8008f14 <vTaskMissedYield+0x14>)
 8008f06:	2201      	movs	r2, #1
 8008f08:	601a      	str	r2, [r3, #0]
}
 8008f0a:	bf00      	nop
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	20001650 	.word	0x20001650

08008f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f20:	f000 f852 	bl	8008fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f24:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <prvIdleTask+0x28>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d9f9      	bls.n	8008f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f2c:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <prvIdleTask+0x2c>)
 8008f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f3c:	e7f0      	b.n	8008f20 <prvIdleTask+0x8>
 8008f3e:	bf00      	nop
 8008f40:	2000116c 	.word	0x2000116c
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f4e:	2300      	movs	r3, #0
 8008f50:	607b      	str	r3, [r7, #4]
 8008f52:	e00c      	b.n	8008f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4a12      	ldr	r2, [pc, #72]	; (8008fa8 <prvInitialiseTaskLists+0x60>)
 8008f60:	4413      	add	r3, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fb82 	bl	800766c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	607b      	str	r3, [r7, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b37      	cmp	r3, #55	; 0x37
 8008f72:	d9ef      	bls.n	8008f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f74:	480d      	ldr	r0, [pc, #52]	; (8008fac <prvInitialiseTaskLists+0x64>)
 8008f76:	f7fe fb79 	bl	800766c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f7a:	480d      	ldr	r0, [pc, #52]	; (8008fb0 <prvInitialiseTaskLists+0x68>)
 8008f7c:	f7fe fb76 	bl	800766c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f80:	480c      	ldr	r0, [pc, #48]	; (8008fb4 <prvInitialiseTaskLists+0x6c>)
 8008f82:	f7fe fb73 	bl	800766c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f86:	480c      	ldr	r0, [pc, #48]	; (8008fb8 <prvInitialiseTaskLists+0x70>)
 8008f88:	f7fe fb70 	bl	800766c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f8c:	480b      	ldr	r0, [pc, #44]	; (8008fbc <prvInitialiseTaskLists+0x74>)
 8008f8e:	f7fe fb6d 	bl	800766c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <prvInitialiseTaskLists+0x78>)
 8008f94:	4a05      	ldr	r2, [pc, #20]	; (8008fac <prvInitialiseTaskLists+0x64>)
 8008f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <prvInitialiseTaskLists+0x7c>)
 8008f9a:	4a05      	ldr	r2, [pc, #20]	; (8008fb0 <prvInitialiseTaskLists+0x68>)
 8008f9c:	601a      	str	r2, [r3, #0]
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	2000116c 	.word	0x2000116c
 8008fac:	200015cc 	.word	0x200015cc
 8008fb0:	200015e0 	.word	0x200015e0
 8008fb4:	200015fc 	.word	0x200015fc
 8008fb8:	20001610 	.word	0x20001610
 8008fbc:	20001628 	.word	0x20001628
 8008fc0:	200015f4 	.word	0x200015f4
 8008fc4:	200015f8 	.word	0x200015f8

08008fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fce:	e019      	b.n	8009004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fd0:	f000 fdcc 	bl	8009b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fd4:	4b10      	ldr	r3, [pc, #64]	; (8009018 <prvCheckTasksWaitingTermination+0x50>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe fbcd 	bl	8007780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fe6:	4b0d      	ldr	r3, [pc, #52]	; (800901c <prvCheckTasksWaitingTermination+0x54>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	4a0b      	ldr	r2, [pc, #44]	; (800901c <prvCheckTasksWaitingTermination+0x54>)
 8008fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ff0:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <prvCheckTasksWaitingTermination+0x58>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	4a0a      	ldr	r2, [pc, #40]	; (8009020 <prvCheckTasksWaitingTermination+0x58>)
 8008ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ffa:	f000 fdeb 	bl	8009bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f810 	bl	8009024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009004:	4b06      	ldr	r3, [pc, #24]	; (8009020 <prvCheckTasksWaitingTermination+0x58>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e1      	bne.n	8008fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800900c:	bf00      	nop
 800900e:	bf00      	nop
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20001610 	.word	0x20001610
 800901c:	2000163c 	.word	0x2000163c
 8009020:	20001624 	.word	0x20001624

08009024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3354      	adds	r3, #84	; 0x54
 8009030:	4618      	mov	r0, r3
 8009032:	f001 fe09 	bl	800ac48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800903c:	2b00      	cmp	r3, #0
 800903e:	d108      	bne.n	8009052 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009044:	4618      	mov	r0, r3
 8009046:	f000 ff87 	bl	8009f58 <vPortFree>
				vPortFree( pxTCB );
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 ff84 	bl	8009f58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009050:	e01a      	b.n	8009088 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009058:	2b01      	cmp	r3, #1
 800905a:	d103      	bne.n	8009064 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 ff7b 	bl	8009f58 <vPortFree>
	}
 8009062:	e011      	b.n	8009088 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800906a:	2b02      	cmp	r3, #2
 800906c:	d00c      	beq.n	8009088 <prvDeleteTCB+0x64>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	b672      	cpsid	i
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	b662      	cpsie	i
 8009082:	60fb      	str	r3, [r7, #12]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <prvDeleteTCB+0x62>
	}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009096:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <prvResetNextTaskUnblockTime+0x38>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d104      	bne.n	80090aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090a0:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <prvResetNextTaskUnblockTime+0x3c>)
 80090a2:	f04f 32ff 	mov.w	r2, #4294967295
 80090a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090a8:	e008      	b.n	80090bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <prvResetNextTaskUnblockTime+0x38>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	4a04      	ldr	r2, [pc, #16]	; (80090cc <prvResetNextTaskUnblockTime+0x3c>)
 80090ba:	6013      	str	r3, [r2, #0]
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	200015f4 	.word	0x200015f4
 80090cc:	2000165c 	.word	0x2000165c

080090d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090d6:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <xTaskGetSchedulerState+0x34>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090de:	2301      	movs	r3, #1
 80090e0:	607b      	str	r3, [r7, #4]
 80090e2:	e008      	b.n	80090f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090e4:	4b08      	ldr	r3, [pc, #32]	; (8009108 <xTaskGetSchedulerState+0x38>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d102      	bne.n	80090f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090ec:	2302      	movs	r3, #2
 80090ee:	607b      	str	r3, [r7, #4]
 80090f0:	e001      	b.n	80090f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090f2:	2300      	movs	r3, #0
 80090f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090f6:	687b      	ldr	r3, [r7, #4]
	}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	20001648 	.word	0x20001648
 8009108:	20001664 	.word	0x20001664

0800910c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009118:	2300      	movs	r3, #0
 800911a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d05a      	beq.n	80091d8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009122:	4b30      	ldr	r3, [pc, #192]	; (80091e4 <xTaskPriorityDisinherit+0xd8>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	429a      	cmp	r2, r3
 800912a:	d00c      	beq.n	8009146 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	b672      	cpsid	i
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	b662      	cpsie	i
 8009140:	60fb      	str	r3, [r7, #12]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10c      	bne.n	8009168 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	b672      	cpsid	i
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	b662      	cpsie	i
 8009162:	60bb      	str	r3, [r7, #8]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916c:	1e5a      	subs	r2, r3, #1
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917a:	429a      	cmp	r2, r3
 800917c:	d02c      	beq.n	80091d8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	2b00      	cmp	r3, #0
 8009184:	d128      	bne.n	80091d8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	3304      	adds	r3, #4
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe faf8 	bl	8007780 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <xTaskPriorityDisinherit+0xdc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d903      	bls.n	80091b8 <xTaskPriorityDisinherit+0xac>
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	4a0c      	ldr	r2, [pc, #48]	; (80091e8 <xTaskPriorityDisinherit+0xdc>)
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a09      	ldr	r2, [pc, #36]	; (80091ec <xTaskPriorityDisinherit+0xe0>)
 80091c6:	441a      	add	r2, r3
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe fa79 	bl	80076c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091d8:	697b      	ldr	r3, [r7, #20]
	}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20001168 	.word	0x20001168
 80091e8:	20001644 	.word	0x20001644
 80091ec:	2000116c 	.word	0x2000116c

080091f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091fa:	4b21      	ldr	r3, [pc, #132]	; (8009280 <prvAddCurrentTaskToDelayedList+0x90>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009200:	4b20      	ldr	r3, [pc, #128]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3304      	adds	r3, #4
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe faba 	bl	8007780 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009212:	d10a      	bne.n	800922a <prvAddCurrentTaskToDelayedList+0x3a>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800921a:	4b1a      	ldr	r3, [pc, #104]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4819      	ldr	r0, [pc, #100]	; (8009288 <prvAddCurrentTaskToDelayedList+0x98>)
 8009224:	f7fe fa4f 	bl	80076c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009228:	e026      	b.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4413      	add	r3, r2
 8009230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009232:	4b14      	ldr	r3, [pc, #80]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	429a      	cmp	r2, r3
 8009240:	d209      	bcs.n	8009256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009242:	4b12      	ldr	r3, [pc, #72]	; (800928c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3304      	adds	r3, #4
 800924c:	4619      	mov	r1, r3
 800924e:	4610      	mov	r0, r2
 8009250:	f7fe fa5d 	bl	800770e <vListInsert>
}
 8009254:	e010      	b.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009256:	4b0e      	ldr	r3, [pc, #56]	; (8009290 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f7fe fa53 	bl	800770e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	429a      	cmp	r2, r3
 8009270:	d202      	bcs.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009272:	4a08      	ldr	r2, [pc, #32]	; (8009294 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	6013      	str	r3, [r2, #0]
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	20001640 	.word	0x20001640
 8009284:	20001168 	.word	0x20001168
 8009288:	20001628 	.word	0x20001628
 800928c:	200015f8 	.word	0x200015f8
 8009290:	200015f4 	.word	0x200015f4
 8009294:	2000165c 	.word	0x2000165c

08009298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	; 0x28
 800929c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092a2:	f000 fb15 	bl	80098d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092a6:	4b1d      	ldr	r3, [pc, #116]	; (800931c <xTimerCreateTimerTask+0x84>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d021      	beq.n	80092f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092b6:	1d3a      	adds	r2, r7, #4
 80092b8:	f107 0108 	add.w	r1, r7, #8
 80092bc:	f107 030c 	add.w	r3, r7, #12
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe f9b9 	bl	8007638 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	9202      	str	r2, [sp, #8]
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	2302      	movs	r3, #2
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	2300      	movs	r3, #0
 80092d6:	460a      	mov	r2, r1
 80092d8:	4911      	ldr	r1, [pc, #68]	; (8009320 <xTimerCreateTimerTask+0x88>)
 80092da:	4812      	ldr	r0, [pc, #72]	; (8009324 <xTimerCreateTimerTask+0x8c>)
 80092dc:	f7fe ff84 	bl	80081e8 <xTaskCreateStatic>
 80092e0:	4603      	mov	r3, r0
 80092e2:	4a11      	ldr	r2, [pc, #68]	; (8009328 <xTimerCreateTimerTask+0x90>)
 80092e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092e6:	4b10      	ldr	r3, [pc, #64]	; (8009328 <xTimerCreateTimerTask+0x90>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092ee:	2301      	movs	r3, #1
 80092f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10c      	bne.n	8009312 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fc:	b672      	cpsid	i
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	b662      	cpsie	i
 800930c:	613b      	str	r3, [r7, #16]
}
 800930e:	bf00      	nop
 8009310:	e7fe      	b.n	8009310 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009312:	697b      	ldr	r3, [r7, #20]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20001698 	.word	0x20001698
 8009320:	0800d074 	.word	0x0800d074
 8009324:	08009469 	.word	0x08009469
 8009328:	2000169c 	.word	0x2000169c

0800932c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08a      	sub	sp, #40	; 0x28
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800933a:	2300      	movs	r3, #0
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10c      	bne.n	800935e <xTimerGenericCommand+0x32>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	b672      	cpsid	i
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	b662      	cpsie	i
 8009358:	623b      	str	r3, [r7, #32]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800935e:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <xTimerGenericCommand+0x9c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d02a      	beq.n	80093bc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b05      	cmp	r3, #5
 8009376:	dc18      	bgt.n	80093aa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009378:	f7ff feaa 	bl	80090d0 <xTaskGetSchedulerState>
 800937c:	4603      	mov	r3, r0
 800937e:	2b02      	cmp	r3, #2
 8009380:	d109      	bne.n	8009396 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009382:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <xTimerGenericCommand+0x9c>)
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	f107 0110 	add.w	r1, r7, #16
 800938a:	2300      	movs	r3, #0
 800938c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938e:	f7fe fb31 	bl	80079f4 <xQueueGenericSend>
 8009392:	6278      	str	r0, [r7, #36]	; 0x24
 8009394:	e012      	b.n	80093bc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009396:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <xTimerGenericCommand+0x9c>)
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	f107 0110 	add.w	r1, r7, #16
 800939e:	2300      	movs	r3, #0
 80093a0:	2200      	movs	r2, #0
 80093a2:	f7fe fb27 	bl	80079f4 <xQueueGenericSend>
 80093a6:	6278      	str	r0, [r7, #36]	; 0x24
 80093a8:	e008      	b.n	80093bc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093aa:	4b07      	ldr	r3, [pc, #28]	; (80093c8 <xTimerGenericCommand+0x9c>)
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	f107 0110 	add.w	r1, r7, #16
 80093b2:	2300      	movs	r3, #0
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	f7fe fc23 	bl	8007c00 <xQueueGenericSendFromISR>
 80093ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3728      	adds	r7, #40	; 0x28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20001698 	.word	0x20001698

080093cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af02      	add	r7, sp, #8
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d6:	4b23      	ldr	r3, [pc, #140]	; (8009464 <prvProcessExpiredTimer+0x98>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	3304      	adds	r3, #4
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe f9cb 	bl	8007780 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d024      	beq.n	8009442 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	699a      	ldr	r2, [r3, #24]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	18d1      	adds	r1, r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	6978      	ldr	r0, [r7, #20]
 8009406:	f000 f8d3 	bl	80095b0 <prvInsertTimerInActiveList>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d021      	beq.n	8009454 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009410:	2300      	movs	r3, #0
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	2300      	movs	r3, #0
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	2100      	movs	r1, #0
 800941a:	6978      	ldr	r0, [r7, #20]
 800941c:	f7ff ff86 	bl	800932c <xTimerGenericCommand>
 8009420:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d115      	bne.n	8009454 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	b672      	cpsid	i
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	b662      	cpsie	i
 800943c:	60fb      	str	r3, [r7, #12]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009448:	f023 0301 	bic.w	r3, r3, #1
 800944c:	b2da      	uxtb	r2, r3
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	6978      	ldr	r0, [r7, #20]
 800945a:	4798      	blx	r3
}
 800945c:	bf00      	nop
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20001690 	.word	0x20001690

08009468 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009470:	f107 0308 	add.w	r3, r7, #8
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f857 	bl	8009528 <prvGetNextExpireTime>
 800947a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4619      	mov	r1, r3
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 f803 	bl	800948c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009486:	f000 f8d5 	bl	8009634 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800948a:	e7f1      	b.n	8009470 <prvTimerTask+0x8>

0800948c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009496:	f7ff fa1d 	bl	80088d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800949a:	f107 0308 	add.w	r3, r7, #8
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 f866 	bl	8009570 <prvSampleTimeNow>
 80094a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d130      	bne.n	800950e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <prvProcessTimerOrBlockTask+0x3c>
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d806      	bhi.n	80094c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094ba:	f7ff fa19 	bl	80088f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff ff83 	bl	80093cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094c6:	e024      	b.n	8009512 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d008      	beq.n	80094e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <prvProcessTimerOrBlockTask+0x90>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <prvProcessTimerOrBlockTask+0x50>
 80094d8:	2301      	movs	r3, #1
 80094da:	e000      	b.n	80094de <prvProcessTimerOrBlockTask+0x52>
 80094dc:	2300      	movs	r3, #0
 80094de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094e0:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <prvProcessTimerOrBlockTask+0x94>)
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	4619      	mov	r1, r3
 80094ee:	f7fe fe47 	bl	8008180 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094f2:	f7ff f9fd 	bl	80088f0 <xTaskResumeAll>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094fc:	4b09      	ldr	r3, [pc, #36]	; (8009524 <prvProcessTimerOrBlockTask+0x98>)
 80094fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	f3bf 8f6f 	isb	sy
}
 800950c:	e001      	b.n	8009512 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800950e:	f7ff f9ef 	bl	80088f0 <xTaskResumeAll>
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20001694 	.word	0x20001694
 8009520:	20001698 	.word	0x20001698
 8009524:	e000ed04 	.word	0xe000ed04

08009528 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009530:	4b0e      	ldr	r3, [pc, #56]	; (800956c <prvGetNextExpireTime+0x44>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <prvGetNextExpireTime+0x16>
 800953a:	2201      	movs	r2, #1
 800953c:	e000      	b.n	8009540 <prvGetNextExpireTime+0x18>
 800953e:	2200      	movs	r2, #0
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d105      	bne.n	8009558 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <prvGetNextExpireTime+0x44>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	e001      	b.n	800955c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800955c:	68fb      	ldr	r3, [r7, #12]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20001690 	.word	0x20001690

08009570 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009578:	f7ff fa5a 	bl	8008a30 <xTaskGetTickCount>
 800957c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800957e:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <prvSampleTimeNow+0x3c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	429a      	cmp	r2, r3
 8009586:	d205      	bcs.n	8009594 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009588:	f000 f93c 	bl	8009804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	e002      	b.n	800959a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800959a:	4a04      	ldr	r2, [pc, #16]	; (80095ac <prvSampleTimeNow+0x3c>)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095a0:	68fb      	ldr	r3, [r7, #12]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	200016a0 	.word	0x200016a0

080095b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d812      	bhi.n	80095fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d302      	bcc.n	80095ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	e01b      	b.n	8009622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095ea:	4b10      	ldr	r3, [pc, #64]	; (800962c <prvInsertTimerInActiveList+0x7c>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4619      	mov	r1, r3
 80095f4:	4610      	mov	r0, r2
 80095f6:	f7fe f88a 	bl	800770e <vListInsert>
 80095fa:	e012      	b.n	8009622 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d206      	bcs.n	8009612 <prvInsertTimerInActiveList+0x62>
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d302      	bcc.n	8009612 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e007      	b.n	8009622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <prvInsertTimerInActiveList+0x80>)
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3304      	adds	r3, #4
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f7fe f876 	bl	800770e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009622:	697b      	ldr	r3, [r7, #20]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20001694 	.word	0x20001694
 8009630:	20001690 	.word	0x20001690

08009634 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b08e      	sub	sp, #56	; 0x38
 8009638:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800963a:	e0d0      	b.n	80097de <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	da1a      	bge.n	8009678 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009642:	1d3b      	adds	r3, r7, #4
 8009644:	3304      	adds	r3, #4
 8009646:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10c      	bne.n	8009668 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	b672      	cpsid	i
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	b662      	cpsie	i
 8009662:	61fb      	str	r3, [r7, #28]
}
 8009664:	bf00      	nop
 8009666:	e7fe      	b.n	8009666 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800966e:	6850      	ldr	r0, [r2, #4]
 8009670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009672:	6892      	ldr	r2, [r2, #8]
 8009674:	4611      	mov	r1, r2
 8009676:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f2c0 80af 	blt.w	80097de <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d004      	beq.n	8009696 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	3304      	adds	r3, #4
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe f875 	bl	8007780 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009696:	463b      	mov	r3, r7
 8009698:	4618      	mov	r0, r3
 800969a:	f7ff ff69 	bl	8009570 <prvSampleTimeNow>
 800969e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b09      	cmp	r3, #9
 80096a4:	f200 809a 	bhi.w	80097dc <prvProcessReceivedCommands+0x1a8>
 80096a8:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <prvProcessReceivedCommands+0x7c>)
 80096aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ae:	bf00      	nop
 80096b0:	080096d9 	.word	0x080096d9
 80096b4:	080096d9 	.word	0x080096d9
 80096b8:	080096d9 	.word	0x080096d9
 80096bc:	08009751 	.word	0x08009751
 80096c0:	08009765 	.word	0x08009765
 80096c4:	080097b3 	.word	0x080097b3
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	080096d9 	.word	0x080096d9
 80096d0:	08009751 	.word	0x08009751
 80096d4:	08009765 	.word	0x08009765
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	18d1      	adds	r1, r2, r3
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f8:	f7ff ff5a 	bl	80095b0 <prvInsertTimerInActiveList>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d06d      	beq.n	80097de <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009708:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d062      	beq.n	80097de <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	441a      	add	r2, r3
 8009720:	2300      	movs	r3, #0
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2300      	movs	r3, #0
 8009726:	2100      	movs	r1, #0
 8009728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972a:	f7ff fdff 	bl	800932c <xTimerGenericCommand>
 800972e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d153      	bne.n	80097de <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	b672      	cpsid	i
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	b662      	cpsie	i
 800974a:	61bb      	str	r3, [r7, #24]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009756:	f023 0301 	bic.w	r3, r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009762:	e03c      	b.n	80097de <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976a:	f043 0301 	orr.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10c      	bne.n	800979e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	b672      	cpsid	i
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	b662      	cpsie	i
 8009798:	617b      	str	r3, [r7, #20]
}
 800979a:	bf00      	nop
 800979c:	e7fe      	b.n	800979c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	699a      	ldr	r2, [r3, #24]
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	18d1      	adds	r1, r2, r3
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ac:	f7ff ff00 	bl	80095b0 <prvInsertTimerInActiveList>
					break;
 80097b0:	e015      	b.n	80097de <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d103      	bne.n	80097c8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80097c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c2:	f000 fbc9 	bl	8009f58 <vPortFree>
 80097c6:	e00a      	b.n	80097de <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ce:	f023 0301 	bic.w	r3, r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097da:	e000      	b.n	80097de <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80097dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097de:	4b08      	ldr	r3, [pc, #32]	; (8009800 <prvProcessReceivedCommands+0x1cc>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	1d39      	adds	r1, r7, #4
 80097e4:	2200      	movs	r2, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe faaa 	bl	8007d40 <xQueueReceive>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f47f af24 	bne.w	800963c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	3730      	adds	r7, #48	; 0x30
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20001698 	.word	0x20001698

08009804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800980a:	e04a      	b.n	80098a2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800980c:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <prvSwitchTimerLists+0xc4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009816:	4b2c      	ldr	r3, [pc, #176]	; (80098c8 <prvSwitchTimerLists+0xc4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3304      	adds	r3, #4
 8009824:	4618      	mov	r0, r3
 8009826:	f7fd ffab 	bl	8007780 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b00      	cmp	r3, #0
 800983e:	d030      	beq.n	80098a2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4413      	add	r3, r2
 8009848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	429a      	cmp	r2, r3
 8009850:	d90e      	bls.n	8009870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800985e:	4b1a      	ldr	r3, [pc, #104]	; (80098c8 <prvSwitchTimerLists+0xc4>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3304      	adds	r3, #4
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7fd ff50 	bl	800770e <vListInsert>
 800986e:	e018      	b.n	80098a2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009870:	2300      	movs	r3, #0
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	2300      	movs	r3, #0
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	2100      	movs	r1, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fd56 	bl	800932c <xTimerGenericCommand>
 8009880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10c      	bne.n	80098a2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	b672      	cpsid	i
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	b662      	cpsie	i
 800989c:	603b      	str	r3, [r7, #0]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <prvSwitchTimerLists+0xc4>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1af      	bne.n	800980c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098ac:	4b06      	ldr	r3, [pc, #24]	; (80098c8 <prvSwitchTimerLists+0xc4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098b2:	4b06      	ldr	r3, [pc, #24]	; (80098cc <prvSwitchTimerLists+0xc8>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a04      	ldr	r2, [pc, #16]	; (80098c8 <prvSwitchTimerLists+0xc4>)
 80098b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098ba:	4a04      	ldr	r2, [pc, #16]	; (80098cc <prvSwitchTimerLists+0xc8>)
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	6013      	str	r3, [r2, #0]
}
 80098c0:	bf00      	nop
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	20001690 	.word	0x20001690
 80098cc:	20001694 	.word	0x20001694

080098d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098d6:	f000 f949 	bl	8009b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098da:	4b15      	ldr	r3, [pc, #84]	; (8009930 <prvCheckForValidListAndQueue+0x60>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d120      	bne.n	8009924 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098e2:	4814      	ldr	r0, [pc, #80]	; (8009934 <prvCheckForValidListAndQueue+0x64>)
 80098e4:	f7fd fec2 	bl	800766c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098e8:	4813      	ldr	r0, [pc, #76]	; (8009938 <prvCheckForValidListAndQueue+0x68>)
 80098ea:	f7fd febf 	bl	800766c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <prvCheckForValidListAndQueue+0x6c>)
 80098f0:	4a10      	ldr	r2, [pc, #64]	; (8009934 <prvCheckForValidListAndQueue+0x64>)
 80098f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098f4:	4b12      	ldr	r3, [pc, #72]	; (8009940 <prvCheckForValidListAndQueue+0x70>)
 80098f6:	4a10      	ldr	r2, [pc, #64]	; (8009938 <prvCheckForValidListAndQueue+0x68>)
 80098f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098fa:	2300      	movs	r3, #0
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	4b11      	ldr	r3, [pc, #68]	; (8009944 <prvCheckForValidListAndQueue+0x74>)
 8009900:	4a11      	ldr	r2, [pc, #68]	; (8009948 <prvCheckForValidListAndQueue+0x78>)
 8009902:	2110      	movs	r1, #16
 8009904:	200a      	movs	r0, #10
 8009906:	f7fd ffcf 	bl	80078a8 <xQueueGenericCreateStatic>
 800990a:	4603      	mov	r3, r0
 800990c:	4a08      	ldr	r2, [pc, #32]	; (8009930 <prvCheckForValidListAndQueue+0x60>)
 800990e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <prvCheckForValidListAndQueue+0x60>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009918:	4b05      	ldr	r3, [pc, #20]	; (8009930 <prvCheckForValidListAndQueue+0x60>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	490b      	ldr	r1, [pc, #44]	; (800994c <prvCheckForValidListAndQueue+0x7c>)
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe fc04 	bl	800812c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009924:	f000 f956 	bl	8009bd4 <vPortExitCritical>
}
 8009928:	bf00      	nop
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20001698 	.word	0x20001698
 8009934:	20001668 	.word	0x20001668
 8009938:	2000167c 	.word	0x2000167c
 800993c:	20001690 	.word	0x20001690
 8009940:	20001694 	.word	0x20001694
 8009944:	20001744 	.word	0x20001744
 8009948:	200016a4 	.word	0x200016a4
 800994c:	0800d07c 	.word	0x0800d07c

08009950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3b04      	subs	r3, #4
 8009960:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3b04      	subs	r3, #4
 800996e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	f023 0201 	bic.w	r2, r3, #1
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3b04      	subs	r3, #4
 800997e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009980:	4a0c      	ldr	r2, [pc, #48]	; (80099b4 <pxPortInitialiseStack+0x64>)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3b14      	subs	r3, #20
 800998a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3b04      	subs	r3, #4
 8009996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f06f 0202 	mvn.w	r2, #2
 800999e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3b20      	subs	r3, #32
 80099a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099a6:	68fb      	ldr	r3, [r7, #12]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	080099b9 	.word	0x080099b9

080099b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099c2:	4b14      	ldr	r3, [pc, #80]	; (8009a14 <prvTaskExitError+0x5c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ca:	d00c      	beq.n	80099e6 <prvTaskExitError+0x2e>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	b672      	cpsid	i
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	b662      	cpsie	i
 80099e0:	60fb      	str	r3, [r7, #12]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <prvTaskExitError+0x2c>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	b672      	cpsid	i
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	b662      	cpsie	i
 80099fa:	60bb      	str	r3, [r7, #8]
}
 80099fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099fe:	bf00      	nop
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0fc      	beq.n	8009a00 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	20000028 	.word	0x20000028
	...

08009a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <pxCurrentTCBConst2>)
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	6808      	ldr	r0, [r1, #0]
 8009a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	f380 8809 	msr	PSP, r0
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8811 	msr	BASEPRI, r0
 8009a3a:	4770      	bx	lr
 8009a3c:	f3af 8000 	nop.w

08009a40 <pxCurrentTCBConst2>:
 8009a40:	20001168 	.word	0x20001168
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop

08009a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a48:	4808      	ldr	r0, [pc, #32]	; (8009a6c <prvPortStartFirstTask+0x24>)
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	6800      	ldr	r0, [r0, #0]
 8009a4e:	f380 8808 	msr	MSP, r0
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f380 8814 	msr	CONTROL, r0
 8009a5a:	b662      	cpsie	i
 8009a5c:	b661      	cpsie	f
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	df00      	svc	0
 8009a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a6a:	bf00      	nop
 8009a6c:	e000ed08 	.word	0xe000ed08

08009a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a76:	4b37      	ldr	r3, [pc, #220]	; (8009b54 <xPortStartScheduler+0xe4>)
 8009a78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	22ff      	movs	r2, #255	; 0xff
 8009a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	; (8009b58 <xPortStartScheduler+0xe8>)
 8009a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a9e:	4b2f      	ldr	r3, [pc, #188]	; (8009b5c <xPortStartScheduler+0xec>)
 8009aa0:	2207      	movs	r2, #7
 8009aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aa4:	e009      	b.n	8009aba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009aa6:	4b2d      	ldr	r3, [pc, #180]	; (8009b5c <xPortStartScheduler+0xec>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	4a2b      	ldr	r2, [pc, #172]	; (8009b5c <xPortStartScheduler+0xec>)
 8009aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac2:	2b80      	cmp	r3, #128	; 0x80
 8009ac4:	d0ef      	beq.n	8009aa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ac6:	4b25      	ldr	r3, [pc, #148]	; (8009b5c <xPortStartScheduler+0xec>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f1c3 0307 	rsb	r3, r3, #7
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d00c      	beq.n	8009aec <xPortStartScheduler+0x7c>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	b672      	cpsid	i
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	b662      	cpsie	i
 8009ae6:	60bb      	str	r3, [r7, #8]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009aec:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <xPortStartScheduler+0xec>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	4a1a      	ldr	r2, [pc, #104]	; (8009b5c <xPortStartScheduler+0xec>)
 8009af4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009af6:	4b19      	ldr	r3, [pc, #100]	; (8009b5c <xPortStartScheduler+0xec>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009afe:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <xPortStartScheduler+0xec>)
 8009b00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b0a:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <xPortStartScheduler+0xf0>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a14      	ldr	r2, [pc, #80]	; (8009b60 <xPortStartScheduler+0xf0>)
 8009b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b16:	4b12      	ldr	r3, [pc, #72]	; (8009b60 <xPortStartScheduler+0xf0>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a11      	ldr	r2, [pc, #68]	; (8009b60 <xPortStartScheduler+0xf0>)
 8009b1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b22:	f000 f8dd 	bl	8009ce0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b26:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <xPortStartScheduler+0xf4>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b2c:	f000 f8fc 	bl	8009d28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b30:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <xPortStartScheduler+0xf8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a0c      	ldr	r2, [pc, #48]	; (8009b68 <xPortStartScheduler+0xf8>)
 8009b36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b3c:	f7ff ff84 	bl	8009a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b40:	f7ff f842 	bl	8008bc8 <vTaskSwitchContext>
	prvTaskExitError();
 8009b44:	f7ff ff38 	bl	80099b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	e000e400 	.word	0xe000e400
 8009b58:	20001794 	.word	0x20001794
 8009b5c:	20001798 	.word	0x20001798
 8009b60:	e000ed20 	.word	0xe000ed20
 8009b64:	20000028 	.word	0x20000028
 8009b68:	e000ef34 	.word	0xe000ef34

08009b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b76:	b672      	cpsid	i
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	b662      	cpsie	i
 8009b86:	607b      	str	r3, [r7, #4]
}
 8009b88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <vPortEnterCritical+0x60>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	4a0e      	ldr	r2, [pc, #56]	; (8009bcc <vPortEnterCritical+0x60>)
 8009b92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b94:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <vPortEnterCritical+0x60>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d111      	bne.n	8009bc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <vPortEnterCritical+0x64>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00c      	beq.n	8009bc0 <vPortEnterCritical+0x54>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009baa:	b672      	cpsid	i
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	b662      	cpsie	i
 8009bba:	603b      	str	r3, [r7, #0]
}
 8009bbc:	bf00      	nop
 8009bbe:	e7fe      	b.n	8009bbe <vPortEnterCritical+0x52>
	}
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000028 	.word	0x20000028
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bda:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <vPortExitCritical+0x54>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10c      	bne.n	8009bfc <vPortExitCritical+0x28>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	b672      	cpsid	i
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	b662      	cpsie	i
 8009bf6:	607b      	str	r3, [r7, #4]
}
 8009bf8:	bf00      	nop
 8009bfa:	e7fe      	b.n	8009bfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <vPortExitCritical+0x54>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	4a09      	ldr	r2, [pc, #36]	; (8009c28 <vPortExitCritical+0x54>)
 8009c04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c06:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <vPortExitCritical+0x54>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d105      	bne.n	8009c1a <vPortExitCritical+0x46>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	f383 8811 	msr	BASEPRI, r3
}
 8009c18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	20000028 	.word	0x20000028
 8009c2c:	00000000 	.word	0x00000000

08009c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c30:	f3ef 8009 	mrs	r0, PSP
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	4b15      	ldr	r3, [pc, #84]	; (8009c90 <pxCurrentTCBConst>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	f01e 0f10 	tst.w	lr, #16
 8009c40:	bf08      	it	eq
 8009c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4a:	6010      	str	r0, [r2, #0]
 8009c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c54:	b672      	cpsid	i
 8009c56:	f380 8811 	msr	BASEPRI, r0
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	b662      	cpsie	i
 8009c64:	f7fe ffb0 	bl	8008bc8 <vTaskSwitchContext>
 8009c68:	f04f 0000 	mov.w	r0, #0
 8009c6c:	f380 8811 	msr	BASEPRI, r0
 8009c70:	bc09      	pop	{r0, r3}
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	6808      	ldr	r0, [r1, #0]
 8009c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7a:	f01e 0f10 	tst.w	lr, #16
 8009c7e:	bf08      	it	eq
 8009c80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c84:	f380 8809 	msr	PSP, r0
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop

08009c90 <pxCurrentTCBConst>:
 8009c90:	20001168 	.word	0x20001168
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop

08009c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	b672      	cpsid	i
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	b662      	cpsie	i
 8009cb2:	607b      	str	r3, [r7, #4]
}
 8009cb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cb6:	f7fe fecb 	bl	8008a50 <xTaskIncrementTick>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cc0:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <SysTick_Handler+0x44>)
 8009cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	2300      	movs	r3, #0
 8009cca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	f383 8811 	msr	BASEPRI, r3
}
 8009cd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <vPortSetupTimerInterrupt+0x34>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cea:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <vPortSetupTimerInterrupt+0x38>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <vPortSetupTimerInterrupt+0x3c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a0a      	ldr	r2, [pc, #40]	; (8009d20 <vPortSetupTimerInterrupt+0x40>)
 8009cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfa:	099b      	lsrs	r3, r3, #6
 8009cfc:	4a09      	ldr	r2, [pc, #36]	; (8009d24 <vPortSetupTimerInterrupt+0x44>)
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d02:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <vPortSetupTimerInterrupt+0x34>)
 8009d04:	2207      	movs	r2, #7
 8009d06:	601a      	str	r2, [r3, #0]
}
 8009d08:	bf00      	nop
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	e000e010 	.word	0xe000e010
 8009d18:	e000e018 	.word	0xe000e018
 8009d1c:	20000010 	.word	0x20000010
 8009d20:	10624dd3 	.word	0x10624dd3
 8009d24:	e000e014 	.word	0xe000e014

08009d28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d38 <vPortEnableVFP+0x10>
 8009d2c:	6801      	ldr	r1, [r0, #0]
 8009d2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d32:	6001      	str	r1, [r0, #0]
 8009d34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d36:	bf00      	nop
 8009d38:	e000ed88 	.word	0xe000ed88

08009d3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d42:	f3ef 8305 	mrs	r3, IPSR
 8009d46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b0f      	cmp	r3, #15
 8009d4c:	d916      	bls.n	8009d7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d4e:	4a19      	ldr	r2, [pc, #100]	; (8009db4 <vPortValidateInterruptPriority+0x78>)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d58:	4b17      	ldr	r3, [pc, #92]	; (8009db8 <vPortValidateInterruptPriority+0x7c>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	7afa      	ldrb	r2, [r7, #11]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d20c      	bcs.n	8009d7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	b672      	cpsid	i
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	b662      	cpsie	i
 8009d76:	607b      	str	r3, [r7, #4]
}
 8009d78:	bf00      	nop
 8009d7a:	e7fe      	b.n	8009d7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d7c:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <vPortValidateInterruptPriority+0x80>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d84:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <vPortValidateInterruptPriority+0x84>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d90c      	bls.n	8009da6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	b672      	cpsid	i
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	b662      	cpsie	i
 8009da0:	603b      	str	r3, [r7, #0]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <vPortValidateInterruptPriority+0x68>
	}
 8009da6:	bf00      	nop
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	e000e3f0 	.word	0xe000e3f0
 8009db8:	20001794 	.word	0x20001794
 8009dbc:	e000ed0c 	.word	0xe000ed0c
 8009dc0:	20001798 	.word	0x20001798

08009dc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08a      	sub	sp, #40	; 0x28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009dd0:	f7fe fd80 	bl	80088d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dd4:	4b5b      	ldr	r3, [pc, #364]	; (8009f44 <pvPortMalloc+0x180>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ddc:	f000 f91a 	bl	800a014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009de0:	4b59      	ldr	r3, [pc, #356]	; (8009f48 <pvPortMalloc+0x184>)
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4013      	ands	r3, r2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f040 8092 	bne.w	8009f12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01f      	beq.n	8009e34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009df4:	2208      	movs	r2, #8
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d016      	beq.n	8009e34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f023 0307 	bic.w	r3, r3, #7
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00c      	beq.n	8009e34 <pvPortMalloc+0x70>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	b672      	cpsid	i
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	b662      	cpsie	i
 8009e2e:	617b      	str	r3, [r7, #20]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d06b      	beq.n	8009f12 <pvPortMalloc+0x14e>
 8009e3a:	4b44      	ldr	r3, [pc, #272]	; (8009f4c <pvPortMalloc+0x188>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d866      	bhi.n	8009f12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e44:	4b42      	ldr	r3, [pc, #264]	; (8009f50 <pvPortMalloc+0x18c>)
 8009e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e48:	4b41      	ldr	r3, [pc, #260]	; (8009f50 <pvPortMalloc+0x18c>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e4e:	e004      	b.n	8009e5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d903      	bls.n	8009e6c <pvPortMalloc+0xa8>
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1f1      	bne.n	8009e50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e6c:	4b35      	ldr	r3, [pc, #212]	; (8009f44 <pvPortMalloc+0x180>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d04d      	beq.n	8009f12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2208      	movs	r2, #8
 8009e7c:	4413      	add	r3, r2
 8009e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	1ad2      	subs	r2, r2, r3
 8009e90:	2308      	movs	r3, #8
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d921      	bls.n	8009edc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	f003 0307 	and.w	r3, r3, #7
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00c      	beq.n	8009ec4 <pvPortMalloc+0x100>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	b672      	cpsid	i
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	b662      	cpsie	i
 8009ebe:	613b      	str	r3, [r7, #16]
}
 8009ec0:	bf00      	nop
 8009ec2:	e7fe      	b.n	8009ec2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ed6:	69b8      	ldr	r0, [r7, #24]
 8009ed8:	f000 f8fe 	bl	800a0d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009edc:	4b1b      	ldr	r3, [pc, #108]	; (8009f4c <pvPortMalloc+0x188>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	4a19      	ldr	r2, [pc, #100]	; (8009f4c <pvPortMalloc+0x188>)
 8009ee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009eea:	4b18      	ldr	r3, [pc, #96]	; (8009f4c <pvPortMalloc+0x188>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	4b19      	ldr	r3, [pc, #100]	; (8009f54 <pvPortMalloc+0x190>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d203      	bcs.n	8009efe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ef6:	4b15      	ldr	r3, [pc, #84]	; (8009f4c <pvPortMalloc+0x188>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a16      	ldr	r2, [pc, #88]	; (8009f54 <pvPortMalloc+0x190>)
 8009efc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <pvPortMalloc+0x184>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f12:	f7fe fced 	bl	80088f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	f003 0307 	and.w	r3, r3, #7
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00c      	beq.n	8009f3a <pvPortMalloc+0x176>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	b672      	cpsid	i
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	b662      	cpsie	i
 8009f34:	60fb      	str	r3, [r7, #12]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <pvPortMalloc+0x174>
	return pvReturn;
 8009f3a:	69fb      	ldr	r3, [r7, #28]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3728      	adds	r7, #40	; 0x28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	200053a4 	.word	0x200053a4
 8009f48:	200053b0 	.word	0x200053b0
 8009f4c:	200053a8 	.word	0x200053a8
 8009f50:	2000539c 	.word	0x2000539c
 8009f54:	200053ac 	.word	0x200053ac

08009f58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d04c      	beq.n	800a004 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f6a:	2308      	movs	r3, #8
 8009f6c:	425b      	negs	r3, r3
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	4413      	add	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	4b23      	ldr	r3, [pc, #140]	; (800a00c <vPortFree+0xb4>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4013      	ands	r3, r2
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10c      	bne.n	8009fa0 <vPortFree+0x48>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	b672      	cpsid	i
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	b662      	cpsie	i
 8009f9a:	60fb      	str	r3, [r7, #12]
}
 8009f9c:	bf00      	nop
 8009f9e:	e7fe      	b.n	8009f9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00c      	beq.n	8009fc2 <vPortFree+0x6a>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fac:	b672      	cpsid	i
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	b662      	cpsie	i
 8009fbc:	60bb      	str	r3, [r7, #8]
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	4b11      	ldr	r3, [pc, #68]	; (800a00c <vPortFree+0xb4>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d019      	beq.n	800a004 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d115      	bne.n	800a004 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <vPortFree+0xb4>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	43db      	mvns	r3, r3
 8009fe2:	401a      	ands	r2, r3
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fe8:	f7fe fc74 	bl	80088d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	4b07      	ldr	r3, [pc, #28]	; (800a010 <vPortFree+0xb8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	4a06      	ldr	r2, [pc, #24]	; (800a010 <vPortFree+0xb8>)
 8009ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ffa:	6938      	ldr	r0, [r7, #16]
 8009ffc:	f000 f86c 	bl	800a0d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a000:	f7fe fc76 	bl	80088f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a004:	bf00      	nop
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200053b0 	.word	0x200053b0
 800a010:	200053a8 	.word	0x200053a8

0800a014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a01a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a01e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a020:	4b27      	ldr	r3, [pc, #156]	; (800a0c0 <prvHeapInit+0xac>)
 800a022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f003 0307 	and.w	r3, r3, #7
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00c      	beq.n	800a048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3307      	adds	r3, #7
 800a032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f023 0307 	bic.w	r3, r3, #7
 800a03a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	4a1f      	ldr	r2, [pc, #124]	; (800a0c0 <prvHeapInit+0xac>)
 800a044:	4413      	add	r3, r2
 800a046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a04c:	4a1d      	ldr	r2, [pc, #116]	; (800a0c4 <prvHeapInit+0xb0>)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a052:	4b1c      	ldr	r3, [pc, #112]	; (800a0c4 <prvHeapInit+0xb0>)
 800a054:	2200      	movs	r2, #0
 800a056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	4413      	add	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a060:	2208      	movs	r2, #8
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	1a9b      	subs	r3, r3, r2
 800a066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f023 0307 	bic.w	r3, r3, #7
 800a06e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4a15      	ldr	r2, [pc, #84]	; (800a0c8 <prvHeapInit+0xb4>)
 800a074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a076:	4b14      	ldr	r3, [pc, #80]	; (800a0c8 <prvHeapInit+0xb4>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2200      	movs	r2, #0
 800a07c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <prvHeapInit+0xb4>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	1ad2      	subs	r2, r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a094:	4b0c      	ldr	r3, [pc, #48]	; (800a0c8 <prvHeapInit+0xb4>)
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	4a0a      	ldr	r2, [pc, #40]	; (800a0cc <prvHeapInit+0xb8>)
 800a0a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <prvHeapInit+0xbc>)
 800a0aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0ac:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <prvHeapInit+0xc0>)
 800a0ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0b2:	601a      	str	r2, [r3, #0]
}
 800a0b4:	bf00      	nop
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	2000179c 	.word	0x2000179c
 800a0c4:	2000539c 	.word	0x2000539c
 800a0c8:	200053a4 	.word	0x200053a4
 800a0cc:	200053ac 	.word	0x200053ac
 800a0d0:	200053a8 	.word	0x200053a8
 800a0d4:	200053b0 	.word	0x200053b0

0800a0d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0e0:	4b28      	ldr	r3, [pc, #160]	; (800a184 <prvInsertBlockIntoFreeList+0xac>)
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	e002      	b.n	800a0ec <prvInsertBlockIntoFreeList+0x14>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d8f7      	bhi.n	800a0e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	4413      	add	r3, r2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	429a      	cmp	r2, r3
 800a106:	d108      	bne.n	800a11a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	441a      	add	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	441a      	add	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d118      	bne.n	800a160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4b15      	ldr	r3, [pc, #84]	; (800a188 <prvInsertBlockIntoFreeList+0xb0>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d00d      	beq.n	800a156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	441a      	add	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e008      	b.n	800a168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a156:	4b0c      	ldr	r3, [pc, #48]	; (800a188 <prvInsertBlockIntoFreeList+0xb0>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	e003      	b.n	800a168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d002      	beq.n	800a176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a176:	bf00      	nop
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	2000539c 	.word	0x2000539c
 800a188:	200053a4 	.word	0x200053a4

0800a18c <__cvt>:
 800a18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a18e:	ed2d 8b02 	vpush	{d8}
 800a192:	eeb0 8b40 	vmov.f64	d8, d0
 800a196:	b085      	sub	sp, #20
 800a198:	4617      	mov	r7, r2
 800a19a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a19c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a19e:	ee18 2a90 	vmov	r2, s17
 800a1a2:	f025 0520 	bic.w	r5, r5, #32
 800a1a6:	2a00      	cmp	r2, #0
 800a1a8:	bfb6      	itet	lt
 800a1aa:	222d      	movlt	r2, #45	; 0x2d
 800a1ac:	2200      	movge	r2, #0
 800a1ae:	eeb1 8b40 	vneglt.f64	d8, d0
 800a1b2:	2d46      	cmp	r5, #70	; 0x46
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	701a      	strb	r2, [r3, #0]
 800a1b8:	d004      	beq.n	800a1c4 <__cvt+0x38>
 800a1ba:	2d45      	cmp	r5, #69	; 0x45
 800a1bc:	d100      	bne.n	800a1c0 <__cvt+0x34>
 800a1be:	3401      	adds	r4, #1
 800a1c0:	2102      	movs	r1, #2
 800a1c2:	e000      	b.n	800a1c6 <__cvt+0x3a>
 800a1c4:	2103      	movs	r1, #3
 800a1c6:	ab03      	add	r3, sp, #12
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	ab02      	add	r3, sp, #8
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	4633      	mov	r3, r6
 800a1d2:	eeb0 0b48 	vmov.f64	d0, d8
 800a1d6:	f000 fe87 	bl	800aee8 <_dtoa_r>
 800a1da:	2d47      	cmp	r5, #71	; 0x47
 800a1dc:	d101      	bne.n	800a1e2 <__cvt+0x56>
 800a1de:	07fb      	lsls	r3, r7, #31
 800a1e0:	d51a      	bpl.n	800a218 <__cvt+0x8c>
 800a1e2:	2d46      	cmp	r5, #70	; 0x46
 800a1e4:	eb00 0204 	add.w	r2, r0, r4
 800a1e8:	d10c      	bne.n	800a204 <__cvt+0x78>
 800a1ea:	7803      	ldrb	r3, [r0, #0]
 800a1ec:	2b30      	cmp	r3, #48	; 0x30
 800a1ee:	d107      	bne.n	800a200 <__cvt+0x74>
 800a1f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f8:	bf1c      	itt	ne
 800a1fa:	f1c4 0401 	rsbne	r4, r4, #1
 800a1fe:	6034      	strne	r4, [r6, #0]
 800a200:	6833      	ldr	r3, [r6, #0]
 800a202:	441a      	add	r2, r3
 800a204:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20c:	bf08      	it	eq
 800a20e:	9203      	streq	r2, [sp, #12]
 800a210:	2130      	movs	r1, #48	; 0x30
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	4293      	cmp	r3, r2
 800a216:	d307      	bcc.n	800a228 <__cvt+0x9c>
 800a218:	9b03      	ldr	r3, [sp, #12]
 800a21a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a21c:	1a1b      	subs	r3, r3, r0
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	b005      	add	sp, #20
 800a222:	ecbd 8b02 	vpop	{d8}
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a228:	1c5c      	adds	r4, r3, #1
 800a22a:	9403      	str	r4, [sp, #12]
 800a22c:	7019      	strb	r1, [r3, #0]
 800a22e:	e7f0      	b.n	800a212 <__cvt+0x86>

0800a230 <__exponent>:
 800a230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a232:	4603      	mov	r3, r0
 800a234:	2900      	cmp	r1, #0
 800a236:	bfb8      	it	lt
 800a238:	4249      	neglt	r1, r1
 800a23a:	f803 2b02 	strb.w	r2, [r3], #2
 800a23e:	bfb4      	ite	lt
 800a240:	222d      	movlt	r2, #45	; 0x2d
 800a242:	222b      	movge	r2, #43	; 0x2b
 800a244:	2909      	cmp	r1, #9
 800a246:	7042      	strb	r2, [r0, #1]
 800a248:	dd2a      	ble.n	800a2a0 <__exponent+0x70>
 800a24a:	f10d 0207 	add.w	r2, sp, #7
 800a24e:	4617      	mov	r7, r2
 800a250:	260a      	movs	r6, #10
 800a252:	4694      	mov	ip, r2
 800a254:	fb91 f5f6 	sdiv	r5, r1, r6
 800a258:	fb06 1415 	mls	r4, r6, r5, r1
 800a25c:	3430      	adds	r4, #48	; 0x30
 800a25e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a262:	460c      	mov	r4, r1
 800a264:	2c63      	cmp	r4, #99	; 0x63
 800a266:	f102 32ff 	add.w	r2, r2, #4294967295
 800a26a:	4629      	mov	r1, r5
 800a26c:	dcf1      	bgt.n	800a252 <__exponent+0x22>
 800a26e:	3130      	adds	r1, #48	; 0x30
 800a270:	f1ac 0402 	sub.w	r4, ip, #2
 800a274:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a278:	1c41      	adds	r1, r0, #1
 800a27a:	4622      	mov	r2, r4
 800a27c:	42ba      	cmp	r2, r7
 800a27e:	d30a      	bcc.n	800a296 <__exponent+0x66>
 800a280:	f10d 0209 	add.w	r2, sp, #9
 800a284:	eba2 020c 	sub.w	r2, r2, ip
 800a288:	42bc      	cmp	r4, r7
 800a28a:	bf88      	it	hi
 800a28c:	2200      	movhi	r2, #0
 800a28e:	4413      	add	r3, r2
 800a290:	1a18      	subs	r0, r3, r0
 800a292:	b003      	add	sp, #12
 800a294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a296:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a29a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a29e:	e7ed      	b.n	800a27c <__exponent+0x4c>
 800a2a0:	2330      	movs	r3, #48	; 0x30
 800a2a2:	3130      	adds	r1, #48	; 0x30
 800a2a4:	7083      	strb	r3, [r0, #2]
 800a2a6:	70c1      	strb	r1, [r0, #3]
 800a2a8:	1d03      	adds	r3, r0, #4
 800a2aa:	e7f1      	b.n	800a290 <__exponent+0x60>
 800a2ac:	0000      	movs	r0, r0
	...

0800a2b0 <_printf_float>:
 800a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	b08b      	sub	sp, #44	; 0x2c
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a2bc:	4616      	mov	r6, r2
 800a2be:	461f      	mov	r7, r3
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	f000 fcad 	bl	800ac20 <_localeconv_r>
 800a2c6:	f8d0 b000 	ldr.w	fp, [r0]
 800a2ca:	4658      	mov	r0, fp
 800a2cc:	f7f6 f808 	bl	80002e0 <strlen>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9308      	str	r3, [sp, #32]
 800a2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a2dc:	6822      	ldr	r2, [r4, #0]
 800a2de:	3307      	adds	r3, #7
 800a2e0:	f023 0307 	bic.w	r3, r3, #7
 800a2e4:	f103 0108 	add.w	r1, r3, #8
 800a2e8:	f8c8 1000 	str.w	r1, [r8]
 800a2ec:	ed93 0b00 	vldr	d0, [r3]
 800a2f0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a550 <_printf_float+0x2a0>
 800a2f4:	eeb0 7bc0 	vabs.f64	d7, d0
 800a2f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800a2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a300:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800a304:	4682      	mov	sl, r0
 800a306:	dd24      	ble.n	800a352 <_printf_float+0xa2>
 800a308:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a310:	d502      	bpl.n	800a318 <_printf_float+0x68>
 800a312:	232d      	movs	r3, #45	; 0x2d
 800a314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a318:	498f      	ldr	r1, [pc, #572]	; (800a558 <_printf_float+0x2a8>)
 800a31a:	4b90      	ldr	r3, [pc, #576]	; (800a55c <_printf_float+0x2ac>)
 800a31c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a320:	bf94      	ite	ls
 800a322:	4688      	movls	r8, r1
 800a324:	4698      	movhi	r8, r3
 800a326:	2303      	movs	r3, #3
 800a328:	6123      	str	r3, [r4, #16]
 800a32a:	f022 0204 	bic.w	r2, r2, #4
 800a32e:	2300      	movs	r3, #0
 800a330:	6022      	str	r2, [r4, #0]
 800a332:	9304      	str	r3, [sp, #16]
 800a334:	9700      	str	r7, [sp, #0]
 800a336:	4633      	mov	r3, r6
 800a338:	aa09      	add	r2, sp, #36	; 0x24
 800a33a:	4621      	mov	r1, r4
 800a33c:	4628      	mov	r0, r5
 800a33e:	f000 f9d1 	bl	800a6e4 <_printf_common>
 800a342:	3001      	adds	r0, #1
 800a344:	f040 808a 	bne.w	800a45c <_printf_float+0x1ac>
 800a348:	f04f 30ff 	mov.w	r0, #4294967295
 800a34c:	b00b      	add	sp, #44	; 0x2c
 800a34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a352:	eeb4 0b40 	vcmp.f64	d0, d0
 800a356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35a:	d709      	bvc.n	800a370 <_printf_float+0xc0>
 800a35c:	ee10 3a90 	vmov	r3, s1
 800a360:	2b00      	cmp	r3, #0
 800a362:	bfbc      	itt	lt
 800a364:	232d      	movlt	r3, #45	; 0x2d
 800a366:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a36a:	497d      	ldr	r1, [pc, #500]	; (800a560 <_printf_float+0x2b0>)
 800a36c:	4b7d      	ldr	r3, [pc, #500]	; (800a564 <_printf_float+0x2b4>)
 800a36e:	e7d5      	b.n	800a31c <_printf_float+0x6c>
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a376:	9104      	str	r1, [sp, #16]
 800a378:	1c59      	adds	r1, r3, #1
 800a37a:	d13c      	bne.n	800a3f6 <_printf_float+0x146>
 800a37c:	2306      	movs	r3, #6
 800a37e:	6063      	str	r3, [r4, #4]
 800a380:	2300      	movs	r3, #0
 800a382:	9303      	str	r3, [sp, #12]
 800a384:	ab08      	add	r3, sp, #32
 800a386:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a38a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a38e:	ab07      	add	r3, sp, #28
 800a390:	6861      	ldr	r1, [r4, #4]
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	6022      	str	r2, [r4, #0]
 800a396:	f10d 031b 	add.w	r3, sp, #27
 800a39a:	4628      	mov	r0, r5
 800a39c:	f7ff fef6 	bl	800a18c <__cvt>
 800a3a0:	9b04      	ldr	r3, [sp, #16]
 800a3a2:	9907      	ldr	r1, [sp, #28]
 800a3a4:	2b47      	cmp	r3, #71	; 0x47
 800a3a6:	4680      	mov	r8, r0
 800a3a8:	d108      	bne.n	800a3bc <_printf_float+0x10c>
 800a3aa:	1cc8      	adds	r0, r1, #3
 800a3ac:	db02      	blt.n	800a3b4 <_printf_float+0x104>
 800a3ae:	6863      	ldr	r3, [r4, #4]
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	dd41      	ble.n	800a438 <_printf_float+0x188>
 800a3b4:	f1a9 0902 	sub.w	r9, r9, #2
 800a3b8:	fa5f f989 	uxtb.w	r9, r9
 800a3bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a3c0:	d820      	bhi.n	800a404 <_printf_float+0x154>
 800a3c2:	3901      	subs	r1, #1
 800a3c4:	464a      	mov	r2, r9
 800a3c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3ca:	9107      	str	r1, [sp, #28]
 800a3cc:	f7ff ff30 	bl	800a230 <__exponent>
 800a3d0:	9a08      	ldr	r2, [sp, #32]
 800a3d2:	9004      	str	r0, [sp, #16]
 800a3d4:	1813      	adds	r3, r2, r0
 800a3d6:	2a01      	cmp	r2, #1
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	dc02      	bgt.n	800a3e2 <_printf_float+0x132>
 800a3dc:	6822      	ldr	r2, [r4, #0]
 800a3de:	07d2      	lsls	r2, r2, #31
 800a3e0:	d501      	bpl.n	800a3e6 <_printf_float+0x136>
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	6123      	str	r3, [r4, #16]
 800a3e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0a2      	beq.n	800a334 <_printf_float+0x84>
 800a3ee:	232d      	movs	r3, #45	; 0x2d
 800a3f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f4:	e79e      	b.n	800a334 <_printf_float+0x84>
 800a3f6:	9904      	ldr	r1, [sp, #16]
 800a3f8:	2947      	cmp	r1, #71	; 0x47
 800a3fa:	d1c1      	bne.n	800a380 <_printf_float+0xd0>
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1bf      	bne.n	800a380 <_printf_float+0xd0>
 800a400:	2301      	movs	r3, #1
 800a402:	e7bc      	b.n	800a37e <_printf_float+0xce>
 800a404:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a408:	d118      	bne.n	800a43c <_printf_float+0x18c>
 800a40a:	2900      	cmp	r1, #0
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	dd0b      	ble.n	800a428 <_printf_float+0x178>
 800a410:	6121      	str	r1, [r4, #16]
 800a412:	b913      	cbnz	r3, 800a41a <_printf_float+0x16a>
 800a414:	6822      	ldr	r2, [r4, #0]
 800a416:	07d0      	lsls	r0, r2, #31
 800a418:	d502      	bpl.n	800a420 <_printf_float+0x170>
 800a41a:	3301      	adds	r3, #1
 800a41c:	440b      	add	r3, r1
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	2300      	movs	r3, #0
 800a422:	65a1      	str	r1, [r4, #88]	; 0x58
 800a424:	9304      	str	r3, [sp, #16]
 800a426:	e7de      	b.n	800a3e6 <_printf_float+0x136>
 800a428:	b913      	cbnz	r3, 800a430 <_printf_float+0x180>
 800a42a:	6822      	ldr	r2, [r4, #0]
 800a42c:	07d2      	lsls	r2, r2, #31
 800a42e:	d501      	bpl.n	800a434 <_printf_float+0x184>
 800a430:	3302      	adds	r3, #2
 800a432:	e7f4      	b.n	800a41e <_printf_float+0x16e>
 800a434:	2301      	movs	r3, #1
 800a436:	e7f2      	b.n	800a41e <_printf_float+0x16e>
 800a438:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a43c:	9b08      	ldr	r3, [sp, #32]
 800a43e:	4299      	cmp	r1, r3
 800a440:	db05      	blt.n	800a44e <_printf_float+0x19e>
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	6121      	str	r1, [r4, #16]
 800a446:	07d8      	lsls	r0, r3, #31
 800a448:	d5ea      	bpl.n	800a420 <_printf_float+0x170>
 800a44a:	1c4b      	adds	r3, r1, #1
 800a44c:	e7e7      	b.n	800a41e <_printf_float+0x16e>
 800a44e:	2900      	cmp	r1, #0
 800a450:	bfd4      	ite	le
 800a452:	f1c1 0202 	rsble	r2, r1, #2
 800a456:	2201      	movgt	r2, #1
 800a458:	4413      	add	r3, r2
 800a45a:	e7e0      	b.n	800a41e <_printf_float+0x16e>
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	055a      	lsls	r2, r3, #21
 800a460:	d407      	bmi.n	800a472 <_printf_float+0x1c2>
 800a462:	6923      	ldr	r3, [r4, #16]
 800a464:	4642      	mov	r2, r8
 800a466:	4631      	mov	r1, r6
 800a468:	4628      	mov	r0, r5
 800a46a:	47b8      	blx	r7
 800a46c:	3001      	adds	r0, #1
 800a46e:	d12a      	bne.n	800a4c6 <_printf_float+0x216>
 800a470:	e76a      	b.n	800a348 <_printf_float+0x98>
 800a472:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a476:	f240 80e0 	bls.w	800a63a <_printf_float+0x38a>
 800a47a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a47e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a486:	d133      	bne.n	800a4f0 <_printf_float+0x240>
 800a488:	4a37      	ldr	r2, [pc, #220]	; (800a568 <_printf_float+0x2b8>)
 800a48a:	2301      	movs	r3, #1
 800a48c:	4631      	mov	r1, r6
 800a48e:	4628      	mov	r0, r5
 800a490:	47b8      	blx	r7
 800a492:	3001      	adds	r0, #1
 800a494:	f43f af58 	beq.w	800a348 <_printf_float+0x98>
 800a498:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	db02      	blt.n	800a4a6 <_printf_float+0x1f6>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	07d8      	lsls	r0, r3, #31
 800a4a4:	d50f      	bpl.n	800a4c6 <_printf_float+0x216>
 800a4a6:	4653      	mov	r3, sl
 800a4a8:	465a      	mov	r2, fp
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	47b8      	blx	r7
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	f43f af49 	beq.w	800a348 <_printf_float+0x98>
 800a4b6:	f04f 0800 	mov.w	r8, #0
 800a4ba:	f104 091a 	add.w	r9, r4, #26
 800a4be:	9b08      	ldr	r3, [sp, #32]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	4543      	cmp	r3, r8
 800a4c4:	dc09      	bgt.n	800a4da <_printf_float+0x22a>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	079b      	lsls	r3, r3, #30
 800a4ca:	f100 8106 	bmi.w	800a6da <_printf_float+0x42a>
 800a4ce:	68e0      	ldr	r0, [r4, #12]
 800a4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d2:	4298      	cmp	r0, r3
 800a4d4:	bfb8      	it	lt
 800a4d6:	4618      	movlt	r0, r3
 800a4d8:	e738      	b.n	800a34c <_printf_float+0x9c>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	464a      	mov	r2, r9
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b8      	blx	r7
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	f43f af2f 	beq.w	800a348 <_printf_float+0x98>
 800a4ea:	f108 0801 	add.w	r8, r8, #1
 800a4ee:	e7e6      	b.n	800a4be <_printf_float+0x20e>
 800a4f0:	9b07      	ldr	r3, [sp, #28]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	dc3a      	bgt.n	800a56c <_printf_float+0x2bc>
 800a4f6:	4a1c      	ldr	r2, [pc, #112]	; (800a568 <_printf_float+0x2b8>)
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b8      	blx	r7
 800a500:	3001      	adds	r0, #1
 800a502:	f43f af21 	beq.w	800a348 <_printf_float+0x98>
 800a506:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	d102      	bne.n	800a514 <_printf_float+0x264>
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	07d9      	lsls	r1, r3, #31
 800a512:	d5d8      	bpl.n	800a4c6 <_printf_float+0x216>
 800a514:	4653      	mov	r3, sl
 800a516:	465a      	mov	r2, fp
 800a518:	4631      	mov	r1, r6
 800a51a:	4628      	mov	r0, r5
 800a51c:	47b8      	blx	r7
 800a51e:	3001      	adds	r0, #1
 800a520:	f43f af12 	beq.w	800a348 <_printf_float+0x98>
 800a524:	f04f 0900 	mov.w	r9, #0
 800a528:	f104 0a1a 	add.w	sl, r4, #26
 800a52c:	9b07      	ldr	r3, [sp, #28]
 800a52e:	425b      	negs	r3, r3
 800a530:	454b      	cmp	r3, r9
 800a532:	dc01      	bgt.n	800a538 <_printf_float+0x288>
 800a534:	9b08      	ldr	r3, [sp, #32]
 800a536:	e795      	b.n	800a464 <_printf_float+0x1b4>
 800a538:	2301      	movs	r3, #1
 800a53a:	4652      	mov	r2, sl
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	f43f af00 	beq.w	800a348 <_printf_float+0x98>
 800a548:	f109 0901 	add.w	r9, r9, #1
 800a54c:	e7ee      	b.n	800a52c <_printf_float+0x27c>
 800a54e:	bf00      	nop
 800a550:	ffffffff 	.word	0xffffffff
 800a554:	7fefffff 	.word	0x7fefffff
 800a558:	0800d0e4 	.word	0x0800d0e4
 800a55c:	0800d0e8 	.word	0x0800d0e8
 800a560:	0800d0ec 	.word	0x0800d0ec
 800a564:	0800d0f0 	.word	0x0800d0f0
 800a568:	0800d0f4 	.word	0x0800d0f4
 800a56c:	9a08      	ldr	r2, [sp, #32]
 800a56e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a570:	429a      	cmp	r2, r3
 800a572:	bfa8      	it	ge
 800a574:	461a      	movge	r2, r3
 800a576:	2a00      	cmp	r2, #0
 800a578:	4691      	mov	r9, r2
 800a57a:	dc38      	bgt.n	800a5ee <_printf_float+0x33e>
 800a57c:	2300      	movs	r3, #0
 800a57e:	9305      	str	r3, [sp, #20]
 800a580:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a584:	f104 021a 	add.w	r2, r4, #26
 800a588:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a58a:	9905      	ldr	r1, [sp, #20]
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	eba3 0309 	sub.w	r3, r3, r9
 800a592:	428b      	cmp	r3, r1
 800a594:	dc33      	bgt.n	800a5fe <_printf_float+0x34e>
 800a596:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	db3c      	blt.n	800a618 <_printf_float+0x368>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	07da      	lsls	r2, r3, #31
 800a5a2:	d439      	bmi.n	800a618 <_printf_float+0x368>
 800a5a4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a5a8:	eba2 0903 	sub.w	r9, r2, r3
 800a5ac:	9b04      	ldr	r3, [sp, #16]
 800a5ae:	1ad2      	subs	r2, r2, r3
 800a5b0:	4591      	cmp	r9, r2
 800a5b2:	bfa8      	it	ge
 800a5b4:	4691      	movge	r9, r2
 800a5b6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ba:	dc35      	bgt.n	800a628 <_printf_float+0x378>
 800a5bc:	f04f 0800 	mov.w	r8, #0
 800a5c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5c4:	f104 0a1a 	add.w	sl, r4, #26
 800a5c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a5cc:	1a9b      	subs	r3, r3, r2
 800a5ce:	eba3 0309 	sub.w	r3, r3, r9
 800a5d2:	4543      	cmp	r3, r8
 800a5d4:	f77f af77 	ble.w	800a4c6 <_printf_float+0x216>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	4652      	mov	r2, sl
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f aeb0 	beq.w	800a348 <_printf_float+0x98>
 800a5e8:	f108 0801 	add.w	r8, r8, #1
 800a5ec:	e7ec      	b.n	800a5c8 <_printf_float+0x318>
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	47b8      	blx	r7
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	d1bf      	bne.n	800a57c <_printf_float+0x2cc>
 800a5fc:	e6a4      	b.n	800a348 <_printf_float+0x98>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	9204      	str	r2, [sp, #16]
 800a606:	47b8      	blx	r7
 800a608:	3001      	adds	r0, #1
 800a60a:	f43f ae9d 	beq.w	800a348 <_printf_float+0x98>
 800a60e:	9b05      	ldr	r3, [sp, #20]
 800a610:	9a04      	ldr	r2, [sp, #16]
 800a612:	3301      	adds	r3, #1
 800a614:	9305      	str	r3, [sp, #20]
 800a616:	e7b7      	b.n	800a588 <_printf_float+0x2d8>
 800a618:	4653      	mov	r3, sl
 800a61a:	465a      	mov	r2, fp
 800a61c:	4631      	mov	r1, r6
 800a61e:	4628      	mov	r0, r5
 800a620:	47b8      	blx	r7
 800a622:	3001      	adds	r0, #1
 800a624:	d1be      	bne.n	800a5a4 <_printf_float+0x2f4>
 800a626:	e68f      	b.n	800a348 <_printf_float+0x98>
 800a628:	9a04      	ldr	r2, [sp, #16]
 800a62a:	464b      	mov	r3, r9
 800a62c:	4442      	add	r2, r8
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	d1c1      	bne.n	800a5bc <_printf_float+0x30c>
 800a638:	e686      	b.n	800a348 <_printf_float+0x98>
 800a63a:	9a08      	ldr	r2, [sp, #32]
 800a63c:	2a01      	cmp	r2, #1
 800a63e:	dc01      	bgt.n	800a644 <_printf_float+0x394>
 800a640:	07db      	lsls	r3, r3, #31
 800a642:	d537      	bpl.n	800a6b4 <_printf_float+0x404>
 800a644:	2301      	movs	r3, #1
 800a646:	4642      	mov	r2, r8
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	f43f ae7a 	beq.w	800a348 <_printf_float+0x98>
 800a654:	4653      	mov	r3, sl
 800a656:	465a      	mov	r2, fp
 800a658:	4631      	mov	r1, r6
 800a65a:	4628      	mov	r0, r5
 800a65c:	47b8      	blx	r7
 800a65e:	3001      	adds	r0, #1
 800a660:	f43f ae72 	beq.w	800a348 <_printf_float+0x98>
 800a664:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a668:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a670:	9b08      	ldr	r3, [sp, #32]
 800a672:	d01a      	beq.n	800a6aa <_printf_float+0x3fa>
 800a674:	3b01      	subs	r3, #1
 800a676:	f108 0201 	add.w	r2, r8, #1
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	d10e      	bne.n	800a6a2 <_printf_float+0x3f2>
 800a684:	e660      	b.n	800a348 <_printf_float+0x98>
 800a686:	2301      	movs	r3, #1
 800a688:	464a      	mov	r2, r9
 800a68a:	4631      	mov	r1, r6
 800a68c:	4628      	mov	r0, r5
 800a68e:	47b8      	blx	r7
 800a690:	3001      	adds	r0, #1
 800a692:	f43f ae59 	beq.w	800a348 <_printf_float+0x98>
 800a696:	f108 0801 	add.w	r8, r8, #1
 800a69a:	9b08      	ldr	r3, [sp, #32]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	4543      	cmp	r3, r8
 800a6a0:	dcf1      	bgt.n	800a686 <_printf_float+0x3d6>
 800a6a2:	9b04      	ldr	r3, [sp, #16]
 800a6a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a6a8:	e6dd      	b.n	800a466 <_printf_float+0x1b6>
 800a6aa:	f04f 0800 	mov.w	r8, #0
 800a6ae:	f104 091a 	add.w	r9, r4, #26
 800a6b2:	e7f2      	b.n	800a69a <_printf_float+0x3ea>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	e7df      	b.n	800a67a <_printf_float+0x3ca>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	464a      	mov	r2, r9
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	47b8      	blx	r7
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	f43f ae3f 	beq.w	800a348 <_printf_float+0x98>
 800a6ca:	f108 0801 	add.w	r8, r8, #1
 800a6ce:	68e3      	ldr	r3, [r4, #12]
 800a6d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6d2:	1a5b      	subs	r3, r3, r1
 800a6d4:	4543      	cmp	r3, r8
 800a6d6:	dcf0      	bgt.n	800a6ba <_printf_float+0x40a>
 800a6d8:	e6f9      	b.n	800a4ce <_printf_float+0x21e>
 800a6da:	f04f 0800 	mov.w	r8, #0
 800a6de:	f104 0919 	add.w	r9, r4, #25
 800a6e2:	e7f4      	b.n	800a6ce <_printf_float+0x41e>

0800a6e4 <_printf_common>:
 800a6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e8:	4616      	mov	r6, r2
 800a6ea:	4699      	mov	r9, r3
 800a6ec:	688a      	ldr	r2, [r1, #8]
 800a6ee:	690b      	ldr	r3, [r1, #16]
 800a6f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	bfb8      	it	lt
 800a6f8:	4613      	movlt	r3, r2
 800a6fa:	6033      	str	r3, [r6, #0]
 800a6fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a700:	4607      	mov	r7, r0
 800a702:	460c      	mov	r4, r1
 800a704:	b10a      	cbz	r2, 800a70a <_printf_common+0x26>
 800a706:	3301      	adds	r3, #1
 800a708:	6033      	str	r3, [r6, #0]
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	0699      	lsls	r1, r3, #26
 800a70e:	bf42      	ittt	mi
 800a710:	6833      	ldrmi	r3, [r6, #0]
 800a712:	3302      	addmi	r3, #2
 800a714:	6033      	strmi	r3, [r6, #0]
 800a716:	6825      	ldr	r5, [r4, #0]
 800a718:	f015 0506 	ands.w	r5, r5, #6
 800a71c:	d106      	bne.n	800a72c <_printf_common+0x48>
 800a71e:	f104 0a19 	add.w	sl, r4, #25
 800a722:	68e3      	ldr	r3, [r4, #12]
 800a724:	6832      	ldr	r2, [r6, #0]
 800a726:	1a9b      	subs	r3, r3, r2
 800a728:	42ab      	cmp	r3, r5
 800a72a:	dc26      	bgt.n	800a77a <_printf_common+0x96>
 800a72c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a730:	1e13      	subs	r3, r2, #0
 800a732:	6822      	ldr	r2, [r4, #0]
 800a734:	bf18      	it	ne
 800a736:	2301      	movne	r3, #1
 800a738:	0692      	lsls	r2, r2, #26
 800a73a:	d42b      	bmi.n	800a794 <_printf_common+0xb0>
 800a73c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a740:	4649      	mov	r1, r9
 800a742:	4638      	mov	r0, r7
 800a744:	47c0      	blx	r8
 800a746:	3001      	adds	r0, #1
 800a748:	d01e      	beq.n	800a788 <_printf_common+0xa4>
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	6922      	ldr	r2, [r4, #16]
 800a74e:	f003 0306 	and.w	r3, r3, #6
 800a752:	2b04      	cmp	r3, #4
 800a754:	bf02      	ittt	eq
 800a756:	68e5      	ldreq	r5, [r4, #12]
 800a758:	6833      	ldreq	r3, [r6, #0]
 800a75a:	1aed      	subeq	r5, r5, r3
 800a75c:	68a3      	ldr	r3, [r4, #8]
 800a75e:	bf0c      	ite	eq
 800a760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a764:	2500      	movne	r5, #0
 800a766:	4293      	cmp	r3, r2
 800a768:	bfc4      	itt	gt
 800a76a:	1a9b      	subgt	r3, r3, r2
 800a76c:	18ed      	addgt	r5, r5, r3
 800a76e:	2600      	movs	r6, #0
 800a770:	341a      	adds	r4, #26
 800a772:	42b5      	cmp	r5, r6
 800a774:	d11a      	bne.n	800a7ac <_printf_common+0xc8>
 800a776:	2000      	movs	r0, #0
 800a778:	e008      	b.n	800a78c <_printf_common+0xa8>
 800a77a:	2301      	movs	r3, #1
 800a77c:	4652      	mov	r2, sl
 800a77e:	4649      	mov	r1, r9
 800a780:	4638      	mov	r0, r7
 800a782:	47c0      	blx	r8
 800a784:	3001      	adds	r0, #1
 800a786:	d103      	bne.n	800a790 <_printf_common+0xac>
 800a788:	f04f 30ff 	mov.w	r0, #4294967295
 800a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a790:	3501      	adds	r5, #1
 800a792:	e7c6      	b.n	800a722 <_printf_common+0x3e>
 800a794:	18e1      	adds	r1, r4, r3
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	2030      	movs	r0, #48	; 0x30
 800a79a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a79e:	4422      	add	r2, r4
 800a7a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	e7c7      	b.n	800a73c <_printf_common+0x58>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	47c0      	blx	r8
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	d0e6      	beq.n	800a788 <_printf_common+0xa4>
 800a7ba:	3601      	adds	r6, #1
 800a7bc:	e7d9      	b.n	800a772 <_printf_common+0x8e>
	...

0800a7c0 <_printf_i>:
 800a7c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c4:	7e0f      	ldrb	r7, [r1, #24]
 800a7c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7c8:	2f78      	cmp	r7, #120	; 0x78
 800a7ca:	4691      	mov	r9, r2
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	469a      	mov	sl, r3
 800a7d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7d6:	d807      	bhi.n	800a7e8 <_printf_i+0x28>
 800a7d8:	2f62      	cmp	r7, #98	; 0x62
 800a7da:	d80a      	bhi.n	800a7f2 <_printf_i+0x32>
 800a7dc:	2f00      	cmp	r7, #0
 800a7de:	f000 80d4 	beq.w	800a98a <_printf_i+0x1ca>
 800a7e2:	2f58      	cmp	r7, #88	; 0x58
 800a7e4:	f000 80c0 	beq.w	800a968 <_printf_i+0x1a8>
 800a7e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7f0:	e03a      	b.n	800a868 <_printf_i+0xa8>
 800a7f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7f6:	2b15      	cmp	r3, #21
 800a7f8:	d8f6      	bhi.n	800a7e8 <_printf_i+0x28>
 800a7fa:	a101      	add	r1, pc, #4	; (adr r1, 800a800 <_printf_i+0x40>)
 800a7fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a800:	0800a859 	.word	0x0800a859
 800a804:	0800a86d 	.word	0x0800a86d
 800a808:	0800a7e9 	.word	0x0800a7e9
 800a80c:	0800a7e9 	.word	0x0800a7e9
 800a810:	0800a7e9 	.word	0x0800a7e9
 800a814:	0800a7e9 	.word	0x0800a7e9
 800a818:	0800a86d 	.word	0x0800a86d
 800a81c:	0800a7e9 	.word	0x0800a7e9
 800a820:	0800a7e9 	.word	0x0800a7e9
 800a824:	0800a7e9 	.word	0x0800a7e9
 800a828:	0800a7e9 	.word	0x0800a7e9
 800a82c:	0800a971 	.word	0x0800a971
 800a830:	0800a899 	.word	0x0800a899
 800a834:	0800a92b 	.word	0x0800a92b
 800a838:	0800a7e9 	.word	0x0800a7e9
 800a83c:	0800a7e9 	.word	0x0800a7e9
 800a840:	0800a993 	.word	0x0800a993
 800a844:	0800a7e9 	.word	0x0800a7e9
 800a848:	0800a899 	.word	0x0800a899
 800a84c:	0800a7e9 	.word	0x0800a7e9
 800a850:	0800a7e9 	.word	0x0800a7e9
 800a854:	0800a933 	.word	0x0800a933
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	1d1a      	adds	r2, r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	602a      	str	r2, [r5, #0]
 800a860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a868:	2301      	movs	r3, #1
 800a86a:	e09f      	b.n	800a9ac <_printf_i+0x1ec>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	0607      	lsls	r7, r0, #24
 800a872:	f103 0104 	add.w	r1, r3, #4
 800a876:	6029      	str	r1, [r5, #0]
 800a878:	d501      	bpl.n	800a87e <_printf_i+0xbe>
 800a87a:	681e      	ldr	r6, [r3, #0]
 800a87c:	e003      	b.n	800a886 <_printf_i+0xc6>
 800a87e:	0646      	lsls	r6, r0, #25
 800a880:	d5fb      	bpl.n	800a87a <_printf_i+0xba>
 800a882:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a886:	2e00      	cmp	r6, #0
 800a888:	da03      	bge.n	800a892 <_printf_i+0xd2>
 800a88a:	232d      	movs	r3, #45	; 0x2d
 800a88c:	4276      	negs	r6, r6
 800a88e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a892:	485a      	ldr	r0, [pc, #360]	; (800a9fc <_printf_i+0x23c>)
 800a894:	230a      	movs	r3, #10
 800a896:	e012      	b.n	800a8be <_printf_i+0xfe>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	6820      	ldr	r0, [r4, #0]
 800a89c:	1d19      	adds	r1, r3, #4
 800a89e:	6029      	str	r1, [r5, #0]
 800a8a0:	0605      	lsls	r5, r0, #24
 800a8a2:	d501      	bpl.n	800a8a8 <_printf_i+0xe8>
 800a8a4:	681e      	ldr	r6, [r3, #0]
 800a8a6:	e002      	b.n	800a8ae <_printf_i+0xee>
 800a8a8:	0641      	lsls	r1, r0, #25
 800a8aa:	d5fb      	bpl.n	800a8a4 <_printf_i+0xe4>
 800a8ac:	881e      	ldrh	r6, [r3, #0]
 800a8ae:	4853      	ldr	r0, [pc, #332]	; (800a9fc <_printf_i+0x23c>)
 800a8b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a8b2:	bf0c      	ite	eq
 800a8b4:	2308      	moveq	r3, #8
 800a8b6:	230a      	movne	r3, #10
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8be:	6865      	ldr	r5, [r4, #4]
 800a8c0:	60a5      	str	r5, [r4, #8]
 800a8c2:	2d00      	cmp	r5, #0
 800a8c4:	bfa2      	ittt	ge
 800a8c6:	6821      	ldrge	r1, [r4, #0]
 800a8c8:	f021 0104 	bicge.w	r1, r1, #4
 800a8cc:	6021      	strge	r1, [r4, #0]
 800a8ce:	b90e      	cbnz	r6, 800a8d4 <_printf_i+0x114>
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	d04b      	beq.n	800a96c <_printf_i+0x1ac>
 800a8d4:	4615      	mov	r5, r2
 800a8d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8da:	fb03 6711 	mls	r7, r3, r1, r6
 800a8de:	5dc7      	ldrb	r7, [r0, r7]
 800a8e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8e4:	4637      	mov	r7, r6
 800a8e6:	42bb      	cmp	r3, r7
 800a8e8:	460e      	mov	r6, r1
 800a8ea:	d9f4      	bls.n	800a8d6 <_printf_i+0x116>
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	d10b      	bne.n	800a908 <_printf_i+0x148>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	07de      	lsls	r6, r3, #31
 800a8f4:	d508      	bpl.n	800a908 <_printf_i+0x148>
 800a8f6:	6923      	ldr	r3, [r4, #16]
 800a8f8:	6861      	ldr	r1, [r4, #4]
 800a8fa:	4299      	cmp	r1, r3
 800a8fc:	bfde      	ittt	le
 800a8fe:	2330      	movle	r3, #48	; 0x30
 800a900:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a904:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a908:	1b52      	subs	r2, r2, r5
 800a90a:	6122      	str	r2, [r4, #16]
 800a90c:	f8cd a000 	str.w	sl, [sp]
 800a910:	464b      	mov	r3, r9
 800a912:	aa03      	add	r2, sp, #12
 800a914:	4621      	mov	r1, r4
 800a916:	4640      	mov	r0, r8
 800a918:	f7ff fee4 	bl	800a6e4 <_printf_common>
 800a91c:	3001      	adds	r0, #1
 800a91e:	d14a      	bne.n	800a9b6 <_printf_i+0x1f6>
 800a920:	f04f 30ff 	mov.w	r0, #4294967295
 800a924:	b004      	add	sp, #16
 800a926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	f043 0320 	orr.w	r3, r3, #32
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	4833      	ldr	r0, [pc, #204]	; (800aa00 <_printf_i+0x240>)
 800a934:	2778      	movs	r7, #120	; 0x78
 800a936:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	6829      	ldr	r1, [r5, #0]
 800a93e:	061f      	lsls	r7, r3, #24
 800a940:	f851 6b04 	ldr.w	r6, [r1], #4
 800a944:	d402      	bmi.n	800a94c <_printf_i+0x18c>
 800a946:	065f      	lsls	r7, r3, #25
 800a948:	bf48      	it	mi
 800a94a:	b2b6      	uxthmi	r6, r6
 800a94c:	07df      	lsls	r7, r3, #31
 800a94e:	bf48      	it	mi
 800a950:	f043 0320 	orrmi.w	r3, r3, #32
 800a954:	6029      	str	r1, [r5, #0]
 800a956:	bf48      	it	mi
 800a958:	6023      	strmi	r3, [r4, #0]
 800a95a:	b91e      	cbnz	r6, 800a964 <_printf_i+0x1a4>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	f023 0320 	bic.w	r3, r3, #32
 800a962:	6023      	str	r3, [r4, #0]
 800a964:	2310      	movs	r3, #16
 800a966:	e7a7      	b.n	800a8b8 <_printf_i+0xf8>
 800a968:	4824      	ldr	r0, [pc, #144]	; (800a9fc <_printf_i+0x23c>)
 800a96a:	e7e4      	b.n	800a936 <_printf_i+0x176>
 800a96c:	4615      	mov	r5, r2
 800a96e:	e7bd      	b.n	800a8ec <_printf_i+0x12c>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	6826      	ldr	r6, [r4, #0]
 800a974:	6961      	ldr	r1, [r4, #20]
 800a976:	1d18      	adds	r0, r3, #4
 800a978:	6028      	str	r0, [r5, #0]
 800a97a:	0635      	lsls	r5, r6, #24
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	d501      	bpl.n	800a984 <_printf_i+0x1c4>
 800a980:	6019      	str	r1, [r3, #0]
 800a982:	e002      	b.n	800a98a <_printf_i+0x1ca>
 800a984:	0670      	lsls	r0, r6, #25
 800a986:	d5fb      	bpl.n	800a980 <_printf_i+0x1c0>
 800a988:	8019      	strh	r1, [r3, #0]
 800a98a:	2300      	movs	r3, #0
 800a98c:	6123      	str	r3, [r4, #16]
 800a98e:	4615      	mov	r5, r2
 800a990:	e7bc      	b.n	800a90c <_printf_i+0x14c>
 800a992:	682b      	ldr	r3, [r5, #0]
 800a994:	1d1a      	adds	r2, r3, #4
 800a996:	602a      	str	r2, [r5, #0]
 800a998:	681d      	ldr	r5, [r3, #0]
 800a99a:	6862      	ldr	r2, [r4, #4]
 800a99c:	2100      	movs	r1, #0
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f7f5 fc4e 	bl	8000240 <memchr>
 800a9a4:	b108      	cbz	r0, 800a9aa <_printf_i+0x1ea>
 800a9a6:	1b40      	subs	r0, r0, r5
 800a9a8:	6060      	str	r0, [r4, #4]
 800a9aa:	6863      	ldr	r3, [r4, #4]
 800a9ac:	6123      	str	r3, [r4, #16]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b4:	e7aa      	b.n	800a90c <_printf_i+0x14c>
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	462a      	mov	r2, r5
 800a9ba:	4649      	mov	r1, r9
 800a9bc:	4640      	mov	r0, r8
 800a9be:	47d0      	blx	sl
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d0ad      	beq.n	800a920 <_printf_i+0x160>
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	079b      	lsls	r3, r3, #30
 800a9c8:	d413      	bmi.n	800a9f2 <_printf_i+0x232>
 800a9ca:	68e0      	ldr	r0, [r4, #12]
 800a9cc:	9b03      	ldr	r3, [sp, #12]
 800a9ce:	4298      	cmp	r0, r3
 800a9d0:	bfb8      	it	lt
 800a9d2:	4618      	movlt	r0, r3
 800a9d4:	e7a6      	b.n	800a924 <_printf_i+0x164>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4632      	mov	r2, r6
 800a9da:	4649      	mov	r1, r9
 800a9dc:	4640      	mov	r0, r8
 800a9de:	47d0      	blx	sl
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d09d      	beq.n	800a920 <_printf_i+0x160>
 800a9e4:	3501      	adds	r5, #1
 800a9e6:	68e3      	ldr	r3, [r4, #12]
 800a9e8:	9903      	ldr	r1, [sp, #12]
 800a9ea:	1a5b      	subs	r3, r3, r1
 800a9ec:	42ab      	cmp	r3, r5
 800a9ee:	dcf2      	bgt.n	800a9d6 <_printf_i+0x216>
 800a9f0:	e7eb      	b.n	800a9ca <_printf_i+0x20a>
 800a9f2:	2500      	movs	r5, #0
 800a9f4:	f104 0619 	add.w	r6, r4, #25
 800a9f8:	e7f5      	b.n	800a9e6 <_printf_i+0x226>
 800a9fa:	bf00      	nop
 800a9fc:	0800d0f6 	.word	0x0800d0f6
 800aa00:	0800d107 	.word	0x0800d107

0800aa04 <std>:
 800aa04:	2300      	movs	r3, #0
 800aa06:	b510      	push	{r4, lr}
 800aa08:	4604      	mov	r4, r0
 800aa0a:	e9c0 3300 	strd	r3, r3, [r0]
 800aa0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa12:	6083      	str	r3, [r0, #8]
 800aa14:	8181      	strh	r1, [r0, #12]
 800aa16:	6643      	str	r3, [r0, #100]	; 0x64
 800aa18:	81c2      	strh	r2, [r0, #14]
 800aa1a:	6183      	str	r3, [r0, #24]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	2208      	movs	r2, #8
 800aa20:	305c      	adds	r0, #92	; 0x5c
 800aa22:	f000 f8f4 	bl	800ac0e <memset>
 800aa26:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <std+0x58>)
 800aa28:	6263      	str	r3, [r4, #36]	; 0x24
 800aa2a:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <std+0x5c>)
 800aa2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <std+0x60>)
 800aa30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa32:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <std+0x64>)
 800aa34:	6323      	str	r3, [r4, #48]	; 0x30
 800aa36:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <std+0x68>)
 800aa38:	6224      	str	r4, [r4, #32]
 800aa3a:	429c      	cmp	r4, r3
 800aa3c:	d006      	beq.n	800aa4c <std+0x48>
 800aa3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aa42:	4294      	cmp	r4, r2
 800aa44:	d002      	beq.n	800aa4c <std+0x48>
 800aa46:	33d0      	adds	r3, #208	; 0xd0
 800aa48:	429c      	cmp	r4, r3
 800aa4a:	d105      	bne.n	800aa58 <std+0x54>
 800aa4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa54:	f000 b9ae 	b.w	800adb4 <__retarget_lock_init_recursive>
 800aa58:	bd10      	pop	{r4, pc}
 800aa5a:	bf00      	nop
 800aa5c:	0800ab89 	.word	0x0800ab89
 800aa60:	0800abab 	.word	0x0800abab
 800aa64:	0800abe3 	.word	0x0800abe3
 800aa68:	0800ac07 	.word	0x0800ac07
 800aa6c:	200053b4 	.word	0x200053b4

0800aa70 <stdio_exit_handler>:
 800aa70:	4a02      	ldr	r2, [pc, #8]	; (800aa7c <stdio_exit_handler+0xc>)
 800aa72:	4903      	ldr	r1, [pc, #12]	; (800aa80 <stdio_exit_handler+0x10>)
 800aa74:	4803      	ldr	r0, [pc, #12]	; (800aa84 <stdio_exit_handler+0x14>)
 800aa76:	f000 b869 	b.w	800ab4c <_fwalk_sglue>
 800aa7a:	bf00      	nop
 800aa7c:	2000002c 	.word	0x2000002c
 800aa80:	0800c3c5 	.word	0x0800c3c5
 800aa84:	20000038 	.word	0x20000038

0800aa88 <cleanup_stdio>:
 800aa88:	6841      	ldr	r1, [r0, #4]
 800aa8a:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <cleanup_stdio+0x34>)
 800aa8c:	4299      	cmp	r1, r3
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	4604      	mov	r4, r0
 800aa92:	d001      	beq.n	800aa98 <cleanup_stdio+0x10>
 800aa94:	f001 fc96 	bl	800c3c4 <_fflush_r>
 800aa98:	68a1      	ldr	r1, [r4, #8]
 800aa9a:	4b09      	ldr	r3, [pc, #36]	; (800aac0 <cleanup_stdio+0x38>)
 800aa9c:	4299      	cmp	r1, r3
 800aa9e:	d002      	beq.n	800aaa6 <cleanup_stdio+0x1e>
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f001 fc8f 	bl	800c3c4 <_fflush_r>
 800aaa6:	68e1      	ldr	r1, [r4, #12]
 800aaa8:	4b06      	ldr	r3, [pc, #24]	; (800aac4 <cleanup_stdio+0x3c>)
 800aaaa:	4299      	cmp	r1, r3
 800aaac:	d004      	beq.n	800aab8 <cleanup_stdio+0x30>
 800aaae:	4620      	mov	r0, r4
 800aab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab4:	f001 bc86 	b.w	800c3c4 <_fflush_r>
 800aab8:	bd10      	pop	{r4, pc}
 800aaba:	bf00      	nop
 800aabc:	200053b4 	.word	0x200053b4
 800aac0:	2000541c 	.word	0x2000541c
 800aac4:	20005484 	.word	0x20005484

0800aac8 <global_stdio_init.part.0>:
 800aac8:	b510      	push	{r4, lr}
 800aaca:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <global_stdio_init.part.0+0x30>)
 800aacc:	4c0b      	ldr	r4, [pc, #44]	; (800aafc <global_stdio_init.part.0+0x34>)
 800aace:	4a0c      	ldr	r2, [pc, #48]	; (800ab00 <global_stdio_init.part.0+0x38>)
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	4620      	mov	r0, r4
 800aad4:	2200      	movs	r2, #0
 800aad6:	2104      	movs	r1, #4
 800aad8:	f7ff ff94 	bl	800aa04 <std>
 800aadc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aae0:	2201      	movs	r2, #1
 800aae2:	2109      	movs	r1, #9
 800aae4:	f7ff ff8e 	bl	800aa04 <std>
 800aae8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aaec:	2202      	movs	r2, #2
 800aaee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf2:	2112      	movs	r1, #18
 800aaf4:	f7ff bf86 	b.w	800aa04 <std>
 800aaf8:	200054ec 	.word	0x200054ec
 800aafc:	200053b4 	.word	0x200053b4
 800ab00:	0800aa71 	.word	0x0800aa71

0800ab04 <__sfp_lock_acquire>:
 800ab04:	4801      	ldr	r0, [pc, #4]	; (800ab0c <__sfp_lock_acquire+0x8>)
 800ab06:	f000 b956 	b.w	800adb6 <__retarget_lock_acquire_recursive>
 800ab0a:	bf00      	nop
 800ab0c:	200054f5 	.word	0x200054f5

0800ab10 <__sfp_lock_release>:
 800ab10:	4801      	ldr	r0, [pc, #4]	; (800ab18 <__sfp_lock_release+0x8>)
 800ab12:	f000 b951 	b.w	800adb8 <__retarget_lock_release_recursive>
 800ab16:	bf00      	nop
 800ab18:	200054f5 	.word	0x200054f5

0800ab1c <__sinit>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	4604      	mov	r4, r0
 800ab20:	f7ff fff0 	bl	800ab04 <__sfp_lock_acquire>
 800ab24:	6a23      	ldr	r3, [r4, #32]
 800ab26:	b11b      	cbz	r3, 800ab30 <__sinit+0x14>
 800ab28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab2c:	f7ff bff0 	b.w	800ab10 <__sfp_lock_release>
 800ab30:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <__sinit+0x28>)
 800ab32:	6223      	str	r3, [r4, #32]
 800ab34:	4b04      	ldr	r3, [pc, #16]	; (800ab48 <__sinit+0x2c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f5      	bne.n	800ab28 <__sinit+0xc>
 800ab3c:	f7ff ffc4 	bl	800aac8 <global_stdio_init.part.0>
 800ab40:	e7f2      	b.n	800ab28 <__sinit+0xc>
 800ab42:	bf00      	nop
 800ab44:	0800aa89 	.word	0x0800aa89
 800ab48:	200054ec 	.word	0x200054ec

0800ab4c <_fwalk_sglue>:
 800ab4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	4607      	mov	r7, r0
 800ab52:	4688      	mov	r8, r1
 800ab54:	4614      	mov	r4, r2
 800ab56:	2600      	movs	r6, #0
 800ab58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab5c:	f1b9 0901 	subs.w	r9, r9, #1
 800ab60:	d505      	bpl.n	800ab6e <_fwalk_sglue+0x22>
 800ab62:	6824      	ldr	r4, [r4, #0]
 800ab64:	2c00      	cmp	r4, #0
 800ab66:	d1f7      	bne.n	800ab58 <_fwalk_sglue+0xc>
 800ab68:	4630      	mov	r0, r6
 800ab6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6e:	89ab      	ldrh	r3, [r5, #12]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d907      	bls.n	800ab84 <_fwalk_sglue+0x38>
 800ab74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	d003      	beq.n	800ab84 <_fwalk_sglue+0x38>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4638      	mov	r0, r7
 800ab80:	47c0      	blx	r8
 800ab82:	4306      	orrs	r6, r0
 800ab84:	3568      	adds	r5, #104	; 0x68
 800ab86:	e7e9      	b.n	800ab5c <_fwalk_sglue+0x10>

0800ab88 <__sread>:
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab90:	f000 f8c2 	bl	800ad18 <_read_r>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	bfab      	itete	ge
 800ab98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab9c:	181b      	addge	r3, r3, r0
 800ab9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aba2:	bfac      	ite	ge
 800aba4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aba6:	81a3      	strhlt	r3, [r4, #12]
 800aba8:	bd10      	pop	{r4, pc}

0800abaa <__swrite>:
 800abaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abae:	461f      	mov	r7, r3
 800abb0:	898b      	ldrh	r3, [r1, #12]
 800abb2:	05db      	lsls	r3, r3, #23
 800abb4:	4605      	mov	r5, r0
 800abb6:	460c      	mov	r4, r1
 800abb8:	4616      	mov	r6, r2
 800abba:	d505      	bpl.n	800abc8 <__swrite+0x1e>
 800abbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc0:	2302      	movs	r3, #2
 800abc2:	2200      	movs	r2, #0
 800abc4:	f000 f896 	bl	800acf4 <_lseek_r>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abd2:	81a3      	strh	r3, [r4, #12]
 800abd4:	4632      	mov	r2, r6
 800abd6:	463b      	mov	r3, r7
 800abd8:	4628      	mov	r0, r5
 800abda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abde:	f000 b8ad 	b.w	800ad3c <_write_r>

0800abe2 <__sseek>:
 800abe2:	b510      	push	{r4, lr}
 800abe4:	460c      	mov	r4, r1
 800abe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abea:	f000 f883 	bl	800acf4 <_lseek_r>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	bf15      	itete	ne
 800abf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800abf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abfe:	81a3      	strheq	r3, [r4, #12]
 800ac00:	bf18      	it	ne
 800ac02:	81a3      	strhne	r3, [r4, #12]
 800ac04:	bd10      	pop	{r4, pc}

0800ac06 <__sclose>:
 800ac06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0a:	f000 b80d 	b.w	800ac28 <_close_r>

0800ac0e <memset>:
 800ac0e:	4402      	add	r2, r0
 800ac10:	4603      	mov	r3, r0
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d100      	bne.n	800ac18 <memset+0xa>
 800ac16:	4770      	bx	lr
 800ac18:	f803 1b01 	strb.w	r1, [r3], #1
 800ac1c:	e7f9      	b.n	800ac12 <memset+0x4>
	...

0800ac20 <_localeconv_r>:
 800ac20:	4800      	ldr	r0, [pc, #0]	; (800ac24 <_localeconv_r+0x4>)
 800ac22:	4770      	bx	lr
 800ac24:	20000178 	.word	0x20000178

0800ac28 <_close_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d06      	ldr	r5, [pc, #24]	; (800ac44 <_close_r+0x1c>)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	602b      	str	r3, [r5, #0]
 800ac34:	f7f7 fd1b 	bl	800266e <_close>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_close_r+0x1a>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_close_r+0x1a>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	200054f0 	.word	0x200054f0

0800ac48 <_reclaim_reent>:
 800ac48:	4b29      	ldr	r3, [pc, #164]	; (800acf0 <_reclaim_reent+0xa8>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4283      	cmp	r3, r0
 800ac4e:	b570      	push	{r4, r5, r6, lr}
 800ac50:	4604      	mov	r4, r0
 800ac52:	d04b      	beq.n	800acec <_reclaim_reent+0xa4>
 800ac54:	69c3      	ldr	r3, [r0, #28]
 800ac56:	b143      	cbz	r3, 800ac6a <_reclaim_reent+0x22>
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d144      	bne.n	800ace8 <_reclaim_reent+0xa0>
 800ac5e:	69e3      	ldr	r3, [r4, #28]
 800ac60:	6819      	ldr	r1, [r3, #0]
 800ac62:	b111      	cbz	r1, 800ac6a <_reclaim_reent+0x22>
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 feab 	bl	800b9c0 <_free_r>
 800ac6a:	6961      	ldr	r1, [r4, #20]
 800ac6c:	b111      	cbz	r1, 800ac74 <_reclaim_reent+0x2c>
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 fea6 	bl	800b9c0 <_free_r>
 800ac74:	69e1      	ldr	r1, [r4, #28]
 800ac76:	b111      	cbz	r1, 800ac7e <_reclaim_reent+0x36>
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 fea1 	bl	800b9c0 <_free_r>
 800ac7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ac80:	b111      	cbz	r1, 800ac88 <_reclaim_reent+0x40>
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fe9c 	bl	800b9c0 <_free_r>
 800ac88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac8a:	b111      	cbz	r1, 800ac92 <_reclaim_reent+0x4a>
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 fe97 	bl	800b9c0 <_free_r>
 800ac92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ac94:	b111      	cbz	r1, 800ac9c <_reclaim_reent+0x54>
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 fe92 	bl	800b9c0 <_free_r>
 800ac9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac9e:	b111      	cbz	r1, 800aca6 <_reclaim_reent+0x5e>
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fe8d 	bl	800b9c0 <_free_r>
 800aca6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aca8:	b111      	cbz	r1, 800acb0 <_reclaim_reent+0x68>
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fe88 	bl	800b9c0 <_free_r>
 800acb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800acb2:	b111      	cbz	r1, 800acba <_reclaim_reent+0x72>
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 fe83 	bl	800b9c0 <_free_r>
 800acba:	6a23      	ldr	r3, [r4, #32]
 800acbc:	b1b3      	cbz	r3, 800acec <_reclaim_reent+0xa4>
 800acbe:	4620      	mov	r0, r4
 800acc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acc4:	4718      	bx	r3
 800acc6:	5949      	ldr	r1, [r1, r5]
 800acc8:	b941      	cbnz	r1, 800acdc <_reclaim_reent+0x94>
 800acca:	3504      	adds	r5, #4
 800accc:	69e3      	ldr	r3, [r4, #28]
 800acce:	2d80      	cmp	r5, #128	; 0x80
 800acd0:	68d9      	ldr	r1, [r3, #12]
 800acd2:	d1f8      	bne.n	800acc6 <_reclaim_reent+0x7e>
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 fe73 	bl	800b9c0 <_free_r>
 800acda:	e7c0      	b.n	800ac5e <_reclaim_reent+0x16>
 800acdc:	680e      	ldr	r6, [r1, #0]
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 fe6e 	bl	800b9c0 <_free_r>
 800ace4:	4631      	mov	r1, r6
 800ace6:	e7ef      	b.n	800acc8 <_reclaim_reent+0x80>
 800ace8:	2500      	movs	r5, #0
 800acea:	e7ef      	b.n	800accc <_reclaim_reent+0x84>
 800acec:	bd70      	pop	{r4, r5, r6, pc}
 800acee:	bf00      	nop
 800acf0:	20000084 	.word	0x20000084

0800acf4 <_lseek_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d07      	ldr	r5, [pc, #28]	; (800ad14 <_lseek_r+0x20>)
 800acf8:	4604      	mov	r4, r0
 800acfa:	4608      	mov	r0, r1
 800acfc:	4611      	mov	r1, r2
 800acfe:	2200      	movs	r2, #0
 800ad00:	602a      	str	r2, [r5, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	f7f7 fcda 	bl	80026bc <_lseek>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_lseek_r+0x1e>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_lseek_r+0x1e>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	200054f0 	.word	0x200054f0

0800ad18 <_read_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	; (800ad38 <_read_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f7 fc68 	bl	80025fc <_read>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_read_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_read_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	200054f0 	.word	0x200054f0

0800ad3c <_write_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_write_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f7 fc73 	bl	8002636 <_write>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_write_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_write_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	200054f0 	.word	0x200054f0

0800ad60 <__errno>:
 800ad60:	4b01      	ldr	r3, [pc, #4]	; (800ad68 <__errno+0x8>)
 800ad62:	6818      	ldr	r0, [r3, #0]
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	20000084 	.word	0x20000084

0800ad6c <__libc_init_array>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	4d0d      	ldr	r5, [pc, #52]	; (800ada4 <__libc_init_array+0x38>)
 800ad70:	4c0d      	ldr	r4, [pc, #52]	; (800ada8 <__libc_init_array+0x3c>)
 800ad72:	1b64      	subs	r4, r4, r5
 800ad74:	10a4      	asrs	r4, r4, #2
 800ad76:	2600      	movs	r6, #0
 800ad78:	42a6      	cmp	r6, r4
 800ad7a:	d109      	bne.n	800ad90 <__libc_init_array+0x24>
 800ad7c:	4d0b      	ldr	r5, [pc, #44]	; (800adac <__libc_init_array+0x40>)
 800ad7e:	4c0c      	ldr	r4, [pc, #48]	; (800adb0 <__libc_init_array+0x44>)
 800ad80:	f002 f95a 	bl	800d038 <_init>
 800ad84:	1b64      	subs	r4, r4, r5
 800ad86:	10a4      	asrs	r4, r4, #2
 800ad88:	2600      	movs	r6, #0
 800ad8a:	42a6      	cmp	r6, r4
 800ad8c:	d105      	bne.n	800ad9a <__libc_init_array+0x2e>
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad94:	4798      	blx	r3
 800ad96:	3601      	adds	r6, #1
 800ad98:	e7ee      	b.n	800ad78 <__libc_init_array+0xc>
 800ad9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9e:	4798      	blx	r3
 800ada0:	3601      	adds	r6, #1
 800ada2:	e7f2      	b.n	800ad8a <__libc_init_array+0x1e>
 800ada4:	0800ed18 	.word	0x0800ed18
 800ada8:	0800ed18 	.word	0x0800ed18
 800adac:	0800ed18 	.word	0x0800ed18
 800adb0:	0800ed1c 	.word	0x0800ed1c

0800adb4 <__retarget_lock_init_recursive>:
 800adb4:	4770      	bx	lr

0800adb6 <__retarget_lock_acquire_recursive>:
 800adb6:	4770      	bx	lr

0800adb8 <__retarget_lock_release_recursive>:
 800adb8:	4770      	bx	lr

0800adba <memcpy>:
 800adba:	440a      	add	r2, r1
 800adbc:	4291      	cmp	r1, r2
 800adbe:	f100 33ff 	add.w	r3, r0, #4294967295
 800adc2:	d100      	bne.n	800adc6 <memcpy+0xc>
 800adc4:	4770      	bx	lr
 800adc6:	b510      	push	{r4, lr}
 800adc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800add0:	4291      	cmp	r1, r2
 800add2:	d1f9      	bne.n	800adc8 <memcpy+0xe>
 800add4:	bd10      	pop	{r4, pc}

0800add6 <quorem>:
 800add6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adda:	6903      	ldr	r3, [r0, #16]
 800addc:	690c      	ldr	r4, [r1, #16]
 800adde:	42a3      	cmp	r3, r4
 800ade0:	4607      	mov	r7, r0
 800ade2:	db7e      	blt.n	800aee2 <quorem+0x10c>
 800ade4:	3c01      	subs	r4, #1
 800ade6:	f101 0814 	add.w	r8, r1, #20
 800adea:	f100 0514 	add.w	r5, r0, #20
 800adee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adfc:	3301      	adds	r3, #1
 800adfe:	429a      	cmp	r2, r3
 800ae00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae08:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae0c:	d331      	bcc.n	800ae72 <quorem+0x9c>
 800ae0e:	f04f 0e00 	mov.w	lr, #0
 800ae12:	4640      	mov	r0, r8
 800ae14:	46ac      	mov	ip, r5
 800ae16:	46f2      	mov	sl, lr
 800ae18:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae1c:	b293      	uxth	r3, r2
 800ae1e:	fb06 e303 	mla	r3, r6, r3, lr
 800ae22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae26:	0c1a      	lsrs	r2, r3, #16
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	ebaa 0303 	sub.w	r3, sl, r3
 800ae2e:	f8dc a000 	ldr.w	sl, [ip]
 800ae32:	fa13 f38a 	uxtah	r3, r3, sl
 800ae36:	fb06 220e 	mla	r2, r6, lr, r2
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	9b00      	ldr	r3, [sp, #0]
 800ae3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae42:	b292      	uxth	r2, r2
 800ae44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae4c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae50:	4581      	cmp	r9, r0
 800ae52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae56:	f84c 3b04 	str.w	r3, [ip], #4
 800ae5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae5e:	d2db      	bcs.n	800ae18 <quorem+0x42>
 800ae60:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae64:	b92b      	cbnz	r3, 800ae72 <quorem+0x9c>
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	3b04      	subs	r3, #4
 800ae6a:	429d      	cmp	r5, r3
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	d32c      	bcc.n	800aeca <quorem+0xf4>
 800ae70:	613c      	str	r4, [r7, #16]
 800ae72:	4638      	mov	r0, r7
 800ae74:	f001 f920 	bl	800c0b8 <__mcmp>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	db22      	blt.n	800aec2 <quorem+0xec>
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	4629      	mov	r1, r5
 800ae80:	2000      	movs	r0, #0
 800ae82:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae86:	f8d1 c000 	ldr.w	ip, [r1]
 800ae8a:	b293      	uxth	r3, r2
 800ae8c:	1ac3      	subs	r3, r0, r3
 800ae8e:	0c12      	lsrs	r2, r2, #16
 800ae90:	fa13 f38c 	uxtah	r3, r3, ip
 800ae94:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ae98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aea2:	45c1      	cmp	r9, r8
 800aea4:	f841 3b04 	str.w	r3, [r1], #4
 800aea8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aeac:	d2e9      	bcs.n	800ae82 <quorem+0xac>
 800aeae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeb6:	b922      	cbnz	r2, 800aec2 <quorem+0xec>
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	429d      	cmp	r5, r3
 800aebc:	461a      	mov	r2, r3
 800aebe:	d30a      	bcc.n	800aed6 <quorem+0x100>
 800aec0:	613c      	str	r4, [r7, #16]
 800aec2:	4630      	mov	r0, r6
 800aec4:	b003      	add	sp, #12
 800aec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeca:	6812      	ldr	r2, [r2, #0]
 800aecc:	3b04      	subs	r3, #4
 800aece:	2a00      	cmp	r2, #0
 800aed0:	d1ce      	bne.n	800ae70 <quorem+0x9a>
 800aed2:	3c01      	subs	r4, #1
 800aed4:	e7c9      	b.n	800ae6a <quorem+0x94>
 800aed6:	6812      	ldr	r2, [r2, #0]
 800aed8:	3b04      	subs	r3, #4
 800aeda:	2a00      	cmp	r2, #0
 800aedc:	d1f0      	bne.n	800aec0 <quorem+0xea>
 800aede:	3c01      	subs	r4, #1
 800aee0:	e7eb      	b.n	800aeba <quorem+0xe4>
 800aee2:	2000      	movs	r0, #0
 800aee4:	e7ee      	b.n	800aec4 <quorem+0xee>
	...

0800aee8 <_dtoa_r>:
 800aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeec:	ed2d 8b02 	vpush	{d8}
 800aef0:	69c5      	ldr	r5, [r0, #28]
 800aef2:	b091      	sub	sp, #68	; 0x44
 800aef4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aef8:	ec59 8b10 	vmov	r8, r9, d0
 800aefc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800aefe:	9106      	str	r1, [sp, #24]
 800af00:	4606      	mov	r6, r0
 800af02:	9208      	str	r2, [sp, #32]
 800af04:	930c      	str	r3, [sp, #48]	; 0x30
 800af06:	b975      	cbnz	r5, 800af26 <_dtoa_r+0x3e>
 800af08:	2010      	movs	r0, #16
 800af0a:	f000 fda5 	bl	800ba58 <malloc>
 800af0e:	4602      	mov	r2, r0
 800af10:	61f0      	str	r0, [r6, #28]
 800af12:	b920      	cbnz	r0, 800af1e <_dtoa_r+0x36>
 800af14:	4ba6      	ldr	r3, [pc, #664]	; (800b1b0 <_dtoa_r+0x2c8>)
 800af16:	21ef      	movs	r1, #239	; 0xef
 800af18:	48a6      	ldr	r0, [pc, #664]	; (800b1b4 <_dtoa_r+0x2cc>)
 800af1a:	f001 fa8b 	bl	800c434 <__assert_func>
 800af1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af22:	6005      	str	r5, [r0, #0]
 800af24:	60c5      	str	r5, [r0, #12]
 800af26:	69f3      	ldr	r3, [r6, #28]
 800af28:	6819      	ldr	r1, [r3, #0]
 800af2a:	b151      	cbz	r1, 800af42 <_dtoa_r+0x5a>
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	604a      	str	r2, [r1, #4]
 800af30:	2301      	movs	r3, #1
 800af32:	4093      	lsls	r3, r2
 800af34:	608b      	str	r3, [r1, #8]
 800af36:	4630      	mov	r0, r6
 800af38:	f000 fe82 	bl	800bc40 <_Bfree>
 800af3c:	69f3      	ldr	r3, [r6, #28]
 800af3e:	2200      	movs	r2, #0
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	f1b9 0300 	subs.w	r3, r9, #0
 800af46:	bfbb      	ittet	lt
 800af48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af4c:	9303      	strlt	r3, [sp, #12]
 800af4e:	2300      	movge	r3, #0
 800af50:	2201      	movlt	r2, #1
 800af52:	bfac      	ite	ge
 800af54:	6023      	strge	r3, [r4, #0]
 800af56:	6022      	strlt	r2, [r4, #0]
 800af58:	4b97      	ldr	r3, [pc, #604]	; (800b1b8 <_dtoa_r+0x2d0>)
 800af5a:	9c03      	ldr	r4, [sp, #12]
 800af5c:	43a3      	bics	r3, r4
 800af5e:	d11c      	bne.n	800af9a <_dtoa_r+0xb2>
 800af60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af62:	f242 730f 	movw	r3, #9999	; 0x270f
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800af6c:	ea53 0308 	orrs.w	r3, r3, r8
 800af70:	f000 84fb 	beq.w	800b96a <_dtoa_r+0xa82>
 800af74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af76:	b963      	cbnz	r3, 800af92 <_dtoa_r+0xaa>
 800af78:	4b90      	ldr	r3, [pc, #576]	; (800b1bc <_dtoa_r+0x2d4>)
 800af7a:	e020      	b.n	800afbe <_dtoa_r+0xd6>
 800af7c:	4b90      	ldr	r3, [pc, #576]	; (800b1c0 <_dtoa_r+0x2d8>)
 800af7e:	9301      	str	r3, [sp, #4]
 800af80:	3308      	adds	r3, #8
 800af82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	9801      	ldr	r0, [sp, #4]
 800af88:	b011      	add	sp, #68	; 0x44
 800af8a:	ecbd 8b02 	vpop	{d8}
 800af8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af92:	4b8a      	ldr	r3, [pc, #552]	; (800b1bc <_dtoa_r+0x2d4>)
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	3303      	adds	r3, #3
 800af98:	e7f3      	b.n	800af82 <_dtoa_r+0x9a>
 800af9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800af9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800afa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa6:	d10c      	bne.n	800afc2 <_dtoa_r+0xda>
 800afa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afaa:	2301      	movs	r3, #1
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 84d7 	beq.w	800b964 <_dtoa_r+0xa7c>
 800afb6:	4b83      	ldr	r3, [pc, #524]	; (800b1c4 <_dtoa_r+0x2dc>)
 800afb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	e7e1      	b.n	800af86 <_dtoa_r+0x9e>
 800afc2:	aa0e      	add	r2, sp, #56	; 0x38
 800afc4:	a90f      	add	r1, sp, #60	; 0x3c
 800afc6:	4630      	mov	r0, r6
 800afc8:	eeb0 0b48 	vmov.f64	d0, d8
 800afcc:	f001 f91a 	bl	800c204 <__d2b>
 800afd0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800afd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afd6:	4605      	mov	r5, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d046      	beq.n	800b06a <_dtoa_r+0x182>
 800afdc:	eeb0 7b48 	vmov.f64	d7, d8
 800afe0:	ee18 1a90 	vmov	r1, s17
 800afe4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800afe8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800afec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aff4:	2000      	movs	r0, #0
 800aff6:	ee07 1a90 	vmov	s15, r1
 800affa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800affe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b198 <_dtoa_r+0x2b0>
 800b002:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b006:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b1a0 <_dtoa_r+0x2b8>
 800b00a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b00e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b1a8 <_dtoa_r+0x2c0>
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b01a:	eeb0 7b46 	vmov.f64	d7, d6
 800b01e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b022:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b026:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02e:	ee16 ba90 	vmov	fp, s13
 800b032:	9009      	str	r0, [sp, #36]	; 0x24
 800b034:	d508      	bpl.n	800b048 <_dtoa_r+0x160>
 800b036:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b03a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b042:	bf18      	it	ne
 800b044:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b048:	f1bb 0f16 	cmp.w	fp, #22
 800b04c:	d82b      	bhi.n	800b0a6 <_dtoa_r+0x1be>
 800b04e:	495e      	ldr	r1, [pc, #376]	; (800b1c8 <_dtoa_r+0x2e0>)
 800b050:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b054:	ed91 7b00 	vldr	d7, [r1]
 800b058:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b060:	d501      	bpl.n	800b066 <_dtoa_r+0x17e>
 800b062:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b066:	2100      	movs	r1, #0
 800b068:	e01e      	b.n	800b0a8 <_dtoa_r+0x1c0>
 800b06a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b06c:	4413      	add	r3, r2
 800b06e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800b072:	2920      	cmp	r1, #32
 800b074:	bfc1      	itttt	gt
 800b076:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800b07a:	408c      	lslgt	r4, r1
 800b07c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800b080:	fa28 f101 	lsrgt.w	r1, r8, r1
 800b084:	bfd6      	itet	le
 800b086:	f1c1 0120 	rsble	r1, r1, #32
 800b08a:	4321      	orrgt	r1, r4
 800b08c:	fa08 f101 	lslle.w	r1, r8, r1
 800b090:	ee07 1a90 	vmov	s15, r1
 800b094:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b098:	3b01      	subs	r3, #1
 800b09a:	ee17 1a90 	vmov	r1, s15
 800b09e:	2001      	movs	r0, #1
 800b0a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b0a4:	e7a7      	b.n	800aff6 <_dtoa_r+0x10e>
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	1ad2      	subs	r2, r2, r3
 800b0aa:	1e53      	subs	r3, r2, #1
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	bf45      	ittet	mi
 800b0b0:	f1c2 0301 	rsbmi	r3, r2, #1
 800b0b4:	9304      	strmi	r3, [sp, #16]
 800b0b6:	2300      	movpl	r3, #0
 800b0b8:	2300      	movmi	r3, #0
 800b0ba:	bf4c      	ite	mi
 800b0bc:	9305      	strmi	r3, [sp, #20]
 800b0be:	9304      	strpl	r3, [sp, #16]
 800b0c0:	f1bb 0f00 	cmp.w	fp, #0
 800b0c4:	910b      	str	r1, [sp, #44]	; 0x2c
 800b0c6:	db18      	blt.n	800b0fa <_dtoa_r+0x212>
 800b0c8:	9b05      	ldr	r3, [sp, #20]
 800b0ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b0ce:	445b      	add	r3, fp
 800b0d0:	9305      	str	r3, [sp, #20]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	9a06      	ldr	r2, [sp, #24]
 800b0d6:	2a09      	cmp	r2, #9
 800b0d8:	d848      	bhi.n	800b16c <_dtoa_r+0x284>
 800b0da:	2a05      	cmp	r2, #5
 800b0dc:	bfc4      	itt	gt
 800b0de:	3a04      	subgt	r2, #4
 800b0e0:	9206      	strgt	r2, [sp, #24]
 800b0e2:	9a06      	ldr	r2, [sp, #24]
 800b0e4:	f1a2 0202 	sub.w	r2, r2, #2
 800b0e8:	bfcc      	ite	gt
 800b0ea:	2400      	movgt	r4, #0
 800b0ec:	2401      	movle	r4, #1
 800b0ee:	2a03      	cmp	r2, #3
 800b0f0:	d847      	bhi.n	800b182 <_dtoa_r+0x29a>
 800b0f2:	e8df f002 	tbb	[pc, r2]
 800b0f6:	2d0b      	.short	0x2d0b
 800b0f8:	392b      	.short	0x392b
 800b0fa:	9b04      	ldr	r3, [sp, #16]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	eba3 030b 	sub.w	r3, r3, fp
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	920a      	str	r2, [sp, #40]	; 0x28
 800b106:	f1cb 0300 	rsb	r3, fp, #0
 800b10a:	e7e3      	b.n	800b0d4 <_dtoa_r+0x1ec>
 800b10c:	2200      	movs	r2, #0
 800b10e:	9207      	str	r2, [sp, #28]
 800b110:	9a08      	ldr	r2, [sp, #32]
 800b112:	2a00      	cmp	r2, #0
 800b114:	dc38      	bgt.n	800b188 <_dtoa_r+0x2a0>
 800b116:	f04f 0a01 	mov.w	sl, #1
 800b11a:	46d1      	mov	r9, sl
 800b11c:	4652      	mov	r2, sl
 800b11e:	f8cd a020 	str.w	sl, [sp, #32]
 800b122:	69f7      	ldr	r7, [r6, #28]
 800b124:	2100      	movs	r1, #0
 800b126:	2004      	movs	r0, #4
 800b128:	f100 0c14 	add.w	ip, r0, #20
 800b12c:	4594      	cmp	ip, r2
 800b12e:	d930      	bls.n	800b192 <_dtoa_r+0x2aa>
 800b130:	6079      	str	r1, [r7, #4]
 800b132:	4630      	mov	r0, r6
 800b134:	930d      	str	r3, [sp, #52]	; 0x34
 800b136:	f000 fd43 	bl	800bbc0 <_Balloc>
 800b13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b13c:	9001      	str	r0, [sp, #4]
 800b13e:	4602      	mov	r2, r0
 800b140:	2800      	cmp	r0, #0
 800b142:	d145      	bne.n	800b1d0 <_dtoa_r+0x2e8>
 800b144:	4b21      	ldr	r3, [pc, #132]	; (800b1cc <_dtoa_r+0x2e4>)
 800b146:	f240 11af 	movw	r1, #431	; 0x1af
 800b14a:	e6e5      	b.n	800af18 <_dtoa_r+0x30>
 800b14c:	2201      	movs	r2, #1
 800b14e:	e7de      	b.n	800b10e <_dtoa_r+0x226>
 800b150:	2200      	movs	r2, #0
 800b152:	9207      	str	r2, [sp, #28]
 800b154:	9a08      	ldr	r2, [sp, #32]
 800b156:	eb0b 0a02 	add.w	sl, fp, r2
 800b15a:	f10a 0901 	add.w	r9, sl, #1
 800b15e:	464a      	mov	r2, r9
 800b160:	2a01      	cmp	r2, #1
 800b162:	bfb8      	it	lt
 800b164:	2201      	movlt	r2, #1
 800b166:	e7dc      	b.n	800b122 <_dtoa_r+0x23a>
 800b168:	2201      	movs	r2, #1
 800b16a:	e7f2      	b.n	800b152 <_dtoa_r+0x26a>
 800b16c:	2401      	movs	r4, #1
 800b16e:	2200      	movs	r2, #0
 800b170:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b174:	f04f 3aff 	mov.w	sl, #4294967295
 800b178:	2100      	movs	r1, #0
 800b17a:	46d1      	mov	r9, sl
 800b17c:	2212      	movs	r2, #18
 800b17e:	9108      	str	r1, [sp, #32]
 800b180:	e7cf      	b.n	800b122 <_dtoa_r+0x23a>
 800b182:	2201      	movs	r2, #1
 800b184:	9207      	str	r2, [sp, #28]
 800b186:	e7f5      	b.n	800b174 <_dtoa_r+0x28c>
 800b188:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b18c:	46d1      	mov	r9, sl
 800b18e:	4652      	mov	r2, sl
 800b190:	e7c7      	b.n	800b122 <_dtoa_r+0x23a>
 800b192:	3101      	adds	r1, #1
 800b194:	0040      	lsls	r0, r0, #1
 800b196:	e7c7      	b.n	800b128 <_dtoa_r+0x240>
 800b198:	636f4361 	.word	0x636f4361
 800b19c:	3fd287a7 	.word	0x3fd287a7
 800b1a0:	8b60c8b3 	.word	0x8b60c8b3
 800b1a4:	3fc68a28 	.word	0x3fc68a28
 800b1a8:	509f79fb 	.word	0x509f79fb
 800b1ac:	3fd34413 	.word	0x3fd34413
 800b1b0:	0800d125 	.word	0x0800d125
 800b1b4:	0800d13c 	.word	0x0800d13c
 800b1b8:	7ff00000 	.word	0x7ff00000
 800b1bc:	0800d121 	.word	0x0800d121
 800b1c0:	0800d118 	.word	0x0800d118
 800b1c4:	0800d0f5 	.word	0x0800d0f5
 800b1c8:	0800d228 	.word	0x0800d228
 800b1cc:	0800d194 	.word	0x0800d194
 800b1d0:	69f2      	ldr	r2, [r6, #28]
 800b1d2:	9901      	ldr	r1, [sp, #4]
 800b1d4:	6011      	str	r1, [r2, #0]
 800b1d6:	f1b9 0f0e 	cmp.w	r9, #14
 800b1da:	d86c      	bhi.n	800b2b6 <_dtoa_r+0x3ce>
 800b1dc:	2c00      	cmp	r4, #0
 800b1de:	d06a      	beq.n	800b2b6 <_dtoa_r+0x3ce>
 800b1e0:	f1bb 0f00 	cmp.w	fp, #0
 800b1e4:	f340 80a0 	ble.w	800b328 <_dtoa_r+0x440>
 800b1e8:	4ac1      	ldr	r2, [pc, #772]	; (800b4f0 <_dtoa_r+0x608>)
 800b1ea:	f00b 010f 	and.w	r1, fp, #15
 800b1ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b1f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b1f6:	ed92 7b00 	vldr	d7, [r2]
 800b1fa:	ea4f 122b 	mov.w	r2, fp, asr #4
 800b1fe:	f000 8087 	beq.w	800b310 <_dtoa_r+0x428>
 800b202:	49bc      	ldr	r1, [pc, #752]	; (800b4f4 <_dtoa_r+0x60c>)
 800b204:	ed91 6b08 	vldr	d6, [r1, #32]
 800b208:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b20c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b210:	f002 020f 	and.w	r2, r2, #15
 800b214:	2103      	movs	r1, #3
 800b216:	48b7      	ldr	r0, [pc, #732]	; (800b4f4 <_dtoa_r+0x60c>)
 800b218:	2a00      	cmp	r2, #0
 800b21a:	d17b      	bne.n	800b314 <_dtoa_r+0x42c>
 800b21c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b220:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b224:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b22a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b22e:	2a00      	cmp	r2, #0
 800b230:	f000 80a0 	beq.w	800b374 <_dtoa_r+0x48c>
 800b234:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b238:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b240:	f140 8098 	bpl.w	800b374 <_dtoa_r+0x48c>
 800b244:	f1b9 0f00 	cmp.w	r9, #0
 800b248:	f000 8094 	beq.w	800b374 <_dtoa_r+0x48c>
 800b24c:	f1ba 0f00 	cmp.w	sl, #0
 800b250:	dd2f      	ble.n	800b2b2 <_dtoa_r+0x3ca>
 800b252:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b256:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b25a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b25e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b262:	3101      	adds	r1, #1
 800b264:	4654      	mov	r4, sl
 800b266:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b26a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b26e:	ee07 1a90 	vmov	s15, r1
 800b272:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b276:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b27a:	ee15 7a90 	vmov	r7, s11
 800b27e:	ec51 0b15 	vmov	r0, r1, d5
 800b282:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b286:	2c00      	cmp	r4, #0
 800b288:	d177      	bne.n	800b37a <_dtoa_r+0x492>
 800b28a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b28e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b292:	ec41 0b17 	vmov	d7, r0, r1
 800b296:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29e:	f300 826a 	bgt.w	800b776 <_dtoa_r+0x88e>
 800b2a2:	eeb1 7b47 	vneg.f64	d7, d7
 800b2a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ae:	f100 8260 	bmi.w	800b772 <_dtoa_r+0x88a>
 800b2b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b2b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	f2c0 811d 	blt.w	800b4f8 <_dtoa_r+0x610>
 800b2be:	f1bb 0f0e 	cmp.w	fp, #14
 800b2c2:	f300 8119 	bgt.w	800b4f8 <_dtoa_r+0x610>
 800b2c6:	4b8a      	ldr	r3, [pc, #552]	; (800b4f0 <_dtoa_r+0x608>)
 800b2c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2cc:	ed93 6b00 	vldr	d6, [r3]
 800b2d0:	9b08      	ldr	r3, [sp, #32]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f280 80b7 	bge.w	800b446 <_dtoa_r+0x55e>
 800b2d8:	f1b9 0f00 	cmp.w	r9, #0
 800b2dc:	f300 80b3 	bgt.w	800b446 <_dtoa_r+0x55e>
 800b2e0:	f040 8246 	bne.w	800b770 <_dtoa_r+0x888>
 800b2e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b2e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b2ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f8:	464c      	mov	r4, r9
 800b2fa:	464f      	mov	r7, r9
 800b2fc:	f280 821c 	bge.w	800b738 <_dtoa_r+0x850>
 800b300:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b304:	2331      	movs	r3, #49	; 0x31
 800b306:	f808 3b01 	strb.w	r3, [r8], #1
 800b30a:	f10b 0b01 	add.w	fp, fp, #1
 800b30e:	e218      	b.n	800b742 <_dtoa_r+0x85a>
 800b310:	2102      	movs	r1, #2
 800b312:	e780      	b.n	800b216 <_dtoa_r+0x32e>
 800b314:	07d4      	lsls	r4, r2, #31
 800b316:	d504      	bpl.n	800b322 <_dtoa_r+0x43a>
 800b318:	ed90 6b00 	vldr	d6, [r0]
 800b31c:	3101      	adds	r1, #1
 800b31e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b322:	1052      	asrs	r2, r2, #1
 800b324:	3008      	adds	r0, #8
 800b326:	e777      	b.n	800b218 <_dtoa_r+0x330>
 800b328:	d022      	beq.n	800b370 <_dtoa_r+0x488>
 800b32a:	f1cb 0200 	rsb	r2, fp, #0
 800b32e:	4970      	ldr	r1, [pc, #448]	; (800b4f0 <_dtoa_r+0x608>)
 800b330:	f002 000f 	and.w	r0, r2, #15
 800b334:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b338:	ed91 7b00 	vldr	d7, [r1]
 800b33c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b340:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b344:	486b      	ldr	r0, [pc, #428]	; (800b4f4 <_dtoa_r+0x60c>)
 800b346:	1112      	asrs	r2, r2, #4
 800b348:	2400      	movs	r4, #0
 800b34a:	2102      	movs	r1, #2
 800b34c:	b92a      	cbnz	r2, 800b35a <_dtoa_r+0x472>
 800b34e:	2c00      	cmp	r4, #0
 800b350:	f43f af6a 	beq.w	800b228 <_dtoa_r+0x340>
 800b354:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b358:	e766      	b.n	800b228 <_dtoa_r+0x340>
 800b35a:	07d7      	lsls	r7, r2, #31
 800b35c:	d505      	bpl.n	800b36a <_dtoa_r+0x482>
 800b35e:	ed90 6b00 	vldr	d6, [r0]
 800b362:	3101      	adds	r1, #1
 800b364:	2401      	movs	r4, #1
 800b366:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b36a:	1052      	asrs	r2, r2, #1
 800b36c:	3008      	adds	r0, #8
 800b36e:	e7ed      	b.n	800b34c <_dtoa_r+0x464>
 800b370:	2102      	movs	r1, #2
 800b372:	e759      	b.n	800b228 <_dtoa_r+0x340>
 800b374:	465a      	mov	r2, fp
 800b376:	464c      	mov	r4, r9
 800b378:	e775      	b.n	800b266 <_dtoa_r+0x37e>
 800b37a:	ec41 0b17 	vmov	d7, r0, r1
 800b37e:	495c      	ldr	r1, [pc, #368]	; (800b4f0 <_dtoa_r+0x608>)
 800b380:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b384:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b388:	9901      	ldr	r1, [sp, #4]
 800b38a:	440c      	add	r4, r1
 800b38c:	9907      	ldr	r1, [sp, #28]
 800b38e:	b351      	cbz	r1, 800b3e6 <_dtoa_r+0x4fe>
 800b390:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b394:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b398:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b39c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b3a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b3a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b3a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b3ac:	ee14 1a90 	vmov	r1, s9
 800b3b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b3b4:	3130      	adds	r1, #48	; 0x30
 800b3b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b3ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c2:	f808 1b01 	strb.w	r1, [r8], #1
 800b3c6:	d439      	bmi.n	800b43c <_dtoa_r+0x554>
 800b3c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b3cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d4:	d472      	bmi.n	800b4bc <_dtoa_r+0x5d4>
 800b3d6:	45a0      	cmp	r8, r4
 800b3d8:	f43f af6b 	beq.w	800b2b2 <_dtoa_r+0x3ca>
 800b3dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b3e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b3e4:	e7e0      	b.n	800b3a8 <_dtoa_r+0x4c0>
 800b3e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b3ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b3f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b3f8:	ee14 1a90 	vmov	r1, s9
 800b3fc:	3130      	adds	r1, #48	; 0x30
 800b3fe:	f808 1b01 	strb.w	r1, [r8], #1
 800b402:	45a0      	cmp	r8, r4
 800b404:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b408:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b40c:	d118      	bne.n	800b440 <_dtoa_r+0x558>
 800b40e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b412:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b416:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41e:	dc4d      	bgt.n	800b4bc <_dtoa_r+0x5d4>
 800b420:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b424:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42c:	f57f af41 	bpl.w	800b2b2 <_dtoa_r+0x3ca>
 800b430:	4680      	mov	r8, r0
 800b432:	3801      	subs	r0, #1
 800b434:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b438:	2b30      	cmp	r3, #48	; 0x30
 800b43a:	d0f9      	beq.n	800b430 <_dtoa_r+0x548>
 800b43c:	4693      	mov	fp, r2
 800b43e:	e02a      	b.n	800b496 <_dtoa_r+0x5ae>
 800b440:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b444:	e7d6      	b.n	800b3f4 <_dtoa_r+0x50c>
 800b446:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b44a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b44e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b452:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b456:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b45a:	ee15 3a10 	vmov	r3, s10
 800b45e:	3330      	adds	r3, #48	; 0x30
 800b460:	f808 3b01 	strb.w	r3, [r8], #1
 800b464:	9b01      	ldr	r3, [sp, #4]
 800b466:	eba8 0303 	sub.w	r3, r8, r3
 800b46a:	4599      	cmp	r9, r3
 800b46c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b470:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b474:	d133      	bne.n	800b4de <_dtoa_r+0x5f6>
 800b476:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b47a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b482:	dc1a      	bgt.n	800b4ba <_dtoa_r+0x5d2>
 800b484:	eeb4 7b46 	vcmp.f64	d7, d6
 800b488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48c:	d103      	bne.n	800b496 <_dtoa_r+0x5ae>
 800b48e:	ee15 3a10 	vmov	r3, s10
 800b492:	07d9      	lsls	r1, r3, #31
 800b494:	d411      	bmi.n	800b4ba <_dtoa_r+0x5d2>
 800b496:	4629      	mov	r1, r5
 800b498:	4630      	mov	r0, r6
 800b49a:	f000 fbd1 	bl	800bc40 <_Bfree>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4a2:	f888 3000 	strb.w	r3, [r8]
 800b4a6:	f10b 0301 	add.w	r3, fp, #1
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f43f ad69 	beq.w	800af86 <_dtoa_r+0x9e>
 800b4b4:	f8c3 8000 	str.w	r8, [r3]
 800b4b8:	e565      	b.n	800af86 <_dtoa_r+0x9e>
 800b4ba:	465a      	mov	r2, fp
 800b4bc:	4643      	mov	r3, r8
 800b4be:	4698      	mov	r8, r3
 800b4c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b4c4:	2939      	cmp	r1, #57	; 0x39
 800b4c6:	d106      	bne.n	800b4d6 <_dtoa_r+0x5ee>
 800b4c8:	9901      	ldr	r1, [sp, #4]
 800b4ca:	4299      	cmp	r1, r3
 800b4cc:	d1f7      	bne.n	800b4be <_dtoa_r+0x5d6>
 800b4ce:	9801      	ldr	r0, [sp, #4]
 800b4d0:	2130      	movs	r1, #48	; 0x30
 800b4d2:	3201      	adds	r2, #1
 800b4d4:	7001      	strb	r1, [r0, #0]
 800b4d6:	7819      	ldrb	r1, [r3, #0]
 800b4d8:	3101      	adds	r1, #1
 800b4da:	7019      	strb	r1, [r3, #0]
 800b4dc:	e7ae      	b.n	800b43c <_dtoa_r+0x554>
 800b4de:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b4e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ea:	d1b2      	bne.n	800b452 <_dtoa_r+0x56a>
 800b4ec:	e7d3      	b.n	800b496 <_dtoa_r+0x5ae>
 800b4ee:	bf00      	nop
 800b4f0:	0800d228 	.word	0x0800d228
 800b4f4:	0800d200 	.word	0x0800d200
 800b4f8:	9907      	ldr	r1, [sp, #28]
 800b4fa:	2900      	cmp	r1, #0
 800b4fc:	f000 80d0 	beq.w	800b6a0 <_dtoa_r+0x7b8>
 800b500:	9906      	ldr	r1, [sp, #24]
 800b502:	2901      	cmp	r1, #1
 800b504:	f300 80b4 	bgt.w	800b670 <_dtoa_r+0x788>
 800b508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b50a:	2900      	cmp	r1, #0
 800b50c:	f000 80ac 	beq.w	800b668 <_dtoa_r+0x780>
 800b510:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b514:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b518:	461c      	mov	r4, r3
 800b51a:	9309      	str	r3, [sp, #36]	; 0x24
 800b51c:	9b04      	ldr	r3, [sp, #16]
 800b51e:	4413      	add	r3, r2
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	9b05      	ldr	r3, [sp, #20]
 800b524:	2101      	movs	r1, #1
 800b526:	4413      	add	r3, r2
 800b528:	4630      	mov	r0, r6
 800b52a:	9305      	str	r3, [sp, #20]
 800b52c:	f000 fc3e 	bl	800bdac <__i2b>
 800b530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b532:	4607      	mov	r7, r0
 800b534:	f1b8 0f00 	cmp.w	r8, #0
 800b538:	d00d      	beq.n	800b556 <_dtoa_r+0x66e>
 800b53a:	9a05      	ldr	r2, [sp, #20]
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	dd0a      	ble.n	800b556 <_dtoa_r+0x66e>
 800b540:	4542      	cmp	r2, r8
 800b542:	9904      	ldr	r1, [sp, #16]
 800b544:	bfa8      	it	ge
 800b546:	4642      	movge	r2, r8
 800b548:	1a89      	subs	r1, r1, r2
 800b54a:	9104      	str	r1, [sp, #16]
 800b54c:	9905      	ldr	r1, [sp, #20]
 800b54e:	eba8 0802 	sub.w	r8, r8, r2
 800b552:	1a8a      	subs	r2, r1, r2
 800b554:	9205      	str	r2, [sp, #20]
 800b556:	b303      	cbz	r3, 800b59a <_dtoa_r+0x6b2>
 800b558:	9a07      	ldr	r2, [sp, #28]
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	f000 80a5 	beq.w	800b6aa <_dtoa_r+0x7c2>
 800b560:	2c00      	cmp	r4, #0
 800b562:	dd13      	ble.n	800b58c <_dtoa_r+0x6a4>
 800b564:	4639      	mov	r1, r7
 800b566:	4622      	mov	r2, r4
 800b568:	4630      	mov	r0, r6
 800b56a:	930d      	str	r3, [sp, #52]	; 0x34
 800b56c:	f000 fcde 	bl	800bf2c <__pow5mult>
 800b570:	462a      	mov	r2, r5
 800b572:	4601      	mov	r1, r0
 800b574:	4607      	mov	r7, r0
 800b576:	4630      	mov	r0, r6
 800b578:	f000 fc2e 	bl	800bdd8 <__multiply>
 800b57c:	4629      	mov	r1, r5
 800b57e:	9009      	str	r0, [sp, #36]	; 0x24
 800b580:	4630      	mov	r0, r6
 800b582:	f000 fb5d 	bl	800bc40 <_Bfree>
 800b586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b58a:	4615      	mov	r5, r2
 800b58c:	1b1a      	subs	r2, r3, r4
 800b58e:	d004      	beq.n	800b59a <_dtoa_r+0x6b2>
 800b590:	4629      	mov	r1, r5
 800b592:	4630      	mov	r0, r6
 800b594:	f000 fcca 	bl	800bf2c <__pow5mult>
 800b598:	4605      	mov	r5, r0
 800b59a:	2101      	movs	r1, #1
 800b59c:	4630      	mov	r0, r6
 800b59e:	f000 fc05 	bl	800bdac <__i2b>
 800b5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	f340 8081 	ble.w	800b6ae <_dtoa_r+0x7c6>
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f000 fcbb 	bl	800bf2c <__pow5mult>
 800b5b6:	9b06      	ldr	r3, [sp, #24]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	dd7a      	ble.n	800b6b4 <_dtoa_r+0x7cc>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c2:	6922      	ldr	r2, [r4, #16]
 800b5c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b5c8:	6910      	ldr	r0, [r2, #16]
 800b5ca:	f000 fba1 	bl	800bd10 <__hi0bits>
 800b5ce:	f1c0 0020 	rsb	r0, r0, #32
 800b5d2:	9b05      	ldr	r3, [sp, #20]
 800b5d4:	4418      	add	r0, r3
 800b5d6:	f010 001f 	ands.w	r0, r0, #31
 800b5da:	f000 8093 	beq.w	800b704 <_dtoa_r+0x81c>
 800b5de:	f1c0 0220 	rsb	r2, r0, #32
 800b5e2:	2a04      	cmp	r2, #4
 800b5e4:	f340 8085 	ble.w	800b6f2 <_dtoa_r+0x80a>
 800b5e8:	9b04      	ldr	r3, [sp, #16]
 800b5ea:	f1c0 001c 	rsb	r0, r0, #28
 800b5ee:	4403      	add	r3, r0
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	9b05      	ldr	r3, [sp, #20]
 800b5f4:	4480      	add	r8, r0
 800b5f6:	4403      	add	r3, r0
 800b5f8:	9305      	str	r3, [sp, #20]
 800b5fa:	9b04      	ldr	r3, [sp, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dd05      	ble.n	800b60c <_dtoa_r+0x724>
 800b600:	4629      	mov	r1, r5
 800b602:	461a      	mov	r2, r3
 800b604:	4630      	mov	r0, r6
 800b606:	f000 fceb 	bl	800bfe0 <__lshift>
 800b60a:	4605      	mov	r5, r0
 800b60c:	9b05      	ldr	r3, [sp, #20]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	dd05      	ble.n	800b61e <_dtoa_r+0x736>
 800b612:	4621      	mov	r1, r4
 800b614:	461a      	mov	r2, r3
 800b616:	4630      	mov	r0, r6
 800b618:	f000 fce2 	bl	800bfe0 <__lshift>
 800b61c:	4604      	mov	r4, r0
 800b61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d071      	beq.n	800b708 <_dtoa_r+0x820>
 800b624:	4621      	mov	r1, r4
 800b626:	4628      	mov	r0, r5
 800b628:	f000 fd46 	bl	800c0b8 <__mcmp>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	da6b      	bge.n	800b708 <_dtoa_r+0x820>
 800b630:	2300      	movs	r3, #0
 800b632:	4629      	mov	r1, r5
 800b634:	220a      	movs	r2, #10
 800b636:	4630      	mov	r0, r6
 800b638:	f000 fb24 	bl	800bc84 <__multadd>
 800b63c:	9b07      	ldr	r3, [sp, #28]
 800b63e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b642:	4605      	mov	r5, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 8197 	beq.w	800b978 <_dtoa_r+0xa90>
 800b64a:	4639      	mov	r1, r7
 800b64c:	2300      	movs	r3, #0
 800b64e:	220a      	movs	r2, #10
 800b650:	4630      	mov	r0, r6
 800b652:	f000 fb17 	bl	800bc84 <__multadd>
 800b656:	f1ba 0f00 	cmp.w	sl, #0
 800b65a:	4607      	mov	r7, r0
 800b65c:	f300 8093 	bgt.w	800b786 <_dtoa_r+0x89e>
 800b660:	9b06      	ldr	r3, [sp, #24]
 800b662:	2b02      	cmp	r3, #2
 800b664:	dc57      	bgt.n	800b716 <_dtoa_r+0x82e>
 800b666:	e08e      	b.n	800b786 <_dtoa_r+0x89e>
 800b668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b66a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b66e:	e751      	b.n	800b514 <_dtoa_r+0x62c>
 800b670:	f109 34ff 	add.w	r4, r9, #4294967295
 800b674:	42a3      	cmp	r3, r4
 800b676:	bfbf      	itttt	lt
 800b678:	1ae2      	sublt	r2, r4, r3
 800b67a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b67c:	189b      	addlt	r3, r3, r2
 800b67e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b680:	bfae      	itee	ge
 800b682:	1b1c      	subge	r4, r3, r4
 800b684:	4623      	movlt	r3, r4
 800b686:	2400      	movlt	r4, #0
 800b688:	f1b9 0f00 	cmp.w	r9, #0
 800b68c:	bfb5      	itete	lt
 800b68e:	9a04      	ldrlt	r2, [sp, #16]
 800b690:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b694:	eba2 0809 	sublt.w	r8, r2, r9
 800b698:	464a      	movge	r2, r9
 800b69a:	bfb8      	it	lt
 800b69c:	2200      	movlt	r2, #0
 800b69e:	e73c      	b.n	800b51a <_dtoa_r+0x632>
 800b6a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b6a4:	9f07      	ldr	r7, [sp, #28]
 800b6a6:	461c      	mov	r4, r3
 800b6a8:	e744      	b.n	800b534 <_dtoa_r+0x64c>
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	e770      	b.n	800b590 <_dtoa_r+0x6a8>
 800b6ae:	9b06      	ldr	r3, [sp, #24]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	dc18      	bgt.n	800b6e6 <_dtoa_r+0x7fe>
 800b6b4:	9b02      	ldr	r3, [sp, #8]
 800b6b6:	b9b3      	cbnz	r3, 800b6e6 <_dtoa_r+0x7fe>
 800b6b8:	9b03      	ldr	r3, [sp, #12]
 800b6ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b6be:	b9a2      	cbnz	r2, 800b6ea <_dtoa_r+0x802>
 800b6c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b6c4:	0d12      	lsrs	r2, r2, #20
 800b6c6:	0512      	lsls	r2, r2, #20
 800b6c8:	b18a      	cbz	r2, 800b6ee <_dtoa_r+0x806>
 800b6ca:	9b04      	ldr	r3, [sp, #16]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	9b05      	ldr	r3, [sp, #20]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	9305      	str	r3, [sp, #20]
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f47f af70 	bne.w	800b5c2 <_dtoa_r+0x6da>
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	e775      	b.n	800b5d2 <_dtoa_r+0x6ea>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e7f6      	b.n	800b6d8 <_dtoa_r+0x7f0>
 800b6ea:	9b02      	ldr	r3, [sp, #8]
 800b6ec:	e7f4      	b.n	800b6d8 <_dtoa_r+0x7f0>
 800b6ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b6f0:	e7f3      	b.n	800b6da <_dtoa_r+0x7f2>
 800b6f2:	d082      	beq.n	800b5fa <_dtoa_r+0x712>
 800b6f4:	9b04      	ldr	r3, [sp, #16]
 800b6f6:	321c      	adds	r2, #28
 800b6f8:	4413      	add	r3, r2
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	9b05      	ldr	r3, [sp, #20]
 800b6fe:	4490      	add	r8, r2
 800b700:	4413      	add	r3, r2
 800b702:	e779      	b.n	800b5f8 <_dtoa_r+0x710>
 800b704:	4602      	mov	r2, r0
 800b706:	e7f5      	b.n	800b6f4 <_dtoa_r+0x80c>
 800b708:	f1b9 0f00 	cmp.w	r9, #0
 800b70c:	dc36      	bgt.n	800b77c <_dtoa_r+0x894>
 800b70e:	9b06      	ldr	r3, [sp, #24]
 800b710:	2b02      	cmp	r3, #2
 800b712:	dd33      	ble.n	800b77c <_dtoa_r+0x894>
 800b714:	46ca      	mov	sl, r9
 800b716:	f1ba 0f00 	cmp.w	sl, #0
 800b71a:	d10d      	bne.n	800b738 <_dtoa_r+0x850>
 800b71c:	4621      	mov	r1, r4
 800b71e:	4653      	mov	r3, sl
 800b720:	2205      	movs	r2, #5
 800b722:	4630      	mov	r0, r6
 800b724:	f000 faae 	bl	800bc84 <__multadd>
 800b728:	4601      	mov	r1, r0
 800b72a:	4604      	mov	r4, r0
 800b72c:	4628      	mov	r0, r5
 800b72e:	f000 fcc3 	bl	800c0b8 <__mcmp>
 800b732:	2800      	cmp	r0, #0
 800b734:	f73f ade4 	bgt.w	800b300 <_dtoa_r+0x418>
 800b738:	9b08      	ldr	r3, [sp, #32]
 800b73a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b73e:	ea6f 0b03 	mvn.w	fp, r3
 800b742:	f04f 0900 	mov.w	r9, #0
 800b746:	4621      	mov	r1, r4
 800b748:	4630      	mov	r0, r6
 800b74a:	f000 fa79 	bl	800bc40 <_Bfree>
 800b74e:	2f00      	cmp	r7, #0
 800b750:	f43f aea1 	beq.w	800b496 <_dtoa_r+0x5ae>
 800b754:	f1b9 0f00 	cmp.w	r9, #0
 800b758:	d005      	beq.n	800b766 <_dtoa_r+0x87e>
 800b75a:	45b9      	cmp	r9, r7
 800b75c:	d003      	beq.n	800b766 <_dtoa_r+0x87e>
 800b75e:	4649      	mov	r1, r9
 800b760:	4630      	mov	r0, r6
 800b762:	f000 fa6d 	bl	800bc40 <_Bfree>
 800b766:	4639      	mov	r1, r7
 800b768:	4630      	mov	r0, r6
 800b76a:	f000 fa69 	bl	800bc40 <_Bfree>
 800b76e:	e692      	b.n	800b496 <_dtoa_r+0x5ae>
 800b770:	2400      	movs	r4, #0
 800b772:	4627      	mov	r7, r4
 800b774:	e7e0      	b.n	800b738 <_dtoa_r+0x850>
 800b776:	4693      	mov	fp, r2
 800b778:	4627      	mov	r7, r4
 800b77a:	e5c1      	b.n	800b300 <_dtoa_r+0x418>
 800b77c:	9b07      	ldr	r3, [sp, #28]
 800b77e:	46ca      	mov	sl, r9
 800b780:	2b00      	cmp	r3, #0
 800b782:	f000 8100 	beq.w	800b986 <_dtoa_r+0xa9e>
 800b786:	f1b8 0f00 	cmp.w	r8, #0
 800b78a:	dd05      	ble.n	800b798 <_dtoa_r+0x8b0>
 800b78c:	4639      	mov	r1, r7
 800b78e:	4642      	mov	r2, r8
 800b790:	4630      	mov	r0, r6
 800b792:	f000 fc25 	bl	800bfe0 <__lshift>
 800b796:	4607      	mov	r7, r0
 800b798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d05d      	beq.n	800b85a <_dtoa_r+0x972>
 800b79e:	6879      	ldr	r1, [r7, #4]
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f000 fa0d 	bl	800bbc0 <_Balloc>
 800b7a6:	4680      	mov	r8, r0
 800b7a8:	b928      	cbnz	r0, 800b7b6 <_dtoa_r+0x8ce>
 800b7aa:	4b82      	ldr	r3, [pc, #520]	; (800b9b4 <_dtoa_r+0xacc>)
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b7b2:	f7ff bbb1 	b.w	800af18 <_dtoa_r+0x30>
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	3202      	adds	r2, #2
 800b7ba:	0092      	lsls	r2, r2, #2
 800b7bc:	f107 010c 	add.w	r1, r7, #12
 800b7c0:	300c      	adds	r0, #12
 800b7c2:	f7ff fafa 	bl	800adba <memcpy>
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	4641      	mov	r1, r8
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f000 fc08 	bl	800bfe0 <__lshift>
 800b7d0:	9b01      	ldr	r3, [sp, #4]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	9304      	str	r3, [sp, #16]
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	4453      	add	r3, sl
 800b7da:	9308      	str	r3, [sp, #32]
 800b7dc:	9b02      	ldr	r3, [sp, #8]
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	46b9      	mov	r9, r7
 800b7e4:	9307      	str	r3, [sp, #28]
 800b7e6:	4607      	mov	r7, r0
 800b7e8:	9b04      	ldr	r3, [sp, #16]
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	f7ff faf0 	bl	800add6 <quorem>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	3330      	adds	r3, #48	; 0x30
 800b7fa:	9005      	str	r0, [sp, #20]
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4628      	mov	r0, r5
 800b800:	9309      	str	r3, [sp, #36]	; 0x24
 800b802:	f000 fc59 	bl	800c0b8 <__mcmp>
 800b806:	463a      	mov	r2, r7
 800b808:	4682      	mov	sl, r0
 800b80a:	4621      	mov	r1, r4
 800b80c:	4630      	mov	r0, r6
 800b80e:	f000 fc6f 	bl	800c0f0 <__mdiff>
 800b812:	68c2      	ldr	r2, [r0, #12]
 800b814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b816:	4680      	mov	r8, r0
 800b818:	bb0a      	cbnz	r2, 800b85e <_dtoa_r+0x976>
 800b81a:	4601      	mov	r1, r0
 800b81c:	4628      	mov	r0, r5
 800b81e:	f000 fc4b 	bl	800c0b8 <__mcmp>
 800b822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b824:	4602      	mov	r2, r0
 800b826:	4641      	mov	r1, r8
 800b828:	4630      	mov	r0, r6
 800b82a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b82e:	f000 fa07 	bl	800bc40 <_Bfree>
 800b832:	9b06      	ldr	r3, [sp, #24]
 800b834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b836:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b83a:	ea43 0102 	orr.w	r1, r3, r2
 800b83e:	9b07      	ldr	r3, [sp, #28]
 800b840:	4319      	orrs	r1, r3
 800b842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b844:	d10d      	bne.n	800b862 <_dtoa_r+0x97a>
 800b846:	2b39      	cmp	r3, #57	; 0x39
 800b848:	d029      	beq.n	800b89e <_dtoa_r+0x9b6>
 800b84a:	f1ba 0f00 	cmp.w	sl, #0
 800b84e:	dd01      	ble.n	800b854 <_dtoa_r+0x96c>
 800b850:	9b05      	ldr	r3, [sp, #20]
 800b852:	3331      	adds	r3, #49	; 0x31
 800b854:	9a02      	ldr	r2, [sp, #8]
 800b856:	7013      	strb	r3, [r2, #0]
 800b858:	e775      	b.n	800b746 <_dtoa_r+0x85e>
 800b85a:	4638      	mov	r0, r7
 800b85c:	e7b8      	b.n	800b7d0 <_dtoa_r+0x8e8>
 800b85e:	2201      	movs	r2, #1
 800b860:	e7e1      	b.n	800b826 <_dtoa_r+0x93e>
 800b862:	f1ba 0f00 	cmp.w	sl, #0
 800b866:	db06      	blt.n	800b876 <_dtoa_r+0x98e>
 800b868:	9906      	ldr	r1, [sp, #24]
 800b86a:	ea41 0a0a 	orr.w	sl, r1, sl
 800b86e:	9907      	ldr	r1, [sp, #28]
 800b870:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b874:	d120      	bne.n	800b8b8 <_dtoa_r+0x9d0>
 800b876:	2a00      	cmp	r2, #0
 800b878:	ddec      	ble.n	800b854 <_dtoa_r+0x96c>
 800b87a:	4629      	mov	r1, r5
 800b87c:	2201      	movs	r2, #1
 800b87e:	4630      	mov	r0, r6
 800b880:	9304      	str	r3, [sp, #16]
 800b882:	f000 fbad 	bl	800bfe0 <__lshift>
 800b886:	4621      	mov	r1, r4
 800b888:	4605      	mov	r5, r0
 800b88a:	f000 fc15 	bl	800c0b8 <__mcmp>
 800b88e:	2800      	cmp	r0, #0
 800b890:	9b04      	ldr	r3, [sp, #16]
 800b892:	dc02      	bgt.n	800b89a <_dtoa_r+0x9b2>
 800b894:	d1de      	bne.n	800b854 <_dtoa_r+0x96c>
 800b896:	07da      	lsls	r2, r3, #31
 800b898:	d5dc      	bpl.n	800b854 <_dtoa_r+0x96c>
 800b89a:	2b39      	cmp	r3, #57	; 0x39
 800b89c:	d1d8      	bne.n	800b850 <_dtoa_r+0x968>
 800b89e:	9a02      	ldr	r2, [sp, #8]
 800b8a0:	2339      	movs	r3, #57	; 0x39
 800b8a2:	7013      	strb	r3, [r2, #0]
 800b8a4:	4643      	mov	r3, r8
 800b8a6:	4698      	mov	r8, r3
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b8ae:	2a39      	cmp	r2, #57	; 0x39
 800b8b0:	d051      	beq.n	800b956 <_dtoa_r+0xa6e>
 800b8b2:	3201      	adds	r2, #1
 800b8b4:	701a      	strb	r2, [r3, #0]
 800b8b6:	e746      	b.n	800b746 <_dtoa_r+0x85e>
 800b8b8:	2a00      	cmp	r2, #0
 800b8ba:	dd03      	ble.n	800b8c4 <_dtoa_r+0x9dc>
 800b8bc:	2b39      	cmp	r3, #57	; 0x39
 800b8be:	d0ee      	beq.n	800b89e <_dtoa_r+0x9b6>
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	e7c7      	b.n	800b854 <_dtoa_r+0x96c>
 800b8c4:	9a04      	ldr	r2, [sp, #16]
 800b8c6:	9908      	ldr	r1, [sp, #32]
 800b8c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b8cc:	428a      	cmp	r2, r1
 800b8ce:	d02b      	beq.n	800b928 <_dtoa_r+0xa40>
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	220a      	movs	r2, #10
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f000 f9d4 	bl	800bc84 <__multadd>
 800b8dc:	45b9      	cmp	r9, r7
 800b8de:	4605      	mov	r5, r0
 800b8e0:	f04f 0300 	mov.w	r3, #0
 800b8e4:	f04f 020a 	mov.w	r2, #10
 800b8e8:	4649      	mov	r1, r9
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	d107      	bne.n	800b8fe <_dtoa_r+0xa16>
 800b8ee:	f000 f9c9 	bl	800bc84 <__multadd>
 800b8f2:	4681      	mov	r9, r0
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	9b04      	ldr	r3, [sp, #16]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	e774      	b.n	800b7e8 <_dtoa_r+0x900>
 800b8fe:	f000 f9c1 	bl	800bc84 <__multadd>
 800b902:	4639      	mov	r1, r7
 800b904:	4681      	mov	r9, r0
 800b906:	2300      	movs	r3, #0
 800b908:	220a      	movs	r2, #10
 800b90a:	4630      	mov	r0, r6
 800b90c:	f000 f9ba 	bl	800bc84 <__multadd>
 800b910:	4607      	mov	r7, r0
 800b912:	e7f0      	b.n	800b8f6 <_dtoa_r+0xa0e>
 800b914:	f1ba 0f00 	cmp.w	sl, #0
 800b918:	9a01      	ldr	r2, [sp, #4]
 800b91a:	bfcc      	ite	gt
 800b91c:	46d0      	movgt	r8, sl
 800b91e:	f04f 0801 	movle.w	r8, #1
 800b922:	4490      	add	r8, r2
 800b924:	f04f 0900 	mov.w	r9, #0
 800b928:	4629      	mov	r1, r5
 800b92a:	2201      	movs	r2, #1
 800b92c:	4630      	mov	r0, r6
 800b92e:	9302      	str	r3, [sp, #8]
 800b930:	f000 fb56 	bl	800bfe0 <__lshift>
 800b934:	4621      	mov	r1, r4
 800b936:	4605      	mov	r5, r0
 800b938:	f000 fbbe 	bl	800c0b8 <__mcmp>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	dcb1      	bgt.n	800b8a4 <_dtoa_r+0x9bc>
 800b940:	d102      	bne.n	800b948 <_dtoa_r+0xa60>
 800b942:	9b02      	ldr	r3, [sp, #8]
 800b944:	07db      	lsls	r3, r3, #31
 800b946:	d4ad      	bmi.n	800b8a4 <_dtoa_r+0x9bc>
 800b948:	4643      	mov	r3, r8
 800b94a:	4698      	mov	r8, r3
 800b94c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b950:	2a30      	cmp	r2, #48	; 0x30
 800b952:	d0fa      	beq.n	800b94a <_dtoa_r+0xa62>
 800b954:	e6f7      	b.n	800b746 <_dtoa_r+0x85e>
 800b956:	9a01      	ldr	r2, [sp, #4]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d1a4      	bne.n	800b8a6 <_dtoa_r+0x9be>
 800b95c:	f10b 0b01 	add.w	fp, fp, #1
 800b960:	2331      	movs	r3, #49	; 0x31
 800b962:	e778      	b.n	800b856 <_dtoa_r+0x96e>
 800b964:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <_dtoa_r+0xad0>)
 800b966:	f7ff bb2a 	b.w	800afbe <_dtoa_r+0xd6>
 800b96a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f47f ab05 	bne.w	800af7c <_dtoa_r+0x94>
 800b972:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <_dtoa_r+0xad4>)
 800b974:	f7ff bb23 	b.w	800afbe <_dtoa_r+0xd6>
 800b978:	f1ba 0f00 	cmp.w	sl, #0
 800b97c:	dc03      	bgt.n	800b986 <_dtoa_r+0xa9e>
 800b97e:	9b06      	ldr	r3, [sp, #24]
 800b980:	2b02      	cmp	r3, #2
 800b982:	f73f aec8 	bgt.w	800b716 <_dtoa_r+0x82e>
 800b986:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b98a:	4621      	mov	r1, r4
 800b98c:	4628      	mov	r0, r5
 800b98e:	f7ff fa22 	bl	800add6 <quorem>
 800b992:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b996:	f808 3b01 	strb.w	r3, [r8], #1
 800b99a:	9a01      	ldr	r2, [sp, #4]
 800b99c:	eba8 0202 	sub.w	r2, r8, r2
 800b9a0:	4592      	cmp	sl, r2
 800b9a2:	ddb7      	ble.n	800b914 <_dtoa_r+0xa2c>
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	220a      	movs	r2, #10
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f000 f96a 	bl	800bc84 <__multadd>
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	e7ea      	b.n	800b98a <_dtoa_r+0xaa2>
 800b9b4:	0800d194 	.word	0x0800d194
 800b9b8:	0800d0f4 	.word	0x0800d0f4
 800b9bc:	0800d118 	.word	0x0800d118

0800b9c0 <_free_r>:
 800b9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	d044      	beq.n	800ba50 <_free_r+0x90>
 800b9c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ca:	9001      	str	r0, [sp, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f1a1 0404 	sub.w	r4, r1, #4
 800b9d2:	bfb8      	it	lt
 800b9d4:	18e4      	addlt	r4, r4, r3
 800b9d6:	f000 f8e7 	bl	800bba8 <__malloc_lock>
 800b9da:	4a1e      	ldr	r2, [pc, #120]	; (800ba54 <_free_r+0x94>)
 800b9dc:	9801      	ldr	r0, [sp, #4]
 800b9de:	6813      	ldr	r3, [r2, #0]
 800b9e0:	b933      	cbnz	r3, 800b9f0 <_free_r+0x30>
 800b9e2:	6063      	str	r3, [r4, #4]
 800b9e4:	6014      	str	r4, [r2, #0]
 800b9e6:	b003      	add	sp, #12
 800b9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9ec:	f000 b8e2 	b.w	800bbb4 <__malloc_unlock>
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	d908      	bls.n	800ba06 <_free_r+0x46>
 800b9f4:	6825      	ldr	r5, [r4, #0]
 800b9f6:	1961      	adds	r1, r4, r5
 800b9f8:	428b      	cmp	r3, r1
 800b9fa:	bf01      	itttt	eq
 800b9fc:	6819      	ldreq	r1, [r3, #0]
 800b9fe:	685b      	ldreq	r3, [r3, #4]
 800ba00:	1949      	addeq	r1, r1, r5
 800ba02:	6021      	streq	r1, [r4, #0]
 800ba04:	e7ed      	b.n	800b9e2 <_free_r+0x22>
 800ba06:	461a      	mov	r2, r3
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	b10b      	cbz	r3, 800ba10 <_free_r+0x50>
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	d9fa      	bls.n	800ba06 <_free_r+0x46>
 800ba10:	6811      	ldr	r1, [r2, #0]
 800ba12:	1855      	adds	r5, r2, r1
 800ba14:	42a5      	cmp	r5, r4
 800ba16:	d10b      	bne.n	800ba30 <_free_r+0x70>
 800ba18:	6824      	ldr	r4, [r4, #0]
 800ba1a:	4421      	add	r1, r4
 800ba1c:	1854      	adds	r4, r2, r1
 800ba1e:	42a3      	cmp	r3, r4
 800ba20:	6011      	str	r1, [r2, #0]
 800ba22:	d1e0      	bne.n	800b9e6 <_free_r+0x26>
 800ba24:	681c      	ldr	r4, [r3, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	6053      	str	r3, [r2, #4]
 800ba2a:	440c      	add	r4, r1
 800ba2c:	6014      	str	r4, [r2, #0]
 800ba2e:	e7da      	b.n	800b9e6 <_free_r+0x26>
 800ba30:	d902      	bls.n	800ba38 <_free_r+0x78>
 800ba32:	230c      	movs	r3, #12
 800ba34:	6003      	str	r3, [r0, #0]
 800ba36:	e7d6      	b.n	800b9e6 <_free_r+0x26>
 800ba38:	6825      	ldr	r5, [r4, #0]
 800ba3a:	1961      	adds	r1, r4, r5
 800ba3c:	428b      	cmp	r3, r1
 800ba3e:	bf04      	itt	eq
 800ba40:	6819      	ldreq	r1, [r3, #0]
 800ba42:	685b      	ldreq	r3, [r3, #4]
 800ba44:	6063      	str	r3, [r4, #4]
 800ba46:	bf04      	itt	eq
 800ba48:	1949      	addeq	r1, r1, r5
 800ba4a:	6021      	streq	r1, [r4, #0]
 800ba4c:	6054      	str	r4, [r2, #4]
 800ba4e:	e7ca      	b.n	800b9e6 <_free_r+0x26>
 800ba50:	b003      	add	sp, #12
 800ba52:	bd30      	pop	{r4, r5, pc}
 800ba54:	200054f8 	.word	0x200054f8

0800ba58 <malloc>:
 800ba58:	4b02      	ldr	r3, [pc, #8]	; (800ba64 <malloc+0xc>)
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	f000 b823 	b.w	800baa8 <_malloc_r>
 800ba62:	bf00      	nop
 800ba64:	20000084 	.word	0x20000084

0800ba68 <sbrk_aligned>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	4e0e      	ldr	r6, [pc, #56]	; (800baa4 <sbrk_aligned+0x3c>)
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	6831      	ldr	r1, [r6, #0]
 800ba70:	4605      	mov	r5, r0
 800ba72:	b911      	cbnz	r1, 800ba7a <sbrk_aligned+0x12>
 800ba74:	f000 fcce 	bl	800c414 <_sbrk_r>
 800ba78:	6030      	str	r0, [r6, #0]
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f000 fcc9 	bl	800c414 <_sbrk_r>
 800ba82:	1c43      	adds	r3, r0, #1
 800ba84:	d00a      	beq.n	800ba9c <sbrk_aligned+0x34>
 800ba86:	1cc4      	adds	r4, r0, #3
 800ba88:	f024 0403 	bic.w	r4, r4, #3
 800ba8c:	42a0      	cmp	r0, r4
 800ba8e:	d007      	beq.n	800baa0 <sbrk_aligned+0x38>
 800ba90:	1a21      	subs	r1, r4, r0
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 fcbe 	bl	800c414 <_sbrk_r>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	d101      	bne.n	800baa0 <sbrk_aligned+0x38>
 800ba9c:	f04f 34ff 	mov.w	r4, #4294967295
 800baa0:	4620      	mov	r0, r4
 800baa2:	bd70      	pop	{r4, r5, r6, pc}
 800baa4:	200054fc 	.word	0x200054fc

0800baa8 <_malloc_r>:
 800baa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baac:	1ccd      	adds	r5, r1, #3
 800baae:	f025 0503 	bic.w	r5, r5, #3
 800bab2:	3508      	adds	r5, #8
 800bab4:	2d0c      	cmp	r5, #12
 800bab6:	bf38      	it	cc
 800bab8:	250c      	movcc	r5, #12
 800baba:	2d00      	cmp	r5, #0
 800babc:	4607      	mov	r7, r0
 800babe:	db01      	blt.n	800bac4 <_malloc_r+0x1c>
 800bac0:	42a9      	cmp	r1, r5
 800bac2:	d905      	bls.n	800bad0 <_malloc_r+0x28>
 800bac4:	230c      	movs	r3, #12
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	2600      	movs	r6, #0
 800baca:	4630      	mov	r0, r6
 800bacc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bba4 <_malloc_r+0xfc>
 800bad4:	f000 f868 	bl	800bba8 <__malloc_lock>
 800bad8:	f8d8 3000 	ldr.w	r3, [r8]
 800badc:	461c      	mov	r4, r3
 800bade:	bb5c      	cbnz	r4, 800bb38 <_malloc_r+0x90>
 800bae0:	4629      	mov	r1, r5
 800bae2:	4638      	mov	r0, r7
 800bae4:	f7ff ffc0 	bl	800ba68 <sbrk_aligned>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	4604      	mov	r4, r0
 800baec:	d155      	bne.n	800bb9a <_malloc_r+0xf2>
 800baee:	f8d8 4000 	ldr.w	r4, [r8]
 800baf2:	4626      	mov	r6, r4
 800baf4:	2e00      	cmp	r6, #0
 800baf6:	d145      	bne.n	800bb84 <_malloc_r+0xdc>
 800baf8:	2c00      	cmp	r4, #0
 800bafa:	d048      	beq.n	800bb8e <_malloc_r+0xe6>
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	4631      	mov	r1, r6
 800bb00:	4638      	mov	r0, r7
 800bb02:	eb04 0903 	add.w	r9, r4, r3
 800bb06:	f000 fc85 	bl	800c414 <_sbrk_r>
 800bb0a:	4581      	cmp	r9, r0
 800bb0c:	d13f      	bne.n	800bb8e <_malloc_r+0xe6>
 800bb0e:	6821      	ldr	r1, [r4, #0]
 800bb10:	1a6d      	subs	r5, r5, r1
 800bb12:	4629      	mov	r1, r5
 800bb14:	4638      	mov	r0, r7
 800bb16:	f7ff ffa7 	bl	800ba68 <sbrk_aligned>
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d037      	beq.n	800bb8e <_malloc_r+0xe6>
 800bb1e:	6823      	ldr	r3, [r4, #0]
 800bb20:	442b      	add	r3, r5
 800bb22:	6023      	str	r3, [r4, #0]
 800bb24:	f8d8 3000 	ldr.w	r3, [r8]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d038      	beq.n	800bb9e <_malloc_r+0xf6>
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	42a2      	cmp	r2, r4
 800bb30:	d12b      	bne.n	800bb8a <_malloc_r+0xe2>
 800bb32:	2200      	movs	r2, #0
 800bb34:	605a      	str	r2, [r3, #4]
 800bb36:	e00f      	b.n	800bb58 <_malloc_r+0xb0>
 800bb38:	6822      	ldr	r2, [r4, #0]
 800bb3a:	1b52      	subs	r2, r2, r5
 800bb3c:	d41f      	bmi.n	800bb7e <_malloc_r+0xd6>
 800bb3e:	2a0b      	cmp	r2, #11
 800bb40:	d917      	bls.n	800bb72 <_malloc_r+0xca>
 800bb42:	1961      	adds	r1, r4, r5
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	6025      	str	r5, [r4, #0]
 800bb48:	bf18      	it	ne
 800bb4a:	6059      	strne	r1, [r3, #4]
 800bb4c:	6863      	ldr	r3, [r4, #4]
 800bb4e:	bf08      	it	eq
 800bb50:	f8c8 1000 	streq.w	r1, [r8]
 800bb54:	5162      	str	r2, [r4, r5]
 800bb56:	604b      	str	r3, [r1, #4]
 800bb58:	4638      	mov	r0, r7
 800bb5a:	f104 060b 	add.w	r6, r4, #11
 800bb5e:	f000 f829 	bl	800bbb4 <__malloc_unlock>
 800bb62:	f026 0607 	bic.w	r6, r6, #7
 800bb66:	1d23      	adds	r3, r4, #4
 800bb68:	1af2      	subs	r2, r6, r3
 800bb6a:	d0ae      	beq.n	800baca <_malloc_r+0x22>
 800bb6c:	1b9b      	subs	r3, r3, r6
 800bb6e:	50a3      	str	r3, [r4, r2]
 800bb70:	e7ab      	b.n	800baca <_malloc_r+0x22>
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	6862      	ldr	r2, [r4, #4]
 800bb76:	d1dd      	bne.n	800bb34 <_malloc_r+0x8c>
 800bb78:	f8c8 2000 	str.w	r2, [r8]
 800bb7c:	e7ec      	b.n	800bb58 <_malloc_r+0xb0>
 800bb7e:	4623      	mov	r3, r4
 800bb80:	6864      	ldr	r4, [r4, #4]
 800bb82:	e7ac      	b.n	800bade <_malloc_r+0x36>
 800bb84:	4634      	mov	r4, r6
 800bb86:	6876      	ldr	r6, [r6, #4]
 800bb88:	e7b4      	b.n	800baf4 <_malloc_r+0x4c>
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	e7cc      	b.n	800bb28 <_malloc_r+0x80>
 800bb8e:	230c      	movs	r3, #12
 800bb90:	603b      	str	r3, [r7, #0]
 800bb92:	4638      	mov	r0, r7
 800bb94:	f000 f80e 	bl	800bbb4 <__malloc_unlock>
 800bb98:	e797      	b.n	800baca <_malloc_r+0x22>
 800bb9a:	6025      	str	r5, [r4, #0]
 800bb9c:	e7dc      	b.n	800bb58 <_malloc_r+0xb0>
 800bb9e:	605b      	str	r3, [r3, #4]
 800bba0:	deff      	udf	#255	; 0xff
 800bba2:	bf00      	nop
 800bba4:	200054f8 	.word	0x200054f8

0800bba8 <__malloc_lock>:
 800bba8:	4801      	ldr	r0, [pc, #4]	; (800bbb0 <__malloc_lock+0x8>)
 800bbaa:	f7ff b904 	b.w	800adb6 <__retarget_lock_acquire_recursive>
 800bbae:	bf00      	nop
 800bbb0:	200054f4 	.word	0x200054f4

0800bbb4 <__malloc_unlock>:
 800bbb4:	4801      	ldr	r0, [pc, #4]	; (800bbbc <__malloc_unlock+0x8>)
 800bbb6:	f7ff b8ff 	b.w	800adb8 <__retarget_lock_release_recursive>
 800bbba:	bf00      	nop
 800bbbc:	200054f4 	.word	0x200054f4

0800bbc0 <_Balloc>:
 800bbc0:	b570      	push	{r4, r5, r6, lr}
 800bbc2:	69c6      	ldr	r6, [r0, #28]
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	460d      	mov	r5, r1
 800bbc8:	b976      	cbnz	r6, 800bbe8 <_Balloc+0x28>
 800bbca:	2010      	movs	r0, #16
 800bbcc:	f7ff ff44 	bl	800ba58 <malloc>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	61e0      	str	r0, [r4, #28]
 800bbd4:	b920      	cbnz	r0, 800bbe0 <_Balloc+0x20>
 800bbd6:	4b18      	ldr	r3, [pc, #96]	; (800bc38 <_Balloc+0x78>)
 800bbd8:	4818      	ldr	r0, [pc, #96]	; (800bc3c <_Balloc+0x7c>)
 800bbda:	216b      	movs	r1, #107	; 0x6b
 800bbdc:	f000 fc2a 	bl	800c434 <__assert_func>
 800bbe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbe4:	6006      	str	r6, [r0, #0]
 800bbe6:	60c6      	str	r6, [r0, #12]
 800bbe8:	69e6      	ldr	r6, [r4, #28]
 800bbea:	68f3      	ldr	r3, [r6, #12]
 800bbec:	b183      	cbz	r3, 800bc10 <_Balloc+0x50>
 800bbee:	69e3      	ldr	r3, [r4, #28]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbf6:	b9b8      	cbnz	r0, 800bc28 <_Balloc+0x68>
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	fa01 f605 	lsl.w	r6, r1, r5
 800bbfe:	1d72      	adds	r2, r6, #5
 800bc00:	0092      	lsls	r2, r2, #2
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 fc34 	bl	800c470 <_calloc_r>
 800bc08:	b160      	cbz	r0, 800bc24 <_Balloc+0x64>
 800bc0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc0e:	e00e      	b.n	800bc2e <_Balloc+0x6e>
 800bc10:	2221      	movs	r2, #33	; 0x21
 800bc12:	2104      	movs	r1, #4
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 fc2b 	bl	800c470 <_calloc_r>
 800bc1a:	69e3      	ldr	r3, [r4, #28]
 800bc1c:	60f0      	str	r0, [r6, #12]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e4      	bne.n	800bbee <_Balloc+0x2e>
 800bc24:	2000      	movs	r0, #0
 800bc26:	bd70      	pop	{r4, r5, r6, pc}
 800bc28:	6802      	ldr	r2, [r0, #0]
 800bc2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc34:	e7f7      	b.n	800bc26 <_Balloc+0x66>
 800bc36:	bf00      	nop
 800bc38:	0800d125 	.word	0x0800d125
 800bc3c:	0800d1a5 	.word	0x0800d1a5

0800bc40 <_Bfree>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	69c6      	ldr	r6, [r0, #28]
 800bc44:	4605      	mov	r5, r0
 800bc46:	460c      	mov	r4, r1
 800bc48:	b976      	cbnz	r6, 800bc68 <_Bfree+0x28>
 800bc4a:	2010      	movs	r0, #16
 800bc4c:	f7ff ff04 	bl	800ba58 <malloc>
 800bc50:	4602      	mov	r2, r0
 800bc52:	61e8      	str	r0, [r5, #28]
 800bc54:	b920      	cbnz	r0, 800bc60 <_Bfree+0x20>
 800bc56:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <_Bfree+0x3c>)
 800bc58:	4809      	ldr	r0, [pc, #36]	; (800bc80 <_Bfree+0x40>)
 800bc5a:	218f      	movs	r1, #143	; 0x8f
 800bc5c:	f000 fbea 	bl	800c434 <__assert_func>
 800bc60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc64:	6006      	str	r6, [r0, #0]
 800bc66:	60c6      	str	r6, [r0, #12]
 800bc68:	b13c      	cbz	r4, 800bc7a <_Bfree+0x3a>
 800bc6a:	69eb      	ldr	r3, [r5, #28]
 800bc6c:	6862      	ldr	r2, [r4, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc74:	6021      	str	r1, [r4, #0]
 800bc76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc7a:	bd70      	pop	{r4, r5, r6, pc}
 800bc7c:	0800d125 	.word	0x0800d125
 800bc80:	0800d1a5 	.word	0x0800d1a5

0800bc84 <__multadd>:
 800bc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc88:	690d      	ldr	r5, [r1, #16]
 800bc8a:	4607      	mov	r7, r0
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	461e      	mov	r6, r3
 800bc90:	f101 0c14 	add.w	ip, r1, #20
 800bc94:	2000      	movs	r0, #0
 800bc96:	f8dc 3000 	ldr.w	r3, [ip]
 800bc9a:	b299      	uxth	r1, r3
 800bc9c:	fb02 6101 	mla	r1, r2, r1, r6
 800bca0:	0c1e      	lsrs	r6, r3, #16
 800bca2:	0c0b      	lsrs	r3, r1, #16
 800bca4:	fb02 3306 	mla	r3, r2, r6, r3
 800bca8:	b289      	uxth	r1, r1
 800bcaa:	3001      	adds	r0, #1
 800bcac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcb0:	4285      	cmp	r5, r0
 800bcb2:	f84c 1b04 	str.w	r1, [ip], #4
 800bcb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcba:	dcec      	bgt.n	800bc96 <__multadd+0x12>
 800bcbc:	b30e      	cbz	r6, 800bd02 <__multadd+0x7e>
 800bcbe:	68a3      	ldr	r3, [r4, #8]
 800bcc0:	42ab      	cmp	r3, r5
 800bcc2:	dc19      	bgt.n	800bcf8 <__multadd+0x74>
 800bcc4:	6861      	ldr	r1, [r4, #4]
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	3101      	adds	r1, #1
 800bcca:	f7ff ff79 	bl	800bbc0 <_Balloc>
 800bcce:	4680      	mov	r8, r0
 800bcd0:	b928      	cbnz	r0, 800bcde <__multadd+0x5a>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <__multadd+0x84>)
 800bcd6:	480d      	ldr	r0, [pc, #52]	; (800bd0c <__multadd+0x88>)
 800bcd8:	21ba      	movs	r1, #186	; 0xba
 800bcda:	f000 fbab 	bl	800c434 <__assert_func>
 800bcde:	6922      	ldr	r2, [r4, #16]
 800bce0:	3202      	adds	r2, #2
 800bce2:	f104 010c 	add.w	r1, r4, #12
 800bce6:	0092      	lsls	r2, r2, #2
 800bce8:	300c      	adds	r0, #12
 800bcea:	f7ff f866 	bl	800adba <memcpy>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f7ff ffa5 	bl	800bc40 <_Bfree>
 800bcf6:	4644      	mov	r4, r8
 800bcf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	615e      	str	r6, [r3, #20]
 800bd00:	6125      	str	r5, [r4, #16]
 800bd02:	4620      	mov	r0, r4
 800bd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd08:	0800d194 	.word	0x0800d194
 800bd0c:	0800d1a5 	.word	0x0800d1a5

0800bd10 <__hi0bits>:
 800bd10:	0c03      	lsrs	r3, r0, #16
 800bd12:	041b      	lsls	r3, r3, #16
 800bd14:	b9d3      	cbnz	r3, 800bd4c <__hi0bits+0x3c>
 800bd16:	0400      	lsls	r0, r0, #16
 800bd18:	2310      	movs	r3, #16
 800bd1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd1e:	bf04      	itt	eq
 800bd20:	0200      	lsleq	r0, r0, #8
 800bd22:	3308      	addeq	r3, #8
 800bd24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd28:	bf04      	itt	eq
 800bd2a:	0100      	lsleq	r0, r0, #4
 800bd2c:	3304      	addeq	r3, #4
 800bd2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd32:	bf04      	itt	eq
 800bd34:	0080      	lsleq	r0, r0, #2
 800bd36:	3302      	addeq	r3, #2
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	db05      	blt.n	800bd48 <__hi0bits+0x38>
 800bd3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd40:	f103 0301 	add.w	r3, r3, #1
 800bd44:	bf08      	it	eq
 800bd46:	2320      	moveq	r3, #32
 800bd48:	4618      	mov	r0, r3
 800bd4a:	4770      	bx	lr
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e7e4      	b.n	800bd1a <__hi0bits+0xa>

0800bd50 <__lo0bits>:
 800bd50:	6803      	ldr	r3, [r0, #0]
 800bd52:	f013 0207 	ands.w	r2, r3, #7
 800bd56:	d00c      	beq.n	800bd72 <__lo0bits+0x22>
 800bd58:	07d9      	lsls	r1, r3, #31
 800bd5a:	d422      	bmi.n	800bda2 <__lo0bits+0x52>
 800bd5c:	079a      	lsls	r2, r3, #30
 800bd5e:	bf49      	itett	mi
 800bd60:	085b      	lsrmi	r3, r3, #1
 800bd62:	089b      	lsrpl	r3, r3, #2
 800bd64:	6003      	strmi	r3, [r0, #0]
 800bd66:	2201      	movmi	r2, #1
 800bd68:	bf5c      	itt	pl
 800bd6a:	6003      	strpl	r3, [r0, #0]
 800bd6c:	2202      	movpl	r2, #2
 800bd6e:	4610      	mov	r0, r2
 800bd70:	4770      	bx	lr
 800bd72:	b299      	uxth	r1, r3
 800bd74:	b909      	cbnz	r1, 800bd7a <__lo0bits+0x2a>
 800bd76:	0c1b      	lsrs	r3, r3, #16
 800bd78:	2210      	movs	r2, #16
 800bd7a:	b2d9      	uxtb	r1, r3
 800bd7c:	b909      	cbnz	r1, 800bd82 <__lo0bits+0x32>
 800bd7e:	3208      	adds	r2, #8
 800bd80:	0a1b      	lsrs	r3, r3, #8
 800bd82:	0719      	lsls	r1, r3, #28
 800bd84:	bf04      	itt	eq
 800bd86:	091b      	lsreq	r3, r3, #4
 800bd88:	3204      	addeq	r2, #4
 800bd8a:	0799      	lsls	r1, r3, #30
 800bd8c:	bf04      	itt	eq
 800bd8e:	089b      	lsreq	r3, r3, #2
 800bd90:	3202      	addeq	r2, #2
 800bd92:	07d9      	lsls	r1, r3, #31
 800bd94:	d403      	bmi.n	800bd9e <__lo0bits+0x4e>
 800bd96:	085b      	lsrs	r3, r3, #1
 800bd98:	f102 0201 	add.w	r2, r2, #1
 800bd9c:	d003      	beq.n	800bda6 <__lo0bits+0x56>
 800bd9e:	6003      	str	r3, [r0, #0]
 800bda0:	e7e5      	b.n	800bd6e <__lo0bits+0x1e>
 800bda2:	2200      	movs	r2, #0
 800bda4:	e7e3      	b.n	800bd6e <__lo0bits+0x1e>
 800bda6:	2220      	movs	r2, #32
 800bda8:	e7e1      	b.n	800bd6e <__lo0bits+0x1e>
	...

0800bdac <__i2b>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	460c      	mov	r4, r1
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	f7ff ff05 	bl	800bbc0 <_Balloc>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	b928      	cbnz	r0, 800bdc6 <__i2b+0x1a>
 800bdba:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <__i2b+0x24>)
 800bdbc:	4805      	ldr	r0, [pc, #20]	; (800bdd4 <__i2b+0x28>)
 800bdbe:	f240 1145 	movw	r1, #325	; 0x145
 800bdc2:	f000 fb37 	bl	800c434 <__assert_func>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	6144      	str	r4, [r0, #20]
 800bdca:	6103      	str	r3, [r0, #16]
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	bf00      	nop
 800bdd0:	0800d194 	.word	0x0800d194
 800bdd4:	0800d1a5 	.word	0x0800d1a5

0800bdd8 <__multiply>:
 800bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	4691      	mov	r9, r2
 800bdde:	690a      	ldr	r2, [r1, #16]
 800bde0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	bfb8      	it	lt
 800bde8:	460b      	movlt	r3, r1
 800bdea:	460c      	mov	r4, r1
 800bdec:	bfbc      	itt	lt
 800bdee:	464c      	movlt	r4, r9
 800bdf0:	4699      	movlt	r9, r3
 800bdf2:	6927      	ldr	r7, [r4, #16]
 800bdf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bdf8:	68a3      	ldr	r3, [r4, #8]
 800bdfa:	6861      	ldr	r1, [r4, #4]
 800bdfc:	eb07 060a 	add.w	r6, r7, sl
 800be00:	42b3      	cmp	r3, r6
 800be02:	b085      	sub	sp, #20
 800be04:	bfb8      	it	lt
 800be06:	3101      	addlt	r1, #1
 800be08:	f7ff feda 	bl	800bbc0 <_Balloc>
 800be0c:	b930      	cbnz	r0, 800be1c <__multiply+0x44>
 800be0e:	4602      	mov	r2, r0
 800be10:	4b44      	ldr	r3, [pc, #272]	; (800bf24 <__multiply+0x14c>)
 800be12:	4845      	ldr	r0, [pc, #276]	; (800bf28 <__multiply+0x150>)
 800be14:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800be18:	f000 fb0c 	bl	800c434 <__assert_func>
 800be1c:	f100 0514 	add.w	r5, r0, #20
 800be20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be24:	462b      	mov	r3, r5
 800be26:	2200      	movs	r2, #0
 800be28:	4543      	cmp	r3, r8
 800be2a:	d321      	bcc.n	800be70 <__multiply+0x98>
 800be2c:	f104 0314 	add.w	r3, r4, #20
 800be30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be34:	f109 0314 	add.w	r3, r9, #20
 800be38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be3c:	9202      	str	r2, [sp, #8]
 800be3e:	1b3a      	subs	r2, r7, r4
 800be40:	3a15      	subs	r2, #21
 800be42:	f022 0203 	bic.w	r2, r2, #3
 800be46:	3204      	adds	r2, #4
 800be48:	f104 0115 	add.w	r1, r4, #21
 800be4c:	428f      	cmp	r7, r1
 800be4e:	bf38      	it	cc
 800be50:	2204      	movcc	r2, #4
 800be52:	9201      	str	r2, [sp, #4]
 800be54:	9a02      	ldr	r2, [sp, #8]
 800be56:	9303      	str	r3, [sp, #12]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d80c      	bhi.n	800be76 <__multiply+0x9e>
 800be5c:	2e00      	cmp	r6, #0
 800be5e:	dd03      	ble.n	800be68 <__multiply+0x90>
 800be60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be64:	2b00      	cmp	r3, #0
 800be66:	d05b      	beq.n	800bf20 <__multiply+0x148>
 800be68:	6106      	str	r6, [r0, #16]
 800be6a:	b005      	add	sp, #20
 800be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be70:	f843 2b04 	str.w	r2, [r3], #4
 800be74:	e7d8      	b.n	800be28 <__multiply+0x50>
 800be76:	f8b3 a000 	ldrh.w	sl, [r3]
 800be7a:	f1ba 0f00 	cmp.w	sl, #0
 800be7e:	d024      	beq.n	800beca <__multiply+0xf2>
 800be80:	f104 0e14 	add.w	lr, r4, #20
 800be84:	46a9      	mov	r9, r5
 800be86:	f04f 0c00 	mov.w	ip, #0
 800be8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be8e:	f8d9 1000 	ldr.w	r1, [r9]
 800be92:	fa1f fb82 	uxth.w	fp, r2
 800be96:	b289      	uxth	r1, r1
 800be98:	fb0a 110b 	mla	r1, sl, fp, r1
 800be9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bea0:	f8d9 2000 	ldr.w	r2, [r9]
 800bea4:	4461      	add	r1, ip
 800bea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800beaa:	fb0a c20b 	mla	r2, sl, fp, ip
 800beae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800beb2:	b289      	uxth	r1, r1
 800beb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800beb8:	4577      	cmp	r7, lr
 800beba:	f849 1b04 	str.w	r1, [r9], #4
 800bebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bec2:	d8e2      	bhi.n	800be8a <__multiply+0xb2>
 800bec4:	9a01      	ldr	r2, [sp, #4]
 800bec6:	f845 c002 	str.w	ip, [r5, r2]
 800beca:	9a03      	ldr	r2, [sp, #12]
 800becc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bed0:	3304      	adds	r3, #4
 800bed2:	f1b9 0f00 	cmp.w	r9, #0
 800bed6:	d021      	beq.n	800bf1c <__multiply+0x144>
 800bed8:	6829      	ldr	r1, [r5, #0]
 800beda:	f104 0c14 	add.w	ip, r4, #20
 800bede:	46ae      	mov	lr, r5
 800bee0:	f04f 0a00 	mov.w	sl, #0
 800bee4:	f8bc b000 	ldrh.w	fp, [ip]
 800bee8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800beec:	fb09 220b 	mla	r2, r9, fp, r2
 800bef0:	4452      	add	r2, sl
 800bef2:	b289      	uxth	r1, r1
 800bef4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bef8:	f84e 1b04 	str.w	r1, [lr], #4
 800befc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bf00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf04:	f8be 1000 	ldrh.w	r1, [lr]
 800bf08:	fb09 110a 	mla	r1, r9, sl, r1
 800bf0c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bf10:	4567      	cmp	r7, ip
 800bf12:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf16:	d8e5      	bhi.n	800bee4 <__multiply+0x10c>
 800bf18:	9a01      	ldr	r2, [sp, #4]
 800bf1a:	50a9      	str	r1, [r5, r2]
 800bf1c:	3504      	adds	r5, #4
 800bf1e:	e799      	b.n	800be54 <__multiply+0x7c>
 800bf20:	3e01      	subs	r6, #1
 800bf22:	e79b      	b.n	800be5c <__multiply+0x84>
 800bf24:	0800d194 	.word	0x0800d194
 800bf28:	0800d1a5 	.word	0x0800d1a5

0800bf2c <__pow5mult>:
 800bf2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf30:	4615      	mov	r5, r2
 800bf32:	f012 0203 	ands.w	r2, r2, #3
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	d007      	beq.n	800bf4c <__pow5mult+0x20>
 800bf3c:	4c25      	ldr	r4, [pc, #148]	; (800bfd4 <__pow5mult+0xa8>)
 800bf3e:	3a01      	subs	r2, #1
 800bf40:	2300      	movs	r3, #0
 800bf42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf46:	f7ff fe9d 	bl	800bc84 <__multadd>
 800bf4a:	4607      	mov	r7, r0
 800bf4c:	10ad      	asrs	r5, r5, #2
 800bf4e:	d03d      	beq.n	800bfcc <__pow5mult+0xa0>
 800bf50:	69f4      	ldr	r4, [r6, #28]
 800bf52:	b97c      	cbnz	r4, 800bf74 <__pow5mult+0x48>
 800bf54:	2010      	movs	r0, #16
 800bf56:	f7ff fd7f 	bl	800ba58 <malloc>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	61f0      	str	r0, [r6, #28]
 800bf5e:	b928      	cbnz	r0, 800bf6c <__pow5mult+0x40>
 800bf60:	4b1d      	ldr	r3, [pc, #116]	; (800bfd8 <__pow5mult+0xac>)
 800bf62:	481e      	ldr	r0, [pc, #120]	; (800bfdc <__pow5mult+0xb0>)
 800bf64:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bf68:	f000 fa64 	bl	800c434 <__assert_func>
 800bf6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf70:	6004      	str	r4, [r0, #0]
 800bf72:	60c4      	str	r4, [r0, #12]
 800bf74:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bf78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf7c:	b94c      	cbnz	r4, 800bf92 <__pow5mult+0x66>
 800bf7e:	f240 2171 	movw	r1, #625	; 0x271
 800bf82:	4630      	mov	r0, r6
 800bf84:	f7ff ff12 	bl	800bdac <__i2b>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf8e:	4604      	mov	r4, r0
 800bf90:	6003      	str	r3, [r0, #0]
 800bf92:	f04f 0900 	mov.w	r9, #0
 800bf96:	07eb      	lsls	r3, r5, #31
 800bf98:	d50a      	bpl.n	800bfb0 <__pow5mult+0x84>
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f7ff ff1a 	bl	800bdd8 <__multiply>
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f7ff fe49 	bl	800bc40 <_Bfree>
 800bfae:	4647      	mov	r7, r8
 800bfb0:	106d      	asrs	r5, r5, #1
 800bfb2:	d00b      	beq.n	800bfcc <__pow5mult+0xa0>
 800bfb4:	6820      	ldr	r0, [r4, #0]
 800bfb6:	b938      	cbnz	r0, 800bfc8 <__pow5mult+0x9c>
 800bfb8:	4622      	mov	r2, r4
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7ff ff0b 	bl	800bdd8 <__multiply>
 800bfc2:	6020      	str	r0, [r4, #0]
 800bfc4:	f8c0 9000 	str.w	r9, [r0]
 800bfc8:	4604      	mov	r4, r0
 800bfca:	e7e4      	b.n	800bf96 <__pow5mult+0x6a>
 800bfcc:	4638      	mov	r0, r7
 800bfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd2:	bf00      	nop
 800bfd4:	0800d2f0 	.word	0x0800d2f0
 800bfd8:	0800d125 	.word	0x0800d125
 800bfdc:	0800d1a5 	.word	0x0800d1a5

0800bfe0 <__lshift>:
 800bfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	6849      	ldr	r1, [r1, #4]
 800bfe8:	6923      	ldr	r3, [r4, #16]
 800bfea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfee:	68a3      	ldr	r3, [r4, #8]
 800bff0:	4607      	mov	r7, r0
 800bff2:	4691      	mov	r9, r2
 800bff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bff8:	f108 0601 	add.w	r6, r8, #1
 800bffc:	42b3      	cmp	r3, r6
 800bffe:	db0b      	blt.n	800c018 <__lshift+0x38>
 800c000:	4638      	mov	r0, r7
 800c002:	f7ff fddd 	bl	800bbc0 <_Balloc>
 800c006:	4605      	mov	r5, r0
 800c008:	b948      	cbnz	r0, 800c01e <__lshift+0x3e>
 800c00a:	4602      	mov	r2, r0
 800c00c:	4b28      	ldr	r3, [pc, #160]	; (800c0b0 <__lshift+0xd0>)
 800c00e:	4829      	ldr	r0, [pc, #164]	; (800c0b4 <__lshift+0xd4>)
 800c010:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c014:	f000 fa0e 	bl	800c434 <__assert_func>
 800c018:	3101      	adds	r1, #1
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	e7ee      	b.n	800bffc <__lshift+0x1c>
 800c01e:	2300      	movs	r3, #0
 800c020:	f100 0114 	add.w	r1, r0, #20
 800c024:	f100 0210 	add.w	r2, r0, #16
 800c028:	4618      	mov	r0, r3
 800c02a:	4553      	cmp	r3, sl
 800c02c:	db33      	blt.n	800c096 <__lshift+0xb6>
 800c02e:	6920      	ldr	r0, [r4, #16]
 800c030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c034:	f104 0314 	add.w	r3, r4, #20
 800c038:	f019 091f 	ands.w	r9, r9, #31
 800c03c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c040:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c044:	d02b      	beq.n	800c09e <__lshift+0xbe>
 800c046:	f1c9 0e20 	rsb	lr, r9, #32
 800c04a:	468a      	mov	sl, r1
 800c04c:	2200      	movs	r2, #0
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	fa00 f009 	lsl.w	r0, r0, r9
 800c054:	4310      	orrs	r0, r2
 800c056:	f84a 0b04 	str.w	r0, [sl], #4
 800c05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c05e:	459c      	cmp	ip, r3
 800c060:	fa22 f20e 	lsr.w	r2, r2, lr
 800c064:	d8f3      	bhi.n	800c04e <__lshift+0x6e>
 800c066:	ebac 0304 	sub.w	r3, ip, r4
 800c06a:	3b15      	subs	r3, #21
 800c06c:	f023 0303 	bic.w	r3, r3, #3
 800c070:	3304      	adds	r3, #4
 800c072:	f104 0015 	add.w	r0, r4, #21
 800c076:	4584      	cmp	ip, r0
 800c078:	bf38      	it	cc
 800c07a:	2304      	movcc	r3, #4
 800c07c:	50ca      	str	r2, [r1, r3]
 800c07e:	b10a      	cbz	r2, 800c084 <__lshift+0xa4>
 800c080:	f108 0602 	add.w	r6, r8, #2
 800c084:	3e01      	subs	r6, #1
 800c086:	4638      	mov	r0, r7
 800c088:	612e      	str	r6, [r5, #16]
 800c08a:	4621      	mov	r1, r4
 800c08c:	f7ff fdd8 	bl	800bc40 <_Bfree>
 800c090:	4628      	mov	r0, r5
 800c092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c096:	f842 0f04 	str.w	r0, [r2, #4]!
 800c09a:	3301      	adds	r3, #1
 800c09c:	e7c5      	b.n	800c02a <__lshift+0x4a>
 800c09e:	3904      	subs	r1, #4
 800c0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0a8:	459c      	cmp	ip, r3
 800c0aa:	d8f9      	bhi.n	800c0a0 <__lshift+0xc0>
 800c0ac:	e7ea      	b.n	800c084 <__lshift+0xa4>
 800c0ae:	bf00      	nop
 800c0b0:	0800d194 	.word	0x0800d194
 800c0b4:	0800d1a5 	.word	0x0800d1a5

0800c0b8 <__mcmp>:
 800c0b8:	b530      	push	{r4, r5, lr}
 800c0ba:	6902      	ldr	r2, [r0, #16]
 800c0bc:	690c      	ldr	r4, [r1, #16]
 800c0be:	1b12      	subs	r2, r2, r4
 800c0c0:	d10e      	bne.n	800c0e0 <__mcmp+0x28>
 800c0c2:	f100 0314 	add.w	r3, r0, #20
 800c0c6:	3114      	adds	r1, #20
 800c0c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c0cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c0d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c0d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c0d8:	42a5      	cmp	r5, r4
 800c0da:	d003      	beq.n	800c0e4 <__mcmp+0x2c>
 800c0dc:	d305      	bcc.n	800c0ea <__mcmp+0x32>
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	bd30      	pop	{r4, r5, pc}
 800c0e4:	4283      	cmp	r3, r0
 800c0e6:	d3f3      	bcc.n	800c0d0 <__mcmp+0x18>
 800c0e8:	e7fa      	b.n	800c0e0 <__mcmp+0x28>
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ee:	e7f7      	b.n	800c0e0 <__mcmp+0x28>

0800c0f0 <__mdiff>:
 800c0f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	4690      	mov	r8, r2
 800c0fe:	f7ff ffdb 	bl	800c0b8 <__mcmp>
 800c102:	1e05      	subs	r5, r0, #0
 800c104:	d110      	bne.n	800c128 <__mdiff+0x38>
 800c106:	4629      	mov	r1, r5
 800c108:	4630      	mov	r0, r6
 800c10a:	f7ff fd59 	bl	800bbc0 <_Balloc>
 800c10e:	b930      	cbnz	r0, 800c11e <__mdiff+0x2e>
 800c110:	4b3a      	ldr	r3, [pc, #232]	; (800c1fc <__mdiff+0x10c>)
 800c112:	4602      	mov	r2, r0
 800c114:	f240 2137 	movw	r1, #567	; 0x237
 800c118:	4839      	ldr	r0, [pc, #228]	; (800c200 <__mdiff+0x110>)
 800c11a:	f000 f98b 	bl	800c434 <__assert_func>
 800c11e:	2301      	movs	r3, #1
 800c120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c128:	bfa4      	itt	ge
 800c12a:	4643      	movge	r3, r8
 800c12c:	46a0      	movge	r8, r4
 800c12e:	4630      	mov	r0, r6
 800c130:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c134:	bfa6      	itte	ge
 800c136:	461c      	movge	r4, r3
 800c138:	2500      	movge	r5, #0
 800c13a:	2501      	movlt	r5, #1
 800c13c:	f7ff fd40 	bl	800bbc0 <_Balloc>
 800c140:	b920      	cbnz	r0, 800c14c <__mdiff+0x5c>
 800c142:	4b2e      	ldr	r3, [pc, #184]	; (800c1fc <__mdiff+0x10c>)
 800c144:	4602      	mov	r2, r0
 800c146:	f240 2145 	movw	r1, #581	; 0x245
 800c14a:	e7e5      	b.n	800c118 <__mdiff+0x28>
 800c14c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c150:	6926      	ldr	r6, [r4, #16]
 800c152:	60c5      	str	r5, [r0, #12]
 800c154:	f104 0914 	add.w	r9, r4, #20
 800c158:	f108 0514 	add.w	r5, r8, #20
 800c15c:	f100 0e14 	add.w	lr, r0, #20
 800c160:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c164:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c168:	f108 0210 	add.w	r2, r8, #16
 800c16c:	46f2      	mov	sl, lr
 800c16e:	2100      	movs	r1, #0
 800c170:	f859 3b04 	ldr.w	r3, [r9], #4
 800c174:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c178:	fa11 f88b 	uxtah	r8, r1, fp
 800c17c:	b299      	uxth	r1, r3
 800c17e:	0c1b      	lsrs	r3, r3, #16
 800c180:	eba8 0801 	sub.w	r8, r8, r1
 800c184:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c188:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c18c:	fa1f f888 	uxth.w	r8, r8
 800c190:	1419      	asrs	r1, r3, #16
 800c192:	454e      	cmp	r6, r9
 800c194:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c198:	f84a 3b04 	str.w	r3, [sl], #4
 800c19c:	d8e8      	bhi.n	800c170 <__mdiff+0x80>
 800c19e:	1b33      	subs	r3, r6, r4
 800c1a0:	3b15      	subs	r3, #21
 800c1a2:	f023 0303 	bic.w	r3, r3, #3
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	3415      	adds	r4, #21
 800c1aa:	42a6      	cmp	r6, r4
 800c1ac:	bf38      	it	cc
 800c1ae:	2304      	movcc	r3, #4
 800c1b0:	441d      	add	r5, r3
 800c1b2:	4473      	add	r3, lr
 800c1b4:	469e      	mov	lr, r3
 800c1b6:	462e      	mov	r6, r5
 800c1b8:	4566      	cmp	r6, ip
 800c1ba:	d30e      	bcc.n	800c1da <__mdiff+0xea>
 800c1bc:	f10c 0203 	add.w	r2, ip, #3
 800c1c0:	1b52      	subs	r2, r2, r5
 800c1c2:	f022 0203 	bic.w	r2, r2, #3
 800c1c6:	3d03      	subs	r5, #3
 800c1c8:	45ac      	cmp	ip, r5
 800c1ca:	bf38      	it	cc
 800c1cc:	2200      	movcc	r2, #0
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c1d4:	b17a      	cbz	r2, 800c1f6 <__mdiff+0x106>
 800c1d6:	6107      	str	r7, [r0, #16]
 800c1d8:	e7a4      	b.n	800c124 <__mdiff+0x34>
 800c1da:	f856 8b04 	ldr.w	r8, [r6], #4
 800c1de:	fa11 f288 	uxtah	r2, r1, r8
 800c1e2:	1414      	asrs	r4, r2, #16
 800c1e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c1e8:	b292      	uxth	r2, r2
 800c1ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c1ee:	f84e 2b04 	str.w	r2, [lr], #4
 800c1f2:	1421      	asrs	r1, r4, #16
 800c1f4:	e7e0      	b.n	800c1b8 <__mdiff+0xc8>
 800c1f6:	3f01      	subs	r7, #1
 800c1f8:	e7ea      	b.n	800c1d0 <__mdiff+0xe0>
 800c1fa:	bf00      	nop
 800c1fc:	0800d194 	.word	0x0800d194
 800c200:	0800d1a5 	.word	0x0800d1a5

0800c204 <__d2b>:
 800c204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c208:	460f      	mov	r7, r1
 800c20a:	2101      	movs	r1, #1
 800c20c:	ec59 8b10 	vmov	r8, r9, d0
 800c210:	4616      	mov	r6, r2
 800c212:	f7ff fcd5 	bl	800bbc0 <_Balloc>
 800c216:	4604      	mov	r4, r0
 800c218:	b930      	cbnz	r0, 800c228 <__d2b+0x24>
 800c21a:	4602      	mov	r2, r0
 800c21c:	4b24      	ldr	r3, [pc, #144]	; (800c2b0 <__d2b+0xac>)
 800c21e:	4825      	ldr	r0, [pc, #148]	; (800c2b4 <__d2b+0xb0>)
 800c220:	f240 310f 	movw	r1, #783	; 0x30f
 800c224:	f000 f906 	bl	800c434 <__assert_func>
 800c228:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c22c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c230:	bb2d      	cbnz	r5, 800c27e <__d2b+0x7a>
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	f1b8 0300 	subs.w	r3, r8, #0
 800c238:	d026      	beq.n	800c288 <__d2b+0x84>
 800c23a:	4668      	mov	r0, sp
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	f7ff fd87 	bl	800bd50 <__lo0bits>
 800c242:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c246:	b1e8      	cbz	r0, 800c284 <__d2b+0x80>
 800c248:	f1c0 0320 	rsb	r3, r0, #32
 800c24c:	fa02 f303 	lsl.w	r3, r2, r3
 800c250:	430b      	orrs	r3, r1
 800c252:	40c2      	lsrs	r2, r0
 800c254:	6163      	str	r3, [r4, #20]
 800c256:	9201      	str	r2, [sp, #4]
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	61a3      	str	r3, [r4, #24]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bf14      	ite	ne
 800c260:	2202      	movne	r2, #2
 800c262:	2201      	moveq	r2, #1
 800c264:	6122      	str	r2, [r4, #16]
 800c266:	b1bd      	cbz	r5, 800c298 <__d2b+0x94>
 800c268:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c26c:	4405      	add	r5, r0
 800c26e:	603d      	str	r5, [r7, #0]
 800c270:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c274:	6030      	str	r0, [r6, #0]
 800c276:	4620      	mov	r0, r4
 800c278:	b003      	add	sp, #12
 800c27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c27e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c282:	e7d6      	b.n	800c232 <__d2b+0x2e>
 800c284:	6161      	str	r1, [r4, #20]
 800c286:	e7e7      	b.n	800c258 <__d2b+0x54>
 800c288:	a801      	add	r0, sp, #4
 800c28a:	f7ff fd61 	bl	800bd50 <__lo0bits>
 800c28e:	9b01      	ldr	r3, [sp, #4]
 800c290:	6163      	str	r3, [r4, #20]
 800c292:	3020      	adds	r0, #32
 800c294:	2201      	movs	r2, #1
 800c296:	e7e5      	b.n	800c264 <__d2b+0x60>
 800c298:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c29c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2a0:	6038      	str	r0, [r7, #0]
 800c2a2:	6918      	ldr	r0, [r3, #16]
 800c2a4:	f7ff fd34 	bl	800bd10 <__hi0bits>
 800c2a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2ac:	e7e2      	b.n	800c274 <__d2b+0x70>
 800c2ae:	bf00      	nop
 800c2b0:	0800d194 	.word	0x0800d194
 800c2b4:	0800d1a5 	.word	0x0800d1a5

0800c2b8 <__sflush_r>:
 800c2b8:	898a      	ldrh	r2, [r1, #12]
 800c2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2be:	4605      	mov	r5, r0
 800c2c0:	0710      	lsls	r0, r2, #28
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	d458      	bmi.n	800c378 <__sflush_r+0xc0>
 800c2c6:	684b      	ldr	r3, [r1, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	dc05      	bgt.n	800c2d8 <__sflush_r+0x20>
 800c2cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	dc02      	bgt.n	800c2d8 <__sflush_r+0x20>
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2da:	2e00      	cmp	r6, #0
 800c2dc:	d0f9      	beq.n	800c2d2 <__sflush_r+0x1a>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2e4:	682f      	ldr	r7, [r5, #0]
 800c2e6:	6a21      	ldr	r1, [r4, #32]
 800c2e8:	602b      	str	r3, [r5, #0]
 800c2ea:	d032      	beq.n	800c352 <__sflush_r+0x9a>
 800c2ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2ee:	89a3      	ldrh	r3, [r4, #12]
 800c2f0:	075a      	lsls	r2, r3, #29
 800c2f2:	d505      	bpl.n	800c300 <__sflush_r+0x48>
 800c2f4:	6863      	ldr	r3, [r4, #4]
 800c2f6:	1ac0      	subs	r0, r0, r3
 800c2f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2fa:	b10b      	cbz	r3, 800c300 <__sflush_r+0x48>
 800c2fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2fe:	1ac0      	subs	r0, r0, r3
 800c300:	2300      	movs	r3, #0
 800c302:	4602      	mov	r2, r0
 800c304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c306:	6a21      	ldr	r1, [r4, #32]
 800c308:	4628      	mov	r0, r5
 800c30a:	47b0      	blx	r6
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	d106      	bne.n	800c320 <__sflush_r+0x68>
 800c312:	6829      	ldr	r1, [r5, #0]
 800c314:	291d      	cmp	r1, #29
 800c316:	d82b      	bhi.n	800c370 <__sflush_r+0xb8>
 800c318:	4a29      	ldr	r2, [pc, #164]	; (800c3c0 <__sflush_r+0x108>)
 800c31a:	410a      	asrs	r2, r1
 800c31c:	07d6      	lsls	r6, r2, #31
 800c31e:	d427      	bmi.n	800c370 <__sflush_r+0xb8>
 800c320:	2200      	movs	r2, #0
 800c322:	6062      	str	r2, [r4, #4]
 800c324:	04d9      	lsls	r1, r3, #19
 800c326:	6922      	ldr	r2, [r4, #16]
 800c328:	6022      	str	r2, [r4, #0]
 800c32a:	d504      	bpl.n	800c336 <__sflush_r+0x7e>
 800c32c:	1c42      	adds	r2, r0, #1
 800c32e:	d101      	bne.n	800c334 <__sflush_r+0x7c>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	b903      	cbnz	r3, 800c336 <__sflush_r+0x7e>
 800c334:	6560      	str	r0, [r4, #84]	; 0x54
 800c336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c338:	602f      	str	r7, [r5, #0]
 800c33a:	2900      	cmp	r1, #0
 800c33c:	d0c9      	beq.n	800c2d2 <__sflush_r+0x1a>
 800c33e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c342:	4299      	cmp	r1, r3
 800c344:	d002      	beq.n	800c34c <__sflush_r+0x94>
 800c346:	4628      	mov	r0, r5
 800c348:	f7ff fb3a 	bl	800b9c0 <_free_r>
 800c34c:	2000      	movs	r0, #0
 800c34e:	6360      	str	r0, [r4, #52]	; 0x34
 800c350:	e7c0      	b.n	800c2d4 <__sflush_r+0x1c>
 800c352:	2301      	movs	r3, #1
 800c354:	4628      	mov	r0, r5
 800c356:	47b0      	blx	r6
 800c358:	1c41      	adds	r1, r0, #1
 800c35a:	d1c8      	bne.n	800c2ee <__sflush_r+0x36>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d0c5      	beq.n	800c2ee <__sflush_r+0x36>
 800c362:	2b1d      	cmp	r3, #29
 800c364:	d001      	beq.n	800c36a <__sflush_r+0xb2>
 800c366:	2b16      	cmp	r3, #22
 800c368:	d101      	bne.n	800c36e <__sflush_r+0xb6>
 800c36a:	602f      	str	r7, [r5, #0]
 800c36c:	e7b1      	b.n	800c2d2 <__sflush_r+0x1a>
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	e7ad      	b.n	800c2d4 <__sflush_r+0x1c>
 800c378:	690f      	ldr	r7, [r1, #16]
 800c37a:	2f00      	cmp	r7, #0
 800c37c:	d0a9      	beq.n	800c2d2 <__sflush_r+0x1a>
 800c37e:	0793      	lsls	r3, r2, #30
 800c380:	680e      	ldr	r6, [r1, #0]
 800c382:	bf08      	it	eq
 800c384:	694b      	ldreq	r3, [r1, #20]
 800c386:	600f      	str	r7, [r1, #0]
 800c388:	bf18      	it	ne
 800c38a:	2300      	movne	r3, #0
 800c38c:	eba6 0807 	sub.w	r8, r6, r7
 800c390:	608b      	str	r3, [r1, #8]
 800c392:	f1b8 0f00 	cmp.w	r8, #0
 800c396:	dd9c      	ble.n	800c2d2 <__sflush_r+0x1a>
 800c398:	6a21      	ldr	r1, [r4, #32]
 800c39a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c39c:	4643      	mov	r3, r8
 800c39e:	463a      	mov	r2, r7
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	47b0      	blx	r6
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	dc06      	bgt.n	800c3b6 <__sflush_r+0xfe>
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ae:	81a3      	strh	r3, [r4, #12]
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	e78e      	b.n	800c2d4 <__sflush_r+0x1c>
 800c3b6:	4407      	add	r7, r0
 800c3b8:	eba8 0800 	sub.w	r8, r8, r0
 800c3bc:	e7e9      	b.n	800c392 <__sflush_r+0xda>
 800c3be:	bf00      	nop
 800c3c0:	dfbffffe 	.word	0xdfbffffe

0800c3c4 <_fflush_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	690b      	ldr	r3, [r1, #16]
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	b913      	cbnz	r3, 800c3d4 <_fflush_r+0x10>
 800c3ce:	2500      	movs	r5, #0
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	bd38      	pop	{r3, r4, r5, pc}
 800c3d4:	b118      	cbz	r0, 800c3de <_fflush_r+0x1a>
 800c3d6:	6a03      	ldr	r3, [r0, #32]
 800c3d8:	b90b      	cbnz	r3, 800c3de <_fflush_r+0x1a>
 800c3da:	f7fe fb9f 	bl	800ab1c <__sinit>
 800c3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0f3      	beq.n	800c3ce <_fflush_r+0xa>
 800c3e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3e8:	07d0      	lsls	r0, r2, #31
 800c3ea:	d404      	bmi.n	800c3f6 <_fflush_r+0x32>
 800c3ec:	0599      	lsls	r1, r3, #22
 800c3ee:	d402      	bmi.n	800c3f6 <_fflush_r+0x32>
 800c3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3f2:	f7fe fce0 	bl	800adb6 <__retarget_lock_acquire_recursive>
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	f7ff ff5d 	bl	800c2b8 <__sflush_r>
 800c3fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c400:	07da      	lsls	r2, r3, #31
 800c402:	4605      	mov	r5, r0
 800c404:	d4e4      	bmi.n	800c3d0 <_fflush_r+0xc>
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	059b      	lsls	r3, r3, #22
 800c40a:	d4e1      	bmi.n	800c3d0 <_fflush_r+0xc>
 800c40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40e:	f7fe fcd3 	bl	800adb8 <__retarget_lock_release_recursive>
 800c412:	e7dd      	b.n	800c3d0 <_fflush_r+0xc>

0800c414 <_sbrk_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4d06      	ldr	r5, [pc, #24]	; (800c430 <_sbrk_r+0x1c>)
 800c418:	2300      	movs	r3, #0
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	602b      	str	r3, [r5, #0]
 800c420:	f7f6 f95a 	bl	80026d8 <_sbrk>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	d102      	bne.n	800c42e <_sbrk_r+0x1a>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	b103      	cbz	r3, 800c42e <_sbrk_r+0x1a>
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	200054f0 	.word	0x200054f0

0800c434 <__assert_func>:
 800c434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c436:	4614      	mov	r4, r2
 800c438:	461a      	mov	r2, r3
 800c43a:	4b09      	ldr	r3, [pc, #36]	; (800c460 <__assert_func+0x2c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4605      	mov	r5, r0
 800c440:	68d8      	ldr	r0, [r3, #12]
 800c442:	b14c      	cbz	r4, 800c458 <__assert_func+0x24>
 800c444:	4b07      	ldr	r3, [pc, #28]	; (800c464 <__assert_func+0x30>)
 800c446:	9100      	str	r1, [sp, #0]
 800c448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c44c:	4906      	ldr	r1, [pc, #24]	; (800c468 <__assert_func+0x34>)
 800c44e:	462b      	mov	r3, r5
 800c450:	f000 f844 	bl	800c4dc <fiprintf>
 800c454:	f000 f854 	bl	800c500 <abort>
 800c458:	4b04      	ldr	r3, [pc, #16]	; (800c46c <__assert_func+0x38>)
 800c45a:	461c      	mov	r4, r3
 800c45c:	e7f3      	b.n	800c446 <__assert_func+0x12>
 800c45e:	bf00      	nop
 800c460:	20000084 	.word	0x20000084
 800c464:	0800d306 	.word	0x0800d306
 800c468:	0800d313 	.word	0x0800d313
 800c46c:	0800d341 	.word	0x0800d341

0800c470 <_calloc_r>:
 800c470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c472:	fba1 2402 	umull	r2, r4, r1, r2
 800c476:	b94c      	cbnz	r4, 800c48c <_calloc_r+0x1c>
 800c478:	4611      	mov	r1, r2
 800c47a:	9201      	str	r2, [sp, #4]
 800c47c:	f7ff fb14 	bl	800baa8 <_malloc_r>
 800c480:	9a01      	ldr	r2, [sp, #4]
 800c482:	4605      	mov	r5, r0
 800c484:	b930      	cbnz	r0, 800c494 <_calloc_r+0x24>
 800c486:	4628      	mov	r0, r5
 800c488:	b003      	add	sp, #12
 800c48a:	bd30      	pop	{r4, r5, pc}
 800c48c:	220c      	movs	r2, #12
 800c48e:	6002      	str	r2, [r0, #0]
 800c490:	2500      	movs	r5, #0
 800c492:	e7f8      	b.n	800c486 <_calloc_r+0x16>
 800c494:	4621      	mov	r1, r4
 800c496:	f7fe fbba 	bl	800ac0e <memset>
 800c49a:	e7f4      	b.n	800c486 <_calloc_r+0x16>

0800c49c <__ascii_mbtowc>:
 800c49c:	b082      	sub	sp, #8
 800c49e:	b901      	cbnz	r1, 800c4a2 <__ascii_mbtowc+0x6>
 800c4a0:	a901      	add	r1, sp, #4
 800c4a2:	b142      	cbz	r2, 800c4b6 <__ascii_mbtowc+0x1a>
 800c4a4:	b14b      	cbz	r3, 800c4ba <__ascii_mbtowc+0x1e>
 800c4a6:	7813      	ldrb	r3, [r2, #0]
 800c4a8:	600b      	str	r3, [r1, #0]
 800c4aa:	7812      	ldrb	r2, [r2, #0]
 800c4ac:	1e10      	subs	r0, r2, #0
 800c4ae:	bf18      	it	ne
 800c4b0:	2001      	movne	r0, #1
 800c4b2:	b002      	add	sp, #8
 800c4b4:	4770      	bx	lr
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	e7fb      	b.n	800c4b2 <__ascii_mbtowc+0x16>
 800c4ba:	f06f 0001 	mvn.w	r0, #1
 800c4be:	e7f8      	b.n	800c4b2 <__ascii_mbtowc+0x16>

0800c4c0 <__ascii_wctomb>:
 800c4c0:	b149      	cbz	r1, 800c4d6 <__ascii_wctomb+0x16>
 800c4c2:	2aff      	cmp	r2, #255	; 0xff
 800c4c4:	bf85      	ittet	hi
 800c4c6:	238a      	movhi	r3, #138	; 0x8a
 800c4c8:	6003      	strhi	r3, [r0, #0]
 800c4ca:	700a      	strbls	r2, [r1, #0]
 800c4cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4d0:	bf98      	it	ls
 800c4d2:	2001      	movls	r0, #1
 800c4d4:	4770      	bx	lr
 800c4d6:	4608      	mov	r0, r1
 800c4d8:	4770      	bx	lr
	...

0800c4dc <fiprintf>:
 800c4dc:	b40e      	push	{r1, r2, r3}
 800c4de:	b503      	push	{r0, r1, lr}
 800c4e0:	4601      	mov	r1, r0
 800c4e2:	ab03      	add	r3, sp, #12
 800c4e4:	4805      	ldr	r0, [pc, #20]	; (800c4fc <fiprintf+0x20>)
 800c4e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ea:	6800      	ldr	r0, [r0, #0]
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	f000 f837 	bl	800c560 <_vfiprintf_r>
 800c4f2:	b002      	add	sp, #8
 800c4f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4f8:	b003      	add	sp, #12
 800c4fa:	4770      	bx	lr
 800c4fc:	20000084 	.word	0x20000084

0800c500 <abort>:
 800c500:	b508      	push	{r3, lr}
 800c502:	2006      	movs	r0, #6
 800c504:	f000 fa04 	bl	800c910 <raise>
 800c508:	2001      	movs	r0, #1
 800c50a:	f7f6 f86d 	bl	80025e8 <_exit>

0800c50e <__sfputc_r>:
 800c50e:	6893      	ldr	r3, [r2, #8]
 800c510:	3b01      	subs	r3, #1
 800c512:	2b00      	cmp	r3, #0
 800c514:	b410      	push	{r4}
 800c516:	6093      	str	r3, [r2, #8]
 800c518:	da08      	bge.n	800c52c <__sfputc_r+0x1e>
 800c51a:	6994      	ldr	r4, [r2, #24]
 800c51c:	42a3      	cmp	r3, r4
 800c51e:	db01      	blt.n	800c524 <__sfputc_r+0x16>
 800c520:	290a      	cmp	r1, #10
 800c522:	d103      	bne.n	800c52c <__sfputc_r+0x1e>
 800c524:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c528:	f000 b934 	b.w	800c794 <__swbuf_r>
 800c52c:	6813      	ldr	r3, [r2, #0]
 800c52e:	1c58      	adds	r0, r3, #1
 800c530:	6010      	str	r0, [r2, #0]
 800c532:	7019      	strb	r1, [r3, #0]
 800c534:	4608      	mov	r0, r1
 800c536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <__sfputs_r>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	4606      	mov	r6, r0
 800c540:	460f      	mov	r7, r1
 800c542:	4614      	mov	r4, r2
 800c544:	18d5      	adds	r5, r2, r3
 800c546:	42ac      	cmp	r4, r5
 800c548:	d101      	bne.n	800c54e <__sfputs_r+0x12>
 800c54a:	2000      	movs	r0, #0
 800c54c:	e007      	b.n	800c55e <__sfputs_r+0x22>
 800c54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c552:	463a      	mov	r2, r7
 800c554:	4630      	mov	r0, r6
 800c556:	f7ff ffda 	bl	800c50e <__sfputc_r>
 800c55a:	1c43      	adds	r3, r0, #1
 800c55c:	d1f3      	bne.n	800c546 <__sfputs_r+0xa>
 800c55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c560 <_vfiprintf_r>:
 800c560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	460d      	mov	r5, r1
 800c566:	b09d      	sub	sp, #116	; 0x74
 800c568:	4614      	mov	r4, r2
 800c56a:	4698      	mov	r8, r3
 800c56c:	4606      	mov	r6, r0
 800c56e:	b118      	cbz	r0, 800c578 <_vfiprintf_r+0x18>
 800c570:	6a03      	ldr	r3, [r0, #32]
 800c572:	b90b      	cbnz	r3, 800c578 <_vfiprintf_r+0x18>
 800c574:	f7fe fad2 	bl	800ab1c <__sinit>
 800c578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c57a:	07d9      	lsls	r1, r3, #31
 800c57c:	d405      	bmi.n	800c58a <_vfiprintf_r+0x2a>
 800c57e:	89ab      	ldrh	r3, [r5, #12]
 800c580:	059a      	lsls	r2, r3, #22
 800c582:	d402      	bmi.n	800c58a <_vfiprintf_r+0x2a>
 800c584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c586:	f7fe fc16 	bl	800adb6 <__retarget_lock_acquire_recursive>
 800c58a:	89ab      	ldrh	r3, [r5, #12]
 800c58c:	071b      	lsls	r3, r3, #28
 800c58e:	d501      	bpl.n	800c594 <_vfiprintf_r+0x34>
 800c590:	692b      	ldr	r3, [r5, #16]
 800c592:	b99b      	cbnz	r3, 800c5bc <_vfiprintf_r+0x5c>
 800c594:	4629      	mov	r1, r5
 800c596:	4630      	mov	r0, r6
 800c598:	f000 f93a 	bl	800c810 <__swsetup_r>
 800c59c:	b170      	cbz	r0, 800c5bc <_vfiprintf_r+0x5c>
 800c59e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5a0:	07dc      	lsls	r4, r3, #31
 800c5a2:	d504      	bpl.n	800c5ae <_vfiprintf_r+0x4e>
 800c5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a8:	b01d      	add	sp, #116	; 0x74
 800c5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	0598      	lsls	r0, r3, #22
 800c5b2:	d4f7      	bmi.n	800c5a4 <_vfiprintf_r+0x44>
 800c5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5b6:	f7fe fbff 	bl	800adb8 <__retarget_lock_release_recursive>
 800c5ba:	e7f3      	b.n	800c5a4 <_vfiprintf_r+0x44>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c0:	2320      	movs	r3, #32
 800c5c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ca:	2330      	movs	r3, #48	; 0x30
 800c5cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c780 <_vfiprintf_r+0x220>
 800c5d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5d4:	f04f 0901 	mov.w	r9, #1
 800c5d8:	4623      	mov	r3, r4
 800c5da:	469a      	mov	sl, r3
 800c5dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5e0:	b10a      	cbz	r2, 800c5e6 <_vfiprintf_r+0x86>
 800c5e2:	2a25      	cmp	r2, #37	; 0x25
 800c5e4:	d1f9      	bne.n	800c5da <_vfiprintf_r+0x7a>
 800c5e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c5ea:	d00b      	beq.n	800c604 <_vfiprintf_r+0xa4>
 800c5ec:	465b      	mov	r3, fp
 800c5ee:	4622      	mov	r2, r4
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f7ff ffa2 	bl	800c53c <__sfputs_r>
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	f000 80a9 	beq.w	800c750 <_vfiprintf_r+0x1f0>
 800c5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c600:	445a      	add	r2, fp
 800c602:	9209      	str	r2, [sp, #36]	; 0x24
 800c604:	f89a 3000 	ldrb.w	r3, [sl]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 80a1 	beq.w	800c750 <_vfiprintf_r+0x1f0>
 800c60e:	2300      	movs	r3, #0
 800c610:	f04f 32ff 	mov.w	r2, #4294967295
 800c614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c618:	f10a 0a01 	add.w	sl, sl, #1
 800c61c:	9304      	str	r3, [sp, #16]
 800c61e:	9307      	str	r3, [sp, #28]
 800c620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c624:	931a      	str	r3, [sp, #104]	; 0x68
 800c626:	4654      	mov	r4, sl
 800c628:	2205      	movs	r2, #5
 800c62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c62e:	4854      	ldr	r0, [pc, #336]	; (800c780 <_vfiprintf_r+0x220>)
 800c630:	f7f3 fe06 	bl	8000240 <memchr>
 800c634:	9a04      	ldr	r2, [sp, #16]
 800c636:	b9d8      	cbnz	r0, 800c670 <_vfiprintf_r+0x110>
 800c638:	06d1      	lsls	r1, r2, #27
 800c63a:	bf44      	itt	mi
 800c63c:	2320      	movmi	r3, #32
 800c63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c642:	0713      	lsls	r3, r2, #28
 800c644:	bf44      	itt	mi
 800c646:	232b      	movmi	r3, #43	; 0x2b
 800c648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c64c:	f89a 3000 	ldrb.w	r3, [sl]
 800c650:	2b2a      	cmp	r3, #42	; 0x2a
 800c652:	d015      	beq.n	800c680 <_vfiprintf_r+0x120>
 800c654:	9a07      	ldr	r2, [sp, #28]
 800c656:	4654      	mov	r4, sl
 800c658:	2000      	movs	r0, #0
 800c65a:	f04f 0c0a 	mov.w	ip, #10
 800c65e:	4621      	mov	r1, r4
 800c660:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c664:	3b30      	subs	r3, #48	; 0x30
 800c666:	2b09      	cmp	r3, #9
 800c668:	d94d      	bls.n	800c706 <_vfiprintf_r+0x1a6>
 800c66a:	b1b0      	cbz	r0, 800c69a <_vfiprintf_r+0x13a>
 800c66c:	9207      	str	r2, [sp, #28]
 800c66e:	e014      	b.n	800c69a <_vfiprintf_r+0x13a>
 800c670:	eba0 0308 	sub.w	r3, r0, r8
 800c674:	fa09 f303 	lsl.w	r3, r9, r3
 800c678:	4313      	orrs	r3, r2
 800c67a:	9304      	str	r3, [sp, #16]
 800c67c:	46a2      	mov	sl, r4
 800c67e:	e7d2      	b.n	800c626 <_vfiprintf_r+0xc6>
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	1d19      	adds	r1, r3, #4
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	9103      	str	r1, [sp, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	bfbb      	ittet	lt
 800c68c:	425b      	neglt	r3, r3
 800c68e:	f042 0202 	orrlt.w	r2, r2, #2
 800c692:	9307      	strge	r3, [sp, #28]
 800c694:	9307      	strlt	r3, [sp, #28]
 800c696:	bfb8      	it	lt
 800c698:	9204      	strlt	r2, [sp, #16]
 800c69a:	7823      	ldrb	r3, [r4, #0]
 800c69c:	2b2e      	cmp	r3, #46	; 0x2e
 800c69e:	d10c      	bne.n	800c6ba <_vfiprintf_r+0x15a>
 800c6a0:	7863      	ldrb	r3, [r4, #1]
 800c6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6a4:	d134      	bne.n	800c710 <_vfiprintf_r+0x1b0>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	1d1a      	adds	r2, r3, #4
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	9203      	str	r2, [sp, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	bfb8      	it	lt
 800c6b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6b6:	3402      	adds	r4, #2
 800c6b8:	9305      	str	r3, [sp, #20]
 800c6ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c790 <_vfiprintf_r+0x230>
 800c6be:	7821      	ldrb	r1, [r4, #0]
 800c6c0:	2203      	movs	r2, #3
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	f7f3 fdbc 	bl	8000240 <memchr>
 800c6c8:	b138      	cbz	r0, 800c6da <_vfiprintf_r+0x17a>
 800c6ca:	9b04      	ldr	r3, [sp, #16]
 800c6cc:	eba0 000a 	sub.w	r0, r0, sl
 800c6d0:	2240      	movs	r2, #64	; 0x40
 800c6d2:	4082      	lsls	r2, r0
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	3401      	adds	r4, #1
 800c6d8:	9304      	str	r3, [sp, #16]
 800c6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6de:	4829      	ldr	r0, [pc, #164]	; (800c784 <_vfiprintf_r+0x224>)
 800c6e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6e4:	2206      	movs	r2, #6
 800c6e6:	f7f3 fdab 	bl	8000240 <memchr>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d03f      	beq.n	800c76e <_vfiprintf_r+0x20e>
 800c6ee:	4b26      	ldr	r3, [pc, #152]	; (800c788 <_vfiprintf_r+0x228>)
 800c6f0:	bb1b      	cbnz	r3, 800c73a <_vfiprintf_r+0x1da>
 800c6f2:	9b03      	ldr	r3, [sp, #12]
 800c6f4:	3307      	adds	r3, #7
 800c6f6:	f023 0307 	bic.w	r3, r3, #7
 800c6fa:	3308      	adds	r3, #8
 800c6fc:	9303      	str	r3, [sp, #12]
 800c6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c700:	443b      	add	r3, r7
 800c702:	9309      	str	r3, [sp, #36]	; 0x24
 800c704:	e768      	b.n	800c5d8 <_vfiprintf_r+0x78>
 800c706:	fb0c 3202 	mla	r2, ip, r2, r3
 800c70a:	460c      	mov	r4, r1
 800c70c:	2001      	movs	r0, #1
 800c70e:	e7a6      	b.n	800c65e <_vfiprintf_r+0xfe>
 800c710:	2300      	movs	r3, #0
 800c712:	3401      	adds	r4, #1
 800c714:	9305      	str	r3, [sp, #20]
 800c716:	4619      	mov	r1, r3
 800c718:	f04f 0c0a 	mov.w	ip, #10
 800c71c:	4620      	mov	r0, r4
 800c71e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c722:	3a30      	subs	r2, #48	; 0x30
 800c724:	2a09      	cmp	r2, #9
 800c726:	d903      	bls.n	800c730 <_vfiprintf_r+0x1d0>
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d0c6      	beq.n	800c6ba <_vfiprintf_r+0x15a>
 800c72c:	9105      	str	r1, [sp, #20]
 800c72e:	e7c4      	b.n	800c6ba <_vfiprintf_r+0x15a>
 800c730:	fb0c 2101 	mla	r1, ip, r1, r2
 800c734:	4604      	mov	r4, r0
 800c736:	2301      	movs	r3, #1
 800c738:	e7f0      	b.n	800c71c <_vfiprintf_r+0x1bc>
 800c73a:	ab03      	add	r3, sp, #12
 800c73c:	9300      	str	r3, [sp, #0]
 800c73e:	462a      	mov	r2, r5
 800c740:	4b12      	ldr	r3, [pc, #72]	; (800c78c <_vfiprintf_r+0x22c>)
 800c742:	a904      	add	r1, sp, #16
 800c744:	4630      	mov	r0, r6
 800c746:	f7fd fdb3 	bl	800a2b0 <_printf_float>
 800c74a:	4607      	mov	r7, r0
 800c74c:	1c78      	adds	r0, r7, #1
 800c74e:	d1d6      	bne.n	800c6fe <_vfiprintf_r+0x19e>
 800c750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c752:	07d9      	lsls	r1, r3, #31
 800c754:	d405      	bmi.n	800c762 <_vfiprintf_r+0x202>
 800c756:	89ab      	ldrh	r3, [r5, #12]
 800c758:	059a      	lsls	r2, r3, #22
 800c75a:	d402      	bmi.n	800c762 <_vfiprintf_r+0x202>
 800c75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75e:	f7fe fb2b 	bl	800adb8 <__retarget_lock_release_recursive>
 800c762:	89ab      	ldrh	r3, [r5, #12]
 800c764:	065b      	lsls	r3, r3, #25
 800c766:	f53f af1d 	bmi.w	800c5a4 <_vfiprintf_r+0x44>
 800c76a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c76c:	e71c      	b.n	800c5a8 <_vfiprintf_r+0x48>
 800c76e:	ab03      	add	r3, sp, #12
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	462a      	mov	r2, r5
 800c774:	4b05      	ldr	r3, [pc, #20]	; (800c78c <_vfiprintf_r+0x22c>)
 800c776:	a904      	add	r1, sp, #16
 800c778:	4630      	mov	r0, r6
 800c77a:	f7fe f821 	bl	800a7c0 <_printf_i>
 800c77e:	e7e4      	b.n	800c74a <_vfiprintf_r+0x1ea>
 800c780:	0800d443 	.word	0x0800d443
 800c784:	0800d44d 	.word	0x0800d44d
 800c788:	0800a2b1 	.word	0x0800a2b1
 800c78c:	0800c53d 	.word	0x0800c53d
 800c790:	0800d449 	.word	0x0800d449

0800c794 <__swbuf_r>:
 800c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c796:	460e      	mov	r6, r1
 800c798:	4614      	mov	r4, r2
 800c79a:	4605      	mov	r5, r0
 800c79c:	b118      	cbz	r0, 800c7a6 <__swbuf_r+0x12>
 800c79e:	6a03      	ldr	r3, [r0, #32]
 800c7a0:	b90b      	cbnz	r3, 800c7a6 <__swbuf_r+0x12>
 800c7a2:	f7fe f9bb 	bl	800ab1c <__sinit>
 800c7a6:	69a3      	ldr	r3, [r4, #24]
 800c7a8:	60a3      	str	r3, [r4, #8]
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	071a      	lsls	r2, r3, #28
 800c7ae:	d525      	bpl.n	800c7fc <__swbuf_r+0x68>
 800c7b0:	6923      	ldr	r3, [r4, #16]
 800c7b2:	b31b      	cbz	r3, 800c7fc <__swbuf_r+0x68>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	6922      	ldr	r2, [r4, #16]
 800c7b8:	1a98      	subs	r0, r3, r2
 800c7ba:	6963      	ldr	r3, [r4, #20]
 800c7bc:	b2f6      	uxtb	r6, r6
 800c7be:	4283      	cmp	r3, r0
 800c7c0:	4637      	mov	r7, r6
 800c7c2:	dc04      	bgt.n	800c7ce <__swbuf_r+0x3a>
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	f7ff fdfc 	bl	800c3c4 <_fflush_r>
 800c7cc:	b9e0      	cbnz	r0, 800c808 <__swbuf_r+0x74>
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	60a3      	str	r3, [r4, #8]
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	6022      	str	r2, [r4, #0]
 800c7da:	701e      	strb	r6, [r3, #0]
 800c7dc:	6962      	ldr	r2, [r4, #20]
 800c7de:	1c43      	adds	r3, r0, #1
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d004      	beq.n	800c7ee <__swbuf_r+0x5a>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	07db      	lsls	r3, r3, #31
 800c7e8:	d506      	bpl.n	800c7f8 <__swbuf_r+0x64>
 800c7ea:	2e0a      	cmp	r6, #10
 800c7ec:	d104      	bne.n	800c7f8 <__swbuf_r+0x64>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f7ff fde7 	bl	800c3c4 <_fflush_r>
 800c7f6:	b938      	cbnz	r0, 800c808 <__swbuf_r+0x74>
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	4628      	mov	r0, r5
 800c800:	f000 f806 	bl	800c810 <__swsetup_r>
 800c804:	2800      	cmp	r0, #0
 800c806:	d0d5      	beq.n	800c7b4 <__swbuf_r+0x20>
 800c808:	f04f 37ff 	mov.w	r7, #4294967295
 800c80c:	e7f4      	b.n	800c7f8 <__swbuf_r+0x64>
	...

0800c810 <__swsetup_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4b2a      	ldr	r3, [pc, #168]	; (800c8bc <__swsetup_r+0xac>)
 800c814:	4605      	mov	r5, r0
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	460c      	mov	r4, r1
 800c81a:	b118      	cbz	r0, 800c824 <__swsetup_r+0x14>
 800c81c:	6a03      	ldr	r3, [r0, #32]
 800c81e:	b90b      	cbnz	r3, 800c824 <__swsetup_r+0x14>
 800c820:	f7fe f97c 	bl	800ab1c <__sinit>
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c82a:	0718      	lsls	r0, r3, #28
 800c82c:	d422      	bmi.n	800c874 <__swsetup_r+0x64>
 800c82e:	06d9      	lsls	r1, r3, #27
 800c830:	d407      	bmi.n	800c842 <__swsetup_r+0x32>
 800c832:	2309      	movs	r3, #9
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295
 800c840:	e034      	b.n	800c8ac <__swsetup_r+0x9c>
 800c842:	0758      	lsls	r0, r3, #29
 800c844:	d512      	bpl.n	800c86c <__swsetup_r+0x5c>
 800c846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c848:	b141      	cbz	r1, 800c85c <__swsetup_r+0x4c>
 800c84a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c84e:	4299      	cmp	r1, r3
 800c850:	d002      	beq.n	800c858 <__swsetup_r+0x48>
 800c852:	4628      	mov	r0, r5
 800c854:	f7ff f8b4 	bl	800b9c0 <_free_r>
 800c858:	2300      	movs	r3, #0
 800c85a:	6363      	str	r3, [r4, #52]	; 0x34
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c862:	81a3      	strh	r3, [r4, #12]
 800c864:	2300      	movs	r3, #0
 800c866:	6063      	str	r3, [r4, #4]
 800c868:	6923      	ldr	r3, [r4, #16]
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	f043 0308 	orr.w	r3, r3, #8
 800c872:	81a3      	strh	r3, [r4, #12]
 800c874:	6923      	ldr	r3, [r4, #16]
 800c876:	b94b      	cbnz	r3, 800c88c <__swsetup_r+0x7c>
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c87e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c882:	d003      	beq.n	800c88c <__swsetup_r+0x7c>
 800c884:	4621      	mov	r1, r4
 800c886:	4628      	mov	r0, r5
 800c888:	f000 f884 	bl	800c994 <__smakebuf_r>
 800c88c:	89a0      	ldrh	r0, [r4, #12]
 800c88e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c892:	f010 0301 	ands.w	r3, r0, #1
 800c896:	d00a      	beq.n	800c8ae <__swsetup_r+0x9e>
 800c898:	2300      	movs	r3, #0
 800c89a:	60a3      	str	r3, [r4, #8]
 800c89c:	6963      	ldr	r3, [r4, #20]
 800c89e:	425b      	negs	r3, r3
 800c8a0:	61a3      	str	r3, [r4, #24]
 800c8a2:	6923      	ldr	r3, [r4, #16]
 800c8a4:	b943      	cbnz	r3, 800c8b8 <__swsetup_r+0xa8>
 800c8a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8aa:	d1c4      	bne.n	800c836 <__swsetup_r+0x26>
 800c8ac:	bd38      	pop	{r3, r4, r5, pc}
 800c8ae:	0781      	lsls	r1, r0, #30
 800c8b0:	bf58      	it	pl
 800c8b2:	6963      	ldrpl	r3, [r4, #20]
 800c8b4:	60a3      	str	r3, [r4, #8]
 800c8b6:	e7f4      	b.n	800c8a2 <__swsetup_r+0x92>
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	e7f7      	b.n	800c8ac <__swsetup_r+0x9c>
 800c8bc:	20000084 	.word	0x20000084

0800c8c0 <_raise_r>:
 800c8c0:	291f      	cmp	r1, #31
 800c8c2:	b538      	push	{r3, r4, r5, lr}
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	460d      	mov	r5, r1
 800c8c8:	d904      	bls.n	800c8d4 <_raise_r+0x14>
 800c8ca:	2316      	movs	r3, #22
 800c8cc:	6003      	str	r3, [r0, #0]
 800c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c8d6:	b112      	cbz	r2, 800c8de <_raise_r+0x1e>
 800c8d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8dc:	b94b      	cbnz	r3, 800c8f2 <_raise_r+0x32>
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f000 f830 	bl	800c944 <_getpid_r>
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ee:	f000 b817 	b.w	800c920 <_kill_r>
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d00a      	beq.n	800c90c <_raise_r+0x4c>
 800c8f6:	1c59      	adds	r1, r3, #1
 800c8f8:	d103      	bne.n	800c902 <_raise_r+0x42>
 800c8fa:	2316      	movs	r3, #22
 800c8fc:	6003      	str	r3, [r0, #0]
 800c8fe:	2001      	movs	r0, #1
 800c900:	e7e7      	b.n	800c8d2 <_raise_r+0x12>
 800c902:	2400      	movs	r4, #0
 800c904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c908:	4628      	mov	r0, r5
 800c90a:	4798      	blx	r3
 800c90c:	2000      	movs	r0, #0
 800c90e:	e7e0      	b.n	800c8d2 <_raise_r+0x12>

0800c910 <raise>:
 800c910:	4b02      	ldr	r3, [pc, #8]	; (800c91c <raise+0xc>)
 800c912:	4601      	mov	r1, r0
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	f7ff bfd3 	b.w	800c8c0 <_raise_r>
 800c91a:	bf00      	nop
 800c91c:	20000084 	.word	0x20000084

0800c920 <_kill_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4d07      	ldr	r5, [pc, #28]	; (800c940 <_kill_r+0x20>)
 800c924:	2300      	movs	r3, #0
 800c926:	4604      	mov	r4, r0
 800c928:	4608      	mov	r0, r1
 800c92a:	4611      	mov	r1, r2
 800c92c:	602b      	str	r3, [r5, #0]
 800c92e:	f7f5 fe4b 	bl	80025c8 <_kill>
 800c932:	1c43      	adds	r3, r0, #1
 800c934:	d102      	bne.n	800c93c <_kill_r+0x1c>
 800c936:	682b      	ldr	r3, [r5, #0]
 800c938:	b103      	cbz	r3, 800c93c <_kill_r+0x1c>
 800c93a:	6023      	str	r3, [r4, #0]
 800c93c:	bd38      	pop	{r3, r4, r5, pc}
 800c93e:	bf00      	nop
 800c940:	200054f0 	.word	0x200054f0

0800c944 <_getpid_r>:
 800c944:	f7f5 be38 	b.w	80025b8 <_getpid>

0800c948 <__swhatbuf_r>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	460c      	mov	r4, r1
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	2900      	cmp	r1, #0
 800c952:	b096      	sub	sp, #88	; 0x58
 800c954:	4615      	mov	r5, r2
 800c956:	461e      	mov	r6, r3
 800c958:	da0d      	bge.n	800c976 <__swhatbuf_r+0x2e>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c960:	f04f 0100 	mov.w	r1, #0
 800c964:	bf0c      	ite	eq
 800c966:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c96a:	2340      	movne	r3, #64	; 0x40
 800c96c:	2000      	movs	r0, #0
 800c96e:	6031      	str	r1, [r6, #0]
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	b016      	add	sp, #88	; 0x58
 800c974:	bd70      	pop	{r4, r5, r6, pc}
 800c976:	466a      	mov	r2, sp
 800c978:	f000 f848 	bl	800ca0c <_fstat_r>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	dbec      	blt.n	800c95a <__swhatbuf_r+0x12>
 800c980:	9901      	ldr	r1, [sp, #4]
 800c982:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c986:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c98a:	4259      	negs	r1, r3
 800c98c:	4159      	adcs	r1, r3
 800c98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c992:	e7eb      	b.n	800c96c <__swhatbuf_r+0x24>

0800c994 <__smakebuf_r>:
 800c994:	898b      	ldrh	r3, [r1, #12]
 800c996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c998:	079d      	lsls	r5, r3, #30
 800c99a:	4606      	mov	r6, r0
 800c99c:	460c      	mov	r4, r1
 800c99e:	d507      	bpl.n	800c9b0 <__smakebuf_r+0x1c>
 800c9a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	6123      	str	r3, [r4, #16]
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	6163      	str	r3, [r4, #20]
 800c9ac:	b002      	add	sp, #8
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	ab01      	add	r3, sp, #4
 800c9b2:	466a      	mov	r2, sp
 800c9b4:	f7ff ffc8 	bl	800c948 <__swhatbuf_r>
 800c9b8:	9900      	ldr	r1, [sp, #0]
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff f873 	bl	800baa8 <_malloc_r>
 800c9c2:	b948      	cbnz	r0, 800c9d8 <__smakebuf_r+0x44>
 800c9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c8:	059a      	lsls	r2, r3, #22
 800c9ca:	d4ef      	bmi.n	800c9ac <__smakebuf_r+0x18>
 800c9cc:	f023 0303 	bic.w	r3, r3, #3
 800c9d0:	f043 0302 	orr.w	r3, r3, #2
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	e7e3      	b.n	800c9a0 <__smakebuf_r+0xc>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	6020      	str	r0, [r4, #0]
 800c9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	6163      	str	r3, [r4, #20]
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	6120      	str	r0, [r4, #16]
 800c9ea:	b15b      	cbz	r3, 800ca04 <__smakebuf_r+0x70>
 800c9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f000 f81d 	bl	800ca30 <_isatty_r>
 800c9f6:	b128      	cbz	r0, 800ca04 <__smakebuf_r+0x70>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f023 0303 	bic.w	r3, r3, #3
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	81a3      	strh	r3, [r4, #12]
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	431d      	orrs	r5, r3
 800ca08:	81a5      	strh	r5, [r4, #12]
 800ca0a:	e7cf      	b.n	800c9ac <__smakebuf_r+0x18>

0800ca0c <_fstat_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4d07      	ldr	r5, [pc, #28]	; (800ca2c <_fstat_r+0x20>)
 800ca10:	2300      	movs	r3, #0
 800ca12:	4604      	mov	r4, r0
 800ca14:	4608      	mov	r0, r1
 800ca16:	4611      	mov	r1, r2
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	f7f5 fe34 	bl	8002686 <_fstat>
 800ca1e:	1c43      	adds	r3, r0, #1
 800ca20:	d102      	bne.n	800ca28 <_fstat_r+0x1c>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	b103      	cbz	r3, 800ca28 <_fstat_r+0x1c>
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	bd38      	pop	{r3, r4, r5, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200054f0 	.word	0x200054f0

0800ca30 <_isatty_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	4d06      	ldr	r5, [pc, #24]	; (800ca4c <_isatty_r+0x1c>)
 800ca34:	2300      	movs	r3, #0
 800ca36:	4604      	mov	r4, r0
 800ca38:	4608      	mov	r0, r1
 800ca3a:	602b      	str	r3, [r5, #0]
 800ca3c:	f7f5 fe33 	bl	80026a6 <_isatty>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d102      	bne.n	800ca4a <_isatty_r+0x1a>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	b103      	cbz	r3, 800ca4a <_isatty_r+0x1a>
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}
 800ca4c:	200054f0 	.word	0x200054f0

0800ca50 <checkint>:
 800ca50:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca54:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	b570      	push	{r4, r5, r6, lr}
 800ca5c:	dd2a      	ble.n	800cab4 <checkint+0x64>
 800ca5e:	f240 4333 	movw	r3, #1075	; 0x433
 800ca62:	429a      	cmp	r2, r3
 800ca64:	dc24      	bgt.n	800cab0 <checkint+0x60>
 800ca66:	1a9b      	subs	r3, r3, r2
 800ca68:	f1a3 0620 	sub.w	r6, r3, #32
 800ca6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca70:	fa02 f403 	lsl.w	r4, r2, r3
 800ca74:	fa02 f606 	lsl.w	r6, r2, r6
 800ca78:	f1c3 0520 	rsb	r5, r3, #32
 800ca7c:	fa22 f505 	lsr.w	r5, r2, r5
 800ca80:	4334      	orrs	r4, r6
 800ca82:	432c      	orrs	r4, r5
 800ca84:	409a      	lsls	r2, r3
 800ca86:	ea20 0202 	bic.w	r2, r0, r2
 800ca8a:	ea21 0404 	bic.w	r4, r1, r4
 800ca8e:	4322      	orrs	r2, r4
 800ca90:	f1a3 0420 	sub.w	r4, r3, #32
 800ca94:	f1c3 0220 	rsb	r2, r3, #32
 800ca98:	d10c      	bne.n	800cab4 <checkint+0x64>
 800ca9a:	40d8      	lsrs	r0, r3
 800ca9c:	fa01 f302 	lsl.w	r3, r1, r2
 800caa0:	4318      	orrs	r0, r3
 800caa2:	40e1      	lsrs	r1, r4
 800caa4:	4308      	orrs	r0, r1
 800caa6:	f000 0001 	and.w	r0, r0, #1
 800caaa:	f1d0 0002 	rsbs	r0, r0, #2
 800caae:	bd70      	pop	{r4, r5, r6, pc}
 800cab0:	2002      	movs	r0, #2
 800cab2:	e7fc      	b.n	800caae <checkint+0x5e>
 800cab4:	2000      	movs	r0, #0
 800cab6:	e7fa      	b.n	800caae <checkint+0x5e>

0800cab8 <pow>:
 800cab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	ee10 4a90 	vmov	r4, s1
 800cac0:	ed2d 8b0a 	vpush	{d8-d12}
 800cac4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800cac8:	ee11 aa90 	vmov	sl, s3
 800cacc:	f108 32ff 	add.w	r2, r8, #4294967295
 800cad0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800cad4:	429a      	cmp	r2, r3
 800cad6:	ee10 5a10 	vmov	r5, s0
 800cada:	ee11 0a10 	vmov	r0, s2
 800cade:	b087      	sub	sp, #28
 800cae0:	46c4      	mov	ip, r8
 800cae2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800cae6:	d806      	bhi.n	800caf6 <pow+0x3e>
 800cae8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800caec:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800caf0:	2b7f      	cmp	r3, #127	; 0x7f
 800caf2:	f240 8156 	bls.w	800cda2 <pow+0x2ea>
 800caf6:	1802      	adds	r2, r0, r0
 800caf8:	eb4a 010a 	adc.w	r1, sl, sl
 800cafc:	f06f 0b01 	mvn.w	fp, #1
 800cb00:	1e57      	subs	r7, r2, #1
 800cb02:	f141 33ff 	adc.w	r3, r1, #4294967295
 800cb06:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800cb0a:	45bb      	cmp	fp, r7
 800cb0c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800cb10:	d242      	bcs.n	800cb98 <pow+0xe0>
 800cb12:	ea52 0301 	orrs.w	r3, r2, r1
 800cb16:	f04f 0300 	mov.w	r3, #0
 800cb1a:	d10c      	bne.n	800cb36 <pow+0x7e>
 800cb1c:	196d      	adds	r5, r5, r5
 800cb1e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800cb22:	4164      	adcs	r4, r4
 800cb24:	42ab      	cmp	r3, r5
 800cb26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb2a:	41a3      	sbcs	r3, r4
 800cb2c:	f0c0 808f 	bcc.w	800cc4e <pow+0x196>
 800cb30:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cb34:	e02b      	b.n	800cb8e <pow+0xd6>
 800cb36:	4ed4      	ldr	r6, [pc, #848]	; (800ce88 <pow+0x3d0>)
 800cb38:	42b4      	cmp	r4, r6
 800cb3a:	bf08      	it	eq
 800cb3c:	429d      	cmpeq	r5, r3
 800cb3e:	d109      	bne.n	800cb54 <pow+0x9c>
 800cb40:	1800      	adds	r0, r0, r0
 800cb42:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800cb46:	eb4a 0a0a 	adc.w	sl, sl, sl
 800cb4a:	4283      	cmp	r3, r0
 800cb4c:	4bcf      	ldr	r3, [pc, #828]	; (800ce8c <pow+0x3d4>)
 800cb4e:	eb73 030a 	sbcs.w	r3, r3, sl
 800cb52:	e7eb      	b.n	800cb2c <pow+0x74>
 800cb54:	196d      	adds	r5, r5, r5
 800cb56:	48ce      	ldr	r0, [pc, #824]	; (800ce90 <pow+0x3d8>)
 800cb58:	4164      	adcs	r4, r4
 800cb5a:	42ab      	cmp	r3, r5
 800cb5c:	eb70 0604 	sbcs.w	r6, r0, r4
 800cb60:	d375      	bcc.n	800cc4e <pow+0x196>
 800cb62:	4281      	cmp	r1, r0
 800cb64:	bf08      	it	eq
 800cb66:	429a      	cmpeq	r2, r3
 800cb68:	d171      	bne.n	800cc4e <pow+0x196>
 800cb6a:	4aca      	ldr	r2, [pc, #808]	; (800ce94 <pow+0x3dc>)
 800cb6c:	4294      	cmp	r4, r2
 800cb6e:	bf08      	it	eq
 800cb70:	429d      	cmpeq	r5, r3
 800cb72:	d0dd      	beq.n	800cb30 <pow+0x78>
 800cb74:	4294      	cmp	r4, r2
 800cb76:	ea6f 0a0a 	mvn.w	sl, sl
 800cb7a:	bf34      	ite	cc
 800cb7c:	2400      	movcc	r4, #0
 800cb7e:	2401      	movcs	r4, #1
 800cb80:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800cb84:	4554      	cmp	r4, sl
 800cb86:	f040 81dc 	bne.w	800cf42 <pow+0x48a>
 800cb8a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800cb8e:	b007      	add	sp, #28
 800cb90:	ecbd 8b0a 	vpop	{d8-d12}
 800cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb98:	196f      	adds	r7, r5, r5
 800cb9a:	eb44 0904 	adc.w	r9, r4, r4
 800cb9e:	1e7a      	subs	r2, r7, #1
 800cba0:	f169 0300 	sbc.w	r3, r9, #0
 800cba4:	4593      	cmp	fp, r2
 800cba6:	eb7e 0303 	sbcs.w	r3, lr, r3
 800cbaa:	d225      	bcs.n	800cbf8 <pow+0x140>
 800cbac:	ee20 0b00 	vmul.f64	d0, d0, d0
 800cbb0:	2c00      	cmp	r4, #0
 800cbb2:	da13      	bge.n	800cbdc <pow+0x124>
 800cbb4:	4651      	mov	r1, sl
 800cbb6:	f7ff ff4b 	bl	800ca50 <checkint>
 800cbba:	2801      	cmp	r0, #1
 800cbbc:	d10e      	bne.n	800cbdc <pow+0x124>
 800cbbe:	eeb1 0b40 	vneg.f64	d0, d0
 800cbc2:	ea57 0909 	orrs.w	r9, r7, r9
 800cbc6:	d10b      	bne.n	800cbe0 <pow+0x128>
 800cbc8:	f1ba 0f00 	cmp.w	sl, #0
 800cbcc:	dadf      	bge.n	800cb8e <pow+0xd6>
 800cbce:	b007      	add	sp, #28
 800cbd0:	ecbd 8b0a 	vpop	{d8-d12}
 800cbd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd8:	f000 b9ea 	b.w	800cfb0 <__math_divzero>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	e7f0      	b.n	800cbc2 <pow+0x10a>
 800cbe0:	f1ba 0f00 	cmp.w	sl, #0
 800cbe4:	dad3      	bge.n	800cb8e <pow+0xd6>
 800cbe6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cbea:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cbee:	ed8d 7b00 	vstr	d7, [sp]
 800cbf2:	ed9d 0b00 	vldr	d0, [sp]
 800cbf6:	e7ca      	b.n	800cb8e <pow+0xd6>
 800cbf8:	2c00      	cmp	r4, #0
 800cbfa:	da2b      	bge.n	800cc54 <pow+0x19c>
 800cbfc:	4651      	mov	r1, sl
 800cbfe:	f7ff ff27 	bl	800ca50 <checkint>
 800cc02:	b930      	cbnz	r0, 800cc12 <pow+0x15a>
 800cc04:	b007      	add	sp, #28
 800cc06:	ecbd 8b0a 	vpop	{d8-d12}
 800cc0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0e:	f000 b9e7 	b.w	800cfe0 <__math_invalid>
 800cc12:	1e41      	subs	r1, r0, #1
 800cc14:	4248      	negs	r0, r1
 800cc16:	4148      	adcs	r0, r1
 800cc18:	0480      	lsls	r0, r0, #18
 800cc1a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cc1e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800cc22:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800cc26:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800cc2a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc2c:	d92d      	bls.n	800cc8a <pow+0x1d2>
 800cc2e:	4b96      	ldr	r3, [pc, #600]	; (800ce88 <pow+0x3d0>)
 800cc30:	2000      	movs	r0, #0
 800cc32:	429c      	cmp	r4, r3
 800cc34:	bf08      	it	eq
 800cc36:	4285      	cmpeq	r5, r0
 800cc38:	f43f af7a 	beq.w	800cb30 <pow+0x78>
 800cc3c:	f240 31bd 	movw	r1, #957	; 0x3bd
 800cc40:	428a      	cmp	r2, r1
 800cc42:	d80c      	bhi.n	800cc5e <pow+0x1a6>
 800cc44:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cc48:	42a8      	cmp	r0, r5
 800cc4a:	41a3      	sbcs	r3, r4
 800cc4c:	d204      	bcs.n	800cc58 <pow+0x1a0>
 800cc4e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800cc52:	e79c      	b.n	800cb8e <pow+0xd6>
 800cc54:	2000      	movs	r0, #0
 800cc56:	e7e4      	b.n	800cc22 <pow+0x16a>
 800cc58:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cc5c:	e797      	b.n	800cb8e <pow+0xd6>
 800cc5e:	2d01      	cmp	r5, #1
 800cc60:	eb74 0303 	sbcs.w	r3, r4, r3
 800cc64:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cc68:	bf34      	ite	cc
 800cc6a:	2301      	movcc	r3, #1
 800cc6c:	2300      	movcs	r3, #0
 800cc6e:	4296      	cmp	r6, r2
 800cc70:	bf8c      	ite	hi
 800cc72:	2600      	movhi	r6, #0
 800cc74:	2601      	movls	r6, #1
 800cc76:	42b3      	cmp	r3, r6
 800cc78:	f000 809b 	beq.w	800cdb2 <pow+0x2fa>
 800cc7c:	b007      	add	sp, #28
 800cc7e:	ecbd 8b0a 	vpop	{d8-d12}
 800cc82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc86:	f000 b98b 	b.w	800cfa0 <__math_oflow>
 800cc8a:	f1bc 0f00 	cmp.w	ip, #0
 800cc8e:	d10b      	bne.n	800cca8 <pow+0x1f0>
 800cc90:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800ce78 <pow+0x3c0>
 800cc94:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cc98:	ec53 2b17 	vmov	r2, r3, d7
 800cc9c:	ee17 5a10 	vmov	r5, s14
 800cca0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800cca4:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800cca8:	4b7b      	ldr	r3, [pc, #492]	; (800ce98 <pow+0x3e0>)
 800ccaa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ccae:	4423      	add	r3, r4
 800ccb0:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800ccb4:	1519      	asrs	r1, r3, #20
 800ccb6:	0d1b      	lsrs	r3, r3, #20
 800ccb8:	051b      	lsls	r3, r3, #20
 800ccba:	1ae7      	subs	r7, r4, r3
 800ccbc:	4b77      	ldr	r3, [pc, #476]	; (800ce9c <pow+0x3e4>)
 800ccbe:	ee03 1a10 	vmov	s6, r1
 800ccc2:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800ccc6:	1e2e      	subs	r6, r5, #0
 800ccc8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800cccc:	ec47 6b15 	vmov	d5, r6, r7
 800ccd0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800ccd4:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ccd8:	ed93 7b00 	vldr	d7, [r3]
 800ccdc:	ed93 5b02 	vldr	d5, [r3, #8]
 800cce0:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800cce4:	eea3 2b07 	vfma.f64	d2, d3, d7
 800cce8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800ccec:	ee36 4b02 	vadd.f64	d4, d6, d2
 800ccf0:	ee32 2b44 	vsub.f64	d2, d2, d4
 800ccf4:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ccf8:	ed93 5b04 	vldr	d5, [r3, #16]
 800ccfc:	ee32 2b06 	vadd.f64	d2, d2, d6
 800cd00:	ee37 7b02 	vadd.f64	d7, d7, d2
 800cd04:	ee26 5b05 	vmul.f64	d5, d6, d5
 800cd08:	ee26 0b05 	vmul.f64	d0, d6, d5
 800cd0c:	ee34 8b00 	vadd.f64	d8, d4, d0
 800cd10:	eeb0 9b40 	vmov.f64	d9, d0
 800cd14:	ee34 4b48 	vsub.f64	d4, d4, d8
 800cd18:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800cd1c:	ee34 ab00 	vadd.f64	d10, d4, d0
 800cd20:	ed93 5b06 	vldr	d5, [r3, #24]
 800cd24:	ee26 bb00 	vmul.f64	d11, d6, d0
 800cd28:	ee37 7b09 	vadd.f64	d7, d7, d9
 800cd2c:	ed93 4b08 	vldr	d4, [r3, #32]
 800cd30:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800cd34:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800cd38:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cd3c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800cd40:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800cd44:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cd48:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800cd4c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800cd50:	eea0 4b03 	vfma.f64	d4, d0, d3
 800cd54:	eea0 5b04 	vfma.f64	d5, d0, d4
 800cd58:	eeab 7b05 	vfma.f64	d7, d11, d5
 800cd5c:	ee38 4b07 	vadd.f64	d4, d8, d7
 800cd60:	ee21 6b04 	vmul.f64	d6, d1, d4
 800cd64:	ee16 3a90 	vmov	r3, s13
 800cd68:	eeb0 5b46 	vmov.f64	d5, d6
 800cd6c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800cd70:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800cd74:	18b2      	adds	r2, r6, r2
 800cd76:	2a3e      	cmp	r2, #62	; 0x3e
 800cd78:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800cd7c:	ee38 8b44 	vsub.f64	d8, d8, d4
 800cd80:	ee38 8b07 	vadd.f64	d8, d8, d7
 800cd84:	eea1 5b08 	vfma.f64	d5, d1, d8
 800cd88:	d91b      	bls.n	800cdc2 <pow+0x30a>
 800cd8a:	2a00      	cmp	r2, #0
 800cd8c:	da0b      	bge.n	800cda6 <pow+0x2ee>
 800cd8e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cd92:	ee36 0b00 	vadd.f64	d0, d6, d0
 800cd96:	2800      	cmp	r0, #0
 800cd98:	f43f aef9 	beq.w	800cb8e <pow+0xd6>
 800cd9c:	eeb1 0b40 	vneg.f64	d0, d0
 800cda0:	e6f5      	b.n	800cb8e <pow+0xd6>
 800cda2:	2000      	movs	r0, #0
 800cda4:	e780      	b.n	800cca8 <pow+0x1f0>
 800cda6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800cdaa:	d909      	bls.n	800cdc0 <pow+0x308>
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f6bf af65 	bge.w	800cc7c <pow+0x1c4>
 800cdb2:	b007      	add	sp, #28
 800cdb4:	ecbd 8b0a 	vpop	{d8-d12}
 800cdb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbc:	f000 b8e8 	b.w	800cf90 <__math_uflow>
 800cdc0:	2600      	movs	r6, #0
 800cdc2:	4937      	ldr	r1, [pc, #220]	; (800cea0 <pow+0x3e8>)
 800cdc4:	ed91 4b02 	vldr	d4, [r1, #8]
 800cdc8:	ed91 3b00 	vldr	d3, [r1]
 800cdcc:	eeb0 7b44 	vmov.f64	d7, d4
 800cdd0:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cdd4:	ee17 5a10 	vmov	r5, s14
 800cdd8:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cddc:	ed91 4b04 	vldr	d4, [r1, #16]
 800cde0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800cde4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cde8:	ed91 4b06 	vldr	d4, [r1, #24]
 800cdec:	18dc      	adds	r4, r3, r3
 800cdee:	f104 030f 	add.w	r3, r4, #15
 800cdf2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800cdf6:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cdfa:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800cdfe:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ce02:	ee25 6b05 	vmul.f64	d6, d5, d5
 800ce06:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800ce0a:	ed91 4b08 	vldr	d4, [r1, #32]
 800ce0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ce12:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800ce16:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ce1a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800ce1e:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ce22:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ce26:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800ce2a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800ce2e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800ce32:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ce36:	1940      	adds	r0, r0, r5
 800ce38:	2700      	movs	r7, #0
 800ce3a:	eb17 020c 	adds.w	r2, r7, ip
 800ce3e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800ce42:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ce46:	2e00      	cmp	r6, #0
 800ce48:	d176      	bne.n	800cf38 <pow+0x480>
 800ce4a:	42bd      	cmp	r5, r7
 800ce4c:	db2a      	blt.n	800cea4 <pow+0x3ec>
 800ce4e:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800ce52:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800ce56:	4610      	mov	r0, r2
 800ce58:	ec41 0b10 	vmov	d0, r0, r1
 800ce5c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ce60:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800ce80 <pow+0x3c8>
 800ce64:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ce68:	b007      	add	sp, #28
 800ce6a:	ecbd 8b0a 	vpop	{d8-d12}
 800ce6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce72:	f000 b8cd 	b.w	800d010 <__math_check_oflow>
 800ce76:	bf00      	nop
 800ce78:	00000000 	.word	0x00000000
 800ce7c:	43300000 	.word	0x43300000
 800ce80:	00000000 	.word	0x00000000
 800ce84:	7f000000 	.word	0x7f000000
 800ce88:	3ff00000 	.word	0x3ff00000
 800ce8c:	fff00000 	.word	0xfff00000
 800ce90:	ffe00000 	.word	0xffe00000
 800ce94:	7fe00000 	.word	0x7fe00000
 800ce98:	c0196aab 	.word	0xc0196aab
 800ce9c:	0800d458 	.word	0x0800d458
 800cea0:	0800e4a0 	.word	0x0800e4a0
 800cea4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800cea8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800ceac:	4610      	mov	r0, r2
 800ceae:	ec41 0b15 	vmov	d5, r0, r1
 800ceb2:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800ceb6:	ee27 6b05 	vmul.f64	d6, d7, d5
 800ceba:	ee35 7b06 	vadd.f64	d7, d5, d6
 800cebe:	eeb0 4bc7 	vabs.f64	d4, d7
 800cec2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800cec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceca:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800cf48 <pow+0x490>
 800cece:	d52a      	bpl.n	800cf26 <pow+0x46e>
 800ced0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ced4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ced8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cedc:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cee0:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800cee4:	bf58      	it	pl
 800cee6:	eeb0 4b43 	vmovpl.f64	d4, d3
 800ceea:	ee37 3b04 	vadd.f64	d3, d7, d4
 800ceee:	ee34 6b43 	vsub.f64	d6, d4, d3
 800cef2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cef6:	ee36 6b05 	vadd.f64	d6, d6, d5
 800cefa:	ee36 6b03 	vadd.f64	d6, d6, d3
 800cefe:	ee36 7b44 	vsub.f64	d7, d6, d4
 800cf02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0a:	d104      	bne.n	800cf16 <pow+0x45e>
 800cf0c:	4632      	mov	r2, r6
 800cf0e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800cf12:	ec43 2b17 	vmov	d7, r2, r3
 800cf16:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cf1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cf1e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800cf22:	ed8d 6b04 	vstr	d6, [sp, #16]
 800cf26:	ee27 0b00 	vmul.f64	d0, d7, d0
 800cf2a:	b007      	add	sp, #28
 800cf2c:	ecbd 8b0a 	vpop	{d8-d12}
 800cf30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	f000 b863 	b.w	800cffe <__math_check_uflow>
 800cf38:	ec43 2b10 	vmov	d0, r2, r3
 800cf3c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cf40:	e625      	b.n	800cb8e <pow+0xd6>
 800cf42:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800cf50 <pow+0x498>
 800cf46:	e622      	b.n	800cb8e <pow+0xd6>
 800cf48:	00000000 	.word	0x00000000
 800cf4c:	00100000 	.word	0x00100000
	...

0800cf58 <with_errno>:
 800cf58:	b513      	push	{r0, r1, r4, lr}
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	ed8d 0b00 	vstr	d0, [sp]
 800cf60:	f7fd fefe 	bl	800ad60 <__errno>
 800cf64:	ed9d 0b00 	vldr	d0, [sp]
 800cf68:	6004      	str	r4, [r0, #0]
 800cf6a:	b002      	add	sp, #8
 800cf6c:	bd10      	pop	{r4, pc}

0800cf6e <xflow>:
 800cf6e:	b082      	sub	sp, #8
 800cf70:	b158      	cbz	r0, 800cf8a <xflow+0x1c>
 800cf72:	eeb1 7b40 	vneg.f64	d7, d0
 800cf76:	ed8d 7b00 	vstr	d7, [sp]
 800cf7a:	ed9d 7b00 	vldr	d7, [sp]
 800cf7e:	2022      	movs	r0, #34	; 0x22
 800cf80:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cf84:	b002      	add	sp, #8
 800cf86:	f7ff bfe7 	b.w	800cf58 <with_errno>
 800cf8a:	eeb0 7b40 	vmov.f64	d7, d0
 800cf8e:	e7f2      	b.n	800cf76 <xflow+0x8>

0800cf90 <__math_uflow>:
 800cf90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf98 <__math_uflow+0x8>
 800cf94:	f7ff bfeb 	b.w	800cf6e <xflow>
 800cf98:	00000000 	.word	0x00000000
 800cf9c:	10000000 	.word	0x10000000

0800cfa0 <__math_oflow>:
 800cfa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfa8 <__math_oflow+0x8>
 800cfa4:	f7ff bfe3 	b.w	800cf6e <xflow>
 800cfa8:	00000000 	.word	0x00000000
 800cfac:	70000000 	.word	0x70000000

0800cfb0 <__math_divzero>:
 800cfb0:	b082      	sub	sp, #8
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cfb8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800cfbc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800cfc0:	ed8d 7b00 	vstr	d7, [sp]
 800cfc4:	ed9d 0b00 	vldr	d0, [sp]
 800cfc8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800cfd8 <__math_divzero+0x28>
 800cfcc:	2022      	movs	r0, #34	; 0x22
 800cfce:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800cfd2:	b002      	add	sp, #8
 800cfd4:	f7ff bfc0 	b.w	800cf58 <with_errno>
	...

0800cfe0 <__math_invalid>:
 800cfe0:	eeb0 7b40 	vmov.f64	d7, d0
 800cfe4:	eeb4 7b47 	vcmp.f64	d7, d7
 800cfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfec:	ee30 6b40 	vsub.f64	d6, d0, d0
 800cff0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800cff4:	d602      	bvs.n	800cffc <__math_invalid+0x1c>
 800cff6:	2021      	movs	r0, #33	; 0x21
 800cff8:	f7ff bfae 	b.w	800cf58 <with_errno>
 800cffc:	4770      	bx	lr

0800cffe <__math_check_uflow>:
 800cffe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	d102      	bne.n	800d00e <__math_check_uflow+0x10>
 800d008:	2022      	movs	r0, #34	; 0x22
 800d00a:	f7ff bfa5 	b.w	800cf58 <with_errno>
 800d00e:	4770      	bx	lr

0800d010 <__math_check_oflow>:
 800d010:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d030 <__math_check_oflow+0x20>
 800d014:	eeb0 7bc0 	vabs.f64	d7, d0
 800d018:	eeb4 7b46 	vcmp.f64	d7, d6
 800d01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d020:	dd02      	ble.n	800d028 <__math_check_oflow+0x18>
 800d022:	2022      	movs	r0, #34	; 0x22
 800d024:	f7ff bf98 	b.w	800cf58 <with_errno>
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	f3af 8000 	nop.w
 800d030:	ffffffff 	.word	0xffffffff
 800d034:	7fefffff 	.word	0x7fefffff

0800d038 <_init>:
 800d038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03a:	bf00      	nop
 800d03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d03e:	bc08      	pop	{r3}
 800d040:	469e      	mov	lr, r3
 800d042:	4770      	bx	lr

0800d044 <_fini>:
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d046:	bf00      	nop
 800d048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04a:	bc08      	pop	{r3}
 800d04c:	469e      	mov	lr, r3
 800d04e:	4770      	bx	lr
