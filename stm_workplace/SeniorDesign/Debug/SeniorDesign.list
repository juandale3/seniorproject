
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009348  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08009548  08009548  00019548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b4c  08009b4c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b54  08009b54  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000495c  200001ec  08009d48  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b48  08009d48  00024b48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020684  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046b4  00000000  00000000  000408e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  00044f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140d  00000000  00000000  00046990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c7f6  00000000  00000000  00047d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021139  00000000  00000000  00074593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110cba  00000000  00000000  000956cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bbc  00000000  00000000  001a6388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001adf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	08009530 	.word	0x08009530

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	08009530 	.word	0x08009530

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_9;
 8000602:	2309      	movs	r3, #9
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 fbd3 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f000 fd86 	bl	8001130 <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <setFlowRate>:
//	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
//
//	return outputVoltage / amp;
//
//}
float setFlowRate(uint8_t targetFlowRate){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	// returns DAC Voltage output
	return ((float)targetFlowRate * scalingFactor + (float)referenceVolt)/amp;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000644:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000674 <setFlowRate+0x44>
 8000648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800064c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000678 <setFlowRate+0x48>
 8000650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000658:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800067c <setFlowRate+0x4c>
 800065c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000660:	eef0 7a66 	vmov.f32	s15, s13

}
 8000664:	eeb0 0a67 	vmov.f32	s0, s15
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	3ca3d70a 	.word	0x3ca3d70a
 8000678:	00000001 	.word	0x00000001
 800067c:	403d7d7d 	.word	0x403d7d7d

08000680 <flowStateClose>:
			HAL_GPIO_Init(ContactDI3Group, &ContactDI3Pin);
			break;
	}
}

void flowStateClose(void){
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
return;
 8000684:	bf00      	nop
}
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <flowStateOpen>:
void flowStateOpen(void){
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
return;
 8000692:	bf00      	nop
}
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <flowStateControl>:
void flowStateControl(void){
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
return;
 80006a0:	bf00      	nop
}
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	; 0x68
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f001 f956 	bl	8001962 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f83f 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f999 	bl	80009f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006be:	f000 f939 	bl	8000934 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c2:	f000 f967 	bl	8000994 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006c6:	f000 f8a9 	bl	800081c <MX_ADC1_Init>
  MX_DAC_Init();
 80006ca:	f000 f909 	bl	80008e0 <MX_DAC_Init>

  //dacSet(&hdac, DAC_CHANNEL_1, 2.5);



  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <main+0x70>)
 80006d4:	f002 f9a8 	bl	8002a28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2102      	movs	r1, #2
 80006dc:	480f      	ldr	r0, [pc, #60]	; (800071c <main+0x70>)
 80006de:	f002 f9a3 	bl	8002a28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2104      	movs	r1, #4
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <main+0x70>)
 80006e8:	f002 f99e 	bl	8002a28 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006ec:	f004 ff4c 	bl	8005588 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateMachine */
  stateMachineHandle = osThreadNew(StartDefaultTask, NULL, &stateMachine_attributes);
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <main+0x74>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0x78>)
 80006f6:	f004 ff7b 	bl	80055f0 <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <main+0x7c>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* creation of sendData */
  sendDataHandle = osThreadNew(StartTask02, NULL, &sendData_attributes);
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <main+0x80>)
 8000702:	2100      	movs	r1, #0
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <main+0x84>)
 8000706:	f004 ff73 	bl	80055f0 <osThreadNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <main+0x88>)
 800070e:	6013      	str	r3, [r2, #0]
  osThreadSuspend(sendDataHandle);
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <main+0x88>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f005 f811 	bl	800573c <osThreadSuspend>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 800071a:	e7fe      	b.n	800071a <main+0x6e>
 800071c:	40021400 	.word	0x40021400
 8000720:	0800977c 	.word	0x0800977c
 8000724:	08000bfd 	.word	0x08000bfd
 8000728:	200007f4 	.word	0x200007f4
 800072c:	080097a0 	.word	0x080097a0
 8000730:	080010e1 	.word	0x080010e1
 8000734:	200007f8 	.word	0x200007f8

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2234      	movs	r2, #52	; 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f006 fe7d 	bl	8007446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800075c:	f002 fac6 	bl	8002cec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <SystemClock_Config+0xdc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <SystemClock_Config+0xdc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <SystemClock_Config+0xdc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <SystemClock_Config+0xe0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000780:	4a25      	ldr	r2, [pc, #148]	; (8000818 <SystemClock_Config+0xe0>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <SystemClock_Config+0xe0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 faf3 	bl	8002dac <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007cc:	f000 fcb0 	bl	8001130 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d0:	f002 fa9c 	bl	8002d0c <HAL_PWREx_EnableOverDrive>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007da:	f000 fca9 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2302      	movs	r3, #2
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2103      	movs	r1, #3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fd84 	bl	8003308 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000806:	f000 fc93 	bl	8001130 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_ADC1_Init+0xb8>)
 8000830:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <MX_ADC1_Init+0xbc>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000834:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <MX_ADC1_Init+0xb8>)
 8000836:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800083a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <MX_ADC1_Init+0xb8>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <MX_ADC1_Init+0xb8>)
 8000844:	2201      	movs	r2, #1
 8000846:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_ADC1_Init+0xb8>)
 800084a:	2201      	movs	r2, #1
 800084c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_ADC1_Init+0xb8>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_ADC1_Init+0xb8>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_ADC1_Init+0xb8>)
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <MX_ADC1_Init+0xc0>)
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_ADC1_Init+0xb8>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_ADC1_Init+0xb8>)
 800086a:	2202      	movs	r2, #2
 800086c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_ADC1_Init+0xb8>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_ADC1_Init+0xb8>)
 8000878:	2201      	movs	r2, #1
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	4815      	ldr	r0, [pc, #84]	; (80008d4 <MX_ADC1_Init+0xb8>)
 800087e:	f001 f8c1 	bl	8001a04 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 fc52 	bl	8001130 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800088c:	2309      	movs	r3, #9
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000894:	2302      	movs	r3, #2
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_ADC1_Init+0xb8>)
 800089e:	f001 fa8f 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a8:	f000 fc42 	bl	8001130 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008ac:	2306      	movs	r3, #6
 80008ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_ADC1_Init+0xb8>)
 80008be:	f001 fa7f 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80008c8:	f000 fc32 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000208 	.word	0x20000208
 80008d8:	40012000 	.word	0x40012000
 80008dc:	0f000001 	.word	0x0f000001

080008e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_DAC_Init+0x4c>)
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <MX_DAC_Init+0x50>)
 80008f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_DAC_Init+0x4c>)
 80008f6:	f001 fd95 	bl	8002424 <HAL_DAC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000900:	f000 fc16 	bl	8001130 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_DAC_Init+0x4c>)
 8000914:	f001 fe83 	bl	800261e <HAL_DAC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800091e:	f000 fc07 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000250 	.word	0x20000250
 8000930:	40007400 	.word	0x40007400

08000934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART3_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART3_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART3_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000978:	f003 fe26 	bl	80045c8 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 fbd5 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000264 	.word	0x20000264
 8000990:	40004800 	.word	0x40004800

08000994 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800099e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2206      	movs	r2, #6
 80009a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	f002 f83f 	bl	8002a5a <HAL_PCD_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 fba5 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200002ec 	.word	0x200002ec

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b77      	ldr	r3, [pc, #476]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a76      	ldr	r2, [pc, #472]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b74      	ldr	r3, [pc, #464]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1e:	4b71      	ldr	r3, [pc, #452]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a70      	ldr	r2, [pc, #448]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b6e      	ldr	r3, [pc, #440]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0320 	and.w	r3, r3, #32
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b6b      	ldr	r3, [pc, #428]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a6a      	ldr	r2, [pc, #424]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b68      	ldr	r3, [pc, #416]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b65      	ldr	r3, [pc, #404]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a64      	ldr	r2, [pc, #400]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b62      	ldr	r3, [pc, #392]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b5f      	ldr	r3, [pc, #380]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a5e      	ldr	r2, [pc, #376]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b5c      	ldr	r3, [pc, #368]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	4b59      	ldr	r3, [pc, #356]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a58      	ldr	r2, [pc, #352]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b56      	ldr	r3, [pc, #344]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a96:	4b53      	ldr	r3, [pc, #332]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a52      	ldr	r2, [pc, #328]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	484d      	ldr	r0, [pc, #308]	; (8000be8 <MX_GPIO_Init+0x1f8>)
 8000ab4:	f001 ffb8 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f244 0181 	movw	r1, #16513	; 0x4081
 8000abe:	484b      	ldr	r0, [pc, #300]	; (8000bec <MX_GPIO_Init+0x1fc>)
 8000ac0:	f001 ffb2 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	4849      	ldr	r0, [pc, #292]	; (8000bf0 <MX_GPIO_Init+0x200>)
 8000aca:	f001 ffad 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4843      	ldr	r0, [pc, #268]	; (8000bf4 <MX_GPIO_Init+0x204>)
 8000ae6:	f001 fdf3 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000aea:	2307      	movs	r3, #7
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4839      	ldr	r0, [pc, #228]	; (8000be8 <MX_GPIO_Init+0x1f8>)
 8000b02:	f001 fde5 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b06:	2332      	movs	r3, #50	; 0x32
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b16:	230b      	movs	r3, #11
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4834      	ldr	r0, [pc, #208]	; (8000bf4 <MX_GPIO_Init+0x204>)
 8000b22:	f001 fdd5 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b26:	2386      	movs	r3, #134	; 0x86
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b36:	230b      	movs	r3, #11
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <MX_GPIO_Init+0x208>)
 8000b42:	f001 fdc5 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b46:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4823      	ldr	r0, [pc, #140]	; (8000bec <MX_GPIO_Init+0x1fc>)
 8000b60:	f001 fdb6 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b76:	230b      	movs	r3, #11
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481a      	ldr	r0, [pc, #104]	; (8000bec <MX_GPIO_Init+0x1fc>)
 8000b82:	f001 fda5 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <MX_GPIO_Init+0x200>)
 8000b9e:	f001 fd97 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <MX_GPIO_Init+0x200>)
 8000bb6:	f001 fd8b 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_GPIO_Init+0x200>)
 8000bd8:	f001 fd7a 	bl	80026d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40021400 	.word	0x40021400
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40021800 	.word	0x40021800
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	40020000 	.word	0x40020000

08000bfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch(eNextState) {
 8000c04:	4b94      	ldr	r3, [pc, #592]	; (8000e58 <StartDefaultTask+0x25c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b0d      	cmp	r3, #13
 8000c0a:	f200 8236 	bhi.w	800107a <StartDefaultTask+0x47e>
 8000c0e:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <StartDefaultTask+0x18>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c4d 	.word	0x08000c4d
 8000c18:	08000c97 	.word	0x08000c97
 8000c1c:	08000cfd 	.word	0x08000cfd
 8000c20:	08000d77 	.word	0x08000d77
 8000c24:	08000ddd 	.word	0x08000ddd
 8000c28:	08000eb9 	.word	0x08000eb9
 8000c2c:	08000f41 	.word	0x08000f41
 8000c30:	08000fbb 	.word	0x08000fbb
 8000c34:	08000fdb 	.word	0x08000fdb
 8000c38:	0800100b 	.word	0x0800100b
 8000c3c:	0800102b 	.word	0x0800102b
 8000c40:	0800105b 	.word	0x0800105b
 8000c44:	08001083 	.word	0x08001083
 8000c48:	08001083 	.word	0x08001083
//					LOAD_TEST_INIT,
//					OPERATION_TEST_INIT,
//					ULTIMATE_MEASURE_TEST_INT,

	  				// void listenMsg(int * str, UART_HandleTypeDef *huart2);
	  				sprintf(msg,"STARTING\r\n");
 8000c4c:	4983      	ldr	r1, [pc, #524]	; (8000e5c <StartDefaultTask+0x260>)
 8000c4e:	4884      	ldr	r0, [pc, #528]	; (8000e60 <StartDefaultTask+0x264>)
 8000c50:	f006 fb96 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000c54:	4983      	ldr	r1, [pc, #524]	; (8000e64 <StartDefaultTask+0x268>)
 8000c56:	4882      	ldr	r0, [pc, #520]	; (8000e60 <StartDefaultTask+0x264>)
 8000c58:	f000 fae4 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c60:	f000 feac 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);

					tests[0] = 1;
 8000c64:	4b80      	ldr	r3, [pc, #512]	; (8000e68 <StartDefaultTask+0x26c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
					tests[1] = 3;
 8000c6a:	4b7f      	ldr	r3, [pc, #508]	; (8000e68 <StartDefaultTask+0x26c>)
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	605a      	str	r2, [r3, #4]
					tests[2] = 5;
 8000c70:	4b7d      	ldr	r3, [pc, #500]	; (8000e68 <StartDefaultTask+0x26c>)
 8000c72:	2205      	movs	r2, #5
 8000c74:	609a      	str	r2, [r3, #8]
					tests[3] = 7;
 8000c76:	4b7c      	ldr	r3, [pc, #496]	; (8000e68 <StartDefaultTask+0x26c>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	60da      	str	r2, [r3, #12]
					tests[4] = 9;
 8000c7c:	4b7a      	ldr	r3, [pc, #488]	; (8000e68 <StartDefaultTask+0x26c>)
 8000c7e:	2209      	movs	r2, #9
 8000c80:	611a      	str	r2, [r3, #16]
					tests[5] = 11;
 8000c82:	4b79      	ldr	r3, [pc, #484]	; (8000e68 <StartDefaultTask+0x26c>)
 8000c84:	220b      	movs	r2, #11
 8000c86:	615a      	str	r2, [r3, #20]

					eNextState = *currentTest;
 8000c88:	4b78      	ldr	r3, [pc, #480]	; (8000e6c <StartDefaultTask+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b71      	ldr	r3, [pc, #452]	; (8000e58 <StartDefaultTask+0x25c>)
 8000c92:	701a      	strb	r2, [r3, #0]
	  				break;
 8000c94:	e1f6      	b.n	8001084 <StartDefaultTask+0x488>
//					Task Number One:
//						recieve parameters from GUI
//						Initialization
//						- set timer, target mTorr, assign which pump
//						- open/close solonoids, close flow controller, open stepper motor
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST_INIT\r\n");
 8000c96:	4976      	ldr	r1, [pc, #472]	; (8000e70 <StartDefaultTask+0x274>)
 8000c98:	4871      	ldr	r0, [pc, #452]	; (8000e60 <StartDefaultTask+0x264>)
 8000c9a:	f006 fb71 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000c9e:	4971      	ldr	r1, [pc, #452]	; (8000e64 <StartDefaultTask+0x268>)
 8000ca0:	486f      	ldr	r0, [pc, #444]	; (8000e60 <StartDefaultTask+0x264>)
 8000ca2:	f000 fabf 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000caa:	f000 fe87 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);

	  				sprintf(msg,"open/close solenoids, close flow controller, open stepper motor\r\n");
 8000cae:	4971      	ldr	r1, [pc, #452]	; (8000e74 <StartDefaultTask+0x278>)
 8000cb0:	486b      	ldr	r0, [pc, #428]	; (8000e60 <StartDefaultTask+0x264>)
 8000cb2:	f006 fb65 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000cb6:	496b      	ldr	r1, [pc, #428]	; (8000e64 <StartDefaultTask+0x268>)
 8000cb8:	4869      	ldr	r0, [pc, #420]	; (8000e60 <StartDefaultTask+0x264>)
 8000cba:	f000 fab3 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc2:	f000 fe7b 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);

	  				flowStateClose();
 8000cc6:	f7ff fcdb 	bl	8000680 <flowStateClose>
	  				stepperOpen();
 8000cca:	f000 fad7 	bl	800127c <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000cce:	4b6a      	ldr	r3, [pc, #424]	; (8000e78 <StartDefaultTask+0x27c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a6a      	ldr	r2, [pc, #424]	; (8000e7c <StartDefaultTask+0x280>)
 8000cd4:	8812      	ldrh	r2, [r2, #0]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fab7 	bl	800124c <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000cde:	4b68      	ldr	r3, [pc, #416]	; (8000e80 <StartDefaultTask+0x284>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a68      	ldr	r2, [pc, #416]	; (8000e84 <StartDefaultTask+0x288>)
 8000ce4:	8812      	ldrh	r2, [r2, #0]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fabb 	bl	8001264 <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000cee:	4866      	ldr	r0, [pc, #408]	; (8000e88 <StartDefaultTask+0x28c>)
 8000cf0:	f000 fdec 	bl	80018cc <vacuumGaugeADC>

	  				eNextState = VAC_ACHIEVMENT_TEST;
 8000cf4:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <StartDefaultTask+0x25c>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	701a      	strb	r2, [r3, #0]
	  				break;
 8000cfa:	e1c3      	b.n	8001084 <StartDefaultTask+0x488>
	  			case VAC_ACHIEVMENT_TEST:
//	  				monitor status
//	  				- mTorr if mTorr = target, shut pump off, success
//	  				- Timer if Timer > set time, shut pump off, failure
//	  				- if success/failure, send data, remove task two&three, move to next state
	  				volts = adcGet(&hadc1);
 8000cfc:	4862      	ldr	r0, [pc, #392]	; (8000e88 <StartDefaultTask+0x28c>)
 8000cfe:	f000 fa53 	bl	80011a8 <adcGet>
 8000d02:	eef0 7a40 	vmov.f32	s15, s0
 8000d06:	4b61      	ldr	r3, [pc, #388]	; (8000e8c <StartDefaultTask+0x290>)
 8000d08:	edc3 7a00 	vstr	s15, [r3]
//	  				vacuumScale = readVacuum(volts);
	  				sprintf(msg,"VAC_ACHIEVMENT_TEST Scanning\r\n");
 8000d0c:	4960      	ldr	r1, [pc, #384]	; (8000e90 <StartDefaultTask+0x294>)
 8000d0e:	4854      	ldr	r0, [pc, #336]	; (8000e60 <StartDefaultTask+0x264>)
 8000d10:	f006 fb36 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000d14:	4953      	ldr	r1, [pc, #332]	; (8000e64 <StartDefaultTask+0x268>)
 8000d16:	4852      	ldr	r0, [pc, #328]	; (8000e60 <StartDefaultTask+0x264>)
 8000d18:	f000 fa84 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d20:	f000 fe4c 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);
	  				//osThreadResume(sendDataHandle);

	  				vacuumScale = 50.0;
 8000d24:	4b5b      	ldr	r3, [pc, #364]	; (8000e94 <StartDefaultTask+0x298>)
 8000d26:	4a5c      	ldr	r2, [pc, #368]	; (8000e98 <StartDefaultTask+0x29c>)
 8000d28:	601a      	str	r2, [r3, #0]
	  				if(vacuumScale >= 50){
 8000d2a:	4b5a      	ldr	r3, [pc, #360]	; (8000e94 <StartDefaultTask+0x298>)
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000e9c <StartDefaultTask+0x2a0>
 8000d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	db17      	blt.n	8000d6e <StartDefaultTask+0x172>
		  				sprintf(msg,"vacuum of 50 mTorr reached\r\n");
 8000d3e:	4958      	ldr	r1, [pc, #352]	; (8000ea0 <StartDefaultTask+0x2a4>)
 8000d40:	4847      	ldr	r0, [pc, #284]	; (8000e60 <StartDefaultTask+0x264>)
 8000d42:	f006 fb1d 	bl	8007380 <siprintf>
		  				printMsg(msg, &huart3);
 8000d46:	4947      	ldr	r1, [pc, #284]	; (8000e64 <StartDefaultTask+0x268>)
 8000d48:	4845      	ldr	r0, [pc, #276]	; (8000e60 <StartDefaultTask+0x264>)
 8000d4a:	f000 fa6b 	bl	8001224 <printMsg>
		  				HAL_Delay(1000);
 8000d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d52:	f000 fe33 	bl	80019bc <HAL_Delay>
		  				currentTest++;
 8000d56:	4b45      	ldr	r3, [pc, #276]	; (8000e6c <StartDefaultTask+0x270>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	4a43      	ldr	r2, [pc, #268]	; (8000e6c <StartDefaultTask+0x270>)
 8000d5e:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <StartDefaultTask+0x270>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <StartDefaultTask+0x25c>)
 8000d6a:	701a      	strb	r2, [r3, #0]
	  					eNextState = VAC_ACHIEVMENT_TEST;
	  				}

	  				//osDelay(100);

	  				break;
 8000d6c:	e18a      	b.n	8001084 <StartDefaultTask+0x488>
	  					eNextState = VAC_ACHIEVMENT_TEST;
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <StartDefaultTask+0x25c>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	701a      	strb	r2, [r3, #0]
	  				break;
 8000d74:	e186      	b.n	8001084 <StartDefaultTask+0x488>

//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor
	  				sprintf(msg,"WARM_UP_INIT\r\n");
 8000d76:	494b      	ldr	r1, [pc, #300]	; (8000ea4 <StartDefaultTask+0x2a8>)
 8000d78:	4839      	ldr	r0, [pc, #228]	; (8000e60 <StartDefaultTask+0x264>)
 8000d7a:	f006 fb01 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000d7e:	4939      	ldr	r1, [pc, #228]	; (8000e64 <StartDefaultTask+0x268>)
 8000d80:	4837      	ldr	r0, [pc, #220]	; (8000e60 <StartDefaultTask+0x264>)
 8000d82:	f000 fa4f 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8a:	f000 fe17 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);

	  				sprintf(msg,"open/close solenoids, open flow controller, open stepper motor\r\n");
 8000d8e:	4946      	ldr	r1, [pc, #280]	; (8000ea8 <StartDefaultTask+0x2ac>)
 8000d90:	4833      	ldr	r0, [pc, #204]	; (8000e60 <StartDefaultTask+0x264>)
 8000d92:	f006 faf5 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000d96:	4933      	ldr	r1, [pc, #204]	; (8000e64 <StartDefaultTask+0x268>)
 8000d98:	4831      	ldr	r0, [pc, #196]	; (8000e60 <StartDefaultTask+0x264>)
 8000d9a:	f000 fa43 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da2:	f000 fe0b 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);

	  				flowStateOpen();
 8000da6:	f7ff fc72 	bl	800068e <flowStateOpen>
	  				stepperOpen();
 8000daa:	f000 fa67 	bl	800127c <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000dae:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <StartDefaultTask+0x27c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <StartDefaultTask+0x280>)
 8000db4:	8812      	ldrh	r2, [r2, #0]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fa47 	bl	800124c <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <StartDefaultTask+0x284>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <StartDefaultTask+0x288>)
 8000dc4:	8812      	ldrh	r2, [r2, #0]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fa4b 	bl	8001264 <solenoidClose>
	  				vacuumGaugeADC(&hadc1);
 8000dce:	482e      	ldr	r0, [pc, #184]	; (8000e88 <StartDefaultTask+0x28c>)
 8000dd0:	f000 fd7c 	bl	80018cc <vacuumGaugeADC>

	  				eNextState = WARM_UP;
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <StartDefaultTask+0x25c>)
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	701a      	strb	r2, [r3, #0]
	  				break;
 8000dda:	e153      	b.n	8001084 <StartDefaultTask+0x488>
	  			case WARM_UP:
//					- Timer if Timer >= set time, success,
//					- temperature if temp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				float temp = 0;
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
	  				int timer = 3;
 8000de2:	2303      	movs	r3, #3
 8000de4:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"WARM_UP Scanning\r\n");
 8000de6:	4931      	ldr	r1, [pc, #196]	; (8000eac <StartDefaultTask+0x2b0>)
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <StartDefaultTask+0x264>)
 8000dea:	f006 fac9 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000dee:	491d      	ldr	r1, [pc, #116]	; (8000e64 <StartDefaultTask+0x268>)
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <StartDefaultTask+0x264>)
 8000df2:	f000 fa17 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfa:	f000 fddf 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);
	  				//osThreadResume(sendDataHandle);

	  				if(temp > 100){
 8000dfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e02:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000eb0 <StartDefaultTask+0x2b4>
 8000e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0e:	dd03      	ble.n	8000e18 <StartDefaultTask+0x21c>
//	  					test failed
	  					eNextState = FAIL_STATE;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <StartDefaultTask+0x25c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	701a      	strb	r2, [r3, #0]
		  				//osThreadSuspend(sendDataHandle);
	  				}else{
	  					eNextState = WARM_UP;
	  				}
	  				//osDelay(250);
	  				break;
 8000e16:	e135      	b.n	8001084 <StartDefaultTask+0x488>
	  				}else if(timer >= 3){
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	dd17      	ble.n	8000e4e <StartDefaultTask+0x252>
		  				sprintf(msg,"Time is up: success\r\n");
 8000e1e:	4925      	ldr	r1, [pc, #148]	; (8000eb4 <StartDefaultTask+0x2b8>)
 8000e20:	480f      	ldr	r0, [pc, #60]	; (8000e60 <StartDefaultTask+0x264>)
 8000e22:	f006 faad 	bl	8007380 <siprintf>
		  				printMsg(msg, &huart3);
 8000e26:	490f      	ldr	r1, [pc, #60]	; (8000e64 <StartDefaultTask+0x268>)
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <StartDefaultTask+0x264>)
 8000e2a:	f000 f9fb 	bl	8001224 <printMsg>
		  				HAL_Delay(1000);
 8000e2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e32:	f000 fdc3 	bl	80019bc <HAL_Delay>
		  				currentTest++;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <StartDefaultTask+0x270>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <StartDefaultTask+0x270>)
 8000e3e:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <StartDefaultTask+0x270>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <StartDefaultTask+0x25c>)
 8000e4a:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e4c:	e11a      	b.n	8001084 <StartDefaultTask+0x488>
	  					eNextState = WARM_UP;
 8000e4e:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <StartDefaultTask+0x25c>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	701a      	strb	r2, [r3, #0]
	  				break;
 8000e54:	e116      	b.n	8001084 <StartDefaultTask+0x488>
 8000e56:	bf00      	nop
 8000e58:	20000814 	.word	0x20000814
 8000e5c:	08009564 	.word	0x08009564
 8000e60:	20000824 	.word	0x20000824
 8000e64:	20000264 	.word	0x20000264
 8000e68:	200007fc 	.word	0x200007fc
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	08009570 	.word	0x08009570
 8000e74:	0800958c 	.word	0x0800958c
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	20000010 	.word	0x20000010
 8000e88:	20000208 	.word	0x20000208
 8000e8c:	20000818 	.word	0x20000818
 8000e90:	080095d0 	.word	0x080095d0
 8000e94:	20000820 	.word	0x20000820
 8000e98:	42480000 	.word	0x42480000
 8000e9c:	42480000 	.word	0x42480000
 8000ea0:	080095f0 	.word	0x080095f0
 8000ea4:	08009610 	.word	0x08009610
 8000ea8:	08009620 	.word	0x08009620
 8000eac:	08009664 	.word	0x08009664
 8000eb0:	42c80000 	.word	0x42c80000
 8000eb4:	08009678 	.word	0x08009678
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump, flow load
//					- open/close solonoids, control flow controller, open stepper motor

	  				sprintf(msg,"LOAD_TEST_INIT\r\n");
 8000eb8:	4974      	ldr	r1, [pc, #464]	; (800108c <StartDefaultTask+0x490>)
 8000eba:	4875      	ldr	r0, [pc, #468]	; (8001090 <StartDefaultTask+0x494>)
 8000ebc:	f006 fa60 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000ec0:	4974      	ldr	r1, [pc, #464]	; (8001094 <StartDefaultTask+0x498>)
 8000ec2:	4873      	ldr	r0, [pc, #460]	; (8001090 <StartDefaultTask+0x494>)
 8000ec4:	f000 f9ae 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ecc:	f000 fd76 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);

	  				sprintf(msg,"open/close solenoids, control flow controller, open stepper motor\r\n");
 8000ed0:	4971      	ldr	r1, [pc, #452]	; (8001098 <StartDefaultTask+0x49c>)
 8000ed2:	486f      	ldr	r0, [pc, #444]	; (8001090 <StartDefaultTask+0x494>)
 8000ed4:	f006 fa54 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000ed8:	496e      	ldr	r1, [pc, #440]	; (8001094 <StartDefaultTask+0x498>)
 8000eda:	486d      	ldr	r0, [pc, #436]	; (8001090 <StartDefaultTask+0x494>)
 8000edc:	f000 f9a2 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	f000 fd6a 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);

	  				flowStateControl();
 8000ee8:	f7ff fbd8 	bl	800069c <flowStateControl>
	  				dacVolts = setFlowRate(50);
 8000eec:	2032      	movs	r0, #50	; 0x32
 8000eee:	f7ff fb9f 	bl	8000630 <setFlowRate>
 8000ef2:	eef0 7a40 	vmov.f32	s15, s0
 8000ef6:	4b69      	ldr	r3, [pc, #420]	; (800109c <StartDefaultTask+0x4a0>)
 8000ef8:	edc3 7a00 	vstr	s15, [r3]
	  				dacSet(&hdac, DAC_CHANNEL_1, dacVolts);
 8000efc:	4b67      	ldr	r3, [pc, #412]	; (800109c <StartDefaultTask+0x4a0>)
 8000efe:	edd3 7a00 	vldr	s15, [r3]
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	2100      	movs	r1, #0
 8000f08:	4865      	ldr	r0, [pc, #404]	; (80010a0 <StartDefaultTask+0x4a4>)
 8000f0a:	f000 f919 	bl	8001140 <dacSet>

	  				stepperOpen();
 8000f0e:	f000 f9b5 	bl	800127c <stepperOpen>
	  				solenoidOpen(solenoidOneGroup, solenoidOnePin);
 8000f12:	4b64      	ldr	r3, [pc, #400]	; (80010a4 <StartDefaultTask+0x4a8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a64      	ldr	r2, [pc, #400]	; (80010a8 <StartDefaultTask+0x4ac>)
 8000f18:	8812      	ldrh	r2, [r2, #0]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f995 	bl	800124c <solenoidOpen>
	  				solenoidClose(solenoidTwoGroup, solenoidTwoPin);
 8000f22:	4b62      	ldr	r3, [pc, #392]	; (80010ac <StartDefaultTask+0x4b0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a62      	ldr	r2, [pc, #392]	; (80010b0 <StartDefaultTask+0x4b4>)
 8000f28:	8812      	ldrh	r2, [r2, #0]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f999 	bl	8001264 <solenoidClose>
	  				flowControllerADC(&hadc1);
 8000f32:	4860      	ldr	r0, [pc, #384]	; (80010b4 <StartDefaultTask+0x4b8>)
 8000f34:	f7ff fb5a 	bl	80005ec <flowControllerADC>

	  				eNextState = LOAD_TEST;
 8000f38:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <StartDefaultTask+0x4bc>)
 8000f3a:	2206      	movs	r2, #6
 8000f3c:	701a      	strb	r2, [r3, #0]

	  				break;
 8000f3e:	e0a1      	b.n	8001084 <StartDefaultTask+0x488>
	  			case LOAD_TEST:
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- flow rate < flow load, failure
//					- if success/failure, send data, remove task two&three, move to next state
	  				temp = 0;
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
	  				timer = 8;
 8000f46:	2308      	movs	r3, #8
 8000f48:	60bb      	str	r3, [r7, #8]
	  				sprintf(msg,"LOAD_TEST Scanning\r\n");
 8000f4a:	495c      	ldr	r1, [pc, #368]	; (80010bc <StartDefaultTask+0x4c0>)
 8000f4c:	4850      	ldr	r0, [pc, #320]	; (8001090 <StartDefaultTask+0x494>)
 8000f4e:	f006 fa17 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000f52:	4950      	ldr	r1, [pc, #320]	; (8001094 <StartDefaultTask+0x498>)
 8000f54:	484e      	ldr	r0, [pc, #312]	; (8001090 <StartDefaultTask+0x494>)
 8000f56:	f000 f965 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f5e:	f000 fd2d 	bl	80019bc <HAL_Delay>
	  				//osDelay(1);
	  				//osThreadResume(sendDataHandle);

	  				if(temp > 100){
 8000f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f66:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80010c0 <StartDefaultTask+0x4c4>
 8000f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	dd03      	ble.n	8000f7c <StartDefaultTask+0x380>
//	  					test failed
	  					eNextState = FAIL_STATE;
 8000f74:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <StartDefaultTask+0x4bc>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	701a      	strb	r2, [r3, #0]
	  				}else{
	  					eNextState = LOAD_TEST;
	  				}
	  				//osDelay(250);

	  				break;
 8000f7a:	e083      	b.n	8001084 <StartDefaultTask+0x488>
	  				}else if(timer >= 8){
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	dd17      	ble.n	8000fb2 <StartDefaultTask+0x3b6>
		  				sprintf(msg,"Time is up: success\r\n");
 8000f82:	4950      	ldr	r1, [pc, #320]	; (80010c4 <StartDefaultTask+0x4c8>)
 8000f84:	4842      	ldr	r0, [pc, #264]	; (8001090 <StartDefaultTask+0x494>)
 8000f86:	f006 f9fb 	bl	8007380 <siprintf>
		  				printMsg(msg, &huart3);
 8000f8a:	4942      	ldr	r1, [pc, #264]	; (8001094 <StartDefaultTask+0x498>)
 8000f8c:	4840      	ldr	r0, [pc, #256]	; (8001090 <StartDefaultTask+0x494>)
 8000f8e:	f000 f949 	bl	8001224 <printMsg>
		  				HAL_Delay(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f96:	f000 fd11 	bl	80019bc <HAL_Delay>
		  				currentTest++;
 8000f9a:	4b4b      	ldr	r3, [pc, #300]	; (80010c8 <StartDefaultTask+0x4cc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <StartDefaultTask+0x4cc>)
 8000fa2:	6013      	str	r3, [r2, #0]
		  				eNextState = *currentTest;
 8000fa4:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <StartDefaultTask+0x4cc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <StartDefaultTask+0x4bc>)
 8000fae:	701a      	strb	r2, [r3, #0]
	  				break;
 8000fb0:	e068      	b.n	8001084 <StartDefaultTask+0x488>
	  					eNextState = LOAD_TEST;
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <StartDefaultTask+0x4bc>)
 8000fb4:	2206      	movs	r2, #6
 8000fb6:	701a      	strb	r2, [r3, #0]
	  				break;
 8000fb8:	e064      	b.n	8001084 <StartDefaultTask+0x488>
//					recieve parameters from GUI
//					Initialization
//					- set timer, Max Temp, assign which pump
//					- open/close solonoids, open flow controller, open stepper motor

	  				sprintf(msg,"OPERATION_TEST_INIT\r\n");
 8000fba:	4944      	ldr	r1, [pc, #272]	; (80010cc <StartDefaultTask+0x4d0>)
 8000fbc:	4834      	ldr	r0, [pc, #208]	; (8001090 <StartDefaultTask+0x494>)
 8000fbe:	f006 f9df 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000fc2:	4934      	ldr	r1, [pc, #208]	; (8001094 <StartDefaultTask+0x498>)
 8000fc4:	4832      	ldr	r0, [pc, #200]	; (8001090 <StartDefaultTask+0x494>)
 8000fc6:	f000 f92d 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fce:	f000 fcf5 	bl	80019bc <HAL_Delay>

	  				eNextState = LOAD_TEST;
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <StartDefaultTask+0x4bc>)
 8000fd4:	2206      	movs	r2, #6
 8000fd6:	701a      	strb	r2, [r3, #0]
	  				break;
 8000fd8:	e054      	b.n	8001084 <StartDefaultTask+0x488>
//					monitor status
//					- Timer if Timer >= set time, success,
//					- temperature if maxTemp >= readTemp, failure
//					- if success/failure, send data, remove task two&three, move to next state

	  				sprintf(msg,"OPERATION_TEST\r\n");
 8000fda:	493d      	ldr	r1, [pc, #244]	; (80010d0 <StartDefaultTask+0x4d4>)
 8000fdc:	482c      	ldr	r0, [pc, #176]	; (8001090 <StartDefaultTask+0x494>)
 8000fde:	f006 f9cf 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8000fe2:	492c      	ldr	r1, [pc, #176]	; (8001094 <StartDefaultTask+0x498>)
 8000fe4:	482a      	ldr	r0, [pc, #168]	; (8001090 <StartDefaultTask+0x494>)
 8000fe6:	f000 f91d 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 8000fea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fee:	f000 fce5 	bl	80019bc <HAL_Delay>

	  				currentTest++;
 8000ff2:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <StartDefaultTask+0x4cc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <StartDefaultTask+0x4cc>)
 8000ffa:	6013      	str	r3, [r2, #0]
	  				eNextState = *currentTest;
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <StartDefaultTask+0x4cc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <StartDefaultTask+0x4bc>)
 8001006:	701a      	strb	r2, [r3, #0]

	  				break;
 8001008:	e03c      	b.n	8001084 <StartDefaultTask+0x488>
//					Below is proposed design setup for test 18 – 22 where both top inlets of the pump are connected
//					through metal tubing where when one pump goes through a series of test, the opposite solenoid will
//					remain closed.
//					Once Steps 18 –22 are completed, when can move forward with step 23.

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST_INIT\r\n");
 800100a:	4932      	ldr	r1, [pc, #200]	; (80010d4 <StartDefaultTask+0x4d8>)
 800100c:	4820      	ldr	r0, [pc, #128]	; (8001090 <StartDefaultTask+0x494>)
 800100e:	f006 f9b7 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8001012:	4920      	ldr	r1, [pc, #128]	; (8001094 <StartDefaultTask+0x498>)
 8001014:	481e      	ldr	r0, [pc, #120]	; (8001090 <StartDefaultTask+0x494>)
 8001016:	f000 f905 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 800101a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101e:	f000 fccd 	bl	80019bc <HAL_Delay>

	  				eNextState = ULTIMATE_MEASURE_TEST;
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <StartDefaultTask+0x4bc>)
 8001024:	220a      	movs	r2, #10
 8001026:	701a      	strb	r2, [r3, #0]

	  				break;
 8001028:	e02c      	b.n	8001084 <StartDefaultTask+0x488>
	  			case ULTIMATE_MEASURE_TEST:

	  				sprintf(msg,"ULTIMATE_MEASURE_TEST\r\n");
 800102a:	492b      	ldr	r1, [pc, #172]	; (80010d8 <StartDefaultTask+0x4dc>)
 800102c:	4818      	ldr	r0, [pc, #96]	; (8001090 <StartDefaultTask+0x494>)
 800102e:	f006 f9a7 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8001032:	4918      	ldr	r1, [pc, #96]	; (8001094 <StartDefaultTask+0x498>)
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <StartDefaultTask+0x494>)
 8001036:	f000 f8f5 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 800103a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800103e:	f000 fcbd 	bl	80019bc <HAL_Delay>

	  				currentTest++;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <StartDefaultTask+0x4cc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3304      	adds	r3, #4
 8001048:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <StartDefaultTask+0x4cc>)
 800104a:	6013      	str	r3, [r2, #0]
	  				eNextState = *currentTest;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <StartDefaultTask+0x4cc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <StartDefaultTask+0x4bc>)
 8001056:	701a      	strb	r2, [r3, #0]
	  				break;
 8001058:	e014      	b.n	8001084 <StartDefaultTask+0x488>
	  			case FAIL_STATE:
	  				break;
	  			case IDLE:
	  				sprintf(msg,"IDLE\r\n");
 800105a:	4920      	ldr	r1, [pc, #128]	; (80010dc <StartDefaultTask+0x4e0>)
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <StartDefaultTask+0x494>)
 800105e:	f006 f98f 	bl	8007380 <siprintf>
	  				printMsg(msg, &huart3);
 8001062:	490c      	ldr	r1, [pc, #48]	; (8001094 <StartDefaultTask+0x498>)
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <StartDefaultTask+0x494>)
 8001066:	f000 f8dd 	bl	8001224 <printMsg>
	  				HAL_Delay(1000);
 800106a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106e:	f000 fca5 	bl	80019bc <HAL_Delay>
	  				eNextState = IDLE;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <StartDefaultTask+0x4bc>)
 8001074:	220b      	movs	r2, #11
 8001076:	701a      	strb	r2, [r3, #0]
	  				break;
 8001078:	e004      	b.n	8001084 <StartDefaultTask+0x488>
	  			case STOP:
	  				break;
	  			default:
	  				eNextState = STOP;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <StartDefaultTask+0x4bc>)
 800107c:	220d      	movs	r2, #13
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e000      	b.n	8001084 <StartDefaultTask+0x488>
	  				break;
 8001082:	bf00      	nop
	  }

	  osDelay(100);
 8001084:	2064      	movs	r0, #100	; 0x64
 8001086:	f004 fb8d 	bl	80057a4 <osDelay>
	  switch(eNextState) {
 800108a:	e5bb      	b.n	8000c04 <StartDefaultTask+0x8>
 800108c:	08009690 	.word	0x08009690
 8001090:	20000824 	.word	0x20000824
 8001094:	20000264 	.word	0x20000264
 8001098:	080096a4 	.word	0x080096a4
 800109c:	2000081c 	.word	0x2000081c
 80010a0:	20000250 	.word	0x20000250
 80010a4:	20000004 	.word	0x20000004
 80010a8:	20000008 	.word	0x20000008
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	20000010 	.word	0x20000010
 80010b4:	20000208 	.word	0x20000208
 80010b8:	20000814 	.word	0x20000814
 80010bc:	080096e8 	.word	0x080096e8
 80010c0:	42c80000 	.word	0x42c80000
 80010c4:	08009678 	.word	0x08009678
 80010c8:	20000000 	.word	0x20000000
 80010cc:	08009700 	.word	0x08009700
 80010d0:	08009718 	.word	0x08009718
 80010d4:	0800972c 	.word	0x0800972c
 80010d8:	0800974c 	.word	0x0800974c
 80010dc:	08009764 	.word	0x08009764

080010e0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg,"Sending Data");
 80010e8:	4905      	ldr	r1, [pc, #20]	; (8001100 <StartTask02+0x20>)
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <StartTask02+0x24>)
 80010ec:	f006 f948 	bl	8007380 <siprintf>
	printMsg(msg, &huart3);
 80010f0:	4905      	ldr	r1, [pc, #20]	; (8001108 <StartTask02+0x28>)
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <StartTask02+0x24>)
 80010f4:	f000 f896 	bl	8001224 <printMsg>
    osDelay(100);
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f004 fb53 	bl	80057a4 <osDelay>
	sprintf(msg,"Sending Data");
 80010fe:	e7f3      	b.n	80010e8 <StartTask02+0x8>
 8001100:	0800976c 	.word	0x0800976c
 8001104:	20000824 	.word	0x20000824
 8001108:	20000264 	.word	0x20000264

0800110c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800111e:	f000 fc2d 	bl	800197c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40001000 	.word	0x40001000

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
 800113a:	0000      	movs	r0, r0
 800113c:	0000      	movs	r0, r0
	...

08001140 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f001 f989 	bl	8002468 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 8001156:	edd7 7a01 	vldr	s15, [r7, #4]
 800115a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800115e:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001190 <dacSet+0x50>
 8001162:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001166:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001198 <dacSet+0x58>
 800116a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800116e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001172:	ee17 2a90 	vmov	r2, s15
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <dacSet+0x60>)
 8001178:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <dacSet+0x60>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f001 fa1c 	bl	80025c0 <HAL_DAC_SetValue>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	66666666 	.word	0x66666666
 8001194:	400a6666 	.word	0x400a6666
 8001198:	00000000 	.word	0x00000000
 800119c:	40affe00 	.word	0x40affe00
 80011a0:	20000888 	.word	0x20000888
 80011a4:	00000000 	.word	0x00000000

080011a8 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fc6b 	bl	8001a8c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 80011b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fd68 	bl	8001c90 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fdf0 	bl	8001da6 <HAL_ADC_GetValue>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <adcGet+0x70>)
 80011cc:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <adcGet+0x70>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011da:	eddf 6a10 	vldr	s13, [pc, #64]	; 800121c <adcGet+0x74>
 80011de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001210 <adcGet+0x68>
 80011ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <adcGet+0x78>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fd15 	bl	8001c28 <HAL_ADC_Stop>
	return adcVolts;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <adcGet+0x78>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	ee07 3a90 	vmov	s15, r3
}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	66666666 	.word	0x66666666
 8001214:	400a6666 	.word	0x400a6666
 8001218:	2000088c 	.word	0x2000088c
 800121c:	457ff000 	.word	0x457ff000
 8001220:	20000890 	.word	0x20000890

08001224 <printMsg>:
//	//adcVolts =roundf(arr[2] *100.0)/100;
//	adcVolts = arr[2];
//	return adcVolts;
//}

void printMsg(char* str, UART_HandleTypeDef *huart2){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	// sprintf(msg, "Volts: %.2f V\r\n", volts);
	// HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	HAL_UART_Transmit(huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff f856 	bl	80002e0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f003 fa10 	bl	8004664 <HAL_UART_Transmit>
	return;
 8001244:	bf00      	nop
}
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <solenoidOpen>:
    // Now you can use buffer as a string
    HAL_UART_Transmit(huart, buffer, strlen((char *)buffer), HAL_MAX_DELAY);

}

void solenoidOpen(GPIO_TypeDef * solenoidGroup, uint16_t solenoidPin){
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 1);	// 3.3 V
	return;
 8001258:	bf00      	nop
}
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <solenoidClose>:
void solenoidClose(GPIO_TypeDef * solenoidGroup, uint16_t solenoidPin){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]

//	HAL_GPIO_WritePin(solenoidGroup, solenoidPin, 0);	// gnd
	return;
 8001270:	bf00      	nop
}
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <stepperOpen>:
// Public Functions		------------------------------------------------//

void stepperClose(){
}

void stepperOpen(){
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_MspInit+0x4c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_MspInit+0x4c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	210f      	movs	r1, #15
 80012c6:	f06f 0001 	mvn.w	r0, #1
 80012ca:	f001 f881 	bl	80023d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_ADC_MspInit+0xa4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d13b      	bne.n	8001376 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_ADC_MspInit+0xa8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001346:	2360      	movs	r3, #96	; 0x60
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <HAL_ADC_MspInit+0xac>)
 800135a:	f001 f9b9 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800135e:	2302      	movs	r3, #2
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001362:	2303      	movs	r3, #3
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <HAL_ADC_MspInit+0xb0>)
 8001372:	f001 f9ad 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40012000 	.word	0x40012000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400

08001390 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_DAC_MspInit+0x84>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12b      	bne.n	800140a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_DAC_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a18      	ldr	r2, [pc, #96]	; (8001418 <HAL_DAC_MspInit+0x88>)
 80013b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_DAC_MspInit+0x88>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_DAC_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_DAC_MspInit+0x88>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_DAC_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e2:	2310      	movs	r3, #16
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <HAL_DAC_MspInit+0x8c>)
 80013f6:	f001 f96b 	bl	80026d0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	210f      	movs	r1, #15
 80013fe:	2036      	movs	r0, #54	; 0x36
 8001400:	f000 ffe6 	bl	80023d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001404:	2036      	movs	r0, #54	; 0x36
 8001406:	f000 ffff 	bl	8002408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40007400 	.word	0x40007400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0ae      	sub	sp, #184	; 0xb8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2290      	movs	r2, #144	; 0x90
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f006 f800 	bl	8007446 <memset>
  if(huart->Instance==USART3)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_UART_MspInit+0xb4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d13c      	bne.n	80014ca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001456:	2300      	movs	r3, #0
 8001458:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4618      	mov	r0, r3
 8001460:	f002 f9aa 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800146a:	f7ff fe61 	bl	8001130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_UART_MspInit+0xb8>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <HAL_UART_MspInit+0xb8>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_UART_MspInit+0xb8>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_UART_MspInit+0xb8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_UART_MspInit+0xb8>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_UART_MspInit+0xb8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b8:	2307      	movs	r3, #7
 80014ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_UART_MspInit+0xbc>)
 80014c6:	f001 f903 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	37b8      	adds	r7, #184	; 0xb8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40004800 	.word	0x40004800
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020c00 	.word	0x40020c00

080014e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0ae      	sub	sp, #184	; 0xb8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2290      	movs	r2, #144	; 0x90
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f005 ffa0 	bl	8007446 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800150e:	d159      	bne.n	80015c4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001514:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4618      	mov	r0, r3
 8001522:	f002 f949 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800152c:	f7ff fe00 	bl	8001130 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_PCD_MspInit+0xec>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4a25      	ldr	r2, [pc, #148]	; (80015cc <HAL_PCD_MspInit+0xec>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_PCD_MspInit+0xec>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001548:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001562:	230a      	movs	r3, #10
 8001564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800156c:	4619      	mov	r1, r3
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <HAL_PCD_MspInit+0xf0>)
 8001570:	f001 f8ae 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800158c:	4619      	mov	r1, r3
 800158e:	4810      	ldr	r0, [pc, #64]	; (80015d0 <HAL_PCD_MspInit+0xf0>)
 8001590:	f001 f89e 	bl	80026d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_PCD_MspInit+0xec>)
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <HAL_PCD_MspInit+0xec>)
 800159a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159e:	6353      	str	r3, [r2, #52]	; 0x34
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_PCD_MspInit+0xec>)
 80015a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_PCD_MspInit+0xec>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <HAL_PCD_MspInit+0xec>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6453      	str	r3, [r2, #68]	; 0x44
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_PCD_MspInit+0xec>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	37b8      	adds	r7, #184	; 0xb8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	; 0x38
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_InitTick+0xe0>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <HAL_InitTick+0xe0>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_InitTick+0xe0>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015fc:	f107 0210 	add.w	r2, r7, #16
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f002 f8a4 	bl	8003754 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001612:	2b00      	cmp	r3, #0
 8001614:	d103      	bne.n	800161e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001616:	f002 f875 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 800161a:	6378      	str	r0, [r7, #52]	; 0x34
 800161c:	e004      	b.n	8001628 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800161e:	f002 f871 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8001622:	4603      	mov	r3, r0
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162a:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <HAL_InitTick+0xe4>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	3b01      	subs	r3, #1
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_InitTick+0xe8>)
 8001638:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <HAL_InitTick+0xec>)
 800163a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_InitTick+0xe8>)
 800163e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001642:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_InitTick+0xe8>)
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_InitTick+0xe8>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_InitTick+0xe8>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_InitTick+0xe8>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800165c:	4817      	ldr	r0, [pc, #92]	; (80016bc <HAL_InitTick+0xe8>)
 800165e:	f002 fcd3 	bl	8004008 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11b      	bne.n	80016a8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001670:	4812      	ldr	r0, [pc, #72]	; (80016bc <HAL_InitTick+0xe8>)
 8001672:	f002 fd2b 	bl	80040cc <HAL_TIM_Base_Start_IT>
 8001676:	4603      	mov	r3, r0
 8001678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800167c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001680:	2b00      	cmp	r3, #0
 8001682:	d111      	bne.n	80016a8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001684:	2036      	movs	r0, #54	; 0x36
 8001686:	f000 febf 	bl	8002408 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d808      	bhi.n	80016a2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	2036      	movs	r0, #54	; 0x36
 8001696:	f000 fe9b 	bl	80023d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_InitTick+0xf0>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e002      	b.n	80016a8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3738      	adds	r7, #56	; 0x38
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	20000894 	.word	0x20000894
 80016c0:	40001000 	.word	0x40001000
 80016c4:	20000018 	.word	0x20000018

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler+0x4>

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <TIM6_DAC_IRQHandler+0x20>)
 80016fa:	791b      	ldrb	r3, [r3, #4]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <TIM6_DAC_IRQHandler+0x20>)
 8001704:	f000 ff02 	bl	800250c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <TIM6_DAC_IRQHandler+0x24>)
 800170a:	f002 fd57 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000250 	.word	0x20000250
 8001718:	20000894 	.word	0x20000894

0800171c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return 1;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_kill>:

int _kill(int pid, int sig)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001736:	f005 fed9 	bl	80074ec <__errno>
 800173a:	4603      	mov	r3, r0
 800173c:	2216      	movs	r2, #22
 800173e:	601a      	str	r2, [r3, #0]
  return -1;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_exit>:

void _exit (int status)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ffe7 	bl	800172c <_kill>
  while (1) {}    /* Make sure we hang here */
 800175e:	e7fe      	b.n	800175e <_exit+0x12>

08001760 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e00a      	b.n	8001788 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001772:	f3af 8000 	nop.w
 8001776:	4601      	mov	r1, r0
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	b2ca      	uxtb	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbf0      	blt.n	8001772 <_read+0x12>
  }

  return len;
 8001790:	687b      	ldr	r3, [r7, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e009      	b.n	80017c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	60ba      	str	r2, [r7, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf1      	blt.n	80017ac <_write+0x12>
  }
  return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_close>:

int _close(int file)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fa:	605a      	str	r2, [r3, #4]
  return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_isatty>:

int _isatty(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f005 fe3e 	bl	80074ec <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20080000 	.word	0x20080000
 800189c:	00000400 	.word	0x00000400
 80018a0:	200008e0 	.word	0x200008e0
 80018a4:	20004b48 	.word	0x20004b48

080018a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 80018e2:	2306      	movs	r3, #6
 80018e4:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80018ea:	2301      	movs	r3, #1
 80018ec:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	4619      	mov	r1, r3
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fa63 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 8001900:	f7ff fc16 	bl	8001130 <Error_Handler>
	}
	return;
 8001904:	bf00      	nop
 8001906:	bf00      	nop
}
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001916:	490e      	ldr	r1, [pc, #56]	; (8001950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800192c:	4c0b      	ldr	r4, [pc, #44]	; (800195c <LoopFillZerobss+0x26>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800193a:	f7ff ffb5 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f005 fddb 	bl	80074f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7fe feb3 	bl	80006ac <main>
  bx  lr    
 8001946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001954:	08009b5c 	.word	0x08009b5c
  ldr r2, =_sbss
 8001958:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800195c:	20004b48 	.word	0x20004b48

08001960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC_IRQHandler>

08001962 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001966:	2003      	movs	r0, #3
 8001968:	f000 fd27 	bl	80023ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196c:	200f      	movs	r0, #15
 800196e:	f7ff fe31 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001972:	f7ff fc8b 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	2000001c 	.word	0x2000001c
 80019a0:	200008e4 	.word	0x200008e4

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200008e4 	.word	0x200008e4

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000001c 	.word	0x2000001c

08001a04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e031      	b.n	8001a7e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fc5a 	bl	80012dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_ADC_Init+0x84>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	f043 0202 	orr.w	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fb0a 	bl	800206c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a6e:	e001      	b.n	8001a74 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	ffffeefd 	.word	0xffffeefd

08001a8c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Start+0x1a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e0ad      	b.n	8001c02 <HAL_ADC_Start+0x176>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d018      	beq.n	8001aee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_ADC_Start+0x184>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	; (8001c14 <HAL_ADC_Start+0x188>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9a      	lsrs	r2, r3, #18
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ae0:	e002      	b.n	8001ae8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f9      	bne.n	8001ae2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d175      	bne.n	8001be8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b00:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <HAL_ADC_Start+0x18c>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f023 0206 	bic.w	r2, r3, #6
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_ADC_Start+0x190>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10f      	bne.n	8001b8a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d143      	bne.n	8001c00 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	e03a      	b.n	8001c00 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a24      	ldr	r2, [pc, #144]	; (8001c20 <HAL_ADC_Start+0x194>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d10e      	bne.n	8001bb2 <HAL_ADC_Start+0x126>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_ADC_Start+0x190>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d120      	bne.n	8001c00 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_ADC_Start+0x198>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d11b      	bne.n	8001c00 <HAL_ADC_Start+0x174>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d114      	bne.n	8001c00 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	e00b      	b.n	8001c00 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f043 0210 	orr.w	r2, r3, #16
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000014 	.word	0x20000014
 8001c14:	431bde83 	.word	0x431bde83
 8001c18:	fffff8fe 	.word	0xfffff8fe
 8001c1c:	40012300 	.word	0x40012300
 8001c20:	40012000 	.word	0x40012000
 8001c24:	40012200 	.word	0x40012200

08001c28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Stop+0x16>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e01f      	b.n	8001c7e <HAL_ADC_Stop+0x56>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d107      	bne.n	8001c74 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_ADC_Stop+0x64>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	ffffeefe 	.word	0xffffeefe

08001c90 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cac:	d113      	bne.n	8001cd6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0220 	orr.w	r2, r3, #32
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e063      	b.n	8001d9e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cd6:	f7ff fe65 	bl	80019a4 <HAL_GetTick>
 8001cda:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cdc:	e021      	b.n	8001d22 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d01d      	beq.n	8001d22 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <HAL_ADC_PollForConversion+0x6c>
 8001cec:	f7ff fe5a 	bl	80019a4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d212      	bcs.n	8001d22 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d00b      	beq.n	8001d22 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f043 0204 	orr.w	r2, r3, #4
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e03d      	b.n	8001d9e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d1d6      	bne.n	8001cde <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0212 	mvn.w	r2, #18
 8001d38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d123      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d11f      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d111      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e136      	b.n	800204a <HAL_ADC_ConfigChannel+0x28a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d93a      	bls.n	8001e62 <HAL_ADC_ConfigChannel+0xa2>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001df4:	d035      	beq.n	8001e62 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68d9      	ldr	r1, [r3, #12]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b1e      	subs	r3, #30
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8d      	ldr	r2, [pc, #564]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10a      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	061a      	lsls	r2, r3, #24
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3a:	e035      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68d9      	ldr	r1, [r3, #12]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4403      	add	r3, r0
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	409a      	lsls	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e60:	e022      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6919      	ldr	r1, [r3, #16]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	400a      	ands	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6919      	ldr	r1, [r3, #16]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4403      	add	r3, r0
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	d824      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b05      	subs	r3, #5
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	400a      	ands	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b05      	subs	r3, #5
 8001eec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef8:	e04c      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d824      	bhi.n	8001f4c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b23      	subs	r3, #35	; 0x23
 8001f14:	221f      	movs	r2, #31
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	400a      	ands	r2, r1
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b23      	subs	r3, #35	; 0x23
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4a:	e023      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b41      	subs	r3, #65	; 0x41
 8001f5e:	221f      	movs	r2, #31
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43da      	mvns	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b41      	subs	r3, #65	; 0x41
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fb2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10f      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d10b      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fd0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fdc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d12b      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x23a>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b11      	cmp	r3, #17
 8001ff8:	d122      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8002000:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002004:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 800200c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002010:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_ADC_ConfigChannel+0x2a4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x2a8>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9a      	lsrs	r2, r3, #18
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002032:	e002      	b.n	800203a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3b01      	subs	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f9      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	10000012 	.word	0x10000012
 800205c:	40012000 	.word	0x40012000
 8002060:	40012300 	.word	0x40012300
 8002064:	20000014 	.word	0x20000014
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002074:	4b78      	ldr	r3, [pc, #480]	; (8002258 <ADC_Init+0x1ec>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a77      	ldr	r2, [pc, #476]	; (8002258 <ADC_Init+0x1ec>)
 800207a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800207e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002080:	4b75      	ldr	r3, [pc, #468]	; (8002258 <ADC_Init+0x1ec>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4973      	ldr	r1, [pc, #460]	; (8002258 <ADC_Init+0x1ec>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800209c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	021a      	lsls	r2, r3, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6899      	ldr	r1, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	4a58      	ldr	r2, [pc, #352]	; (800225c <ADC_Init+0x1f0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d022      	beq.n	8002146 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800210e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	e00f      	b.n	8002166 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002164:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0202 	bic.w	r2, r2, #2
 8002174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	005a      	lsls	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01b      	beq.n	80021cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	3b01      	subs	r3, #1
 80021c0:	035a      	lsls	r2, r3, #13
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e007      	b.n	80021dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	051a      	lsls	r2, r3, #20
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800221e:	025a      	lsls	r2, r3, #9
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	029a      	lsls	r2, r3, #10
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40012300 	.word	0x40012300
 800225c:	0f000001 	.word	0x0f000001

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	4313      	orrs	r3, r2
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	05fa0000 	.word	0x05fa0000

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff4c 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e2:	f7ff ff61 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 80023e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f7ff ffb1 	bl	8002354 <NVIC_EncodePriority>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff80 	bl	8002300 <__NVIC_SetPriority>
}
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff54 	bl	80022c4 <__NVIC_EnableIRQ>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e014      	b.n	8002460 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	791b      	ldrb	r3, [r3, #4]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe ffa2 	bl	8001390 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	795b      	ldrb	r3, [r3, #5]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_DAC_Start+0x16>
 800247a:	2302      	movs	r3, #2
 800247c:	e040      	b.n	8002500 <HAL_DAC_Start+0x98>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10f      	bne.n	80024c8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80024b2:	2b3c      	cmp	r3, #60	; 0x3c
 80024b4:	d11d      	bne.n	80024f2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	e014      	b.n	80024f2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	213c      	movs	r1, #60	; 0x3c
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	429a      	cmp	r2, r3
 80024e0:	d107      	bne.n	80024f2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0202 	orr.w	r2, r2, #2
 80024f0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800251e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002522:	d120      	bne.n	8002566 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002532:	d118      	bne.n	8002566 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800255e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f852 	bl	800260a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002574:	d120      	bne.n	80025b8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002584:	d118      	bne.n	80025b8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f043 0202 	orr.w	r2, r3, #2
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80025b0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f882 	bl	80026bc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	3308      	adds	r3, #8
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e004      	b.n	80025f4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3314      	adds	r3, #20
 80025f2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	461a      	mov	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800261e:	b480      	push	{r7}
 8002620:	b087      	sub	sp, #28
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	795b      	ldrb	r3, [r3, #5]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_DAC_ConfigChannel+0x18>
 8002632:	2302      	movs	r3, #2
 8002634:	e03c      	b.n	80026b0 <HAL_DAC_ConfigChannel+0x92>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2202      	movs	r2, #2
 8002640:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4013      	ands	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	22c0      	movs	r2, #192	; 0xc0
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43da      	mvns	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	400a      	ands	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e175      	b.n	80029dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	429a      	cmp	r2, r3
 800270a:	f040 8164 	bne.w	80029d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d005      	beq.n	8002726 <HAL_GPIO_Init+0x56>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d130      	bne.n	8002788 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 0201 	and.w	r2, r3, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b03      	cmp	r3, #3
 8002792:	d017      	beq.n	80027c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d123      	bne.n	8002818 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	220f      	movs	r2, #15
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80be 	beq.w	80029d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <HAL_GPIO_Init+0x324>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a65      	ldr	r2, [pc, #404]	; (80029f4 <HAL_GPIO_Init+0x324>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_GPIO_Init+0x324>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002872:	4a61      	ldr	r2, [pc, #388]	; (80029f8 <HAL_GPIO_Init+0x328>)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_GPIO_Init+0x32c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d037      	beq.n	800290e <HAL_GPIO_Init+0x23e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_GPIO_Init+0x330>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d031      	beq.n	800290a <HAL_GPIO_Init+0x23a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a56      	ldr	r2, [pc, #344]	; (8002a04 <HAL_GPIO_Init+0x334>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d02b      	beq.n	8002906 <HAL_GPIO_Init+0x236>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a55      	ldr	r2, [pc, #340]	; (8002a08 <HAL_GPIO_Init+0x338>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d025      	beq.n	8002902 <HAL_GPIO_Init+0x232>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_GPIO_Init+0x33c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01f      	beq.n	80028fe <HAL_GPIO_Init+0x22e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <HAL_GPIO_Init+0x340>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_GPIO_Init+0x22a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <HAL_GPIO_Init+0x344>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x226>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a51      	ldr	r2, [pc, #324]	; (8002a18 <HAL_GPIO_Init+0x348>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x222>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a50      	ldr	r2, [pc, #320]	; (8002a1c <HAL_GPIO_Init+0x34c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x21e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_GPIO_Init+0x350>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x21a>
 80028e6:	2309      	movs	r3, #9
 80028e8:	e012      	b.n	8002910 <HAL_GPIO_Init+0x240>
 80028ea:	230a      	movs	r3, #10
 80028ec:	e010      	b.n	8002910 <HAL_GPIO_Init+0x240>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00e      	b.n	8002910 <HAL_GPIO_Init+0x240>
 80028f2:	2307      	movs	r3, #7
 80028f4:	e00c      	b.n	8002910 <HAL_GPIO_Init+0x240>
 80028f6:	2306      	movs	r3, #6
 80028f8:	e00a      	b.n	8002910 <HAL_GPIO_Init+0x240>
 80028fa:	2305      	movs	r3, #5
 80028fc:	e008      	b.n	8002910 <HAL_GPIO_Init+0x240>
 80028fe:	2304      	movs	r3, #4
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x240>
 8002902:	2303      	movs	r3, #3
 8002904:	e004      	b.n	8002910 <HAL_GPIO_Init+0x240>
 8002906:	2302      	movs	r3, #2
 8002908:	e002      	b.n	8002910 <HAL_GPIO_Init+0x240>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_GPIO_Init+0x240>
 800290e:	2300      	movs	r3, #0
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f002 0203 	and.w	r2, r2, #3
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4093      	lsls	r3, r2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002920:	4935      	ldr	r1, [pc, #212]	; (80029f8 <HAL_GPIO_Init+0x328>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_GPIO_Init+0x354>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002952:	4a34      	ldr	r2, [pc, #208]	; (8002a24 <HAL_GPIO_Init+0x354>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002958:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <HAL_GPIO_Init+0x354>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800297c:	4a29      	ldr	r2, [pc, #164]	; (8002a24 <HAL_GPIO_Init+0x354>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002982:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <HAL_GPIO_Init+0x354>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a6:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <HAL_GPIO_Init+0x354>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_GPIO_Init+0x354>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d0:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <HAL_GPIO_Init+0x354>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3301      	adds	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	f67f ae86 	bls.w	80026f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40013800 	.word	0x40013800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40021400 	.word	0x40021400
 8002a14:	40021800 	.word	0x40021800
 8002a18:	40021c00 	.word	0x40021c00
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40022400 	.word	0x40022400
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5c:	b08f      	sub	sp, #60	; 0x3c
 8002a5e:	af0a      	add	r7, sp, #40	; 0x28
 8002a60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e116      	b.n	8002c9a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fd2a 	bl	80014e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fad0 	bl	8005050 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	687e      	ldr	r6, [r7, #4]
 8002ab8:	466d      	mov	r5, sp
 8002aba:	f106 0410 	add.w	r4, r6, #16
 8002abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ace:	1d33      	adds	r3, r6, #4
 8002ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f002 fa64 	bl	8004fa0 <USB_CoreInit>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0d7      	b.n	8002c9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 fabe 	bl	8005072 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e04a      	b.n	8002b92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	333d      	adds	r3, #61	; 0x3d
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333c      	adds	r3, #60	; 0x3c
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	b298      	uxth	r0, r3
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	3344      	adds	r3, #68	; 0x44
 8002b38:	4602      	mov	r2, r0
 8002b3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3340      	adds	r3, #64	; 0x40
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3348      	adds	r3, #72	; 0x48
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334c      	adds	r3, #76	; 0x4c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3354      	adds	r3, #84	; 0x54
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3af      	bcc.n	8002afc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e044      	b.n	8002c2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3b5      	bcc.n	8002ba2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	687e      	ldr	r6, [r7, #4]
 8002c3e:	466d      	mov	r5, sp
 8002c40:	f106 0410 	add.w	r4, r6, #16
 8002c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c50:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c54:	1d33      	adds	r3, r6, #4
 8002c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c58:	6838      	ldr	r0, [r7, #0]
 8002c5a:	f002 fa57 	bl	800510c <USB_DevInit>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e014      	b.n	8002c9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d102      	bne.n	8002c8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f80b 	bl	8002ca4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 fc15 	bl	80054c2 <USB_DevDisconnect>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ca4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	10000003 	.word	0x10000003

08002cec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40007000 	.word	0x40007000

08002d0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a22      	ldr	r2, [pc, #136]	; (8002da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d3a:	f7fe fe33 	bl	80019a4 <HAL_GetTick>
 8002d3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d40:	e009      	b.n	8002d56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d42:	f7fe fe2f 	bl	80019a4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d50:	d901      	bls.n	8002d56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e022      	b.n	8002d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d1ee      	bne.n	8002d42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d70:	f7fe fe18 	bl	80019a4 <HAL_GetTick>
 8002d74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d76:	e009      	b.n	8002d8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d78:	f7fe fe14 	bl	80019a4 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d86:	d901      	bls.n	8002d8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e007      	b.n	8002d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d98:	d1ee      	bne.n	8002d78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40007000 	.word	0x40007000

08002dac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e29b      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8087 	beq.w	8002ede <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd0:	4b96      	ldr	r3, [pc, #600]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d00c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ddc:	4b93      	ldr	r3, [pc, #588]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d112      	bne.n	8002e0e <HAL_RCC_OscConfig+0x62>
 8002de8:	4b90      	ldr	r3, [pc, #576]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df4:	d10b      	bne.n	8002e0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df6:	4b8d      	ldr	r3, [pc, #564]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d06c      	beq.n	8002edc <HAL_RCC_OscConfig+0x130>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d168      	bne.n	8002edc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e275      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d106      	bne.n	8002e26 <HAL_RCC_OscConfig+0x7a>
 8002e18:	4b84      	ldr	r3, [pc, #528]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a83      	ldr	r2, [pc, #524]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e02e      	b.n	8002e84 <HAL_RCC_OscConfig+0xd8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x9c>
 8002e2e:	4b7f      	ldr	r3, [pc, #508]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7e      	ldr	r2, [pc, #504]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b7c      	ldr	r3, [pc, #496]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a7b      	ldr	r2, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e01d      	b.n	8002e84 <HAL_RCC_OscConfig+0xd8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0xc0>
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a75      	ldr	r2, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a72      	ldr	r2, [pc, #456]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0xd8>
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a6e      	ldr	r2, [pc, #440]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b6c      	ldr	r3, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6b      	ldr	r2, [pc, #428]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fd8a 	bl	80019a4 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fd86 	bl	80019a4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e229      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	4b61      	ldr	r3, [pc, #388]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0xe8>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fd76 	bl	80019a4 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fd72 	bl	80019a4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e215      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x110>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d069      	beq.n	8002fbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eea:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef6:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d11c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x190>
 8002f02:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_RCC_OscConfig+0x17a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e1e9      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	493d      	ldr	r1, [pc, #244]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3a:	e040      	b.n	8002fbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f44:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a38      	ldr	r2, [pc, #224]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fd28 	bl	80019a4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f58:	f7fe fd24 	bl	80019a4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1c7      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4929      	ldr	r1, [pc, #164]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
 8002f8a:	e018      	b.n	8002fbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a26      	ldr	r2, [pc, #152]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fd04 	bl	80019a4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fd00 	bl	80019a4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1a3      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d038      	beq.n	800303c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d019      	beq.n	8003006 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	4a15      	ldr	r2, [pc, #84]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fe fce1 	bl	80019a4 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fe fcdd 	bl	80019a4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e180      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x23a>
 8003004:	e01a      	b.n	800303c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_OscConfig+0x280>)
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	4a08      	ldr	r2, [pc, #32]	; (800302c <HAL_RCC_OscConfig+0x280>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003012:	f7fe fcc7 	bl	80019a4 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301a:	f7fe fcc3 	bl	80019a4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d903      	bls.n	8003030 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e166      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
 800302c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	4b92      	ldr	r3, [pc, #584]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ee      	bne.n	800301a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a4 	beq.w	8003192 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304a:	4b8c      	ldr	r3, [pc, #560]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	4b89      	ldr	r3, [pc, #548]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a88      	ldr	r2, [pc, #544]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b86      	ldr	r3, [pc, #536]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003072:	4b83      	ldr	r3, [pc, #524]	; (8003280 <HAL_RCC_OscConfig+0x4d4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d118      	bne.n	80030b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800307e:	4b80      	ldr	r3, [pc, #512]	; (8003280 <HAL_RCC_OscConfig+0x4d4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7f      	ldr	r2, [pc, #508]	; (8003280 <HAL_RCC_OscConfig+0x4d4>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308a:	f7fe fc8b 	bl	80019a4 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003092:	f7fe fc87 	bl	80019a4 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b64      	cmp	r3, #100	; 0x64
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e12a      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a4:	4b76      	ldr	r3, [pc, #472]	; (8003280 <HAL_RCC_OscConfig+0x4d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d106      	bne.n	80030c6 <HAL_RCC_OscConfig+0x31a>
 80030b8:	4b70      	ldr	r3, [pc, #448]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a6f      	ldr	r2, [pc, #444]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
 80030c4:	e02d      	b.n	8003122 <HAL_RCC_OscConfig+0x376>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x33c>
 80030ce:	4b6b      	ldr	r3, [pc, #428]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4a6a      	ldr	r2, [pc, #424]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6713      	str	r3, [r2, #112]	; 0x70
 80030da:	4b68      	ldr	r3, [pc, #416]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a67      	ldr	r2, [pc, #412]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030e0:	f023 0304 	bic.w	r3, r3, #4
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
 80030e6:	e01c      	b.n	8003122 <HAL_RCC_OscConfig+0x376>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d10c      	bne.n	800310a <HAL_RCC_OscConfig+0x35e>
 80030f0:	4b62      	ldr	r3, [pc, #392]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	4a61      	ldr	r2, [pc, #388]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	6713      	str	r3, [r2, #112]	; 0x70
 80030fc:	4b5f      	ldr	r3, [pc, #380]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a5e      	ldr	r2, [pc, #376]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	e00b      	b.n	8003122 <HAL_RCC_OscConfig+0x376>
 800310a:	4b5c      	ldr	r3, [pc, #368]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a5b      	ldr	r2, [pc, #364]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
 8003116:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d015      	beq.n	8003156 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fe fc3b 	bl	80019a4 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe fc37 	bl	80019a4 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0d8      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003148:	4b4c      	ldr	r3, [pc, #304]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ee      	beq.n	8003132 <HAL_RCC_OscConfig+0x386>
 8003154:	e014      	b.n	8003180 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7fe fc25 	bl	80019a4 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fe fc21 	bl	80019a4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	; 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0c2      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003174:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ee      	bne.n	800315e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a3c      	ldr	r2, [pc, #240]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800318c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80ae 	beq.w	80032f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319c:	4b37      	ldr	r3, [pc, #220]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d06d      	beq.n	8003284 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d14b      	bne.n	8003248 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b0:	4b32      	ldr	r3, [pc, #200]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a31      	ldr	r2, [pc, #196]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe fbf2 	bl	80019a4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe fbee 	bl	80019a4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e091      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	019b      	lsls	r3, r3, #6
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	3b01      	subs	r3, #1
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	071b      	lsls	r3, r3, #28
 800320e:	491b      	ldr	r1, [pc, #108]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a18      	ldr	r2, [pc, #96]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe fbc0 	bl	80019a4 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe fbbc 	bl	80019a4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e05f      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x47c>
 8003246:	e057      	b.n	80032f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0b      	ldr	r2, [pc, #44]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 800324e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fba6 	bl	80019a4 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fba2 	bl	80019a4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e045      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCC_OscConfig+0x4d0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x4b0>
 800327a:	e03d      	b.n	80032f8 <HAL_RCC_OscConfig+0x54c>
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003284:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <HAL_RCC_OscConfig+0x558>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d030      	beq.n	80032f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d129      	bne.n	80032f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d122      	bne.n	80032f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032b4:	4013      	ands	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032bc:	4293      	cmp	r3, r2
 80032be:	d119      	bne.n	80032f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	3b01      	subs	r3, #1
 80032ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d10f      	bne.n	80032f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800

08003308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0d0      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d910      	bls.n	8003350 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b67      	ldr	r3, [pc, #412]	; (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 020f 	bic.w	r2, r3, #15
 8003336:	4965      	ldr	r1, [pc, #404]	; (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d040      	beq.n	800342c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d115      	bne.n	80033ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e073      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e06b      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4936      	ldr	r1, [pc, #216]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fc:	f7fe fad2 	bl	80019a4 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe face 	bl	80019a4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e053      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d210      	bcs.n	800345c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 020f 	bic.w	r2, r3, #15
 8003442:	4922      	ldr	r1, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x1cc>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1d0>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1d4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f88a 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	080097c4 	.word	0x080097c4
 80034d8:	20000014 	.word	0x20000014
 80034dc:	20000018 	.word	0x20000018

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b094      	sub	sp, #80	; 0x50
 80034e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	647b      	str	r3, [r7, #68]	; 0x44
 80034ec:	2300      	movs	r3, #0
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f0:	2300      	movs	r3, #0
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f8:	4b79      	ldr	r3, [pc, #484]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d00d      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 8003504:	2b08      	cmp	r3, #8
 8003506:	f200 80e1 	bhi.w	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x3a>
 8003512:	e0db      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003516:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003518:	e0db      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b73      	ldr	r3, [pc, #460]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800351c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800351e:	e0d8      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800352a:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d063      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003540:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
 800354e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	0159      	lsls	r1, r3, #5
 8003560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003564:	0150      	lsls	r0, r2, #5
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4621      	mov	r1, r4
 800356c:	1a51      	subs	r1, r2, r1
 800356e:	6139      	str	r1, [r7, #16]
 8003570:	4629      	mov	r1, r5
 8003572:	eb63 0301 	sbc.w	r3, r3, r1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003584:	4659      	mov	r1, fp
 8003586:	018b      	lsls	r3, r1, #6
 8003588:	4651      	mov	r1, sl
 800358a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358e:	4651      	mov	r1, sl
 8003590:	018a      	lsls	r2, r1, #6
 8003592:	4651      	mov	r1, sl
 8003594:	ebb2 0801 	subs.w	r8, r2, r1
 8003598:	4659      	mov	r1, fp
 800359a:	eb63 0901 	sbc.w	r9, r3, r1
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035b2:	4690      	mov	r8, r2
 80035b4:	4699      	mov	r9, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	eb18 0303 	adds.w	r3, r8, r3
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	462b      	mov	r3, r5
 80035c0:	eb49 0303 	adc.w	r3, r9, r3
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035d2:	4629      	mov	r1, r5
 80035d4:	024b      	lsls	r3, r1, #9
 80035d6:	4621      	mov	r1, r4
 80035d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035dc:	4621      	mov	r1, r4
 80035de:	024a      	lsls	r2, r1, #9
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	2200      	movs	r2, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035f0:	f7fc fe7e 	bl	80002f0 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035fc:	e058      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	2200      	movs	r2, #0
 8003606:	4618      	mov	r0, r3
 8003608:	4611      	mov	r1, r2
 800360a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	0159      	lsls	r1, r3, #5
 8003626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362a:	0150      	lsls	r0, r2, #5
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4641      	mov	r1, r8
 8003632:	ebb2 0a01 	subs.w	sl, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb63 0b01 	sbc.w	fp, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800364c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003650:	ebb2 040a 	subs.w	r4, r2, sl
 8003654:	eb63 050b 	sbc.w	r5, r3, fp
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	00eb      	lsls	r3, r5, #3
 8003662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	4614      	mov	r4, r2
 800366a:	461d      	mov	r5, r3
 800366c:	4643      	mov	r3, r8
 800366e:	18e3      	adds	r3, r4, r3
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	464b      	mov	r3, r9
 8003674:	eb45 0303 	adc.w	r3, r5, r3
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003686:	4629      	mov	r1, r5
 8003688:	028b      	lsls	r3, r1, #10
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003690:	4621      	mov	r1, r4
 8003692:	028a      	lsls	r2, r1, #10
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369a:	2200      	movs	r2, #0
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	61fa      	str	r2, [r7, #28]
 80036a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a4:	f7fc fe24 	bl	80002f0 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80036c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3750      	adds	r7, #80	; 0x50
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000014 	.word	0x20000014

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a9b      	lsrs	r3, r3, #10
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	080097d4 	.word	0x080097d4

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003730:	f7ff ffdc 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0b5b      	lsrs	r3, r3, #13
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	080097d4 	.word	0x080097d4

08003754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	220f      	movs	r2, #15
 8003762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0203 	and.w	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_RCC_GetClockConfig+0x60>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	601a      	str	r2, [r3, #0]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40023c00 	.word	0x40023c00

080037b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d012      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037e0:	4b69      	ldr	r3, [pc, #420]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a68      	ldr	r2, [pc, #416]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037ea:	6093      	str	r3, [r2, #8]
 80037ec:	4b66      	ldr	r3, [pc, #408]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	4964      	ldr	r1, [pc, #400]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003802:	2301      	movs	r3, #1
 8003804:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d017      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003812:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	4959      	ldr	r1, [pc, #356]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003830:	d101      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003832:	2301      	movs	r3, #1
 8003834:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800383e:	2301      	movs	r3, #1
 8003840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d017      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800384e:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003854:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	494a      	ldr	r1, [pc, #296]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386c:	d101      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 808b 	beq.w	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800389c:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	4a39      	ldr	r2, [pc, #228]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a6:	6413      	str	r3, [r2, #64]	; 0x40
 80038a8:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038b4:	4b35      	ldr	r3, [pc, #212]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a34      	ldr	r2, [pc, #208]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c0:	f7fe f870 	bl	80019a4 <HAL_GetTick>
 80038c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c8:	f7fe f86c 	bl	80019a4 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e38f      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038da:	4b2c      	ldr	r3, [pc, #176]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038e6:	4b28      	ldr	r3, [pc, #160]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d035      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d02e      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800390e:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003918:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391a:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003926:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800392c:	4b16      	ldr	r3, [pc, #88]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d114      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe f834 	bl	80019a4 <HAL_GetTick>
 800393c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393e:	e00a      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003940:	f7fe f830 	bl	80019a4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e351      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ee      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800396e:	d111      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800397e:	400b      	ands	r3, r1
 8003980:	4901      	ldr	r1, [pc, #4]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
 8003986:	e00b      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000
 8003990:	0ffffcff 	.word	0x0ffffcff
 8003994:	4bac      	ldr	r3, [pc, #688]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4aab      	ldr	r2, [pc, #684]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800399e:	6093      	str	r3, [r2, #8]
 80039a0:	4ba9      	ldr	r3, [pc, #676]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	49a6      	ldr	r1, [pc, #664]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039be:	4ba2      	ldr	r3, [pc, #648]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c4:	4aa0      	ldr	r2, [pc, #640]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039ce:	4b9e      	ldr	r3, [pc, #632]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	499b      	ldr	r1, [pc, #620]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ec:	4b96      	ldr	r3, [pc, #600]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fa:	4993      	ldr	r1, [pc, #588]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a0e:	4b8e      	ldr	r3, [pc, #568]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1c:	498a      	ldr	r1, [pc, #552]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a30:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3e:	4982      	ldr	r1, [pc, #520]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a52:	4b7d      	ldr	r3, [pc, #500]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4979      	ldr	r1, [pc, #484]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a74:	4b74      	ldr	r3, [pc, #464]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	4971      	ldr	r1, [pc, #452]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a96:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f023 020c 	bic.w	r2, r3, #12
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	4968      	ldr	r1, [pc, #416]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ab8:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	4960      	ldr	r1, [pc, #384]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ada:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	4957      	ldr	r1, [pc, #348]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003afc:	4b52      	ldr	r3, [pc, #328]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	494f      	ldr	r1, [pc, #316]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	4946      	ldr	r1, [pc, #280]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b40:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	493e      	ldr	r1, [pc, #248]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b62:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	4935      	ldr	r1, [pc, #212]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b84:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b92:	492d      	ldr	r1, [pc, #180]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d011      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ba6:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb4:	4924      	ldr	r1, [pc, #144]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc4:	d101      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf4:	4914      	ldr	r1, [pc, #80]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c18:	490b      	ldr	r1, [pc, #44]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00f      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3c:	4902      	ldr	r1, [pc, #8]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c44:	e002      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c58:	4b8a      	ldr	r3, [pc, #552]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c68:	4986      	ldr	r1, [pc, #536]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c7c:	4b81      	ldr	r3, [pc, #516]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8c:	497d      	ldr	r1, [pc, #500]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d006      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80d6 	beq.w	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ca8:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a75      	ldr	r2, [pc, #468]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fd fe76 	bl	80019a4 <HAL_GetTick>
 8003cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cbc:	f7fd fe72 	bl	80019a4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e195      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cce:	4b6d      	ldr	r3, [pc, #436]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d021      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11d      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cee:	4b65      	ldr	r3, [pc, #404]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cfc:	4b61      	ldr	r3, [pc, #388]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d02:	0e1b      	lsrs	r3, r3, #24
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	019a      	lsls	r2, r3, #6
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	071b      	lsls	r3, r3, #28
 8003d22:	4958      	ldr	r1, [pc, #352]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02e      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d54:	d129      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d56:	4b4b      	ldr	r3, [pc, #300]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d64:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	0f1b      	lsrs	r3, r3, #28
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	019a      	lsls	r2, r3, #6
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	061b      	lsls	r3, r3, #24
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	071b      	lsls	r3, r3, #28
 8003d8a:	493e      	ldr	r1, [pc, #248]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d92:	4b3c      	ldr	r3, [pc, #240]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d98:	f023 021f 	bic.w	r2, r3, #31
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4938      	ldr	r1, [pc, #224]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01d      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003db6:	4b33      	ldr	r3, [pc, #204]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dbc:	0e1b      	lsrs	r3, r3, #24
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	0f1b      	lsrs	r3, r3, #28
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	019a      	lsls	r2, r3, #6
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	431a      	orrs	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	071b      	lsls	r3, r3, #28
 8003dea:	4926      	ldr	r1, [pc, #152]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d011      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	019a      	lsls	r2, r3, #6
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	071b      	lsls	r3, r3, #28
 8003e1a:	491a      	ldr	r1, [pc, #104]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e22:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2e:	f7fd fdb9 	bl	80019a4 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e36:	f7fd fdb5 	bl	80019a4 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b64      	cmp	r3, #100	; 0x64
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0d8      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	f040 80ce 	bne.w	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fd fd9c 	bl	80019a4 <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e70:	f7fd fd98 	bl	80019a4 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d904      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0bb      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e88:	4b5e      	ldr	r3, [pc, #376]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e94:	d0ec      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02e      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d12a      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ebe:	4b51      	ldr	r3, [pc, #324]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ecc:	4b4d      	ldr	r3, [pc, #308]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	0f1b      	lsrs	r3, r3, #28
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	019a      	lsls	r2, r3, #6
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	061b      	lsls	r3, r3, #24
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	071b      	lsls	r3, r3, #28
 8003ef2:	4944      	ldr	r1, [pc, #272]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003efa:	4b42      	ldr	r3, [pc, #264]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	493d      	ldr	r1, [pc, #244]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d022      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f28:	d11d      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f2a:	4b36      	ldr	r3, [pc, #216]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	0e1b      	lsrs	r3, r3, #24
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	0f1b      	lsrs	r3, r3, #28
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	431a      	orrs	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4929      	ldr	r1, [pc, #164]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d028      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	0e1b      	lsrs	r3, r3, #24
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	019a      	lsls	r2, r3, #6
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	061b      	lsls	r3, r3, #24
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	4917      	ldr	r1, [pc, #92]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4911      	ldr	r1, [pc, #68]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fd fce8 	bl	80019a4 <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fd8:	f7fd fce4 	bl	80019a4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e007      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff6:	d1ef      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800

08004008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e049      	b.n	80040ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f841 	bl	80040b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f000 fa00 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d001      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e054      	b.n	800418e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a26      	ldr	r2, [pc, #152]	; (800419c <HAL_TIM_Base_Start_IT+0xd0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d022      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x80>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d01d      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x80>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d018      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x80>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x80>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00e      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x80>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <HAL_TIM_Base_Start_IT+0xe0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d009      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x80>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x80>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d115      	bne.n	8004178 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_TIM_Base_Start_IT+0xec>)
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b06      	cmp	r3, #6
 800415c:	d015      	beq.n	800418a <HAL_TIM_Base_Start_IT+0xbe>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004164:	d011      	beq.n	800418a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	e008      	b.n	800418a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e000      	b.n	800418c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40010400 	.word	0x40010400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40001800 	.word	0x40001800
 80041b8:	00010007 	.word	0x00010007

080041bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d122      	bne.n	8004218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d11b      	bne.n	8004218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0202 	mvn.w	r2, #2
 80041e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f905 	bl	800440e <HAL_TIM_IC_CaptureCallback>
 8004204:	e005      	b.n	8004212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8f7 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f908 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b04      	cmp	r3, #4
 8004224:	d122      	bne.n	800426c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b04      	cmp	r3, #4
 8004232:	d11b      	bne.n	800426c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0204 	mvn.w	r2, #4
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8db 	bl	800440e <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8cd 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8de 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b08      	cmp	r3, #8
 8004278:	d122      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b08      	cmp	r3, #8
 8004286:	d11b      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0208 	mvn.w	r2, #8
 8004290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2204      	movs	r2, #4
 8004296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8b1 	bl	800440e <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f8a3 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8b4 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0210 	mvn.w	r2, #16
 80042e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2208      	movs	r2, #8
 80042ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f887 	bl	800440e <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f879 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f88a 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b01      	cmp	r3, #1
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0201 	mvn.w	r2, #1
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fee6 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d10e      	bne.n	800436c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d107      	bne.n	800436c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f91a 	bl	80045a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437a:	d10e      	bne.n	800439a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d107      	bne.n	800439a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f90d 	bl	80045b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d10e      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d107      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f838 	bl	8004436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d10e      	bne.n	80043f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d107      	bne.n	80043f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 0220 	mvn.w	r2, #32
 80043ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f8cd 	bl	800458c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a40      	ldr	r2, [pc, #256]	; (8004560 <TIM_Base_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446a:	d00f      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3d      	ldr	r2, [pc, #244]	; (8004564 <TIM_Base_SetConfig+0x118>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00b      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <TIM_Base_SetConfig+0x11c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3b      	ldr	r2, [pc, #236]	; (800456c <TIM_Base_SetConfig+0x120>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3a      	ldr	r2, [pc, #232]	; (8004570 <TIM_Base_SetConfig+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2f      	ldr	r2, [pc, #188]	; (8004560 <TIM_Base_SetConfig+0x114>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d027      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <TIM_Base_SetConfig+0x118>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d023      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <TIM_Base_SetConfig+0x11c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01f      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2a      	ldr	r2, [pc, #168]	; (800456c <TIM_Base_SetConfig+0x120>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a29      	ldr	r2, [pc, #164]	; (8004570 <TIM_Base_SetConfig+0x124>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d017      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a28      	ldr	r2, [pc, #160]	; (8004574 <TIM_Base_SetConfig+0x128>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a27      	ldr	r2, [pc, #156]	; (8004578 <TIM_Base_SetConfig+0x12c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00f      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a26      	ldr	r2, [pc, #152]	; (800457c <TIM_Base_SetConfig+0x130>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a25      	ldr	r2, [pc, #148]	; (8004580 <TIM_Base_SetConfig+0x134>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a24      	ldr	r2, [pc, #144]	; (8004584 <TIM_Base_SetConfig+0x138>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a23      	ldr	r2, [pc, #140]	; (8004588 <TIM_Base_SetConfig+0x13c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <TIM_Base_SetConfig+0x114>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_Base_SetConfig+0xf8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <TIM_Base_SetConfig+0x124>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d103      	bne.n	800454c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	615a      	str	r2, [r3, #20]
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40010400 	.word	0x40010400
 8004574:	40014000 	.word	0x40014000
 8004578:	40014400 	.word	0x40014400
 800457c:	40014800 	.word	0x40014800
 8004580:	40001800 	.word	0x40001800
 8004584:	40001c00 	.word	0x40001c00
 8004588:	40002000 	.word	0x40002000

0800458c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e040      	b.n	800465c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc ff18 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8b0 	bl	800476c <UART_SetConfig>
 800460c:	4603      	mov	r3, r0
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e022      	b.n	800465c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fb08 	bl	8004c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fb8f 	bl	8004d78 <UART_CheckIdleState>
 800465a:	4603      	mov	r3, r0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004678:	2b20      	cmp	r3, #32
 800467a:	d171      	bne.n	8004760 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_UART_Transmit+0x24>
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e06a      	b.n	8004762 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2221      	movs	r2, #33	; 0x21
 8004698:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800469a:	f7fd f983 	bl	80019a4 <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d108      	bne.n	80046cc <HAL_UART_Transmit+0x68>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e003      	b.n	80046d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046d4:	e02c      	b.n	8004730 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fb96 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e038      	b.n	8004762 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	3302      	adds	r3, #2
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e007      	b.n	800471e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1cc      	bne.n	80046d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2200      	movs	r2, #0
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fb63 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e005      	b.n	8004762 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4ba6      	ldr	r3, [pc, #664]	; (8004a30 <UART_SetConfig+0x2c4>)
 8004798:	4013      	ands	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a94      	ldr	r2, [pc, #592]	; (8004a34 <UART_SetConfig+0x2c8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d120      	bne.n	800482a <UART_SetConfig+0xbe>
 80047e8:	4b93      	ldr	r3, [pc, #588]	; (8004a38 <UART_SetConfig+0x2cc>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d816      	bhi.n	8004824 <UART_SetConfig+0xb8>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x90>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	08004819 	.word	0x08004819
 8004804:	08004813 	.word	0x08004813
 8004808:	0800481f 	.word	0x0800481f
 800480c:	2301      	movs	r3, #1
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e150      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004812:	2302      	movs	r3, #2
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e14d      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004818:	2304      	movs	r3, #4
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e14a      	b.n	8004ab4 <UART_SetConfig+0x348>
 800481e:	2308      	movs	r3, #8
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e147      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004824:	2310      	movs	r3, #16
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e144      	b.n	8004ab4 <UART_SetConfig+0x348>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a83      	ldr	r2, [pc, #524]	; (8004a3c <UART_SetConfig+0x2d0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d132      	bne.n	800489a <UART_SetConfig+0x12e>
 8004834:	4b80      	ldr	r3, [pc, #512]	; (8004a38 <UART_SetConfig+0x2cc>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d828      	bhi.n	8004894 <UART_SetConfig+0x128>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <UART_SetConfig+0xdc>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	0800487d 	.word	0x0800487d
 800484c:	08004895 	.word	0x08004895
 8004850:	08004895 	.word	0x08004895
 8004854:	08004895 	.word	0x08004895
 8004858:	08004889 	.word	0x08004889
 800485c:	08004895 	.word	0x08004895
 8004860:	08004895 	.word	0x08004895
 8004864:	08004895 	.word	0x08004895
 8004868:	08004883 	.word	0x08004883
 800486c:	08004895 	.word	0x08004895
 8004870:	08004895 	.word	0x08004895
 8004874:	08004895 	.word	0x08004895
 8004878:	0800488f 	.word	0x0800488f
 800487c:	2300      	movs	r3, #0
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e118      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004882:	2302      	movs	r3, #2
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e115      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004888:	2304      	movs	r3, #4
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e112      	b.n	8004ab4 <UART_SetConfig+0x348>
 800488e:	2308      	movs	r3, #8
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e10f      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004894:	2310      	movs	r3, #16
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e10c      	b.n	8004ab4 <UART_SetConfig+0x348>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a68      	ldr	r2, [pc, #416]	; (8004a40 <UART_SetConfig+0x2d4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d120      	bne.n	80048e6 <UART_SetConfig+0x17a>
 80048a4:	4b64      	ldr	r3, [pc, #400]	; (8004a38 <UART_SetConfig+0x2cc>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ae:	2b30      	cmp	r3, #48	; 0x30
 80048b0:	d013      	beq.n	80048da <UART_SetConfig+0x16e>
 80048b2:	2b30      	cmp	r3, #48	; 0x30
 80048b4:	d814      	bhi.n	80048e0 <UART_SetConfig+0x174>
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d009      	beq.n	80048ce <UART_SetConfig+0x162>
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d810      	bhi.n	80048e0 <UART_SetConfig+0x174>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <UART_SetConfig+0x15c>
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d006      	beq.n	80048d4 <UART_SetConfig+0x168>
 80048c6:	e00b      	b.n	80048e0 <UART_SetConfig+0x174>
 80048c8:	2300      	movs	r3, #0
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e0f2      	b.n	8004ab4 <UART_SetConfig+0x348>
 80048ce:	2302      	movs	r3, #2
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e0ef      	b.n	8004ab4 <UART_SetConfig+0x348>
 80048d4:	2304      	movs	r3, #4
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e0ec      	b.n	8004ab4 <UART_SetConfig+0x348>
 80048da:	2308      	movs	r3, #8
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e0e9      	b.n	8004ab4 <UART_SetConfig+0x348>
 80048e0:	2310      	movs	r3, #16
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e0e6      	b.n	8004ab4 <UART_SetConfig+0x348>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a56      	ldr	r2, [pc, #344]	; (8004a44 <UART_SetConfig+0x2d8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d120      	bne.n	8004932 <UART_SetConfig+0x1c6>
 80048f0:	4b51      	ldr	r3, [pc, #324]	; (8004a38 <UART_SetConfig+0x2cc>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048fa:	2bc0      	cmp	r3, #192	; 0xc0
 80048fc:	d013      	beq.n	8004926 <UART_SetConfig+0x1ba>
 80048fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004900:	d814      	bhi.n	800492c <UART_SetConfig+0x1c0>
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d009      	beq.n	800491a <UART_SetConfig+0x1ae>
 8004906:	2b80      	cmp	r3, #128	; 0x80
 8004908:	d810      	bhi.n	800492c <UART_SetConfig+0x1c0>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <UART_SetConfig+0x1a8>
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d006      	beq.n	8004920 <UART_SetConfig+0x1b4>
 8004912:	e00b      	b.n	800492c <UART_SetConfig+0x1c0>
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e0cc      	b.n	8004ab4 <UART_SetConfig+0x348>
 800491a:	2302      	movs	r3, #2
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e0c9      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004920:	2304      	movs	r3, #4
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0c6      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004926:	2308      	movs	r3, #8
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e0c3      	b.n	8004ab4 <UART_SetConfig+0x348>
 800492c:	2310      	movs	r3, #16
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e0c0      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a44      	ldr	r2, [pc, #272]	; (8004a48 <UART_SetConfig+0x2dc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d125      	bne.n	8004988 <UART_SetConfig+0x21c>
 800493c:	4b3e      	ldr	r3, [pc, #248]	; (8004a38 <UART_SetConfig+0x2cc>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494a:	d017      	beq.n	800497c <UART_SetConfig+0x210>
 800494c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004950:	d817      	bhi.n	8004982 <UART_SetConfig+0x216>
 8004952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004956:	d00b      	beq.n	8004970 <UART_SetConfig+0x204>
 8004958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495c:	d811      	bhi.n	8004982 <UART_SetConfig+0x216>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <UART_SetConfig+0x1fe>
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d006      	beq.n	8004976 <UART_SetConfig+0x20a>
 8004968:	e00b      	b.n	8004982 <UART_SetConfig+0x216>
 800496a:	2300      	movs	r3, #0
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e0a1      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004970:	2302      	movs	r3, #2
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e09e      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004976:	2304      	movs	r3, #4
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e09b      	b.n	8004ab4 <UART_SetConfig+0x348>
 800497c:	2308      	movs	r3, #8
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e098      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004982:	2310      	movs	r3, #16
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e095      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2f      	ldr	r2, [pc, #188]	; (8004a4c <UART_SetConfig+0x2e0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d125      	bne.n	80049de <UART_SetConfig+0x272>
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <UART_SetConfig+0x2cc>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800499c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a0:	d017      	beq.n	80049d2 <UART_SetConfig+0x266>
 80049a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a6:	d817      	bhi.n	80049d8 <UART_SetConfig+0x26c>
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ac:	d00b      	beq.n	80049c6 <UART_SetConfig+0x25a>
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d811      	bhi.n	80049d8 <UART_SetConfig+0x26c>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <UART_SetConfig+0x254>
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049bc:	d006      	beq.n	80049cc <UART_SetConfig+0x260>
 80049be:	e00b      	b.n	80049d8 <UART_SetConfig+0x26c>
 80049c0:	2301      	movs	r3, #1
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e076      	b.n	8004ab4 <UART_SetConfig+0x348>
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e073      	b.n	8004ab4 <UART_SetConfig+0x348>
 80049cc:	2304      	movs	r3, #4
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e070      	b.n	8004ab4 <UART_SetConfig+0x348>
 80049d2:	2308      	movs	r3, #8
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e06d      	b.n	8004ab4 <UART_SetConfig+0x348>
 80049d8:	2310      	movs	r3, #16
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e06a      	b.n	8004ab4 <UART_SetConfig+0x348>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <UART_SetConfig+0x2e4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d138      	bne.n	8004a5a <UART_SetConfig+0x2ee>
 80049e8:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <UART_SetConfig+0x2cc>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049f6:	d017      	beq.n	8004a28 <UART_SetConfig+0x2bc>
 80049f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049fc:	d82a      	bhi.n	8004a54 <UART_SetConfig+0x2e8>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a02:	d00b      	beq.n	8004a1c <UART_SetConfig+0x2b0>
 8004a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a08:	d824      	bhi.n	8004a54 <UART_SetConfig+0x2e8>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <UART_SetConfig+0x2aa>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	d006      	beq.n	8004a22 <UART_SetConfig+0x2b6>
 8004a14:	e01e      	b.n	8004a54 <UART_SetConfig+0x2e8>
 8004a16:	2300      	movs	r3, #0
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e04b      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e048      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004a22:	2304      	movs	r3, #4
 8004a24:	77fb      	strb	r3, [r7, #31]
 8004a26:	e045      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e042      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004a2e:	bf00      	nop
 8004a30:	efff69f3 	.word	0xefff69f3
 8004a34:	40011000 	.word	0x40011000
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40004400 	.word	0x40004400
 8004a40:	40004800 	.word	0x40004800
 8004a44:	40004c00 	.word	0x40004c00
 8004a48:	40005000 	.word	0x40005000
 8004a4c:	40011400 	.word	0x40011400
 8004a50:	40007800 	.word	0x40007800
 8004a54:	2310      	movs	r3, #16
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e02c      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a72      	ldr	r2, [pc, #456]	; (8004c28 <UART_SetConfig+0x4bc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d125      	bne.n	8004ab0 <UART_SetConfig+0x344>
 8004a64:	4b71      	ldr	r3, [pc, #452]	; (8004c2c <UART_SetConfig+0x4c0>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a72:	d017      	beq.n	8004aa4 <UART_SetConfig+0x338>
 8004a74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a78:	d817      	bhi.n	8004aaa <UART_SetConfig+0x33e>
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7e:	d00b      	beq.n	8004a98 <UART_SetConfig+0x32c>
 8004a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a84:	d811      	bhi.n	8004aaa <UART_SetConfig+0x33e>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <UART_SetConfig+0x326>
 8004a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8e:	d006      	beq.n	8004a9e <UART_SetConfig+0x332>
 8004a90:	e00b      	b.n	8004aaa <UART_SetConfig+0x33e>
 8004a92:	2300      	movs	r3, #0
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e00d      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e00a      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e007      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e004      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004aaa:	2310      	movs	r3, #16
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e001      	b.n	8004ab4 <UART_SetConfig+0x348>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abc:	d15b      	bne.n	8004b76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004abe:	7ffb      	ldrb	r3, [r7, #31]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d828      	bhi.n	8004b16 <UART_SetConfig+0x3aa>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x360>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004af9 	.word	0x08004af9
 8004ad4:	08004b01 	.word	0x08004b01
 8004ad8:	08004b17 	.word	0x08004b17
 8004adc:	08004b07 	.word	0x08004b07
 8004ae0:	08004b17 	.word	0x08004b17
 8004ae4:	08004b17 	.word	0x08004b17
 8004ae8:	08004b17 	.word	0x08004b17
 8004aec:	08004b0f 	.word	0x08004b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fe fe08 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004af4:	61b8      	str	r0, [r7, #24]
        break;
 8004af6:	e013      	b.n	8004b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af8:	f7fe fe18 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8004afc:	61b8      	str	r0, [r7, #24]
        break;
 8004afe:	e00f      	b.n	8004b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b00:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <UART_SetConfig+0x4c4>)
 8004b02:	61bb      	str	r3, [r7, #24]
        break;
 8004b04:	e00c      	b.n	8004b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b06:	f7fe fceb 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 8004b0a:	61b8      	str	r0, [r7, #24]
        break;
 8004b0c:	e008      	b.n	8004b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b12:	61bb      	str	r3, [r7, #24]
        break;
 8004b14:	e004      	b.n	8004b20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d074      	beq.n	8004c10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	005a      	lsls	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b0f      	cmp	r3, #15
 8004b40:	d916      	bls.n	8004b70 <UART_SetConfig+0x404>
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d212      	bcs.n	8004b70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f023 030f 	bic.w	r3, r3, #15
 8004b52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	89fb      	ldrh	r3, [r7, #14]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	89fa      	ldrh	r2, [r7, #14]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	e04f      	b.n	8004c10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	77bb      	strb	r3, [r7, #30]
 8004b74:	e04c      	b.n	8004c10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d828      	bhi.n	8004bce <UART_SetConfig+0x462>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0x418>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	08004bcf 	.word	0x08004bcf
 8004b94:	08004bbf 	.word	0x08004bbf
 8004b98:	08004bcf 	.word	0x08004bcf
 8004b9c:	08004bcf 	.word	0x08004bcf
 8004ba0:	08004bcf 	.word	0x08004bcf
 8004ba4:	08004bc7 	.word	0x08004bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fe fdac 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004bac:	61b8      	str	r0, [r7, #24]
        break;
 8004bae:	e013      	b.n	8004bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb0:	f7fe fdbc 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8004bb4:	61b8      	str	r0, [r7, #24]
        break;
 8004bb6:	e00f      	b.n	8004bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <UART_SetConfig+0x4c4>)
 8004bba:	61bb      	str	r3, [r7, #24]
        break;
 8004bbc:	e00c      	b.n	8004bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bbe:	f7fe fc8f 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 8004bc2:	61b8      	str	r0, [r7, #24]
        break;
 8004bc4:	e008      	b.n	8004bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bca:	61bb      	str	r3, [r7, #24]
        break;
 8004bcc:	e004      	b.n	8004bd8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8004bd6:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	085a      	lsrs	r2, r3, #1
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	441a      	add	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b0f      	cmp	r3, #15
 8004bf6:	d909      	bls.n	8004c0c <UART_SetConfig+0x4a0>
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d205      	bcs.n	8004c0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60da      	str	r2, [r3, #12]
 8004c0a:	e001      	b.n	8004c10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40007c00 	.word	0x40007c00
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	00f42400 	.word	0x00f42400

08004c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01a      	beq.n	8004d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d32:	d10a      	bne.n	8004d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d88:	f7fc fe0c 	bl	80019a4 <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d10e      	bne.n	8004dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f831 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e027      	b.n	8004e0a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d10e      	bne.n	8004de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f81b 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e011      	b.n	8004e0a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b09c      	sub	sp, #112	; 0x70
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	e0a7      	b.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	f000 80a3 	beq.w	8004f74 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2e:	f7fc fdb9 	bl	80019a4 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d302      	bcc.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d13f      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e58:	667b      	str	r3, [r7, #100]	; 0x64
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e6      	bne.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e96:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e068      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d050      	beq.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee0:	d148      	bne.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e6      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f3e:	623a      	str	r2, [r7, #32]
 8004f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	69f9      	ldr	r1, [r7, #28]
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e5      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e010      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69da      	ldr	r2, [r3, #28]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	f43f af48 	beq.w	8004e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3770      	adds	r7, #112	; 0x70
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	f107 001c 	add.w	r0, r7, #28
 8004fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d120      	bne.n	8004ffa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	4b20      	ldr	r3, [pc, #128]	; (800504c <USB_CoreInit+0xac>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d105      	bne.n	8004fee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa96 	bl	8005520 <USB_CoreReset>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	e010      	b.n	800501c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa8a 	bl	8005520 <USB_CoreReset>
 800500c:	4603      	mov	r3, r0
 800500e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	2b01      	cmp	r3, #1
 8005020:	d10b      	bne.n	800503a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f043 0206 	orr.w	r2, r3, #6
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005046:	b004      	add	sp, #16
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	ffbdffbf 	.word	0xffbdffbf

08005050 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f023 0201 	bic.w	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d115      	bne.n	80050c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050a0:	2001      	movs	r0, #1
 80050a2:	f7fc fc8b 	bl	80019bc <HAL_Delay>
      ms++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3301      	adds	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa29 	bl	8005504 <USB_GetMode>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d01e      	beq.n	80050f6 <USB_SetCurrentMode+0x84>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b31      	cmp	r3, #49	; 0x31
 80050bc:	d9f0      	bls.n	80050a0 <USB_SetCurrentMode+0x2e>
 80050be:	e01a      	b.n	80050f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d115      	bne.n	80050f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050d2:	2001      	movs	r0, #1
 80050d4:	f7fc fc72 	bl	80019bc <HAL_Delay>
      ms++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3301      	adds	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa10 	bl	8005504 <USB_GetMode>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <USB_SetCurrentMode+0x84>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b31      	cmp	r3, #49	; 0x31
 80050ee:	d9f0      	bls.n	80050d2 <USB_SetCurrentMode+0x60>
 80050f0:	e001      	b.n	80050f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e005      	b.n	8005102 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b32      	cmp	r3, #50	; 0x32
 80050fa:	d101      	bne.n	8005100 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800510c:	b084      	sub	sp, #16
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800511a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e009      	b.n	8005140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3340      	adds	r3, #64	; 0x40
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	2200      	movs	r2, #0
 8005138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3301      	adds	r3, #1
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b0e      	cmp	r3, #14
 8005144:	d9f2      	bls.n	800512c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11c      	bne.n	8005186 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800515a:	f043 0302 	orr.w	r3, r3, #2
 800515e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e005      	b.n	8005192 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005198:	461a      	mov	r2, r3
 800519a:	2300      	movs	r3, #0
 800519c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a4:	4619      	mov	r1, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	461a      	mov	r2, r3
 80051ae:	680b      	ldr	r3, [r1, #0]
 80051b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d10c      	bne.n	80051d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d104      	bne.n	80051c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051be:	2100      	movs	r1, #0
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f965 	bl	8005490 <USB_SetDevSpeed>
 80051c6:	e008      	b.n	80051da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051c8:	2101      	movs	r1, #1
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f960 	bl	8005490 <USB_SetDevSpeed>
 80051d0:	e003      	b.n	80051da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051d2:	2103      	movs	r1, #3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f95b 	bl	8005490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051da:	2110      	movs	r1, #16
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f8f3 	bl	80053c8 <USB_FlushTxFifo>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f91f 	bl	8005430 <USB_FlushRxFifo>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	461a      	mov	r2, r3
 8005204:	2300      	movs	r3, #0
 8005206:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520e:	461a      	mov	r2, r3
 8005210:	2300      	movs	r3, #0
 8005212:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	e043      	b.n	80052ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800523c:	d118      	bne.n	8005270 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	461a      	mov	r2, r3
 8005252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	e013      	b.n	8005282 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005266:	461a      	mov	r2, r3
 8005268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e008      	b.n	8005282 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	461a      	mov	r2, r3
 800527e:	2300      	movs	r3, #0
 8005280:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	461a      	mov	r2, r3
 8005290:	2300      	movs	r3, #0
 8005292:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	461a      	mov	r2, r3
 80052a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	3301      	adds	r3, #1
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d3b7      	bcc.n	8005226 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	e043      	b.n	8005344 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d2:	d118      	bne.n	8005306 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e6:	461a      	mov	r2, r3
 80052e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e013      	b.n	8005318 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	461a      	mov	r2, r3
 80052fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	e008      	b.n	8005318 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	461a      	mov	r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	461a      	mov	r2, r3
 8005326:	2300      	movs	r3, #0
 8005328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	461a      	mov	r2, r3
 8005338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800533c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3301      	adds	r3, #1
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	429a      	cmp	r2, r3
 800534a:	d3b7      	bcc.n	80052bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800536c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f043 0210 	orr.w	r2, r3, #16
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <USB_DevInit+0x2b4>)
 8005386:	4313      	orrs	r3, r2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f043 0208 	orr.w	r2, r3, #8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800539e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d105      	bne.n	80053b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <USB_DevInit+0x2b8>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053bc:	b004      	add	sp, #16
 80053be:	4770      	bx	lr
 80053c0:	803c3800 	.word	0x803c3800
 80053c4:	40000004 	.word	0x40000004

080053c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a13      	ldr	r2, [pc, #76]	; (800542c <USB_FlushTxFifo+0x64>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e01b      	b.n	8005420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	daf2      	bge.n	80053d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	019b      	lsls	r3, r3, #6
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4a08      	ldr	r2, [pc, #32]	; (800542c <USB_FlushTxFifo+0x64>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e006      	b.n	8005420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b20      	cmp	r3, #32
 800541c:	d0f0      	beq.n	8005400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	00030d40 	.word	0x00030d40

08005430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a11      	ldr	r2, [pc, #68]	; (800548c <USB_FlushRxFifo+0x5c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e018      	b.n	8005480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	daf2      	bge.n	800543c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2210      	movs	r2, #16
 800545e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <USB_FlushRxFifo+0x5c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e006      	b.n	8005480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b10      	cmp	r3, #16
 800547c:	d0f0      	beq.n	8005460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	00030d40 	.word	0x00030d40

08005490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054dc:	f023 0303 	bic.w	r3, r3, #3
 80054e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f0:	f043 0302 	orr.w	r3, r3, #2
 80054f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0301 	and.w	r3, r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <USB_CoreReset+0x64>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e01b      	b.n	8005576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	daf2      	bge.n	800552c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f043 0201 	orr.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <USB_CoreReset+0x64>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e006      	b.n	8005576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b01      	cmp	r3, #1
 8005572:	d0f0      	beq.n	8005556 <USB_CoreReset+0x36>

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	00030d40 	.word	0x00030d40

08005588 <osKernelInitialize>:
#endif
}

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800558e:	f3ef 8305 	mrs	r3, IPSR
 8005592:	60bb      	str	r3, [r7, #8]
  return(result);
 8005594:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800559a:	f3ef 8310 	mrs	r3, PRIMASK
 800559e:	607b      	str	r3, [r7, #4]
  return(result);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d105      	bne.n	80055b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a6:	f3ef 8311 	mrs	r3, BASEPRI
 80055aa:	603b      	str	r3, [r7, #0]
  return(result);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <osKernelInitialize+0x3a>
 80055b2:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <osKernelInitialize+0x64>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d103      	bne.n	80055c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80055ba:	f06f 0305 	mvn.w	r3, #5
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e00c      	b.n	80055dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <osKernelInitialize+0x64>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <osKernelInitialize+0x64>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80055dc:	68fb      	ldr	r3, [r7, #12]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	200008e8 	.word	0x200008e8

080055f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b090      	sub	sp, #64	; 0x40
 80055f4:	af04      	add	r7, sp, #16
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005600:	f3ef 8305 	mrs	r3, IPSR
 8005604:	61fb      	str	r3, [r7, #28]
  return(result);
 8005606:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005608:	2b00      	cmp	r3, #0
 800560a:	f040 808f 	bne.w	800572c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800560e:	f3ef 8310 	mrs	r3, PRIMASK
 8005612:	61bb      	str	r3, [r7, #24]
  return(result);
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800561a:	f3ef 8311 	mrs	r3, BASEPRI
 800561e:	617b      	str	r3, [r7, #20]
  return(result);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <osThreadNew+0x3e>
 8005626:	4b44      	ldr	r3, [pc, #272]	; (8005738 <osThreadNew+0x148>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d07e      	beq.n	800572c <osThreadNew+0x13c>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d07b      	beq.n	800572c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005638:	2318      	movs	r3, #24
 800563a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005640:	f04f 33ff 	mov.w	r3, #4294967295
 8005644:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d045      	beq.n	80056d8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <osThreadNew+0x6a>
        name = attr->name;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <osThreadNew+0x90>
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	2b38      	cmp	r3, #56	; 0x38
 8005672:	d805      	bhi.n	8005680 <osThreadNew+0x90>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <osThreadNew+0x94>
        return (NULL);
 8005680:	2300      	movs	r3, #0
 8005682:	e054      	b.n	800572e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	089b      	lsrs	r3, r3, #2
 8005692:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <osThreadNew+0xca>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2ba7      	cmp	r3, #167	; 0xa7
 80056a2:	d90a      	bls.n	80056ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d006      	beq.n	80056ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <osThreadNew+0xca>
        mem = 1;
 80056b4:	2301      	movs	r3, #1
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	e010      	b.n	80056dc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10c      	bne.n	80056dc <osThreadNew+0xec>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d108      	bne.n	80056dc <osThreadNew+0xec>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <osThreadNew+0xec>
          mem = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	e001      	b.n	80056dc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d110      	bne.n	8005704 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056ea:	9202      	str	r2, [sp, #8]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f935 	bl	8005968 <xTaskCreateStatic>
 80056fe:	4603      	mov	r3, r0
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	e013      	b.n	800572c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d110      	bne.n	800572c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	b29a      	uxth	r2, r3
 800570e:	f107 0310 	add.w	r3, r7, #16
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f986 	bl	8005a2e <xTaskCreate>
 8005722:	4603      	mov	r3, r0
 8005724:	2b01      	cmp	r3, #1
 8005726:	d001      	beq.n	800572c <osThreadNew+0x13c>
          hTask = NULL;
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800572c:	693b      	ldr	r3, [r7, #16]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3730      	adds	r7, #48	; 0x30
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200008e8 	.word	0x200008e8

0800573c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005748:	f3ef 8305 	mrs	r3, IPSR
 800574c:	617b      	str	r3, [r7, #20]
  return(result);
 800574e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10f      	bne.n	8005774 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005754:	f3ef 8310 	mrs	r3, PRIMASK
 8005758:	613b      	str	r3, [r7, #16]
  return(result);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005760:	f3ef 8311 	mrs	r3, BASEPRI
 8005764:	60fb      	str	r3, [r7, #12]
  return(result);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <osThreadSuspend+0x40>
 800576c:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <osThreadSuspend+0x64>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d103      	bne.n	800577c <osThreadSuspend+0x40>
    stat = osErrorISR;
 8005774:	f06f 0305 	mvn.w	r3, #5
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	e00b      	b.n	8005794 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8005782:	f06f 0303 	mvn.w	r3, #3
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	e004      	b.n	8005794 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800578e:	69b8      	ldr	r0, [r7, #24]
 8005790:	f000 fae0 	bl	8005d54 <vTaskSuspend>
  }

  return (stat);
 8005794:	69fb      	ldr	r3, [r7, #28]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200008e8 	.word	0x200008e8

080057a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ac:	f3ef 8305 	mrs	r3, IPSR
 80057b0:	613b      	str	r3, [r7, #16]
  return(result);
 80057b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10f      	bne.n	80057d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b8:	f3ef 8310 	mrs	r3, PRIMASK
 80057bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057c4:	f3ef 8311 	mrs	r3, BASEPRI
 80057c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <osDelay+0x3c>
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <osDelay+0x58>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d103      	bne.n	80057e0 <osDelay+0x3c>
    stat = osErrorISR;
 80057d8:	f06f 0305 	mvn.w	r3, #5
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e007      	b.n	80057f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa7c 	bl	8005ce8 <vTaskDelay>
    }
  }

  return (stat);
 80057f0:	697b      	ldr	r3, [r7, #20]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200008e8 	.word	0x200008e8

08005800 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f103 0208 	add.w	r2, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f04f 32ff 	mov.w	r2, #4294967295
 8005818:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f103 0208 	add.w	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f103 0208 	add.w	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d103      	bne.n	80058c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e00c      	b.n	80058dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3308      	adds	r3, #8
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e002      	b.n	80058d0 <vListInsert+0x2e>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d2f6      	bcs.n	80058ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6892      	ldr	r2, [r2, #8]
 800592a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d103      	bne.n	8005948 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08e      	sub	sp, #56	; 0x38
 800596c:	af04      	add	r7, sp, #16
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10c      	bne.n	8005996 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	b672      	cpsid	i
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	b662      	cpsie	i
 8005990:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10c      	bne.n	80059b6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	b672      	cpsid	i
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	b662      	cpsie	i
 80059b0:	61fb      	str	r3, [r7, #28]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059b6:	23a8      	movs	r3, #168	; 0xa8
 80059b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2ba8      	cmp	r3, #168	; 0xa8
 80059be:	d00c      	beq.n	80059da <xTaskCreateStatic+0x72>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	b672      	cpsid	i
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	b662      	cpsie	i
 80059d4:	61bb      	str	r3, [r7, #24]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01e      	beq.n	8005a20 <xTaskCreateStatic+0xb8>
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01b      	beq.n	8005a20 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059fa:	2300      	movs	r3, #0
 80059fc:	9303      	str	r3, [sp, #12]
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	f107 0314 	add.w	r3, r7, #20
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f850 	bl	8005ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a1a:	f000 f8f5 	bl	8005c08 <prvAddNewTaskToReadyList>
 8005a1e:	e001      	b.n	8005a24 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a24:	697b      	ldr	r3, [r7, #20]
	}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3728      	adds	r7, #40	; 0x28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b08c      	sub	sp, #48	; 0x30
 8005a32:	af04      	add	r7, sp, #16
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fdbc 	bl	80065c0 <pvPortMalloc>
 8005a48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00e      	beq.n	8005a6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a50:	20a8      	movs	r0, #168	; 0xa8
 8005a52:	f000 fdb5 	bl	80065c0 <pvPortMalloc>
 8005a56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
 8005a64:	e005      	b.n	8005a72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a66:	6978      	ldr	r0, [r7, #20]
 8005a68:	f000 fe74 	bl	8006754 <vPortFree>
 8005a6c:	e001      	b.n	8005a72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d017      	beq.n	8005aa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a80:	88fa      	ldrh	r2, [r7, #6]
 8005a82:	2300      	movs	r3, #0
 8005a84:	9303      	str	r3, [sp, #12]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	9302      	str	r3, [sp, #8]
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f80e 	bl	8005ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a9c:	69f8      	ldr	r0, [r7, #28]
 8005a9e:	f000 f8b3 	bl	8005c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e002      	b.n	8005aae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005aae:	69bb      	ldr	r3, [r7, #24]
	}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	461a      	mov	r2, r3
 8005ad0:	21a5      	movs	r1, #165	; 0xa5
 8005ad2:	f001 fcb8 	bl	8007446 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005ae0:	440b      	add	r3, r1
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00c      	beq.n	8005b14 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	b672      	cpsid	i
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	b662      	cpsie	i
 8005b0e:	617b      	str	r3, [r7, #20]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01f      	beq.n	8005b5a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e012      	b.n	8005b46 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	7819      	ldrb	r1, [r3, #0]
 8005b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3334      	adds	r3, #52	; 0x34
 8005b30:	460a      	mov	r2, r1
 8005b32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b0f      	cmp	r3, #15
 8005b4a:	d9e9      	bls.n	8005b20 <prvInitialiseNewTask+0x68>
 8005b4c:	e000      	b.n	8005b50 <prvInitialiseNewTask+0x98>
			{
				break;
 8005b4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b58:	e003      	b.n	8005b62 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	2b37      	cmp	r3, #55	; 0x37
 8005b66:	d901      	bls.n	8005b6c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b68:	2337      	movs	r3, #55	; 0x37
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	3304      	adds	r3, #4
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fe5c 	bl	8005840 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	3318      	adds	r3, #24
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fe57 	bl	8005840 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	3354      	adds	r3, #84	; 0x54
 8005bbc:	224c      	movs	r2, #76	; 0x4c
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fc40 	bl	8007446 <memset>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	4a0c      	ldr	r2, [pc, #48]	; (8005bfc <prvInitialiseNewTask+0x144>)
 8005bca:	659a      	str	r2, [r3, #88]	; 0x58
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <prvInitialiseNewTask+0x148>)
 8005bd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	4a0b      	ldr	r2, [pc, #44]	; (8005c04 <prvInitialiseNewTask+0x14c>)
 8005bd6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	69b8      	ldr	r0, [r7, #24]
 8005bde:	f000 fbb5 	bl	800634c <pxPortInitialiseStack>
 8005be2:	4602      	mov	r2, r0
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf4:	bf00      	nop
 8005bf6:	3720      	adds	r7, #32
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200049fc 	.word	0x200049fc
 8005c00:	20004a64 	.word	0x20004a64
 8005c04:	20004acc 	.word	0x20004acc

08005c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c10:	f000 fc1a 	bl	8006448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c14:	4b2d      	ldr	r3, [pc, #180]	; (8005ccc <prvAddNewTaskToReadyList+0xc4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <prvAddNewTaskToReadyList+0xc4>)
 8005c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <prvAddNewTaskToReadyList+0xc8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c26:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <prvAddNewTaskToReadyList+0xc8>)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c2c:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <prvAddNewTaskToReadyList+0xc4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d110      	bne.n	8005c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c34:	f000 fad6 	bl	80061e4 <prvInitialiseTaskLists>
 8005c38:	e00d      	b.n	8005c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <prvAddNewTaskToReadyList+0xcc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c42:	4b23      	ldr	r3, [pc, #140]	; (8005cd0 <prvAddNewTaskToReadyList+0xc8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d802      	bhi.n	8005c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c50:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <prvAddNewTaskToReadyList+0xc8>)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c56:	4b20      	ldr	r3, [pc, #128]	; (8005cd8 <prvAddNewTaskToReadyList+0xd0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <prvAddNewTaskToReadyList+0xd0>)
 8005c5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c60:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <prvAddNewTaskToReadyList+0xd0>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <prvAddNewTaskToReadyList+0xd4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d903      	bls.n	8005c7c <prvAddNewTaskToReadyList+0x74>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <prvAddNewTaskToReadyList+0xd4>)
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <prvAddNewTaskToReadyList+0xd8>)
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7ff fde1 	bl	800585a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c98:	f000 fc0a 	bl	80064b0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <prvAddNewTaskToReadyList+0xcc>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00e      	beq.n	8005cc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <prvAddNewTaskToReadyList+0xc8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d207      	bcs.n	8005cc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <prvAddNewTaskToReadyList+0xdc>)
 8005cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000dbc 	.word	0x20000dbc
 8005cd0:	200008ec 	.word	0x200008ec
 8005cd4:	20000dc8 	.word	0x20000dc8
 8005cd8:	20000dd8 	.word	0x20000dd8
 8005cdc:	20000dc4 	.word	0x20000dc4
 8005ce0:	200008f0 	.word	0x200008f0
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d019      	beq.n	8005d2e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cfa:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <vTaskDelay+0x64>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00c      	beq.n	8005d1c <vTaskDelay+0x34>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	b672      	cpsid	i
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	b662      	cpsie	i
 8005d16:	60bb      	str	r3, [r7, #8]
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005d1c:	f000 f892 	bl	8005e44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d20:	2100      	movs	r1, #0
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fabe 	bl	80062a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d28:	f000 f89a 	bl	8005e60 <xTaskResumeAll>
 8005d2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d107      	bne.n	8005d44 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005d34:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <vTaskDelay+0x68>)
 8005d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000de0 	.word	0x20000de0
 8005d50:	e000ed04 	.word	0xe000ed04

08005d54 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005d5c:	f000 fb74 	bl	8006448 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <vTaskSuspend+0x18>
 8005d66:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <vTaskSuspend+0xd8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	e000      	b.n	8005d6e <vTaskSuspend+0x1a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fdcd 	bl	8005914 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3318      	adds	r3, #24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fdc4 	bl	8005914 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4827      	ldr	r0, [pc, #156]	; (8005e30 <vTaskSuspend+0xdc>)
 8005d94:	f7ff fd61 	bl	800585a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d103      	bne.n	8005dac <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005dac:	f000 fb80 	bl	80064b0 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005db0:	4b20      	ldr	r3, [pc, #128]	; (8005e34 <vTaskSuspend+0xe0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005db8:	f000 fb46 	bl	8006448 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005dbc:	f000 fa52 	bl	8006264 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005dc0:	f000 fb76 	bl	80064b0 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <vTaskSuspend+0xd8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d129      	bne.n	8005e22 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8005dce:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <vTaskSuspend+0xe0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d019      	beq.n	8005e0a <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005dd6:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <vTaskSuspend+0xe4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <vTaskSuspend+0xa4>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	b672      	cpsid	i
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	b662      	cpsie	i
 8005df2:	60bb      	str	r3, [r7, #8]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8005df8:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <vTaskSuspend+0xe8>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e08:	e00b      	b.n	8005e22 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <vTaskSuspend+0xdc>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <vTaskSuspend+0xec>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d103      	bne.n	8005e1e <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <vTaskSuspend+0xd8>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
	}
 8005e1c:	e001      	b.n	8005e22 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8005e1e:	f000 f97b 	bl	8006118 <vTaskSwitchContext>
	}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200008ec 	.word	0x200008ec
 8005e30:	20000da8 	.word	0x20000da8
 8005e34:	20000dc8 	.word	0x20000dc8
 8005e38:	20000de0 	.word	0x20000de0
 8005e3c:	e000ed04 	.word	0xe000ed04
 8005e40:	20000dbc 	.word	0x20000dbc

08005e44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <vTaskSuspendAll+0x18>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	4a03      	ldr	r2, [pc, #12]	; (8005e5c <vTaskSuspendAll+0x18>)
 8005e50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005e52:	bf00      	nop
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000de0 	.word	0x20000de0

08005e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e6e:	4b43      	ldr	r3, [pc, #268]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10c      	bne.n	8005e90 <xTaskResumeAll+0x30>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
 8005e8a:	603b      	str	r3, [r7, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e90:	f000 fada 	bl	8006448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e94:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	4a38      	ldr	r2, [pc, #224]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005e9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e9e:	4b37      	ldr	r3, [pc, #220]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d162      	bne.n	8005f6c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ea6:	4b36      	ldr	r3, [pc, #216]	; (8005f80 <xTaskResumeAll+0x120>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d05e      	beq.n	8005f6c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eae:	e02f      	b.n	8005f10 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb0:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <xTaskResumeAll+0x124>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3318      	adds	r3, #24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff fd29 	bl	8005914 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fd24 	bl	8005914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <xTaskResumeAll+0x128>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d903      	bls.n	8005ee0 <xTaskResumeAll+0x80>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <xTaskResumeAll+0x128>)
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4a27      	ldr	r2, [pc, #156]	; (8005f8c <xTaskResumeAll+0x12c>)
 8005eee:	441a      	add	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f7ff fcaf 	bl	800585a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f00:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <xTaskResumeAll+0x130>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005f0a:	4b22      	ldr	r3, [pc, #136]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f10:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <xTaskResumeAll+0x124>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1cb      	bne.n	8005eb0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f1e:	f000 f9a1 	bl	8006264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f22:	4b1d      	ldr	r3, [pc, #116]	; (8005f98 <xTaskResumeAll+0x138>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d010      	beq.n	8005f50 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f2e:	f000 f837 	bl	8005fa0 <xTaskIncrementTick>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005f38:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f1      	bne.n	8005f2e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <xTaskResumeAll+0x138>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f50:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <xTaskResumeAll+0x13c>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f6c:	f000 faa0 	bl	80064b0 <vPortExitCritical>

	return xAlreadyYielded;
 8005f70:	68bb      	ldr	r3, [r7, #8]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000de0 	.word	0x20000de0
 8005f80:	20000dbc 	.word	0x20000dbc
 8005f84:	20000d80 	.word	0x20000d80
 8005f88:	20000dc4 	.word	0x20000dc4
 8005f8c:	200008f0 	.word	0x200008f0
 8005f90:	200008ec 	.word	0x200008ec
 8005f94:	20000dd0 	.word	0x20000dd0
 8005f98:	20000dcc 	.word	0x20000dcc
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005faa:	4b50      	ldr	r3, [pc, #320]	; (80060ec <xTaskIncrementTick+0x14c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f040 808b 	bne.w	80060ca <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fb4:	4b4e      	ldr	r3, [pc, #312]	; (80060f0 <xTaskIncrementTick+0x150>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fbc:	4a4c      	ldr	r2, [pc, #304]	; (80060f0 <xTaskIncrementTick+0x150>)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d122      	bne.n	800600e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fc8:	4b4a      	ldr	r3, [pc, #296]	; (80060f4 <xTaskIncrementTick+0x154>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <xTaskIncrementTick+0x4c>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	b672      	cpsid	i
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	b662      	cpsie	i
 8005fe6:	603b      	str	r3, [r7, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xTaskIncrementTick+0x4a>
 8005fec:	4b41      	ldr	r3, [pc, #260]	; (80060f4 <xTaskIncrementTick+0x154>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	4b41      	ldr	r3, [pc, #260]	; (80060f8 <xTaskIncrementTick+0x158>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a3f      	ldr	r2, [pc, #252]	; (80060f4 <xTaskIncrementTick+0x154>)
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	4a3f      	ldr	r2, [pc, #252]	; (80060f8 <xTaskIncrementTick+0x158>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	4b3e      	ldr	r3, [pc, #248]	; (80060fc <xTaskIncrementTick+0x15c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a3d      	ldr	r2, [pc, #244]	; (80060fc <xTaskIncrementTick+0x15c>)
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	f000 f92b 	bl	8006264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800600e:	4b3c      	ldr	r3, [pc, #240]	; (8006100 <xTaskIncrementTick+0x160>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	429a      	cmp	r2, r3
 8006016:	d349      	bcc.n	80060ac <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006018:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <xTaskIncrementTick+0x154>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006022:	4b37      	ldr	r3, [pc, #220]	; (8006100 <xTaskIncrementTick+0x160>)
 8006024:	f04f 32ff 	mov.w	r2, #4294967295
 8006028:	601a      	str	r2, [r3, #0]
					break;
 800602a:	e03f      	b.n	80060ac <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602c:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <xTaskIncrementTick+0x154>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d203      	bcs.n	800604c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006044:	4a2e      	ldr	r2, [pc, #184]	; (8006100 <xTaskIncrementTick+0x160>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800604a:	e02f      	b.n	80060ac <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fc5f 	bl	8005914 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	3318      	adds	r3, #24
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff fc56 	bl	8005914 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606c:	4b25      	ldr	r3, [pc, #148]	; (8006104 <xTaskIncrementTick+0x164>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d903      	bls.n	800607c <xTaskIncrementTick+0xdc>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	4a22      	ldr	r2, [pc, #136]	; (8006104 <xTaskIncrementTick+0x164>)
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4a1f      	ldr	r2, [pc, #124]	; (8006108 <xTaskIncrementTick+0x168>)
 800608a:	441a      	add	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	3304      	adds	r3, #4
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f7ff fbe1 	bl	800585a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	4b1b      	ldr	r3, [pc, #108]	; (800610c <xTaskIncrementTick+0x16c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d3b8      	bcc.n	8006018 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060aa:	e7b5      	b.n	8006018 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060ac:	4b17      	ldr	r3, [pc, #92]	; (800610c <xTaskIncrementTick+0x16c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	4915      	ldr	r1, [pc, #84]	; (8006108 <xTaskIncrementTick+0x168>)
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d907      	bls.n	80060d4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	e004      	b.n	80060d4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060ca:	4b11      	ldr	r3, [pc, #68]	; (8006110 <xTaskIncrementTick+0x170>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <xTaskIncrementTick+0x170>)
 80060d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060d4:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <xTaskIncrementTick+0x174>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060e0:	697b      	ldr	r3, [r7, #20]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000de0 	.word	0x20000de0
 80060f0:	20000dc0 	.word	0x20000dc0
 80060f4:	20000d78 	.word	0x20000d78
 80060f8:	20000d7c 	.word	0x20000d7c
 80060fc:	20000dd4 	.word	0x20000dd4
 8006100:	20000ddc 	.word	0x20000ddc
 8006104:	20000dc4 	.word	0x20000dc4
 8006108:	200008f0 	.word	0x200008f0
 800610c:	200008ec 	.word	0x200008ec
 8006110:	20000dcc 	.word	0x20000dcc
 8006114:	20000dd0 	.word	0x20000dd0

08006118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800611e:	4b2b      	ldr	r3, [pc, #172]	; (80061cc <vTaskSwitchContext+0xb4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006126:	4b2a      	ldr	r3, [pc, #168]	; (80061d0 <vTaskSwitchContext+0xb8>)
 8006128:	2201      	movs	r2, #1
 800612a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800612c:	e048      	b.n	80061c0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800612e:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <vTaskSwitchContext+0xb8>)
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <vTaskSwitchContext+0xbc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e012      	b.n	8006162 <vTaskSwitchContext+0x4a>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10c      	bne.n	800615c <vTaskSwitchContext+0x44>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	b672      	cpsid	i
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	b662      	cpsie	i
 8006156:	607b      	str	r3, [r7, #4]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <vTaskSwitchContext+0x42>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b01      	subs	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	491d      	ldr	r1, [pc, #116]	; (80061d8 <vTaskSwitchContext+0xc0>)
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0e2      	beq.n	800613c <vTaskSwitchContext+0x24>
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4a15      	ldr	r2, [pc, #84]	; (80061d8 <vTaskSwitchContext+0xc0>)
 8006182:	4413      	add	r3, r2
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	3308      	adds	r3, #8
 8006198:	429a      	cmp	r2, r3
 800619a:	d104      	bne.n	80061a6 <vTaskSwitchContext+0x8e>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4a0b      	ldr	r2, [pc, #44]	; (80061dc <vTaskSwitchContext+0xc4>)
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <vTaskSwitchContext+0xbc>)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <vTaskSwitchContext+0xc4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3354      	adds	r3, #84	; 0x54
 80061bc:	4a08      	ldr	r2, [pc, #32]	; (80061e0 <vTaskSwitchContext+0xc8>)
 80061be:	6013      	str	r3, [r2, #0]
}
 80061c0:	bf00      	nop
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000de0 	.word	0x20000de0
 80061d0:	20000dd0 	.word	0x20000dd0
 80061d4:	20000dc4 	.word	0x20000dc4
 80061d8:	200008f0 	.word	0x200008f0
 80061dc:	200008ec 	.word	0x200008ec
 80061e0:	2000007c 	.word	0x2000007c

080061e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ea:	2300      	movs	r3, #0
 80061ec:	607b      	str	r3, [r7, #4]
 80061ee:	e00c      	b.n	800620a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4a12      	ldr	r2, [pc, #72]	; (8006244 <prvInitialiseTaskLists+0x60>)
 80061fc:	4413      	add	r3, r2
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fafe 	bl	8005800 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3301      	adds	r3, #1
 8006208:	607b      	str	r3, [r7, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b37      	cmp	r3, #55	; 0x37
 800620e:	d9ef      	bls.n	80061f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006210:	480d      	ldr	r0, [pc, #52]	; (8006248 <prvInitialiseTaskLists+0x64>)
 8006212:	f7ff faf5 	bl	8005800 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006216:	480d      	ldr	r0, [pc, #52]	; (800624c <prvInitialiseTaskLists+0x68>)
 8006218:	f7ff faf2 	bl	8005800 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800621c:	480c      	ldr	r0, [pc, #48]	; (8006250 <prvInitialiseTaskLists+0x6c>)
 800621e:	f7ff faef 	bl	8005800 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006222:	480c      	ldr	r0, [pc, #48]	; (8006254 <prvInitialiseTaskLists+0x70>)
 8006224:	f7ff faec 	bl	8005800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006228:	480b      	ldr	r0, [pc, #44]	; (8006258 <prvInitialiseTaskLists+0x74>)
 800622a:	f7ff fae9 	bl	8005800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800622e:	4b0b      	ldr	r3, [pc, #44]	; (800625c <prvInitialiseTaskLists+0x78>)
 8006230:	4a05      	ldr	r2, [pc, #20]	; (8006248 <prvInitialiseTaskLists+0x64>)
 8006232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <prvInitialiseTaskLists+0x7c>)
 8006236:	4a05      	ldr	r2, [pc, #20]	; (800624c <prvInitialiseTaskLists+0x68>)
 8006238:	601a      	str	r2, [r3, #0]
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	200008f0 	.word	0x200008f0
 8006248:	20000d50 	.word	0x20000d50
 800624c:	20000d64 	.word	0x20000d64
 8006250:	20000d80 	.word	0x20000d80
 8006254:	20000d94 	.word	0x20000d94
 8006258:	20000da8 	.word	0x20000da8
 800625c:	20000d78 	.word	0x20000d78
 8006260:	20000d7c 	.word	0x20000d7c

08006264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <prvResetNextTaskUnblockTime+0x38>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006276:	f04f 32ff 	mov.w	r2, #4294967295
 800627a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800627c:	e008      	b.n	8006290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800627e:	4b07      	ldr	r3, [pc, #28]	; (800629c <prvResetNextTaskUnblockTime+0x38>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a04      	ldr	r2, [pc, #16]	; (80062a0 <prvResetNextTaskUnblockTime+0x3c>)
 800628e:	6013      	str	r3, [r2, #0]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000d78 	.word	0x20000d78
 80062a0:	20000ddc 	.word	0x20000ddc

080062a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <prvAddCurrentTaskToDelayedList+0x90>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062b4:	4b20      	ldr	r3, [pc, #128]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fb2a 	bl	8005914 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d10a      	bne.n	80062de <prvAddCurrentTaskToDelayedList+0x3a>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4819      	ldr	r0, [pc, #100]	; (800633c <prvAddCurrentTaskToDelayedList+0x98>)
 80062d8:	f7ff fabf 	bl	800585a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062dc:	e026      	b.n	800632c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4413      	add	r3, r2
 80062e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062e6:	4b14      	ldr	r3, [pc, #80]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d209      	bcs.n	800630a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b0f      	ldr	r3, [pc, #60]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3304      	adds	r3, #4
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f7ff facd 	bl	80058a2 <vListInsert>
}
 8006308:	e010      	b.n	800632c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <prvAddCurrentTaskToDelayedList+0xa0>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <prvAddCurrentTaskToDelayedList+0x94>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7ff fac3 	bl	80058a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <prvAddCurrentTaskToDelayedList+0xa4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	d202      	bcs.n	800632c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006326:	4a08      	ldr	r2, [pc, #32]	; (8006348 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000dc0 	.word	0x20000dc0
 8006338:	200008ec 	.word	0x200008ec
 800633c:	20000da8 	.word	0x20000da8
 8006340:	20000d7c 	.word	0x20000d7c
 8006344:	20000d78 	.word	0x20000d78
 8006348:	20000ddc 	.word	0x20000ddc

0800634c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3b04      	subs	r3, #4
 800635c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3b04      	subs	r3, #4
 800636a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f023 0201 	bic.w	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3b04      	subs	r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800637c:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <pxPortInitialiseStack+0x64>)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b14      	subs	r3, #20
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b04      	subs	r3, #4
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f06f 0202 	mvn.w	r2, #2
 800639a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3b20      	subs	r3, #32
 80063a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063a2:	68fb      	ldr	r3, [r7, #12]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	080063b5 	.word	0x080063b5

080063b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063be:	4b14      	ldr	r3, [pc, #80]	; (8006410 <prvTaskExitError+0x5c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c6:	d00c      	beq.n	80063e2 <prvTaskExitError+0x2e>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	b672      	cpsid	i
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	b662      	cpsie	i
 80063dc:	60fb      	str	r3, [r7, #12]
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <prvTaskExitError+0x2c>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	b672      	cpsid	i
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	b662      	cpsie	i
 80063f6:	60bb      	str	r3, [r7, #8]
}
 80063f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fa:	bf00      	nop
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0fc      	beq.n	80063fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	20000020 	.word	0x20000020
	...

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	b672      	cpsid	i
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	b662      	cpsie	i
 8006462:	607b      	str	r3, [r7, #4]
}
 8006464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006466:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <vPortEnterCritical+0x60>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <vPortEnterCritical+0x60>)
 800646e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006470:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <vPortEnterCritical+0x60>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d111      	bne.n	800649c <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <vPortEnterCritical+0x64>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <vPortEnterCritical+0x54>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	b672      	cpsid	i
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	b662      	cpsie	i
 8006496:	603b      	str	r3, [r7, #0]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <vPortEnterCritical+0x52>
	}
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	20000020 	.word	0x20000020
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <vPortExitCritical+0x54>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10c      	bne.n	80064d8 <vPortExitCritical+0x28>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	b672      	cpsid	i
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	b662      	cpsie	i
 80064d2:	607b      	str	r3, [r7, #4]
}
 80064d4:	bf00      	nop
 80064d6:	e7fe      	b.n	80064d6 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <vPortExitCritical+0x54>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3b01      	subs	r3, #1
 80064de:	4a09      	ldr	r2, [pc, #36]	; (8006504 <vPortExitCritical+0x54>)
 80064e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <vPortExitCritical+0x54>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <vPortExitCritical+0x46>
 80064ea:	2300      	movs	r3, #0
 80064ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000020 	.word	0x20000020
	...

08006510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006510:	f3ef 8009 	mrs	r0, PSP
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <pxCurrentTCBConst>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f01e 0f10 	tst.w	lr, #16
 8006520:	bf08      	it	eq
 8006522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006534:	b672      	cpsid	i
 8006536:	f380 8811 	msr	BASEPRI, r0
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	b662      	cpsie	i
 8006544:	f7ff fde8 	bl	8006118 <vTaskSwitchContext>
 8006548:	f04f 0000 	mov.w	r0, #0
 800654c:	f380 8811 	msr	BASEPRI, r0
 8006550:	bc09      	pop	{r0, r3}
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	6808      	ldr	r0, [r1, #0]
 8006556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	f01e 0f10 	tst.w	lr, #16
 800655e:	bf08      	it	eq
 8006560:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006564:	f380 8809 	msr	PSP, r0
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <pxCurrentTCBConst>:
 8006570:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop

08006578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	b672      	cpsid	i
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	b662      	cpsie	i
 8006592:	607b      	str	r3, [r7, #4]
}
 8006594:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006596:	f7ff fd03 	bl	8005fa0 <xTaskIncrementTick>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065a0:	4b06      	ldr	r3, [pc, #24]	; (80065bc <SysTick_Handler+0x44>)
 80065a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	2300      	movs	r3, #0
 80065aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f383 8811 	msr	BASEPRI, r3
}
 80065b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065b4:	bf00      	nop
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	; 0x28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065cc:	f7ff fc3a 	bl	8005e44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065d0:	4b5b      	ldr	r3, [pc, #364]	; (8006740 <pvPortMalloc+0x180>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065d8:	f000 f91a 	bl	8006810 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065dc:	4b59      	ldr	r3, [pc, #356]	; (8006744 <pvPortMalloc+0x184>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 8092 	bne.w	800670e <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01f      	beq.n	8006630 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80065f0:	2208      	movs	r2, #8
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4413      	add	r3, r2
 80065f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d016      	beq.n	8006630 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f023 0307 	bic.w	r3, r3, #7
 8006608:	3308      	adds	r3, #8
 800660a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00c      	beq.n	8006630 <pvPortMalloc+0x70>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	b672      	cpsid	i
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	b662      	cpsie	i
 800662a:	617b      	str	r3, [r7, #20]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d06b      	beq.n	800670e <pvPortMalloc+0x14e>
 8006636:	4b44      	ldr	r3, [pc, #272]	; (8006748 <pvPortMalloc+0x188>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d866      	bhi.n	800670e <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006640:	4b42      	ldr	r3, [pc, #264]	; (800674c <pvPortMalloc+0x18c>)
 8006642:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006644:	4b41      	ldr	r3, [pc, #260]	; (800674c <pvPortMalloc+0x18c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800664a:	e004      	b.n	8006656 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d903      	bls.n	8006668 <pvPortMalloc+0xa8>
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f1      	bne.n	800664c <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006668:	4b35      	ldr	r3, [pc, #212]	; (8006740 <pvPortMalloc+0x180>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	429a      	cmp	r2, r3
 8006670:	d04d      	beq.n	800670e <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2208      	movs	r2, #8
 8006678:	4413      	add	r3, r2
 800667a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad2      	subs	r2, r2, r3
 800668c:	2308      	movs	r3, #8
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	429a      	cmp	r2, r3
 8006692:	d921      	bls.n	80066d8 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00c      	beq.n	80066c0 <pvPortMalloc+0x100>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	b672      	cpsid	i
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	b662      	cpsie	i
 80066ba:	613b      	str	r3, [r7, #16]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	1ad2      	subs	r2, r2, r3
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066d2:	69b8      	ldr	r0, [r7, #24]
 80066d4:	f000 f8fe 	bl	80068d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066d8:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <pvPortMalloc+0x188>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	4a19      	ldr	r2, [pc, #100]	; (8006748 <pvPortMalloc+0x188>)
 80066e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <pvPortMalloc+0x188>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4b19      	ldr	r3, [pc, #100]	; (8006750 <pvPortMalloc+0x190>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d203      	bcs.n	80066fa <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066f2:	4b15      	ldr	r3, [pc, #84]	; (8006748 <pvPortMalloc+0x188>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a16      	ldr	r2, [pc, #88]	; (8006750 <pvPortMalloc+0x190>)
 80066f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <pvPortMalloc+0x184>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	431a      	orrs	r2, r3
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800670e:	f7ff fba7 	bl	8005e60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00c      	beq.n	8006736 <pvPortMalloc+0x176>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <pvPortMalloc+0x174>
	return pvReturn;
 8006736:	69fb      	ldr	r3, [r7, #28]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3728      	adds	r7, #40	; 0x28
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	200049ec 	.word	0x200049ec
 8006744:	200049f8 	.word	0x200049f8
 8006748:	200049f0 	.word	0x200049f0
 800674c:	200049e4 	.word	0x200049e4
 8006750:	200049f4 	.word	0x200049f4

08006754 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d04c      	beq.n	8006800 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006766:	2308      	movs	r3, #8
 8006768:	425b      	negs	r3, r3
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4413      	add	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	4b23      	ldr	r3, [pc, #140]	; (8006808 <vPortFree+0xb4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4013      	ands	r3, r2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10c      	bne.n	800679c <vPortFree+0x48>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	60fb      	str	r3, [r7, #12]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00c      	beq.n	80067be <vPortFree+0x6a>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	b672      	cpsid	i
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	b662      	cpsie	i
 80067b8:	60bb      	str	r3, [r7, #8]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <vPortFree+0xb4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d019      	beq.n	8006800 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d115      	bne.n	8006800 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <vPortFree+0xb4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	43db      	mvns	r3, r3
 80067de:	401a      	ands	r2, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067e4:	f7ff fb2e 	bl	8005e44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <vPortFree+0xb8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4413      	add	r3, r2
 80067f2:	4a06      	ldr	r2, [pc, #24]	; (800680c <vPortFree+0xb8>)
 80067f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067f6:	6938      	ldr	r0, [r7, #16]
 80067f8:	f000 f86c 	bl	80068d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80067fc:	f7ff fb30 	bl	8005e60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006800:	bf00      	nop
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	200049f8 	.word	0x200049f8
 800680c:	200049f0 	.word	0x200049f0

08006810 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006816:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800681a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800681c:	4b27      	ldr	r3, [pc, #156]	; (80068bc <prvHeapInit+0xac>)
 800681e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00c      	beq.n	8006844 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3307      	adds	r3, #7
 800682e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0307 	bic.w	r3, r3, #7
 8006836:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <prvHeapInit+0xac>)
 8006840:	4413      	add	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006848:	4a1d      	ldr	r2, [pc, #116]	; (80068c0 <prvHeapInit+0xb0>)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <prvHeapInit+0xb0>)
 8006850:	2200      	movs	r2, #0
 8006852:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	4413      	add	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800685c:	2208      	movs	r2, #8
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1a9b      	subs	r3, r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0307 	bic.w	r3, r3, #7
 800686a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <prvHeapInit+0xb4>)
 8006870:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006872:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <prvHeapInit+0xb4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800687a:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <prvHeapInit+0xb4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006890:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <prvHeapInit+0xb4>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <prvHeapInit+0xb8>)
 800689e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4a09      	ldr	r2, [pc, #36]	; (80068cc <prvHeapInit+0xbc>)
 80068a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068a8:	4b09      	ldr	r3, [pc, #36]	; (80068d0 <prvHeapInit+0xc0>)
 80068aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068ae:	601a      	str	r2, [r3, #0]
}
 80068b0:	bf00      	nop
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20000de4 	.word	0x20000de4
 80068c0:	200049e4 	.word	0x200049e4
 80068c4:	200049ec 	.word	0x200049ec
 80068c8:	200049f4 	.word	0x200049f4
 80068cc:	200049f0 	.word	0x200049f0
 80068d0:	200049f8 	.word	0x200049f8

080068d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068dc:	4b28      	ldr	r3, [pc, #160]	; (8006980 <prvInsertBlockIntoFreeList+0xac>)
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e002      	b.n	80068e8 <prvInsertBlockIntoFreeList+0x14>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d8f7      	bhi.n	80068e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d108      	bne.n	8006916 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	441a      	add	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	441a      	add	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d118      	bne.n	800695c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <prvInsertBlockIntoFreeList+0xb0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d00d      	beq.n	8006952 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	441a      	add	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e008      	b.n	8006964 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006952:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <prvInsertBlockIntoFreeList+0xb0>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e003      	b.n	8006964 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d002      	beq.n	8006972 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	200049e4 	.word	0x200049e4
 8006984:	200049ec 	.word	0x200049ec

08006988 <__cvt>:
 8006988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698a:	ed2d 8b02 	vpush	{d8}
 800698e:	eeb0 8b40 	vmov.f64	d8, d0
 8006992:	b085      	sub	sp, #20
 8006994:	4617      	mov	r7, r2
 8006996:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006998:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800699a:	ee18 2a90 	vmov	r2, s17
 800699e:	f025 0520 	bic.w	r5, r5, #32
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	bfb6      	itet	lt
 80069a6:	222d      	movlt	r2, #45	; 0x2d
 80069a8:	2200      	movge	r2, #0
 80069aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80069ae:	2d46      	cmp	r5, #70	; 0x46
 80069b0:	460c      	mov	r4, r1
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	d004      	beq.n	80069c0 <__cvt+0x38>
 80069b6:	2d45      	cmp	r5, #69	; 0x45
 80069b8:	d100      	bne.n	80069bc <__cvt+0x34>
 80069ba:	3401      	adds	r4, #1
 80069bc:	2102      	movs	r1, #2
 80069be:	e000      	b.n	80069c2 <__cvt+0x3a>
 80069c0:	2103      	movs	r1, #3
 80069c2:	ab03      	add	r3, sp, #12
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	ab02      	add	r3, sp, #8
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	4622      	mov	r2, r4
 80069cc:	4633      	mov	r3, r6
 80069ce:	eeb0 0b48 	vmov.f64	d0, d8
 80069d2:	f000 fe51 	bl	8007678 <_dtoa_r>
 80069d6:	2d47      	cmp	r5, #71	; 0x47
 80069d8:	d101      	bne.n	80069de <__cvt+0x56>
 80069da:	07fb      	lsls	r3, r7, #31
 80069dc:	d51a      	bpl.n	8006a14 <__cvt+0x8c>
 80069de:	2d46      	cmp	r5, #70	; 0x46
 80069e0:	eb00 0204 	add.w	r2, r0, r4
 80069e4:	d10c      	bne.n	8006a00 <__cvt+0x78>
 80069e6:	7803      	ldrb	r3, [r0, #0]
 80069e8:	2b30      	cmp	r3, #48	; 0x30
 80069ea:	d107      	bne.n	80069fc <__cvt+0x74>
 80069ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80069f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f4:	bf1c      	itt	ne
 80069f6:	f1c4 0401 	rsbne	r4, r4, #1
 80069fa:	6034      	strne	r4, [r6, #0]
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	441a      	add	r2, r3
 8006a00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a08:	bf08      	it	eq
 8006a0a:	9203      	streq	r2, [sp, #12]
 8006a0c:	2130      	movs	r1, #48	; 0x30
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d307      	bcc.n	8006a24 <__cvt+0x9c>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a18:	1a1b      	subs	r3, r3, r0
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	b005      	add	sp, #20
 8006a1e:	ecbd 8b02 	vpop	{d8}
 8006a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a24:	1c5c      	adds	r4, r3, #1
 8006a26:	9403      	str	r4, [sp, #12]
 8006a28:	7019      	strb	r1, [r3, #0]
 8006a2a:	e7f0      	b.n	8006a0e <__cvt+0x86>

08006a2c <__exponent>:
 8006a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2900      	cmp	r1, #0
 8006a32:	bfb8      	it	lt
 8006a34:	4249      	neglt	r1, r1
 8006a36:	f803 2b02 	strb.w	r2, [r3], #2
 8006a3a:	bfb4      	ite	lt
 8006a3c:	222d      	movlt	r2, #45	; 0x2d
 8006a3e:	222b      	movge	r2, #43	; 0x2b
 8006a40:	2909      	cmp	r1, #9
 8006a42:	7042      	strb	r2, [r0, #1]
 8006a44:	dd2a      	ble.n	8006a9c <__exponent+0x70>
 8006a46:	f10d 0207 	add.w	r2, sp, #7
 8006a4a:	4617      	mov	r7, r2
 8006a4c:	260a      	movs	r6, #10
 8006a4e:	4694      	mov	ip, r2
 8006a50:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a54:	fb06 1415 	mls	r4, r6, r5, r1
 8006a58:	3430      	adds	r4, #48	; 0x30
 8006a5a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a5e:	460c      	mov	r4, r1
 8006a60:	2c63      	cmp	r4, #99	; 0x63
 8006a62:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a66:	4629      	mov	r1, r5
 8006a68:	dcf1      	bgt.n	8006a4e <__exponent+0x22>
 8006a6a:	3130      	adds	r1, #48	; 0x30
 8006a6c:	f1ac 0402 	sub.w	r4, ip, #2
 8006a70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a74:	1c41      	adds	r1, r0, #1
 8006a76:	4622      	mov	r2, r4
 8006a78:	42ba      	cmp	r2, r7
 8006a7a:	d30a      	bcc.n	8006a92 <__exponent+0x66>
 8006a7c:	f10d 0209 	add.w	r2, sp, #9
 8006a80:	eba2 020c 	sub.w	r2, r2, ip
 8006a84:	42bc      	cmp	r4, r7
 8006a86:	bf88      	it	hi
 8006a88:	2200      	movhi	r2, #0
 8006a8a:	4413      	add	r3, r2
 8006a8c:	1a18      	subs	r0, r3, r0
 8006a8e:	b003      	add	sp, #12
 8006a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a92:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006a96:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006a9a:	e7ed      	b.n	8006a78 <__exponent+0x4c>
 8006a9c:	2330      	movs	r3, #48	; 0x30
 8006a9e:	3130      	adds	r1, #48	; 0x30
 8006aa0:	7083      	strb	r3, [r0, #2]
 8006aa2:	70c1      	strb	r1, [r0, #3]
 8006aa4:	1d03      	adds	r3, r0, #4
 8006aa6:	e7f1      	b.n	8006a8c <__exponent+0x60>

08006aa8 <_printf_float>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	b08b      	sub	sp, #44	; 0x2c
 8006aae:	460c      	mov	r4, r1
 8006ab0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006ab4:	4616      	mov	r6, r2
 8006ab6:	461f      	mov	r7, r3
 8006ab8:	4605      	mov	r5, r0
 8006aba:	f000 fccd 	bl	8007458 <_localeconv_r>
 8006abe:	f8d0 b000 	ldr.w	fp, [r0]
 8006ac2:	4658      	mov	r0, fp
 8006ac4:	f7f9 fc0c 	bl	80002e0 <strlen>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9308      	str	r3, [sp, #32]
 8006acc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	3307      	adds	r3, #7
 8006ad8:	f023 0307 	bic.w	r3, r3, #7
 8006adc:	f103 0108 	add.w	r1, r3, #8
 8006ae0:	f8c8 1000 	str.w	r1, [r8]
 8006ae4:	ed93 0b00 	vldr	d0, [r3]
 8006ae8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006d48 <_printf_float+0x2a0>
 8006aec:	eeb0 7bc0 	vabs.f64	d7, d0
 8006af0:	eeb4 7b46 	vcmp.f64	d7, d6
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006afc:	4682      	mov	sl, r0
 8006afe:	dd24      	ble.n	8006b4a <_printf_float+0xa2>
 8006b00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b08:	d502      	bpl.n	8006b10 <_printf_float+0x68>
 8006b0a:	232d      	movs	r3, #45	; 0x2d
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b10:	498f      	ldr	r1, [pc, #572]	; (8006d50 <_printf_float+0x2a8>)
 8006b12:	4b90      	ldr	r3, [pc, #576]	; (8006d54 <_printf_float+0x2ac>)
 8006b14:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b18:	bf94      	ite	ls
 8006b1a:	4688      	movls	r8, r1
 8006b1c:	4698      	movhi	r8, r3
 8006b1e:	2303      	movs	r3, #3
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	f022 0204 	bic.w	r2, r2, #4
 8006b26:	2300      	movs	r3, #0
 8006b28:	6022      	str	r2, [r4, #0]
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	9700      	str	r7, [sp, #0]
 8006b2e:	4633      	mov	r3, r6
 8006b30:	aa09      	add	r2, sp, #36	; 0x24
 8006b32:	4621      	mov	r1, r4
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 f9d1 	bl	8006edc <_printf_common>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f040 808a 	bne.w	8006c54 <_printf_float+0x1ac>
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	b00b      	add	sp, #44	; 0x2c
 8006b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b52:	d709      	bvc.n	8006b68 <_printf_float+0xc0>
 8006b54:	ee10 3a90 	vmov	r3, s1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bfbc      	itt	lt
 8006b5c:	232d      	movlt	r3, #45	; 0x2d
 8006b5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b62:	497d      	ldr	r1, [pc, #500]	; (8006d58 <_printf_float+0x2b0>)
 8006b64:	4b7d      	ldr	r3, [pc, #500]	; (8006d5c <_printf_float+0x2b4>)
 8006b66:	e7d5      	b.n	8006b14 <_printf_float+0x6c>
 8006b68:	6863      	ldr	r3, [r4, #4]
 8006b6a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006b6e:	9104      	str	r1, [sp, #16]
 8006b70:	1c59      	adds	r1, r3, #1
 8006b72:	d13c      	bne.n	8006bee <_printf_float+0x146>
 8006b74:	2306      	movs	r3, #6
 8006b76:	6063      	str	r3, [r4, #4]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	9303      	str	r3, [sp, #12]
 8006b7c:	ab08      	add	r3, sp, #32
 8006b7e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b86:	ab07      	add	r3, sp, #28
 8006b88:	6861      	ldr	r1, [r4, #4]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	6022      	str	r2, [r4, #0]
 8006b8e:	f10d 031b 	add.w	r3, sp, #27
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff fef8 	bl	8006988 <__cvt>
 8006b98:	9b04      	ldr	r3, [sp, #16]
 8006b9a:	9907      	ldr	r1, [sp, #28]
 8006b9c:	2b47      	cmp	r3, #71	; 0x47
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	d108      	bne.n	8006bb4 <_printf_float+0x10c>
 8006ba2:	1cc8      	adds	r0, r1, #3
 8006ba4:	db02      	blt.n	8006bac <_printf_float+0x104>
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	dd41      	ble.n	8006c30 <_printf_float+0x188>
 8006bac:	f1a9 0902 	sub.w	r9, r9, #2
 8006bb0:	fa5f f989 	uxtb.w	r9, r9
 8006bb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bb8:	d820      	bhi.n	8006bfc <_printf_float+0x154>
 8006bba:	3901      	subs	r1, #1
 8006bbc:	464a      	mov	r2, r9
 8006bbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bc2:	9107      	str	r1, [sp, #28]
 8006bc4:	f7ff ff32 	bl	8006a2c <__exponent>
 8006bc8:	9a08      	ldr	r2, [sp, #32]
 8006bca:	9004      	str	r0, [sp, #16]
 8006bcc:	1813      	adds	r3, r2, r0
 8006bce:	2a01      	cmp	r2, #1
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	dc02      	bgt.n	8006bda <_printf_float+0x132>
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	07d2      	lsls	r2, r2, #31
 8006bd8:	d501      	bpl.n	8006bde <_printf_float+0x136>
 8006bda:	3301      	adds	r3, #1
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0a2      	beq.n	8006b2c <_printf_float+0x84>
 8006be6:	232d      	movs	r3, #45	; 0x2d
 8006be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bec:	e79e      	b.n	8006b2c <_printf_float+0x84>
 8006bee:	9904      	ldr	r1, [sp, #16]
 8006bf0:	2947      	cmp	r1, #71	; 0x47
 8006bf2:	d1c1      	bne.n	8006b78 <_printf_float+0xd0>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1bf      	bne.n	8006b78 <_printf_float+0xd0>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e7bc      	b.n	8006b76 <_printf_float+0xce>
 8006bfc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c00:	d118      	bne.n	8006c34 <_printf_float+0x18c>
 8006c02:	2900      	cmp	r1, #0
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	dd0b      	ble.n	8006c20 <_printf_float+0x178>
 8006c08:	6121      	str	r1, [r4, #16]
 8006c0a:	b913      	cbnz	r3, 8006c12 <_printf_float+0x16a>
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	07d0      	lsls	r0, r2, #31
 8006c10:	d502      	bpl.n	8006c18 <_printf_float+0x170>
 8006c12:	3301      	adds	r3, #1
 8006c14:	440b      	add	r3, r1
 8006c16:	6123      	str	r3, [r4, #16]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	e7de      	b.n	8006bde <_printf_float+0x136>
 8006c20:	b913      	cbnz	r3, 8006c28 <_printf_float+0x180>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	07d2      	lsls	r2, r2, #31
 8006c26:	d501      	bpl.n	8006c2c <_printf_float+0x184>
 8006c28:	3302      	adds	r3, #2
 8006c2a:	e7f4      	b.n	8006c16 <_printf_float+0x16e>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e7f2      	b.n	8006c16 <_printf_float+0x16e>
 8006c30:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c34:	9b08      	ldr	r3, [sp, #32]
 8006c36:	4299      	cmp	r1, r3
 8006c38:	db05      	blt.n	8006c46 <_printf_float+0x19e>
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	6121      	str	r1, [r4, #16]
 8006c3e:	07d8      	lsls	r0, r3, #31
 8006c40:	d5ea      	bpl.n	8006c18 <_printf_float+0x170>
 8006c42:	1c4b      	adds	r3, r1, #1
 8006c44:	e7e7      	b.n	8006c16 <_printf_float+0x16e>
 8006c46:	2900      	cmp	r1, #0
 8006c48:	bfd4      	ite	le
 8006c4a:	f1c1 0202 	rsble	r2, r1, #2
 8006c4e:	2201      	movgt	r2, #1
 8006c50:	4413      	add	r3, r2
 8006c52:	e7e0      	b.n	8006c16 <_printf_float+0x16e>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	055a      	lsls	r2, r3, #21
 8006c58:	d407      	bmi.n	8006c6a <_printf_float+0x1c2>
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4628      	mov	r0, r5
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	d12a      	bne.n	8006cbe <_printf_float+0x216>
 8006c68:	e76a      	b.n	8006b40 <_printf_float+0x98>
 8006c6a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c6e:	f240 80e0 	bls.w	8006e32 <_printf_float+0x38a>
 8006c72:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7e:	d133      	bne.n	8006ce8 <_printf_float+0x240>
 8006c80:	4a37      	ldr	r2, [pc, #220]	; (8006d60 <_printf_float+0x2b8>)
 8006c82:	2301      	movs	r3, #1
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f af58 	beq.w	8006b40 <_printf_float+0x98>
 8006c90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	db02      	blt.n	8006c9e <_printf_float+0x1f6>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	07d8      	lsls	r0, r3, #31
 8006c9c:	d50f      	bpl.n	8006cbe <_printf_float+0x216>
 8006c9e:	4653      	mov	r3, sl
 8006ca0:	465a      	mov	r2, fp
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f af49 	beq.w	8006b40 <_printf_float+0x98>
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	f104 091a 	add.w	r9, r4, #26
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	4543      	cmp	r3, r8
 8006cbc:	dc09      	bgt.n	8006cd2 <_printf_float+0x22a>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	079b      	lsls	r3, r3, #30
 8006cc2:	f100 8106 	bmi.w	8006ed2 <_printf_float+0x42a>
 8006cc6:	68e0      	ldr	r0, [r4, #12]
 8006cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cca:	4298      	cmp	r0, r3
 8006ccc:	bfb8      	it	lt
 8006cce:	4618      	movlt	r0, r3
 8006cd0:	e738      	b.n	8006b44 <_printf_float+0x9c>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	464a      	mov	r2, r9
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f af2f 	beq.w	8006b40 <_printf_float+0x98>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	e7e6      	b.n	8006cb6 <_printf_float+0x20e>
 8006ce8:	9b07      	ldr	r3, [sp, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dc3a      	bgt.n	8006d64 <_printf_float+0x2bc>
 8006cee:	4a1c      	ldr	r2, [pc, #112]	; (8006d60 <_printf_float+0x2b8>)
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f af21 	beq.w	8006b40 <_printf_float+0x98>
 8006cfe:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d102      	bne.n	8006d0c <_printf_float+0x264>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	07d9      	lsls	r1, r3, #31
 8006d0a:	d5d8      	bpl.n	8006cbe <_printf_float+0x216>
 8006d0c:	4653      	mov	r3, sl
 8006d0e:	465a      	mov	r2, fp
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af12 	beq.w	8006b40 <_printf_float+0x98>
 8006d1c:	f04f 0900 	mov.w	r9, #0
 8006d20:	f104 0a1a 	add.w	sl, r4, #26
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	425b      	negs	r3, r3
 8006d28:	454b      	cmp	r3, r9
 8006d2a:	dc01      	bgt.n	8006d30 <_printf_float+0x288>
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	e795      	b.n	8006c5c <_printf_float+0x1b4>
 8006d30:	2301      	movs	r3, #1
 8006d32:	4652      	mov	r2, sl
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f43f af00 	beq.w	8006b40 <_printf_float+0x98>
 8006d40:	f109 0901 	add.w	r9, r9, #1
 8006d44:	e7ee      	b.n	8006d24 <_printf_float+0x27c>
 8006d46:	bf00      	nop
 8006d48:	ffffffff 	.word	0xffffffff
 8006d4c:	7fefffff 	.word	0x7fefffff
 8006d50:	080097dc 	.word	0x080097dc
 8006d54:	080097e0 	.word	0x080097e0
 8006d58:	080097e4 	.word	0x080097e4
 8006d5c:	080097e8 	.word	0x080097e8
 8006d60:	080097ec 	.word	0x080097ec
 8006d64:	9a08      	ldr	r2, [sp, #32]
 8006d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	bfa8      	it	ge
 8006d6c:	461a      	movge	r2, r3
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	4691      	mov	r9, r2
 8006d72:	dc38      	bgt.n	8006de6 <_printf_float+0x33e>
 8006d74:	2300      	movs	r3, #0
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d7c:	f104 021a 	add.w	r2, r4, #26
 8006d80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d82:	9905      	ldr	r1, [sp, #20]
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	eba3 0309 	sub.w	r3, r3, r9
 8006d8a:	428b      	cmp	r3, r1
 8006d8c:	dc33      	bgt.n	8006df6 <_printf_float+0x34e>
 8006d8e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	db3c      	blt.n	8006e10 <_printf_float+0x368>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	07da      	lsls	r2, r3, #31
 8006d9a:	d439      	bmi.n	8006e10 <_printf_float+0x368>
 8006d9c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006da0:	eba2 0903 	sub.w	r9, r2, r3
 8006da4:	9b04      	ldr	r3, [sp, #16]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	4591      	cmp	r9, r2
 8006daa:	bfa8      	it	ge
 8006dac:	4691      	movge	r9, r2
 8006dae:	f1b9 0f00 	cmp.w	r9, #0
 8006db2:	dc35      	bgt.n	8006e20 <_printf_float+0x378>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dbc:	f104 0a1a 	add.w	sl, r4, #26
 8006dc0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	eba3 0309 	sub.w	r3, r3, r9
 8006dca:	4543      	cmp	r3, r8
 8006dcc:	f77f af77 	ble.w	8006cbe <_printf_float+0x216>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4652      	mov	r2, sl
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	f43f aeb0 	beq.w	8006b40 <_printf_float+0x98>
 8006de0:	f108 0801 	add.w	r8, r8, #1
 8006de4:	e7ec      	b.n	8006dc0 <_printf_float+0x318>
 8006de6:	4613      	mov	r3, r2
 8006de8:	4631      	mov	r1, r6
 8006dea:	4642      	mov	r2, r8
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	d1bf      	bne.n	8006d74 <_printf_float+0x2cc>
 8006df4:	e6a4      	b.n	8006b40 <_printf_float+0x98>
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	9204      	str	r2, [sp, #16]
 8006dfe:	47b8      	blx	r7
 8006e00:	3001      	adds	r0, #1
 8006e02:	f43f ae9d 	beq.w	8006b40 <_printf_float+0x98>
 8006e06:	9b05      	ldr	r3, [sp, #20]
 8006e08:	9a04      	ldr	r2, [sp, #16]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	9305      	str	r3, [sp, #20]
 8006e0e:	e7b7      	b.n	8006d80 <_printf_float+0x2d8>
 8006e10:	4653      	mov	r3, sl
 8006e12:	465a      	mov	r2, fp
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d1be      	bne.n	8006d9c <_printf_float+0x2f4>
 8006e1e:	e68f      	b.n	8006b40 <_printf_float+0x98>
 8006e20:	9a04      	ldr	r2, [sp, #16]
 8006e22:	464b      	mov	r3, r9
 8006e24:	4442      	add	r2, r8
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d1c1      	bne.n	8006db4 <_printf_float+0x30c>
 8006e30:	e686      	b.n	8006b40 <_printf_float+0x98>
 8006e32:	9a08      	ldr	r2, [sp, #32]
 8006e34:	2a01      	cmp	r2, #1
 8006e36:	dc01      	bgt.n	8006e3c <_printf_float+0x394>
 8006e38:	07db      	lsls	r3, r3, #31
 8006e3a:	d537      	bpl.n	8006eac <_printf_float+0x404>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4642      	mov	r2, r8
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	f43f ae7a 	beq.w	8006b40 <_printf_float+0x98>
 8006e4c:	4653      	mov	r3, sl
 8006e4e:	465a      	mov	r2, fp
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f ae72 	beq.w	8006b40 <_printf_float+0x98>
 8006e5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e68:	9b08      	ldr	r3, [sp, #32]
 8006e6a:	d01a      	beq.n	8006ea2 <_printf_float+0x3fa>
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f108 0201 	add.w	r2, r8, #1
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d10e      	bne.n	8006e9a <_printf_float+0x3f2>
 8006e7c:	e660      	b.n	8006b40 <_printf_float+0x98>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	464a      	mov	r2, r9
 8006e82:	4631      	mov	r1, r6
 8006e84:	4628      	mov	r0, r5
 8006e86:	47b8      	blx	r7
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f43f ae59 	beq.w	8006b40 <_printf_float+0x98>
 8006e8e:	f108 0801 	add.w	r8, r8, #1
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	4543      	cmp	r3, r8
 8006e98:	dcf1      	bgt.n	8006e7e <_printf_float+0x3d6>
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ea0:	e6dd      	b.n	8006c5e <_printf_float+0x1b6>
 8006ea2:	f04f 0800 	mov.w	r8, #0
 8006ea6:	f104 091a 	add.w	r9, r4, #26
 8006eaa:	e7f2      	b.n	8006e92 <_printf_float+0x3ea>
 8006eac:	2301      	movs	r3, #1
 8006eae:	4642      	mov	r2, r8
 8006eb0:	e7df      	b.n	8006e72 <_printf_float+0x3ca>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	464a      	mov	r2, r9
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f43f ae3f 	beq.w	8006b40 <_printf_float+0x98>
 8006ec2:	f108 0801 	add.w	r8, r8, #1
 8006ec6:	68e3      	ldr	r3, [r4, #12]
 8006ec8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eca:	1a5b      	subs	r3, r3, r1
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	dcf0      	bgt.n	8006eb2 <_printf_float+0x40a>
 8006ed0:	e6f9      	b.n	8006cc6 <_printf_float+0x21e>
 8006ed2:	f04f 0800 	mov.w	r8, #0
 8006ed6:	f104 0919 	add.w	r9, r4, #25
 8006eda:	e7f4      	b.n	8006ec6 <_printf_float+0x41e>

08006edc <_printf_common>:
 8006edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	4616      	mov	r6, r2
 8006ee2:	4699      	mov	r9, r3
 8006ee4:	688a      	ldr	r2, [r1, #8]
 8006ee6:	690b      	ldr	r3, [r1, #16]
 8006ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006eec:	4293      	cmp	r3, r2
 8006eee:	bfb8      	it	lt
 8006ef0:	4613      	movlt	r3, r2
 8006ef2:	6033      	str	r3, [r6, #0]
 8006ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef8:	4607      	mov	r7, r0
 8006efa:	460c      	mov	r4, r1
 8006efc:	b10a      	cbz	r2, 8006f02 <_printf_common+0x26>
 8006efe:	3301      	adds	r3, #1
 8006f00:	6033      	str	r3, [r6, #0]
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	0699      	lsls	r1, r3, #26
 8006f06:	bf42      	ittt	mi
 8006f08:	6833      	ldrmi	r3, [r6, #0]
 8006f0a:	3302      	addmi	r3, #2
 8006f0c:	6033      	strmi	r3, [r6, #0]
 8006f0e:	6825      	ldr	r5, [r4, #0]
 8006f10:	f015 0506 	ands.w	r5, r5, #6
 8006f14:	d106      	bne.n	8006f24 <_printf_common+0x48>
 8006f16:	f104 0a19 	add.w	sl, r4, #25
 8006f1a:	68e3      	ldr	r3, [r4, #12]
 8006f1c:	6832      	ldr	r2, [r6, #0]
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	dc26      	bgt.n	8006f72 <_printf_common+0x96>
 8006f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f28:	1e13      	subs	r3, r2, #0
 8006f2a:	6822      	ldr	r2, [r4, #0]
 8006f2c:	bf18      	it	ne
 8006f2e:	2301      	movne	r3, #1
 8006f30:	0692      	lsls	r2, r2, #26
 8006f32:	d42b      	bmi.n	8006f8c <_printf_common+0xb0>
 8006f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f38:	4649      	mov	r1, r9
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	47c0      	blx	r8
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d01e      	beq.n	8006f80 <_printf_common+0xa4>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	6922      	ldr	r2, [r4, #16]
 8006f46:	f003 0306 	and.w	r3, r3, #6
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	bf02      	ittt	eq
 8006f4e:	68e5      	ldreq	r5, [r4, #12]
 8006f50:	6833      	ldreq	r3, [r6, #0]
 8006f52:	1aed      	subeq	r5, r5, r3
 8006f54:	68a3      	ldr	r3, [r4, #8]
 8006f56:	bf0c      	ite	eq
 8006f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f5c:	2500      	movne	r5, #0
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	bfc4      	itt	gt
 8006f62:	1a9b      	subgt	r3, r3, r2
 8006f64:	18ed      	addgt	r5, r5, r3
 8006f66:	2600      	movs	r6, #0
 8006f68:	341a      	adds	r4, #26
 8006f6a:	42b5      	cmp	r5, r6
 8006f6c:	d11a      	bne.n	8006fa4 <_printf_common+0xc8>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	e008      	b.n	8006f84 <_printf_common+0xa8>
 8006f72:	2301      	movs	r3, #1
 8006f74:	4652      	mov	r2, sl
 8006f76:	4649      	mov	r1, r9
 8006f78:	4638      	mov	r0, r7
 8006f7a:	47c0      	blx	r8
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d103      	bne.n	8006f88 <_printf_common+0xac>
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295
 8006f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f88:	3501      	adds	r5, #1
 8006f8a:	e7c6      	b.n	8006f1a <_printf_common+0x3e>
 8006f8c:	18e1      	adds	r1, r4, r3
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	2030      	movs	r0, #48	; 0x30
 8006f92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f96:	4422      	add	r2, r4
 8006f98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	e7c7      	b.n	8006f34 <_printf_common+0x58>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	4649      	mov	r1, r9
 8006faa:	4638      	mov	r0, r7
 8006fac:	47c0      	blx	r8
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d0e6      	beq.n	8006f80 <_printf_common+0xa4>
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7d9      	b.n	8006f6a <_printf_common+0x8e>
	...

08006fb8 <_printf_i>:
 8006fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	7e0f      	ldrb	r7, [r1, #24]
 8006fbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fc0:	2f78      	cmp	r7, #120	; 0x78
 8006fc2:	4691      	mov	r9, r2
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	469a      	mov	sl, r3
 8006fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fce:	d807      	bhi.n	8006fe0 <_printf_i+0x28>
 8006fd0:	2f62      	cmp	r7, #98	; 0x62
 8006fd2:	d80a      	bhi.n	8006fea <_printf_i+0x32>
 8006fd4:	2f00      	cmp	r7, #0
 8006fd6:	f000 80d4 	beq.w	8007182 <_printf_i+0x1ca>
 8006fda:	2f58      	cmp	r7, #88	; 0x58
 8006fdc:	f000 80c0 	beq.w	8007160 <_printf_i+0x1a8>
 8006fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe8:	e03a      	b.n	8007060 <_printf_i+0xa8>
 8006fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fee:	2b15      	cmp	r3, #21
 8006ff0:	d8f6      	bhi.n	8006fe0 <_printf_i+0x28>
 8006ff2:	a101      	add	r1, pc, #4	; (adr r1, 8006ff8 <_printf_i+0x40>)
 8006ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ff8:	08007051 	.word	0x08007051
 8006ffc:	08007065 	.word	0x08007065
 8007000:	08006fe1 	.word	0x08006fe1
 8007004:	08006fe1 	.word	0x08006fe1
 8007008:	08006fe1 	.word	0x08006fe1
 800700c:	08006fe1 	.word	0x08006fe1
 8007010:	08007065 	.word	0x08007065
 8007014:	08006fe1 	.word	0x08006fe1
 8007018:	08006fe1 	.word	0x08006fe1
 800701c:	08006fe1 	.word	0x08006fe1
 8007020:	08006fe1 	.word	0x08006fe1
 8007024:	08007169 	.word	0x08007169
 8007028:	08007091 	.word	0x08007091
 800702c:	08007123 	.word	0x08007123
 8007030:	08006fe1 	.word	0x08006fe1
 8007034:	08006fe1 	.word	0x08006fe1
 8007038:	0800718b 	.word	0x0800718b
 800703c:	08006fe1 	.word	0x08006fe1
 8007040:	08007091 	.word	0x08007091
 8007044:	08006fe1 	.word	0x08006fe1
 8007048:	08006fe1 	.word	0x08006fe1
 800704c:	0800712b 	.word	0x0800712b
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	1d1a      	adds	r2, r3, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	602a      	str	r2, [r5, #0]
 8007058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800705c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007060:	2301      	movs	r3, #1
 8007062:	e09f      	b.n	80071a4 <_printf_i+0x1ec>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	0607      	lsls	r7, r0, #24
 800706a:	f103 0104 	add.w	r1, r3, #4
 800706e:	6029      	str	r1, [r5, #0]
 8007070:	d501      	bpl.n	8007076 <_printf_i+0xbe>
 8007072:	681e      	ldr	r6, [r3, #0]
 8007074:	e003      	b.n	800707e <_printf_i+0xc6>
 8007076:	0646      	lsls	r6, r0, #25
 8007078:	d5fb      	bpl.n	8007072 <_printf_i+0xba>
 800707a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800707e:	2e00      	cmp	r6, #0
 8007080:	da03      	bge.n	800708a <_printf_i+0xd2>
 8007082:	232d      	movs	r3, #45	; 0x2d
 8007084:	4276      	negs	r6, r6
 8007086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800708a:	485a      	ldr	r0, [pc, #360]	; (80071f4 <_printf_i+0x23c>)
 800708c:	230a      	movs	r3, #10
 800708e:	e012      	b.n	80070b6 <_printf_i+0xfe>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	6820      	ldr	r0, [r4, #0]
 8007094:	1d19      	adds	r1, r3, #4
 8007096:	6029      	str	r1, [r5, #0]
 8007098:	0605      	lsls	r5, r0, #24
 800709a:	d501      	bpl.n	80070a0 <_printf_i+0xe8>
 800709c:	681e      	ldr	r6, [r3, #0]
 800709e:	e002      	b.n	80070a6 <_printf_i+0xee>
 80070a0:	0641      	lsls	r1, r0, #25
 80070a2:	d5fb      	bpl.n	800709c <_printf_i+0xe4>
 80070a4:	881e      	ldrh	r6, [r3, #0]
 80070a6:	4853      	ldr	r0, [pc, #332]	; (80071f4 <_printf_i+0x23c>)
 80070a8:	2f6f      	cmp	r7, #111	; 0x6f
 80070aa:	bf0c      	ite	eq
 80070ac:	2308      	moveq	r3, #8
 80070ae:	230a      	movne	r3, #10
 80070b0:	2100      	movs	r1, #0
 80070b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b6:	6865      	ldr	r5, [r4, #4]
 80070b8:	60a5      	str	r5, [r4, #8]
 80070ba:	2d00      	cmp	r5, #0
 80070bc:	bfa2      	ittt	ge
 80070be:	6821      	ldrge	r1, [r4, #0]
 80070c0:	f021 0104 	bicge.w	r1, r1, #4
 80070c4:	6021      	strge	r1, [r4, #0]
 80070c6:	b90e      	cbnz	r6, 80070cc <_printf_i+0x114>
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	d04b      	beq.n	8007164 <_printf_i+0x1ac>
 80070cc:	4615      	mov	r5, r2
 80070ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80070d2:	fb03 6711 	mls	r7, r3, r1, r6
 80070d6:	5dc7      	ldrb	r7, [r0, r7]
 80070d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070dc:	4637      	mov	r7, r6
 80070de:	42bb      	cmp	r3, r7
 80070e0:	460e      	mov	r6, r1
 80070e2:	d9f4      	bls.n	80070ce <_printf_i+0x116>
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d10b      	bne.n	8007100 <_printf_i+0x148>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	07de      	lsls	r6, r3, #31
 80070ec:	d508      	bpl.n	8007100 <_printf_i+0x148>
 80070ee:	6923      	ldr	r3, [r4, #16]
 80070f0:	6861      	ldr	r1, [r4, #4]
 80070f2:	4299      	cmp	r1, r3
 80070f4:	bfde      	ittt	le
 80070f6:	2330      	movle	r3, #48	; 0x30
 80070f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007100:	1b52      	subs	r2, r2, r5
 8007102:	6122      	str	r2, [r4, #16]
 8007104:	f8cd a000 	str.w	sl, [sp]
 8007108:	464b      	mov	r3, r9
 800710a:	aa03      	add	r2, sp, #12
 800710c:	4621      	mov	r1, r4
 800710e:	4640      	mov	r0, r8
 8007110:	f7ff fee4 	bl	8006edc <_printf_common>
 8007114:	3001      	adds	r0, #1
 8007116:	d14a      	bne.n	80071ae <_printf_i+0x1f6>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	b004      	add	sp, #16
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	f043 0320 	orr.w	r3, r3, #32
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	4833      	ldr	r0, [pc, #204]	; (80071f8 <_printf_i+0x240>)
 800712c:	2778      	movs	r7, #120	; 0x78
 800712e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	6829      	ldr	r1, [r5, #0]
 8007136:	061f      	lsls	r7, r3, #24
 8007138:	f851 6b04 	ldr.w	r6, [r1], #4
 800713c:	d402      	bmi.n	8007144 <_printf_i+0x18c>
 800713e:	065f      	lsls	r7, r3, #25
 8007140:	bf48      	it	mi
 8007142:	b2b6      	uxthmi	r6, r6
 8007144:	07df      	lsls	r7, r3, #31
 8007146:	bf48      	it	mi
 8007148:	f043 0320 	orrmi.w	r3, r3, #32
 800714c:	6029      	str	r1, [r5, #0]
 800714e:	bf48      	it	mi
 8007150:	6023      	strmi	r3, [r4, #0]
 8007152:	b91e      	cbnz	r6, 800715c <_printf_i+0x1a4>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	f023 0320 	bic.w	r3, r3, #32
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	2310      	movs	r3, #16
 800715e:	e7a7      	b.n	80070b0 <_printf_i+0xf8>
 8007160:	4824      	ldr	r0, [pc, #144]	; (80071f4 <_printf_i+0x23c>)
 8007162:	e7e4      	b.n	800712e <_printf_i+0x176>
 8007164:	4615      	mov	r5, r2
 8007166:	e7bd      	b.n	80070e4 <_printf_i+0x12c>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	6826      	ldr	r6, [r4, #0]
 800716c:	6961      	ldr	r1, [r4, #20]
 800716e:	1d18      	adds	r0, r3, #4
 8007170:	6028      	str	r0, [r5, #0]
 8007172:	0635      	lsls	r5, r6, #24
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	d501      	bpl.n	800717c <_printf_i+0x1c4>
 8007178:	6019      	str	r1, [r3, #0]
 800717a:	e002      	b.n	8007182 <_printf_i+0x1ca>
 800717c:	0670      	lsls	r0, r6, #25
 800717e:	d5fb      	bpl.n	8007178 <_printf_i+0x1c0>
 8007180:	8019      	strh	r1, [r3, #0]
 8007182:	2300      	movs	r3, #0
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	4615      	mov	r5, r2
 8007188:	e7bc      	b.n	8007104 <_printf_i+0x14c>
 800718a:	682b      	ldr	r3, [r5, #0]
 800718c:	1d1a      	adds	r2, r3, #4
 800718e:	602a      	str	r2, [r5, #0]
 8007190:	681d      	ldr	r5, [r3, #0]
 8007192:	6862      	ldr	r2, [r4, #4]
 8007194:	2100      	movs	r1, #0
 8007196:	4628      	mov	r0, r5
 8007198:	f7f9 f852 	bl	8000240 <memchr>
 800719c:	b108      	cbz	r0, 80071a2 <_printf_i+0x1ea>
 800719e:	1b40      	subs	r0, r0, r5
 80071a0:	6060      	str	r0, [r4, #4]
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	2300      	movs	r3, #0
 80071a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ac:	e7aa      	b.n	8007104 <_printf_i+0x14c>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	462a      	mov	r2, r5
 80071b2:	4649      	mov	r1, r9
 80071b4:	4640      	mov	r0, r8
 80071b6:	47d0      	blx	sl
 80071b8:	3001      	adds	r0, #1
 80071ba:	d0ad      	beq.n	8007118 <_printf_i+0x160>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	079b      	lsls	r3, r3, #30
 80071c0:	d413      	bmi.n	80071ea <_printf_i+0x232>
 80071c2:	68e0      	ldr	r0, [r4, #12]
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	4298      	cmp	r0, r3
 80071c8:	bfb8      	it	lt
 80071ca:	4618      	movlt	r0, r3
 80071cc:	e7a6      	b.n	800711c <_printf_i+0x164>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4632      	mov	r2, r6
 80071d2:	4649      	mov	r1, r9
 80071d4:	4640      	mov	r0, r8
 80071d6:	47d0      	blx	sl
 80071d8:	3001      	adds	r0, #1
 80071da:	d09d      	beq.n	8007118 <_printf_i+0x160>
 80071dc:	3501      	adds	r5, #1
 80071de:	68e3      	ldr	r3, [r4, #12]
 80071e0:	9903      	ldr	r1, [sp, #12]
 80071e2:	1a5b      	subs	r3, r3, r1
 80071e4:	42ab      	cmp	r3, r5
 80071e6:	dcf2      	bgt.n	80071ce <_printf_i+0x216>
 80071e8:	e7eb      	b.n	80071c2 <_printf_i+0x20a>
 80071ea:	2500      	movs	r5, #0
 80071ec:	f104 0619 	add.w	r6, r4, #25
 80071f0:	e7f5      	b.n	80071de <_printf_i+0x226>
 80071f2:	bf00      	nop
 80071f4:	080097ee 	.word	0x080097ee
 80071f8:	080097ff 	.word	0x080097ff

080071fc <std>:
 80071fc:	2300      	movs	r3, #0
 80071fe:	b510      	push	{r4, lr}
 8007200:	4604      	mov	r4, r0
 8007202:	e9c0 3300 	strd	r3, r3, [r0]
 8007206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800720a:	6083      	str	r3, [r0, #8]
 800720c:	8181      	strh	r1, [r0, #12]
 800720e:	6643      	str	r3, [r0, #100]	; 0x64
 8007210:	81c2      	strh	r2, [r0, #14]
 8007212:	6183      	str	r3, [r0, #24]
 8007214:	4619      	mov	r1, r3
 8007216:	2208      	movs	r2, #8
 8007218:	305c      	adds	r0, #92	; 0x5c
 800721a:	f000 f914 	bl	8007446 <memset>
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <std+0x58>)
 8007220:	6263      	str	r3, [r4, #36]	; 0x24
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <std+0x5c>)
 8007224:	62a3      	str	r3, [r4, #40]	; 0x28
 8007226:	4b0d      	ldr	r3, [pc, #52]	; (800725c <std+0x60>)
 8007228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800722a:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <std+0x64>)
 800722c:	6323      	str	r3, [r4, #48]	; 0x30
 800722e:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <std+0x68>)
 8007230:	6224      	str	r4, [r4, #32]
 8007232:	429c      	cmp	r4, r3
 8007234:	d006      	beq.n	8007244 <std+0x48>
 8007236:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800723a:	4294      	cmp	r4, r2
 800723c:	d002      	beq.n	8007244 <std+0x48>
 800723e:	33d0      	adds	r3, #208	; 0xd0
 8007240:	429c      	cmp	r4, r3
 8007242:	d105      	bne.n	8007250 <std+0x54>
 8007244:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800724c:	f000 b978 	b.w	8007540 <__retarget_lock_init_recursive>
 8007250:	bd10      	pop	{r4, pc}
 8007252:	bf00      	nop
 8007254:	080073c1 	.word	0x080073c1
 8007258:	080073e3 	.word	0x080073e3
 800725c:	0800741b 	.word	0x0800741b
 8007260:	0800743f 	.word	0x0800743f
 8007264:	200049fc 	.word	0x200049fc

08007268 <stdio_exit_handler>:
 8007268:	4a02      	ldr	r2, [pc, #8]	; (8007274 <stdio_exit_handler+0xc>)
 800726a:	4903      	ldr	r1, [pc, #12]	; (8007278 <stdio_exit_handler+0x10>)
 800726c:	4803      	ldr	r0, [pc, #12]	; (800727c <stdio_exit_handler+0x14>)
 800726e:	f000 b869 	b.w	8007344 <_fwalk_sglue>
 8007272:	bf00      	nop
 8007274:	20000024 	.word	0x20000024
 8007278:	08008e05 	.word	0x08008e05
 800727c:	20000030 	.word	0x20000030

08007280 <cleanup_stdio>:
 8007280:	6841      	ldr	r1, [r0, #4]
 8007282:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <cleanup_stdio+0x34>)
 8007284:	4299      	cmp	r1, r3
 8007286:	b510      	push	{r4, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	d001      	beq.n	8007290 <cleanup_stdio+0x10>
 800728c:	f001 fdba 	bl	8008e04 <_fflush_r>
 8007290:	68a1      	ldr	r1, [r4, #8]
 8007292:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <cleanup_stdio+0x38>)
 8007294:	4299      	cmp	r1, r3
 8007296:	d002      	beq.n	800729e <cleanup_stdio+0x1e>
 8007298:	4620      	mov	r0, r4
 800729a:	f001 fdb3 	bl	8008e04 <_fflush_r>
 800729e:	68e1      	ldr	r1, [r4, #12]
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <cleanup_stdio+0x3c>)
 80072a2:	4299      	cmp	r1, r3
 80072a4:	d004      	beq.n	80072b0 <cleanup_stdio+0x30>
 80072a6:	4620      	mov	r0, r4
 80072a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ac:	f001 bdaa 	b.w	8008e04 <_fflush_r>
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	200049fc 	.word	0x200049fc
 80072b8:	20004a64 	.word	0x20004a64
 80072bc:	20004acc 	.word	0x20004acc

080072c0 <global_stdio_init.part.0>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <global_stdio_init.part.0+0x30>)
 80072c4:	4c0b      	ldr	r4, [pc, #44]	; (80072f4 <global_stdio_init.part.0+0x34>)
 80072c6:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <global_stdio_init.part.0+0x38>)
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	4620      	mov	r0, r4
 80072cc:	2200      	movs	r2, #0
 80072ce:	2104      	movs	r1, #4
 80072d0:	f7ff ff94 	bl	80071fc <std>
 80072d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072d8:	2201      	movs	r2, #1
 80072da:	2109      	movs	r1, #9
 80072dc:	f7ff ff8e 	bl	80071fc <std>
 80072e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072e4:	2202      	movs	r2, #2
 80072e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ea:	2112      	movs	r1, #18
 80072ec:	f7ff bf86 	b.w	80071fc <std>
 80072f0:	20004b34 	.word	0x20004b34
 80072f4:	200049fc 	.word	0x200049fc
 80072f8:	08007269 	.word	0x08007269

080072fc <__sfp_lock_acquire>:
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <__sfp_lock_acquire+0x8>)
 80072fe:	f000 b920 	b.w	8007542 <__retarget_lock_acquire_recursive>
 8007302:	bf00      	nop
 8007304:	20004b3d 	.word	0x20004b3d

08007308 <__sfp_lock_release>:
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <__sfp_lock_release+0x8>)
 800730a:	f000 b91b 	b.w	8007544 <__retarget_lock_release_recursive>
 800730e:	bf00      	nop
 8007310:	20004b3d 	.word	0x20004b3d

08007314 <__sinit>:
 8007314:	b510      	push	{r4, lr}
 8007316:	4604      	mov	r4, r0
 8007318:	f7ff fff0 	bl	80072fc <__sfp_lock_acquire>
 800731c:	6a23      	ldr	r3, [r4, #32]
 800731e:	b11b      	cbz	r3, 8007328 <__sinit+0x14>
 8007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007324:	f7ff bff0 	b.w	8007308 <__sfp_lock_release>
 8007328:	4b04      	ldr	r3, [pc, #16]	; (800733c <__sinit+0x28>)
 800732a:	6223      	str	r3, [r4, #32]
 800732c:	4b04      	ldr	r3, [pc, #16]	; (8007340 <__sinit+0x2c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f5      	bne.n	8007320 <__sinit+0xc>
 8007334:	f7ff ffc4 	bl	80072c0 <global_stdio_init.part.0>
 8007338:	e7f2      	b.n	8007320 <__sinit+0xc>
 800733a:	bf00      	nop
 800733c:	08007281 	.word	0x08007281
 8007340:	20004b34 	.word	0x20004b34

08007344 <_fwalk_sglue>:
 8007344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007348:	4607      	mov	r7, r0
 800734a:	4688      	mov	r8, r1
 800734c:	4614      	mov	r4, r2
 800734e:	2600      	movs	r6, #0
 8007350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007354:	f1b9 0901 	subs.w	r9, r9, #1
 8007358:	d505      	bpl.n	8007366 <_fwalk_sglue+0x22>
 800735a:	6824      	ldr	r4, [r4, #0]
 800735c:	2c00      	cmp	r4, #0
 800735e:	d1f7      	bne.n	8007350 <_fwalk_sglue+0xc>
 8007360:	4630      	mov	r0, r6
 8007362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d907      	bls.n	800737c <_fwalk_sglue+0x38>
 800736c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007370:	3301      	adds	r3, #1
 8007372:	d003      	beq.n	800737c <_fwalk_sglue+0x38>
 8007374:	4629      	mov	r1, r5
 8007376:	4638      	mov	r0, r7
 8007378:	47c0      	blx	r8
 800737a:	4306      	orrs	r6, r0
 800737c:	3568      	adds	r5, #104	; 0x68
 800737e:	e7e9      	b.n	8007354 <_fwalk_sglue+0x10>

08007380 <siprintf>:
 8007380:	b40e      	push	{r1, r2, r3}
 8007382:	b500      	push	{lr}
 8007384:	b09c      	sub	sp, #112	; 0x70
 8007386:	ab1d      	add	r3, sp, #116	; 0x74
 8007388:	9002      	str	r0, [sp, #8]
 800738a:	9006      	str	r0, [sp, #24]
 800738c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007390:	4809      	ldr	r0, [pc, #36]	; (80073b8 <siprintf+0x38>)
 8007392:	9107      	str	r1, [sp, #28]
 8007394:	9104      	str	r1, [sp, #16]
 8007396:	4909      	ldr	r1, [pc, #36]	; (80073bc <siprintf+0x3c>)
 8007398:	f853 2b04 	ldr.w	r2, [r3], #4
 800739c:	9105      	str	r1, [sp, #20]
 800739e:	6800      	ldr	r0, [r0, #0]
 80073a0:	9301      	str	r3, [sp, #4]
 80073a2:	a902      	add	r1, sp, #8
 80073a4:	f001 fbaa 	bl	8008afc <_svfiprintf_r>
 80073a8:	9b02      	ldr	r3, [sp, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	b01c      	add	sp, #112	; 0x70
 80073b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b4:	b003      	add	sp, #12
 80073b6:	4770      	bx	lr
 80073b8:	2000007c 	.word	0x2000007c
 80073bc:	ffff0208 	.word	0xffff0208

080073c0 <__sread>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	460c      	mov	r4, r1
 80073c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c8:	f000 f86c 	bl	80074a4 <_read_r>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	bfab      	itete	ge
 80073d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073d2:	89a3      	ldrhlt	r3, [r4, #12]
 80073d4:	181b      	addge	r3, r3, r0
 80073d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073da:	bfac      	ite	ge
 80073dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073de:	81a3      	strhlt	r3, [r4, #12]
 80073e0:	bd10      	pop	{r4, pc}

080073e2 <__swrite>:
 80073e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	461f      	mov	r7, r3
 80073e8:	898b      	ldrh	r3, [r1, #12]
 80073ea:	05db      	lsls	r3, r3, #23
 80073ec:	4605      	mov	r5, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	4616      	mov	r6, r2
 80073f2:	d505      	bpl.n	8007400 <__swrite+0x1e>
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	2302      	movs	r3, #2
 80073fa:	2200      	movs	r2, #0
 80073fc:	f000 f840 	bl	8007480 <_lseek_r>
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	4632      	mov	r2, r6
 800740e:	463b      	mov	r3, r7
 8007410:	4628      	mov	r0, r5
 8007412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	f000 b857 	b.w	80074c8 <_write_r>

0800741a <__sseek>:
 800741a:	b510      	push	{r4, lr}
 800741c:	460c      	mov	r4, r1
 800741e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007422:	f000 f82d 	bl	8007480 <_lseek_r>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	bf15      	itete	ne
 800742c:	6560      	strne	r0, [r4, #84]	; 0x54
 800742e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007436:	81a3      	strheq	r3, [r4, #12]
 8007438:	bf18      	it	ne
 800743a:	81a3      	strhne	r3, [r4, #12]
 800743c:	bd10      	pop	{r4, pc}

0800743e <__sclose>:
 800743e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007442:	f000 b80d 	b.w	8007460 <_close_r>

08007446 <memset>:
 8007446:	4402      	add	r2, r0
 8007448:	4603      	mov	r3, r0
 800744a:	4293      	cmp	r3, r2
 800744c:	d100      	bne.n	8007450 <memset+0xa>
 800744e:	4770      	bx	lr
 8007450:	f803 1b01 	strb.w	r1, [r3], #1
 8007454:	e7f9      	b.n	800744a <memset+0x4>
	...

08007458 <_localeconv_r>:
 8007458:	4800      	ldr	r0, [pc, #0]	; (800745c <_localeconv_r+0x4>)
 800745a:	4770      	bx	lr
 800745c:	20000170 	.word	0x20000170

08007460 <_close_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4d06      	ldr	r5, [pc, #24]	; (800747c <_close_r+0x1c>)
 8007464:	2300      	movs	r3, #0
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	f7fa f9b1 	bl	80017d2 <_close>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_close_r+0x1a>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	b103      	cbz	r3, 800747a <_close_r+0x1a>
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20004b38 	.word	0x20004b38

08007480 <_lseek_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4d07      	ldr	r5, [pc, #28]	; (80074a0 <_lseek_r+0x20>)
 8007484:	4604      	mov	r4, r0
 8007486:	4608      	mov	r0, r1
 8007488:	4611      	mov	r1, r2
 800748a:	2200      	movs	r2, #0
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	f7fa f9c6 	bl	8001820 <_lseek>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_lseek_r+0x1e>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_lseek_r+0x1e>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	20004b38 	.word	0x20004b38

080074a4 <_read_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d07      	ldr	r5, [pc, #28]	; (80074c4 <_read_r+0x20>)
 80074a8:	4604      	mov	r4, r0
 80074aa:	4608      	mov	r0, r1
 80074ac:	4611      	mov	r1, r2
 80074ae:	2200      	movs	r2, #0
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f7fa f954 	bl	8001760 <_read>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_read_r+0x1e>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_read_r+0x1e>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	20004b38 	.word	0x20004b38

080074c8 <_write_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d07      	ldr	r5, [pc, #28]	; (80074e8 <_write_r+0x20>)
 80074cc:	4604      	mov	r4, r0
 80074ce:	4608      	mov	r0, r1
 80074d0:	4611      	mov	r1, r2
 80074d2:	2200      	movs	r2, #0
 80074d4:	602a      	str	r2, [r5, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f7fa f95f 	bl	800179a <_write>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_write_r+0x1e>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_write_r+0x1e>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	20004b38 	.word	0x20004b38

080074ec <__errno>:
 80074ec:	4b01      	ldr	r3, [pc, #4]	; (80074f4 <__errno+0x8>)
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	2000007c 	.word	0x2000007c

080074f8 <__libc_init_array>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4d0d      	ldr	r5, [pc, #52]	; (8007530 <__libc_init_array+0x38>)
 80074fc:	4c0d      	ldr	r4, [pc, #52]	; (8007534 <__libc_init_array+0x3c>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	2600      	movs	r6, #0
 8007504:	42a6      	cmp	r6, r4
 8007506:	d109      	bne.n	800751c <__libc_init_array+0x24>
 8007508:	4d0b      	ldr	r5, [pc, #44]	; (8007538 <__libc_init_array+0x40>)
 800750a:	4c0c      	ldr	r4, [pc, #48]	; (800753c <__libc_init_array+0x44>)
 800750c:	f002 f810 	bl	8009530 <_init>
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	2600      	movs	r6, #0
 8007516:	42a6      	cmp	r6, r4
 8007518:	d105      	bne.n	8007526 <__libc_init_array+0x2e>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007520:	4798      	blx	r3
 8007522:	3601      	adds	r6, #1
 8007524:	e7ee      	b.n	8007504 <__libc_init_array+0xc>
 8007526:	f855 3b04 	ldr.w	r3, [r5], #4
 800752a:	4798      	blx	r3
 800752c:	3601      	adds	r6, #1
 800752e:	e7f2      	b.n	8007516 <__libc_init_array+0x1e>
 8007530:	08009b54 	.word	0x08009b54
 8007534:	08009b54 	.word	0x08009b54
 8007538:	08009b54 	.word	0x08009b54
 800753c:	08009b58 	.word	0x08009b58

08007540 <__retarget_lock_init_recursive>:
 8007540:	4770      	bx	lr

08007542 <__retarget_lock_acquire_recursive>:
 8007542:	4770      	bx	lr

08007544 <__retarget_lock_release_recursive>:
 8007544:	4770      	bx	lr

08007546 <memcpy>:
 8007546:	440a      	add	r2, r1
 8007548:	4291      	cmp	r1, r2
 800754a:	f100 33ff 	add.w	r3, r0, #4294967295
 800754e:	d100      	bne.n	8007552 <memcpy+0xc>
 8007550:	4770      	bx	lr
 8007552:	b510      	push	{r4, lr}
 8007554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800755c:	4291      	cmp	r1, r2
 800755e:	d1f9      	bne.n	8007554 <memcpy+0xe>
 8007560:	bd10      	pop	{r4, pc}

08007562 <quorem>:
 8007562:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007566:	6903      	ldr	r3, [r0, #16]
 8007568:	690c      	ldr	r4, [r1, #16]
 800756a:	42a3      	cmp	r3, r4
 800756c:	4607      	mov	r7, r0
 800756e:	db7e      	blt.n	800766e <quorem+0x10c>
 8007570:	3c01      	subs	r4, #1
 8007572:	f101 0814 	add.w	r8, r1, #20
 8007576:	f100 0514 	add.w	r5, r0, #20
 800757a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007588:	3301      	adds	r3, #1
 800758a:	429a      	cmp	r2, r3
 800758c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007590:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007594:	fbb2 f6f3 	udiv	r6, r2, r3
 8007598:	d331      	bcc.n	80075fe <quorem+0x9c>
 800759a:	f04f 0e00 	mov.w	lr, #0
 800759e:	4640      	mov	r0, r8
 80075a0:	46ac      	mov	ip, r5
 80075a2:	46f2      	mov	sl, lr
 80075a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80075a8:	b293      	uxth	r3, r2
 80075aa:	fb06 e303 	mla	r3, r6, r3, lr
 80075ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075b2:	0c1a      	lsrs	r2, r3, #16
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	ebaa 0303 	sub.w	r3, sl, r3
 80075ba:	f8dc a000 	ldr.w	sl, [ip]
 80075be:	fa13 f38a 	uxtah	r3, r3, sl
 80075c2:	fb06 220e 	mla	r2, r6, lr, r2
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	9b00      	ldr	r3, [sp, #0]
 80075ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075ce:	b292      	uxth	r2, r2
 80075d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80075dc:	4581      	cmp	r9, r0
 80075de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075e2:	f84c 3b04 	str.w	r3, [ip], #4
 80075e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075ea:	d2db      	bcs.n	80075a4 <quorem+0x42>
 80075ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80075f0:	b92b      	cbnz	r3, 80075fe <quorem+0x9c>
 80075f2:	9b01      	ldr	r3, [sp, #4]
 80075f4:	3b04      	subs	r3, #4
 80075f6:	429d      	cmp	r5, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	d32c      	bcc.n	8007656 <quorem+0xf4>
 80075fc:	613c      	str	r4, [r7, #16]
 80075fe:	4638      	mov	r0, r7
 8007600:	f001 f922 	bl	8008848 <__mcmp>
 8007604:	2800      	cmp	r0, #0
 8007606:	db22      	blt.n	800764e <quorem+0xec>
 8007608:	3601      	adds	r6, #1
 800760a:	4629      	mov	r1, r5
 800760c:	2000      	movs	r0, #0
 800760e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007612:	f8d1 c000 	ldr.w	ip, [r1]
 8007616:	b293      	uxth	r3, r2
 8007618:	1ac3      	subs	r3, r0, r3
 800761a:	0c12      	lsrs	r2, r2, #16
 800761c:	fa13 f38c 	uxtah	r3, r3, ip
 8007620:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007628:	b29b      	uxth	r3, r3
 800762a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800762e:	45c1      	cmp	r9, r8
 8007630:	f841 3b04 	str.w	r3, [r1], #4
 8007634:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007638:	d2e9      	bcs.n	800760e <quorem+0xac>
 800763a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800763e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007642:	b922      	cbnz	r2, 800764e <quorem+0xec>
 8007644:	3b04      	subs	r3, #4
 8007646:	429d      	cmp	r5, r3
 8007648:	461a      	mov	r2, r3
 800764a:	d30a      	bcc.n	8007662 <quorem+0x100>
 800764c:	613c      	str	r4, [r7, #16]
 800764e:	4630      	mov	r0, r6
 8007650:	b003      	add	sp, #12
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	3b04      	subs	r3, #4
 800765a:	2a00      	cmp	r2, #0
 800765c:	d1ce      	bne.n	80075fc <quorem+0x9a>
 800765e:	3c01      	subs	r4, #1
 8007660:	e7c9      	b.n	80075f6 <quorem+0x94>
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	3b04      	subs	r3, #4
 8007666:	2a00      	cmp	r2, #0
 8007668:	d1f0      	bne.n	800764c <quorem+0xea>
 800766a:	3c01      	subs	r4, #1
 800766c:	e7eb      	b.n	8007646 <quorem+0xe4>
 800766e:	2000      	movs	r0, #0
 8007670:	e7ee      	b.n	8007650 <quorem+0xee>
 8007672:	0000      	movs	r0, r0
 8007674:	0000      	movs	r0, r0
	...

08007678 <_dtoa_r>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	ed2d 8b02 	vpush	{d8}
 8007680:	69c5      	ldr	r5, [r0, #28]
 8007682:	b091      	sub	sp, #68	; 0x44
 8007684:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007688:	ec59 8b10 	vmov	r8, r9, d0
 800768c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800768e:	9106      	str	r1, [sp, #24]
 8007690:	4606      	mov	r6, r0
 8007692:	9208      	str	r2, [sp, #32]
 8007694:	930c      	str	r3, [sp, #48]	; 0x30
 8007696:	b975      	cbnz	r5, 80076b6 <_dtoa_r+0x3e>
 8007698:	2010      	movs	r0, #16
 800769a:	f000 fda5 	bl	80081e8 <malloc>
 800769e:	4602      	mov	r2, r0
 80076a0:	61f0      	str	r0, [r6, #28]
 80076a2:	b920      	cbnz	r0, 80076ae <_dtoa_r+0x36>
 80076a4:	4ba6      	ldr	r3, [pc, #664]	; (8007940 <_dtoa_r+0x2c8>)
 80076a6:	21ef      	movs	r1, #239	; 0xef
 80076a8:	48a6      	ldr	r0, [pc, #664]	; (8007944 <_dtoa_r+0x2cc>)
 80076aa:	f001 fbfd 	bl	8008ea8 <__assert_func>
 80076ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076b2:	6005      	str	r5, [r0, #0]
 80076b4:	60c5      	str	r5, [r0, #12]
 80076b6:	69f3      	ldr	r3, [r6, #28]
 80076b8:	6819      	ldr	r1, [r3, #0]
 80076ba:	b151      	cbz	r1, 80076d2 <_dtoa_r+0x5a>
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	604a      	str	r2, [r1, #4]
 80076c0:	2301      	movs	r3, #1
 80076c2:	4093      	lsls	r3, r2
 80076c4:	608b      	str	r3, [r1, #8]
 80076c6:	4630      	mov	r0, r6
 80076c8:	f000 fe82 	bl	80083d0 <_Bfree>
 80076cc:	69f3      	ldr	r3, [r6, #28]
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	f1b9 0300 	subs.w	r3, r9, #0
 80076d6:	bfbb      	ittet	lt
 80076d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076dc:	9303      	strlt	r3, [sp, #12]
 80076de:	2300      	movge	r3, #0
 80076e0:	2201      	movlt	r2, #1
 80076e2:	bfac      	ite	ge
 80076e4:	6023      	strge	r3, [r4, #0]
 80076e6:	6022      	strlt	r2, [r4, #0]
 80076e8:	4b97      	ldr	r3, [pc, #604]	; (8007948 <_dtoa_r+0x2d0>)
 80076ea:	9c03      	ldr	r4, [sp, #12]
 80076ec:	43a3      	bics	r3, r4
 80076ee:	d11c      	bne.n	800772a <_dtoa_r+0xb2>
 80076f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80076fc:	ea53 0308 	orrs.w	r3, r3, r8
 8007700:	f000 84fb 	beq.w	80080fa <_dtoa_r+0xa82>
 8007704:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007706:	b963      	cbnz	r3, 8007722 <_dtoa_r+0xaa>
 8007708:	4b90      	ldr	r3, [pc, #576]	; (800794c <_dtoa_r+0x2d4>)
 800770a:	e020      	b.n	800774e <_dtoa_r+0xd6>
 800770c:	4b90      	ldr	r3, [pc, #576]	; (8007950 <_dtoa_r+0x2d8>)
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	3308      	adds	r3, #8
 8007712:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	9801      	ldr	r0, [sp, #4]
 8007718:	b011      	add	sp, #68	; 0x44
 800771a:	ecbd 8b02 	vpop	{d8}
 800771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007722:	4b8a      	ldr	r3, [pc, #552]	; (800794c <_dtoa_r+0x2d4>)
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	3303      	adds	r3, #3
 8007728:	e7f3      	b.n	8007712 <_dtoa_r+0x9a>
 800772a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800772e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007736:	d10c      	bne.n	8007752 <_dtoa_r+0xda>
 8007738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800773a:	2301      	movs	r3, #1
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 84d7 	beq.w	80080f4 <_dtoa_r+0xa7c>
 8007746:	4b83      	ldr	r3, [pc, #524]	; (8007954 <_dtoa_r+0x2dc>)
 8007748:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	3b01      	subs	r3, #1
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	e7e1      	b.n	8007716 <_dtoa_r+0x9e>
 8007752:	aa0e      	add	r2, sp, #56	; 0x38
 8007754:	a90f      	add	r1, sp, #60	; 0x3c
 8007756:	4630      	mov	r0, r6
 8007758:	eeb0 0b48 	vmov.f64	d0, d8
 800775c:	f001 f91a 	bl	8008994 <__d2b>
 8007760:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007766:	4605      	mov	r5, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d046      	beq.n	80077fa <_dtoa_r+0x182>
 800776c:	eeb0 7b48 	vmov.f64	d7, d8
 8007770:	ee18 1a90 	vmov	r1, s17
 8007774:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007778:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800777c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007784:	2000      	movs	r0, #0
 8007786:	ee07 1a90 	vmov	s15, r1
 800778a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800778e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007928 <_dtoa_r+0x2b0>
 8007792:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007796:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007930 <_dtoa_r+0x2b8>
 800779a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800779e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007938 <_dtoa_r+0x2c0>
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80077aa:	eeb0 7b46 	vmov.f64	d7, d6
 80077ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80077b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80077b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80077ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077be:	ee16 ba90 	vmov	fp, s13
 80077c2:	9009      	str	r0, [sp, #36]	; 0x24
 80077c4:	d508      	bpl.n	80077d8 <_dtoa_r+0x160>
 80077c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80077ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80077ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d2:	bf18      	it	ne
 80077d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80077d8:	f1bb 0f16 	cmp.w	fp, #22
 80077dc:	d82b      	bhi.n	8007836 <_dtoa_r+0x1be>
 80077de:	495e      	ldr	r1, [pc, #376]	; (8007958 <_dtoa_r+0x2e0>)
 80077e0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80077e4:	ed91 7b00 	vldr	d7, [r1]
 80077e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80077ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f0:	d501      	bpl.n	80077f6 <_dtoa_r+0x17e>
 80077f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077f6:	2100      	movs	r1, #0
 80077f8:	e01e      	b.n	8007838 <_dtoa_r+0x1c0>
 80077fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077fc:	4413      	add	r3, r2
 80077fe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007802:	2920      	cmp	r1, #32
 8007804:	bfc1      	itttt	gt
 8007806:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800780a:	408c      	lslgt	r4, r1
 800780c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007810:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007814:	bfd6      	itet	le
 8007816:	f1c1 0120 	rsble	r1, r1, #32
 800781a:	4321      	orrgt	r1, r4
 800781c:	fa08 f101 	lslle.w	r1, r8, r1
 8007820:	ee07 1a90 	vmov	s15, r1
 8007824:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007828:	3b01      	subs	r3, #1
 800782a:	ee17 1a90 	vmov	r1, s15
 800782e:	2001      	movs	r0, #1
 8007830:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007834:	e7a7      	b.n	8007786 <_dtoa_r+0x10e>
 8007836:	2101      	movs	r1, #1
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	1e53      	subs	r3, r2, #1
 800783c:	9305      	str	r3, [sp, #20]
 800783e:	bf45      	ittet	mi
 8007840:	f1c2 0301 	rsbmi	r3, r2, #1
 8007844:	9304      	strmi	r3, [sp, #16]
 8007846:	2300      	movpl	r3, #0
 8007848:	2300      	movmi	r3, #0
 800784a:	bf4c      	ite	mi
 800784c:	9305      	strmi	r3, [sp, #20]
 800784e:	9304      	strpl	r3, [sp, #16]
 8007850:	f1bb 0f00 	cmp.w	fp, #0
 8007854:	910b      	str	r1, [sp, #44]	; 0x2c
 8007856:	db18      	blt.n	800788a <_dtoa_r+0x212>
 8007858:	9b05      	ldr	r3, [sp, #20]
 800785a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800785e:	445b      	add	r3, fp
 8007860:	9305      	str	r3, [sp, #20]
 8007862:	2300      	movs	r3, #0
 8007864:	9a06      	ldr	r2, [sp, #24]
 8007866:	2a09      	cmp	r2, #9
 8007868:	d848      	bhi.n	80078fc <_dtoa_r+0x284>
 800786a:	2a05      	cmp	r2, #5
 800786c:	bfc4      	itt	gt
 800786e:	3a04      	subgt	r2, #4
 8007870:	9206      	strgt	r2, [sp, #24]
 8007872:	9a06      	ldr	r2, [sp, #24]
 8007874:	f1a2 0202 	sub.w	r2, r2, #2
 8007878:	bfcc      	ite	gt
 800787a:	2400      	movgt	r4, #0
 800787c:	2401      	movle	r4, #1
 800787e:	2a03      	cmp	r2, #3
 8007880:	d847      	bhi.n	8007912 <_dtoa_r+0x29a>
 8007882:	e8df f002 	tbb	[pc, r2]
 8007886:	2d0b      	.short	0x2d0b
 8007888:	392b      	.short	0x392b
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	2200      	movs	r2, #0
 800788e:	eba3 030b 	sub.w	r3, r3, fp
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	920a      	str	r2, [sp, #40]	; 0x28
 8007896:	f1cb 0300 	rsb	r3, fp, #0
 800789a:	e7e3      	b.n	8007864 <_dtoa_r+0x1ec>
 800789c:	2200      	movs	r2, #0
 800789e:	9207      	str	r2, [sp, #28]
 80078a0:	9a08      	ldr	r2, [sp, #32]
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	dc38      	bgt.n	8007918 <_dtoa_r+0x2a0>
 80078a6:	f04f 0a01 	mov.w	sl, #1
 80078aa:	46d1      	mov	r9, sl
 80078ac:	4652      	mov	r2, sl
 80078ae:	f8cd a020 	str.w	sl, [sp, #32]
 80078b2:	69f7      	ldr	r7, [r6, #28]
 80078b4:	2100      	movs	r1, #0
 80078b6:	2004      	movs	r0, #4
 80078b8:	f100 0c14 	add.w	ip, r0, #20
 80078bc:	4594      	cmp	ip, r2
 80078be:	d930      	bls.n	8007922 <_dtoa_r+0x2aa>
 80078c0:	6079      	str	r1, [r7, #4]
 80078c2:	4630      	mov	r0, r6
 80078c4:	930d      	str	r3, [sp, #52]	; 0x34
 80078c6:	f000 fd43 	bl	8008350 <_Balloc>
 80078ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078cc:	9001      	str	r0, [sp, #4]
 80078ce:	4602      	mov	r2, r0
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d145      	bne.n	8007960 <_dtoa_r+0x2e8>
 80078d4:	4b21      	ldr	r3, [pc, #132]	; (800795c <_dtoa_r+0x2e4>)
 80078d6:	f240 11af 	movw	r1, #431	; 0x1af
 80078da:	e6e5      	b.n	80076a8 <_dtoa_r+0x30>
 80078dc:	2201      	movs	r2, #1
 80078de:	e7de      	b.n	800789e <_dtoa_r+0x226>
 80078e0:	2200      	movs	r2, #0
 80078e2:	9207      	str	r2, [sp, #28]
 80078e4:	9a08      	ldr	r2, [sp, #32]
 80078e6:	eb0b 0a02 	add.w	sl, fp, r2
 80078ea:	f10a 0901 	add.w	r9, sl, #1
 80078ee:	464a      	mov	r2, r9
 80078f0:	2a01      	cmp	r2, #1
 80078f2:	bfb8      	it	lt
 80078f4:	2201      	movlt	r2, #1
 80078f6:	e7dc      	b.n	80078b2 <_dtoa_r+0x23a>
 80078f8:	2201      	movs	r2, #1
 80078fa:	e7f2      	b.n	80078e2 <_dtoa_r+0x26a>
 80078fc:	2401      	movs	r4, #1
 80078fe:	2200      	movs	r2, #0
 8007900:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007904:	f04f 3aff 	mov.w	sl, #4294967295
 8007908:	2100      	movs	r1, #0
 800790a:	46d1      	mov	r9, sl
 800790c:	2212      	movs	r2, #18
 800790e:	9108      	str	r1, [sp, #32]
 8007910:	e7cf      	b.n	80078b2 <_dtoa_r+0x23a>
 8007912:	2201      	movs	r2, #1
 8007914:	9207      	str	r2, [sp, #28]
 8007916:	e7f5      	b.n	8007904 <_dtoa_r+0x28c>
 8007918:	f8dd a020 	ldr.w	sl, [sp, #32]
 800791c:	46d1      	mov	r9, sl
 800791e:	4652      	mov	r2, sl
 8007920:	e7c7      	b.n	80078b2 <_dtoa_r+0x23a>
 8007922:	3101      	adds	r1, #1
 8007924:	0040      	lsls	r0, r0, #1
 8007926:	e7c7      	b.n	80078b8 <_dtoa_r+0x240>
 8007928:	636f4361 	.word	0x636f4361
 800792c:	3fd287a7 	.word	0x3fd287a7
 8007930:	8b60c8b3 	.word	0x8b60c8b3
 8007934:	3fc68a28 	.word	0x3fc68a28
 8007938:	509f79fb 	.word	0x509f79fb
 800793c:	3fd34413 	.word	0x3fd34413
 8007940:	0800981d 	.word	0x0800981d
 8007944:	08009834 	.word	0x08009834
 8007948:	7ff00000 	.word	0x7ff00000
 800794c:	08009819 	.word	0x08009819
 8007950:	08009810 	.word	0x08009810
 8007954:	080097ed 	.word	0x080097ed
 8007958:	08009920 	.word	0x08009920
 800795c:	0800988c 	.word	0x0800988c
 8007960:	69f2      	ldr	r2, [r6, #28]
 8007962:	9901      	ldr	r1, [sp, #4]
 8007964:	6011      	str	r1, [r2, #0]
 8007966:	f1b9 0f0e 	cmp.w	r9, #14
 800796a:	d86c      	bhi.n	8007a46 <_dtoa_r+0x3ce>
 800796c:	2c00      	cmp	r4, #0
 800796e:	d06a      	beq.n	8007a46 <_dtoa_r+0x3ce>
 8007970:	f1bb 0f00 	cmp.w	fp, #0
 8007974:	f340 80a0 	ble.w	8007ab8 <_dtoa_r+0x440>
 8007978:	4ac1      	ldr	r2, [pc, #772]	; (8007c80 <_dtoa_r+0x608>)
 800797a:	f00b 010f 	and.w	r1, fp, #15
 800797e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007982:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007986:	ed92 7b00 	vldr	d7, [r2]
 800798a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800798e:	f000 8087 	beq.w	8007aa0 <_dtoa_r+0x428>
 8007992:	49bc      	ldr	r1, [pc, #752]	; (8007c84 <_dtoa_r+0x60c>)
 8007994:	ed91 6b08 	vldr	d6, [r1, #32]
 8007998:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800799c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80079a0:	f002 020f 	and.w	r2, r2, #15
 80079a4:	2103      	movs	r1, #3
 80079a6:	48b7      	ldr	r0, [pc, #732]	; (8007c84 <_dtoa_r+0x60c>)
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d17b      	bne.n	8007aa4 <_dtoa_r+0x42c>
 80079ac:	ed9d 6b02 	vldr	d6, [sp, #8]
 80079b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80079b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079be:	2a00      	cmp	r2, #0
 80079c0:	f000 80a0 	beq.w	8007b04 <_dtoa_r+0x48c>
 80079c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80079c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80079cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d0:	f140 8098 	bpl.w	8007b04 <_dtoa_r+0x48c>
 80079d4:	f1b9 0f00 	cmp.w	r9, #0
 80079d8:	f000 8094 	beq.w	8007b04 <_dtoa_r+0x48c>
 80079dc:	f1ba 0f00 	cmp.w	sl, #0
 80079e0:	dd2f      	ble.n	8007a42 <_dtoa_r+0x3ca>
 80079e2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80079e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80079ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079ee:	f10b 32ff 	add.w	r2, fp, #4294967295
 80079f2:	3101      	adds	r1, #1
 80079f4:	4654      	mov	r4, sl
 80079f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80079fa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80079fe:	ee07 1a90 	vmov	s15, r1
 8007a02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007a06:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007a0a:	ee15 7a90 	vmov	r7, s11
 8007a0e:	ec51 0b15 	vmov	r0, r1, d5
 8007a12:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	d177      	bne.n	8007b0a <_dtoa_r+0x492>
 8007a1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007a1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007a22:	ec41 0b17 	vmov	d7, r0, r1
 8007a26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2e:	f300 826a 	bgt.w	8007f06 <_dtoa_r+0x88e>
 8007a32:	eeb1 7b47 	vneg.f64	d7, d7
 8007a36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3e:	f100 8260 	bmi.w	8007f02 <_dtoa_r+0x88a>
 8007a42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	f2c0 811d 	blt.w	8007c88 <_dtoa_r+0x610>
 8007a4e:	f1bb 0f0e 	cmp.w	fp, #14
 8007a52:	f300 8119 	bgt.w	8007c88 <_dtoa_r+0x610>
 8007a56:	4b8a      	ldr	r3, [pc, #552]	; (8007c80 <_dtoa_r+0x608>)
 8007a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a5c:	ed93 6b00 	vldr	d6, [r3]
 8007a60:	9b08      	ldr	r3, [sp, #32]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f280 80b7 	bge.w	8007bd6 <_dtoa_r+0x55e>
 8007a68:	f1b9 0f00 	cmp.w	r9, #0
 8007a6c:	f300 80b3 	bgt.w	8007bd6 <_dtoa_r+0x55e>
 8007a70:	f040 8246 	bne.w	8007f00 <_dtoa_r+0x888>
 8007a74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007a78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007a7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	464c      	mov	r4, r9
 8007a8a:	464f      	mov	r7, r9
 8007a8c:	f280 821c 	bge.w	8007ec8 <_dtoa_r+0x850>
 8007a90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a94:	2331      	movs	r3, #49	; 0x31
 8007a96:	f808 3b01 	strb.w	r3, [r8], #1
 8007a9a:	f10b 0b01 	add.w	fp, fp, #1
 8007a9e:	e218      	b.n	8007ed2 <_dtoa_r+0x85a>
 8007aa0:	2102      	movs	r1, #2
 8007aa2:	e780      	b.n	80079a6 <_dtoa_r+0x32e>
 8007aa4:	07d4      	lsls	r4, r2, #31
 8007aa6:	d504      	bpl.n	8007ab2 <_dtoa_r+0x43a>
 8007aa8:	ed90 6b00 	vldr	d6, [r0]
 8007aac:	3101      	adds	r1, #1
 8007aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ab2:	1052      	asrs	r2, r2, #1
 8007ab4:	3008      	adds	r0, #8
 8007ab6:	e777      	b.n	80079a8 <_dtoa_r+0x330>
 8007ab8:	d022      	beq.n	8007b00 <_dtoa_r+0x488>
 8007aba:	f1cb 0200 	rsb	r2, fp, #0
 8007abe:	4970      	ldr	r1, [pc, #448]	; (8007c80 <_dtoa_r+0x608>)
 8007ac0:	f002 000f 	and.w	r0, r2, #15
 8007ac4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007ac8:	ed91 7b00 	vldr	d7, [r1]
 8007acc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ad4:	486b      	ldr	r0, [pc, #428]	; (8007c84 <_dtoa_r+0x60c>)
 8007ad6:	1112      	asrs	r2, r2, #4
 8007ad8:	2400      	movs	r4, #0
 8007ada:	2102      	movs	r1, #2
 8007adc:	b92a      	cbnz	r2, 8007aea <_dtoa_r+0x472>
 8007ade:	2c00      	cmp	r4, #0
 8007ae0:	f43f af6a 	beq.w	80079b8 <_dtoa_r+0x340>
 8007ae4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ae8:	e766      	b.n	80079b8 <_dtoa_r+0x340>
 8007aea:	07d7      	lsls	r7, r2, #31
 8007aec:	d505      	bpl.n	8007afa <_dtoa_r+0x482>
 8007aee:	ed90 6b00 	vldr	d6, [r0]
 8007af2:	3101      	adds	r1, #1
 8007af4:	2401      	movs	r4, #1
 8007af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007afa:	1052      	asrs	r2, r2, #1
 8007afc:	3008      	adds	r0, #8
 8007afe:	e7ed      	b.n	8007adc <_dtoa_r+0x464>
 8007b00:	2102      	movs	r1, #2
 8007b02:	e759      	b.n	80079b8 <_dtoa_r+0x340>
 8007b04:	465a      	mov	r2, fp
 8007b06:	464c      	mov	r4, r9
 8007b08:	e775      	b.n	80079f6 <_dtoa_r+0x37e>
 8007b0a:	ec41 0b17 	vmov	d7, r0, r1
 8007b0e:	495c      	ldr	r1, [pc, #368]	; (8007c80 <_dtoa_r+0x608>)
 8007b10:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007b14:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007b18:	9901      	ldr	r1, [sp, #4]
 8007b1a:	440c      	add	r4, r1
 8007b1c:	9907      	ldr	r1, [sp, #28]
 8007b1e:	b351      	cbz	r1, 8007b76 <_dtoa_r+0x4fe>
 8007b20:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007b24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007b28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b2c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007b30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007b34:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007b38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007b3c:	ee14 1a90 	vmov	r1, s9
 8007b40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007b44:	3130      	adds	r1, #48	; 0x30
 8007b46:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007b4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	f808 1b01 	strb.w	r1, [r8], #1
 8007b56:	d439      	bmi.n	8007bcc <_dtoa_r+0x554>
 8007b58:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007b5c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b64:	d472      	bmi.n	8007c4c <_dtoa_r+0x5d4>
 8007b66:	45a0      	cmp	r8, r4
 8007b68:	f43f af6b 	beq.w	8007a42 <_dtoa_r+0x3ca>
 8007b6c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007b70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007b74:	e7e0      	b.n	8007b38 <_dtoa_r+0x4c0>
 8007b76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007b7e:	4620      	mov	r0, r4
 8007b80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007b84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007b88:	ee14 1a90 	vmov	r1, s9
 8007b8c:	3130      	adds	r1, #48	; 0x30
 8007b8e:	f808 1b01 	strb.w	r1, [r8], #1
 8007b92:	45a0      	cmp	r8, r4
 8007b94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007b98:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007b9c:	d118      	bne.n	8007bd0 <_dtoa_r+0x558>
 8007b9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007ba2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007ba6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bae:	dc4d      	bgt.n	8007c4c <_dtoa_r+0x5d4>
 8007bb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007bb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbc:	f57f af41 	bpl.w	8007a42 <_dtoa_r+0x3ca>
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	3801      	subs	r0, #1
 8007bc4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007bc8:	2b30      	cmp	r3, #48	; 0x30
 8007bca:	d0f9      	beq.n	8007bc0 <_dtoa_r+0x548>
 8007bcc:	4693      	mov	fp, r2
 8007bce:	e02a      	b.n	8007c26 <_dtoa_r+0x5ae>
 8007bd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007bd4:	e7d6      	b.n	8007b84 <_dtoa_r+0x50c>
 8007bd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bda:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007bde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007be2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007be6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007bea:	ee15 3a10 	vmov	r3, s10
 8007bee:	3330      	adds	r3, #48	; 0x30
 8007bf0:	f808 3b01 	strb.w	r3, [r8], #1
 8007bf4:	9b01      	ldr	r3, [sp, #4]
 8007bf6:	eba8 0303 	sub.w	r3, r8, r3
 8007bfa:	4599      	cmp	r9, r3
 8007bfc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007c00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007c04:	d133      	bne.n	8007c6e <_dtoa_r+0x5f6>
 8007c06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007c0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c12:	dc1a      	bgt.n	8007c4a <_dtoa_r+0x5d2>
 8007c14:	eeb4 7b46 	vcmp.f64	d7, d6
 8007c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c1c:	d103      	bne.n	8007c26 <_dtoa_r+0x5ae>
 8007c1e:	ee15 3a10 	vmov	r3, s10
 8007c22:	07d9      	lsls	r1, r3, #31
 8007c24:	d411      	bmi.n	8007c4a <_dtoa_r+0x5d2>
 8007c26:	4629      	mov	r1, r5
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f000 fbd1 	bl	80083d0 <_Bfree>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c32:	f888 3000 	strb.w	r3, [r8]
 8007c36:	f10b 0301 	add.w	r3, fp, #1
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f43f ad69 	beq.w	8007716 <_dtoa_r+0x9e>
 8007c44:	f8c3 8000 	str.w	r8, [r3]
 8007c48:	e565      	b.n	8007716 <_dtoa_r+0x9e>
 8007c4a:	465a      	mov	r2, fp
 8007c4c:	4643      	mov	r3, r8
 8007c4e:	4698      	mov	r8, r3
 8007c50:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007c54:	2939      	cmp	r1, #57	; 0x39
 8007c56:	d106      	bne.n	8007c66 <_dtoa_r+0x5ee>
 8007c58:	9901      	ldr	r1, [sp, #4]
 8007c5a:	4299      	cmp	r1, r3
 8007c5c:	d1f7      	bne.n	8007c4e <_dtoa_r+0x5d6>
 8007c5e:	9801      	ldr	r0, [sp, #4]
 8007c60:	2130      	movs	r1, #48	; 0x30
 8007c62:	3201      	adds	r2, #1
 8007c64:	7001      	strb	r1, [r0, #0]
 8007c66:	7819      	ldrb	r1, [r3, #0]
 8007c68:	3101      	adds	r1, #1
 8007c6a:	7019      	strb	r1, [r3, #0]
 8007c6c:	e7ae      	b.n	8007bcc <_dtoa_r+0x554>
 8007c6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7a:	d1b2      	bne.n	8007be2 <_dtoa_r+0x56a>
 8007c7c:	e7d3      	b.n	8007c26 <_dtoa_r+0x5ae>
 8007c7e:	bf00      	nop
 8007c80:	08009920 	.word	0x08009920
 8007c84:	080098f8 	.word	0x080098f8
 8007c88:	9907      	ldr	r1, [sp, #28]
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	f000 80d0 	beq.w	8007e30 <_dtoa_r+0x7b8>
 8007c90:	9906      	ldr	r1, [sp, #24]
 8007c92:	2901      	cmp	r1, #1
 8007c94:	f300 80b4 	bgt.w	8007e00 <_dtoa_r+0x788>
 8007c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	f000 80ac 	beq.w	8007df8 <_dtoa_r+0x780>
 8007ca0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ca4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ca8:	461c      	mov	r4, r3
 8007caa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cac:	9b04      	ldr	r3, [sp, #16]
 8007cae:	4413      	add	r3, r2
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	4413      	add	r3, r2
 8007cb8:	4630      	mov	r0, r6
 8007cba:	9305      	str	r3, [sp, #20]
 8007cbc:	f000 fc3e 	bl	800853c <__i2b>
 8007cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	f1b8 0f00 	cmp.w	r8, #0
 8007cc8:	d00d      	beq.n	8007ce6 <_dtoa_r+0x66e>
 8007cca:	9a05      	ldr	r2, [sp, #20]
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	dd0a      	ble.n	8007ce6 <_dtoa_r+0x66e>
 8007cd0:	4542      	cmp	r2, r8
 8007cd2:	9904      	ldr	r1, [sp, #16]
 8007cd4:	bfa8      	it	ge
 8007cd6:	4642      	movge	r2, r8
 8007cd8:	1a89      	subs	r1, r1, r2
 8007cda:	9104      	str	r1, [sp, #16]
 8007cdc:	9905      	ldr	r1, [sp, #20]
 8007cde:	eba8 0802 	sub.w	r8, r8, r2
 8007ce2:	1a8a      	subs	r2, r1, r2
 8007ce4:	9205      	str	r2, [sp, #20]
 8007ce6:	b303      	cbz	r3, 8007d2a <_dtoa_r+0x6b2>
 8007ce8:	9a07      	ldr	r2, [sp, #28]
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	f000 80a5 	beq.w	8007e3a <_dtoa_r+0x7c2>
 8007cf0:	2c00      	cmp	r4, #0
 8007cf2:	dd13      	ble.n	8007d1c <_dtoa_r+0x6a4>
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8007cfc:	f000 fcde 	bl	80086bc <__pow5mult>
 8007d00:	462a      	mov	r2, r5
 8007d02:	4601      	mov	r1, r0
 8007d04:	4607      	mov	r7, r0
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 fc2e 	bl	8008568 <__multiply>
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	9009      	str	r0, [sp, #36]	; 0x24
 8007d10:	4630      	mov	r0, r6
 8007d12:	f000 fb5d 	bl	80083d0 <_Bfree>
 8007d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1a:	4615      	mov	r5, r2
 8007d1c:	1b1a      	subs	r2, r3, r4
 8007d1e:	d004      	beq.n	8007d2a <_dtoa_r+0x6b2>
 8007d20:	4629      	mov	r1, r5
 8007d22:	4630      	mov	r0, r6
 8007d24:	f000 fcca 	bl	80086bc <__pow5mult>
 8007d28:	4605      	mov	r5, r0
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 fc05 	bl	800853c <__i2b>
 8007d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	f340 8081 	ble.w	8007e3e <_dtoa_r+0x7c6>
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4601      	mov	r1, r0
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 fcbb 	bl	80086bc <__pow5mult>
 8007d46:	9b06      	ldr	r3, [sp, #24]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	dd7a      	ble.n	8007e44 <_dtoa_r+0x7cc>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9309      	str	r3, [sp, #36]	; 0x24
 8007d52:	6922      	ldr	r2, [r4, #16]
 8007d54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007d58:	6910      	ldr	r0, [r2, #16]
 8007d5a:	f000 fba1 	bl	80084a0 <__hi0bits>
 8007d5e:	f1c0 0020 	rsb	r0, r0, #32
 8007d62:	9b05      	ldr	r3, [sp, #20]
 8007d64:	4418      	add	r0, r3
 8007d66:	f010 001f 	ands.w	r0, r0, #31
 8007d6a:	f000 8093 	beq.w	8007e94 <_dtoa_r+0x81c>
 8007d6e:	f1c0 0220 	rsb	r2, r0, #32
 8007d72:	2a04      	cmp	r2, #4
 8007d74:	f340 8085 	ble.w	8007e82 <_dtoa_r+0x80a>
 8007d78:	9b04      	ldr	r3, [sp, #16]
 8007d7a:	f1c0 001c 	rsb	r0, r0, #28
 8007d7e:	4403      	add	r3, r0
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	4480      	add	r8, r0
 8007d86:	4403      	add	r3, r0
 8007d88:	9305      	str	r3, [sp, #20]
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dd05      	ble.n	8007d9c <_dtoa_r+0x724>
 8007d90:	4629      	mov	r1, r5
 8007d92:	461a      	mov	r2, r3
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 fceb 	bl	8008770 <__lshift>
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	9b05      	ldr	r3, [sp, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd05      	ble.n	8007dae <_dtoa_r+0x736>
 8007da2:	4621      	mov	r1, r4
 8007da4:	461a      	mov	r2, r3
 8007da6:	4630      	mov	r0, r6
 8007da8:	f000 fce2 	bl	8008770 <__lshift>
 8007dac:	4604      	mov	r4, r0
 8007dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d071      	beq.n	8007e98 <_dtoa_r+0x820>
 8007db4:	4621      	mov	r1, r4
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 fd46 	bl	8008848 <__mcmp>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	da6b      	bge.n	8007e98 <_dtoa_r+0x820>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f000 fb24 	bl	8008414 <__multadd>
 8007dcc:	9b07      	ldr	r3, [sp, #28]
 8007dce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8197 	beq.w	8008108 <_dtoa_r+0xa90>
 8007dda:	4639      	mov	r1, r7
 8007ddc:	2300      	movs	r3, #0
 8007dde:	220a      	movs	r2, #10
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 fb17 	bl	8008414 <__multadd>
 8007de6:	f1ba 0f00 	cmp.w	sl, #0
 8007dea:	4607      	mov	r7, r0
 8007dec:	f300 8093 	bgt.w	8007f16 <_dtoa_r+0x89e>
 8007df0:	9b06      	ldr	r3, [sp, #24]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	dc57      	bgt.n	8007ea6 <_dtoa_r+0x82e>
 8007df6:	e08e      	b.n	8007f16 <_dtoa_r+0x89e>
 8007df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007dfe:	e751      	b.n	8007ca4 <_dtoa_r+0x62c>
 8007e00:	f109 34ff 	add.w	r4, r9, #4294967295
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	bfbf      	itttt	lt
 8007e08:	1ae2      	sublt	r2, r4, r3
 8007e0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e0c:	189b      	addlt	r3, r3, r2
 8007e0e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e10:	bfae      	itee	ge
 8007e12:	1b1c      	subge	r4, r3, r4
 8007e14:	4623      	movlt	r3, r4
 8007e16:	2400      	movlt	r4, #0
 8007e18:	f1b9 0f00 	cmp.w	r9, #0
 8007e1c:	bfb5      	itete	lt
 8007e1e:	9a04      	ldrlt	r2, [sp, #16]
 8007e20:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007e24:	eba2 0809 	sublt.w	r8, r2, r9
 8007e28:	464a      	movge	r2, r9
 8007e2a:	bfb8      	it	lt
 8007e2c:	2200      	movlt	r2, #0
 8007e2e:	e73c      	b.n	8007caa <_dtoa_r+0x632>
 8007e30:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e34:	9f07      	ldr	r7, [sp, #28]
 8007e36:	461c      	mov	r4, r3
 8007e38:	e744      	b.n	8007cc4 <_dtoa_r+0x64c>
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	e770      	b.n	8007d20 <_dtoa_r+0x6a8>
 8007e3e:	9b06      	ldr	r3, [sp, #24]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	dc18      	bgt.n	8007e76 <_dtoa_r+0x7fe>
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	b9b3      	cbnz	r3, 8007e76 <_dtoa_r+0x7fe>
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007e4e:	b9a2      	cbnz	r2, 8007e7a <_dtoa_r+0x802>
 8007e50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e54:	0d12      	lsrs	r2, r2, #20
 8007e56:	0512      	lsls	r2, r2, #20
 8007e58:	b18a      	cbz	r2, 8007e7e <_dtoa_r+0x806>
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	9b05      	ldr	r3, [sp, #20]
 8007e62:	3301      	adds	r3, #1
 8007e64:	9305      	str	r3, [sp, #20]
 8007e66:	2301      	movs	r3, #1
 8007e68:	9309      	str	r3, [sp, #36]	; 0x24
 8007e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f47f af70 	bne.w	8007d52 <_dtoa_r+0x6da>
 8007e72:	2001      	movs	r0, #1
 8007e74:	e775      	b.n	8007d62 <_dtoa_r+0x6ea>
 8007e76:	2300      	movs	r3, #0
 8007e78:	e7f6      	b.n	8007e68 <_dtoa_r+0x7f0>
 8007e7a:	9b02      	ldr	r3, [sp, #8]
 8007e7c:	e7f4      	b.n	8007e68 <_dtoa_r+0x7f0>
 8007e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e80:	e7f3      	b.n	8007e6a <_dtoa_r+0x7f2>
 8007e82:	d082      	beq.n	8007d8a <_dtoa_r+0x712>
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	321c      	adds	r2, #28
 8007e88:	4413      	add	r3, r2
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	9b05      	ldr	r3, [sp, #20]
 8007e8e:	4490      	add	r8, r2
 8007e90:	4413      	add	r3, r2
 8007e92:	e779      	b.n	8007d88 <_dtoa_r+0x710>
 8007e94:	4602      	mov	r2, r0
 8007e96:	e7f5      	b.n	8007e84 <_dtoa_r+0x80c>
 8007e98:	f1b9 0f00 	cmp.w	r9, #0
 8007e9c:	dc36      	bgt.n	8007f0c <_dtoa_r+0x894>
 8007e9e:	9b06      	ldr	r3, [sp, #24]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	dd33      	ble.n	8007f0c <_dtoa_r+0x894>
 8007ea4:	46ca      	mov	sl, r9
 8007ea6:	f1ba 0f00 	cmp.w	sl, #0
 8007eaa:	d10d      	bne.n	8007ec8 <_dtoa_r+0x850>
 8007eac:	4621      	mov	r1, r4
 8007eae:	4653      	mov	r3, sl
 8007eb0:	2205      	movs	r2, #5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f000 faae 	bl	8008414 <__multadd>
 8007eb8:	4601      	mov	r1, r0
 8007eba:	4604      	mov	r4, r0
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 fcc3 	bl	8008848 <__mcmp>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f73f ade4 	bgt.w	8007a90 <_dtoa_r+0x418>
 8007ec8:	9b08      	ldr	r3, [sp, #32]
 8007eca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ece:	ea6f 0b03 	mvn.w	fp, r3
 8007ed2:	f04f 0900 	mov.w	r9, #0
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 fa79 	bl	80083d0 <_Bfree>
 8007ede:	2f00      	cmp	r7, #0
 8007ee0:	f43f aea1 	beq.w	8007c26 <_dtoa_r+0x5ae>
 8007ee4:	f1b9 0f00 	cmp.w	r9, #0
 8007ee8:	d005      	beq.n	8007ef6 <_dtoa_r+0x87e>
 8007eea:	45b9      	cmp	r9, r7
 8007eec:	d003      	beq.n	8007ef6 <_dtoa_r+0x87e>
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f000 fa6d 	bl	80083d0 <_Bfree>
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 fa69 	bl	80083d0 <_Bfree>
 8007efe:	e692      	b.n	8007c26 <_dtoa_r+0x5ae>
 8007f00:	2400      	movs	r4, #0
 8007f02:	4627      	mov	r7, r4
 8007f04:	e7e0      	b.n	8007ec8 <_dtoa_r+0x850>
 8007f06:	4693      	mov	fp, r2
 8007f08:	4627      	mov	r7, r4
 8007f0a:	e5c1      	b.n	8007a90 <_dtoa_r+0x418>
 8007f0c:	9b07      	ldr	r3, [sp, #28]
 8007f0e:	46ca      	mov	sl, r9
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8100 	beq.w	8008116 <_dtoa_r+0xa9e>
 8007f16:	f1b8 0f00 	cmp.w	r8, #0
 8007f1a:	dd05      	ble.n	8007f28 <_dtoa_r+0x8b0>
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	4642      	mov	r2, r8
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 fc25 	bl	8008770 <__lshift>
 8007f26:	4607      	mov	r7, r0
 8007f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d05d      	beq.n	8007fea <_dtoa_r+0x972>
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	4630      	mov	r0, r6
 8007f32:	f000 fa0d 	bl	8008350 <_Balloc>
 8007f36:	4680      	mov	r8, r0
 8007f38:	b928      	cbnz	r0, 8007f46 <_dtoa_r+0x8ce>
 8007f3a:	4b82      	ldr	r3, [pc, #520]	; (8008144 <_dtoa_r+0xacc>)
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007f42:	f7ff bbb1 	b.w	80076a8 <_dtoa_r+0x30>
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	3202      	adds	r2, #2
 8007f4a:	0092      	lsls	r2, r2, #2
 8007f4c:	f107 010c 	add.w	r1, r7, #12
 8007f50:	300c      	adds	r0, #12
 8007f52:	f7ff faf8 	bl	8007546 <memcpy>
 8007f56:	2201      	movs	r2, #1
 8007f58:	4641      	mov	r1, r8
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f000 fc08 	bl	8008770 <__lshift>
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	3301      	adds	r3, #1
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	4453      	add	r3, sl
 8007f6a:	9308      	str	r3, [sp, #32]
 8007f6c:	9b02      	ldr	r3, [sp, #8]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	46b9      	mov	r9, r7
 8007f74:	9307      	str	r3, [sp, #28]
 8007f76:	4607      	mov	r7, r0
 8007f78:	9b04      	ldr	r3, [sp, #16]
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	4628      	mov	r0, r5
 8007f80:	9302      	str	r3, [sp, #8]
 8007f82:	f7ff faee 	bl	8007562 <quorem>
 8007f86:	4603      	mov	r3, r0
 8007f88:	3330      	adds	r3, #48	; 0x30
 8007f8a:	9005      	str	r0, [sp, #20]
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	4628      	mov	r0, r5
 8007f90:	9309      	str	r3, [sp, #36]	; 0x24
 8007f92:	f000 fc59 	bl	8008848 <__mcmp>
 8007f96:	463a      	mov	r2, r7
 8007f98:	4682      	mov	sl, r0
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f000 fc6f 	bl	8008880 <__mdiff>
 8007fa2:	68c2      	ldr	r2, [r0, #12]
 8007fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	bb0a      	cbnz	r2, 8007fee <_dtoa_r+0x976>
 8007faa:	4601      	mov	r1, r0
 8007fac:	4628      	mov	r0, r5
 8007fae:	f000 fc4b 	bl	8008848 <__mcmp>
 8007fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	4630      	mov	r0, r6
 8007fba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007fbe:	f000 fa07 	bl	80083d0 <_Bfree>
 8007fc2:	9b06      	ldr	r3, [sp, #24]
 8007fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fc6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007fca:	ea43 0102 	orr.w	r1, r3, r2
 8007fce:	9b07      	ldr	r3, [sp, #28]
 8007fd0:	4319      	orrs	r1, r3
 8007fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd4:	d10d      	bne.n	8007ff2 <_dtoa_r+0x97a>
 8007fd6:	2b39      	cmp	r3, #57	; 0x39
 8007fd8:	d029      	beq.n	800802e <_dtoa_r+0x9b6>
 8007fda:	f1ba 0f00 	cmp.w	sl, #0
 8007fde:	dd01      	ble.n	8007fe4 <_dtoa_r+0x96c>
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	3331      	adds	r3, #49	; 0x31
 8007fe4:	9a02      	ldr	r2, [sp, #8]
 8007fe6:	7013      	strb	r3, [r2, #0]
 8007fe8:	e775      	b.n	8007ed6 <_dtoa_r+0x85e>
 8007fea:	4638      	mov	r0, r7
 8007fec:	e7b8      	b.n	8007f60 <_dtoa_r+0x8e8>
 8007fee:	2201      	movs	r2, #1
 8007ff0:	e7e1      	b.n	8007fb6 <_dtoa_r+0x93e>
 8007ff2:	f1ba 0f00 	cmp.w	sl, #0
 8007ff6:	db06      	blt.n	8008006 <_dtoa_r+0x98e>
 8007ff8:	9906      	ldr	r1, [sp, #24]
 8007ffa:	ea41 0a0a 	orr.w	sl, r1, sl
 8007ffe:	9907      	ldr	r1, [sp, #28]
 8008000:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008004:	d120      	bne.n	8008048 <_dtoa_r+0x9d0>
 8008006:	2a00      	cmp	r2, #0
 8008008:	ddec      	ble.n	8007fe4 <_dtoa_r+0x96c>
 800800a:	4629      	mov	r1, r5
 800800c:	2201      	movs	r2, #1
 800800e:	4630      	mov	r0, r6
 8008010:	9304      	str	r3, [sp, #16]
 8008012:	f000 fbad 	bl	8008770 <__lshift>
 8008016:	4621      	mov	r1, r4
 8008018:	4605      	mov	r5, r0
 800801a:	f000 fc15 	bl	8008848 <__mcmp>
 800801e:	2800      	cmp	r0, #0
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	dc02      	bgt.n	800802a <_dtoa_r+0x9b2>
 8008024:	d1de      	bne.n	8007fe4 <_dtoa_r+0x96c>
 8008026:	07da      	lsls	r2, r3, #31
 8008028:	d5dc      	bpl.n	8007fe4 <_dtoa_r+0x96c>
 800802a:	2b39      	cmp	r3, #57	; 0x39
 800802c:	d1d8      	bne.n	8007fe0 <_dtoa_r+0x968>
 800802e:	9a02      	ldr	r2, [sp, #8]
 8008030:	2339      	movs	r3, #57	; 0x39
 8008032:	7013      	strb	r3, [r2, #0]
 8008034:	4643      	mov	r3, r8
 8008036:	4698      	mov	r8, r3
 8008038:	3b01      	subs	r3, #1
 800803a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800803e:	2a39      	cmp	r2, #57	; 0x39
 8008040:	d051      	beq.n	80080e6 <_dtoa_r+0xa6e>
 8008042:	3201      	adds	r2, #1
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e746      	b.n	8007ed6 <_dtoa_r+0x85e>
 8008048:	2a00      	cmp	r2, #0
 800804a:	dd03      	ble.n	8008054 <_dtoa_r+0x9dc>
 800804c:	2b39      	cmp	r3, #57	; 0x39
 800804e:	d0ee      	beq.n	800802e <_dtoa_r+0x9b6>
 8008050:	3301      	adds	r3, #1
 8008052:	e7c7      	b.n	8007fe4 <_dtoa_r+0x96c>
 8008054:	9a04      	ldr	r2, [sp, #16]
 8008056:	9908      	ldr	r1, [sp, #32]
 8008058:	f802 3c01 	strb.w	r3, [r2, #-1]
 800805c:	428a      	cmp	r2, r1
 800805e:	d02b      	beq.n	80080b8 <_dtoa_r+0xa40>
 8008060:	4629      	mov	r1, r5
 8008062:	2300      	movs	r3, #0
 8008064:	220a      	movs	r2, #10
 8008066:	4630      	mov	r0, r6
 8008068:	f000 f9d4 	bl	8008414 <__multadd>
 800806c:	45b9      	cmp	r9, r7
 800806e:	4605      	mov	r5, r0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	f04f 020a 	mov.w	r2, #10
 8008078:	4649      	mov	r1, r9
 800807a:	4630      	mov	r0, r6
 800807c:	d107      	bne.n	800808e <_dtoa_r+0xa16>
 800807e:	f000 f9c9 	bl	8008414 <__multadd>
 8008082:	4681      	mov	r9, r0
 8008084:	4607      	mov	r7, r0
 8008086:	9b04      	ldr	r3, [sp, #16]
 8008088:	3301      	adds	r3, #1
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	e774      	b.n	8007f78 <_dtoa_r+0x900>
 800808e:	f000 f9c1 	bl	8008414 <__multadd>
 8008092:	4639      	mov	r1, r7
 8008094:	4681      	mov	r9, r0
 8008096:	2300      	movs	r3, #0
 8008098:	220a      	movs	r2, #10
 800809a:	4630      	mov	r0, r6
 800809c:	f000 f9ba 	bl	8008414 <__multadd>
 80080a0:	4607      	mov	r7, r0
 80080a2:	e7f0      	b.n	8008086 <_dtoa_r+0xa0e>
 80080a4:	f1ba 0f00 	cmp.w	sl, #0
 80080a8:	9a01      	ldr	r2, [sp, #4]
 80080aa:	bfcc      	ite	gt
 80080ac:	46d0      	movgt	r8, sl
 80080ae:	f04f 0801 	movle.w	r8, #1
 80080b2:	4490      	add	r8, r2
 80080b4:	f04f 0900 	mov.w	r9, #0
 80080b8:	4629      	mov	r1, r5
 80080ba:	2201      	movs	r2, #1
 80080bc:	4630      	mov	r0, r6
 80080be:	9302      	str	r3, [sp, #8]
 80080c0:	f000 fb56 	bl	8008770 <__lshift>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4605      	mov	r5, r0
 80080c8:	f000 fbbe 	bl	8008848 <__mcmp>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	dcb1      	bgt.n	8008034 <_dtoa_r+0x9bc>
 80080d0:	d102      	bne.n	80080d8 <_dtoa_r+0xa60>
 80080d2:	9b02      	ldr	r3, [sp, #8]
 80080d4:	07db      	lsls	r3, r3, #31
 80080d6:	d4ad      	bmi.n	8008034 <_dtoa_r+0x9bc>
 80080d8:	4643      	mov	r3, r8
 80080da:	4698      	mov	r8, r3
 80080dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080e0:	2a30      	cmp	r2, #48	; 0x30
 80080e2:	d0fa      	beq.n	80080da <_dtoa_r+0xa62>
 80080e4:	e6f7      	b.n	8007ed6 <_dtoa_r+0x85e>
 80080e6:	9a01      	ldr	r2, [sp, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d1a4      	bne.n	8008036 <_dtoa_r+0x9be>
 80080ec:	f10b 0b01 	add.w	fp, fp, #1
 80080f0:	2331      	movs	r3, #49	; 0x31
 80080f2:	e778      	b.n	8007fe6 <_dtoa_r+0x96e>
 80080f4:	4b14      	ldr	r3, [pc, #80]	; (8008148 <_dtoa_r+0xad0>)
 80080f6:	f7ff bb2a 	b.w	800774e <_dtoa_r+0xd6>
 80080fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f47f ab05 	bne.w	800770c <_dtoa_r+0x94>
 8008102:	4b12      	ldr	r3, [pc, #72]	; (800814c <_dtoa_r+0xad4>)
 8008104:	f7ff bb23 	b.w	800774e <_dtoa_r+0xd6>
 8008108:	f1ba 0f00 	cmp.w	sl, #0
 800810c:	dc03      	bgt.n	8008116 <_dtoa_r+0xa9e>
 800810e:	9b06      	ldr	r3, [sp, #24]
 8008110:	2b02      	cmp	r3, #2
 8008112:	f73f aec8 	bgt.w	8007ea6 <_dtoa_r+0x82e>
 8008116:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800811a:	4621      	mov	r1, r4
 800811c:	4628      	mov	r0, r5
 800811e:	f7ff fa20 	bl	8007562 <quorem>
 8008122:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008126:	f808 3b01 	strb.w	r3, [r8], #1
 800812a:	9a01      	ldr	r2, [sp, #4]
 800812c:	eba8 0202 	sub.w	r2, r8, r2
 8008130:	4592      	cmp	sl, r2
 8008132:	ddb7      	ble.n	80080a4 <_dtoa_r+0xa2c>
 8008134:	4629      	mov	r1, r5
 8008136:	2300      	movs	r3, #0
 8008138:	220a      	movs	r2, #10
 800813a:	4630      	mov	r0, r6
 800813c:	f000 f96a 	bl	8008414 <__multadd>
 8008140:	4605      	mov	r5, r0
 8008142:	e7ea      	b.n	800811a <_dtoa_r+0xaa2>
 8008144:	0800988c 	.word	0x0800988c
 8008148:	080097ec 	.word	0x080097ec
 800814c:	08009810 	.word	0x08009810

08008150 <_free_r>:
 8008150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008152:	2900      	cmp	r1, #0
 8008154:	d044      	beq.n	80081e0 <_free_r+0x90>
 8008156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800815a:	9001      	str	r0, [sp, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f1a1 0404 	sub.w	r4, r1, #4
 8008162:	bfb8      	it	lt
 8008164:	18e4      	addlt	r4, r4, r3
 8008166:	f000 f8e7 	bl	8008338 <__malloc_lock>
 800816a:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <_free_r+0x94>)
 800816c:	9801      	ldr	r0, [sp, #4]
 800816e:	6813      	ldr	r3, [r2, #0]
 8008170:	b933      	cbnz	r3, 8008180 <_free_r+0x30>
 8008172:	6063      	str	r3, [r4, #4]
 8008174:	6014      	str	r4, [r2, #0]
 8008176:	b003      	add	sp, #12
 8008178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800817c:	f000 b8e2 	b.w	8008344 <__malloc_unlock>
 8008180:	42a3      	cmp	r3, r4
 8008182:	d908      	bls.n	8008196 <_free_r+0x46>
 8008184:	6825      	ldr	r5, [r4, #0]
 8008186:	1961      	adds	r1, r4, r5
 8008188:	428b      	cmp	r3, r1
 800818a:	bf01      	itttt	eq
 800818c:	6819      	ldreq	r1, [r3, #0]
 800818e:	685b      	ldreq	r3, [r3, #4]
 8008190:	1949      	addeq	r1, r1, r5
 8008192:	6021      	streq	r1, [r4, #0]
 8008194:	e7ed      	b.n	8008172 <_free_r+0x22>
 8008196:	461a      	mov	r2, r3
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	b10b      	cbz	r3, 80081a0 <_free_r+0x50>
 800819c:	42a3      	cmp	r3, r4
 800819e:	d9fa      	bls.n	8008196 <_free_r+0x46>
 80081a0:	6811      	ldr	r1, [r2, #0]
 80081a2:	1855      	adds	r5, r2, r1
 80081a4:	42a5      	cmp	r5, r4
 80081a6:	d10b      	bne.n	80081c0 <_free_r+0x70>
 80081a8:	6824      	ldr	r4, [r4, #0]
 80081aa:	4421      	add	r1, r4
 80081ac:	1854      	adds	r4, r2, r1
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	6011      	str	r1, [r2, #0]
 80081b2:	d1e0      	bne.n	8008176 <_free_r+0x26>
 80081b4:	681c      	ldr	r4, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	6053      	str	r3, [r2, #4]
 80081ba:	440c      	add	r4, r1
 80081bc:	6014      	str	r4, [r2, #0]
 80081be:	e7da      	b.n	8008176 <_free_r+0x26>
 80081c0:	d902      	bls.n	80081c8 <_free_r+0x78>
 80081c2:	230c      	movs	r3, #12
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	e7d6      	b.n	8008176 <_free_r+0x26>
 80081c8:	6825      	ldr	r5, [r4, #0]
 80081ca:	1961      	adds	r1, r4, r5
 80081cc:	428b      	cmp	r3, r1
 80081ce:	bf04      	itt	eq
 80081d0:	6819      	ldreq	r1, [r3, #0]
 80081d2:	685b      	ldreq	r3, [r3, #4]
 80081d4:	6063      	str	r3, [r4, #4]
 80081d6:	bf04      	itt	eq
 80081d8:	1949      	addeq	r1, r1, r5
 80081da:	6021      	streq	r1, [r4, #0]
 80081dc:	6054      	str	r4, [r2, #4]
 80081de:	e7ca      	b.n	8008176 <_free_r+0x26>
 80081e0:	b003      	add	sp, #12
 80081e2:	bd30      	pop	{r4, r5, pc}
 80081e4:	20004b40 	.word	0x20004b40

080081e8 <malloc>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <malloc+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f000 b823 	b.w	8008238 <_malloc_r>
 80081f2:	bf00      	nop
 80081f4:	2000007c 	.word	0x2000007c

080081f8 <sbrk_aligned>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	4e0e      	ldr	r6, [pc, #56]	; (8008234 <sbrk_aligned+0x3c>)
 80081fc:	460c      	mov	r4, r1
 80081fe:	6831      	ldr	r1, [r6, #0]
 8008200:	4605      	mov	r5, r0
 8008202:	b911      	cbnz	r1, 800820a <sbrk_aligned+0x12>
 8008204:	f000 fe40 	bl	8008e88 <_sbrk_r>
 8008208:	6030      	str	r0, [r6, #0]
 800820a:	4621      	mov	r1, r4
 800820c:	4628      	mov	r0, r5
 800820e:	f000 fe3b 	bl	8008e88 <_sbrk_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d00a      	beq.n	800822c <sbrk_aligned+0x34>
 8008216:	1cc4      	adds	r4, r0, #3
 8008218:	f024 0403 	bic.w	r4, r4, #3
 800821c:	42a0      	cmp	r0, r4
 800821e:	d007      	beq.n	8008230 <sbrk_aligned+0x38>
 8008220:	1a21      	subs	r1, r4, r0
 8008222:	4628      	mov	r0, r5
 8008224:	f000 fe30 	bl	8008e88 <_sbrk_r>
 8008228:	3001      	adds	r0, #1
 800822a:	d101      	bne.n	8008230 <sbrk_aligned+0x38>
 800822c:	f04f 34ff 	mov.w	r4, #4294967295
 8008230:	4620      	mov	r0, r4
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	20004b44 	.word	0x20004b44

08008238 <_malloc_r>:
 8008238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800823c:	1ccd      	adds	r5, r1, #3
 800823e:	f025 0503 	bic.w	r5, r5, #3
 8008242:	3508      	adds	r5, #8
 8008244:	2d0c      	cmp	r5, #12
 8008246:	bf38      	it	cc
 8008248:	250c      	movcc	r5, #12
 800824a:	2d00      	cmp	r5, #0
 800824c:	4607      	mov	r7, r0
 800824e:	db01      	blt.n	8008254 <_malloc_r+0x1c>
 8008250:	42a9      	cmp	r1, r5
 8008252:	d905      	bls.n	8008260 <_malloc_r+0x28>
 8008254:	230c      	movs	r3, #12
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	2600      	movs	r6, #0
 800825a:	4630      	mov	r0, r6
 800825c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008260:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008334 <_malloc_r+0xfc>
 8008264:	f000 f868 	bl	8008338 <__malloc_lock>
 8008268:	f8d8 3000 	ldr.w	r3, [r8]
 800826c:	461c      	mov	r4, r3
 800826e:	bb5c      	cbnz	r4, 80082c8 <_malloc_r+0x90>
 8008270:	4629      	mov	r1, r5
 8008272:	4638      	mov	r0, r7
 8008274:	f7ff ffc0 	bl	80081f8 <sbrk_aligned>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	4604      	mov	r4, r0
 800827c:	d155      	bne.n	800832a <_malloc_r+0xf2>
 800827e:	f8d8 4000 	ldr.w	r4, [r8]
 8008282:	4626      	mov	r6, r4
 8008284:	2e00      	cmp	r6, #0
 8008286:	d145      	bne.n	8008314 <_malloc_r+0xdc>
 8008288:	2c00      	cmp	r4, #0
 800828a:	d048      	beq.n	800831e <_malloc_r+0xe6>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	4631      	mov	r1, r6
 8008290:	4638      	mov	r0, r7
 8008292:	eb04 0903 	add.w	r9, r4, r3
 8008296:	f000 fdf7 	bl	8008e88 <_sbrk_r>
 800829a:	4581      	cmp	r9, r0
 800829c:	d13f      	bne.n	800831e <_malloc_r+0xe6>
 800829e:	6821      	ldr	r1, [r4, #0]
 80082a0:	1a6d      	subs	r5, r5, r1
 80082a2:	4629      	mov	r1, r5
 80082a4:	4638      	mov	r0, r7
 80082a6:	f7ff ffa7 	bl	80081f8 <sbrk_aligned>
 80082aa:	3001      	adds	r0, #1
 80082ac:	d037      	beq.n	800831e <_malloc_r+0xe6>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	442b      	add	r3, r5
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	f8d8 3000 	ldr.w	r3, [r8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d038      	beq.n	800832e <_malloc_r+0xf6>
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	42a2      	cmp	r2, r4
 80082c0:	d12b      	bne.n	800831a <_malloc_r+0xe2>
 80082c2:	2200      	movs	r2, #0
 80082c4:	605a      	str	r2, [r3, #4]
 80082c6:	e00f      	b.n	80082e8 <_malloc_r+0xb0>
 80082c8:	6822      	ldr	r2, [r4, #0]
 80082ca:	1b52      	subs	r2, r2, r5
 80082cc:	d41f      	bmi.n	800830e <_malloc_r+0xd6>
 80082ce:	2a0b      	cmp	r2, #11
 80082d0:	d917      	bls.n	8008302 <_malloc_r+0xca>
 80082d2:	1961      	adds	r1, r4, r5
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	6025      	str	r5, [r4, #0]
 80082d8:	bf18      	it	ne
 80082da:	6059      	strne	r1, [r3, #4]
 80082dc:	6863      	ldr	r3, [r4, #4]
 80082de:	bf08      	it	eq
 80082e0:	f8c8 1000 	streq.w	r1, [r8]
 80082e4:	5162      	str	r2, [r4, r5]
 80082e6:	604b      	str	r3, [r1, #4]
 80082e8:	4638      	mov	r0, r7
 80082ea:	f104 060b 	add.w	r6, r4, #11
 80082ee:	f000 f829 	bl	8008344 <__malloc_unlock>
 80082f2:	f026 0607 	bic.w	r6, r6, #7
 80082f6:	1d23      	adds	r3, r4, #4
 80082f8:	1af2      	subs	r2, r6, r3
 80082fa:	d0ae      	beq.n	800825a <_malloc_r+0x22>
 80082fc:	1b9b      	subs	r3, r3, r6
 80082fe:	50a3      	str	r3, [r4, r2]
 8008300:	e7ab      	b.n	800825a <_malloc_r+0x22>
 8008302:	42a3      	cmp	r3, r4
 8008304:	6862      	ldr	r2, [r4, #4]
 8008306:	d1dd      	bne.n	80082c4 <_malloc_r+0x8c>
 8008308:	f8c8 2000 	str.w	r2, [r8]
 800830c:	e7ec      	b.n	80082e8 <_malloc_r+0xb0>
 800830e:	4623      	mov	r3, r4
 8008310:	6864      	ldr	r4, [r4, #4]
 8008312:	e7ac      	b.n	800826e <_malloc_r+0x36>
 8008314:	4634      	mov	r4, r6
 8008316:	6876      	ldr	r6, [r6, #4]
 8008318:	e7b4      	b.n	8008284 <_malloc_r+0x4c>
 800831a:	4613      	mov	r3, r2
 800831c:	e7cc      	b.n	80082b8 <_malloc_r+0x80>
 800831e:	230c      	movs	r3, #12
 8008320:	603b      	str	r3, [r7, #0]
 8008322:	4638      	mov	r0, r7
 8008324:	f000 f80e 	bl	8008344 <__malloc_unlock>
 8008328:	e797      	b.n	800825a <_malloc_r+0x22>
 800832a:	6025      	str	r5, [r4, #0]
 800832c:	e7dc      	b.n	80082e8 <_malloc_r+0xb0>
 800832e:	605b      	str	r3, [r3, #4]
 8008330:	deff      	udf	#255	; 0xff
 8008332:	bf00      	nop
 8008334:	20004b40 	.word	0x20004b40

08008338 <__malloc_lock>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__malloc_lock+0x8>)
 800833a:	f7ff b902 	b.w	8007542 <__retarget_lock_acquire_recursive>
 800833e:	bf00      	nop
 8008340:	20004b3c 	.word	0x20004b3c

08008344 <__malloc_unlock>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__malloc_unlock+0x8>)
 8008346:	f7ff b8fd 	b.w	8007544 <__retarget_lock_release_recursive>
 800834a:	bf00      	nop
 800834c:	20004b3c 	.word	0x20004b3c

08008350 <_Balloc>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	69c6      	ldr	r6, [r0, #28]
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	b976      	cbnz	r6, 8008378 <_Balloc+0x28>
 800835a:	2010      	movs	r0, #16
 800835c:	f7ff ff44 	bl	80081e8 <malloc>
 8008360:	4602      	mov	r2, r0
 8008362:	61e0      	str	r0, [r4, #28]
 8008364:	b920      	cbnz	r0, 8008370 <_Balloc+0x20>
 8008366:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <_Balloc+0x78>)
 8008368:	4818      	ldr	r0, [pc, #96]	; (80083cc <_Balloc+0x7c>)
 800836a:	216b      	movs	r1, #107	; 0x6b
 800836c:	f000 fd9c 	bl	8008ea8 <__assert_func>
 8008370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008374:	6006      	str	r6, [r0, #0]
 8008376:	60c6      	str	r6, [r0, #12]
 8008378:	69e6      	ldr	r6, [r4, #28]
 800837a:	68f3      	ldr	r3, [r6, #12]
 800837c:	b183      	cbz	r3, 80083a0 <_Balloc+0x50>
 800837e:	69e3      	ldr	r3, [r4, #28]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008386:	b9b8      	cbnz	r0, 80083b8 <_Balloc+0x68>
 8008388:	2101      	movs	r1, #1
 800838a:	fa01 f605 	lsl.w	r6, r1, r5
 800838e:	1d72      	adds	r2, r6, #5
 8008390:	0092      	lsls	r2, r2, #2
 8008392:	4620      	mov	r0, r4
 8008394:	f000 fda6 	bl	8008ee4 <_calloc_r>
 8008398:	b160      	cbz	r0, 80083b4 <_Balloc+0x64>
 800839a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800839e:	e00e      	b.n	80083be <_Balloc+0x6e>
 80083a0:	2221      	movs	r2, #33	; 0x21
 80083a2:	2104      	movs	r1, #4
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 fd9d 	bl	8008ee4 <_calloc_r>
 80083aa:	69e3      	ldr	r3, [r4, #28]
 80083ac:	60f0      	str	r0, [r6, #12]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e4      	bne.n	800837e <_Balloc+0x2e>
 80083b4:	2000      	movs	r0, #0
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	6802      	ldr	r2, [r0, #0]
 80083ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083be:	2300      	movs	r3, #0
 80083c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083c4:	e7f7      	b.n	80083b6 <_Balloc+0x66>
 80083c6:	bf00      	nop
 80083c8:	0800981d 	.word	0x0800981d
 80083cc:	0800989d 	.word	0x0800989d

080083d0 <_Bfree>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	69c6      	ldr	r6, [r0, #28]
 80083d4:	4605      	mov	r5, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	b976      	cbnz	r6, 80083f8 <_Bfree+0x28>
 80083da:	2010      	movs	r0, #16
 80083dc:	f7ff ff04 	bl	80081e8 <malloc>
 80083e0:	4602      	mov	r2, r0
 80083e2:	61e8      	str	r0, [r5, #28]
 80083e4:	b920      	cbnz	r0, 80083f0 <_Bfree+0x20>
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <_Bfree+0x3c>)
 80083e8:	4809      	ldr	r0, [pc, #36]	; (8008410 <_Bfree+0x40>)
 80083ea:	218f      	movs	r1, #143	; 0x8f
 80083ec:	f000 fd5c 	bl	8008ea8 <__assert_func>
 80083f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083f4:	6006      	str	r6, [r0, #0]
 80083f6:	60c6      	str	r6, [r0, #12]
 80083f8:	b13c      	cbz	r4, 800840a <_Bfree+0x3a>
 80083fa:	69eb      	ldr	r3, [r5, #28]
 80083fc:	6862      	ldr	r2, [r4, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008404:	6021      	str	r1, [r4, #0]
 8008406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	0800981d 	.word	0x0800981d
 8008410:	0800989d 	.word	0x0800989d

08008414 <__multadd>:
 8008414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008418:	690d      	ldr	r5, [r1, #16]
 800841a:	4607      	mov	r7, r0
 800841c:	460c      	mov	r4, r1
 800841e:	461e      	mov	r6, r3
 8008420:	f101 0c14 	add.w	ip, r1, #20
 8008424:	2000      	movs	r0, #0
 8008426:	f8dc 3000 	ldr.w	r3, [ip]
 800842a:	b299      	uxth	r1, r3
 800842c:	fb02 6101 	mla	r1, r2, r1, r6
 8008430:	0c1e      	lsrs	r6, r3, #16
 8008432:	0c0b      	lsrs	r3, r1, #16
 8008434:	fb02 3306 	mla	r3, r2, r6, r3
 8008438:	b289      	uxth	r1, r1
 800843a:	3001      	adds	r0, #1
 800843c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008440:	4285      	cmp	r5, r0
 8008442:	f84c 1b04 	str.w	r1, [ip], #4
 8008446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800844a:	dcec      	bgt.n	8008426 <__multadd+0x12>
 800844c:	b30e      	cbz	r6, 8008492 <__multadd+0x7e>
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	42ab      	cmp	r3, r5
 8008452:	dc19      	bgt.n	8008488 <__multadd+0x74>
 8008454:	6861      	ldr	r1, [r4, #4]
 8008456:	4638      	mov	r0, r7
 8008458:	3101      	adds	r1, #1
 800845a:	f7ff ff79 	bl	8008350 <_Balloc>
 800845e:	4680      	mov	r8, r0
 8008460:	b928      	cbnz	r0, 800846e <__multadd+0x5a>
 8008462:	4602      	mov	r2, r0
 8008464:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <__multadd+0x84>)
 8008466:	480d      	ldr	r0, [pc, #52]	; (800849c <__multadd+0x88>)
 8008468:	21ba      	movs	r1, #186	; 0xba
 800846a:	f000 fd1d 	bl	8008ea8 <__assert_func>
 800846e:	6922      	ldr	r2, [r4, #16]
 8008470:	3202      	adds	r2, #2
 8008472:	f104 010c 	add.w	r1, r4, #12
 8008476:	0092      	lsls	r2, r2, #2
 8008478:	300c      	adds	r0, #12
 800847a:	f7ff f864 	bl	8007546 <memcpy>
 800847e:	4621      	mov	r1, r4
 8008480:	4638      	mov	r0, r7
 8008482:	f7ff ffa5 	bl	80083d0 <_Bfree>
 8008486:	4644      	mov	r4, r8
 8008488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800848c:	3501      	adds	r5, #1
 800848e:	615e      	str	r6, [r3, #20]
 8008490:	6125      	str	r5, [r4, #16]
 8008492:	4620      	mov	r0, r4
 8008494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008498:	0800988c 	.word	0x0800988c
 800849c:	0800989d 	.word	0x0800989d

080084a0 <__hi0bits>:
 80084a0:	0c03      	lsrs	r3, r0, #16
 80084a2:	041b      	lsls	r3, r3, #16
 80084a4:	b9d3      	cbnz	r3, 80084dc <__hi0bits+0x3c>
 80084a6:	0400      	lsls	r0, r0, #16
 80084a8:	2310      	movs	r3, #16
 80084aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084ae:	bf04      	itt	eq
 80084b0:	0200      	lsleq	r0, r0, #8
 80084b2:	3308      	addeq	r3, #8
 80084b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084b8:	bf04      	itt	eq
 80084ba:	0100      	lsleq	r0, r0, #4
 80084bc:	3304      	addeq	r3, #4
 80084be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084c2:	bf04      	itt	eq
 80084c4:	0080      	lsleq	r0, r0, #2
 80084c6:	3302      	addeq	r3, #2
 80084c8:	2800      	cmp	r0, #0
 80084ca:	db05      	blt.n	80084d8 <__hi0bits+0x38>
 80084cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084d0:	f103 0301 	add.w	r3, r3, #1
 80084d4:	bf08      	it	eq
 80084d6:	2320      	moveq	r3, #32
 80084d8:	4618      	mov	r0, r3
 80084da:	4770      	bx	lr
 80084dc:	2300      	movs	r3, #0
 80084de:	e7e4      	b.n	80084aa <__hi0bits+0xa>

080084e0 <__lo0bits>:
 80084e0:	6803      	ldr	r3, [r0, #0]
 80084e2:	f013 0207 	ands.w	r2, r3, #7
 80084e6:	d00c      	beq.n	8008502 <__lo0bits+0x22>
 80084e8:	07d9      	lsls	r1, r3, #31
 80084ea:	d422      	bmi.n	8008532 <__lo0bits+0x52>
 80084ec:	079a      	lsls	r2, r3, #30
 80084ee:	bf49      	itett	mi
 80084f0:	085b      	lsrmi	r3, r3, #1
 80084f2:	089b      	lsrpl	r3, r3, #2
 80084f4:	6003      	strmi	r3, [r0, #0]
 80084f6:	2201      	movmi	r2, #1
 80084f8:	bf5c      	itt	pl
 80084fa:	6003      	strpl	r3, [r0, #0]
 80084fc:	2202      	movpl	r2, #2
 80084fe:	4610      	mov	r0, r2
 8008500:	4770      	bx	lr
 8008502:	b299      	uxth	r1, r3
 8008504:	b909      	cbnz	r1, 800850a <__lo0bits+0x2a>
 8008506:	0c1b      	lsrs	r3, r3, #16
 8008508:	2210      	movs	r2, #16
 800850a:	b2d9      	uxtb	r1, r3
 800850c:	b909      	cbnz	r1, 8008512 <__lo0bits+0x32>
 800850e:	3208      	adds	r2, #8
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	0719      	lsls	r1, r3, #28
 8008514:	bf04      	itt	eq
 8008516:	091b      	lsreq	r3, r3, #4
 8008518:	3204      	addeq	r2, #4
 800851a:	0799      	lsls	r1, r3, #30
 800851c:	bf04      	itt	eq
 800851e:	089b      	lsreq	r3, r3, #2
 8008520:	3202      	addeq	r2, #2
 8008522:	07d9      	lsls	r1, r3, #31
 8008524:	d403      	bmi.n	800852e <__lo0bits+0x4e>
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	f102 0201 	add.w	r2, r2, #1
 800852c:	d003      	beq.n	8008536 <__lo0bits+0x56>
 800852e:	6003      	str	r3, [r0, #0]
 8008530:	e7e5      	b.n	80084fe <__lo0bits+0x1e>
 8008532:	2200      	movs	r2, #0
 8008534:	e7e3      	b.n	80084fe <__lo0bits+0x1e>
 8008536:	2220      	movs	r2, #32
 8008538:	e7e1      	b.n	80084fe <__lo0bits+0x1e>
	...

0800853c <__i2b>:
 800853c:	b510      	push	{r4, lr}
 800853e:	460c      	mov	r4, r1
 8008540:	2101      	movs	r1, #1
 8008542:	f7ff ff05 	bl	8008350 <_Balloc>
 8008546:	4602      	mov	r2, r0
 8008548:	b928      	cbnz	r0, 8008556 <__i2b+0x1a>
 800854a:	4b05      	ldr	r3, [pc, #20]	; (8008560 <__i2b+0x24>)
 800854c:	4805      	ldr	r0, [pc, #20]	; (8008564 <__i2b+0x28>)
 800854e:	f240 1145 	movw	r1, #325	; 0x145
 8008552:	f000 fca9 	bl	8008ea8 <__assert_func>
 8008556:	2301      	movs	r3, #1
 8008558:	6144      	str	r4, [r0, #20]
 800855a:	6103      	str	r3, [r0, #16]
 800855c:	bd10      	pop	{r4, pc}
 800855e:	bf00      	nop
 8008560:	0800988c 	.word	0x0800988c
 8008564:	0800989d 	.word	0x0800989d

08008568 <__multiply>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	4691      	mov	r9, r2
 800856e:	690a      	ldr	r2, [r1, #16]
 8008570:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008574:	429a      	cmp	r2, r3
 8008576:	bfb8      	it	lt
 8008578:	460b      	movlt	r3, r1
 800857a:	460c      	mov	r4, r1
 800857c:	bfbc      	itt	lt
 800857e:	464c      	movlt	r4, r9
 8008580:	4699      	movlt	r9, r3
 8008582:	6927      	ldr	r7, [r4, #16]
 8008584:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008588:	68a3      	ldr	r3, [r4, #8]
 800858a:	6861      	ldr	r1, [r4, #4]
 800858c:	eb07 060a 	add.w	r6, r7, sl
 8008590:	42b3      	cmp	r3, r6
 8008592:	b085      	sub	sp, #20
 8008594:	bfb8      	it	lt
 8008596:	3101      	addlt	r1, #1
 8008598:	f7ff feda 	bl	8008350 <_Balloc>
 800859c:	b930      	cbnz	r0, 80085ac <__multiply+0x44>
 800859e:	4602      	mov	r2, r0
 80085a0:	4b44      	ldr	r3, [pc, #272]	; (80086b4 <__multiply+0x14c>)
 80085a2:	4845      	ldr	r0, [pc, #276]	; (80086b8 <__multiply+0x150>)
 80085a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80085a8:	f000 fc7e 	bl	8008ea8 <__assert_func>
 80085ac:	f100 0514 	add.w	r5, r0, #20
 80085b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085b4:	462b      	mov	r3, r5
 80085b6:	2200      	movs	r2, #0
 80085b8:	4543      	cmp	r3, r8
 80085ba:	d321      	bcc.n	8008600 <__multiply+0x98>
 80085bc:	f104 0314 	add.w	r3, r4, #20
 80085c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085c4:	f109 0314 	add.w	r3, r9, #20
 80085c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80085cc:	9202      	str	r2, [sp, #8]
 80085ce:	1b3a      	subs	r2, r7, r4
 80085d0:	3a15      	subs	r2, #21
 80085d2:	f022 0203 	bic.w	r2, r2, #3
 80085d6:	3204      	adds	r2, #4
 80085d8:	f104 0115 	add.w	r1, r4, #21
 80085dc:	428f      	cmp	r7, r1
 80085de:	bf38      	it	cc
 80085e0:	2204      	movcc	r2, #4
 80085e2:	9201      	str	r2, [sp, #4]
 80085e4:	9a02      	ldr	r2, [sp, #8]
 80085e6:	9303      	str	r3, [sp, #12]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d80c      	bhi.n	8008606 <__multiply+0x9e>
 80085ec:	2e00      	cmp	r6, #0
 80085ee:	dd03      	ble.n	80085f8 <__multiply+0x90>
 80085f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d05b      	beq.n	80086b0 <__multiply+0x148>
 80085f8:	6106      	str	r6, [r0, #16]
 80085fa:	b005      	add	sp, #20
 80085fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008600:	f843 2b04 	str.w	r2, [r3], #4
 8008604:	e7d8      	b.n	80085b8 <__multiply+0x50>
 8008606:	f8b3 a000 	ldrh.w	sl, [r3]
 800860a:	f1ba 0f00 	cmp.w	sl, #0
 800860e:	d024      	beq.n	800865a <__multiply+0xf2>
 8008610:	f104 0e14 	add.w	lr, r4, #20
 8008614:	46a9      	mov	r9, r5
 8008616:	f04f 0c00 	mov.w	ip, #0
 800861a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800861e:	f8d9 1000 	ldr.w	r1, [r9]
 8008622:	fa1f fb82 	uxth.w	fp, r2
 8008626:	b289      	uxth	r1, r1
 8008628:	fb0a 110b 	mla	r1, sl, fp, r1
 800862c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008630:	f8d9 2000 	ldr.w	r2, [r9]
 8008634:	4461      	add	r1, ip
 8008636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800863a:	fb0a c20b 	mla	r2, sl, fp, ip
 800863e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008642:	b289      	uxth	r1, r1
 8008644:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008648:	4577      	cmp	r7, lr
 800864a:	f849 1b04 	str.w	r1, [r9], #4
 800864e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008652:	d8e2      	bhi.n	800861a <__multiply+0xb2>
 8008654:	9a01      	ldr	r2, [sp, #4]
 8008656:	f845 c002 	str.w	ip, [r5, r2]
 800865a:	9a03      	ldr	r2, [sp, #12]
 800865c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008660:	3304      	adds	r3, #4
 8008662:	f1b9 0f00 	cmp.w	r9, #0
 8008666:	d021      	beq.n	80086ac <__multiply+0x144>
 8008668:	6829      	ldr	r1, [r5, #0]
 800866a:	f104 0c14 	add.w	ip, r4, #20
 800866e:	46ae      	mov	lr, r5
 8008670:	f04f 0a00 	mov.w	sl, #0
 8008674:	f8bc b000 	ldrh.w	fp, [ip]
 8008678:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800867c:	fb09 220b 	mla	r2, r9, fp, r2
 8008680:	4452      	add	r2, sl
 8008682:	b289      	uxth	r1, r1
 8008684:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008688:	f84e 1b04 	str.w	r1, [lr], #4
 800868c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008690:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008694:	f8be 1000 	ldrh.w	r1, [lr]
 8008698:	fb09 110a 	mla	r1, r9, sl, r1
 800869c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80086a0:	4567      	cmp	r7, ip
 80086a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086a6:	d8e5      	bhi.n	8008674 <__multiply+0x10c>
 80086a8:	9a01      	ldr	r2, [sp, #4]
 80086aa:	50a9      	str	r1, [r5, r2]
 80086ac:	3504      	adds	r5, #4
 80086ae:	e799      	b.n	80085e4 <__multiply+0x7c>
 80086b0:	3e01      	subs	r6, #1
 80086b2:	e79b      	b.n	80085ec <__multiply+0x84>
 80086b4:	0800988c 	.word	0x0800988c
 80086b8:	0800989d 	.word	0x0800989d

080086bc <__pow5mult>:
 80086bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c0:	4615      	mov	r5, r2
 80086c2:	f012 0203 	ands.w	r2, r2, #3
 80086c6:	4606      	mov	r6, r0
 80086c8:	460f      	mov	r7, r1
 80086ca:	d007      	beq.n	80086dc <__pow5mult+0x20>
 80086cc:	4c25      	ldr	r4, [pc, #148]	; (8008764 <__pow5mult+0xa8>)
 80086ce:	3a01      	subs	r2, #1
 80086d0:	2300      	movs	r3, #0
 80086d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086d6:	f7ff fe9d 	bl	8008414 <__multadd>
 80086da:	4607      	mov	r7, r0
 80086dc:	10ad      	asrs	r5, r5, #2
 80086de:	d03d      	beq.n	800875c <__pow5mult+0xa0>
 80086e0:	69f4      	ldr	r4, [r6, #28]
 80086e2:	b97c      	cbnz	r4, 8008704 <__pow5mult+0x48>
 80086e4:	2010      	movs	r0, #16
 80086e6:	f7ff fd7f 	bl	80081e8 <malloc>
 80086ea:	4602      	mov	r2, r0
 80086ec:	61f0      	str	r0, [r6, #28]
 80086ee:	b928      	cbnz	r0, 80086fc <__pow5mult+0x40>
 80086f0:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <__pow5mult+0xac>)
 80086f2:	481e      	ldr	r0, [pc, #120]	; (800876c <__pow5mult+0xb0>)
 80086f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80086f8:	f000 fbd6 	bl	8008ea8 <__assert_func>
 80086fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008700:	6004      	str	r4, [r0, #0]
 8008702:	60c4      	str	r4, [r0, #12]
 8008704:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800870c:	b94c      	cbnz	r4, 8008722 <__pow5mult+0x66>
 800870e:	f240 2171 	movw	r1, #625	; 0x271
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff ff12 	bl	800853c <__i2b>
 8008718:	2300      	movs	r3, #0
 800871a:	f8c8 0008 	str.w	r0, [r8, #8]
 800871e:	4604      	mov	r4, r0
 8008720:	6003      	str	r3, [r0, #0]
 8008722:	f04f 0900 	mov.w	r9, #0
 8008726:	07eb      	lsls	r3, r5, #31
 8008728:	d50a      	bpl.n	8008740 <__pow5mult+0x84>
 800872a:	4639      	mov	r1, r7
 800872c:	4622      	mov	r2, r4
 800872e:	4630      	mov	r0, r6
 8008730:	f7ff ff1a 	bl	8008568 <__multiply>
 8008734:	4639      	mov	r1, r7
 8008736:	4680      	mov	r8, r0
 8008738:	4630      	mov	r0, r6
 800873a:	f7ff fe49 	bl	80083d0 <_Bfree>
 800873e:	4647      	mov	r7, r8
 8008740:	106d      	asrs	r5, r5, #1
 8008742:	d00b      	beq.n	800875c <__pow5mult+0xa0>
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	b938      	cbnz	r0, 8008758 <__pow5mult+0x9c>
 8008748:	4622      	mov	r2, r4
 800874a:	4621      	mov	r1, r4
 800874c:	4630      	mov	r0, r6
 800874e:	f7ff ff0b 	bl	8008568 <__multiply>
 8008752:	6020      	str	r0, [r4, #0]
 8008754:	f8c0 9000 	str.w	r9, [r0]
 8008758:	4604      	mov	r4, r0
 800875a:	e7e4      	b.n	8008726 <__pow5mult+0x6a>
 800875c:	4638      	mov	r0, r7
 800875e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008762:	bf00      	nop
 8008764:	080099e8 	.word	0x080099e8
 8008768:	0800981d 	.word	0x0800981d
 800876c:	0800989d 	.word	0x0800989d

08008770 <__lshift>:
 8008770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008774:	460c      	mov	r4, r1
 8008776:	6849      	ldr	r1, [r1, #4]
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	4607      	mov	r7, r0
 8008782:	4691      	mov	r9, r2
 8008784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008788:	f108 0601 	add.w	r6, r8, #1
 800878c:	42b3      	cmp	r3, r6
 800878e:	db0b      	blt.n	80087a8 <__lshift+0x38>
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff fddd 	bl	8008350 <_Balloc>
 8008796:	4605      	mov	r5, r0
 8008798:	b948      	cbnz	r0, 80087ae <__lshift+0x3e>
 800879a:	4602      	mov	r2, r0
 800879c:	4b28      	ldr	r3, [pc, #160]	; (8008840 <__lshift+0xd0>)
 800879e:	4829      	ldr	r0, [pc, #164]	; (8008844 <__lshift+0xd4>)
 80087a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80087a4:	f000 fb80 	bl	8008ea8 <__assert_func>
 80087a8:	3101      	adds	r1, #1
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	e7ee      	b.n	800878c <__lshift+0x1c>
 80087ae:	2300      	movs	r3, #0
 80087b0:	f100 0114 	add.w	r1, r0, #20
 80087b4:	f100 0210 	add.w	r2, r0, #16
 80087b8:	4618      	mov	r0, r3
 80087ba:	4553      	cmp	r3, sl
 80087bc:	db33      	blt.n	8008826 <__lshift+0xb6>
 80087be:	6920      	ldr	r0, [r4, #16]
 80087c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087c4:	f104 0314 	add.w	r3, r4, #20
 80087c8:	f019 091f 	ands.w	r9, r9, #31
 80087cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087d4:	d02b      	beq.n	800882e <__lshift+0xbe>
 80087d6:	f1c9 0e20 	rsb	lr, r9, #32
 80087da:	468a      	mov	sl, r1
 80087dc:	2200      	movs	r2, #0
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	fa00 f009 	lsl.w	r0, r0, r9
 80087e4:	4310      	orrs	r0, r2
 80087e6:	f84a 0b04 	str.w	r0, [sl], #4
 80087ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ee:	459c      	cmp	ip, r3
 80087f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80087f4:	d8f3      	bhi.n	80087de <__lshift+0x6e>
 80087f6:	ebac 0304 	sub.w	r3, ip, r4
 80087fa:	3b15      	subs	r3, #21
 80087fc:	f023 0303 	bic.w	r3, r3, #3
 8008800:	3304      	adds	r3, #4
 8008802:	f104 0015 	add.w	r0, r4, #21
 8008806:	4584      	cmp	ip, r0
 8008808:	bf38      	it	cc
 800880a:	2304      	movcc	r3, #4
 800880c:	50ca      	str	r2, [r1, r3]
 800880e:	b10a      	cbz	r2, 8008814 <__lshift+0xa4>
 8008810:	f108 0602 	add.w	r6, r8, #2
 8008814:	3e01      	subs	r6, #1
 8008816:	4638      	mov	r0, r7
 8008818:	612e      	str	r6, [r5, #16]
 800881a:	4621      	mov	r1, r4
 800881c:	f7ff fdd8 	bl	80083d0 <_Bfree>
 8008820:	4628      	mov	r0, r5
 8008822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008826:	f842 0f04 	str.w	r0, [r2, #4]!
 800882a:	3301      	adds	r3, #1
 800882c:	e7c5      	b.n	80087ba <__lshift+0x4a>
 800882e:	3904      	subs	r1, #4
 8008830:	f853 2b04 	ldr.w	r2, [r3], #4
 8008834:	f841 2f04 	str.w	r2, [r1, #4]!
 8008838:	459c      	cmp	ip, r3
 800883a:	d8f9      	bhi.n	8008830 <__lshift+0xc0>
 800883c:	e7ea      	b.n	8008814 <__lshift+0xa4>
 800883e:	bf00      	nop
 8008840:	0800988c 	.word	0x0800988c
 8008844:	0800989d 	.word	0x0800989d

08008848 <__mcmp>:
 8008848:	b530      	push	{r4, r5, lr}
 800884a:	6902      	ldr	r2, [r0, #16]
 800884c:	690c      	ldr	r4, [r1, #16]
 800884e:	1b12      	subs	r2, r2, r4
 8008850:	d10e      	bne.n	8008870 <__mcmp+0x28>
 8008852:	f100 0314 	add.w	r3, r0, #20
 8008856:	3114      	adds	r1, #20
 8008858:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800885c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008860:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008864:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008868:	42a5      	cmp	r5, r4
 800886a:	d003      	beq.n	8008874 <__mcmp+0x2c>
 800886c:	d305      	bcc.n	800887a <__mcmp+0x32>
 800886e:	2201      	movs	r2, #1
 8008870:	4610      	mov	r0, r2
 8008872:	bd30      	pop	{r4, r5, pc}
 8008874:	4283      	cmp	r3, r0
 8008876:	d3f3      	bcc.n	8008860 <__mcmp+0x18>
 8008878:	e7fa      	b.n	8008870 <__mcmp+0x28>
 800887a:	f04f 32ff 	mov.w	r2, #4294967295
 800887e:	e7f7      	b.n	8008870 <__mcmp+0x28>

08008880 <__mdiff>:
 8008880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	460c      	mov	r4, r1
 8008886:	4606      	mov	r6, r0
 8008888:	4611      	mov	r1, r2
 800888a:	4620      	mov	r0, r4
 800888c:	4690      	mov	r8, r2
 800888e:	f7ff ffdb 	bl	8008848 <__mcmp>
 8008892:	1e05      	subs	r5, r0, #0
 8008894:	d110      	bne.n	80088b8 <__mdiff+0x38>
 8008896:	4629      	mov	r1, r5
 8008898:	4630      	mov	r0, r6
 800889a:	f7ff fd59 	bl	8008350 <_Balloc>
 800889e:	b930      	cbnz	r0, 80088ae <__mdiff+0x2e>
 80088a0:	4b3a      	ldr	r3, [pc, #232]	; (800898c <__mdiff+0x10c>)
 80088a2:	4602      	mov	r2, r0
 80088a4:	f240 2137 	movw	r1, #567	; 0x237
 80088a8:	4839      	ldr	r0, [pc, #228]	; (8008990 <__mdiff+0x110>)
 80088aa:	f000 fafd 	bl	8008ea8 <__assert_func>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	bfa4      	itt	ge
 80088ba:	4643      	movge	r3, r8
 80088bc:	46a0      	movge	r8, r4
 80088be:	4630      	mov	r0, r6
 80088c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088c4:	bfa6      	itte	ge
 80088c6:	461c      	movge	r4, r3
 80088c8:	2500      	movge	r5, #0
 80088ca:	2501      	movlt	r5, #1
 80088cc:	f7ff fd40 	bl	8008350 <_Balloc>
 80088d0:	b920      	cbnz	r0, 80088dc <__mdiff+0x5c>
 80088d2:	4b2e      	ldr	r3, [pc, #184]	; (800898c <__mdiff+0x10c>)
 80088d4:	4602      	mov	r2, r0
 80088d6:	f240 2145 	movw	r1, #581	; 0x245
 80088da:	e7e5      	b.n	80088a8 <__mdiff+0x28>
 80088dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088e0:	6926      	ldr	r6, [r4, #16]
 80088e2:	60c5      	str	r5, [r0, #12]
 80088e4:	f104 0914 	add.w	r9, r4, #20
 80088e8:	f108 0514 	add.w	r5, r8, #20
 80088ec:	f100 0e14 	add.w	lr, r0, #20
 80088f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088f8:	f108 0210 	add.w	r2, r8, #16
 80088fc:	46f2      	mov	sl, lr
 80088fe:	2100      	movs	r1, #0
 8008900:	f859 3b04 	ldr.w	r3, [r9], #4
 8008904:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008908:	fa11 f88b 	uxtah	r8, r1, fp
 800890c:	b299      	uxth	r1, r3
 800890e:	0c1b      	lsrs	r3, r3, #16
 8008910:	eba8 0801 	sub.w	r8, r8, r1
 8008914:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008918:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800891c:	fa1f f888 	uxth.w	r8, r8
 8008920:	1419      	asrs	r1, r3, #16
 8008922:	454e      	cmp	r6, r9
 8008924:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008928:	f84a 3b04 	str.w	r3, [sl], #4
 800892c:	d8e8      	bhi.n	8008900 <__mdiff+0x80>
 800892e:	1b33      	subs	r3, r6, r4
 8008930:	3b15      	subs	r3, #21
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	3304      	adds	r3, #4
 8008938:	3415      	adds	r4, #21
 800893a:	42a6      	cmp	r6, r4
 800893c:	bf38      	it	cc
 800893e:	2304      	movcc	r3, #4
 8008940:	441d      	add	r5, r3
 8008942:	4473      	add	r3, lr
 8008944:	469e      	mov	lr, r3
 8008946:	462e      	mov	r6, r5
 8008948:	4566      	cmp	r6, ip
 800894a:	d30e      	bcc.n	800896a <__mdiff+0xea>
 800894c:	f10c 0203 	add.w	r2, ip, #3
 8008950:	1b52      	subs	r2, r2, r5
 8008952:	f022 0203 	bic.w	r2, r2, #3
 8008956:	3d03      	subs	r5, #3
 8008958:	45ac      	cmp	ip, r5
 800895a:	bf38      	it	cc
 800895c:	2200      	movcc	r2, #0
 800895e:	4413      	add	r3, r2
 8008960:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008964:	b17a      	cbz	r2, 8008986 <__mdiff+0x106>
 8008966:	6107      	str	r7, [r0, #16]
 8008968:	e7a4      	b.n	80088b4 <__mdiff+0x34>
 800896a:	f856 8b04 	ldr.w	r8, [r6], #4
 800896e:	fa11 f288 	uxtah	r2, r1, r8
 8008972:	1414      	asrs	r4, r2, #16
 8008974:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008978:	b292      	uxth	r2, r2
 800897a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800897e:	f84e 2b04 	str.w	r2, [lr], #4
 8008982:	1421      	asrs	r1, r4, #16
 8008984:	e7e0      	b.n	8008948 <__mdiff+0xc8>
 8008986:	3f01      	subs	r7, #1
 8008988:	e7ea      	b.n	8008960 <__mdiff+0xe0>
 800898a:	bf00      	nop
 800898c:	0800988c 	.word	0x0800988c
 8008990:	0800989d 	.word	0x0800989d

08008994 <__d2b>:
 8008994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008998:	460f      	mov	r7, r1
 800899a:	2101      	movs	r1, #1
 800899c:	ec59 8b10 	vmov	r8, r9, d0
 80089a0:	4616      	mov	r6, r2
 80089a2:	f7ff fcd5 	bl	8008350 <_Balloc>
 80089a6:	4604      	mov	r4, r0
 80089a8:	b930      	cbnz	r0, 80089b8 <__d2b+0x24>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <__d2b+0xac>)
 80089ae:	4825      	ldr	r0, [pc, #148]	; (8008a44 <__d2b+0xb0>)
 80089b0:	f240 310f 	movw	r1, #783	; 0x30f
 80089b4:	f000 fa78 	bl	8008ea8 <__assert_func>
 80089b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089c0:	bb2d      	cbnz	r5, 8008a0e <__d2b+0x7a>
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	f1b8 0300 	subs.w	r3, r8, #0
 80089c8:	d026      	beq.n	8008a18 <__d2b+0x84>
 80089ca:	4668      	mov	r0, sp
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	f7ff fd87 	bl	80084e0 <__lo0bits>
 80089d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089d6:	b1e8      	cbz	r0, 8008a14 <__d2b+0x80>
 80089d8:	f1c0 0320 	rsb	r3, r0, #32
 80089dc:	fa02 f303 	lsl.w	r3, r2, r3
 80089e0:	430b      	orrs	r3, r1
 80089e2:	40c2      	lsrs	r2, r0
 80089e4:	6163      	str	r3, [r4, #20]
 80089e6:	9201      	str	r2, [sp, #4]
 80089e8:	9b01      	ldr	r3, [sp, #4]
 80089ea:	61a3      	str	r3, [r4, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bf14      	ite	ne
 80089f0:	2202      	movne	r2, #2
 80089f2:	2201      	moveq	r2, #1
 80089f4:	6122      	str	r2, [r4, #16]
 80089f6:	b1bd      	cbz	r5, 8008a28 <__d2b+0x94>
 80089f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089fc:	4405      	add	r5, r0
 80089fe:	603d      	str	r5, [r7, #0]
 8008a00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a04:	6030      	str	r0, [r6, #0]
 8008a06:	4620      	mov	r0, r4
 8008a08:	b003      	add	sp, #12
 8008a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a12:	e7d6      	b.n	80089c2 <__d2b+0x2e>
 8008a14:	6161      	str	r1, [r4, #20]
 8008a16:	e7e7      	b.n	80089e8 <__d2b+0x54>
 8008a18:	a801      	add	r0, sp, #4
 8008a1a:	f7ff fd61 	bl	80084e0 <__lo0bits>
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	6163      	str	r3, [r4, #20]
 8008a22:	3020      	adds	r0, #32
 8008a24:	2201      	movs	r2, #1
 8008a26:	e7e5      	b.n	80089f4 <__d2b+0x60>
 8008a28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a30:	6038      	str	r0, [r7, #0]
 8008a32:	6918      	ldr	r0, [r3, #16]
 8008a34:	f7ff fd34 	bl	80084a0 <__hi0bits>
 8008a38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a3c:	e7e2      	b.n	8008a04 <__d2b+0x70>
 8008a3e:	bf00      	nop
 8008a40:	0800988c 	.word	0x0800988c
 8008a44:	0800989d 	.word	0x0800989d

08008a48 <__ssputs_r>:
 8008a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4c:	688e      	ldr	r6, [r1, #8]
 8008a4e:	461f      	mov	r7, r3
 8008a50:	42be      	cmp	r6, r7
 8008a52:	680b      	ldr	r3, [r1, #0]
 8008a54:	4682      	mov	sl, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	4690      	mov	r8, r2
 8008a5a:	d82c      	bhi.n	8008ab6 <__ssputs_r+0x6e>
 8008a5c:	898a      	ldrh	r2, [r1, #12]
 8008a5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a62:	d026      	beq.n	8008ab2 <__ssputs_r+0x6a>
 8008a64:	6965      	ldr	r5, [r4, #20]
 8008a66:	6909      	ldr	r1, [r1, #16]
 8008a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a6c:	eba3 0901 	sub.w	r9, r3, r1
 8008a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a74:	1c7b      	adds	r3, r7, #1
 8008a76:	444b      	add	r3, r9
 8008a78:	106d      	asrs	r5, r5, #1
 8008a7a:	429d      	cmp	r5, r3
 8008a7c:	bf38      	it	cc
 8008a7e:	461d      	movcc	r5, r3
 8008a80:	0553      	lsls	r3, r2, #21
 8008a82:	d527      	bpl.n	8008ad4 <__ssputs_r+0x8c>
 8008a84:	4629      	mov	r1, r5
 8008a86:	f7ff fbd7 	bl	8008238 <_malloc_r>
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	b360      	cbz	r0, 8008ae8 <__ssputs_r+0xa0>
 8008a8e:	6921      	ldr	r1, [r4, #16]
 8008a90:	464a      	mov	r2, r9
 8008a92:	f7fe fd58 	bl	8007546 <memcpy>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	6126      	str	r6, [r4, #16]
 8008aa4:	6165      	str	r5, [r4, #20]
 8008aa6:	444e      	add	r6, r9
 8008aa8:	eba5 0509 	sub.w	r5, r5, r9
 8008aac:	6026      	str	r6, [r4, #0]
 8008aae:	60a5      	str	r5, [r4, #8]
 8008ab0:	463e      	mov	r6, r7
 8008ab2:	42be      	cmp	r6, r7
 8008ab4:	d900      	bls.n	8008ab8 <__ssputs_r+0x70>
 8008ab6:	463e      	mov	r6, r7
 8008ab8:	6820      	ldr	r0, [r4, #0]
 8008aba:	4632      	mov	r2, r6
 8008abc:	4641      	mov	r1, r8
 8008abe:	f000 f9c9 	bl	8008e54 <memmove>
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	1b9b      	subs	r3, r3, r6
 8008ac6:	60a3      	str	r3, [r4, #8]
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	4433      	add	r3, r6
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	2000      	movs	r0, #0
 8008ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	f000 fa2d 	bl	8008f34 <_realloc_r>
 8008ada:	4606      	mov	r6, r0
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1e0      	bne.n	8008aa2 <__ssputs_r+0x5a>
 8008ae0:	6921      	ldr	r1, [r4, #16]
 8008ae2:	4650      	mov	r0, sl
 8008ae4:	f7ff fb34 	bl	8008150 <_free_r>
 8008ae8:	230c      	movs	r3, #12
 8008aea:	f8ca 3000 	str.w	r3, [sl]
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	f04f 30ff 	mov.w	r0, #4294967295
 8008afa:	e7e9      	b.n	8008ad0 <__ssputs_r+0x88>

08008afc <_svfiprintf_r>:
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	4698      	mov	r8, r3
 8008b02:	898b      	ldrh	r3, [r1, #12]
 8008b04:	061b      	lsls	r3, r3, #24
 8008b06:	b09d      	sub	sp, #116	; 0x74
 8008b08:	4607      	mov	r7, r0
 8008b0a:	460d      	mov	r5, r1
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	d50e      	bpl.n	8008b2e <_svfiprintf_r+0x32>
 8008b10:	690b      	ldr	r3, [r1, #16]
 8008b12:	b963      	cbnz	r3, 8008b2e <_svfiprintf_r+0x32>
 8008b14:	2140      	movs	r1, #64	; 0x40
 8008b16:	f7ff fb8f 	bl	8008238 <_malloc_r>
 8008b1a:	6028      	str	r0, [r5, #0]
 8008b1c:	6128      	str	r0, [r5, #16]
 8008b1e:	b920      	cbnz	r0, 8008b2a <_svfiprintf_r+0x2e>
 8008b20:	230c      	movs	r3, #12
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	e0d0      	b.n	8008ccc <_svfiprintf_r+0x1d0>
 8008b2a:	2340      	movs	r3, #64	; 0x40
 8008b2c:	616b      	str	r3, [r5, #20]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	9309      	str	r3, [sp, #36]	; 0x24
 8008b32:	2320      	movs	r3, #32
 8008b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b3c:	2330      	movs	r3, #48	; 0x30
 8008b3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ce4 <_svfiprintf_r+0x1e8>
 8008b42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b46:	f04f 0901 	mov.w	r9, #1
 8008b4a:	4623      	mov	r3, r4
 8008b4c:	469a      	mov	sl, r3
 8008b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b52:	b10a      	cbz	r2, 8008b58 <_svfiprintf_r+0x5c>
 8008b54:	2a25      	cmp	r2, #37	; 0x25
 8008b56:	d1f9      	bne.n	8008b4c <_svfiprintf_r+0x50>
 8008b58:	ebba 0b04 	subs.w	fp, sl, r4
 8008b5c:	d00b      	beq.n	8008b76 <_svfiprintf_r+0x7a>
 8008b5e:	465b      	mov	r3, fp
 8008b60:	4622      	mov	r2, r4
 8008b62:	4629      	mov	r1, r5
 8008b64:	4638      	mov	r0, r7
 8008b66:	f7ff ff6f 	bl	8008a48 <__ssputs_r>
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	f000 80a9 	beq.w	8008cc2 <_svfiprintf_r+0x1c6>
 8008b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b72:	445a      	add	r2, fp
 8008b74:	9209      	str	r2, [sp, #36]	; 0x24
 8008b76:	f89a 3000 	ldrb.w	r3, [sl]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 80a1 	beq.w	8008cc2 <_svfiprintf_r+0x1c6>
 8008b80:	2300      	movs	r3, #0
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295
 8008b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b8a:	f10a 0a01 	add.w	sl, sl, #1
 8008b8e:	9304      	str	r3, [sp, #16]
 8008b90:	9307      	str	r3, [sp, #28]
 8008b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b96:	931a      	str	r3, [sp, #104]	; 0x68
 8008b98:	4654      	mov	r4, sl
 8008b9a:	2205      	movs	r2, #5
 8008b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba0:	4850      	ldr	r0, [pc, #320]	; (8008ce4 <_svfiprintf_r+0x1e8>)
 8008ba2:	f7f7 fb4d 	bl	8000240 <memchr>
 8008ba6:	9a04      	ldr	r2, [sp, #16]
 8008ba8:	b9d8      	cbnz	r0, 8008be2 <_svfiprintf_r+0xe6>
 8008baa:	06d0      	lsls	r0, r2, #27
 8008bac:	bf44      	itt	mi
 8008bae:	2320      	movmi	r3, #32
 8008bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb4:	0711      	lsls	r1, r2, #28
 8008bb6:	bf44      	itt	mi
 8008bb8:	232b      	movmi	r3, #43	; 0x2b
 8008bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc4:	d015      	beq.n	8008bf2 <_svfiprintf_r+0xf6>
 8008bc6:	9a07      	ldr	r2, [sp, #28]
 8008bc8:	4654      	mov	r4, sl
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f04f 0c0a 	mov.w	ip, #10
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd6:	3b30      	subs	r3, #48	; 0x30
 8008bd8:	2b09      	cmp	r3, #9
 8008bda:	d94d      	bls.n	8008c78 <_svfiprintf_r+0x17c>
 8008bdc:	b1b0      	cbz	r0, 8008c0c <_svfiprintf_r+0x110>
 8008bde:	9207      	str	r2, [sp, #28]
 8008be0:	e014      	b.n	8008c0c <_svfiprintf_r+0x110>
 8008be2:	eba0 0308 	sub.w	r3, r0, r8
 8008be6:	fa09 f303 	lsl.w	r3, r9, r3
 8008bea:	4313      	orrs	r3, r2
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	46a2      	mov	sl, r4
 8008bf0:	e7d2      	b.n	8008b98 <_svfiprintf_r+0x9c>
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	1d19      	adds	r1, r3, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	9103      	str	r1, [sp, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bfbb      	ittet	lt
 8008bfe:	425b      	neglt	r3, r3
 8008c00:	f042 0202 	orrlt.w	r2, r2, #2
 8008c04:	9307      	strge	r3, [sp, #28]
 8008c06:	9307      	strlt	r3, [sp, #28]
 8008c08:	bfb8      	it	lt
 8008c0a:	9204      	strlt	r2, [sp, #16]
 8008c0c:	7823      	ldrb	r3, [r4, #0]
 8008c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008c10:	d10c      	bne.n	8008c2c <_svfiprintf_r+0x130>
 8008c12:	7863      	ldrb	r3, [r4, #1]
 8008c14:	2b2a      	cmp	r3, #42	; 0x2a
 8008c16:	d134      	bne.n	8008c82 <_svfiprintf_r+0x186>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	1d1a      	adds	r2, r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	9203      	str	r2, [sp, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bfb8      	it	lt
 8008c24:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c28:	3402      	adds	r4, #2
 8008c2a:	9305      	str	r3, [sp, #20]
 8008c2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008cf4 <_svfiprintf_r+0x1f8>
 8008c30:	7821      	ldrb	r1, [r4, #0]
 8008c32:	2203      	movs	r2, #3
 8008c34:	4650      	mov	r0, sl
 8008c36:	f7f7 fb03 	bl	8000240 <memchr>
 8008c3a:	b138      	cbz	r0, 8008c4c <_svfiprintf_r+0x150>
 8008c3c:	9b04      	ldr	r3, [sp, #16]
 8008c3e:	eba0 000a 	sub.w	r0, r0, sl
 8008c42:	2240      	movs	r2, #64	; 0x40
 8008c44:	4082      	lsls	r2, r0
 8008c46:	4313      	orrs	r3, r2
 8008c48:	3401      	adds	r4, #1
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c50:	4825      	ldr	r0, [pc, #148]	; (8008ce8 <_svfiprintf_r+0x1ec>)
 8008c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c56:	2206      	movs	r2, #6
 8008c58:	f7f7 faf2 	bl	8000240 <memchr>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d038      	beq.n	8008cd2 <_svfiprintf_r+0x1d6>
 8008c60:	4b22      	ldr	r3, [pc, #136]	; (8008cec <_svfiprintf_r+0x1f0>)
 8008c62:	bb1b      	cbnz	r3, 8008cac <_svfiprintf_r+0x1b0>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	3307      	adds	r3, #7
 8008c68:	f023 0307 	bic.w	r3, r3, #7
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c72:	4433      	add	r3, r6
 8008c74:	9309      	str	r3, [sp, #36]	; 0x24
 8008c76:	e768      	b.n	8008b4a <_svfiprintf_r+0x4e>
 8008c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	2001      	movs	r0, #1
 8008c80:	e7a6      	b.n	8008bd0 <_svfiprintf_r+0xd4>
 8008c82:	2300      	movs	r3, #0
 8008c84:	3401      	adds	r4, #1
 8008c86:	9305      	str	r3, [sp, #20]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f04f 0c0a 	mov.w	ip, #10
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c94:	3a30      	subs	r2, #48	; 0x30
 8008c96:	2a09      	cmp	r2, #9
 8008c98:	d903      	bls.n	8008ca2 <_svfiprintf_r+0x1a6>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0c6      	beq.n	8008c2c <_svfiprintf_r+0x130>
 8008c9e:	9105      	str	r1, [sp, #20]
 8008ca0:	e7c4      	b.n	8008c2c <_svfiprintf_r+0x130>
 8008ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e7f0      	b.n	8008c8e <_svfiprintf_r+0x192>
 8008cac:	ab03      	add	r3, sp, #12
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <_svfiprintf_r+0x1f4>)
 8008cb4:	a904      	add	r1, sp, #16
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	f7fd fef6 	bl	8006aa8 <_printf_float>
 8008cbc:	1c42      	adds	r2, r0, #1
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	d1d6      	bne.n	8008c70 <_svfiprintf_r+0x174>
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	065b      	lsls	r3, r3, #25
 8008cc6:	f53f af2d 	bmi.w	8008b24 <_svfiprintf_r+0x28>
 8008cca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ccc:	b01d      	add	sp, #116	; 0x74
 8008cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd2:	ab03      	add	r3, sp, #12
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <_svfiprintf_r+0x1f4>)
 8008cda:	a904      	add	r1, sp, #16
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7fe f96b 	bl	8006fb8 <_printf_i>
 8008ce2:	e7eb      	b.n	8008cbc <_svfiprintf_r+0x1c0>
 8008ce4:	080099f4 	.word	0x080099f4
 8008ce8:	080099fe 	.word	0x080099fe
 8008cec:	08006aa9 	.word	0x08006aa9
 8008cf0:	08008a49 	.word	0x08008a49
 8008cf4:	080099fa 	.word	0x080099fa

08008cf8 <__sflush_r>:
 8008cf8:	898a      	ldrh	r2, [r1, #12]
 8008cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfe:	4605      	mov	r5, r0
 8008d00:	0710      	lsls	r0, r2, #28
 8008d02:	460c      	mov	r4, r1
 8008d04:	d458      	bmi.n	8008db8 <__sflush_r+0xc0>
 8008d06:	684b      	ldr	r3, [r1, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	dc05      	bgt.n	8008d18 <__sflush_r+0x20>
 8008d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	dc02      	bgt.n	8008d18 <__sflush_r+0x20>
 8008d12:	2000      	movs	r0, #0
 8008d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d1a:	2e00      	cmp	r6, #0
 8008d1c:	d0f9      	beq.n	8008d12 <__sflush_r+0x1a>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d24:	682f      	ldr	r7, [r5, #0]
 8008d26:	6a21      	ldr	r1, [r4, #32]
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	d032      	beq.n	8008d92 <__sflush_r+0x9a>
 8008d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	075a      	lsls	r2, r3, #29
 8008d32:	d505      	bpl.n	8008d40 <__sflush_r+0x48>
 8008d34:	6863      	ldr	r3, [r4, #4]
 8008d36:	1ac0      	subs	r0, r0, r3
 8008d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d3a:	b10b      	cbz	r3, 8008d40 <__sflush_r+0x48>
 8008d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d3e:	1ac0      	subs	r0, r0, r3
 8008d40:	2300      	movs	r3, #0
 8008d42:	4602      	mov	r2, r0
 8008d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d46:	6a21      	ldr	r1, [r4, #32]
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b0      	blx	r6
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	d106      	bne.n	8008d60 <__sflush_r+0x68>
 8008d52:	6829      	ldr	r1, [r5, #0]
 8008d54:	291d      	cmp	r1, #29
 8008d56:	d82b      	bhi.n	8008db0 <__sflush_r+0xb8>
 8008d58:	4a29      	ldr	r2, [pc, #164]	; (8008e00 <__sflush_r+0x108>)
 8008d5a:	410a      	asrs	r2, r1
 8008d5c:	07d6      	lsls	r6, r2, #31
 8008d5e:	d427      	bmi.n	8008db0 <__sflush_r+0xb8>
 8008d60:	2200      	movs	r2, #0
 8008d62:	6062      	str	r2, [r4, #4]
 8008d64:	04d9      	lsls	r1, r3, #19
 8008d66:	6922      	ldr	r2, [r4, #16]
 8008d68:	6022      	str	r2, [r4, #0]
 8008d6a:	d504      	bpl.n	8008d76 <__sflush_r+0x7e>
 8008d6c:	1c42      	adds	r2, r0, #1
 8008d6e:	d101      	bne.n	8008d74 <__sflush_r+0x7c>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b903      	cbnz	r3, 8008d76 <__sflush_r+0x7e>
 8008d74:	6560      	str	r0, [r4, #84]	; 0x54
 8008d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d78:	602f      	str	r7, [r5, #0]
 8008d7a:	2900      	cmp	r1, #0
 8008d7c:	d0c9      	beq.n	8008d12 <__sflush_r+0x1a>
 8008d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d82:	4299      	cmp	r1, r3
 8008d84:	d002      	beq.n	8008d8c <__sflush_r+0x94>
 8008d86:	4628      	mov	r0, r5
 8008d88:	f7ff f9e2 	bl	8008150 <_free_r>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8008d90:	e7c0      	b.n	8008d14 <__sflush_r+0x1c>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b0      	blx	r6
 8008d98:	1c41      	adds	r1, r0, #1
 8008d9a:	d1c8      	bne.n	8008d2e <__sflush_r+0x36>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0c5      	beq.n	8008d2e <__sflush_r+0x36>
 8008da2:	2b1d      	cmp	r3, #29
 8008da4:	d001      	beq.n	8008daa <__sflush_r+0xb2>
 8008da6:	2b16      	cmp	r3, #22
 8008da8:	d101      	bne.n	8008dae <__sflush_r+0xb6>
 8008daa:	602f      	str	r7, [r5, #0]
 8008dac:	e7b1      	b.n	8008d12 <__sflush_r+0x1a>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db4:	81a3      	strh	r3, [r4, #12]
 8008db6:	e7ad      	b.n	8008d14 <__sflush_r+0x1c>
 8008db8:	690f      	ldr	r7, [r1, #16]
 8008dba:	2f00      	cmp	r7, #0
 8008dbc:	d0a9      	beq.n	8008d12 <__sflush_r+0x1a>
 8008dbe:	0793      	lsls	r3, r2, #30
 8008dc0:	680e      	ldr	r6, [r1, #0]
 8008dc2:	bf08      	it	eq
 8008dc4:	694b      	ldreq	r3, [r1, #20]
 8008dc6:	600f      	str	r7, [r1, #0]
 8008dc8:	bf18      	it	ne
 8008dca:	2300      	movne	r3, #0
 8008dcc:	eba6 0807 	sub.w	r8, r6, r7
 8008dd0:	608b      	str	r3, [r1, #8]
 8008dd2:	f1b8 0f00 	cmp.w	r8, #0
 8008dd6:	dd9c      	ble.n	8008d12 <__sflush_r+0x1a>
 8008dd8:	6a21      	ldr	r1, [r4, #32]
 8008dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ddc:	4643      	mov	r3, r8
 8008dde:	463a      	mov	r2, r7
 8008de0:	4628      	mov	r0, r5
 8008de2:	47b0      	blx	r6
 8008de4:	2800      	cmp	r0, #0
 8008de6:	dc06      	bgt.n	8008df6 <__sflush_r+0xfe>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	e78e      	b.n	8008d14 <__sflush_r+0x1c>
 8008df6:	4407      	add	r7, r0
 8008df8:	eba8 0800 	sub.w	r8, r8, r0
 8008dfc:	e7e9      	b.n	8008dd2 <__sflush_r+0xda>
 8008dfe:	bf00      	nop
 8008e00:	dfbffffe 	.word	0xdfbffffe

08008e04 <_fflush_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	690b      	ldr	r3, [r1, #16]
 8008e08:	4605      	mov	r5, r0
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	b913      	cbnz	r3, 8008e14 <_fflush_r+0x10>
 8008e0e:	2500      	movs	r5, #0
 8008e10:	4628      	mov	r0, r5
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	b118      	cbz	r0, 8008e1e <_fflush_r+0x1a>
 8008e16:	6a03      	ldr	r3, [r0, #32]
 8008e18:	b90b      	cbnz	r3, 8008e1e <_fflush_r+0x1a>
 8008e1a:	f7fe fa7b 	bl	8007314 <__sinit>
 8008e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0f3      	beq.n	8008e0e <_fflush_r+0xa>
 8008e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e28:	07d0      	lsls	r0, r2, #31
 8008e2a:	d404      	bmi.n	8008e36 <_fflush_r+0x32>
 8008e2c:	0599      	lsls	r1, r3, #22
 8008e2e:	d402      	bmi.n	8008e36 <_fflush_r+0x32>
 8008e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e32:	f7fe fb86 	bl	8007542 <__retarget_lock_acquire_recursive>
 8008e36:	4628      	mov	r0, r5
 8008e38:	4621      	mov	r1, r4
 8008e3a:	f7ff ff5d 	bl	8008cf8 <__sflush_r>
 8008e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e40:	07da      	lsls	r2, r3, #31
 8008e42:	4605      	mov	r5, r0
 8008e44:	d4e4      	bmi.n	8008e10 <_fflush_r+0xc>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	059b      	lsls	r3, r3, #22
 8008e4a:	d4e1      	bmi.n	8008e10 <_fflush_r+0xc>
 8008e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e4e:	f7fe fb79 	bl	8007544 <__retarget_lock_release_recursive>
 8008e52:	e7dd      	b.n	8008e10 <_fflush_r+0xc>

08008e54 <memmove>:
 8008e54:	4288      	cmp	r0, r1
 8008e56:	b510      	push	{r4, lr}
 8008e58:	eb01 0402 	add.w	r4, r1, r2
 8008e5c:	d902      	bls.n	8008e64 <memmove+0x10>
 8008e5e:	4284      	cmp	r4, r0
 8008e60:	4623      	mov	r3, r4
 8008e62:	d807      	bhi.n	8008e74 <memmove+0x20>
 8008e64:	1e43      	subs	r3, r0, #1
 8008e66:	42a1      	cmp	r1, r4
 8008e68:	d008      	beq.n	8008e7c <memmove+0x28>
 8008e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e72:	e7f8      	b.n	8008e66 <memmove+0x12>
 8008e74:	4402      	add	r2, r0
 8008e76:	4601      	mov	r1, r0
 8008e78:	428a      	cmp	r2, r1
 8008e7a:	d100      	bne.n	8008e7e <memmove+0x2a>
 8008e7c:	bd10      	pop	{r4, pc}
 8008e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e86:	e7f7      	b.n	8008e78 <memmove+0x24>

08008e88 <_sbrk_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d06      	ldr	r5, [pc, #24]	; (8008ea4 <_sbrk_r+0x1c>)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	f7f8 fcd2 	bl	800183c <_sbrk>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_sbrk_r+0x1a>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_sbrk_r+0x1a>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	20004b38 	.word	0x20004b38

08008ea8 <__assert_func>:
 8008ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eaa:	4614      	mov	r4, r2
 8008eac:	461a      	mov	r2, r3
 8008eae:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <__assert_func+0x2c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	68d8      	ldr	r0, [r3, #12]
 8008eb6:	b14c      	cbz	r4, 8008ecc <__assert_func+0x24>
 8008eb8:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <__assert_func+0x30>)
 8008eba:	9100      	str	r1, [sp, #0]
 8008ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ec0:	4906      	ldr	r1, [pc, #24]	; (8008edc <__assert_func+0x34>)
 8008ec2:	462b      	mov	r3, r5
 8008ec4:	f000 f872 	bl	8008fac <fiprintf>
 8008ec8:	f000 f882 	bl	8008fd0 <abort>
 8008ecc:	4b04      	ldr	r3, [pc, #16]	; (8008ee0 <__assert_func+0x38>)
 8008ece:	461c      	mov	r4, r3
 8008ed0:	e7f3      	b.n	8008eba <__assert_func+0x12>
 8008ed2:	bf00      	nop
 8008ed4:	2000007c 	.word	0x2000007c
 8008ed8:	08009a0f 	.word	0x08009a0f
 8008edc:	08009a1c 	.word	0x08009a1c
 8008ee0:	08009a4a 	.word	0x08009a4a

08008ee4 <_calloc_r>:
 8008ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ee6:	fba1 2402 	umull	r2, r4, r1, r2
 8008eea:	b94c      	cbnz	r4, 8008f00 <_calloc_r+0x1c>
 8008eec:	4611      	mov	r1, r2
 8008eee:	9201      	str	r2, [sp, #4]
 8008ef0:	f7ff f9a2 	bl	8008238 <_malloc_r>
 8008ef4:	9a01      	ldr	r2, [sp, #4]
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	b930      	cbnz	r0, 8008f08 <_calloc_r+0x24>
 8008efa:	4628      	mov	r0, r5
 8008efc:	b003      	add	sp, #12
 8008efe:	bd30      	pop	{r4, r5, pc}
 8008f00:	220c      	movs	r2, #12
 8008f02:	6002      	str	r2, [r0, #0]
 8008f04:	2500      	movs	r5, #0
 8008f06:	e7f8      	b.n	8008efa <_calloc_r+0x16>
 8008f08:	4621      	mov	r1, r4
 8008f0a:	f7fe fa9c 	bl	8007446 <memset>
 8008f0e:	e7f4      	b.n	8008efa <_calloc_r+0x16>

08008f10 <__ascii_mbtowc>:
 8008f10:	b082      	sub	sp, #8
 8008f12:	b901      	cbnz	r1, 8008f16 <__ascii_mbtowc+0x6>
 8008f14:	a901      	add	r1, sp, #4
 8008f16:	b142      	cbz	r2, 8008f2a <__ascii_mbtowc+0x1a>
 8008f18:	b14b      	cbz	r3, 8008f2e <__ascii_mbtowc+0x1e>
 8008f1a:	7813      	ldrb	r3, [r2, #0]
 8008f1c:	600b      	str	r3, [r1, #0]
 8008f1e:	7812      	ldrb	r2, [r2, #0]
 8008f20:	1e10      	subs	r0, r2, #0
 8008f22:	bf18      	it	ne
 8008f24:	2001      	movne	r0, #1
 8008f26:	b002      	add	sp, #8
 8008f28:	4770      	bx	lr
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	e7fb      	b.n	8008f26 <__ascii_mbtowc+0x16>
 8008f2e:	f06f 0001 	mvn.w	r0, #1
 8008f32:	e7f8      	b.n	8008f26 <__ascii_mbtowc+0x16>

08008f34 <_realloc_r>:
 8008f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4614      	mov	r4, r2
 8008f3c:	460e      	mov	r6, r1
 8008f3e:	b921      	cbnz	r1, 8008f4a <_realloc_r+0x16>
 8008f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	4611      	mov	r1, r2
 8008f46:	f7ff b977 	b.w	8008238 <_malloc_r>
 8008f4a:	b92a      	cbnz	r2, 8008f58 <_realloc_r+0x24>
 8008f4c:	f7ff f900 	bl	8008150 <_free_r>
 8008f50:	4625      	mov	r5, r4
 8008f52:	4628      	mov	r0, r5
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	f000 f841 	bl	8008fde <_malloc_usable_size_r>
 8008f5c:	4284      	cmp	r4, r0
 8008f5e:	4607      	mov	r7, r0
 8008f60:	d802      	bhi.n	8008f68 <_realloc_r+0x34>
 8008f62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f66:	d812      	bhi.n	8008f8e <_realloc_r+0x5a>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7ff f964 	bl	8008238 <_malloc_r>
 8008f70:	4605      	mov	r5, r0
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d0ed      	beq.n	8008f52 <_realloc_r+0x1e>
 8008f76:	42bc      	cmp	r4, r7
 8008f78:	4622      	mov	r2, r4
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	bf28      	it	cs
 8008f7e:	463a      	movcs	r2, r7
 8008f80:	f7fe fae1 	bl	8007546 <memcpy>
 8008f84:	4631      	mov	r1, r6
 8008f86:	4640      	mov	r0, r8
 8008f88:	f7ff f8e2 	bl	8008150 <_free_r>
 8008f8c:	e7e1      	b.n	8008f52 <_realloc_r+0x1e>
 8008f8e:	4635      	mov	r5, r6
 8008f90:	e7df      	b.n	8008f52 <_realloc_r+0x1e>

08008f92 <__ascii_wctomb>:
 8008f92:	b149      	cbz	r1, 8008fa8 <__ascii_wctomb+0x16>
 8008f94:	2aff      	cmp	r2, #255	; 0xff
 8008f96:	bf85      	ittet	hi
 8008f98:	238a      	movhi	r3, #138	; 0x8a
 8008f9a:	6003      	strhi	r3, [r0, #0]
 8008f9c:	700a      	strbls	r2, [r1, #0]
 8008f9e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fa2:	bf98      	it	ls
 8008fa4:	2001      	movls	r0, #1
 8008fa6:	4770      	bx	lr
 8008fa8:	4608      	mov	r0, r1
 8008faa:	4770      	bx	lr

08008fac <fiprintf>:
 8008fac:	b40e      	push	{r1, r2, r3}
 8008fae:	b503      	push	{r0, r1, lr}
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	4805      	ldr	r0, [pc, #20]	; (8008fcc <fiprintf+0x20>)
 8008fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fba:	6800      	ldr	r0, [r0, #0]
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	f000 f83f 	bl	8009040 <_vfiprintf_r>
 8008fc2:	b002      	add	sp, #8
 8008fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc8:	b003      	add	sp, #12
 8008fca:	4770      	bx	lr
 8008fcc:	2000007c 	.word	0x2000007c

08008fd0 <abort>:
 8008fd0:	b508      	push	{r3, lr}
 8008fd2:	2006      	movs	r0, #6
 8008fd4:	f000 fa0c 	bl	80093f0 <raise>
 8008fd8:	2001      	movs	r0, #1
 8008fda:	f7f8 fbb7 	bl	800174c <_exit>

08008fde <_malloc_usable_size_r>:
 8008fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe2:	1f18      	subs	r0, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfbc      	itt	lt
 8008fe8:	580b      	ldrlt	r3, [r1, r0]
 8008fea:	18c0      	addlt	r0, r0, r3
 8008fec:	4770      	bx	lr

08008fee <__sfputc_r>:
 8008fee:	6893      	ldr	r3, [r2, #8]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	b410      	push	{r4}
 8008ff6:	6093      	str	r3, [r2, #8]
 8008ff8:	da08      	bge.n	800900c <__sfputc_r+0x1e>
 8008ffa:	6994      	ldr	r4, [r2, #24]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	db01      	blt.n	8009004 <__sfputc_r+0x16>
 8009000:	290a      	cmp	r1, #10
 8009002:	d103      	bne.n	800900c <__sfputc_r+0x1e>
 8009004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009008:	f000 b934 	b.w	8009274 <__swbuf_r>
 800900c:	6813      	ldr	r3, [r2, #0]
 800900e:	1c58      	adds	r0, r3, #1
 8009010:	6010      	str	r0, [r2, #0]
 8009012:	7019      	strb	r1, [r3, #0]
 8009014:	4608      	mov	r0, r1
 8009016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800901a:	4770      	bx	lr

0800901c <__sfputs_r>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	4614      	mov	r4, r2
 8009024:	18d5      	adds	r5, r2, r3
 8009026:	42ac      	cmp	r4, r5
 8009028:	d101      	bne.n	800902e <__sfputs_r+0x12>
 800902a:	2000      	movs	r0, #0
 800902c:	e007      	b.n	800903e <__sfputs_r+0x22>
 800902e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009032:	463a      	mov	r2, r7
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff ffda 	bl	8008fee <__sfputc_r>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d1f3      	bne.n	8009026 <__sfputs_r+0xa>
 800903e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009040 <_vfiprintf_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	460d      	mov	r5, r1
 8009046:	b09d      	sub	sp, #116	; 0x74
 8009048:	4614      	mov	r4, r2
 800904a:	4698      	mov	r8, r3
 800904c:	4606      	mov	r6, r0
 800904e:	b118      	cbz	r0, 8009058 <_vfiprintf_r+0x18>
 8009050:	6a03      	ldr	r3, [r0, #32]
 8009052:	b90b      	cbnz	r3, 8009058 <_vfiprintf_r+0x18>
 8009054:	f7fe f95e 	bl	8007314 <__sinit>
 8009058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	d405      	bmi.n	800906a <_vfiprintf_r+0x2a>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	059a      	lsls	r2, r3, #22
 8009062:	d402      	bmi.n	800906a <_vfiprintf_r+0x2a>
 8009064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009066:	f7fe fa6c 	bl	8007542 <__retarget_lock_acquire_recursive>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	071b      	lsls	r3, r3, #28
 800906e:	d501      	bpl.n	8009074 <_vfiprintf_r+0x34>
 8009070:	692b      	ldr	r3, [r5, #16]
 8009072:	b99b      	cbnz	r3, 800909c <_vfiprintf_r+0x5c>
 8009074:	4629      	mov	r1, r5
 8009076:	4630      	mov	r0, r6
 8009078:	f000 f93a 	bl	80092f0 <__swsetup_r>
 800907c:	b170      	cbz	r0, 800909c <_vfiprintf_r+0x5c>
 800907e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009080:	07dc      	lsls	r4, r3, #31
 8009082:	d504      	bpl.n	800908e <_vfiprintf_r+0x4e>
 8009084:	f04f 30ff 	mov.w	r0, #4294967295
 8009088:	b01d      	add	sp, #116	; 0x74
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	0598      	lsls	r0, r3, #22
 8009092:	d4f7      	bmi.n	8009084 <_vfiprintf_r+0x44>
 8009094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009096:	f7fe fa55 	bl	8007544 <__retarget_lock_release_recursive>
 800909a:	e7f3      	b.n	8009084 <_vfiprintf_r+0x44>
 800909c:	2300      	movs	r3, #0
 800909e:	9309      	str	r3, [sp, #36]	; 0x24
 80090a0:	2320      	movs	r3, #32
 80090a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090aa:	2330      	movs	r3, #48	; 0x30
 80090ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009260 <_vfiprintf_r+0x220>
 80090b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090b4:	f04f 0901 	mov.w	r9, #1
 80090b8:	4623      	mov	r3, r4
 80090ba:	469a      	mov	sl, r3
 80090bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c0:	b10a      	cbz	r2, 80090c6 <_vfiprintf_r+0x86>
 80090c2:	2a25      	cmp	r2, #37	; 0x25
 80090c4:	d1f9      	bne.n	80090ba <_vfiprintf_r+0x7a>
 80090c6:	ebba 0b04 	subs.w	fp, sl, r4
 80090ca:	d00b      	beq.n	80090e4 <_vfiprintf_r+0xa4>
 80090cc:	465b      	mov	r3, fp
 80090ce:	4622      	mov	r2, r4
 80090d0:	4629      	mov	r1, r5
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff ffa2 	bl	800901c <__sfputs_r>
 80090d8:	3001      	adds	r0, #1
 80090da:	f000 80a9 	beq.w	8009230 <_vfiprintf_r+0x1f0>
 80090de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090e0:	445a      	add	r2, fp
 80090e2:	9209      	str	r2, [sp, #36]	; 0x24
 80090e4:	f89a 3000 	ldrb.w	r3, [sl]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 80a1 	beq.w	8009230 <_vfiprintf_r+0x1f0>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f8:	f10a 0a01 	add.w	sl, sl, #1
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	9307      	str	r3, [sp, #28]
 8009100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009104:	931a      	str	r3, [sp, #104]	; 0x68
 8009106:	4654      	mov	r4, sl
 8009108:	2205      	movs	r2, #5
 800910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910e:	4854      	ldr	r0, [pc, #336]	; (8009260 <_vfiprintf_r+0x220>)
 8009110:	f7f7 f896 	bl	8000240 <memchr>
 8009114:	9a04      	ldr	r2, [sp, #16]
 8009116:	b9d8      	cbnz	r0, 8009150 <_vfiprintf_r+0x110>
 8009118:	06d1      	lsls	r1, r2, #27
 800911a:	bf44      	itt	mi
 800911c:	2320      	movmi	r3, #32
 800911e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009122:	0713      	lsls	r3, r2, #28
 8009124:	bf44      	itt	mi
 8009126:	232b      	movmi	r3, #43	; 0x2b
 8009128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800912c:	f89a 3000 	ldrb.w	r3, [sl]
 8009130:	2b2a      	cmp	r3, #42	; 0x2a
 8009132:	d015      	beq.n	8009160 <_vfiprintf_r+0x120>
 8009134:	9a07      	ldr	r2, [sp, #28]
 8009136:	4654      	mov	r4, sl
 8009138:	2000      	movs	r0, #0
 800913a:	f04f 0c0a 	mov.w	ip, #10
 800913e:	4621      	mov	r1, r4
 8009140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009144:	3b30      	subs	r3, #48	; 0x30
 8009146:	2b09      	cmp	r3, #9
 8009148:	d94d      	bls.n	80091e6 <_vfiprintf_r+0x1a6>
 800914a:	b1b0      	cbz	r0, 800917a <_vfiprintf_r+0x13a>
 800914c:	9207      	str	r2, [sp, #28]
 800914e:	e014      	b.n	800917a <_vfiprintf_r+0x13a>
 8009150:	eba0 0308 	sub.w	r3, r0, r8
 8009154:	fa09 f303 	lsl.w	r3, r9, r3
 8009158:	4313      	orrs	r3, r2
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	46a2      	mov	sl, r4
 800915e:	e7d2      	b.n	8009106 <_vfiprintf_r+0xc6>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	1d19      	adds	r1, r3, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	9103      	str	r1, [sp, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	bfbb      	ittet	lt
 800916c:	425b      	neglt	r3, r3
 800916e:	f042 0202 	orrlt.w	r2, r2, #2
 8009172:	9307      	strge	r3, [sp, #28]
 8009174:	9307      	strlt	r3, [sp, #28]
 8009176:	bfb8      	it	lt
 8009178:	9204      	strlt	r2, [sp, #16]
 800917a:	7823      	ldrb	r3, [r4, #0]
 800917c:	2b2e      	cmp	r3, #46	; 0x2e
 800917e:	d10c      	bne.n	800919a <_vfiprintf_r+0x15a>
 8009180:	7863      	ldrb	r3, [r4, #1]
 8009182:	2b2a      	cmp	r3, #42	; 0x2a
 8009184:	d134      	bne.n	80091f0 <_vfiprintf_r+0x1b0>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	1d1a      	adds	r2, r3, #4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	9203      	str	r2, [sp, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	bfb8      	it	lt
 8009192:	f04f 33ff 	movlt.w	r3, #4294967295
 8009196:	3402      	adds	r4, #2
 8009198:	9305      	str	r3, [sp, #20]
 800919a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009270 <_vfiprintf_r+0x230>
 800919e:	7821      	ldrb	r1, [r4, #0]
 80091a0:	2203      	movs	r2, #3
 80091a2:	4650      	mov	r0, sl
 80091a4:	f7f7 f84c 	bl	8000240 <memchr>
 80091a8:	b138      	cbz	r0, 80091ba <_vfiprintf_r+0x17a>
 80091aa:	9b04      	ldr	r3, [sp, #16]
 80091ac:	eba0 000a 	sub.w	r0, r0, sl
 80091b0:	2240      	movs	r2, #64	; 0x40
 80091b2:	4082      	lsls	r2, r0
 80091b4:	4313      	orrs	r3, r2
 80091b6:	3401      	adds	r4, #1
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091be:	4829      	ldr	r0, [pc, #164]	; (8009264 <_vfiprintf_r+0x224>)
 80091c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091c4:	2206      	movs	r2, #6
 80091c6:	f7f7 f83b 	bl	8000240 <memchr>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d03f      	beq.n	800924e <_vfiprintf_r+0x20e>
 80091ce:	4b26      	ldr	r3, [pc, #152]	; (8009268 <_vfiprintf_r+0x228>)
 80091d0:	bb1b      	cbnz	r3, 800921a <_vfiprintf_r+0x1da>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	3307      	adds	r3, #7
 80091d6:	f023 0307 	bic.w	r3, r3, #7
 80091da:	3308      	adds	r3, #8
 80091dc:	9303      	str	r3, [sp, #12]
 80091de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e0:	443b      	add	r3, r7
 80091e2:	9309      	str	r3, [sp, #36]	; 0x24
 80091e4:	e768      	b.n	80090b8 <_vfiprintf_r+0x78>
 80091e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ea:	460c      	mov	r4, r1
 80091ec:	2001      	movs	r0, #1
 80091ee:	e7a6      	b.n	800913e <_vfiprintf_r+0xfe>
 80091f0:	2300      	movs	r3, #0
 80091f2:	3401      	adds	r4, #1
 80091f4:	9305      	str	r3, [sp, #20]
 80091f6:	4619      	mov	r1, r3
 80091f8:	f04f 0c0a 	mov.w	ip, #10
 80091fc:	4620      	mov	r0, r4
 80091fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009202:	3a30      	subs	r2, #48	; 0x30
 8009204:	2a09      	cmp	r2, #9
 8009206:	d903      	bls.n	8009210 <_vfiprintf_r+0x1d0>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0c6      	beq.n	800919a <_vfiprintf_r+0x15a>
 800920c:	9105      	str	r1, [sp, #20]
 800920e:	e7c4      	b.n	800919a <_vfiprintf_r+0x15a>
 8009210:	fb0c 2101 	mla	r1, ip, r1, r2
 8009214:	4604      	mov	r4, r0
 8009216:	2301      	movs	r3, #1
 8009218:	e7f0      	b.n	80091fc <_vfiprintf_r+0x1bc>
 800921a:	ab03      	add	r3, sp, #12
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	462a      	mov	r2, r5
 8009220:	4b12      	ldr	r3, [pc, #72]	; (800926c <_vfiprintf_r+0x22c>)
 8009222:	a904      	add	r1, sp, #16
 8009224:	4630      	mov	r0, r6
 8009226:	f7fd fc3f 	bl	8006aa8 <_printf_float>
 800922a:	4607      	mov	r7, r0
 800922c:	1c78      	adds	r0, r7, #1
 800922e:	d1d6      	bne.n	80091de <_vfiprintf_r+0x19e>
 8009230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009232:	07d9      	lsls	r1, r3, #31
 8009234:	d405      	bmi.n	8009242 <_vfiprintf_r+0x202>
 8009236:	89ab      	ldrh	r3, [r5, #12]
 8009238:	059a      	lsls	r2, r3, #22
 800923a:	d402      	bmi.n	8009242 <_vfiprintf_r+0x202>
 800923c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800923e:	f7fe f981 	bl	8007544 <__retarget_lock_release_recursive>
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	065b      	lsls	r3, r3, #25
 8009246:	f53f af1d 	bmi.w	8009084 <_vfiprintf_r+0x44>
 800924a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800924c:	e71c      	b.n	8009088 <_vfiprintf_r+0x48>
 800924e:	ab03      	add	r3, sp, #12
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	462a      	mov	r2, r5
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <_vfiprintf_r+0x22c>)
 8009256:	a904      	add	r1, sp, #16
 8009258:	4630      	mov	r0, r6
 800925a:	f7fd fead 	bl	8006fb8 <_printf_i>
 800925e:	e7e4      	b.n	800922a <_vfiprintf_r+0x1ea>
 8009260:	080099f4 	.word	0x080099f4
 8009264:	080099fe 	.word	0x080099fe
 8009268:	08006aa9 	.word	0x08006aa9
 800926c:	0800901d 	.word	0x0800901d
 8009270:	080099fa 	.word	0x080099fa

08009274 <__swbuf_r>:
 8009274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009276:	460e      	mov	r6, r1
 8009278:	4614      	mov	r4, r2
 800927a:	4605      	mov	r5, r0
 800927c:	b118      	cbz	r0, 8009286 <__swbuf_r+0x12>
 800927e:	6a03      	ldr	r3, [r0, #32]
 8009280:	b90b      	cbnz	r3, 8009286 <__swbuf_r+0x12>
 8009282:	f7fe f847 	bl	8007314 <__sinit>
 8009286:	69a3      	ldr	r3, [r4, #24]
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	071a      	lsls	r2, r3, #28
 800928e:	d525      	bpl.n	80092dc <__swbuf_r+0x68>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	b31b      	cbz	r3, 80092dc <__swbuf_r+0x68>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	6922      	ldr	r2, [r4, #16]
 8009298:	1a98      	subs	r0, r3, r2
 800929a:	6963      	ldr	r3, [r4, #20]
 800929c:	b2f6      	uxtb	r6, r6
 800929e:	4283      	cmp	r3, r0
 80092a0:	4637      	mov	r7, r6
 80092a2:	dc04      	bgt.n	80092ae <__swbuf_r+0x3a>
 80092a4:	4621      	mov	r1, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7ff fdac 	bl	8008e04 <_fflush_r>
 80092ac:	b9e0      	cbnz	r0, 80092e8 <__swbuf_r+0x74>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	60a3      	str	r3, [r4, #8]
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	701e      	strb	r6, [r3, #0]
 80092bc:	6962      	ldr	r2, [r4, #20]
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d004      	beq.n	80092ce <__swbuf_r+0x5a>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	07db      	lsls	r3, r3, #31
 80092c8:	d506      	bpl.n	80092d8 <__swbuf_r+0x64>
 80092ca:	2e0a      	cmp	r6, #10
 80092cc:	d104      	bne.n	80092d8 <__swbuf_r+0x64>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f7ff fd97 	bl	8008e04 <_fflush_r>
 80092d6:	b938      	cbnz	r0, 80092e8 <__swbuf_r+0x74>
 80092d8:	4638      	mov	r0, r7
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	4621      	mov	r1, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 f806 	bl	80092f0 <__swsetup_r>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d0d5      	beq.n	8009294 <__swbuf_r+0x20>
 80092e8:	f04f 37ff 	mov.w	r7, #4294967295
 80092ec:	e7f4      	b.n	80092d8 <__swbuf_r+0x64>
	...

080092f0 <__swsetup_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4b2a      	ldr	r3, [pc, #168]	; (800939c <__swsetup_r+0xac>)
 80092f4:	4605      	mov	r5, r0
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	460c      	mov	r4, r1
 80092fa:	b118      	cbz	r0, 8009304 <__swsetup_r+0x14>
 80092fc:	6a03      	ldr	r3, [r0, #32]
 80092fe:	b90b      	cbnz	r3, 8009304 <__swsetup_r+0x14>
 8009300:	f7fe f808 	bl	8007314 <__sinit>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800930a:	0718      	lsls	r0, r3, #28
 800930c:	d422      	bmi.n	8009354 <__swsetup_r+0x64>
 800930e:	06d9      	lsls	r1, r3, #27
 8009310:	d407      	bmi.n	8009322 <__swsetup_r+0x32>
 8009312:	2309      	movs	r3, #9
 8009314:	602b      	str	r3, [r5, #0]
 8009316:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	e034      	b.n	800938c <__swsetup_r+0x9c>
 8009322:	0758      	lsls	r0, r3, #29
 8009324:	d512      	bpl.n	800934c <__swsetup_r+0x5c>
 8009326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009328:	b141      	cbz	r1, 800933c <__swsetup_r+0x4c>
 800932a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800932e:	4299      	cmp	r1, r3
 8009330:	d002      	beq.n	8009338 <__swsetup_r+0x48>
 8009332:	4628      	mov	r0, r5
 8009334:	f7fe ff0c 	bl	8008150 <_free_r>
 8009338:	2300      	movs	r3, #0
 800933a:	6363      	str	r3, [r4, #52]	; 0x34
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	2300      	movs	r3, #0
 8009346:	6063      	str	r3, [r4, #4]
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f043 0308 	orr.w	r3, r3, #8
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	b94b      	cbnz	r3, 800936c <__swsetup_r+0x7c>
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800935e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009362:	d003      	beq.n	800936c <__swsetup_r+0x7c>
 8009364:	4621      	mov	r1, r4
 8009366:	4628      	mov	r0, r5
 8009368:	f000 f884 	bl	8009474 <__smakebuf_r>
 800936c:	89a0      	ldrh	r0, [r4, #12]
 800936e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009372:	f010 0301 	ands.w	r3, r0, #1
 8009376:	d00a      	beq.n	800938e <__swsetup_r+0x9e>
 8009378:	2300      	movs	r3, #0
 800937a:	60a3      	str	r3, [r4, #8]
 800937c:	6963      	ldr	r3, [r4, #20]
 800937e:	425b      	negs	r3, r3
 8009380:	61a3      	str	r3, [r4, #24]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	b943      	cbnz	r3, 8009398 <__swsetup_r+0xa8>
 8009386:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800938a:	d1c4      	bne.n	8009316 <__swsetup_r+0x26>
 800938c:	bd38      	pop	{r3, r4, r5, pc}
 800938e:	0781      	lsls	r1, r0, #30
 8009390:	bf58      	it	pl
 8009392:	6963      	ldrpl	r3, [r4, #20]
 8009394:	60a3      	str	r3, [r4, #8]
 8009396:	e7f4      	b.n	8009382 <__swsetup_r+0x92>
 8009398:	2000      	movs	r0, #0
 800939a:	e7f7      	b.n	800938c <__swsetup_r+0x9c>
 800939c:	2000007c 	.word	0x2000007c

080093a0 <_raise_r>:
 80093a0:	291f      	cmp	r1, #31
 80093a2:	b538      	push	{r3, r4, r5, lr}
 80093a4:	4604      	mov	r4, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	d904      	bls.n	80093b4 <_raise_r+0x14>
 80093aa:	2316      	movs	r3, #22
 80093ac:	6003      	str	r3, [r0, #0]
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80093b6:	b112      	cbz	r2, 80093be <_raise_r+0x1e>
 80093b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093bc:	b94b      	cbnz	r3, 80093d2 <_raise_r+0x32>
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 f830 	bl	8009424 <_getpid_r>
 80093c4:	462a      	mov	r2, r5
 80093c6:	4601      	mov	r1, r0
 80093c8:	4620      	mov	r0, r4
 80093ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ce:	f000 b817 	b.w	8009400 <_kill_r>
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d00a      	beq.n	80093ec <_raise_r+0x4c>
 80093d6:	1c59      	adds	r1, r3, #1
 80093d8:	d103      	bne.n	80093e2 <_raise_r+0x42>
 80093da:	2316      	movs	r3, #22
 80093dc:	6003      	str	r3, [r0, #0]
 80093de:	2001      	movs	r0, #1
 80093e0:	e7e7      	b.n	80093b2 <_raise_r+0x12>
 80093e2:	2400      	movs	r4, #0
 80093e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093e8:	4628      	mov	r0, r5
 80093ea:	4798      	blx	r3
 80093ec:	2000      	movs	r0, #0
 80093ee:	e7e0      	b.n	80093b2 <_raise_r+0x12>

080093f0 <raise>:
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <raise+0xc>)
 80093f2:	4601      	mov	r1, r0
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f7ff bfd3 	b.w	80093a0 <_raise_r>
 80093fa:	bf00      	nop
 80093fc:	2000007c 	.word	0x2000007c

08009400 <_kill_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_kill_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7f8 f98d 	bl	800172c <_kill>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_kill_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_kill_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	20004b38 	.word	0x20004b38

08009424 <_getpid_r>:
 8009424:	f7f8 b97a 	b.w	800171c <_getpid>

08009428 <__swhatbuf_r>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	460c      	mov	r4, r1
 800942c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009430:	2900      	cmp	r1, #0
 8009432:	b096      	sub	sp, #88	; 0x58
 8009434:	4615      	mov	r5, r2
 8009436:	461e      	mov	r6, r3
 8009438:	da0d      	bge.n	8009456 <__swhatbuf_r+0x2e>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009440:	f04f 0100 	mov.w	r1, #0
 8009444:	bf0c      	ite	eq
 8009446:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800944a:	2340      	movne	r3, #64	; 0x40
 800944c:	2000      	movs	r0, #0
 800944e:	6031      	str	r1, [r6, #0]
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	b016      	add	sp, #88	; 0x58
 8009454:	bd70      	pop	{r4, r5, r6, pc}
 8009456:	466a      	mov	r2, sp
 8009458:	f000 f848 	bl	80094ec <_fstat_r>
 800945c:	2800      	cmp	r0, #0
 800945e:	dbec      	blt.n	800943a <__swhatbuf_r+0x12>
 8009460:	9901      	ldr	r1, [sp, #4]
 8009462:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009466:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800946a:	4259      	negs	r1, r3
 800946c:	4159      	adcs	r1, r3
 800946e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009472:	e7eb      	b.n	800944c <__swhatbuf_r+0x24>

08009474 <__smakebuf_r>:
 8009474:	898b      	ldrh	r3, [r1, #12]
 8009476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009478:	079d      	lsls	r5, r3, #30
 800947a:	4606      	mov	r6, r0
 800947c:	460c      	mov	r4, r1
 800947e:	d507      	bpl.n	8009490 <__smakebuf_r+0x1c>
 8009480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	6123      	str	r3, [r4, #16]
 8009488:	2301      	movs	r3, #1
 800948a:	6163      	str	r3, [r4, #20]
 800948c:	b002      	add	sp, #8
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	ab01      	add	r3, sp, #4
 8009492:	466a      	mov	r2, sp
 8009494:	f7ff ffc8 	bl	8009428 <__swhatbuf_r>
 8009498:	9900      	ldr	r1, [sp, #0]
 800949a:	4605      	mov	r5, r0
 800949c:	4630      	mov	r0, r6
 800949e:	f7fe fecb 	bl	8008238 <_malloc_r>
 80094a2:	b948      	cbnz	r0, 80094b8 <__smakebuf_r+0x44>
 80094a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a8:	059a      	lsls	r2, r3, #22
 80094aa:	d4ef      	bmi.n	800948c <__smakebuf_r+0x18>
 80094ac:	f023 0303 	bic.w	r3, r3, #3
 80094b0:	f043 0302 	orr.w	r3, r3, #2
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	e7e3      	b.n	8009480 <__smakebuf_r+0xc>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	6020      	str	r0, [r4, #0]
 80094bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	9b00      	ldr	r3, [sp, #0]
 80094c4:	6163      	str	r3, [r4, #20]
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	6120      	str	r0, [r4, #16]
 80094ca:	b15b      	cbz	r3, 80094e4 <__smakebuf_r+0x70>
 80094cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d0:	4630      	mov	r0, r6
 80094d2:	f000 f81d 	bl	8009510 <_isatty_r>
 80094d6:	b128      	cbz	r0, 80094e4 <__smakebuf_r+0x70>
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f023 0303 	bic.w	r3, r3, #3
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	431d      	orrs	r5, r3
 80094e8:	81a5      	strh	r5, [r4, #12]
 80094ea:	e7cf      	b.n	800948c <__smakebuf_r+0x18>

080094ec <_fstat_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	; (800950c <_fstat_r+0x20>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	f7f8 f976 	bl	80017ea <_fstat>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d102      	bne.n	8009508 <_fstat_r+0x1c>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	b103      	cbz	r3, 8009508 <_fstat_r+0x1c>
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	bf00      	nop
 800950c:	20004b38 	.word	0x20004b38

08009510 <_isatty_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d06      	ldr	r5, [pc, #24]	; (800952c <_isatty_r+0x1c>)
 8009514:	2300      	movs	r3, #0
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	f7f8 f975 	bl	800180a <_isatty>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_isatty_r+0x1a>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	b103      	cbz	r3, 800952a <_isatty_r+0x1a>
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	20004b38 	.word	0x20004b38

08009530 <_init>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	bf00      	nop
 8009534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009536:	bc08      	pop	{r3}
 8009538:	469e      	mov	lr, r3
 800953a:	4770      	bx	lr

0800953c <_fini>:
 800953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953e:	bf00      	nop
 8009540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009542:	bc08      	pop	{r3}
 8009544:	469e      	mov	lr, r3
 8009546:	4770      	bx	lr
