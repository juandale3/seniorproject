
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ea0  080087b0  080087b0  000187b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a650  0800a650  00020320  2**0
                  CONTENTS
  4 .ARM          00000008  0800a650  0800a650  0001a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a658  0800a658  00020320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a658  0800a658  0001a658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a65c  0800a65c  0001a65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  0800a840  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  0800a8e0  00020280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000868  20000320  0800a980  00020320  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000b88  0800a980  00020b88  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002034e  2**0
                  CONTENTS, READONLY
 15 .debug_info   00015b7c  00000000  00000000  00020391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003027  00000000  00000000  00035f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001048  00000000  00000000  00038f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c6c  00000000  00000000  00039f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b054  00000000  00000000  0003abec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00015435  00000000  00000000  00065c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001035c5  00000000  00000000  0007b075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000054a0  00000000  00000000  0017e63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000092  00000000  00000000  00183adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000320 	.word	0x20000320
 800021c:	00000000 	.word	0x00000000
 8000220:	08008798 	.word	0x08008798

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000324 	.word	0x20000324
 800023c:	08008798 	.word	0x08008798

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_9;
 8000602:	2309      	movs	r3, #9
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 fc67 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f000 fd88 	bl	8001134 <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <readFlow>:
float readFlow(float voltage)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	ed87 0a01 	vstr	s0, [r7, #4]
	//	instFlow = roundf(instFlow);*/
	//	return instFlow;
//	instFlow = (voltage - 0.662)/  0.0132;
//	return instFlow;

	instFlow = (voltage/voltageDivider - (float)referenceVolt)/scalingFactor;
 800063a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000678 <readFlow+0x48>
 800063e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000646:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800067c <readFlow+0x4c>
 800064a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000652:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000680 <readFlow+0x50>
 8000656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <readFlow+0x54>)
 800065c:	edc3 7a00 	vstr	s15, [r3]
	return instFlow;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <readFlow+0x54>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	ee07 3a90 	vmov	s15, r3
}
 8000668:	eeb0 0a67 	vmov.f32	s0, s15
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	3f298953 	.word	0x3f298953
 800067c:	00000001 	.word	0x00000001
 8000680:	3ca3d70a 	.word	0x3ca3d70a
 8000684:	2000033c 	.word	0x2000033c

08000688 <setFlowRate>:

float setFlowRate(float inputVoltage, uint8_t targetFlowRate){
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000692:	4603      	mov	r3, r0
 8000694:	70fb      	strb	r3, [r7, #3]

	readFlow(inputVoltage);
 8000696:	ed97 0a01 	vldr	s0, [r7, #4]
 800069a:	f7ff ffc9 	bl	8000630 <readFlow>
	unRestrictedFlow = instFlow / (1.0 - flowRestriction);
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <setFlowRate+0xa0>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <setFlowRate+0xa4>)
 80006aa:	edd3 7a00 	vldr	s15, [r3]
 80006ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80006b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80006ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <setFlowRate+0xa8>)
 80006c4:	edc3 7a00 	vstr	s15, [r3]
	flowRestriction = (float)targetFlowRate / unRestrictedFlow;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <setFlowRate+0xa8>)
 80006d4:	ed93 7a00 	vldr	s14, [r3]
 80006d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <setFlowRate+0xa4>)
 80006de:	edc3 7a00 	vstr	s15, [r3]

	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
 80006e2:	2305      	movs	r3, #5
 80006e4:	461a      	mov	r2, r3
 80006e6:	2301      	movs	r3, #1
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <setFlowRate+0xa4>)
 80006f4:	edd3 7a00 	vldr	s15, [r3]
 80006f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006fc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000734 <setFlowRate+0xac>
 8000700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000708:	edc7 7a03 	vstr	s15, [r7, #12]

	return outputVoltage / amp;
 800070c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000738 <setFlowRate+0xb0>
 8000710:	edd7 7a03 	vldr	s15, [r7, #12]
 8000714:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000718:	eef0 7a66 	vmov.f32	s15, s13

}
 800071c:	eeb0 0a67 	vmov.f32	s0, s15
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000033c 	.word	0x2000033c
 800072c:	20000344 	.word	0x20000344
 8000730:	20000340 	.word	0x20000340
 8000734:	00000001 	.word	0x00000001
 8000738:	403d7d7d 	.word	0x403d7d7d

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0a4      	sub	sp, #144	; 0x90
 8000740:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f001 f972 	bl	8001a2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 fa89 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 fc31 	bl	8000fb0 <MX_GPIO_Init>
  MX_ETH_Init();
 800074e:	f000 fb83 	bl	8000e58 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000752:	f000 fbcf 	bl	8000ef4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000756:	f000 fbfd 	bl	8000f54 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800075a:	f000 faf1 	bl	8000d40 <MX_ADC1_Init>
  MX_DAC_Init();
 800075e:	f000 fb51 	bl	8000e04 <MX_DAC_Init>
  	  float flowRate;
  	  char msg[100];
  };

  //dacSet(&hdac, DAC_CHANNEL_1, 2.5);
  float volts = 0;
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	67bb      	str	r3, [r7, #120]	; 0x78
  float FlowRate = 0;
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	677b      	str	r3, [r7, #116]	; 0x74
  float vacuumScale = 0;
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	673b      	str	r3, [r7, #112]	; 0x70
      ULTIMATE_MEASURE_TEST,
      IDLE,
      FAIL_STATE,
      STOP
  };
  enum State eNextState = START;
 8000774:	2300      	movs	r3, #0
 8000776:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

  int stateDelay = 1000;
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	66fb      	str	r3, [r7, #108]	; 0x6c
  flowControllerADC(&hadc1);
 8000780:	48cb      	ldr	r0, [pc, #812]	; (8000ab0 <main+0x374>)
 8000782:	f7ff ff33 	bl	80005ec <flowControllerADC>
	  vacuumScale = readVacuum(volts);
	  sprintf(msg, "Vacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r\n", volts, vacuumScale);
	  printMsg(msg, &huart3);
	  HAL_Delay(1000);
	*/
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2101      	movs	r1, #1
 800078a:	48ca      	ldr	r0, [pc, #808]	; (8000ab4 <main+0x378>)
 800078c:	f002 fc9c 	bl	80030c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2102      	movs	r1, #2
 8000794:	48c7      	ldr	r0, [pc, #796]	; (8000ab4 <main+0x378>)
 8000796:	f002 fc97 	bl	80030c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2104      	movs	r1, #4
 800079e:	48c5      	ldr	r0, [pc, #788]	; (8000ab4 <main+0x378>)
 80007a0:	f002 fc92 	bl	80030c8 <HAL_GPIO_WritePin>
	  dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(volts, 50));
	  HAL_Delay(1000);
	  */

	  //STATE MACHINE STARTS HERE
	bool error = false;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	while(eNextState != STOP) {
 80007aa:	e242      	b.n	8000c32 <main+0x4f6>
		int pump = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	667b      	str	r3, [r7, #100]	; 0x64
		switch(eNextState) {
 80007b0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	f200 8232 	bhi.w	8000c1e <main+0x4e2>
 80007ba:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <main+0x84>)
 80007bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c0:	080007e5 	.word	0x080007e5
 80007c4:	08000841 	.word	0x08000841
 80007c8:	08000903 	.word	0x08000903
 80007cc:	0800096b 	.word	0x0800096b
 80007d0:	08000a47 	.word	0x08000a47
 80007d4:	08000af5 	.word	0x08000af5
 80007d8:	08000c33 	.word	0x08000c33
 80007dc:	08000ba3 	.word	0x08000ba3
 80007e0:	08000c0b 	.word	0x08000c0b
			case START:
				//print start message
				pump++;
 80007e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007e6:	3301      	adds	r3, #1
 80007e8:	667b      	str	r3, [r7, #100]	; 0x64
				HAL_Delay(stateDelay);
 80007ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 f979 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2102      	movs	r1, #2
 80007f6:	48af      	ldr	r0, [pc, #700]	; (8000ab4 <main+0x378>)
 80007f8:	f002 fc66 	bl	80030c8 <HAL_GPIO_WritePin>

				sprintf(msg,"Starting State Machine on Pump %d\r\n\n", pump);
 80007fc:	463b      	mov	r3, r7
 80007fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000800:	49ad      	ldr	r1, [pc, #692]	; (8000ab8 <main+0x37c>)
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fbfc 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 8000808:	463b      	mov	r3, r7
 800080a:	49ac      	ldr	r1, [pc, #688]	; (8000abc <main+0x380>)
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fd09 	bl	8001224 <printMsg>
				//send starting status message

				HAL_Delay(stateDelay);
 8000812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f965 	bl	8001ae4 <HAL_Delay>

				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	48a5      	ldr	r0, [pc, #660]	; (8000ab4 <main+0x378>)
 8000820:	f002 fc52 	bl	80030c8 <HAL_GPIO_WritePin>


				if(!error) {
 8000824:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <main+0xfc>
					eNextState = FAIL_STATE;
 8000832:	2307      	movs	r3, #7
 8000834:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
				eNextState = VAC_ACHIEVMENT_TEST;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

				break;
 800083e:	e1f8      	b.n	8000c32 <main+0x4f6>
			case VAC_ACHIEVMENT_TEST:
				//HAL_Delay(stateDelay);
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2102      	movs	r1, #2
 8000844:	489b      	ldr	r0, [pc, #620]	; (8000ab4 <main+0x378>)
 8000846:	f002 fc3f 	bl	80030c8 <HAL_GPIO_WritePin>

				sprintf(msg,"Starting Vacuum Achievement Pump Test in progress (Step 18) \r\n");
 800084a:	463b      	mov	r3, r7
 800084c:	499c      	ldr	r1, [pc, #624]	; (8000ac0 <main+0x384>)
 800084e:	4618      	mov	r0, r3
 8000850:	f005 fbd6 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 8000854:	463b      	mov	r3, r7
 8000856:	4999      	ldr	r1, [pc, #612]	; (8000abc <main+0x380>)
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fce3 	bl	8001224 <printMsg>

				sprintf(msg,"\tTimer for 60 minutes on\r\n");
 800085e:	463b      	mov	r3, r7
 8000860:	4998      	ldr	r1, [pc, #608]	; (8000ac4 <main+0x388>)
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fbcc 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 8000868:	463b      	mov	r3, r7
 800086a:	4994      	ldr	r1, [pc, #592]	; (8000abc <main+0x380>)
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fcd9 	bl	8001224 <printMsg>
				HAL_Delay(3000);
 8000872:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000876:	f001 f935 	bl	8001ae4 <HAL_Delay>

				sprintf(msg,"\tTurning on Vacuum Guage for measurement...\r\n");
 800087a:	463b      	mov	r3, r7
 800087c:	4992      	ldr	r1, [pc, #584]	; (8000ac8 <main+0x38c>)
 800087e:	4618      	mov	r0, r3
 8000880:	f005 fbbe 	bl	8006000 <siprintf>
				printMsg(msg, &huart3);
 8000884:	463b      	mov	r3, r7
 8000886:	498d      	ldr	r1, [pc, #564]	; (8000abc <main+0x380>)
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fccb 	bl	8001224 <printMsg>

				vacuumGaugeADC(&hadc1);
 800088e:	4888      	ldr	r0, [pc, #544]	; (8000ab0 <main+0x374>)
 8000890:	f001 f82e 	bl	80018f0 <vacuumGaugeADC>
				volts = adcGet(&hadc1);
 8000894:	4886      	ldr	r0, [pc, #536]	; (8000ab0 <main+0x374>)
 8000896:	f000 fc87 	bl	80011a8 <adcGet>
 800089a:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
				vacuumScale = readVacuum(volts);
 800089e:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 80008a2:	f001 f849 	bl	8001938 <readVacuum>
 80008a6:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
				sprintf(msg, "\tVacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r\n\n", volts, vacuumScale);
 80008aa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80008ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008b2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80008b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ba:	4638      	mov	r0, r7
 80008bc:	ed8d 7b00 	vstr	d7, [sp]
 80008c0:	ec53 2b16 	vmov	r2, r3, d6
 80008c4:	4981      	ldr	r1, [pc, #516]	; (8000acc <main+0x390>)
 80008c6:	f005 fb9b 	bl	8006000 <siprintf>
				printMsg(msg, &huart3);
 80008ca:	463b      	mov	r3, r7
 80008cc:	497b      	ldr	r1, [pc, #492]	; (8000abc <main+0x380>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fca8 	bl	8001224 <printMsg>
				//HAL_Delay(1000);


				HAL_Delay(stateDelay);
 80008d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 f904 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2102      	movs	r1, #2
 80008e0:	4874      	ldr	r0, [pc, #464]	; (8000ab4 <main+0x378>)
 80008e2:	f002 fbf1 	bl	80030c8 <HAL_GPIO_WritePin>
				/*Turn Vacuum G*/
				if(!error) {
 80008e6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80008ea:	f083 0301 	eor.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <main+0x1be>
					eNextState = FAIL_STATE;
 80008f4:	2307      	movs	r3, #7
 80008f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
				eNextState = WARM_UP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				break;
 8000900:	e197      	b.n	8000c32 <main+0x4f6>
			case WARM_UP:
				HAL_Delay(stateDelay);
 8000902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000904:	4618      	mov	r0, r3
 8000906:	f001 f8ed 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2102      	movs	r1, #2
 800090e:	4869      	ldr	r0, [pc, #420]	; (8000ab4 <main+0x378>)
 8000910:	f002 fbda 	bl	80030c8 <HAL_GPIO_WritePin>

				sprintf(msg, "Starting Idle Warm-up Test (Step 19) \r\n");
 8000914:	463b      	mov	r3, r7
 8000916:	496e      	ldr	r1, [pc, #440]	; (8000ad0 <main+0x394>)
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fb71 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 800091e:	463b      	mov	r3, r7
 8000920:	4966      	ldr	r1, [pc, #408]	; (8000abc <main+0x380>)
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fc7e 	bl	8001224 <printMsg>

				sprintf(msg,"\tTemperature sensor on...\r\n\n");
 8000928:	463b      	mov	r3, r7
 800092a:	496a      	ldr	r1, [pc, #424]	; (8000ad4 <main+0x398>)
 800092c:	4618      	mov	r0, r3
 800092e:	f005 fb67 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 8000932:	463b      	mov	r3, r7
 8000934:	4961      	ldr	r1, [pc, #388]	; (8000abc <main+0x380>)
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fc74 	bl	8001224 <printMsg>

				HAL_Delay(stateDelay);
 800093c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f8d0 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	485a      	ldr	r0, [pc, #360]	; (8000ab4 <main+0x378>)
 800094a:	f002 fbbd 	bl	80030c8 <HAL_GPIO_WritePin>
				/*Continuously read temperature*/
				if(!error) {
 800094e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000952:	f083 0301 	eor.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <main+0x226>
					eNextState = FAIL_STATE;
 800095c:	2307      	movs	r3, #7
 800095e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
				eNextState = LOAD_TEST;
 8000962:	2303      	movs	r3, #3
 8000964:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				break;
 8000968:	e163      	b.n	8000c32 <main+0x4f6>
			case LOAD_TEST:
				HAL_Delay(stateDelay);
 800096a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f8b9 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2102      	movs	r1, #2
 8000976:	484f      	ldr	r0, [pc, #316]	; (8000ab4 <main+0x378>)
 8000978:	f002 fba6 	bl	80030c8 <HAL_GPIO_WritePin>

				sprintf(msg,"Starting Load Test (Step(20)\r\n");
 800097c:	463b      	mov	r3, r7
 800097e:	4956      	ldr	r1, [pc, #344]	; (8000ad8 <main+0x39c>)
 8000980:	4618      	mov	r0, r3
 8000982:	f005 fb3d 	bl	8006000 <siprintf>
				printMsg(msg, &huart3);
 8000986:	463b      	mov	r3, r7
 8000988:	494c      	ldr	r1, [pc, #304]	; (8000abc <main+0x380>)
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fc4a 	bl	8001224 <printMsg>
				sprintf(msg, "\tLoad being added to the system \r\n");
 8000990:	463b      	mov	r3, r7
 8000992:	4952      	ldr	r1, [pc, #328]	; (8000adc <main+0x3a0>)
 8000994:	4618      	mov	r0, r3
 8000996:	f005 fb33 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 800099a:	463b      	mov	r3, r7
 800099c:	4947      	ldr	r1, [pc, #284]	; (8000abc <main+0x380>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fc40 	bl	8001224 <printMsg>

				sprintf(msg, "\tMeasuring Flow rate\r\n");
 80009a4:	463b      	mov	r3, r7
 80009a6:	494e      	ldr	r1, [pc, #312]	; (8000ae0 <main+0x3a4>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f005 fb29 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 80009ae:	463b      	mov	r3, r7
 80009b0:	4942      	ldr	r1, [pc, #264]	; (8000abc <main+0x380>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fc36 	bl	8001224 <printMsg>

				/*Mass Flow Controller code*/
				flowControllerADC(&hadc1);
 80009b8:	483d      	ldr	r0, [pc, #244]	; (8000ab0 <main+0x374>)
 80009ba:	f7ff fe17 	bl	80005ec <flowControllerADC>
				volts = adcGet(&hadc1);
 80009be:	483c      	ldr	r0, [pc, #240]	; (8000ab0 <main+0x374>)
 80009c0:	f000 fbf2 	bl	80011a8 <adcGet>
 80009c4:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
				FlowRate = readFlow(volts);
 80009c8:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 80009cc:	f7ff fe30 	bl	8000630 <readFlow>
 80009d0:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
				sprintf(msg, "\tFlow Controller\t\tVolts: %.3f V\tFlow Rate:\t%1.0f\tL/min\r\n\n", volts, FlowRate);
 80009d4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80009d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80009e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e4:	4638      	mov	r0, r7
 80009e6:	ed8d 7b00 	vstr	d7, [sp]
 80009ea:	ec53 2b16 	vmov	r2, r3, d6
 80009ee:	493d      	ldr	r1, [pc, #244]	; (8000ae4 <main+0x3a8>)
 80009f0:	f005 fb06 	bl	8006000 <siprintf>
				printMsg(msg, &huart3);
 80009f4:	463b      	mov	r3, r7
 80009f6:	4931      	ldr	r1, [pc, #196]	; (8000abc <main+0x380>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fc13 	bl	8001224 <printMsg>
				dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(volts, 50));
 80009fe:	2032      	movs	r0, #50	; 0x32
 8000a00:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8000a04:	f7ff fe40 	bl	8000688 <setFlowRate>
 8000a08:	eef0 7a40 	vmov.f32	s15, s0
 8000a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a10:	2100      	movs	r1, #0
 8000a12:	4835      	ldr	r0, [pc, #212]	; (8000ae8 <main+0x3ac>)
 8000a14:	f000 fb94 	bl	8001140 <dacSet>

				HAL_Delay(stateDelay);
 8000a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 f862 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2102      	movs	r1, #2
 8000a24:	4823      	ldr	r0, [pc, #140]	; (8000ab4 <main+0x378>)
 8000a26:	f002 fb4f 	bl	80030c8 <HAL_GPIO_WritePin>

				/*Read Temperature value*/
				if(!error) {
 8000a2a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <main+0x302>
					eNextState = FAIL_STATE;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
				eNextState = OPERATION_TEST;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				break;
 8000a44:	e0f5      	b.n	8000c32 <main+0x4f6>
			case OPERATION_TEST:
				HAL_Delay(stateDelay);
 8000a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f84b 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2102      	movs	r1, #2
 8000a52:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <main+0x378>)
 8000a54:	f002 fb38 	bl	80030c8 <HAL_GPIO_WritePin>

				sprintf(msg,"Starting Continuous Operation Test (Step 21)\r\n");
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4924      	ldr	r1, [pc, #144]	; (8000aec <main+0x3b0>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f005 facf 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 8000a62:	463b      	mov	r3, r7
 8000a64:	4915      	ldr	r1, [pc, #84]	; (8000abc <main+0x380>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fbdc 	bl	8001224 <printMsg>
				sprintf(msg,"\tReading Temperature... \r\n\n");
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4920      	ldr	r1, [pc, #128]	; (8000af0 <main+0x3b4>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fac5 	bl	8006000 <siprintf>
				printMsg(msg,&huart3);
 8000a76:	463b      	mov	r3, r7
 8000a78:	4910      	ldr	r1, [pc, #64]	; (8000abc <main+0x380>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fbd2 	bl	8001224 <printMsg>

				HAL_Delay(stateDelay);
 8000a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f82e 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <main+0x378>)
 8000a8e:	f002 fb1b 	bl	80030c8 <HAL_GPIO_WritePin>

				if(!error) {
 8000a92:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000a96:	f083 0301 	eor.w	r3, r3, #1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <main+0x36a>
					eNextState = FAIL_STATE;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
				eNextState = ULTIMATE_MEASURE_TEST;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				break;
 8000aac:	e0c1      	b.n	8000c32 <main+0x4f6>
 8000aae:	bf00      	nop
 8000ab0:	20000380 	.word	0x20000380
 8000ab4:	40021400 	.word	0x40021400
 8000ab8:	080087b0 	.word	0x080087b0
 8000abc:	2000048c 	.word	0x2000048c
 8000ac0:	080087d8 	.word	0x080087d8
 8000ac4:	08008818 	.word	0x08008818
 8000ac8:	08008834 	.word	0x08008834
 8000acc:	08008864 	.word	0x08008864
 8000ad0:	08008898 	.word	0x08008898
 8000ad4:	080088c0 	.word	0x080088c0
 8000ad8:	080088e0 	.word	0x080088e0
 8000adc:	08008900 	.word	0x08008900
 8000ae0:	08008924 	.word	0x08008924
 8000ae4:	0800893c 	.word	0x0800893c
 8000ae8:	200003c8 	.word	0x200003c8
 8000aec:	08008978 	.word	0x08008978
 8000af0:	080089a8 	.word	0x080089a8
			case ULTIMATE_MEASURE_TEST:
				HAL_Delay(stateDelay);
 8000af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fff4 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2102      	movs	r1, #2
 8000b00:	484f      	ldr	r0, [pc, #316]	; (8000c40 <main+0x504>)
 8000b02:	f002 fae1 	bl	80030c8 <HAL_GPIO_WritePin>

				sprintf(msg, "Starting Ultimate Vacuum Pressure Test (Step 22)\r\n");
 8000b06:	463b      	mov	r3, r7
 8000b08:	494e      	ldr	r1, [pc, #312]	; (8000c44 <main+0x508>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f005 fa78 	bl	8006000 <siprintf>
				printMsg(msg ,&huart3);
 8000b10:	463b      	mov	r3, r7
 8000b12:	494d      	ldr	r1, [pc, #308]	; (8000c48 <main+0x50c>)
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fb85 	bl	8001224 <printMsg>


				sprintf(msg,"\tTurning on Vacuum Guage for measurement...\r\n");
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	494b      	ldr	r1, [pc, #300]	; (8000c4c <main+0x510>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f005 fa6e 	bl	8006000 <siprintf>
				printMsg(msg, &huart3);
 8000b24:	463b      	mov	r3, r7
 8000b26:	4948      	ldr	r1, [pc, #288]	; (8000c48 <main+0x50c>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fb7b 	bl	8001224 <printMsg>

				vacuumGaugeADC(&hadc1);
 8000b2e:	4848      	ldr	r0, [pc, #288]	; (8000c50 <main+0x514>)
 8000b30:	f000 fede 	bl	80018f0 <vacuumGaugeADC>
				volts = adcGet(&hadc1);
 8000b34:	4846      	ldr	r0, [pc, #280]	; (8000c50 <main+0x514>)
 8000b36:	f000 fb37 	bl	80011a8 <adcGet>
 8000b3a:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
				vacuumScale = readVacuum(volts);
 8000b3e:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8000b42:	f000 fef9 	bl	8001938 <readVacuum>
 8000b46:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
				sprintf(msg, "\tVacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r\n\n", volts, vacuumScale);
 8000b4a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000b4e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b52:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000b56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5a:	4638      	mov	r0, r7
 8000b5c:	ed8d 7b00 	vstr	d7, [sp]
 8000b60:	ec53 2b16 	vmov	r2, r3, d6
 8000b64:	493b      	ldr	r1, [pc, #236]	; (8000c54 <main+0x518>)
 8000b66:	f005 fa4b 	bl	8006000 <siprintf>
				printMsg(msg, &huart3);
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4936      	ldr	r1, [pc, #216]	; (8000c48 <main+0x50c>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fb58 	bl	8001224 <printMsg>

				HAL_Delay(stateDelay);
 8000b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 ffb4 	bl	8001ae4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2102      	movs	r1, #2
 8000b80:	482f      	ldr	r0, [pc, #188]	; (8000c40 <main+0x504>)
 8000b82:	f002 faa1 	bl	80030c8 <HAL_GPIO_WritePin>

				if(!error) {
 8000b86:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b8a:	f083 0301 	eor.w	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <main+0x45e>
					eNextState = FAIL_STATE;
 8000b94:	2307      	movs	r3, #7
 8000b96:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
				eNextState = FAIL_STATE;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				break;
 8000ba0:	e047      	b.n	8000c32 <main+0x4f6>
			case FAIL_STATE:
				sprintf(msg, "Fail State \r\n\n");
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	492c      	ldr	r1, [pc, #176]	; (8000c58 <main+0x51c>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 fa2a 	bl	8006000 <siprintf>
				printMsg(msg ,&huart3);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4926      	ldr	r1, [pc, #152]	; (8000c48 <main+0x50c>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fb37 	bl	8001224 <printMsg>
				for(int i = 0; i < 5; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000bbc:	e016      	b.n	8000bec <main+0x4b0>
					HAL_Delay(500);
 8000bbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc2:	f000 ff8f 	bl	8001ae4 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2101      	movs	r1, #1
 8000bca:	481d      	ldr	r0, [pc, #116]	; (8000c40 <main+0x504>)
 8000bcc:	f002 fa7c 	bl	80030c8 <HAL_GPIO_WritePin>

					HAL_Delay(500);
 8000bd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd4:	f000 ff86 	bl	8001ae4 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4818      	ldr	r0, [pc, #96]	; (8000c40 <main+0x504>)
 8000bde:	f002 fa73 	bl	80030c8 <HAL_GPIO_WritePin>
				for(int i = 0; i < 5; i++) {
 8000be2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000be6:	3301      	adds	r3, #1
 8000be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	dde4      	ble.n	8000bbe <main+0x482>
				}




				if(!error) {
 8000bf4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000bf8:	f083 0301 	eor.w	r3, r3, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d017      	beq.n	8000c32 <main+0x4f6>
					eNextState = STOP;
 8000c02:	2308      	movs	r3, #8
 8000c04:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
				break;
 8000c08:	e013      	b.n	8000c32 <main+0x4f6>
			case IDLE:
				break;
			case STOP:
				for(int i = 0; i < 5; i++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c0e:	e002      	b.n	8000c16 <main+0x4da>
 8000c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c12:	3301      	adds	r3, #1
 8000c14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	ddf9      	ble.n	8000c10 <main+0x4d4>

				}
				break;
 8000c1c:	e009      	b.n	8000c32 <main+0x4f6>
			default:
				if(!error) {
 8000c1e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000c22:	f083 0301 	eor.w	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <main+0x4f6>
					eNextState = STOP;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while(eNextState != STOP) {
 8000c32:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	f47f adb8 	bne.w	80007ac <main+0x70>
  {
 8000c3c:	e5a3      	b.n	8000786 <main+0x4a>
 8000c3e:	bf00      	nop
 8000c40:	40021400 	.word	0x40021400
 8000c44:	080089c4 	.word	0x080089c4
 8000c48:	2000048c 	.word	0x2000048c
 8000c4c:	08008834 	.word	0x08008834
 8000c50:	20000380 	.word	0x20000380
 8000c54:	08008864 	.word	0x08008864
 8000c58:	080089f8 	.word	0x080089f8

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2234      	movs	r2, #52	; 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f005 fac0 	bl	80061f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c80:	f002 fb84 	bl	800338c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <SystemClock_Config+0xdc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a2b      	ldr	r2, [pc, #172]	; (8000d38 <SystemClock_Config+0xdc>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <SystemClock_Config+0xdc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <SystemClock_Config+0xe0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca4:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <SystemClock_Config+0xe0>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <SystemClock_Config+0xe0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000cd0:	2360      	movs	r3, #96	; 0x60
 8000cd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fbb1 	bl	800344c <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cf0:	f000 fa20 	bl	8001134 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cf4:	f002 fb5a 	bl	80033ac <HAL_PWREx_EnableOverDrive>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cfe:	f000 fa19 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2302      	movs	r3, #2
 8000d08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fe42 	bl	80039a8 <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d2a:	f000 fa03 	bl	8001134 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3750      	adds	r7, #80	; 0x50
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40007000 	.word	0x40007000

08000d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d54:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <MX_ADC1_Init+0xbc>)
 8000d56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d82:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <MX_ADC1_Init+0xc0>)
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da0:	4815      	ldr	r0, [pc, #84]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000da2:	f000 fec3 	bl	8001b2c <HAL_ADC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dac:	f000 f9c2 	bl	8001134 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000db0:	2309      	movs	r3, #9
 8000db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000db8:	2302      	movs	r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000dc2:	f001 f891 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dcc:	f000 f9b2 	bl	8001134 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_ADC1_Init+0xb8>)
 8000de2:	f001 f881 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000dec:	f000 f9a2 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000380 	.word	0x20000380
 8000dfc:	40012000 	.word	0x40012000
 8000e00:	0f000001 	.word	0x0f000001

08000e04 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_DAC_Init+0x4c>)
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <MX_DAC_Init+0x50>)
 8000e16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_DAC_Init+0x4c>)
 8000e1a:	f001 fb9a 	bl	8002552 <HAL_DAC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e24:	f000 f986 	bl	8001134 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_DAC_Init+0x4c>)
 8000e38:	f001 fc24 	bl	8002684 <HAL_DAC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e42:	f000 f977 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200003c8 	.word	0x200003c8
 8000e54:	40007400 	.word	0x40007400

08000e58 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_ETH_Init+0x84>)
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <MX_ETH_Init+0x88>)
 8000e60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <MX_ETH_Init+0x8c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_ETH_Init+0x8c>)
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_ETH_Init+0x8c>)
 8000e70:	22e1      	movs	r2, #225	; 0xe1
 8000e72:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_ETH_Init+0x8c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_ETH_Init+0x8c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_ETH_Init+0x8c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_ETH_Init+0x84>)
 8000e88:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <MX_ETH_Init+0x8c>)
 8000e8a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_ETH_Init+0x84>)
 8000e8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e92:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_ETH_Init+0x84>)
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <MX_ETH_Init+0x90>)
 8000e98:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_ETH_Init+0x84>)
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <MX_ETH_Init+0x94>)
 8000e9e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_ETH_Init+0x84>)
 8000ea2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ea6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_ETH_Init+0x84>)
 8000eaa:	f001 fc3b 	bl	8002724 <HAL_ETH_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000eb4:	f000 f93e 	bl	8001134 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000eb8:	2238      	movs	r2, #56	; 0x38
 8000eba:	2100      	movs	r1, #0
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_ETH_Init+0x98>)
 8000ebe:	f005 f997 	bl	80061f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_ETH_Init+0x98>)
 8000ec4:	2221      	movs	r2, #33	; 0x21
 8000ec6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_ETH_Init+0x98>)
 8000eca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000ece:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <MX_ETH_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200003dc 	.word	0x200003dc
 8000ee0:	40028000 	.word	0x40028000
 8000ee4:	20000a1c 	.word	0x20000a1c
 8000ee8:	20000280 	.word	0x20000280
 8000eec:	200001e0 	.word	0x200001e0
 8000ef0:	20000348 	.word	0x20000348

08000ef4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <MX_USART3_UART_Init+0x5c>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_USART3_UART_Init+0x58>)
 8000f38:	f003 fb84 	bl	8004644 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f42:	f000 f8f7 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000048c 	.word	0x2000048c
 8000f50:	40004800 	.word	0x40004800

08000f54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f62:	2206      	movs	r2, #6
 8000f64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f98:	f002 f8af 	bl	80030fa <HAL_PCD_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fa2:	f000 f8c7 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000514 	.word	0x20000514

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	; 0x30
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b56      	ldr	r3, [pc, #344]	; (8001120 <MX_GPIO_Init+0x170>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a55      	ldr	r2, [pc, #340]	; (8001120 <MX_GPIO_Init+0x170>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b53      	ldr	r3, [pc, #332]	; (8001120 <MX_GPIO_Init+0x170>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	4b50      	ldr	r3, [pc, #320]	; (8001120 <MX_GPIO_Init+0x170>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a4f      	ldr	r2, [pc, #316]	; (8001120 <MX_GPIO_Init+0x170>)
 8000fe4:	f043 0320 	orr.w	r3, r3, #32
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b4d      	ldr	r3, [pc, #308]	; (8001120 <MX_GPIO_Init+0x170>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0320 	and.w	r3, r3, #32
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <MX_GPIO_Init+0x170>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a49      	ldr	r2, [pc, #292]	; (8001120 <MX_GPIO_Init+0x170>)
 8000ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <MX_GPIO_Init+0x170>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <MX_GPIO_Init+0x170>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a43      	ldr	r2, [pc, #268]	; (8001120 <MX_GPIO_Init+0x170>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <MX_GPIO_Init+0x170>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <MX_GPIO_Init+0x170>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a3d      	ldr	r2, [pc, #244]	; (8001120 <MX_GPIO_Init+0x170>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <MX_GPIO_Init+0x170>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <MX_GPIO_Init+0x170>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a37      	ldr	r2, [pc, #220]	; (8001120 <MX_GPIO_Init+0x170>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <MX_GPIO_Init+0x170>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001056:	4b32      	ldr	r3, [pc, #200]	; (8001120 <MX_GPIO_Init+0x170>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a31      	ldr	r2, [pc, #196]	; (8001120 <MX_GPIO_Init+0x170>)
 800105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <MX_GPIO_Init+0x170>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2107      	movs	r1, #7
 8001072:	482c      	ldr	r0, [pc, #176]	; (8001124 <MX_GPIO_Init+0x174>)
 8001074:	f002 f828 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f244 0181 	movw	r1, #16513	; 0x4081
 800107e:	482a      	ldr	r0, [pc, #168]	; (8001128 <MX_GPIO_Init+0x178>)
 8001080:	f002 f822 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	4828      	ldr	r0, [pc, #160]	; (800112c <MX_GPIO_Init+0x17c>)
 800108a:	f002 f81d 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001094:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4822      	ldr	r0, [pc, #136]	; (8001130 <MX_GPIO_Init+0x180>)
 80010a6:	f001 fe63 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <MX_GPIO_Init+0x174>)
 80010c2:	f001 fe55 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_GPIO_Init+0x178>)
 80010e0:	f001 fe46 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_GPIO_Init+0x17c>)
 80010fc:	f001 fe38 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_GPIO_Init+0x17c>)
 8001114:	f001 fe2c 	bl	8002d70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	; 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40021400 	.word	0x40021400
 8001128:	40020400 	.word	0x40020400
 800112c:	40021800 	.word	0x40021800
 8001130:	40020800 	.word	0x40020800

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f001 fa20 	bl	8002596 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 8001156:	edd7 7a01 	vldr	s15, [r7, #4]
 800115a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800115e:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001190 <dacSet+0x50>
 8001162:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001166:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001198 <dacSet+0x58>
 800116a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800116e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001172:	ee17 2a90 	vmov	r2, s15
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <dacSet+0x60>)
 8001178:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <dacSet+0x60>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f001 fa59 	bl	800263a <HAL_DAC_SetValue>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	66666666 	.word	0x66666666
 8001194:	400a6666 	.word	0x400a6666
 8001198:	00000000 	.word	0x00000000
 800119c:	40affe00 	.word	0x40affe00
 80011a0:	20000a24 	.word	0x20000a24
 80011a4:	00000000 	.word	0x00000000

080011a8 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fcff 	bl	8001bb4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 80011b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 fdfc 	bl	8001db8 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fe84 	bl	8001ece <HAL_ADC_GetValue>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <adcGet+0x70>)
 80011cc:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <adcGet+0x70>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011da:	eddf 6a10 	vldr	s13, [pc, #64]	; 800121c <adcGet+0x74>
 80011de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001210 <adcGet+0x68>
 80011ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <adcGet+0x78>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fda9 	bl	8001d50 <HAL_ADC_Stop>
	return adcVolts;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <adcGet+0x78>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	ee07 3a90 	vmov	s15, r3
}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	66666666 	.word	0x66666666
 8001214:	400a6666 	.word	0x400a6666
 8001218:	20000a28 	.word	0x20000a28
 800121c:	457ff000 	.word	0x457ff000
 8001220:	20000a2c 	.word	0x20000a2c

08001224 <printMsg>:
//	//adcVolts =roundf(arr[2] *100.0)/100;
//	adcVolts = arr[2];
//	return adcVolts;
//}

void printMsg(char * str, UART_HandleTypeDef *huart2){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	// sprintf(msg, "Volts: %.2f V\r\n", volts);
	// HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	HAL_UART_Transmit(huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff f856 	bl	80002e0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f003 fa4e 	bl	80046e0 <HAL_UART_Transmit>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_MspInit+0x44>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_MspInit+0x44>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_MspInit+0x44>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_MspInit+0x44>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x44>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x44>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a21      	ldr	r2, [pc, #132]	; (8001338 <HAL_ADC_MspInit+0xa4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d13b      	bne.n	800132e <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a20      	ldr	r2, [pc, #128]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a1a      	ldr	r2, [pc, #104]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_ADC_MspInit+0xa8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012fe:	2360      	movs	r3, #96	; 0x60
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_ADC_MspInit+0xac>)
 8001312:	f001 fd2d 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001316:	2302      	movs	r3, #2
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <HAL_ADC_MspInit+0xb0>)
 800132a:	f001 fd21 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40012000 	.word	0x40012000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400

08001348 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <HAL_DAC_MspInit+0x74>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d123      	bne.n	80013b2 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_DAC_MspInit+0x78>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <HAL_DAC_MspInit+0x78>)
 8001370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_DAC_MspInit+0x78>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_DAC_MspInit+0x78>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_DAC_MspInit+0x78>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_DAC_MspInit+0x78>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800139a:	2310      	movs	r3, #16
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_DAC_MspInit+0x7c>)
 80013ae:	f001 fcdf 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40007400 	.word	0x40007400
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_ETH_MspInit+0x158>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f040 8096 	bne.w	8001518 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80013ec:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 80013f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
 80013f8:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a46      	ldr	r2, [pc, #280]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800140a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a40      	ldr	r2, [pc, #256]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001422:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a3a      	ldr	r2, [pc, #232]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b35      	ldr	r3, [pc, #212]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a34      	ldr	r2, [pc, #208]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b32      	ldr	r3, [pc, #200]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	6313      	str	r3, [r2, #48]	; 0x30
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a28      	ldr	r2, [pc, #160]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 8001482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_ETH_MspInit+0x15c>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001494:	2332      	movs	r3, #50	; 0x32
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014a4:	230b      	movs	r3, #11
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	481e      	ldr	r0, [pc, #120]	; (8001528 <HAL_ETH_MspInit+0x160>)
 80014b0:	f001 fc5e 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014b4:	2386      	movs	r3, #134	; 0x86
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c4:	230b      	movs	r3, #11
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_ETH_MspInit+0x164>)
 80014d0:	f001 fc4e 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014e6:	230b      	movs	r3, #11
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	480f      	ldr	r0, [pc, #60]	; (8001530 <HAL_ETH_MspInit+0x168>)
 80014f2:	f001 fc3d 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001508:	230b      	movs	r3, #11
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <HAL_ETH_MspInit+0x16c>)
 8001514:	f001 fc2c 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3738      	adds	r7, #56	; 0x38
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40028000 	.word	0x40028000
 8001524:	40023800 	.word	0x40023800
 8001528:	40020800 	.word	0x40020800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40021800 	.word	0x40021800

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0ae      	sub	sp, #184	; 0xb8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2290      	movs	r2, #144	; 0x90
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f004 fe49 	bl	80061f0 <memset>
  if(huart->Instance==USART3)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a22      	ldr	r2, [pc, #136]	; (80015ec <HAL_UART_MspInit+0xb4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d13c      	bne.n	80015e2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800156e:	2300      	movs	r3, #0
 8001570:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fc3c 	bl	8003df4 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001582:	f7ff fdd7 	bl	8001134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_UART_MspInit+0xb8>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0xb8>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0xb8>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0xb8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <HAL_UART_MspInit+0xb8>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_UART_MspInit+0xb8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d0:	2307      	movs	r3, #7
 80015d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_UART_MspInit+0xbc>)
 80015de:	f001 fbc7 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	37b8      	adds	r7, #184	; 0xb8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004800 	.word	0x40004800
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020c00 	.word	0x40020c00

080015f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0ae      	sub	sp, #184	; 0xb8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2290      	movs	r2, #144	; 0x90
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fde9 	bl	80061f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001626:	d159      	bne.n	80016dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800162c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fbdb 	bl	8003df4 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001644:	f7ff fd76 	bl	8001134 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001660:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800167a:	230a      	movs	r3, #10
 800167c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001684:	4619      	mov	r1, r3
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <HAL_PCD_MspInit+0xf0>)
 8001688:	f001 fb72 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800168c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <HAL_PCD_MspInit+0xf0>)
 80016a8:	f001 fb62 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b0:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b6:	6353      	str	r3, [r2, #52]	; 0x34
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ce:	6453      	str	r3, [r2, #68]	; 0x44
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HAL_PCD_MspInit+0xec>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	37b8      	adds	r7, #184	; 0xb8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 f9b4 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_kill>:

int _kill(int pid, int sig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800175a:	f004 fd9b 	bl	8006294 <__errno>
 800175e:	4603      	mov	r3, r0
 8001760:	2216      	movs	r2, #22
 8001762:	601a      	str	r2, [r3, #0]
  return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_exit>:

void _exit (int status)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe7 	bl	8001750 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001782:	e7fe      	b.n	8001782 <_exit+0x12>

08001784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
  }

  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf1      	blt.n	80017d0 <_write+0x12>
  }
  return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181e:	605a      	str	r2, [r3, #4]
  return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_isatty>:

int _isatty(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f004 fd00 	bl	8006294 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20080000 	.word	0x20080000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20000a30 	.word	0x20000a30
 80018c8:	20000b88 	.word	0x20000b88

080018cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <vacuumGaugeADC>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void vacuumGaugeADC(ADC_HandleTypeDef* hadc){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 8001906:	2306      	movs	r3, #6
 8001908:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800190a:	2301      	movs	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800190e:	2301      	movs	r3, #1
 8001910:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	4619      	mov	r1, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fae5 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <vacuumGaugeADC+0x3a>
	{
	  Error_Handler();
 8001924:	f7ff fc06 	bl	8001134 <Error_Handler>
	}
	return;
 8001928:	bf00      	nop
 800192a:	bf00      	nop
}
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	0000      	movs	r0, r0
 8001934:	0000      	movs	r0, r0
	...

08001938 <readVacuum>:

float readVacuum(float voltage){
 8001938:	b580      	push	{r7, lr}
 800193a:	ed2d 8b02 	vpush	{d8}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	ed87 0a01 	vstr	s0, [r7, #4]

	float exponent = (voltage * 3.9722 - referenceVoltage)/scalingFactor;
 8001946:	edd7 7a01 	vldr	s15, [r7, #4]
 800194a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800194e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80019c0 <readVacuum+0x88>
 8001952:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <readVacuum+0x90>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001960:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <readVacuum+0x94>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800196e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001972:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001976:	edc7 7a03 	vstr	s15, [r7, #12]
	pressure = referencePressure * pow(10, exponent);
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <readVacuum+0x98>)
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001984:	edd7 7a03 	vldr	s15, [r7, #12]
 8001988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800198c:	eeb0 1b47 	vmov.f64	d1, d7
 8001990:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001994:	f006 fc40 	bl	8008218 <pow>
 8001998:	eeb0 7b40 	vmov.f64	d7, d0
 800199c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80019a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <readVacuum+0x9c>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]

	return pressure;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <readVacuum+0x9c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	ee07 3a90 	vmov	s15, r3
}
 80019b2:	eeb0 0a67 	vmov.f32	s0, s15
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	ecbd 8b02 	vpop	{d8}
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	cb295e9e 	.word	0xcb295e9e
 80019c4:	400fc710 	.word	0x400fc710
 80019c8:	20000008 	.word	0x20000008
 80019cc:	2000000c 	.word	0x2000000c
 80019d0:	20000004 	.word	0x20000004
 80019d4:	20000a34 	.word	0x20000a34

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019de:	490e      	ldr	r1, [pc, #56]	; (8001a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f4:	4c0b      	ldr	r4, [pc, #44]	; (8001a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a02:	f7ff ff63 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f004 fc4b 	bl	80062a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7fe fe97 	bl	800073c <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a1c:	0800a660 	.word	0x0800a660
  ldr r2, =_sbss
 8001a20:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8001a24:	20000b88 	.word	0x20000b88

08001a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC_IRQHandler>

08001a2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2e:	2003      	movs	r0, #3
 8001a30:	f000 fd5c 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f805 	bl	8001a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3a:	f7ff fc07 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x54>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x58>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fd69 	bl	800253a <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f000 fd3f 	bl	8002502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_InitTick+0x5c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000014 	.word	0x20000014
 8001aa0:	20000010 	.word	0x20000010

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000014 	.word	0x20000014
 8001ac8:	20000a38 	.word	0x20000a38

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000a38 	.word	0x20000a38

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000014 	.word	0x20000014

08001b2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e031      	b.n	8001ba6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fba2 	bl	8001294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_ADC_Init+0x84>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	f043 0202 	orr.w	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fb0a 	bl	8002194 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f023 0303 	bic.w	r3, r3, #3
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
 8001b96:	e001      	b.n	8001b9c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	ffffeefd 	.word	0xffffeefd

08001bb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Start+0x1a>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e0ad      	b.n	8001d2a <HAL_ADC_Start+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d018      	beq.n	8001c16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_ADC_Start+0x184>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a50      	ldr	r2, [pc, #320]	; (8001d3c <HAL_ADC_Start+0x188>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9a      	lsrs	r2, r3, #18
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c08:	e002      	b.n	8001c10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f9      	bne.n	8001c0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d175      	bne.n	8001d10 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c28:	4b45      	ldr	r3, [pc, #276]	; (8001d40 <HAL_ADC_Start+0x18c>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5e:	d106      	bne.n	8001c6e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	f023 0206 	bic.w	r2, r3, #6
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c86:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_ADC_Start+0x190>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d143      	bne.n	8001d28 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e03a      	b.n	8001d28 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <HAL_ADC_Start+0x194>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10e      	bne.n	8001cda <HAL_ADC_Start+0x126>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d107      	bne.n	8001cda <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cd8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_ADC_Start+0x190>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d120      	bne.n	8001d28 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_ADC_Start+0x198>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d11b      	bne.n	8001d28 <HAL_ADC_Start+0x174>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d114      	bne.n	8001d28 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	e00b      	b.n	8001d28 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f043 0210 	orr.w	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	fffff8fe 	.word	0xfffff8fe
 8001d44:	40012300 	.word	0x40012300
 8001d48:	40012000 	.word	0x40012000
 8001d4c:	40012200 	.word	0x40012200

08001d50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Stop+0x16>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e01f      	b.n	8001da6 <HAL_ADC_Stop+0x56>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_ADC_Stop+0x64>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	ffffeefe 	.word	0xffffeefe

08001db8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd4:	d113      	bne.n	8001dfe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de4:	d10b      	bne.n	8001dfe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0220 	orr.w	r2, r3, #32
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e063      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dfe:	f7ff fe65 	bl	8001acc <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e04:	e021      	b.n	8001e4a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d01d      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <HAL_ADC_PollForConversion+0x6c>
 8001e14:	f7ff fe5a 	bl	8001acc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d212      	bcs.n	8001e4a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d00b      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0204 	orr.w	r2, r3, #4
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e03d      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d1d6      	bne.n	8001e06 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0212 	mvn.w	r2, #18
 8001e60:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d123      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d11f      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d111      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1c>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e136      	b.n	8002172 <HAL_ADC_ConfigChannel+0x28a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d93a      	bls.n	8001f8a <HAL_ADC_ConfigChannel+0xa2>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f1c:	d035      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68d9      	ldr	r1, [r3, #12]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	2207      	movs	r2, #7
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a8d      	ldr	r2, [pc, #564]	; (8002180 <HAL_ADC_ConfigChannel+0x298>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10a      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68d9      	ldr	r1, [r3, #12]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	061a      	lsls	r2, r3, #24
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f62:	e035      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68d9      	ldr	r1, [r3, #12]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4403      	add	r3, r0
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f88:	e022      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6919      	ldr	r1, [r3, #16]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6919      	ldr	r1, [r3, #16]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4403      	add	r3, r0
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b06      	cmp	r3, #6
 8001fd6:	d824      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b05      	subs	r3, #5
 8001fea:	221f      	movs	r2, #31
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b05      	subs	r3, #5
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
 8002020:	e04c      	b.n	80020bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d824      	bhi.n	8002074 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b23      	subs	r3, #35	; 0x23
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b23      	subs	r3, #35	; 0x23
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
 8002072:	e023      	b.n	80020bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b41      	subs	r3, #65	; 0x41
 8002086:	221f      	movs	r2, #31
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43da      	mvns	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	400a      	ands	r2, r1
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b41      	subs	r3, #65	; 0x41
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_ADC_ConfigChannel+0x29c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10a      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1f4>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a2c      	ldr	r2, [pc, #176]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a28      	ldr	r2, [pc, #160]	; (8002184 <HAL_ADC_ConfigChannel+0x29c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10f      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x21e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b12      	cmp	r3, #18
 80020ec:	d10b      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020f8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002100:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002104:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_ADC_ConfigChannel+0x29c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d12b      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x280>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_ADC_ConfigChannel+0x298>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d003      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x23a>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b11      	cmp	r3, #17
 8002120:	d122      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002128:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800212c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <HAL_ADC_ConfigChannel+0x2a0>)
 8002134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002138:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a10      	ldr	r2, [pc, #64]	; (8002180 <HAL_ADC_ConfigChannel+0x298>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d111      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_ADC_ConfigChannel+0x2a4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_ADC_ConfigChannel+0x2a8>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9a      	lsrs	r2, r3, #18
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800215a:	e002      	b.n	8002162 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3b01      	subs	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	10000012 	.word	0x10000012
 8002184:	40012000 	.word	0x40012000
 8002188:	40012300 	.word	0x40012300
 800218c:	20000000 	.word	0x20000000
 8002190:	431bde83 	.word	0x431bde83

08002194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <ADC_Init+0x1ec>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a77      	ldr	r2, [pc, #476]	; (8002380 <ADC_Init+0x1ec>)
 80021a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80021a8:	4b75      	ldr	r3, [pc, #468]	; (8002380 <ADC_Init+0x1ec>)
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4973      	ldr	r1, [pc, #460]	; (8002380 <ADC_Init+0x1ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	021a      	lsls	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	4a58      	ldr	r2, [pc, #352]	; (8002384 <ADC_Init+0x1f0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002236:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	e00f      	b.n	800228e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800228c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0202 	bic.w	r2, r2, #2
 800229c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	005a      	lsls	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	3b01      	subs	r3, #1
 80022e8:	035a      	lsls	r2, r3, #13
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	e007      	b.n	8002304 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	3b01      	subs	r3, #1
 8002320:	051a      	lsls	r2, r3, #20
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002346:	025a      	lsls	r2, r3, #9
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	029a      	lsls	r2, r3, #10
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40012300 	.word	0x40012300
 8002384:	0f000001 	.word	0x0f000001

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <__NVIC_SetPriorityGrouping+0x40>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x40>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00
 80023cc:	05fa0000 	.word	0x05fa0000

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff47 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff5c 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffb0 	bl	80024a8 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e014      	b.n	800258e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d105      	bne.n	800257a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe fee7 	bl	8001348 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2202      	movs	r2, #2
 800257e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	795b      	ldrb	r3, [r3, #5]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_DAC_Start+0x16>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e040      	b.n	800262e <HAL_DAC_Start+0x98>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10f      	bne.n	80025f6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80025e0:	2b3c      	cmp	r3, #60	; 0x3c
 80025e2:	d11d      	bne.n	8002620 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	e014      	b.n	8002620 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	213c      	movs	r1, #60	; 0x3c
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0202 	orr.w	r2, r2, #2
 800261e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800263a:	b480      	push	{r7}
 800263c:	b087      	sub	sp, #28
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	3308      	adds	r3, #8
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e004      	b.n	800266e <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	3314      	adds	r3, #20
 800266c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	461a      	mov	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	795b      	ldrb	r3, [r3, #5]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_DAC_ConfigChannel+0x18>
 8002698:	2302      	movs	r3, #2
 800269a:	e03c      	b.n	8002716 <HAL_DAC_ConfigChannel+0x92>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2202      	movs	r2, #2
 80026a6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4013      	ands	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	22c0      	movs	r2, #192	; 0xc0
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	400a      	ands	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06a      	b.n	800280c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2223      	movs	r2, #35	; 0x23
 8002744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fe fe3d 	bl	80013c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_ETH_Init+0xf0>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a30      	ldr	r2, [pc, #192]	; (8002814 <HAL_ETH_Init+0xf0>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <HAL_ETH_Init+0xf0>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_ETH_Init+0xf4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a2b      	ldr	r2, [pc, #172]	; (8002818 <HAL_ETH_Init+0xf4>)
 800276c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002770:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_ETH_Init+0xf4>)
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4927      	ldr	r1, [pc, #156]	; (8002818 <HAL_ETH_Init+0xf4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_ETH_Init+0xf4>)
 8002782:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800279a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800279c:	f7ff f996 	bl	8001acc <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027a2:	e011      	b.n	80027c8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80027a4:	f7ff f992 	bl	8001acc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027b2:	d909      	bls.n	80027c8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2204      	movs	r2, #4
 80027b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	22e0      	movs	r2, #224	; 0xe0
 80027c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e021      	b.n	800280c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e4      	bne.n	80027a4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f958 	bl	8002a90 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f9ff 	bl	8002be4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fa55 	bl	8002c96 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	461a      	mov	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f9bd 	bl	8002b74 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2210      	movs	r2, #16
 8002806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	40013800 	.word	0x40013800

0800281c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4b51      	ldr	r3, [pc, #324]	; (8002978 <ETH_SetMACConfig+0x15c>)
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	7c1b      	ldrb	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <ETH_SetMACConfig+0x28>
 800283e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002842:	e000      	b.n	8002846 <ETH_SetMACConfig+0x2a>
 8002844:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7c5b      	ldrb	r3, [r3, #17]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <ETH_SetMACConfig+0x38>
 800284e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002852:	e000      	b.n	8002856 <ETH_SetMACConfig+0x3a>
 8002854:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002856:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800285c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7fdb      	ldrb	r3, [r3, #31]
 8002862:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002864:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800286a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	7f92      	ldrb	r2, [r2, #30]
 8002870:	2a00      	cmp	r2, #0
 8002872:	d102      	bne.n	800287a <ETH_SetMACConfig+0x5e>
 8002874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002878:	e000      	b.n	800287c <ETH_SetMACConfig+0x60>
 800287a:	2200      	movs	r2, #0
                        macconf->Speed |
 800287c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7f1b      	ldrb	r3, [r3, #28]
 8002882:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002884:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800288a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	791b      	ldrb	r3, [r3, #4]
 8002890:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002892:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	f892 2020 	ldrb.w	r2, [r2, #32]
 800289a:	2a00      	cmp	r2, #0
 800289c:	d102      	bne.n	80028a4 <ETH_SetMACConfig+0x88>
 800289e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a2:	e000      	b.n	80028a6 <ETH_SetMACConfig+0x8a>
 80028a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	7bdb      	ldrb	r3, [r3, #15]
 80028ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028be:	4313      	orrs	r3, r2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7ff f904 	bl	8001ae4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028f2:	4013      	ands	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002902:	2a00      	cmp	r2, #0
 8002904:	d101      	bne.n	800290a <ETH_SetMACConfig+0xee>
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	e000      	b.n	800290c <ETH_SetMACConfig+0xf0>
 800290a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800290c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002912:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800291a:	2a01      	cmp	r2, #1
 800291c:	d101      	bne.n	8002922 <ETH_SetMACConfig+0x106>
 800291e:	2208      	movs	r2, #8
 8002920:	e000      	b.n	8002924 <ETH_SetMACConfig+0x108>
 8002922:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002924:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800292c:	2a01      	cmp	r2, #1
 800292e:	d101      	bne.n	8002934 <ETH_SetMACConfig+0x118>
 8002930:	2204      	movs	r2, #4
 8002932:	e000      	b.n	8002936 <ETH_SetMACConfig+0x11a>
 8002934:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800293e:	2a01      	cmp	r2, #1
 8002940:	d101      	bne.n	8002946 <ETH_SetMACConfig+0x12a>
 8002942:	2202      	movs	r2, #2
 8002944:	e000      	b.n	8002948 <ETH_SetMACConfig+0x12c>
 8002946:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002948:	4313      	orrs	r3, r2
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002960:	2001      	movs	r0, #1
 8002962:	f7ff f8bf 	bl	8001ae4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	ff20810f 	.word	0xff20810f

0800297c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <ETH_SetDMAConfig+0x110>)
 8002996:	4013      	ands	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	7b1b      	ldrb	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <ETH_SetDMAConfig+0x2c>
 80029a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029a6:	e000      	b.n	80029aa <ETH_SetDMAConfig+0x2e>
 80029a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7b5b      	ldrb	r3, [r3, #13]
 80029ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	7f52      	ldrb	r2, [r2, #29]
 80029b6:	2a00      	cmp	r2, #0
 80029b8:	d102      	bne.n	80029c0 <ETH_SetDMAConfig+0x44>
 80029ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029be:	e000      	b.n	80029c2 <ETH_SetDMAConfig+0x46>
 80029c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	7b9b      	ldrb	r3, [r3, #14]
 80029c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	7f1b      	ldrb	r3, [r3, #28]
 80029d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	7f9b      	ldrb	r3, [r3, #30]
 80029de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029f0:	4313      	orrs	r3, r2
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7ff f866 	bl	8001ae4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a20:	461a      	mov	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	791b      	ldrb	r3, [r3, #4]
 8002a2a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a30:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a36:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a3c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a44:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a46:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a4e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a54:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a62:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f7ff f837 	bl	8001ae4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	f8de3f23 	.word	0xf8de3f23

08002a90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0a6      	sub	sp, #152	; 0x98
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002acc:	2300      	movs	r3, #0
 8002ace:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002af2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002af8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fe86 	bl	800281c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b10:	2301      	movs	r3, #1
 8002b12:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b14:	2301      	movs	r3, #1
 8002b16:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b32:	2300      	movs	r3, #0
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b44:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b4a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b60:	f107 0308 	add.w	r3, r7, #8
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff08 	bl	800297c <ETH_SetDMAConfig>
}
 8002b6c:	bf00      	nop
 8002b6e:	3798      	adds	r7, #152	; 0x98
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3305      	adds	r3, #5
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	3204      	adds	r2, #4
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <ETH_MACAddressConfig+0x68>)
 8002b96:	4413      	add	r3, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3303      	adds	r3, #3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	061a      	lsls	r2, r3, #24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <ETH_MACAddressConfig+0x6c>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6013      	str	r3, [r2, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40028040 	.word	0x40028040
 8002be0:	40028044 	.word	0x40028044

08002be4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e03e      	b.n	8002c70 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68d9      	ldr	r1, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	3206      	adds	r2, #6
 8002c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d80c      	bhi.n	8002c54 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68d9      	ldr	r1, [r3, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	e004      	b.n	8002c5e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d9bd      	bls.n	8002bf2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	611a      	str	r2, [r3, #16]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e046      	b.n	8002d32 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6919      	ldr	r1, [r3, #16]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002ce8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	3212      	adds	r2, #18
 8002cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d80c      	bhi.n	8002d22 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6919      	ldr	r1, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e004      	b.n	8002d2c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d9b5      	bls.n	8002ca4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d62:	60da      	str	r2, [r3, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e175      	b.n	800307c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 8164 	bne.w	8003076 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_GPIO_Init+0x56>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80be 	beq.w	8003076 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b63      	ldr	r3, [pc, #396]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f12:	4a61      	ldr	r2, [pc, #388]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_GPIO_Init+0x32c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d037      	beq.n	8002fae <HAL_GPIO_Init+0x23e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d031      	beq.n	8002faa <HAL_GPIO_Init+0x23a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a56      	ldr	r2, [pc, #344]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02b      	beq.n	8002fa6 <HAL_GPIO_Init+0x236>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_GPIO_Init+0x338>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d025      	beq.n	8002fa2 <HAL_GPIO_Init+0x232>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a54      	ldr	r2, [pc, #336]	; (80030ac <HAL_GPIO_Init+0x33c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01f      	beq.n	8002f9e <HAL_GPIO_Init+0x22e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a53      	ldr	r2, [pc, #332]	; (80030b0 <HAL_GPIO_Init+0x340>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0x22a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x344>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_GPIO_Init+0x348>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x34c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f86:	2309      	movs	r3, #9
 8002f88:	e012      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f8a:	230a      	movs	r3, #10
 8002f8c:	e010      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	e00e      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f92:	2307      	movs	r3, #7
 8002f94:	e00c      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f96:	2306      	movs	r3, #6
 8002f98:	e00a      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	e008      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e004      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	f002 0203 	and.w	r2, r2, #3
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4093      	lsls	r3, r2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fc0:	4935      	ldr	r1, [pc, #212]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fce:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff8:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800301c:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_GPIO_Init+0x354>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_GPIO_Init+0x354>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	f67f ae86 	bls.w	8002d90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40013800 	.word	0x40013800
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020400 	.word	0x40020400
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020c00 	.word	0x40020c00
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40021400 	.word	0x40021400
 80030b4:	40021800 	.word	0x40021800
 80030b8:	40021c00 	.word	0x40021c00
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40022400 	.word	0x40022400
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030e4:	e003      	b.n	80030ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	041a      	lsls	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	619a      	str	r2, [r3, #24]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fc:	b08f      	sub	sp, #60	; 0x3c
 80030fe:	af0a      	add	r7, sp, #40	; 0x28
 8003100:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e116      	b.n	800333a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe fa66 	bl	80015f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2203      	movs	r2, #3
 8003130:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f001 ffbe 	bl	80050cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	687e      	ldr	r6, [r7, #4]
 8003158:	466d      	mov	r5, sp
 800315a:	f106 0410 	add.w	r4, r6, #16
 800315e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800316a:	e885 0003 	stmia.w	r5, {r0, r1}
 800316e:	1d33      	adds	r3, r6, #4
 8003170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	f001 ff52 	bl	800501c <USB_CoreInit>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0d7      	b.n	800333a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f001 ffac 	bl	80050ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e04a      	b.n	8003232 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	333d      	adds	r3, #61	; 0x3d
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	333c      	adds	r3, #60	; 0x3c
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	b298      	uxth	r0, r3
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3344      	adds	r3, #68	; 0x44
 80031d8:	4602      	mov	r2, r0
 80031da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3340      	adds	r3, #64	; 0x40
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3348      	adds	r3, #72	; 0x48
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	334c      	adds	r3, #76	; 0x4c
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	3354      	adds	r3, #84	; 0x54
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	3301      	adds	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d3af      	bcc.n	800319c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e044      	b.n	80032cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	3301      	adds	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3b5      	bcc.n	8003242 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	687e      	ldr	r6, [r7, #4]
 80032de:	466d      	mov	r5, sp
 80032e0:	f106 0410 	add.w	r4, r6, #16
 80032e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80032f4:	1d33      	adds	r3, r6, #4
 80032f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f8:	6838      	ldr	r0, [r7, #0]
 80032fa:	f001 ff45 	bl	8005188 <USB_DevInit>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e014      	b.n	800333a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b01      	cmp	r3, #1
 8003326:	d102      	bne.n	800332e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f80b 	bl	8003344 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f002 f903 	bl	800553e <USB_DevDisconnect>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003344 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_PCDEx_ActivateLPM+0x44>)
 8003374:	4313      	orrs	r3, r2
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	10000003 	.word	0x10000003

0800338c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40007000 	.word	0x40007000

080033ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_PWREx_EnableOverDrive+0x98>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a22      	ldr	r2, [pc, #136]	; (8003444 <HAL_PWREx_EnableOverDrive+0x98>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_PWREx_EnableOverDrive+0x98>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033da:	f7fe fb77 	bl	8001acc <HAL_GetTick>
 80033de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033e0:	e009      	b.n	80033f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033e2:	f7fe fb73 	bl	8001acc <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033f0:	d901      	bls.n	80033f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e022      	b.n	800343c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003402:	d1ee      	bne.n	80033e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003404:	4b10      	ldr	r3, [pc, #64]	; (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003410:	f7fe fb5c 	bl	8001acc <HAL_GetTick>
 8003414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003416:	e009      	b.n	800342c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003418:	f7fe fb58 	bl	8001acc <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003426:	d901      	bls.n	800342c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e007      	b.n	800343c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003438:	d1ee      	bne.n	8003418 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	40007000 	.word	0x40007000

0800344c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e29b      	b.n	800399a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8087 	beq.w	800357e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	4b96      	ldr	r3, [pc, #600]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b04      	cmp	r3, #4
 800347a:	d00c      	beq.n	8003496 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347c:	4b93      	ldr	r3, [pc, #588]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d112      	bne.n	80034ae <HAL_RCC_OscConfig+0x62>
 8003488:	4b90      	ldr	r3, [pc, #576]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003494:	d10b      	bne.n	80034ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003496:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d06c      	beq.n	800357c <HAL_RCC_OscConfig+0x130>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d168      	bne.n	800357c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e275      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7a>
 80034b8:	4b84      	ldr	r3, [pc, #528]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a83      	ldr	r2, [pc, #524]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e02e      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x9c>
 80034ce:	4b7f      	ldr	r3, [pc, #508]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7e      	ldr	r2, [pc, #504]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b7c      	ldr	r3, [pc, #496]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7b      	ldr	r2, [pc, #492]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e01d      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0xc0>
 80034f2:	4b76      	ldr	r3, [pc, #472]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a75      	ldr	r2, [pc, #468]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b73      	ldr	r3, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a72      	ldr	r2, [pc, #456]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 800350c:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6b      	ldr	r2, [pc, #428]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe face 	bl	8001acc <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe faca 	bl	8001acc <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e229      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xe8>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe faba 	bl	8001acc <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fab6 	bl	8001acc <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e215      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b57      	ldr	r3, [pc, #348]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x110>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d069      	beq.n	800365e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800358a:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b4d      	ldr	r3, [pc, #308]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x190>
 80035a2:	4b4a      	ldr	r3, [pc, #296]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1e9      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b41      	ldr	r3, [pc, #260]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	493d      	ldr	r1, [pc, #244]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e040      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a38      	ldr	r2, [pc, #224]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fa6c 	bl	8001acc <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fe fa68 	bl	8001acc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1c7      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360a:	4b30      	ldr	r3, [pc, #192]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4929      	ldr	r1, [pc, #164]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
 800362a:	e018      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a26      	ldr	r2, [pc, #152]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fa48 	bl	8001acc <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003640:	f7fe fa44 	bl	8001acc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1a3      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d038      	beq.n	80036dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d019      	beq.n	80036a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe fa25 	bl	8001acc <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003686:	f7fe fa21 	bl	8001acc <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e180      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x23a>
 80036a4:	e01a      	b.n	80036dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fe fa0b 	bl	8001acc <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ba:	f7fe fa07 	bl	8001acc <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d903      	bls.n	80036d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e166      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
 80036cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	4b92      	ldr	r3, [pc, #584]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ee      	bne.n	80036ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a4 	beq.w	8003832 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b8c      	ldr	r3, [pc, #560]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10d      	bne.n	8003712 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	4b89      	ldr	r3, [pc, #548]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a88      	ldr	r2, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b86      	ldr	r3, [pc, #536]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003712:	4b83      	ldr	r3, [pc, #524]	; (8003920 <HAL_RCC_OscConfig+0x4d4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d118      	bne.n	8003750 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800371e:	4b80      	ldr	r3, [pc, #512]	; (8003920 <HAL_RCC_OscConfig+0x4d4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7f      	ldr	r2, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x4d4>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372a:	f7fe f9cf 	bl	8001acc <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003732:	f7fe f9cb 	bl	8001acc <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b64      	cmp	r3, #100	; 0x64
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e12a      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003744:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x4d4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d106      	bne.n	8003766 <HAL_RCC_OscConfig+0x31a>
 8003758:	4b70      	ldr	r3, [pc, #448]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a6f      	ldr	r2, [pc, #444]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	e02d      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x33c>
 800376e:	4b6b      	ldr	r3, [pc, #428]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a6a      	ldr	r2, [pc, #424]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	4b68      	ldr	r3, [pc, #416]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	4a67      	ldr	r2, [pc, #412]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	6713      	str	r3, [r2, #112]	; 0x70
 8003786:	e01c      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b05      	cmp	r3, #5
 800378e:	d10c      	bne.n	80037aa <HAL_RCC_OscConfig+0x35e>
 8003790:	4b62      	ldr	r3, [pc, #392]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a61      	ldr	r2, [pc, #388]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	6713      	str	r3, [r2, #112]	; 0x70
 800379c:	4b5f      	ldr	r3, [pc, #380]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a5e      	ldr	r2, [pc, #376]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	e00b      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 80037aa:	4b5c      	ldr	r3, [pc, #368]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a5b      	ldr	r2, [pc, #364]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
 80037b6:	4b59      	ldr	r3, [pc, #356]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a58      	ldr	r2, [pc, #352]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d015      	beq.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fe f97f 	bl	8001acc <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fe f97b 	bl	8001acc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0d8      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	4b4c      	ldr	r3, [pc, #304]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ee      	beq.n	80037d2 <HAL_RCC_OscConfig+0x386>
 80037f4:	e014      	b.n	8003820 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe f969 	bl	8001acc <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe f965 	bl	8001acc <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0c2      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	4b41      	ldr	r3, [pc, #260]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1ee      	bne.n	80037fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a3c      	ldr	r2, [pc, #240]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800382c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80ae 	beq.w	8003998 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d06d      	beq.n	8003924 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d14b      	bne.n	80038e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a31      	ldr	r2, [pc, #196]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f936 	bl	8001acc <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe f932 	bl	8001acc <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e091      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	4b29      	ldr	r3, [pc, #164]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	3b01      	subs	r3, #1
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	071b      	lsls	r3, r3, #28
 80038ae:	491b      	ldr	r1, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fe f904 	bl	8001acc <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fe f900 	bl	8001acc <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e05f      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x47c>
 80038e6:	e057      	b.n	8003998 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0b      	ldr	r2, [pc, #44]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 80038ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fe f8ea 	bl	8001acc <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fe f8e6 	bl	8001acc <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e045      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	4b03      	ldr	r3, [pc, #12]	; (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x4b0>
 800391a:	e03d      	b.n	8003998 <HAL_RCC_OscConfig+0x54c>
 800391c:	40023800 	.word	0x40023800
 8003920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003924:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <HAL_RCC_OscConfig+0x558>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d030      	beq.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d129      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d122      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800395a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800395c:	4293      	cmp	r3, r2
 800395e:	d119      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	3b01      	subs	r3, #1
 800396e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d10f      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800

080039a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0d0      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d910      	bls.n	80039f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 020f 	bic.w	r2, r3, #15
 80039d6:	4965      	ldr	r1, [pc, #404]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b63      	ldr	r3, [pc, #396]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0b8      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a08:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a58      	ldr	r2, [pc, #352]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a52      	ldr	r2, [pc, #328]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	494d      	ldr	r1, [pc, #308]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d040      	beq.n	8003acc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d115      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e07f      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e073      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06b      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4936      	ldr	r1, [pc, #216]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fe f816 	bl	8001acc <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fe f812 	bl	8001acc <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e053      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003acc:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d210      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 020f 	bic.w	r2, r3, #15
 8003ae2:	4922      	ldr	r1, [pc, #136]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e032      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4916      	ldr	r1, [pc, #88]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	490e      	ldr	r1, [pc, #56]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b3a:	f000 f821 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	490a      	ldr	r1, [pc, #40]	; (8003b74 <HAL_RCC_ClockConfig+0x1cc>)
 8003b4c:	5ccb      	ldrb	r3, [r1, r3]
 8003b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b52:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1d0>)
 8003b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1d4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd ff72 	bl	8001a44 <HAL_InitTick>

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023c00 	.word	0x40023c00
 8003b70:	40023800 	.word	0x40023800
 8003b74:	08008a08 	.word	0x08008a08
 8003b78:	20000000 	.word	0x20000000
 8003b7c:	20000010 	.word	0x20000010

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b84:	b094      	sub	sp, #80	; 0x50
 8003b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b90:	2300      	movs	r3, #0
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b98:	4b79      	ldr	r3, [pc, #484]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	f200 80e1 	bhi.w	8003d6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d003      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x3a>
 8003bb2:	e0db      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb4:	4b73      	ldr	r3, [pc, #460]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb8:	e0db      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bba:	4b73      	ldr	r3, [pc, #460]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bbe:	e0d8      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc0:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bca:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d063      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd6:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	099b      	lsrs	r3, r3, #6
 8003bdc:	2200      	movs	r2, #0
 8003bde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bea:	2300      	movs	r3, #0
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
 8003bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	f04f 0000 	mov.w	r0, #0
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	0159      	lsls	r1, r3, #5
 8003c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c04:	0150      	lsls	r0, r2, #5
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	1a51      	subs	r1, r2, r1
 8003c0e:	6139      	str	r1, [r7, #16]
 8003c10:	4629      	mov	r1, r5
 8003c12:	eb63 0301 	sbc.w	r3, r3, r1
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c24:	4659      	mov	r1, fp
 8003c26:	018b      	lsls	r3, r1, #6
 8003c28:	4651      	mov	r1, sl
 8003c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c2e:	4651      	mov	r1, sl
 8003c30:	018a      	lsls	r2, r1, #6
 8003c32:	4651      	mov	r1, sl
 8003c34:	ebb2 0801 	subs.w	r8, r2, r1
 8003c38:	4659      	mov	r1, fp
 8003c3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c52:	4690      	mov	r8, r2
 8003c54:	4699      	mov	r9, r3
 8003c56:	4623      	mov	r3, r4
 8003c58:	eb18 0303 	adds.w	r3, r8, r3
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	462b      	mov	r3, r5
 8003c60:	eb49 0303 	adc.w	r3, r9, r3
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c72:	4629      	mov	r1, r5
 8003c74:	024b      	lsls	r3, r1, #9
 8003c76:	4621      	mov	r1, r4
 8003c78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	024a      	lsls	r2, r1, #9
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c86:	2200      	movs	r2, #0
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c90:	f7fc fb2e 	bl	80002f0 <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4613      	mov	r3, r2
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c9c:	e058      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9e:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	4611      	mov	r1, r2
 8003caa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cae:	623b      	str	r3, [r7, #32]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cb8:	4642      	mov	r2, r8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	f04f 0000 	mov.w	r0, #0
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	0159      	lsls	r1, r3, #5
 8003cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cca:	0150      	lsls	r0, r2, #5
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ce8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cf0:	ebb2 040a 	subs.w	r4, r2, sl
 8003cf4:	eb63 050b 	sbc.w	r5, r3, fp
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	00eb      	lsls	r3, r5, #3
 8003d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d06:	00e2      	lsls	r2, r4, #3
 8003d08:	4614      	mov	r4, r2
 8003d0a:	461d      	mov	r5, r3
 8003d0c:	4643      	mov	r3, r8
 8003d0e:	18e3      	adds	r3, r4, r3
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	464b      	mov	r3, r9
 8003d14:	eb45 0303 	adc.w	r3, r5, r3
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d26:	4629      	mov	r1, r5
 8003d28:	028b      	lsls	r3, r1, #10
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d30:	4621      	mov	r1, r4
 8003d32:	028a      	lsls	r2, r1, #10
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	61fa      	str	r2, [r7, #28]
 8003d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d44:	f7fc fad4 	bl	80002f0 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d6a:	e002      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3750      	adds	r7, #80	; 0x50
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	007a1200 	.word	0x007a1200

08003d8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000000 	.word	0x20000000

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08008a18 	.word	0x08008a18

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd0:	f7ff ffdc 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0b5b      	lsrs	r3, r3, #13
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	08008a18 	.word	0x08008a18

08003df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e1c:	4b69      	ldr	r3, [pc, #420]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4a68      	ldr	r2, [pc, #416]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e26:	6093      	str	r3, [r2, #8]
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	4964      	ldr	r1, [pc, #400]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d017      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e4e:	4b5d      	ldr	r3, [pc, #372]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5c:	4959      	ldr	r1, [pc, #356]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d017      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e8a:	4b4e      	ldr	r3, [pc, #312]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	494a      	ldr	r1, [pc, #296]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea8:	d101      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 808b 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	4b3a      	ldr	r3, [pc, #232]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	4a39      	ldr	r2, [pc, #228]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee4:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a34      	ldr	r2, [pc, #208]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fd fde6 	bl	8001acc <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7fd fde2 	bl	8001acc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e38f      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f16:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f22:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d035      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d02e      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f62:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d114      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd fdaa 	bl	8001acc <HAL_GetTick>
 8003f78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7c:	f7fd fda6 	bl	8001acc <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e351      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ee      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003faa:	d111      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fba:	400b      	ands	r3, r1
 8003fbc:	4901      	ldr	r1, [pc, #4]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	0ffffcff 	.word	0x0ffffcff
 8003fd0:	4bac      	ldr	r3, [pc, #688]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4aab      	ldr	r2, [pc, #684]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fda:	6093      	str	r3, [r2, #8]
 8003fdc:	4ba9      	ldr	r3, [pc, #676]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe8:	49a6      	ldr	r1, [pc, #664]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d010      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ffa:	4ba2      	ldr	r3, [pc, #648]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	4aa0      	ldr	r2, [pc, #640]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004006:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800400a:	4b9e      	ldr	r3, [pc, #632]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	499b      	ldr	r1, [pc, #620]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004028:	4b96      	ldr	r3, [pc, #600]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004036:	4993      	ldr	r1, [pc, #588]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800404a:	4b8e      	ldr	r3, [pc, #568]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004058:	498a      	ldr	r1, [pc, #552]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800406c:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407a:	4982      	ldr	r1, [pc, #520]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800408e:	4b7d      	ldr	r3, [pc, #500]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	4979      	ldr	r1, [pc, #484]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b0:	4b74      	ldr	r3, [pc, #464]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4971      	ldr	r1, [pc, #452]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d2:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f023 020c 	bic.w	r2, r3, #12
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	4968      	ldr	r1, [pc, #416]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f4:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	4960      	ldr	r1, [pc, #384]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004116:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	4957      	ldr	r1, [pc, #348]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004138:	4b52      	ldr	r3, [pc, #328]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	494f      	ldr	r1, [pc, #316]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800415a:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	4946      	ldr	r1, [pc, #280]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800417c:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418a:	493e      	ldr	r1, [pc, #248]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ac:	4935      	ldr	r1, [pc, #212]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041c0:	4b30      	ldr	r3, [pc, #192]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ce:	492d      	ldr	r1, [pc, #180]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d011      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041e2:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f0:	4924      	ldr	r1, [pc, #144]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b18      	ldr	r3, [pc, #96]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004230:	4914      	ldr	r1, [pc, #80]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004254:	490b      	ldr	r1, [pc, #44]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00f      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004278:	4902      	ldr	r1, [pc, #8]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004280:	e002      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004294:	4b8a      	ldr	r3, [pc, #552]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800429a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	4986      	ldr	r1, [pc, #536]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042b8:	4b81      	ldr	r3, [pc, #516]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c8:	497d      	ldr	r1, [pc, #500]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d006      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80d6 	beq.w	8004490 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042e4:	4b76      	ldr	r3, [pc, #472]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a75      	ldr	r2, [pc, #468]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f0:	f7fd fbec 	bl	8001acc <HAL_GetTick>
 80042f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042f8:	f7fd fbe8 	bl	8001acc <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e195      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800430a:	4b6d      	ldr	r3, [pc, #436]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11d      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800432a:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	0e1b      	lsrs	r3, r3, #24
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	019a      	lsls	r2, r3, #6
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	071b      	lsls	r3, r3, #28
 800435e:	4958      	ldr	r1, [pc, #352]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02e      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004390:	d129      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004392:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043a0:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a6:	0f1b      	lsrs	r3, r3, #28
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	019a      	lsls	r2, r3, #6
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	493e      	ldr	r1, [pc, #248]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043ce:	4b3c      	ldr	r3, [pc, #240]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d4:	f023 021f 	bic.w	r2, r3, #31
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	3b01      	subs	r3, #1
 80043de:	4938      	ldr	r1, [pc, #224]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01d      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043f2:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f8:	0e1b      	lsrs	r3, r3, #24
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004400:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004406:	0f1b      	lsrs	r3, r3, #28
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	019a      	lsls	r2, r3, #6
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	431a      	orrs	r2, r3
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	071b      	lsls	r3, r3, #28
 8004426:	4926      	ldr	r1, [pc, #152]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	019a      	lsls	r2, r3, #6
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	491a      	ldr	r1, [pc, #104]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800445e:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a17      	ldr	r2, [pc, #92]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fd fb2f 	bl	8001acc <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004472:	f7fd fb2b 	bl	8001acc <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d901      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e0d8      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004484:	4b0e      	ldr	r3, [pc, #56]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b01      	cmp	r3, #1
 8004494:	f040 80ce 	bne.w	8004634 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a4:	f7fd fb12 	bl	8001acc <HAL_GetTick>
 80044a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044aa:	e00b      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044ac:	f7fd fb0e 	bl	8001acc <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d904      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0bb      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044c4:	4b5e      	ldr	r3, [pc, #376]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d0:	d0ec      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02e      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d12a      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044fa:	4b51      	ldr	r3, [pc, #324]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004508:	4b4d      	ldr	r3, [pc, #308]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	0f1b      	lsrs	r3, r3, #28
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	019a      	lsls	r2, r3, #6
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	4944      	ldr	r1, [pc, #272]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004536:	4b42      	ldr	r3, [pc, #264]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	493d      	ldr	r1, [pc, #244]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d022      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004564:	d11d      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004566:	4b36      	ldr	r3, [pc, #216]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	0e1b      	lsrs	r3, r3, #24
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004574:	4b32      	ldr	r3, [pc, #200]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	0f1b      	lsrs	r3, r3, #28
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	019a      	lsls	r2, r3, #6
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	431a      	orrs	r2, r3
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	061b      	lsls	r3, r3, #24
 8004594:	431a      	orrs	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	071b      	lsls	r3, r3, #28
 800459a:	4929      	ldr	r1, [pc, #164]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d028      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	0e1b      	lsrs	r3, r3, #24
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	019a      	lsls	r2, r3, #6
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	041b      	lsls	r3, r3, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	071b      	lsls	r3, r3, #28
 80045e2:	4917      	ldr	r1, [pc, #92]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	4911      	ldr	r1, [pc, #68]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fd fa5e 	bl	8001acc <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004614:	f7fd fa5a 	bl	8001acc <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e007      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004632:	d1ef      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800

08004644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e040      	b.n	80046d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc ff66 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8b0 	bl	80047e8 <UART_SetConfig>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e022      	b.n	80046d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fb08 	bl	8004cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fb8f 	bl	8004df4 <UART_CheckIdleState>
 80046d6:	4603      	mov	r3, r0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d171      	bne.n	80047dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_UART_Transmit+0x24>
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e06a      	b.n	80047de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2221      	movs	r2, #33	; 0x21
 8004714:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004716:	f7fd f9d9 	bl	8001acc <HAL_GetTick>
 800471a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	88fa      	ldrh	r2, [r7, #6]
 8004720:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004734:	d108      	bne.n	8004748 <HAL_UART_Transmit+0x68>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	e003      	b.n	8004750 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004750:	e02c      	b.n	80047ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2200      	movs	r2, #0
 800475a:	2180      	movs	r1, #128	; 0x80
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fb96 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e038      	b.n	80047de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004780:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	3302      	adds	r3, #2
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e007      	b.n	800479a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1cc      	bne.n	8004752 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2200      	movs	r2, #0
 80047c0:	2140      	movs	r1, #64	; 0x40
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fb63 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e005      	b.n	80047de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4ba6      	ldr	r3, [pc, #664]	; (8004aac <UART_SetConfig+0x2c4>)
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	430b      	orrs	r3, r1
 800481e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	430a      	orrs	r2, r1
 8004858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a94      	ldr	r2, [pc, #592]	; (8004ab0 <UART_SetConfig+0x2c8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d120      	bne.n	80048a6 <UART_SetConfig+0xbe>
 8004864:	4b93      	ldr	r3, [pc, #588]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b03      	cmp	r3, #3
 8004870:	d816      	bhi.n	80048a0 <UART_SetConfig+0xb8>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0x90>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	08004889 	.word	0x08004889
 800487c:	08004895 	.word	0x08004895
 8004880:	0800488f 	.word	0x0800488f
 8004884:	0800489b 	.word	0x0800489b
 8004888:	2301      	movs	r3, #1
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e150      	b.n	8004b30 <UART_SetConfig+0x348>
 800488e:	2302      	movs	r3, #2
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e14d      	b.n	8004b30 <UART_SetConfig+0x348>
 8004894:	2304      	movs	r3, #4
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e14a      	b.n	8004b30 <UART_SetConfig+0x348>
 800489a:	2308      	movs	r3, #8
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e147      	b.n	8004b30 <UART_SetConfig+0x348>
 80048a0:	2310      	movs	r3, #16
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e144      	b.n	8004b30 <UART_SetConfig+0x348>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a83      	ldr	r2, [pc, #524]	; (8004ab8 <UART_SetConfig+0x2d0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d132      	bne.n	8004916 <UART_SetConfig+0x12e>
 80048b0:	4b80      	ldr	r3, [pc, #512]	; (8004ab4 <UART_SetConfig+0x2cc>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d828      	bhi.n	8004910 <UART_SetConfig+0x128>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <UART_SetConfig+0xdc>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004911 	.word	0x08004911
 80048cc:	08004911 	.word	0x08004911
 80048d0:	08004911 	.word	0x08004911
 80048d4:	08004905 	.word	0x08004905
 80048d8:	08004911 	.word	0x08004911
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004911 	.word	0x08004911
 80048e4:	080048ff 	.word	0x080048ff
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004911 	.word	0x08004911
 80048f4:	0800490b 	.word	0x0800490b
 80048f8:	2300      	movs	r3, #0
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e118      	b.n	8004b30 <UART_SetConfig+0x348>
 80048fe:	2302      	movs	r3, #2
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e115      	b.n	8004b30 <UART_SetConfig+0x348>
 8004904:	2304      	movs	r3, #4
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e112      	b.n	8004b30 <UART_SetConfig+0x348>
 800490a:	2308      	movs	r3, #8
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e10f      	b.n	8004b30 <UART_SetConfig+0x348>
 8004910:	2310      	movs	r3, #16
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e10c      	b.n	8004b30 <UART_SetConfig+0x348>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a68      	ldr	r2, [pc, #416]	; (8004abc <UART_SetConfig+0x2d4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d120      	bne.n	8004962 <UART_SetConfig+0x17a>
 8004920:	4b64      	ldr	r3, [pc, #400]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800492a:	2b30      	cmp	r3, #48	; 0x30
 800492c:	d013      	beq.n	8004956 <UART_SetConfig+0x16e>
 800492e:	2b30      	cmp	r3, #48	; 0x30
 8004930:	d814      	bhi.n	800495c <UART_SetConfig+0x174>
 8004932:	2b20      	cmp	r3, #32
 8004934:	d009      	beq.n	800494a <UART_SetConfig+0x162>
 8004936:	2b20      	cmp	r3, #32
 8004938:	d810      	bhi.n	800495c <UART_SetConfig+0x174>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <UART_SetConfig+0x15c>
 800493e:	2b10      	cmp	r3, #16
 8004940:	d006      	beq.n	8004950 <UART_SetConfig+0x168>
 8004942:	e00b      	b.n	800495c <UART_SetConfig+0x174>
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e0f2      	b.n	8004b30 <UART_SetConfig+0x348>
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e0ef      	b.n	8004b30 <UART_SetConfig+0x348>
 8004950:	2304      	movs	r3, #4
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e0ec      	b.n	8004b30 <UART_SetConfig+0x348>
 8004956:	2308      	movs	r3, #8
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e0e9      	b.n	8004b30 <UART_SetConfig+0x348>
 800495c:	2310      	movs	r3, #16
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e0e6      	b.n	8004b30 <UART_SetConfig+0x348>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a56      	ldr	r2, [pc, #344]	; (8004ac0 <UART_SetConfig+0x2d8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d120      	bne.n	80049ae <UART_SetConfig+0x1c6>
 800496c:	4b51      	ldr	r3, [pc, #324]	; (8004ab4 <UART_SetConfig+0x2cc>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004976:	2bc0      	cmp	r3, #192	; 0xc0
 8004978:	d013      	beq.n	80049a2 <UART_SetConfig+0x1ba>
 800497a:	2bc0      	cmp	r3, #192	; 0xc0
 800497c:	d814      	bhi.n	80049a8 <UART_SetConfig+0x1c0>
 800497e:	2b80      	cmp	r3, #128	; 0x80
 8004980:	d009      	beq.n	8004996 <UART_SetConfig+0x1ae>
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d810      	bhi.n	80049a8 <UART_SetConfig+0x1c0>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <UART_SetConfig+0x1a8>
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d006      	beq.n	800499c <UART_SetConfig+0x1b4>
 800498e:	e00b      	b.n	80049a8 <UART_SetConfig+0x1c0>
 8004990:	2300      	movs	r3, #0
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e0cc      	b.n	8004b30 <UART_SetConfig+0x348>
 8004996:	2302      	movs	r3, #2
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e0c9      	b.n	8004b30 <UART_SetConfig+0x348>
 800499c:	2304      	movs	r3, #4
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e0c6      	b.n	8004b30 <UART_SetConfig+0x348>
 80049a2:	2308      	movs	r3, #8
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e0c3      	b.n	8004b30 <UART_SetConfig+0x348>
 80049a8:	2310      	movs	r3, #16
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e0c0      	b.n	8004b30 <UART_SetConfig+0x348>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a44      	ldr	r2, [pc, #272]	; (8004ac4 <UART_SetConfig+0x2dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d125      	bne.n	8004a04 <UART_SetConfig+0x21c>
 80049b8:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <UART_SetConfig+0x2cc>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c6:	d017      	beq.n	80049f8 <UART_SetConfig+0x210>
 80049c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049cc:	d817      	bhi.n	80049fe <UART_SetConfig+0x216>
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d2:	d00b      	beq.n	80049ec <UART_SetConfig+0x204>
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d811      	bhi.n	80049fe <UART_SetConfig+0x216>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <UART_SetConfig+0x1fe>
 80049de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e2:	d006      	beq.n	80049f2 <UART_SetConfig+0x20a>
 80049e4:	e00b      	b.n	80049fe <UART_SetConfig+0x216>
 80049e6:	2300      	movs	r3, #0
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e0a1      	b.n	8004b30 <UART_SetConfig+0x348>
 80049ec:	2302      	movs	r3, #2
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e09e      	b.n	8004b30 <UART_SetConfig+0x348>
 80049f2:	2304      	movs	r3, #4
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e09b      	b.n	8004b30 <UART_SetConfig+0x348>
 80049f8:	2308      	movs	r3, #8
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e098      	b.n	8004b30 <UART_SetConfig+0x348>
 80049fe:	2310      	movs	r3, #16
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e095      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <UART_SetConfig+0x2e0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d125      	bne.n	8004a5a <UART_SetConfig+0x272>
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a1c:	d017      	beq.n	8004a4e <UART_SetConfig+0x266>
 8004a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a22:	d817      	bhi.n	8004a54 <UART_SetConfig+0x26c>
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	d00b      	beq.n	8004a42 <UART_SetConfig+0x25a>
 8004a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2e:	d811      	bhi.n	8004a54 <UART_SetConfig+0x26c>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <UART_SetConfig+0x254>
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a38:	d006      	beq.n	8004a48 <UART_SetConfig+0x260>
 8004a3a:	e00b      	b.n	8004a54 <UART_SetConfig+0x26c>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e076      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a42:	2302      	movs	r3, #2
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e073      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e070      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e06d      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a54:	2310      	movs	r3, #16
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e06a      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <UART_SetConfig+0x2e4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d138      	bne.n	8004ad6 <UART_SetConfig+0x2ee>
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a72:	d017      	beq.n	8004aa4 <UART_SetConfig+0x2bc>
 8004a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a78:	d82a      	bhi.n	8004ad0 <UART_SetConfig+0x2e8>
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	d00b      	beq.n	8004a98 <UART_SetConfig+0x2b0>
 8004a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a84:	d824      	bhi.n	8004ad0 <UART_SetConfig+0x2e8>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <UART_SetConfig+0x2aa>
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	d006      	beq.n	8004a9e <UART_SetConfig+0x2b6>
 8004a90:	e01e      	b.n	8004ad0 <UART_SetConfig+0x2e8>
 8004a92:	2300      	movs	r3, #0
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e04b      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e048      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e045      	b.n	8004b30 <UART_SetConfig+0x348>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e042      	b.n	8004b30 <UART_SetConfig+0x348>
 8004aaa:	bf00      	nop
 8004aac:	efff69f3 	.word	0xefff69f3
 8004ab0:	40011000 	.word	0x40011000
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40004400 	.word	0x40004400
 8004abc:	40004800 	.word	0x40004800
 8004ac0:	40004c00 	.word	0x40004c00
 8004ac4:	40005000 	.word	0x40005000
 8004ac8:	40011400 	.word	0x40011400
 8004acc:	40007800 	.word	0x40007800
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e02c      	b.n	8004b30 <UART_SetConfig+0x348>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a72      	ldr	r2, [pc, #456]	; (8004ca4 <UART_SetConfig+0x4bc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d125      	bne.n	8004b2c <UART_SetConfig+0x344>
 8004ae0:	4b71      	ldr	r3, [pc, #452]	; (8004ca8 <UART_SetConfig+0x4c0>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004aea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004aee:	d017      	beq.n	8004b20 <UART_SetConfig+0x338>
 8004af0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004af4:	d817      	bhi.n	8004b26 <UART_SetConfig+0x33e>
 8004af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afa:	d00b      	beq.n	8004b14 <UART_SetConfig+0x32c>
 8004afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b00:	d811      	bhi.n	8004b26 <UART_SetConfig+0x33e>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <UART_SetConfig+0x326>
 8004b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0a:	d006      	beq.n	8004b1a <UART_SetConfig+0x332>
 8004b0c:	e00b      	b.n	8004b26 <UART_SetConfig+0x33e>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e00d      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b14:	2302      	movs	r3, #2
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e00a      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e007      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b20:	2308      	movs	r3, #8
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e004      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b26:	2310      	movs	r3, #16
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e001      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	d15b      	bne.n	8004bf2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b3a:	7ffb      	ldrb	r3, [r7, #31]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d828      	bhi.n	8004b92 <UART_SetConfig+0x3aa>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x360>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	08004b93 	.word	0x08004b93
 8004b58:	08004b83 	.word	0x08004b83
 8004b5c:	08004b93 	.word	0x08004b93
 8004b60:	08004b93 	.word	0x08004b93
 8004b64:	08004b93 	.word	0x08004b93
 8004b68:	08004b8b 	.word	0x08004b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6c:	f7ff f91a 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004b70:	61b8      	str	r0, [r7, #24]
        break;
 8004b72:	e013      	b.n	8004b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7ff f92a 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8004b78:	61b8      	str	r0, [r7, #24]
        break;
 8004b7a:	e00f      	b.n	8004b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	; (8004cac <UART_SetConfig+0x4c4>)
 8004b7e:	61bb      	str	r3, [r7, #24]
        break;
 8004b80:	e00c      	b.n	8004b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b82:	f7fe fffd 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8004b86:	61b8      	str	r0, [r7, #24]
        break;
 8004b88:	e008      	b.n	8004b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8e:	61bb      	str	r3, [r7, #24]
        break;
 8004b90:	e004      	b.n	8004b9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	77bb      	strb	r3, [r7, #30]
        break;
 8004b9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d074      	beq.n	8004c8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	005a      	lsls	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b0f      	cmp	r3, #15
 8004bbc:	d916      	bls.n	8004bec <UART_SetConfig+0x404>
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d212      	bcs.n	8004bec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f023 030f 	bic.w	r3, r3, #15
 8004bce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	89fa      	ldrh	r2, [r7, #14]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	e04f      	b.n	8004c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	77bb      	strb	r3, [r7, #30]
 8004bf0:	e04c      	b.n	8004c8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bf2:	7ffb      	ldrb	r3, [r7, #31]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d828      	bhi.n	8004c4a <UART_SetConfig+0x462>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0x418>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c35 	.word	0x08004c35
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c3b 	.word	0x08004c3b
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c4b 	.word	0x08004c4b
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7ff f8be 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004c28:	61b8      	str	r0, [r7, #24]
        break;
 8004c2a:	e013      	b.n	8004c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7ff f8ce 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8004c30:	61b8      	str	r0, [r7, #24]
        break;
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <UART_SetConfig+0x4c4>)
 8004c36:	61bb      	str	r3, [r7, #24]
        break;
 8004c38:	e00c      	b.n	8004c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fe ffa1 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8004c3e:	61b8      	str	r0, [r7, #24]
        break;
 8004c40:	e008      	b.n	8004c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c46:	61bb      	str	r3, [r7, #24]
        break;
 8004c48:	e004      	b.n	8004c54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	77bb      	strb	r3, [r7, #30]
        break;
 8004c52:	bf00      	nop
    }

    if (pclk != 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d018      	beq.n	8004c8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085a      	lsrs	r2, r3, #1
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	441a      	add	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b0f      	cmp	r3, #15
 8004c72:	d909      	bls.n	8004c88 <UART_SetConfig+0x4a0>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7a:	d205      	bcs.n	8004c88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60da      	str	r2, [r3, #12]
 8004c86:	e001      	b.n	8004c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c98:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40007c00 	.word	0x40007c00
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dae:	d10a      	bne.n	8004dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e04:	f7fc fe62 	bl	8001acc <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d10e      	bne.n	8004e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f831 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e027      	b.n	8004e86 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d10e      	bne.n	8004e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f81b 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e011      	b.n	8004e86 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b09c      	sub	sp, #112	; 0x70
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9e:	e0a7      	b.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	f000 80a3 	beq.w	8004ff0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fc fe0f 	bl	8001acc <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d13f      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	663b      	str	r3, [r7, #96]	; 0x60
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f12:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e068      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d050      	beq.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5c:	d148      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f66:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34
 8004f88:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e6      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fba:	623a      	str	r2, [r7, #32]
 8004fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	69f9      	ldr	r1, [r7, #28]
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e010      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	429a      	cmp	r2, r3
 800500c:	f43f af48 	beq.w	8004ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3770      	adds	r7, #112	; 0x70
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800501c:	b084      	sub	sp, #16
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	f107 001c 	add.w	r0, r7, #28
 800502a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	2b01      	cmp	r3, #1
 8005032:	d120      	bne.n	8005076 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <USB_CoreInit+0xac>)
 8005046:	4013      	ands	r3, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d105      	bne.n	800506a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa96 	bl	800559c <USB_CoreReset>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e010      	b.n	8005098 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa8a 	bl	800559c <USB_CoreReset>
 8005088:	4603      	mov	r3, r0
 800508a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10b      	bne.n	80050b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f043 0206 	orr.w	r2, r3, #6
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050c2:	b004      	add	sp, #16
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	ffbdffbf 	.word	0xffbdffbf

080050cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f023 0201 	bic.w	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d115      	bne.n	800513c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800511c:	2001      	movs	r0, #1
 800511e:	f7fc fce1 	bl	8001ae4 <HAL_Delay>
      ms++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fa29 	bl	8005580 <USB_GetMode>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d01e      	beq.n	8005172 <USB_SetCurrentMode+0x84>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b31      	cmp	r3, #49	; 0x31
 8005138:	d9f0      	bls.n	800511c <USB_SetCurrentMode+0x2e>
 800513a:	e01a      	b.n	8005172 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d115      	bne.n	800516e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800514e:	2001      	movs	r0, #1
 8005150:	f7fc fcc8 	bl	8001ae4 <HAL_Delay>
      ms++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fa10 	bl	8005580 <USB_GetMode>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <USB_SetCurrentMode+0x84>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b31      	cmp	r3, #49	; 0x31
 800516a:	d9f0      	bls.n	800514e <USB_SetCurrentMode+0x60>
 800516c:	e001      	b.n	8005172 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e005      	b.n	800517e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b32      	cmp	r3, #50	; 0x32
 8005176:	d101      	bne.n	800517c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005188:	b084      	sub	sp, #16
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e009      	b.n	80051bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	3340      	adds	r3, #64	; 0x40
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3301      	adds	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b0e      	cmp	r3, #14
 80051c0:	d9f2      	bls.n	80051a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11c      	bne.n	8005202 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d6:	f043 0302 	orr.w	r3, r3, #2
 80051da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e005      	b.n	800520e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005214:	461a      	mov	r2, r3
 8005216:	2300      	movs	r3, #0
 8005218:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	4619      	mov	r1, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	461a      	mov	r2, r3
 800522a:	680b      	ldr	r3, [r1, #0]
 800522c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	2b01      	cmp	r3, #1
 8005232:	d10c      	bne.n	800524e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800523a:	2100      	movs	r1, #0
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f965 	bl	800550c <USB_SetDevSpeed>
 8005242:	e008      	b.n	8005256 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005244:	2101      	movs	r1, #1
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f960 	bl	800550c <USB_SetDevSpeed>
 800524c:	e003      	b.n	8005256 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800524e:	2103      	movs	r1, #3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f95b 	bl	800550c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005256:	2110      	movs	r1, #16
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f8f3 	bl	8005444 <USB_FlushTxFifo>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f91f 	bl	80054ac <USB_FlushRxFifo>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	461a      	mov	r2, r3
 8005280:	2300      	movs	r3, #0
 8005282:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	461a      	mov	r2, r3
 800528c:	2300      	movs	r3, #0
 800528e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	461a      	mov	r2, r3
 8005298:	2300      	movs	r3, #0
 800529a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800529c:	2300      	movs	r3, #0
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	e043      	b.n	800532a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b8:	d118      	bne.n	80052ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	461a      	mov	r2, r3
 80052ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	e013      	b.n	80052fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	461a      	mov	r2, r3
 80052e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e008      	b.n	80052fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	461a      	mov	r2, r3
 80052fa:	2300      	movs	r3, #0
 80052fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	461a      	mov	r2, r3
 800530c:	2300      	movs	r3, #0
 800530e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	461a      	mov	r2, r3
 800531e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005322:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	3301      	adds	r3, #1
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d3b7      	bcc.n	80052a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	e043      	b.n	80053c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800534a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800534e:	d118      	bne.n	8005382 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	461a      	mov	r2, r3
 8005364:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e013      	b.n	8005394 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	461a      	mov	r2, r3
 800537a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e008      	b.n	8005394 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	461a      	mov	r2, r3
 8005390:	2300      	movs	r3, #0
 8005392:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	461a      	mov	r2, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	461a      	mov	r2, r3
 80053b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3301      	adds	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d3b7      	bcc.n	8005338 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f043 0210 	orr.w	r2, r3, #16
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <USB_DevInit+0x2b4>)
 8005402:	4313      	orrs	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f043 0208 	orr.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800541a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d105      	bne.n	800542c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <USB_DevInit+0x2b8>)
 8005426:	4313      	orrs	r3, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005438:	b004      	add	sp, #16
 800543a:	4770      	bx	lr
 800543c:	803c3800 	.word	0x803c3800
 8005440:	40000004 	.word	0x40000004

08005444 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <USB_FlushTxFifo+0x64>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d901      	bls.n	8005464 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e01b      	b.n	800549c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	daf2      	bge.n	8005452 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	019b      	lsls	r3, r3, #6
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <USB_FlushTxFifo+0x64>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e006      	b.n	800549c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b20      	cmp	r3, #32
 8005498:	d0f0      	beq.n	800547c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	00030d40 	.word	0x00030d40

080054ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4a11      	ldr	r2, [pc, #68]	; (8005508 <USB_FlushRxFifo+0x5c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e018      	b.n	80054fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	daf2      	bge.n	80054b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2210      	movs	r2, #16
 80054da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a08      	ldr	r2, [pc, #32]	; (8005508 <USB_FlushRxFifo+0x5c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d901      	bls.n	80054ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e006      	b.n	80054fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d0f0      	beq.n	80054dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	00030d40 	.word	0x00030d40

0800550c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005558:	f023 0303 	bic.w	r3, r3, #3
 800555c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0301 	and.w	r3, r3, #1
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a13      	ldr	r2, [pc, #76]	; (8005600 <USB_CoreReset+0x64>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e01b      	b.n	80055f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	daf2      	bge.n	80055a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a09      	ldr	r2, [pc, #36]	; (8005600 <USB_CoreReset+0x64>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d901      	bls.n	80055e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e006      	b.n	80055f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d0f0      	beq.n	80055d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	00030d40 	.word	0x00030d40

08005604 <__cvt>:
 8005604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005606:	ed2d 8b02 	vpush	{d8}
 800560a:	eeb0 8b40 	vmov.f64	d8, d0
 800560e:	b085      	sub	sp, #20
 8005610:	4617      	mov	r7, r2
 8005612:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005614:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005616:	ee18 2a90 	vmov	r2, s17
 800561a:	f025 0520 	bic.w	r5, r5, #32
 800561e:	2a00      	cmp	r2, #0
 8005620:	bfb6      	itet	lt
 8005622:	222d      	movlt	r2, #45	; 0x2d
 8005624:	2200      	movge	r2, #0
 8005626:	eeb1 8b40 	vneglt.f64	d8, d0
 800562a:	2d46      	cmp	r5, #70	; 0x46
 800562c:	460c      	mov	r4, r1
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	d004      	beq.n	800563c <__cvt+0x38>
 8005632:	2d45      	cmp	r5, #69	; 0x45
 8005634:	d100      	bne.n	8005638 <__cvt+0x34>
 8005636:	3401      	adds	r4, #1
 8005638:	2102      	movs	r1, #2
 800563a:	e000      	b.n	800563e <__cvt+0x3a>
 800563c:	2103      	movs	r1, #3
 800563e:	ab03      	add	r3, sp, #12
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	ab02      	add	r3, sp, #8
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	4622      	mov	r2, r4
 8005648:	4633      	mov	r3, r6
 800564a:	eeb0 0b48 	vmov.f64	d0, d8
 800564e:	f000 fed7 	bl	8006400 <_dtoa_r>
 8005652:	2d47      	cmp	r5, #71	; 0x47
 8005654:	d101      	bne.n	800565a <__cvt+0x56>
 8005656:	07fb      	lsls	r3, r7, #31
 8005658:	d51a      	bpl.n	8005690 <__cvt+0x8c>
 800565a:	2d46      	cmp	r5, #70	; 0x46
 800565c:	eb00 0204 	add.w	r2, r0, r4
 8005660:	d10c      	bne.n	800567c <__cvt+0x78>
 8005662:	7803      	ldrb	r3, [r0, #0]
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d107      	bne.n	8005678 <__cvt+0x74>
 8005668:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800566c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005670:	bf1c      	itt	ne
 8005672:	f1c4 0401 	rsbne	r4, r4, #1
 8005676:	6034      	strne	r4, [r6, #0]
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	441a      	add	r2, r3
 800567c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005684:	bf08      	it	eq
 8005686:	9203      	streq	r2, [sp, #12]
 8005688:	2130      	movs	r1, #48	; 0x30
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	4293      	cmp	r3, r2
 800568e:	d307      	bcc.n	80056a0 <__cvt+0x9c>
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005694:	1a1b      	subs	r3, r3, r0
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	b005      	add	sp, #20
 800569a:	ecbd 8b02 	vpop	{d8}
 800569e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a0:	1c5c      	adds	r4, r3, #1
 80056a2:	9403      	str	r4, [sp, #12]
 80056a4:	7019      	strb	r1, [r3, #0]
 80056a6:	e7f0      	b.n	800568a <__cvt+0x86>

080056a8 <__exponent>:
 80056a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056aa:	4603      	mov	r3, r0
 80056ac:	2900      	cmp	r1, #0
 80056ae:	bfb8      	it	lt
 80056b0:	4249      	neglt	r1, r1
 80056b2:	f803 2b02 	strb.w	r2, [r3], #2
 80056b6:	bfb4      	ite	lt
 80056b8:	222d      	movlt	r2, #45	; 0x2d
 80056ba:	222b      	movge	r2, #43	; 0x2b
 80056bc:	2909      	cmp	r1, #9
 80056be:	7042      	strb	r2, [r0, #1]
 80056c0:	dd2a      	ble.n	8005718 <__exponent+0x70>
 80056c2:	f10d 0207 	add.w	r2, sp, #7
 80056c6:	4617      	mov	r7, r2
 80056c8:	260a      	movs	r6, #10
 80056ca:	4694      	mov	ip, r2
 80056cc:	fb91 f5f6 	sdiv	r5, r1, r6
 80056d0:	fb06 1415 	mls	r4, r6, r5, r1
 80056d4:	3430      	adds	r4, #48	; 0x30
 80056d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80056da:	460c      	mov	r4, r1
 80056dc:	2c63      	cmp	r4, #99	; 0x63
 80056de:	f102 32ff 	add.w	r2, r2, #4294967295
 80056e2:	4629      	mov	r1, r5
 80056e4:	dcf1      	bgt.n	80056ca <__exponent+0x22>
 80056e6:	3130      	adds	r1, #48	; 0x30
 80056e8:	f1ac 0402 	sub.w	r4, ip, #2
 80056ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056f0:	1c41      	adds	r1, r0, #1
 80056f2:	4622      	mov	r2, r4
 80056f4:	42ba      	cmp	r2, r7
 80056f6:	d30a      	bcc.n	800570e <__exponent+0x66>
 80056f8:	f10d 0209 	add.w	r2, sp, #9
 80056fc:	eba2 020c 	sub.w	r2, r2, ip
 8005700:	42bc      	cmp	r4, r7
 8005702:	bf88      	it	hi
 8005704:	2200      	movhi	r2, #0
 8005706:	4413      	add	r3, r2
 8005708:	1a18      	subs	r0, r3, r0
 800570a:	b003      	add	sp, #12
 800570c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005712:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005716:	e7ed      	b.n	80056f4 <__exponent+0x4c>
 8005718:	2330      	movs	r3, #48	; 0x30
 800571a:	3130      	adds	r1, #48	; 0x30
 800571c:	7083      	strb	r3, [r0, #2]
 800571e:	70c1      	strb	r1, [r0, #3]
 8005720:	1d03      	adds	r3, r0, #4
 8005722:	e7f1      	b.n	8005708 <__exponent+0x60>
 8005724:	0000      	movs	r0, r0
	...

08005728 <_printf_float>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	b08b      	sub	sp, #44	; 0x2c
 800572e:	460c      	mov	r4, r1
 8005730:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005734:	4616      	mov	r6, r2
 8005736:	461f      	mov	r7, r3
 8005738:	4605      	mov	r5, r0
 800573a:	f000 fd61 	bl	8006200 <_localeconv_r>
 800573e:	f8d0 b000 	ldr.w	fp, [r0]
 8005742:	4658      	mov	r0, fp
 8005744:	f7fa fdcc 	bl	80002e0 <strlen>
 8005748:	2300      	movs	r3, #0
 800574a:	9308      	str	r3, [sp, #32]
 800574c:	f8d8 3000 	ldr.w	r3, [r8]
 8005750:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	3307      	adds	r3, #7
 8005758:	f023 0307 	bic.w	r3, r3, #7
 800575c:	f103 0108 	add.w	r1, r3, #8
 8005760:	f8c8 1000 	str.w	r1, [r8]
 8005764:	ed93 0b00 	vldr	d0, [r3]
 8005768:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80059c8 <_printf_float+0x2a0>
 800576c:	eeb0 7bc0 	vabs.f64	d7, d0
 8005770:	eeb4 7b46 	vcmp.f64	d7, d6
 8005774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005778:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800577c:	4682      	mov	sl, r0
 800577e:	dd24      	ble.n	80057ca <_printf_float+0xa2>
 8005780:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005788:	d502      	bpl.n	8005790 <_printf_float+0x68>
 800578a:	232d      	movs	r3, #45	; 0x2d
 800578c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005790:	498f      	ldr	r1, [pc, #572]	; (80059d0 <_printf_float+0x2a8>)
 8005792:	4b90      	ldr	r3, [pc, #576]	; (80059d4 <_printf_float+0x2ac>)
 8005794:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005798:	bf94      	ite	ls
 800579a:	4688      	movls	r8, r1
 800579c:	4698      	movhi	r8, r3
 800579e:	2303      	movs	r3, #3
 80057a0:	6123      	str	r3, [r4, #16]
 80057a2:	f022 0204 	bic.w	r2, r2, #4
 80057a6:	2300      	movs	r3, #0
 80057a8:	6022      	str	r2, [r4, #0]
 80057aa:	9304      	str	r3, [sp, #16]
 80057ac:	9700      	str	r7, [sp, #0]
 80057ae:	4633      	mov	r3, r6
 80057b0:	aa09      	add	r2, sp, #36	; 0x24
 80057b2:	4621      	mov	r1, r4
 80057b4:	4628      	mov	r0, r5
 80057b6:	f000 f9d1 	bl	8005b5c <_printf_common>
 80057ba:	3001      	adds	r0, #1
 80057bc:	f040 808a 	bne.w	80058d4 <_printf_float+0x1ac>
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	b00b      	add	sp, #44	; 0x2c
 80057c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80057ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d2:	d709      	bvc.n	80057e8 <_printf_float+0xc0>
 80057d4:	ee10 3a90 	vmov	r3, s1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bfbc      	itt	lt
 80057dc:	232d      	movlt	r3, #45	; 0x2d
 80057de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057e2:	497d      	ldr	r1, [pc, #500]	; (80059d8 <_printf_float+0x2b0>)
 80057e4:	4b7d      	ldr	r3, [pc, #500]	; (80059dc <_printf_float+0x2b4>)
 80057e6:	e7d5      	b.n	8005794 <_printf_float+0x6c>
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80057ee:	9104      	str	r1, [sp, #16]
 80057f0:	1c59      	adds	r1, r3, #1
 80057f2:	d13c      	bne.n	800586e <_printf_float+0x146>
 80057f4:	2306      	movs	r3, #6
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	2300      	movs	r3, #0
 80057fa:	9303      	str	r3, [sp, #12]
 80057fc:	ab08      	add	r3, sp, #32
 80057fe:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005806:	ab07      	add	r3, sp, #28
 8005808:	6861      	ldr	r1, [r4, #4]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	6022      	str	r2, [r4, #0]
 800580e:	f10d 031b 	add.w	r3, sp, #27
 8005812:	4628      	mov	r0, r5
 8005814:	f7ff fef6 	bl	8005604 <__cvt>
 8005818:	9b04      	ldr	r3, [sp, #16]
 800581a:	9907      	ldr	r1, [sp, #28]
 800581c:	2b47      	cmp	r3, #71	; 0x47
 800581e:	4680      	mov	r8, r0
 8005820:	d108      	bne.n	8005834 <_printf_float+0x10c>
 8005822:	1cc8      	adds	r0, r1, #3
 8005824:	db02      	blt.n	800582c <_printf_float+0x104>
 8005826:	6863      	ldr	r3, [r4, #4]
 8005828:	4299      	cmp	r1, r3
 800582a:	dd41      	ble.n	80058b0 <_printf_float+0x188>
 800582c:	f1a9 0902 	sub.w	r9, r9, #2
 8005830:	fa5f f989 	uxtb.w	r9, r9
 8005834:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005838:	d820      	bhi.n	800587c <_printf_float+0x154>
 800583a:	3901      	subs	r1, #1
 800583c:	464a      	mov	r2, r9
 800583e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005842:	9107      	str	r1, [sp, #28]
 8005844:	f7ff ff30 	bl	80056a8 <__exponent>
 8005848:	9a08      	ldr	r2, [sp, #32]
 800584a:	9004      	str	r0, [sp, #16]
 800584c:	1813      	adds	r3, r2, r0
 800584e:	2a01      	cmp	r2, #1
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	dc02      	bgt.n	800585a <_printf_float+0x132>
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	07d2      	lsls	r2, r2, #31
 8005858:	d501      	bpl.n	800585e <_printf_float+0x136>
 800585a:	3301      	adds	r3, #1
 800585c:	6123      	str	r3, [r4, #16]
 800585e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0a2      	beq.n	80057ac <_printf_float+0x84>
 8005866:	232d      	movs	r3, #45	; 0x2d
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586c:	e79e      	b.n	80057ac <_printf_float+0x84>
 800586e:	9904      	ldr	r1, [sp, #16]
 8005870:	2947      	cmp	r1, #71	; 0x47
 8005872:	d1c1      	bne.n	80057f8 <_printf_float+0xd0>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1bf      	bne.n	80057f8 <_printf_float+0xd0>
 8005878:	2301      	movs	r3, #1
 800587a:	e7bc      	b.n	80057f6 <_printf_float+0xce>
 800587c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005880:	d118      	bne.n	80058b4 <_printf_float+0x18c>
 8005882:	2900      	cmp	r1, #0
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	dd0b      	ble.n	80058a0 <_printf_float+0x178>
 8005888:	6121      	str	r1, [r4, #16]
 800588a:	b913      	cbnz	r3, 8005892 <_printf_float+0x16a>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	07d0      	lsls	r0, r2, #31
 8005890:	d502      	bpl.n	8005898 <_printf_float+0x170>
 8005892:	3301      	adds	r3, #1
 8005894:	440b      	add	r3, r1
 8005896:	6123      	str	r3, [r4, #16]
 8005898:	2300      	movs	r3, #0
 800589a:	65a1      	str	r1, [r4, #88]	; 0x58
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	e7de      	b.n	800585e <_printf_float+0x136>
 80058a0:	b913      	cbnz	r3, 80058a8 <_printf_float+0x180>
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	07d2      	lsls	r2, r2, #31
 80058a6:	d501      	bpl.n	80058ac <_printf_float+0x184>
 80058a8:	3302      	adds	r3, #2
 80058aa:	e7f4      	b.n	8005896 <_printf_float+0x16e>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e7f2      	b.n	8005896 <_printf_float+0x16e>
 80058b0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80058b4:	9b08      	ldr	r3, [sp, #32]
 80058b6:	4299      	cmp	r1, r3
 80058b8:	db05      	blt.n	80058c6 <_printf_float+0x19e>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	6121      	str	r1, [r4, #16]
 80058be:	07d8      	lsls	r0, r3, #31
 80058c0:	d5ea      	bpl.n	8005898 <_printf_float+0x170>
 80058c2:	1c4b      	adds	r3, r1, #1
 80058c4:	e7e7      	b.n	8005896 <_printf_float+0x16e>
 80058c6:	2900      	cmp	r1, #0
 80058c8:	bfd4      	ite	le
 80058ca:	f1c1 0202 	rsble	r2, r1, #2
 80058ce:	2201      	movgt	r2, #1
 80058d0:	4413      	add	r3, r2
 80058d2:	e7e0      	b.n	8005896 <_printf_float+0x16e>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	055a      	lsls	r2, r3, #21
 80058d8:	d407      	bmi.n	80058ea <_printf_float+0x1c2>
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	4642      	mov	r2, r8
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	d12a      	bne.n	800593e <_printf_float+0x216>
 80058e8:	e76a      	b.n	80057c0 <_printf_float+0x98>
 80058ea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058ee:	f240 80e0 	bls.w	8005ab2 <_printf_float+0x38a>
 80058f2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80058f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80058fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fe:	d133      	bne.n	8005968 <_printf_float+0x240>
 8005900:	4a37      	ldr	r2, [pc, #220]	; (80059e0 <_printf_float+0x2b8>)
 8005902:	2301      	movs	r3, #1
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f af58 	beq.w	80057c0 <_printf_float+0x98>
 8005910:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005914:	429a      	cmp	r2, r3
 8005916:	db02      	blt.n	800591e <_printf_float+0x1f6>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	07d8      	lsls	r0, r3, #31
 800591c:	d50f      	bpl.n	800593e <_printf_float+0x216>
 800591e:	4653      	mov	r3, sl
 8005920:	465a      	mov	r2, fp
 8005922:	4631      	mov	r1, r6
 8005924:	4628      	mov	r0, r5
 8005926:	47b8      	blx	r7
 8005928:	3001      	adds	r0, #1
 800592a:	f43f af49 	beq.w	80057c0 <_printf_float+0x98>
 800592e:	f04f 0800 	mov.w	r8, #0
 8005932:	f104 091a 	add.w	r9, r4, #26
 8005936:	9b08      	ldr	r3, [sp, #32]
 8005938:	3b01      	subs	r3, #1
 800593a:	4543      	cmp	r3, r8
 800593c:	dc09      	bgt.n	8005952 <_printf_float+0x22a>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	079b      	lsls	r3, r3, #30
 8005942:	f100 8106 	bmi.w	8005b52 <_printf_float+0x42a>
 8005946:	68e0      	ldr	r0, [r4, #12]
 8005948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594a:	4298      	cmp	r0, r3
 800594c:	bfb8      	it	lt
 800594e:	4618      	movlt	r0, r3
 8005950:	e738      	b.n	80057c4 <_printf_float+0x9c>
 8005952:	2301      	movs	r3, #1
 8005954:	464a      	mov	r2, r9
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	f43f af2f 	beq.w	80057c0 <_printf_float+0x98>
 8005962:	f108 0801 	add.w	r8, r8, #1
 8005966:	e7e6      	b.n	8005936 <_printf_float+0x20e>
 8005968:	9b07      	ldr	r3, [sp, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	dc3a      	bgt.n	80059e4 <_printf_float+0x2bc>
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <_printf_float+0x2b8>)
 8005970:	2301      	movs	r3, #1
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	f43f af21 	beq.w	80057c0 <_printf_float+0x98>
 800597e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005982:	4313      	orrs	r3, r2
 8005984:	d102      	bne.n	800598c <_printf_float+0x264>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	07d9      	lsls	r1, r3, #31
 800598a:	d5d8      	bpl.n	800593e <_printf_float+0x216>
 800598c:	4653      	mov	r3, sl
 800598e:	465a      	mov	r2, fp
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f af12 	beq.w	80057c0 <_printf_float+0x98>
 800599c:	f04f 0900 	mov.w	r9, #0
 80059a0:	f104 0a1a 	add.w	sl, r4, #26
 80059a4:	9b07      	ldr	r3, [sp, #28]
 80059a6:	425b      	negs	r3, r3
 80059a8:	454b      	cmp	r3, r9
 80059aa:	dc01      	bgt.n	80059b0 <_printf_float+0x288>
 80059ac:	9b08      	ldr	r3, [sp, #32]
 80059ae:	e795      	b.n	80058dc <_printf_float+0x1b4>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4652      	mov	r2, sl
 80059b4:	4631      	mov	r1, r6
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b8      	blx	r7
 80059ba:	3001      	adds	r0, #1
 80059bc:	f43f af00 	beq.w	80057c0 <_printf_float+0x98>
 80059c0:	f109 0901 	add.w	r9, r9, #1
 80059c4:	e7ee      	b.n	80059a4 <_printf_float+0x27c>
 80059c6:	bf00      	nop
 80059c8:	ffffffff 	.word	0xffffffff
 80059cc:	7fefffff 	.word	0x7fefffff
 80059d0:	08008a20 	.word	0x08008a20
 80059d4:	08008a24 	.word	0x08008a24
 80059d8:	08008a28 	.word	0x08008a28
 80059dc:	08008a2c 	.word	0x08008a2c
 80059e0:	08008a30 	.word	0x08008a30
 80059e4:	9a08      	ldr	r2, [sp, #32]
 80059e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059e8:	429a      	cmp	r2, r3
 80059ea:	bfa8      	it	ge
 80059ec:	461a      	movge	r2, r3
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	4691      	mov	r9, r2
 80059f2:	dc38      	bgt.n	8005a66 <_printf_float+0x33e>
 80059f4:	2300      	movs	r3, #0
 80059f6:	9305      	str	r3, [sp, #20]
 80059f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059fc:	f104 021a 	add.w	r2, r4, #26
 8005a00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a02:	9905      	ldr	r1, [sp, #20]
 8005a04:	9304      	str	r3, [sp, #16]
 8005a06:	eba3 0309 	sub.w	r3, r3, r9
 8005a0a:	428b      	cmp	r3, r1
 8005a0c:	dc33      	bgt.n	8005a76 <_printf_float+0x34e>
 8005a0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	db3c      	blt.n	8005a90 <_printf_float+0x368>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	07da      	lsls	r2, r3, #31
 8005a1a:	d439      	bmi.n	8005a90 <_printf_float+0x368>
 8005a1c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005a20:	eba2 0903 	sub.w	r9, r2, r3
 8005a24:	9b04      	ldr	r3, [sp, #16]
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	4591      	cmp	r9, r2
 8005a2a:	bfa8      	it	ge
 8005a2c:	4691      	movge	r9, r2
 8005a2e:	f1b9 0f00 	cmp.w	r9, #0
 8005a32:	dc35      	bgt.n	8005aa0 <_printf_float+0x378>
 8005a34:	f04f 0800 	mov.w	r8, #0
 8005a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a3c:	f104 0a1a 	add.w	sl, r4, #26
 8005a40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	eba3 0309 	sub.w	r3, r3, r9
 8005a4a:	4543      	cmp	r3, r8
 8005a4c:	f77f af77 	ble.w	800593e <_printf_float+0x216>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4652      	mov	r2, sl
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f aeb0 	beq.w	80057c0 <_printf_float+0x98>
 8005a60:	f108 0801 	add.w	r8, r8, #1
 8005a64:	e7ec      	b.n	8005a40 <_printf_float+0x318>
 8005a66:	4613      	mov	r3, r2
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	d1bf      	bne.n	80059f4 <_printf_float+0x2cc>
 8005a74:	e6a4      	b.n	80057c0 <_printf_float+0x98>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	9204      	str	r2, [sp, #16]
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	f43f ae9d 	beq.w	80057c0 <_printf_float+0x98>
 8005a86:	9b05      	ldr	r3, [sp, #20]
 8005a88:	9a04      	ldr	r2, [sp, #16]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	9305      	str	r3, [sp, #20]
 8005a8e:	e7b7      	b.n	8005a00 <_printf_float+0x2d8>
 8005a90:	4653      	mov	r3, sl
 8005a92:	465a      	mov	r2, fp
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d1be      	bne.n	8005a1c <_printf_float+0x2f4>
 8005a9e:	e68f      	b.n	80057c0 <_printf_float+0x98>
 8005aa0:	9a04      	ldr	r2, [sp, #16]
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	4442      	add	r2, r8
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	d1c1      	bne.n	8005a34 <_printf_float+0x30c>
 8005ab0:	e686      	b.n	80057c0 <_printf_float+0x98>
 8005ab2:	9a08      	ldr	r2, [sp, #32]
 8005ab4:	2a01      	cmp	r2, #1
 8005ab6:	dc01      	bgt.n	8005abc <_printf_float+0x394>
 8005ab8:	07db      	lsls	r3, r3, #31
 8005aba:	d537      	bpl.n	8005b2c <_printf_float+0x404>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4642      	mov	r2, r8
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	47b8      	blx	r7
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	f43f ae7a 	beq.w	80057c0 <_printf_float+0x98>
 8005acc:	4653      	mov	r3, sl
 8005ace:	465a      	mov	r2, fp
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b8      	blx	r7
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f43f ae72 	beq.w	80057c0 <_printf_float+0x98>
 8005adc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005ae0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae8:	9b08      	ldr	r3, [sp, #32]
 8005aea:	d01a      	beq.n	8005b22 <_printf_float+0x3fa>
 8005aec:	3b01      	subs	r3, #1
 8005aee:	f108 0201 	add.w	r2, r8, #1
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	d10e      	bne.n	8005b1a <_printf_float+0x3f2>
 8005afc:	e660      	b.n	80057c0 <_printf_float+0x98>
 8005afe:	2301      	movs	r3, #1
 8005b00:	464a      	mov	r2, r9
 8005b02:	4631      	mov	r1, r6
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b8      	blx	r7
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f43f ae59 	beq.w	80057c0 <_printf_float+0x98>
 8005b0e:	f108 0801 	add.w	r8, r8, #1
 8005b12:	9b08      	ldr	r3, [sp, #32]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	4543      	cmp	r3, r8
 8005b18:	dcf1      	bgt.n	8005afe <_printf_float+0x3d6>
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b20:	e6dd      	b.n	80058de <_printf_float+0x1b6>
 8005b22:	f04f 0800 	mov.w	r8, #0
 8005b26:	f104 091a 	add.w	r9, r4, #26
 8005b2a:	e7f2      	b.n	8005b12 <_printf_float+0x3ea>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4642      	mov	r2, r8
 8005b30:	e7df      	b.n	8005af2 <_printf_float+0x3ca>
 8005b32:	2301      	movs	r3, #1
 8005b34:	464a      	mov	r2, r9
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f43f ae3f 	beq.w	80057c0 <_printf_float+0x98>
 8005b42:	f108 0801 	add.w	r8, r8, #1
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b4a:	1a5b      	subs	r3, r3, r1
 8005b4c:	4543      	cmp	r3, r8
 8005b4e:	dcf0      	bgt.n	8005b32 <_printf_float+0x40a>
 8005b50:	e6f9      	b.n	8005946 <_printf_float+0x21e>
 8005b52:	f04f 0800 	mov.w	r8, #0
 8005b56:	f104 0919 	add.w	r9, r4, #25
 8005b5a:	e7f4      	b.n	8005b46 <_printf_float+0x41e>

08005b5c <_printf_common>:
 8005b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b60:	4616      	mov	r6, r2
 8005b62:	4699      	mov	r9, r3
 8005b64:	688a      	ldr	r2, [r1, #8]
 8005b66:	690b      	ldr	r3, [r1, #16]
 8005b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	bfb8      	it	lt
 8005b70:	4613      	movlt	r3, r2
 8005b72:	6033      	str	r3, [r6, #0]
 8005b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b78:	4607      	mov	r7, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	b10a      	cbz	r2, 8005b82 <_printf_common+0x26>
 8005b7e:	3301      	adds	r3, #1
 8005b80:	6033      	str	r3, [r6, #0]
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	0699      	lsls	r1, r3, #26
 8005b86:	bf42      	ittt	mi
 8005b88:	6833      	ldrmi	r3, [r6, #0]
 8005b8a:	3302      	addmi	r3, #2
 8005b8c:	6033      	strmi	r3, [r6, #0]
 8005b8e:	6825      	ldr	r5, [r4, #0]
 8005b90:	f015 0506 	ands.w	r5, r5, #6
 8005b94:	d106      	bne.n	8005ba4 <_printf_common+0x48>
 8005b96:	f104 0a19 	add.w	sl, r4, #25
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	6832      	ldr	r2, [r6, #0]
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	dc26      	bgt.n	8005bf2 <_printf_common+0x96>
 8005ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ba8:	1e13      	subs	r3, r2, #0
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	bf18      	it	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	0692      	lsls	r2, r2, #26
 8005bb2:	d42b      	bmi.n	8005c0c <_printf_common+0xb0>
 8005bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bb8:	4649      	mov	r1, r9
 8005bba:	4638      	mov	r0, r7
 8005bbc:	47c0      	blx	r8
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d01e      	beq.n	8005c00 <_printf_common+0xa4>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	6922      	ldr	r2, [r4, #16]
 8005bc6:	f003 0306 	and.w	r3, r3, #6
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	bf02      	ittt	eq
 8005bce:	68e5      	ldreq	r5, [r4, #12]
 8005bd0:	6833      	ldreq	r3, [r6, #0]
 8005bd2:	1aed      	subeq	r5, r5, r3
 8005bd4:	68a3      	ldr	r3, [r4, #8]
 8005bd6:	bf0c      	ite	eq
 8005bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bdc:	2500      	movne	r5, #0
 8005bde:	4293      	cmp	r3, r2
 8005be0:	bfc4      	itt	gt
 8005be2:	1a9b      	subgt	r3, r3, r2
 8005be4:	18ed      	addgt	r5, r5, r3
 8005be6:	2600      	movs	r6, #0
 8005be8:	341a      	adds	r4, #26
 8005bea:	42b5      	cmp	r5, r6
 8005bec:	d11a      	bne.n	8005c24 <_printf_common+0xc8>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	e008      	b.n	8005c04 <_printf_common+0xa8>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	47c0      	blx	r8
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d103      	bne.n	8005c08 <_printf_common+0xac>
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	3501      	adds	r5, #1
 8005c0a:	e7c6      	b.n	8005b9a <_printf_common+0x3e>
 8005c0c:	18e1      	adds	r1, r4, r3
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	2030      	movs	r0, #48	; 0x30
 8005c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c16:	4422      	add	r2, r4
 8005c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c20:	3302      	adds	r3, #2
 8005c22:	e7c7      	b.n	8005bb4 <_printf_common+0x58>
 8005c24:	2301      	movs	r3, #1
 8005c26:	4622      	mov	r2, r4
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	47c0      	blx	r8
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d0e6      	beq.n	8005c00 <_printf_common+0xa4>
 8005c32:	3601      	adds	r6, #1
 8005c34:	e7d9      	b.n	8005bea <_printf_common+0x8e>
	...

08005c38 <_printf_i>:
 8005c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	7e0f      	ldrb	r7, [r1, #24]
 8005c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c40:	2f78      	cmp	r7, #120	; 0x78
 8005c42:	4691      	mov	r9, r2
 8005c44:	4680      	mov	r8, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	469a      	mov	sl, r3
 8005c4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c4e:	d807      	bhi.n	8005c60 <_printf_i+0x28>
 8005c50:	2f62      	cmp	r7, #98	; 0x62
 8005c52:	d80a      	bhi.n	8005c6a <_printf_i+0x32>
 8005c54:	2f00      	cmp	r7, #0
 8005c56:	f000 80d4 	beq.w	8005e02 <_printf_i+0x1ca>
 8005c5a:	2f58      	cmp	r7, #88	; 0x58
 8005c5c:	f000 80c0 	beq.w	8005de0 <_printf_i+0x1a8>
 8005c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c68:	e03a      	b.n	8005ce0 <_printf_i+0xa8>
 8005c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c6e:	2b15      	cmp	r3, #21
 8005c70:	d8f6      	bhi.n	8005c60 <_printf_i+0x28>
 8005c72:	a101      	add	r1, pc, #4	; (adr r1, 8005c78 <_printf_i+0x40>)
 8005c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c78:	08005cd1 	.word	0x08005cd1
 8005c7c:	08005ce5 	.word	0x08005ce5
 8005c80:	08005c61 	.word	0x08005c61
 8005c84:	08005c61 	.word	0x08005c61
 8005c88:	08005c61 	.word	0x08005c61
 8005c8c:	08005c61 	.word	0x08005c61
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005c61 	.word	0x08005c61
 8005c98:	08005c61 	.word	0x08005c61
 8005c9c:	08005c61 	.word	0x08005c61
 8005ca0:	08005c61 	.word	0x08005c61
 8005ca4:	08005de9 	.word	0x08005de9
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005da3 	.word	0x08005da3
 8005cb0:	08005c61 	.word	0x08005c61
 8005cb4:	08005c61 	.word	0x08005c61
 8005cb8:	08005e0b 	.word	0x08005e0b
 8005cbc:	08005c61 	.word	0x08005c61
 8005cc0:	08005d11 	.word	0x08005d11
 8005cc4:	08005c61 	.word	0x08005c61
 8005cc8:	08005c61 	.word	0x08005c61
 8005ccc:	08005dab 	.word	0x08005dab
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	1d1a      	adds	r2, r3, #4
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	602a      	str	r2, [r5, #0]
 8005cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e09f      	b.n	8005e24 <_printf_i+0x1ec>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	682b      	ldr	r3, [r5, #0]
 8005ce8:	0607      	lsls	r7, r0, #24
 8005cea:	f103 0104 	add.w	r1, r3, #4
 8005cee:	6029      	str	r1, [r5, #0]
 8005cf0:	d501      	bpl.n	8005cf6 <_printf_i+0xbe>
 8005cf2:	681e      	ldr	r6, [r3, #0]
 8005cf4:	e003      	b.n	8005cfe <_printf_i+0xc6>
 8005cf6:	0646      	lsls	r6, r0, #25
 8005cf8:	d5fb      	bpl.n	8005cf2 <_printf_i+0xba>
 8005cfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	da03      	bge.n	8005d0a <_printf_i+0xd2>
 8005d02:	232d      	movs	r3, #45	; 0x2d
 8005d04:	4276      	negs	r6, r6
 8005d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d0a:	485a      	ldr	r0, [pc, #360]	; (8005e74 <_printf_i+0x23c>)
 8005d0c:	230a      	movs	r3, #10
 8005d0e:	e012      	b.n	8005d36 <_printf_i+0xfe>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	6820      	ldr	r0, [r4, #0]
 8005d14:	1d19      	adds	r1, r3, #4
 8005d16:	6029      	str	r1, [r5, #0]
 8005d18:	0605      	lsls	r5, r0, #24
 8005d1a:	d501      	bpl.n	8005d20 <_printf_i+0xe8>
 8005d1c:	681e      	ldr	r6, [r3, #0]
 8005d1e:	e002      	b.n	8005d26 <_printf_i+0xee>
 8005d20:	0641      	lsls	r1, r0, #25
 8005d22:	d5fb      	bpl.n	8005d1c <_printf_i+0xe4>
 8005d24:	881e      	ldrh	r6, [r3, #0]
 8005d26:	4853      	ldr	r0, [pc, #332]	; (8005e74 <_printf_i+0x23c>)
 8005d28:	2f6f      	cmp	r7, #111	; 0x6f
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2308      	moveq	r3, #8
 8005d2e:	230a      	movne	r3, #10
 8005d30:	2100      	movs	r1, #0
 8005d32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d36:	6865      	ldr	r5, [r4, #4]
 8005d38:	60a5      	str	r5, [r4, #8]
 8005d3a:	2d00      	cmp	r5, #0
 8005d3c:	bfa2      	ittt	ge
 8005d3e:	6821      	ldrge	r1, [r4, #0]
 8005d40:	f021 0104 	bicge.w	r1, r1, #4
 8005d44:	6021      	strge	r1, [r4, #0]
 8005d46:	b90e      	cbnz	r6, 8005d4c <_printf_i+0x114>
 8005d48:	2d00      	cmp	r5, #0
 8005d4a:	d04b      	beq.n	8005de4 <_printf_i+0x1ac>
 8005d4c:	4615      	mov	r5, r2
 8005d4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d52:	fb03 6711 	mls	r7, r3, r1, r6
 8005d56:	5dc7      	ldrb	r7, [r0, r7]
 8005d58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d5c:	4637      	mov	r7, r6
 8005d5e:	42bb      	cmp	r3, r7
 8005d60:	460e      	mov	r6, r1
 8005d62:	d9f4      	bls.n	8005d4e <_printf_i+0x116>
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d10b      	bne.n	8005d80 <_printf_i+0x148>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	07de      	lsls	r6, r3, #31
 8005d6c:	d508      	bpl.n	8005d80 <_printf_i+0x148>
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	6861      	ldr	r1, [r4, #4]
 8005d72:	4299      	cmp	r1, r3
 8005d74:	bfde      	ittt	le
 8005d76:	2330      	movle	r3, #48	; 0x30
 8005d78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d80:	1b52      	subs	r2, r2, r5
 8005d82:	6122      	str	r2, [r4, #16]
 8005d84:	f8cd a000 	str.w	sl, [sp]
 8005d88:	464b      	mov	r3, r9
 8005d8a:	aa03      	add	r2, sp, #12
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4640      	mov	r0, r8
 8005d90:	f7ff fee4 	bl	8005b5c <_printf_common>
 8005d94:	3001      	adds	r0, #1
 8005d96:	d14a      	bne.n	8005e2e <_printf_i+0x1f6>
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9c:	b004      	add	sp, #16
 8005d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	f043 0320 	orr.w	r3, r3, #32
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	4833      	ldr	r0, [pc, #204]	; (8005e78 <_printf_i+0x240>)
 8005dac:	2778      	movs	r7, #120	; 0x78
 8005dae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	6829      	ldr	r1, [r5, #0]
 8005db6:	061f      	lsls	r7, r3, #24
 8005db8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dbc:	d402      	bmi.n	8005dc4 <_printf_i+0x18c>
 8005dbe:	065f      	lsls	r7, r3, #25
 8005dc0:	bf48      	it	mi
 8005dc2:	b2b6      	uxthmi	r6, r6
 8005dc4:	07df      	lsls	r7, r3, #31
 8005dc6:	bf48      	it	mi
 8005dc8:	f043 0320 	orrmi.w	r3, r3, #32
 8005dcc:	6029      	str	r1, [r5, #0]
 8005dce:	bf48      	it	mi
 8005dd0:	6023      	strmi	r3, [r4, #0]
 8005dd2:	b91e      	cbnz	r6, 8005ddc <_printf_i+0x1a4>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	f023 0320 	bic.w	r3, r3, #32
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	2310      	movs	r3, #16
 8005dde:	e7a7      	b.n	8005d30 <_printf_i+0xf8>
 8005de0:	4824      	ldr	r0, [pc, #144]	; (8005e74 <_printf_i+0x23c>)
 8005de2:	e7e4      	b.n	8005dae <_printf_i+0x176>
 8005de4:	4615      	mov	r5, r2
 8005de6:	e7bd      	b.n	8005d64 <_printf_i+0x12c>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	6826      	ldr	r6, [r4, #0]
 8005dec:	6961      	ldr	r1, [r4, #20]
 8005dee:	1d18      	adds	r0, r3, #4
 8005df0:	6028      	str	r0, [r5, #0]
 8005df2:	0635      	lsls	r5, r6, #24
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	d501      	bpl.n	8005dfc <_printf_i+0x1c4>
 8005df8:	6019      	str	r1, [r3, #0]
 8005dfa:	e002      	b.n	8005e02 <_printf_i+0x1ca>
 8005dfc:	0670      	lsls	r0, r6, #25
 8005dfe:	d5fb      	bpl.n	8005df8 <_printf_i+0x1c0>
 8005e00:	8019      	strh	r1, [r3, #0]
 8005e02:	2300      	movs	r3, #0
 8005e04:	6123      	str	r3, [r4, #16]
 8005e06:	4615      	mov	r5, r2
 8005e08:	e7bc      	b.n	8005d84 <_printf_i+0x14c>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	1d1a      	adds	r2, r3, #4
 8005e0e:	602a      	str	r2, [r5, #0]
 8005e10:	681d      	ldr	r5, [r3, #0]
 8005e12:	6862      	ldr	r2, [r4, #4]
 8005e14:	2100      	movs	r1, #0
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7fa fa12 	bl	8000240 <memchr>
 8005e1c:	b108      	cbz	r0, 8005e22 <_printf_i+0x1ea>
 8005e1e:	1b40      	subs	r0, r0, r5
 8005e20:	6060      	str	r0, [r4, #4]
 8005e22:	6863      	ldr	r3, [r4, #4]
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	2300      	movs	r3, #0
 8005e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2c:	e7aa      	b.n	8005d84 <_printf_i+0x14c>
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4649      	mov	r1, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	47d0      	blx	sl
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d0ad      	beq.n	8005d98 <_printf_i+0x160>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	079b      	lsls	r3, r3, #30
 8005e40:	d413      	bmi.n	8005e6a <_printf_i+0x232>
 8005e42:	68e0      	ldr	r0, [r4, #12]
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	4298      	cmp	r0, r3
 8005e48:	bfb8      	it	lt
 8005e4a:	4618      	movlt	r0, r3
 8005e4c:	e7a6      	b.n	8005d9c <_printf_i+0x164>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	4632      	mov	r2, r6
 8005e52:	4649      	mov	r1, r9
 8005e54:	4640      	mov	r0, r8
 8005e56:	47d0      	blx	sl
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d09d      	beq.n	8005d98 <_printf_i+0x160>
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	9903      	ldr	r1, [sp, #12]
 8005e62:	1a5b      	subs	r3, r3, r1
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dcf2      	bgt.n	8005e4e <_printf_i+0x216>
 8005e68:	e7eb      	b.n	8005e42 <_printf_i+0x20a>
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	f104 0619 	add.w	r6, r4, #25
 8005e70:	e7f5      	b.n	8005e5e <_printf_i+0x226>
 8005e72:	bf00      	nop
 8005e74:	08008a32 	.word	0x08008a32
 8005e78:	08008a43 	.word	0x08008a43

08005e7c <std>:
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	4604      	mov	r4, r0
 8005e82:	e9c0 3300 	strd	r3, r3, [r0]
 8005e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e8a:	6083      	str	r3, [r0, #8]
 8005e8c:	8181      	strh	r1, [r0, #12]
 8005e8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e90:	81c2      	strh	r2, [r0, #14]
 8005e92:	6183      	str	r3, [r0, #24]
 8005e94:	4619      	mov	r1, r3
 8005e96:	2208      	movs	r2, #8
 8005e98:	305c      	adds	r0, #92	; 0x5c
 8005e9a:	f000 f9a9 	bl	80061f0 <memset>
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <std+0x58>)
 8005ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <std+0x5c>)
 8005ea4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <std+0x60>)
 8005ea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <std+0x64>)
 8005eac:	6323      	str	r3, [r4, #48]	; 0x30
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <std+0x68>)
 8005eb0:	6224      	str	r4, [r4, #32]
 8005eb2:	429c      	cmp	r4, r3
 8005eb4:	d006      	beq.n	8005ec4 <std+0x48>
 8005eb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005eba:	4294      	cmp	r4, r2
 8005ebc:	d002      	beq.n	8005ec4 <std+0x48>
 8005ebe:	33d0      	adds	r3, #208	; 0xd0
 8005ec0:	429c      	cmp	r4, r3
 8005ec2:	d105      	bne.n	8005ed0 <std+0x54>
 8005ec4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ecc:	f000 ba0c 	b.w	80062e8 <__retarget_lock_init_recursive>
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	bf00      	nop
 8005ed4:	08006041 	.word	0x08006041
 8005ed8:	08006063 	.word	0x08006063
 8005edc:	0800609b 	.word	0x0800609b
 8005ee0:	080060bf 	.word	0x080060bf
 8005ee4:	20000a3c 	.word	0x20000a3c

08005ee8 <stdio_exit_handler>:
 8005ee8:	4a02      	ldr	r2, [pc, #8]	; (8005ef4 <stdio_exit_handler+0xc>)
 8005eea:	4903      	ldr	r1, [pc, #12]	; (8005ef8 <stdio_exit_handler+0x10>)
 8005eec:	4803      	ldr	r0, [pc, #12]	; (8005efc <stdio_exit_handler+0x14>)
 8005eee:	f000 b869 	b.w	8005fc4 <_fwalk_sglue>
 8005ef2:	bf00      	nop
 8005ef4:	20000018 	.word	0x20000018
 8005ef8:	08007e15 	.word	0x08007e15
 8005efc:	20000024 	.word	0x20000024

08005f00 <cleanup_stdio>:
 8005f00:	6841      	ldr	r1, [r0, #4]
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <cleanup_stdio+0x34>)
 8005f04:	4299      	cmp	r1, r3
 8005f06:	b510      	push	{r4, lr}
 8005f08:	4604      	mov	r4, r0
 8005f0a:	d001      	beq.n	8005f10 <cleanup_stdio+0x10>
 8005f0c:	f001 ff82 	bl	8007e14 <_fflush_r>
 8005f10:	68a1      	ldr	r1, [r4, #8]
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <cleanup_stdio+0x38>)
 8005f14:	4299      	cmp	r1, r3
 8005f16:	d002      	beq.n	8005f1e <cleanup_stdio+0x1e>
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f001 ff7b 	bl	8007e14 <_fflush_r>
 8005f1e:	68e1      	ldr	r1, [r4, #12]
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <cleanup_stdio+0x3c>)
 8005f22:	4299      	cmp	r1, r3
 8005f24:	d004      	beq.n	8005f30 <cleanup_stdio+0x30>
 8005f26:	4620      	mov	r0, r4
 8005f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f2c:	f001 bf72 	b.w	8007e14 <_fflush_r>
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	bf00      	nop
 8005f34:	20000a3c 	.word	0x20000a3c
 8005f38:	20000aa4 	.word	0x20000aa4
 8005f3c:	20000b0c 	.word	0x20000b0c

08005f40 <global_stdio_init.part.0>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <global_stdio_init.part.0+0x30>)
 8005f44:	4c0b      	ldr	r4, [pc, #44]	; (8005f74 <global_stdio_init.part.0+0x34>)
 8005f46:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <global_stdio_init.part.0+0x38>)
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2104      	movs	r1, #4
 8005f50:	f7ff ff94 	bl	8005e7c <std>
 8005f54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2109      	movs	r1, #9
 8005f5c:	f7ff ff8e 	bl	8005e7c <std>
 8005f60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f64:	2202      	movs	r2, #2
 8005f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f6a:	2112      	movs	r1, #18
 8005f6c:	f7ff bf86 	b.w	8005e7c <std>
 8005f70:	20000b74 	.word	0x20000b74
 8005f74:	20000a3c 	.word	0x20000a3c
 8005f78:	08005ee9 	.word	0x08005ee9

08005f7c <__sfp_lock_acquire>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__sfp_lock_acquire+0x8>)
 8005f7e:	f000 b9b4 	b.w	80062ea <__retarget_lock_acquire_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000b7d 	.word	0x20000b7d

08005f88 <__sfp_lock_release>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__sfp_lock_release+0x8>)
 8005f8a:	f000 b9af 	b.w	80062ec <__retarget_lock_release_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000b7d 	.word	0x20000b7d

08005f94 <__sinit>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	4604      	mov	r4, r0
 8005f98:	f7ff fff0 	bl	8005f7c <__sfp_lock_acquire>
 8005f9c:	6a23      	ldr	r3, [r4, #32]
 8005f9e:	b11b      	cbz	r3, 8005fa8 <__sinit+0x14>
 8005fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa4:	f7ff bff0 	b.w	8005f88 <__sfp_lock_release>
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <__sinit+0x28>)
 8005faa:	6223      	str	r3, [r4, #32]
 8005fac:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <__sinit+0x2c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f5      	bne.n	8005fa0 <__sinit+0xc>
 8005fb4:	f7ff ffc4 	bl	8005f40 <global_stdio_init.part.0>
 8005fb8:	e7f2      	b.n	8005fa0 <__sinit+0xc>
 8005fba:	bf00      	nop
 8005fbc:	08005f01 	.word	0x08005f01
 8005fc0:	20000b74 	.word	0x20000b74

08005fc4 <_fwalk_sglue>:
 8005fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc8:	4607      	mov	r7, r0
 8005fca:	4688      	mov	r8, r1
 8005fcc:	4614      	mov	r4, r2
 8005fce:	2600      	movs	r6, #0
 8005fd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fd4:	f1b9 0901 	subs.w	r9, r9, #1
 8005fd8:	d505      	bpl.n	8005fe6 <_fwalk_sglue+0x22>
 8005fda:	6824      	ldr	r4, [r4, #0]
 8005fdc:	2c00      	cmp	r4, #0
 8005fde:	d1f7      	bne.n	8005fd0 <_fwalk_sglue+0xc>
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe6:	89ab      	ldrh	r3, [r5, #12]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d907      	bls.n	8005ffc <_fwalk_sglue+0x38>
 8005fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	d003      	beq.n	8005ffc <_fwalk_sglue+0x38>
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	47c0      	blx	r8
 8005ffa:	4306      	orrs	r6, r0
 8005ffc:	3568      	adds	r5, #104	; 0x68
 8005ffe:	e7e9      	b.n	8005fd4 <_fwalk_sglue+0x10>

08006000 <siprintf>:
 8006000:	b40e      	push	{r1, r2, r3}
 8006002:	b500      	push	{lr}
 8006004:	b09c      	sub	sp, #112	; 0x70
 8006006:	ab1d      	add	r3, sp, #116	; 0x74
 8006008:	9002      	str	r0, [sp, #8]
 800600a:	9006      	str	r0, [sp, #24]
 800600c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006010:	4809      	ldr	r0, [pc, #36]	; (8006038 <siprintf+0x38>)
 8006012:	9107      	str	r1, [sp, #28]
 8006014:	9104      	str	r1, [sp, #16]
 8006016:	4909      	ldr	r1, [pc, #36]	; (800603c <siprintf+0x3c>)
 8006018:	f853 2b04 	ldr.w	r2, [r3], #4
 800601c:	9105      	str	r1, [sp, #20]
 800601e:	6800      	ldr	r0, [r0, #0]
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	a902      	add	r1, sp, #8
 8006024:	f001 fc2e 	bl	8007884 <_svfiprintf_r>
 8006028:	9b02      	ldr	r3, [sp, #8]
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	b01c      	add	sp, #112	; 0x70
 8006030:	f85d eb04 	ldr.w	lr, [sp], #4
 8006034:	b003      	add	sp, #12
 8006036:	4770      	bx	lr
 8006038:	20000070 	.word	0x20000070
 800603c:	ffff0208 	.word	0xffff0208

08006040 <__sread>:
 8006040:	b510      	push	{r4, lr}
 8006042:	460c      	mov	r4, r1
 8006044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006048:	f000 f900 	bl	800624c <_read_r>
 800604c:	2800      	cmp	r0, #0
 800604e:	bfab      	itete	ge
 8006050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006052:	89a3      	ldrhlt	r3, [r4, #12]
 8006054:	181b      	addge	r3, r3, r0
 8006056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800605a:	bfac      	ite	ge
 800605c:	6563      	strge	r3, [r4, #84]	; 0x54
 800605e:	81a3      	strhlt	r3, [r4, #12]
 8006060:	bd10      	pop	{r4, pc}

08006062 <__swrite>:
 8006062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006066:	461f      	mov	r7, r3
 8006068:	898b      	ldrh	r3, [r1, #12]
 800606a:	05db      	lsls	r3, r3, #23
 800606c:	4605      	mov	r5, r0
 800606e:	460c      	mov	r4, r1
 8006070:	4616      	mov	r6, r2
 8006072:	d505      	bpl.n	8006080 <__swrite+0x1e>
 8006074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006078:	2302      	movs	r3, #2
 800607a:	2200      	movs	r2, #0
 800607c:	f000 f8d4 	bl	8006228 <_lseek_r>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	4632      	mov	r2, r6
 800608e:	463b      	mov	r3, r7
 8006090:	4628      	mov	r0, r5
 8006092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006096:	f000 b8eb 	b.w	8006270 <_write_r>

0800609a <__sseek>:
 800609a:	b510      	push	{r4, lr}
 800609c:	460c      	mov	r4, r1
 800609e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a2:	f000 f8c1 	bl	8006228 <_lseek_r>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	bf15      	itete	ne
 80060ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80060ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060b6:	81a3      	strheq	r3, [r4, #12]
 80060b8:	bf18      	it	ne
 80060ba:	81a3      	strhne	r3, [r4, #12]
 80060bc:	bd10      	pop	{r4, pc}

080060be <__sclose>:
 80060be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c2:	f000 b8a1 	b.w	8006208 <_close_r>

080060c6 <__swbuf_r>:
 80060c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c8:	460e      	mov	r6, r1
 80060ca:	4614      	mov	r4, r2
 80060cc:	4605      	mov	r5, r0
 80060ce:	b118      	cbz	r0, 80060d8 <__swbuf_r+0x12>
 80060d0:	6a03      	ldr	r3, [r0, #32]
 80060d2:	b90b      	cbnz	r3, 80060d8 <__swbuf_r+0x12>
 80060d4:	f7ff ff5e 	bl	8005f94 <__sinit>
 80060d8:	69a3      	ldr	r3, [r4, #24]
 80060da:	60a3      	str	r3, [r4, #8]
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	071a      	lsls	r2, r3, #28
 80060e0:	d525      	bpl.n	800612e <__swbuf_r+0x68>
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	b31b      	cbz	r3, 800612e <__swbuf_r+0x68>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	6922      	ldr	r2, [r4, #16]
 80060ea:	1a98      	subs	r0, r3, r2
 80060ec:	6963      	ldr	r3, [r4, #20]
 80060ee:	b2f6      	uxtb	r6, r6
 80060f0:	4283      	cmp	r3, r0
 80060f2:	4637      	mov	r7, r6
 80060f4:	dc04      	bgt.n	8006100 <__swbuf_r+0x3a>
 80060f6:	4621      	mov	r1, r4
 80060f8:	4628      	mov	r0, r5
 80060fa:	f001 fe8b 	bl	8007e14 <_fflush_r>
 80060fe:	b9e0      	cbnz	r0, 800613a <__swbuf_r+0x74>
 8006100:	68a3      	ldr	r3, [r4, #8]
 8006102:	3b01      	subs	r3, #1
 8006104:	60a3      	str	r3, [r4, #8]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	6022      	str	r2, [r4, #0]
 800610c:	701e      	strb	r6, [r3, #0]
 800610e:	6962      	ldr	r2, [r4, #20]
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	429a      	cmp	r2, r3
 8006114:	d004      	beq.n	8006120 <__swbuf_r+0x5a>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	07db      	lsls	r3, r3, #31
 800611a:	d506      	bpl.n	800612a <__swbuf_r+0x64>
 800611c:	2e0a      	cmp	r6, #10
 800611e:	d104      	bne.n	800612a <__swbuf_r+0x64>
 8006120:	4621      	mov	r1, r4
 8006122:	4628      	mov	r0, r5
 8006124:	f001 fe76 	bl	8007e14 <_fflush_r>
 8006128:	b938      	cbnz	r0, 800613a <__swbuf_r+0x74>
 800612a:	4638      	mov	r0, r7
 800612c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612e:	4621      	mov	r1, r4
 8006130:	4628      	mov	r0, r5
 8006132:	f000 f805 	bl	8006140 <__swsetup_r>
 8006136:	2800      	cmp	r0, #0
 8006138:	d0d5      	beq.n	80060e6 <__swbuf_r+0x20>
 800613a:	f04f 37ff 	mov.w	r7, #4294967295
 800613e:	e7f4      	b.n	800612a <__swbuf_r+0x64>

08006140 <__swsetup_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <__swsetup_r+0xac>)
 8006144:	4605      	mov	r5, r0
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	460c      	mov	r4, r1
 800614a:	b118      	cbz	r0, 8006154 <__swsetup_r+0x14>
 800614c:	6a03      	ldr	r3, [r0, #32]
 800614e:	b90b      	cbnz	r3, 8006154 <__swsetup_r+0x14>
 8006150:	f7ff ff20 	bl	8005f94 <__sinit>
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800615a:	0718      	lsls	r0, r3, #28
 800615c:	d422      	bmi.n	80061a4 <__swsetup_r+0x64>
 800615e:	06d9      	lsls	r1, r3, #27
 8006160:	d407      	bmi.n	8006172 <__swsetup_r+0x32>
 8006162:	2309      	movs	r3, #9
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	e034      	b.n	80061dc <__swsetup_r+0x9c>
 8006172:	0758      	lsls	r0, r3, #29
 8006174:	d512      	bpl.n	800619c <__swsetup_r+0x5c>
 8006176:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006178:	b141      	cbz	r1, 800618c <__swsetup_r+0x4c>
 800617a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800617e:	4299      	cmp	r1, r3
 8006180:	d002      	beq.n	8006188 <__swsetup_r+0x48>
 8006182:	4628      	mov	r0, r5
 8006184:	f000 fea8 	bl	8006ed8 <_free_r>
 8006188:	2300      	movs	r3, #0
 800618a:	6363      	str	r3, [r4, #52]	; 0x34
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	2300      	movs	r3, #0
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	f043 0308 	orr.w	r3, r3, #8
 80061a2:	81a3      	strh	r3, [r4, #12]
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	b94b      	cbnz	r3, 80061bc <__swsetup_r+0x7c>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b2:	d003      	beq.n	80061bc <__swsetup_r+0x7c>
 80061b4:	4621      	mov	r1, r4
 80061b6:	4628      	mov	r0, r5
 80061b8:	f001 fe7a 	bl	8007eb0 <__smakebuf_r>
 80061bc:	89a0      	ldrh	r0, [r4, #12]
 80061be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061c2:	f010 0301 	ands.w	r3, r0, #1
 80061c6:	d00a      	beq.n	80061de <__swsetup_r+0x9e>
 80061c8:	2300      	movs	r3, #0
 80061ca:	60a3      	str	r3, [r4, #8]
 80061cc:	6963      	ldr	r3, [r4, #20]
 80061ce:	425b      	negs	r3, r3
 80061d0:	61a3      	str	r3, [r4, #24]
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	b943      	cbnz	r3, 80061e8 <__swsetup_r+0xa8>
 80061d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061da:	d1c4      	bne.n	8006166 <__swsetup_r+0x26>
 80061dc:	bd38      	pop	{r3, r4, r5, pc}
 80061de:	0781      	lsls	r1, r0, #30
 80061e0:	bf58      	it	pl
 80061e2:	6963      	ldrpl	r3, [r4, #20]
 80061e4:	60a3      	str	r3, [r4, #8]
 80061e6:	e7f4      	b.n	80061d2 <__swsetup_r+0x92>
 80061e8:	2000      	movs	r0, #0
 80061ea:	e7f7      	b.n	80061dc <__swsetup_r+0x9c>
 80061ec:	20000070 	.word	0x20000070

080061f0 <memset>:
 80061f0:	4402      	add	r2, r0
 80061f2:	4603      	mov	r3, r0
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d100      	bne.n	80061fa <memset+0xa>
 80061f8:	4770      	bx	lr
 80061fa:	f803 1b01 	strb.w	r1, [r3], #1
 80061fe:	e7f9      	b.n	80061f4 <memset+0x4>

08006200 <_localeconv_r>:
 8006200:	4800      	ldr	r0, [pc, #0]	; (8006204 <_localeconv_r+0x4>)
 8006202:	4770      	bx	lr
 8006204:	20000164 	.word	0x20000164

08006208 <_close_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d06      	ldr	r5, [pc, #24]	; (8006224 <_close_r+0x1c>)
 800620c:	2300      	movs	r3, #0
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	f7fb faef 	bl	80017f6 <_close>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_close_r+0x1a>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_close_r+0x1a>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20000b78 	.word	0x20000b78

08006228 <_lseek_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d07      	ldr	r5, [pc, #28]	; (8006248 <_lseek_r+0x20>)
 800622c:	4604      	mov	r4, r0
 800622e:	4608      	mov	r0, r1
 8006230:	4611      	mov	r1, r2
 8006232:	2200      	movs	r2, #0
 8006234:	602a      	str	r2, [r5, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	f7fb fb04 	bl	8001844 <_lseek>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_lseek_r+0x1e>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_lseek_r+0x1e>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	20000b78 	.word	0x20000b78

0800624c <_read_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d07      	ldr	r5, [pc, #28]	; (800626c <_read_r+0x20>)
 8006250:	4604      	mov	r4, r0
 8006252:	4608      	mov	r0, r1
 8006254:	4611      	mov	r1, r2
 8006256:	2200      	movs	r2, #0
 8006258:	602a      	str	r2, [r5, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f7fb fa92 	bl	8001784 <_read>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_read_r+0x1e>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	b103      	cbz	r3, 800626a <_read_r+0x1e>
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	20000b78 	.word	0x20000b78

08006270 <_write_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d07      	ldr	r5, [pc, #28]	; (8006290 <_write_r+0x20>)
 8006274:	4604      	mov	r4, r0
 8006276:	4608      	mov	r0, r1
 8006278:	4611      	mov	r1, r2
 800627a:	2200      	movs	r2, #0
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fb fa9d 	bl	80017be <_write>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_write_r+0x1e>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_write_r+0x1e>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20000b78 	.word	0x20000b78

08006294 <__errno>:
 8006294:	4b01      	ldr	r3, [pc, #4]	; (800629c <__errno+0x8>)
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000070 	.word	0x20000070

080062a0 <__libc_init_array>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	4d0d      	ldr	r5, [pc, #52]	; (80062d8 <__libc_init_array+0x38>)
 80062a4:	4c0d      	ldr	r4, [pc, #52]	; (80062dc <__libc_init_array+0x3c>)
 80062a6:	1b64      	subs	r4, r4, r5
 80062a8:	10a4      	asrs	r4, r4, #2
 80062aa:	2600      	movs	r6, #0
 80062ac:	42a6      	cmp	r6, r4
 80062ae:	d109      	bne.n	80062c4 <__libc_init_array+0x24>
 80062b0:	4d0b      	ldr	r5, [pc, #44]	; (80062e0 <__libc_init_array+0x40>)
 80062b2:	4c0c      	ldr	r4, [pc, #48]	; (80062e4 <__libc_init_array+0x44>)
 80062b4:	f002 fa70 	bl	8008798 <_init>
 80062b8:	1b64      	subs	r4, r4, r5
 80062ba:	10a4      	asrs	r4, r4, #2
 80062bc:	2600      	movs	r6, #0
 80062be:	42a6      	cmp	r6, r4
 80062c0:	d105      	bne.n	80062ce <__libc_init_array+0x2e>
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c8:	4798      	blx	r3
 80062ca:	3601      	adds	r6, #1
 80062cc:	e7ee      	b.n	80062ac <__libc_init_array+0xc>
 80062ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d2:	4798      	blx	r3
 80062d4:	3601      	adds	r6, #1
 80062d6:	e7f2      	b.n	80062be <__libc_init_array+0x1e>
 80062d8:	0800a658 	.word	0x0800a658
 80062dc:	0800a658 	.word	0x0800a658
 80062e0:	0800a658 	.word	0x0800a658
 80062e4:	0800a65c 	.word	0x0800a65c

080062e8 <__retarget_lock_init_recursive>:
 80062e8:	4770      	bx	lr

080062ea <__retarget_lock_acquire_recursive>:
 80062ea:	4770      	bx	lr

080062ec <__retarget_lock_release_recursive>:
 80062ec:	4770      	bx	lr

080062ee <quorem>:
 80062ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f2:	6903      	ldr	r3, [r0, #16]
 80062f4:	690c      	ldr	r4, [r1, #16]
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	4607      	mov	r7, r0
 80062fa:	db7e      	blt.n	80063fa <quorem+0x10c>
 80062fc:	3c01      	subs	r4, #1
 80062fe:	f101 0814 	add.w	r8, r1, #20
 8006302:	f100 0514 	add.w	r5, r0, #20
 8006306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006314:	3301      	adds	r3, #1
 8006316:	429a      	cmp	r2, r3
 8006318:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800631c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006320:	fbb2 f6f3 	udiv	r6, r2, r3
 8006324:	d331      	bcc.n	800638a <quorem+0x9c>
 8006326:	f04f 0e00 	mov.w	lr, #0
 800632a:	4640      	mov	r0, r8
 800632c:	46ac      	mov	ip, r5
 800632e:	46f2      	mov	sl, lr
 8006330:	f850 2b04 	ldr.w	r2, [r0], #4
 8006334:	b293      	uxth	r3, r2
 8006336:	fb06 e303 	mla	r3, r6, r3, lr
 800633a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800633e:	0c1a      	lsrs	r2, r3, #16
 8006340:	b29b      	uxth	r3, r3
 8006342:	ebaa 0303 	sub.w	r3, sl, r3
 8006346:	f8dc a000 	ldr.w	sl, [ip]
 800634a:	fa13 f38a 	uxtah	r3, r3, sl
 800634e:	fb06 220e 	mla	r2, r6, lr, r2
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	9b00      	ldr	r3, [sp, #0]
 8006356:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800635a:	b292      	uxth	r2, r2
 800635c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006364:	f8bd 3000 	ldrh.w	r3, [sp]
 8006368:	4581      	cmp	r9, r0
 800636a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800636e:	f84c 3b04 	str.w	r3, [ip], #4
 8006372:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006376:	d2db      	bcs.n	8006330 <quorem+0x42>
 8006378:	f855 300b 	ldr.w	r3, [r5, fp]
 800637c:	b92b      	cbnz	r3, 800638a <quorem+0x9c>
 800637e:	9b01      	ldr	r3, [sp, #4]
 8006380:	3b04      	subs	r3, #4
 8006382:	429d      	cmp	r5, r3
 8006384:	461a      	mov	r2, r3
 8006386:	d32c      	bcc.n	80063e2 <quorem+0xf4>
 8006388:	613c      	str	r4, [r7, #16]
 800638a:	4638      	mov	r0, r7
 800638c:	f001 f920 	bl	80075d0 <__mcmp>
 8006390:	2800      	cmp	r0, #0
 8006392:	db22      	blt.n	80063da <quorem+0xec>
 8006394:	3601      	adds	r6, #1
 8006396:	4629      	mov	r1, r5
 8006398:	2000      	movs	r0, #0
 800639a:	f858 2b04 	ldr.w	r2, [r8], #4
 800639e:	f8d1 c000 	ldr.w	ip, [r1]
 80063a2:	b293      	uxth	r3, r2
 80063a4:	1ac3      	subs	r3, r0, r3
 80063a6:	0c12      	lsrs	r2, r2, #16
 80063a8:	fa13 f38c 	uxtah	r3, r3, ip
 80063ac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80063b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ba:	45c1      	cmp	r9, r8
 80063bc:	f841 3b04 	str.w	r3, [r1], #4
 80063c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063c4:	d2e9      	bcs.n	800639a <quorem+0xac>
 80063c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ce:	b922      	cbnz	r2, 80063da <quorem+0xec>
 80063d0:	3b04      	subs	r3, #4
 80063d2:	429d      	cmp	r5, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	d30a      	bcc.n	80063ee <quorem+0x100>
 80063d8:	613c      	str	r4, [r7, #16]
 80063da:	4630      	mov	r0, r6
 80063dc:	b003      	add	sp, #12
 80063de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	2a00      	cmp	r2, #0
 80063e8:	d1ce      	bne.n	8006388 <quorem+0x9a>
 80063ea:	3c01      	subs	r4, #1
 80063ec:	e7c9      	b.n	8006382 <quorem+0x94>
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	3b04      	subs	r3, #4
 80063f2:	2a00      	cmp	r2, #0
 80063f4:	d1f0      	bne.n	80063d8 <quorem+0xea>
 80063f6:	3c01      	subs	r4, #1
 80063f8:	e7eb      	b.n	80063d2 <quorem+0xe4>
 80063fa:	2000      	movs	r0, #0
 80063fc:	e7ee      	b.n	80063dc <quorem+0xee>
	...

08006400 <_dtoa_r>:
 8006400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	ed2d 8b02 	vpush	{d8}
 8006408:	69c5      	ldr	r5, [r0, #28]
 800640a:	b091      	sub	sp, #68	; 0x44
 800640c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006410:	ec59 8b10 	vmov	r8, r9, d0
 8006414:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006416:	9106      	str	r1, [sp, #24]
 8006418:	4606      	mov	r6, r0
 800641a:	9208      	str	r2, [sp, #32]
 800641c:	930c      	str	r3, [sp, #48]	; 0x30
 800641e:	b975      	cbnz	r5, 800643e <_dtoa_r+0x3e>
 8006420:	2010      	movs	r0, #16
 8006422:	f000 fda5 	bl	8006f70 <malloc>
 8006426:	4602      	mov	r2, r0
 8006428:	61f0      	str	r0, [r6, #28]
 800642a:	b920      	cbnz	r0, 8006436 <_dtoa_r+0x36>
 800642c:	4ba6      	ldr	r3, [pc, #664]	; (80066c8 <_dtoa_r+0x2c8>)
 800642e:	21ef      	movs	r1, #239	; 0xef
 8006430:	48a6      	ldr	r0, [pc, #664]	; (80066cc <_dtoa_r+0x2cc>)
 8006432:	f001 fdd3 	bl	8007fdc <__assert_func>
 8006436:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800643a:	6005      	str	r5, [r0, #0]
 800643c:	60c5      	str	r5, [r0, #12]
 800643e:	69f3      	ldr	r3, [r6, #28]
 8006440:	6819      	ldr	r1, [r3, #0]
 8006442:	b151      	cbz	r1, 800645a <_dtoa_r+0x5a>
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	604a      	str	r2, [r1, #4]
 8006448:	2301      	movs	r3, #1
 800644a:	4093      	lsls	r3, r2
 800644c:	608b      	str	r3, [r1, #8]
 800644e:	4630      	mov	r0, r6
 8006450:	f000 fe82 	bl	8007158 <_Bfree>
 8006454:	69f3      	ldr	r3, [r6, #28]
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f1b9 0300 	subs.w	r3, r9, #0
 800645e:	bfbb      	ittet	lt
 8006460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006464:	9303      	strlt	r3, [sp, #12]
 8006466:	2300      	movge	r3, #0
 8006468:	2201      	movlt	r2, #1
 800646a:	bfac      	ite	ge
 800646c:	6023      	strge	r3, [r4, #0]
 800646e:	6022      	strlt	r2, [r4, #0]
 8006470:	4b97      	ldr	r3, [pc, #604]	; (80066d0 <_dtoa_r+0x2d0>)
 8006472:	9c03      	ldr	r4, [sp, #12]
 8006474:	43a3      	bics	r3, r4
 8006476:	d11c      	bne.n	80064b2 <_dtoa_r+0xb2>
 8006478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800647a:	f242 730f 	movw	r3, #9999	; 0x270f
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006484:	ea53 0308 	orrs.w	r3, r3, r8
 8006488:	f000 84fb 	beq.w	8006e82 <_dtoa_r+0xa82>
 800648c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800648e:	b963      	cbnz	r3, 80064aa <_dtoa_r+0xaa>
 8006490:	4b90      	ldr	r3, [pc, #576]	; (80066d4 <_dtoa_r+0x2d4>)
 8006492:	e020      	b.n	80064d6 <_dtoa_r+0xd6>
 8006494:	4b90      	ldr	r3, [pc, #576]	; (80066d8 <_dtoa_r+0x2d8>)
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	3308      	adds	r3, #8
 800649a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	9801      	ldr	r0, [sp, #4]
 80064a0:	b011      	add	sp, #68	; 0x44
 80064a2:	ecbd 8b02 	vpop	{d8}
 80064a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064aa:	4b8a      	ldr	r3, [pc, #552]	; (80066d4 <_dtoa_r+0x2d4>)
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	3303      	adds	r3, #3
 80064b0:	e7f3      	b.n	800649a <_dtoa_r+0x9a>
 80064b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80064b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80064ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064be:	d10c      	bne.n	80064da <_dtoa_r+0xda>
 80064c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064c2:	2301      	movs	r3, #1
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 84d7 	beq.w	8006e7c <_dtoa_r+0xa7c>
 80064ce:	4b83      	ldr	r3, [pc, #524]	; (80066dc <_dtoa_r+0x2dc>)
 80064d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	e7e1      	b.n	800649e <_dtoa_r+0x9e>
 80064da:	aa0e      	add	r2, sp, #56	; 0x38
 80064dc:	a90f      	add	r1, sp, #60	; 0x3c
 80064de:	4630      	mov	r0, r6
 80064e0:	eeb0 0b48 	vmov.f64	d0, d8
 80064e4:	f001 f91a 	bl	800771c <__d2b>
 80064e8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80064ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ee:	4605      	mov	r5, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d046      	beq.n	8006582 <_dtoa_r+0x182>
 80064f4:	eeb0 7b48 	vmov.f64	d7, d8
 80064f8:	ee18 1a90 	vmov	r1, s17
 80064fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006500:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006504:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006508:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800650c:	2000      	movs	r0, #0
 800650e:	ee07 1a90 	vmov	s15, r1
 8006512:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8006516:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80066b0 <_dtoa_r+0x2b0>
 800651a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800651e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80066b8 <_dtoa_r+0x2b8>
 8006522:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006526:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80066c0 <_dtoa_r+0x2c0>
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006532:	eeb0 7b46 	vmov.f64	d7, d6
 8006536:	eea4 7b05 	vfma.f64	d7, d4, d5
 800653a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800653e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006546:	ee16 ba90 	vmov	fp, s13
 800654a:	9009      	str	r0, [sp, #36]	; 0x24
 800654c:	d508      	bpl.n	8006560 <_dtoa_r+0x160>
 800654e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006552:	eeb4 6b47 	vcmp.f64	d6, d7
 8006556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655a:	bf18      	it	ne
 800655c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006560:	f1bb 0f16 	cmp.w	fp, #22
 8006564:	d82b      	bhi.n	80065be <_dtoa_r+0x1be>
 8006566:	495e      	ldr	r1, [pc, #376]	; (80066e0 <_dtoa_r+0x2e0>)
 8006568:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800656c:	ed91 7b00 	vldr	d7, [r1]
 8006570:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006578:	d501      	bpl.n	800657e <_dtoa_r+0x17e>
 800657a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800657e:	2100      	movs	r1, #0
 8006580:	e01e      	b.n	80065c0 <_dtoa_r+0x1c0>
 8006582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006584:	4413      	add	r3, r2
 8006586:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800658a:	2920      	cmp	r1, #32
 800658c:	bfc1      	itttt	gt
 800658e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8006592:	408c      	lslgt	r4, r1
 8006594:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8006598:	fa28 f101 	lsrgt.w	r1, r8, r1
 800659c:	bfd6      	itet	le
 800659e:	f1c1 0120 	rsble	r1, r1, #32
 80065a2:	4321      	orrgt	r1, r4
 80065a4:	fa08 f101 	lslle.w	r1, r8, r1
 80065a8:	ee07 1a90 	vmov	s15, r1
 80065ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065b0:	3b01      	subs	r3, #1
 80065b2:	ee17 1a90 	vmov	r1, s15
 80065b6:	2001      	movs	r0, #1
 80065b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80065bc:	e7a7      	b.n	800650e <_dtoa_r+0x10e>
 80065be:	2101      	movs	r1, #1
 80065c0:	1ad2      	subs	r2, r2, r3
 80065c2:	1e53      	subs	r3, r2, #1
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	bf45      	ittet	mi
 80065c8:	f1c2 0301 	rsbmi	r3, r2, #1
 80065cc:	9304      	strmi	r3, [sp, #16]
 80065ce:	2300      	movpl	r3, #0
 80065d0:	2300      	movmi	r3, #0
 80065d2:	bf4c      	ite	mi
 80065d4:	9305      	strmi	r3, [sp, #20]
 80065d6:	9304      	strpl	r3, [sp, #16]
 80065d8:	f1bb 0f00 	cmp.w	fp, #0
 80065dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80065de:	db18      	blt.n	8006612 <_dtoa_r+0x212>
 80065e0:	9b05      	ldr	r3, [sp, #20]
 80065e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80065e6:	445b      	add	r3, fp
 80065e8:	9305      	str	r3, [sp, #20]
 80065ea:	2300      	movs	r3, #0
 80065ec:	9a06      	ldr	r2, [sp, #24]
 80065ee:	2a09      	cmp	r2, #9
 80065f0:	d848      	bhi.n	8006684 <_dtoa_r+0x284>
 80065f2:	2a05      	cmp	r2, #5
 80065f4:	bfc4      	itt	gt
 80065f6:	3a04      	subgt	r2, #4
 80065f8:	9206      	strgt	r2, [sp, #24]
 80065fa:	9a06      	ldr	r2, [sp, #24]
 80065fc:	f1a2 0202 	sub.w	r2, r2, #2
 8006600:	bfcc      	ite	gt
 8006602:	2400      	movgt	r4, #0
 8006604:	2401      	movle	r4, #1
 8006606:	2a03      	cmp	r2, #3
 8006608:	d847      	bhi.n	800669a <_dtoa_r+0x29a>
 800660a:	e8df f002 	tbb	[pc, r2]
 800660e:	2d0b      	.short	0x2d0b
 8006610:	392b      	.short	0x392b
 8006612:	9b04      	ldr	r3, [sp, #16]
 8006614:	2200      	movs	r2, #0
 8006616:	eba3 030b 	sub.w	r3, r3, fp
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	920a      	str	r2, [sp, #40]	; 0x28
 800661e:	f1cb 0300 	rsb	r3, fp, #0
 8006622:	e7e3      	b.n	80065ec <_dtoa_r+0x1ec>
 8006624:	2200      	movs	r2, #0
 8006626:	9207      	str	r2, [sp, #28]
 8006628:	9a08      	ldr	r2, [sp, #32]
 800662a:	2a00      	cmp	r2, #0
 800662c:	dc38      	bgt.n	80066a0 <_dtoa_r+0x2a0>
 800662e:	f04f 0a01 	mov.w	sl, #1
 8006632:	46d1      	mov	r9, sl
 8006634:	4652      	mov	r2, sl
 8006636:	f8cd a020 	str.w	sl, [sp, #32]
 800663a:	69f7      	ldr	r7, [r6, #28]
 800663c:	2100      	movs	r1, #0
 800663e:	2004      	movs	r0, #4
 8006640:	f100 0c14 	add.w	ip, r0, #20
 8006644:	4594      	cmp	ip, r2
 8006646:	d930      	bls.n	80066aa <_dtoa_r+0x2aa>
 8006648:	6079      	str	r1, [r7, #4]
 800664a:	4630      	mov	r0, r6
 800664c:	930d      	str	r3, [sp, #52]	; 0x34
 800664e:	f000 fd43 	bl	80070d8 <_Balloc>
 8006652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006654:	9001      	str	r0, [sp, #4]
 8006656:	4602      	mov	r2, r0
 8006658:	2800      	cmp	r0, #0
 800665a:	d145      	bne.n	80066e8 <_dtoa_r+0x2e8>
 800665c:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <_dtoa_r+0x2e4>)
 800665e:	f240 11af 	movw	r1, #431	; 0x1af
 8006662:	e6e5      	b.n	8006430 <_dtoa_r+0x30>
 8006664:	2201      	movs	r2, #1
 8006666:	e7de      	b.n	8006626 <_dtoa_r+0x226>
 8006668:	2200      	movs	r2, #0
 800666a:	9207      	str	r2, [sp, #28]
 800666c:	9a08      	ldr	r2, [sp, #32]
 800666e:	eb0b 0a02 	add.w	sl, fp, r2
 8006672:	f10a 0901 	add.w	r9, sl, #1
 8006676:	464a      	mov	r2, r9
 8006678:	2a01      	cmp	r2, #1
 800667a:	bfb8      	it	lt
 800667c:	2201      	movlt	r2, #1
 800667e:	e7dc      	b.n	800663a <_dtoa_r+0x23a>
 8006680:	2201      	movs	r2, #1
 8006682:	e7f2      	b.n	800666a <_dtoa_r+0x26a>
 8006684:	2401      	movs	r4, #1
 8006686:	2200      	movs	r2, #0
 8006688:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800668c:	f04f 3aff 	mov.w	sl, #4294967295
 8006690:	2100      	movs	r1, #0
 8006692:	46d1      	mov	r9, sl
 8006694:	2212      	movs	r2, #18
 8006696:	9108      	str	r1, [sp, #32]
 8006698:	e7cf      	b.n	800663a <_dtoa_r+0x23a>
 800669a:	2201      	movs	r2, #1
 800669c:	9207      	str	r2, [sp, #28]
 800669e:	e7f5      	b.n	800668c <_dtoa_r+0x28c>
 80066a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066a4:	46d1      	mov	r9, sl
 80066a6:	4652      	mov	r2, sl
 80066a8:	e7c7      	b.n	800663a <_dtoa_r+0x23a>
 80066aa:	3101      	adds	r1, #1
 80066ac:	0040      	lsls	r0, r0, #1
 80066ae:	e7c7      	b.n	8006640 <_dtoa_r+0x240>
 80066b0:	636f4361 	.word	0x636f4361
 80066b4:	3fd287a7 	.word	0x3fd287a7
 80066b8:	8b60c8b3 	.word	0x8b60c8b3
 80066bc:	3fc68a28 	.word	0x3fc68a28
 80066c0:	509f79fb 	.word	0x509f79fb
 80066c4:	3fd34413 	.word	0x3fd34413
 80066c8:	08008a61 	.word	0x08008a61
 80066cc:	08008a78 	.word	0x08008a78
 80066d0:	7ff00000 	.word	0x7ff00000
 80066d4:	08008a5d 	.word	0x08008a5d
 80066d8:	08008a54 	.word	0x08008a54
 80066dc:	08008a31 	.word	0x08008a31
 80066e0:	08008b68 	.word	0x08008b68
 80066e4:	08008ad0 	.word	0x08008ad0
 80066e8:	69f2      	ldr	r2, [r6, #28]
 80066ea:	9901      	ldr	r1, [sp, #4]
 80066ec:	6011      	str	r1, [r2, #0]
 80066ee:	f1b9 0f0e 	cmp.w	r9, #14
 80066f2:	d86c      	bhi.n	80067ce <_dtoa_r+0x3ce>
 80066f4:	2c00      	cmp	r4, #0
 80066f6:	d06a      	beq.n	80067ce <_dtoa_r+0x3ce>
 80066f8:	f1bb 0f00 	cmp.w	fp, #0
 80066fc:	f340 80a0 	ble.w	8006840 <_dtoa_r+0x440>
 8006700:	4ac1      	ldr	r2, [pc, #772]	; (8006a08 <_dtoa_r+0x608>)
 8006702:	f00b 010f 	and.w	r1, fp, #15
 8006706:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800670a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800670e:	ed92 7b00 	vldr	d7, [r2]
 8006712:	ea4f 122b 	mov.w	r2, fp, asr #4
 8006716:	f000 8087 	beq.w	8006828 <_dtoa_r+0x428>
 800671a:	49bc      	ldr	r1, [pc, #752]	; (8006a0c <_dtoa_r+0x60c>)
 800671c:	ed91 6b08 	vldr	d6, [r1, #32]
 8006720:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006724:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006728:	f002 020f 	and.w	r2, r2, #15
 800672c:	2103      	movs	r1, #3
 800672e:	48b7      	ldr	r0, [pc, #732]	; (8006a0c <_dtoa_r+0x60c>)
 8006730:	2a00      	cmp	r2, #0
 8006732:	d17b      	bne.n	800682c <_dtoa_r+0x42c>
 8006734:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006738:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800673c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006742:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006746:	2a00      	cmp	r2, #0
 8006748:	f000 80a0 	beq.w	800688c <_dtoa_r+0x48c>
 800674c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006750:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006758:	f140 8098 	bpl.w	800688c <_dtoa_r+0x48c>
 800675c:	f1b9 0f00 	cmp.w	r9, #0
 8006760:	f000 8094 	beq.w	800688c <_dtoa_r+0x48c>
 8006764:	f1ba 0f00 	cmp.w	sl, #0
 8006768:	dd2f      	ble.n	80067ca <_dtoa_r+0x3ca>
 800676a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800676e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006772:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006776:	f10b 32ff 	add.w	r2, fp, #4294967295
 800677a:	3101      	adds	r1, #1
 800677c:	4654      	mov	r4, sl
 800677e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006782:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006786:	ee07 1a90 	vmov	s15, r1
 800678a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800678e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006792:	ee15 7a90 	vmov	r7, s11
 8006796:	ec51 0b15 	vmov	r0, r1, d5
 800679a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800679e:	2c00      	cmp	r4, #0
 80067a0:	d177      	bne.n	8006892 <_dtoa_r+0x492>
 80067a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80067a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80067aa:	ec41 0b17 	vmov	d7, r0, r1
 80067ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80067b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b6:	f300 826a 	bgt.w	8006c8e <_dtoa_r+0x88e>
 80067ba:	eeb1 7b47 	vneg.f64	d7, d7
 80067be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80067c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c6:	f100 8260 	bmi.w	8006c8a <_dtoa_r+0x88a>
 80067ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80067ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067d0:	2a00      	cmp	r2, #0
 80067d2:	f2c0 811d 	blt.w	8006a10 <_dtoa_r+0x610>
 80067d6:	f1bb 0f0e 	cmp.w	fp, #14
 80067da:	f300 8119 	bgt.w	8006a10 <_dtoa_r+0x610>
 80067de:	4b8a      	ldr	r3, [pc, #552]	; (8006a08 <_dtoa_r+0x608>)
 80067e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067e4:	ed93 6b00 	vldr	d6, [r3]
 80067e8:	9b08      	ldr	r3, [sp, #32]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f280 80b7 	bge.w	800695e <_dtoa_r+0x55e>
 80067f0:	f1b9 0f00 	cmp.w	r9, #0
 80067f4:	f300 80b3 	bgt.w	800695e <_dtoa_r+0x55e>
 80067f8:	f040 8246 	bne.w	8006c88 <_dtoa_r+0x888>
 80067fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006800:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006804:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800680c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006810:	464c      	mov	r4, r9
 8006812:	464f      	mov	r7, r9
 8006814:	f280 821c 	bge.w	8006c50 <_dtoa_r+0x850>
 8006818:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800681c:	2331      	movs	r3, #49	; 0x31
 800681e:	f808 3b01 	strb.w	r3, [r8], #1
 8006822:	f10b 0b01 	add.w	fp, fp, #1
 8006826:	e218      	b.n	8006c5a <_dtoa_r+0x85a>
 8006828:	2102      	movs	r1, #2
 800682a:	e780      	b.n	800672e <_dtoa_r+0x32e>
 800682c:	07d4      	lsls	r4, r2, #31
 800682e:	d504      	bpl.n	800683a <_dtoa_r+0x43a>
 8006830:	ed90 6b00 	vldr	d6, [r0]
 8006834:	3101      	adds	r1, #1
 8006836:	ee27 7b06 	vmul.f64	d7, d7, d6
 800683a:	1052      	asrs	r2, r2, #1
 800683c:	3008      	adds	r0, #8
 800683e:	e777      	b.n	8006730 <_dtoa_r+0x330>
 8006840:	d022      	beq.n	8006888 <_dtoa_r+0x488>
 8006842:	f1cb 0200 	rsb	r2, fp, #0
 8006846:	4970      	ldr	r1, [pc, #448]	; (8006a08 <_dtoa_r+0x608>)
 8006848:	f002 000f 	and.w	r0, r2, #15
 800684c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006850:	ed91 7b00 	vldr	d7, [r1]
 8006854:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006858:	ed8d 7b02 	vstr	d7, [sp, #8]
 800685c:	486b      	ldr	r0, [pc, #428]	; (8006a0c <_dtoa_r+0x60c>)
 800685e:	1112      	asrs	r2, r2, #4
 8006860:	2400      	movs	r4, #0
 8006862:	2102      	movs	r1, #2
 8006864:	b92a      	cbnz	r2, 8006872 <_dtoa_r+0x472>
 8006866:	2c00      	cmp	r4, #0
 8006868:	f43f af6a 	beq.w	8006740 <_dtoa_r+0x340>
 800686c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006870:	e766      	b.n	8006740 <_dtoa_r+0x340>
 8006872:	07d7      	lsls	r7, r2, #31
 8006874:	d505      	bpl.n	8006882 <_dtoa_r+0x482>
 8006876:	ed90 6b00 	vldr	d6, [r0]
 800687a:	3101      	adds	r1, #1
 800687c:	2401      	movs	r4, #1
 800687e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006882:	1052      	asrs	r2, r2, #1
 8006884:	3008      	adds	r0, #8
 8006886:	e7ed      	b.n	8006864 <_dtoa_r+0x464>
 8006888:	2102      	movs	r1, #2
 800688a:	e759      	b.n	8006740 <_dtoa_r+0x340>
 800688c:	465a      	mov	r2, fp
 800688e:	464c      	mov	r4, r9
 8006890:	e775      	b.n	800677e <_dtoa_r+0x37e>
 8006892:	ec41 0b17 	vmov	d7, r0, r1
 8006896:	495c      	ldr	r1, [pc, #368]	; (8006a08 <_dtoa_r+0x608>)
 8006898:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800689c:	ed11 4b02 	vldr	d4, [r1, #-8]
 80068a0:	9901      	ldr	r1, [sp, #4]
 80068a2:	440c      	add	r4, r1
 80068a4:	9907      	ldr	r1, [sp, #28]
 80068a6:	b351      	cbz	r1, 80068fe <_dtoa_r+0x4fe>
 80068a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80068ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80068b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80068b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80068b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80068bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80068c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80068c4:	ee14 1a90 	vmov	r1, s9
 80068c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80068cc:	3130      	adds	r1, #48	; 0x30
 80068ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80068d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068da:	f808 1b01 	strb.w	r1, [r8], #1
 80068de:	d439      	bmi.n	8006954 <_dtoa_r+0x554>
 80068e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80068e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80068e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ec:	d472      	bmi.n	80069d4 <_dtoa_r+0x5d4>
 80068ee:	45a0      	cmp	r8, r4
 80068f0:	f43f af6b 	beq.w	80067ca <_dtoa_r+0x3ca>
 80068f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80068f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80068fc:	e7e0      	b.n	80068c0 <_dtoa_r+0x4c0>
 80068fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006902:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006906:	4620      	mov	r0, r4
 8006908:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800690c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006910:	ee14 1a90 	vmov	r1, s9
 8006914:	3130      	adds	r1, #48	; 0x30
 8006916:	f808 1b01 	strb.w	r1, [r8], #1
 800691a:	45a0      	cmp	r8, r4
 800691c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006920:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006924:	d118      	bne.n	8006958 <_dtoa_r+0x558>
 8006926:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800692a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800692e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006936:	dc4d      	bgt.n	80069d4 <_dtoa_r+0x5d4>
 8006938:	ee35 5b47 	vsub.f64	d5, d5, d7
 800693c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006944:	f57f af41 	bpl.w	80067ca <_dtoa_r+0x3ca>
 8006948:	4680      	mov	r8, r0
 800694a:	3801      	subs	r0, #1
 800694c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006950:	2b30      	cmp	r3, #48	; 0x30
 8006952:	d0f9      	beq.n	8006948 <_dtoa_r+0x548>
 8006954:	4693      	mov	fp, r2
 8006956:	e02a      	b.n	80069ae <_dtoa_r+0x5ae>
 8006958:	ee26 6b03 	vmul.f64	d6, d6, d3
 800695c:	e7d6      	b.n	800690c <_dtoa_r+0x50c>
 800695e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006962:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006966:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800696a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800696e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006972:	ee15 3a10 	vmov	r3, s10
 8006976:	3330      	adds	r3, #48	; 0x30
 8006978:	f808 3b01 	strb.w	r3, [r8], #1
 800697c:	9b01      	ldr	r3, [sp, #4]
 800697e:	eba8 0303 	sub.w	r3, r8, r3
 8006982:	4599      	cmp	r9, r3
 8006984:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006988:	eea3 7b46 	vfms.f64	d7, d3, d6
 800698c:	d133      	bne.n	80069f6 <_dtoa_r+0x5f6>
 800698e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006992:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699a:	dc1a      	bgt.n	80069d2 <_dtoa_r+0x5d2>
 800699c:	eeb4 7b46 	vcmp.f64	d7, d6
 80069a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a4:	d103      	bne.n	80069ae <_dtoa_r+0x5ae>
 80069a6:	ee15 3a10 	vmov	r3, s10
 80069aa:	07d9      	lsls	r1, r3, #31
 80069ac:	d411      	bmi.n	80069d2 <_dtoa_r+0x5d2>
 80069ae:	4629      	mov	r1, r5
 80069b0:	4630      	mov	r0, r6
 80069b2:	f000 fbd1 	bl	8007158 <_Bfree>
 80069b6:	2300      	movs	r3, #0
 80069b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069ba:	f888 3000 	strb.w	r3, [r8]
 80069be:	f10b 0301 	add.w	r3, fp, #1
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f43f ad69 	beq.w	800649e <_dtoa_r+0x9e>
 80069cc:	f8c3 8000 	str.w	r8, [r3]
 80069d0:	e565      	b.n	800649e <_dtoa_r+0x9e>
 80069d2:	465a      	mov	r2, fp
 80069d4:	4643      	mov	r3, r8
 80069d6:	4698      	mov	r8, r3
 80069d8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80069dc:	2939      	cmp	r1, #57	; 0x39
 80069de:	d106      	bne.n	80069ee <_dtoa_r+0x5ee>
 80069e0:	9901      	ldr	r1, [sp, #4]
 80069e2:	4299      	cmp	r1, r3
 80069e4:	d1f7      	bne.n	80069d6 <_dtoa_r+0x5d6>
 80069e6:	9801      	ldr	r0, [sp, #4]
 80069e8:	2130      	movs	r1, #48	; 0x30
 80069ea:	3201      	adds	r2, #1
 80069ec:	7001      	strb	r1, [r0, #0]
 80069ee:	7819      	ldrb	r1, [r3, #0]
 80069f0:	3101      	adds	r1, #1
 80069f2:	7019      	strb	r1, [r3, #0]
 80069f4:	e7ae      	b.n	8006954 <_dtoa_r+0x554>
 80069f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80069fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80069fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a02:	d1b2      	bne.n	800696a <_dtoa_r+0x56a>
 8006a04:	e7d3      	b.n	80069ae <_dtoa_r+0x5ae>
 8006a06:	bf00      	nop
 8006a08:	08008b68 	.word	0x08008b68
 8006a0c:	08008b40 	.word	0x08008b40
 8006a10:	9907      	ldr	r1, [sp, #28]
 8006a12:	2900      	cmp	r1, #0
 8006a14:	f000 80d0 	beq.w	8006bb8 <_dtoa_r+0x7b8>
 8006a18:	9906      	ldr	r1, [sp, #24]
 8006a1a:	2901      	cmp	r1, #1
 8006a1c:	f300 80b4 	bgt.w	8006b88 <_dtoa_r+0x788>
 8006a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a22:	2900      	cmp	r1, #0
 8006a24:	f000 80ac 	beq.w	8006b80 <_dtoa_r+0x780>
 8006a28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006a30:	461c      	mov	r4, r3
 8006a32:	9309      	str	r3, [sp, #36]	; 0x24
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	4413      	add	r3, r2
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	4630      	mov	r0, r6
 8006a42:	9305      	str	r3, [sp, #20]
 8006a44:	f000 fc3e 	bl	80072c4 <__i2b>
 8006a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4a:	4607      	mov	r7, r0
 8006a4c:	f1b8 0f00 	cmp.w	r8, #0
 8006a50:	d00d      	beq.n	8006a6e <_dtoa_r+0x66e>
 8006a52:	9a05      	ldr	r2, [sp, #20]
 8006a54:	2a00      	cmp	r2, #0
 8006a56:	dd0a      	ble.n	8006a6e <_dtoa_r+0x66e>
 8006a58:	4542      	cmp	r2, r8
 8006a5a:	9904      	ldr	r1, [sp, #16]
 8006a5c:	bfa8      	it	ge
 8006a5e:	4642      	movge	r2, r8
 8006a60:	1a89      	subs	r1, r1, r2
 8006a62:	9104      	str	r1, [sp, #16]
 8006a64:	9905      	ldr	r1, [sp, #20]
 8006a66:	eba8 0802 	sub.w	r8, r8, r2
 8006a6a:	1a8a      	subs	r2, r1, r2
 8006a6c:	9205      	str	r2, [sp, #20]
 8006a6e:	b303      	cbz	r3, 8006ab2 <_dtoa_r+0x6b2>
 8006a70:	9a07      	ldr	r2, [sp, #28]
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	f000 80a5 	beq.w	8006bc2 <_dtoa_r+0x7c2>
 8006a78:	2c00      	cmp	r4, #0
 8006a7a:	dd13      	ble.n	8006aa4 <_dtoa_r+0x6a4>
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	4622      	mov	r2, r4
 8006a80:	4630      	mov	r0, r6
 8006a82:	930d      	str	r3, [sp, #52]	; 0x34
 8006a84:	f000 fcde 	bl	8007444 <__pow5mult>
 8006a88:	462a      	mov	r2, r5
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f000 fc2e 	bl	80072f0 <__multiply>
 8006a94:	4629      	mov	r1, r5
 8006a96:	9009      	str	r0, [sp, #36]	; 0x24
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f000 fb5d 	bl	8007158 <_Bfree>
 8006a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aa2:	4615      	mov	r5, r2
 8006aa4:	1b1a      	subs	r2, r3, r4
 8006aa6:	d004      	beq.n	8006ab2 <_dtoa_r+0x6b2>
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f000 fcca 	bl	8007444 <__pow5mult>
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f000 fc05 	bl	80072c4 <__i2b>
 8006aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	f340 8081 	ble.w	8006bc6 <_dtoa_r+0x7c6>
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 fcbb 	bl	8007444 <__pow5mult>
 8006ace:	9b06      	ldr	r3, [sp, #24]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	dd7a      	ble.n	8006bcc <_dtoa_r+0x7cc>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	6922      	ldr	r2, [r4, #16]
 8006adc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006ae0:	6910      	ldr	r0, [r2, #16]
 8006ae2:	f000 fba1 	bl	8007228 <__hi0bits>
 8006ae6:	f1c0 0020 	rsb	r0, r0, #32
 8006aea:	9b05      	ldr	r3, [sp, #20]
 8006aec:	4418      	add	r0, r3
 8006aee:	f010 001f 	ands.w	r0, r0, #31
 8006af2:	f000 8093 	beq.w	8006c1c <_dtoa_r+0x81c>
 8006af6:	f1c0 0220 	rsb	r2, r0, #32
 8006afa:	2a04      	cmp	r2, #4
 8006afc:	f340 8085 	ble.w	8006c0a <_dtoa_r+0x80a>
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	f1c0 001c 	rsb	r0, r0, #28
 8006b06:	4403      	add	r3, r0
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	9b05      	ldr	r3, [sp, #20]
 8006b0c:	4480      	add	r8, r0
 8006b0e:	4403      	add	r3, r0
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	9b04      	ldr	r3, [sp, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dd05      	ble.n	8006b24 <_dtoa_r+0x724>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f000 fceb 	bl	80074f8 <__lshift>
 8006b22:	4605      	mov	r5, r0
 8006b24:	9b05      	ldr	r3, [sp, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	dd05      	ble.n	8006b36 <_dtoa_r+0x736>
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f000 fce2 	bl	80074f8 <__lshift>
 8006b34:	4604      	mov	r4, r0
 8006b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d071      	beq.n	8006c20 <_dtoa_r+0x820>
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 fd46 	bl	80075d0 <__mcmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	da6b      	bge.n	8006c20 <_dtoa_r+0x820>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f000 fb24 	bl	800719c <__multadd>
 8006b54:	9b07      	ldr	r3, [sp, #28]
 8006b56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8197 	beq.w	8006e90 <_dtoa_r+0xa90>
 8006b62:	4639      	mov	r1, r7
 8006b64:	2300      	movs	r3, #0
 8006b66:	220a      	movs	r2, #10
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f000 fb17 	bl	800719c <__multadd>
 8006b6e:	f1ba 0f00 	cmp.w	sl, #0
 8006b72:	4607      	mov	r7, r0
 8006b74:	f300 8093 	bgt.w	8006c9e <_dtoa_r+0x89e>
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	dc57      	bgt.n	8006c2e <_dtoa_r+0x82e>
 8006b7e:	e08e      	b.n	8006c9e <_dtoa_r+0x89e>
 8006b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b86:	e751      	b.n	8006a2c <_dtoa_r+0x62c>
 8006b88:	f109 34ff 	add.w	r4, r9, #4294967295
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	bfbf      	itttt	lt
 8006b90:	1ae2      	sublt	r2, r4, r3
 8006b92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b94:	189b      	addlt	r3, r3, r2
 8006b96:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006b98:	bfae      	itee	ge
 8006b9a:	1b1c      	subge	r4, r3, r4
 8006b9c:	4623      	movlt	r3, r4
 8006b9e:	2400      	movlt	r4, #0
 8006ba0:	f1b9 0f00 	cmp.w	r9, #0
 8006ba4:	bfb5      	itete	lt
 8006ba6:	9a04      	ldrlt	r2, [sp, #16]
 8006ba8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006bac:	eba2 0809 	sublt.w	r8, r2, r9
 8006bb0:	464a      	movge	r2, r9
 8006bb2:	bfb8      	it	lt
 8006bb4:	2200      	movlt	r2, #0
 8006bb6:	e73c      	b.n	8006a32 <_dtoa_r+0x632>
 8006bb8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006bbc:	9f07      	ldr	r7, [sp, #28]
 8006bbe:	461c      	mov	r4, r3
 8006bc0:	e744      	b.n	8006a4c <_dtoa_r+0x64c>
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	e770      	b.n	8006aa8 <_dtoa_r+0x6a8>
 8006bc6:	9b06      	ldr	r3, [sp, #24]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	dc18      	bgt.n	8006bfe <_dtoa_r+0x7fe>
 8006bcc:	9b02      	ldr	r3, [sp, #8]
 8006bce:	b9b3      	cbnz	r3, 8006bfe <_dtoa_r+0x7fe>
 8006bd0:	9b03      	ldr	r3, [sp, #12]
 8006bd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006bd6:	b9a2      	cbnz	r2, 8006c02 <_dtoa_r+0x802>
 8006bd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006bdc:	0d12      	lsrs	r2, r2, #20
 8006bde:	0512      	lsls	r2, r2, #20
 8006be0:	b18a      	cbz	r2, 8006c06 <_dtoa_r+0x806>
 8006be2:	9b04      	ldr	r3, [sp, #16]
 8006be4:	3301      	adds	r3, #1
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	9b05      	ldr	r3, [sp, #20]
 8006bea:	3301      	adds	r3, #1
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f47f af70 	bne.w	8006ada <_dtoa_r+0x6da>
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	e775      	b.n	8006aea <_dtoa_r+0x6ea>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e7f6      	b.n	8006bf0 <_dtoa_r+0x7f0>
 8006c02:	9b02      	ldr	r3, [sp, #8]
 8006c04:	e7f4      	b.n	8006bf0 <_dtoa_r+0x7f0>
 8006c06:	9209      	str	r2, [sp, #36]	; 0x24
 8006c08:	e7f3      	b.n	8006bf2 <_dtoa_r+0x7f2>
 8006c0a:	d082      	beq.n	8006b12 <_dtoa_r+0x712>
 8006c0c:	9b04      	ldr	r3, [sp, #16]
 8006c0e:	321c      	adds	r2, #28
 8006c10:	4413      	add	r3, r2
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	9b05      	ldr	r3, [sp, #20]
 8006c16:	4490      	add	r8, r2
 8006c18:	4413      	add	r3, r2
 8006c1a:	e779      	b.n	8006b10 <_dtoa_r+0x710>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	e7f5      	b.n	8006c0c <_dtoa_r+0x80c>
 8006c20:	f1b9 0f00 	cmp.w	r9, #0
 8006c24:	dc36      	bgt.n	8006c94 <_dtoa_r+0x894>
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	dd33      	ble.n	8006c94 <_dtoa_r+0x894>
 8006c2c:	46ca      	mov	sl, r9
 8006c2e:	f1ba 0f00 	cmp.w	sl, #0
 8006c32:	d10d      	bne.n	8006c50 <_dtoa_r+0x850>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4653      	mov	r3, sl
 8006c38:	2205      	movs	r2, #5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f000 faae 	bl	800719c <__multadd>
 8006c40:	4601      	mov	r1, r0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4628      	mov	r0, r5
 8006c46:	f000 fcc3 	bl	80075d0 <__mcmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	f73f ade4 	bgt.w	8006818 <_dtoa_r+0x418>
 8006c50:	9b08      	ldr	r3, [sp, #32]
 8006c52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006c56:	ea6f 0b03 	mvn.w	fp, r3
 8006c5a:	f04f 0900 	mov.w	r9, #0
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4630      	mov	r0, r6
 8006c62:	f000 fa79 	bl	8007158 <_Bfree>
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	f43f aea1 	beq.w	80069ae <_dtoa_r+0x5ae>
 8006c6c:	f1b9 0f00 	cmp.w	r9, #0
 8006c70:	d005      	beq.n	8006c7e <_dtoa_r+0x87e>
 8006c72:	45b9      	cmp	r9, r7
 8006c74:	d003      	beq.n	8006c7e <_dtoa_r+0x87e>
 8006c76:	4649      	mov	r1, r9
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f000 fa6d 	bl	8007158 <_Bfree>
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4630      	mov	r0, r6
 8006c82:	f000 fa69 	bl	8007158 <_Bfree>
 8006c86:	e692      	b.n	80069ae <_dtoa_r+0x5ae>
 8006c88:	2400      	movs	r4, #0
 8006c8a:	4627      	mov	r7, r4
 8006c8c:	e7e0      	b.n	8006c50 <_dtoa_r+0x850>
 8006c8e:	4693      	mov	fp, r2
 8006c90:	4627      	mov	r7, r4
 8006c92:	e5c1      	b.n	8006818 <_dtoa_r+0x418>
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	46ca      	mov	sl, r9
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8100 	beq.w	8006e9e <_dtoa_r+0xa9e>
 8006c9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ca2:	dd05      	ble.n	8006cb0 <_dtoa_r+0x8b0>
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	4642      	mov	r2, r8
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f000 fc25 	bl	80074f8 <__lshift>
 8006cae:	4607      	mov	r7, r0
 8006cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d05d      	beq.n	8006d72 <_dtoa_r+0x972>
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 fa0d 	bl	80070d8 <_Balloc>
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	b928      	cbnz	r0, 8006cce <_dtoa_r+0x8ce>
 8006cc2:	4b82      	ldr	r3, [pc, #520]	; (8006ecc <_dtoa_r+0xacc>)
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006cca:	f7ff bbb1 	b.w	8006430 <_dtoa_r+0x30>
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	3202      	adds	r2, #2
 8006cd2:	0092      	lsls	r2, r2, #2
 8006cd4:	f107 010c 	add.w	r1, r7, #12
 8006cd8:	300c      	adds	r0, #12
 8006cda:	f001 f971 	bl	8007fc0 <memcpy>
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4641      	mov	r1, r8
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f000 fc08 	bl	80074f8 <__lshift>
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	3301      	adds	r3, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	4453      	add	r3, sl
 8006cf2:	9308      	str	r3, [sp, #32]
 8006cf4:	9b02      	ldr	r3, [sp, #8]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	46b9      	mov	r9, r7
 8006cfc:	9307      	str	r3, [sp, #28]
 8006cfe:	4607      	mov	r7, r0
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	4621      	mov	r1, r4
 8006d04:	3b01      	subs	r3, #1
 8006d06:	4628      	mov	r0, r5
 8006d08:	9302      	str	r3, [sp, #8]
 8006d0a:	f7ff faf0 	bl	80062ee <quorem>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	3330      	adds	r3, #48	; 0x30
 8006d12:	9005      	str	r0, [sp, #20]
 8006d14:	4649      	mov	r1, r9
 8006d16:	4628      	mov	r0, r5
 8006d18:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1a:	f000 fc59 	bl	80075d0 <__mcmp>
 8006d1e:	463a      	mov	r2, r7
 8006d20:	4682      	mov	sl, r0
 8006d22:	4621      	mov	r1, r4
 8006d24:	4630      	mov	r0, r6
 8006d26:	f000 fc6f 	bl	8007608 <__mdiff>
 8006d2a:	68c2      	ldr	r2, [r0, #12]
 8006d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2e:	4680      	mov	r8, r0
 8006d30:	bb0a      	cbnz	r2, 8006d76 <_dtoa_r+0x976>
 8006d32:	4601      	mov	r1, r0
 8006d34:	4628      	mov	r0, r5
 8006d36:	f000 fc4b 	bl	80075d0 <__mcmp>
 8006d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4641      	mov	r1, r8
 8006d40:	4630      	mov	r0, r6
 8006d42:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006d46:	f000 fa07 	bl	8007158 <_Bfree>
 8006d4a:	9b06      	ldr	r3, [sp, #24]
 8006d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d4e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006d52:	ea43 0102 	orr.w	r1, r3, r2
 8006d56:	9b07      	ldr	r3, [sp, #28]
 8006d58:	4319      	orrs	r1, r3
 8006d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5c:	d10d      	bne.n	8006d7a <_dtoa_r+0x97a>
 8006d5e:	2b39      	cmp	r3, #57	; 0x39
 8006d60:	d029      	beq.n	8006db6 <_dtoa_r+0x9b6>
 8006d62:	f1ba 0f00 	cmp.w	sl, #0
 8006d66:	dd01      	ble.n	8006d6c <_dtoa_r+0x96c>
 8006d68:	9b05      	ldr	r3, [sp, #20]
 8006d6a:	3331      	adds	r3, #49	; 0x31
 8006d6c:	9a02      	ldr	r2, [sp, #8]
 8006d6e:	7013      	strb	r3, [r2, #0]
 8006d70:	e775      	b.n	8006c5e <_dtoa_r+0x85e>
 8006d72:	4638      	mov	r0, r7
 8006d74:	e7b8      	b.n	8006ce8 <_dtoa_r+0x8e8>
 8006d76:	2201      	movs	r2, #1
 8006d78:	e7e1      	b.n	8006d3e <_dtoa_r+0x93e>
 8006d7a:	f1ba 0f00 	cmp.w	sl, #0
 8006d7e:	db06      	blt.n	8006d8e <_dtoa_r+0x98e>
 8006d80:	9906      	ldr	r1, [sp, #24]
 8006d82:	ea41 0a0a 	orr.w	sl, r1, sl
 8006d86:	9907      	ldr	r1, [sp, #28]
 8006d88:	ea5a 0a01 	orrs.w	sl, sl, r1
 8006d8c:	d120      	bne.n	8006dd0 <_dtoa_r+0x9d0>
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	ddec      	ble.n	8006d6c <_dtoa_r+0x96c>
 8006d92:	4629      	mov	r1, r5
 8006d94:	2201      	movs	r2, #1
 8006d96:	4630      	mov	r0, r6
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	f000 fbad 	bl	80074f8 <__lshift>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4605      	mov	r5, r0
 8006da2:	f000 fc15 	bl	80075d0 <__mcmp>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	dc02      	bgt.n	8006db2 <_dtoa_r+0x9b2>
 8006dac:	d1de      	bne.n	8006d6c <_dtoa_r+0x96c>
 8006dae:	07da      	lsls	r2, r3, #31
 8006db0:	d5dc      	bpl.n	8006d6c <_dtoa_r+0x96c>
 8006db2:	2b39      	cmp	r3, #57	; 0x39
 8006db4:	d1d8      	bne.n	8006d68 <_dtoa_r+0x968>
 8006db6:	9a02      	ldr	r2, [sp, #8]
 8006db8:	2339      	movs	r3, #57	; 0x39
 8006dba:	7013      	strb	r3, [r2, #0]
 8006dbc:	4643      	mov	r3, r8
 8006dbe:	4698      	mov	r8, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006dc6:	2a39      	cmp	r2, #57	; 0x39
 8006dc8:	d051      	beq.n	8006e6e <_dtoa_r+0xa6e>
 8006dca:	3201      	adds	r2, #1
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e746      	b.n	8006c5e <_dtoa_r+0x85e>
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	dd03      	ble.n	8006ddc <_dtoa_r+0x9dc>
 8006dd4:	2b39      	cmp	r3, #57	; 0x39
 8006dd6:	d0ee      	beq.n	8006db6 <_dtoa_r+0x9b6>
 8006dd8:	3301      	adds	r3, #1
 8006dda:	e7c7      	b.n	8006d6c <_dtoa_r+0x96c>
 8006ddc:	9a04      	ldr	r2, [sp, #16]
 8006dde:	9908      	ldr	r1, [sp, #32]
 8006de0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006de4:	428a      	cmp	r2, r1
 8006de6:	d02b      	beq.n	8006e40 <_dtoa_r+0xa40>
 8006de8:	4629      	mov	r1, r5
 8006dea:	2300      	movs	r3, #0
 8006dec:	220a      	movs	r2, #10
 8006dee:	4630      	mov	r0, r6
 8006df0:	f000 f9d4 	bl	800719c <__multadd>
 8006df4:	45b9      	cmp	r9, r7
 8006df6:	4605      	mov	r5, r0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	f04f 020a 	mov.w	r2, #10
 8006e00:	4649      	mov	r1, r9
 8006e02:	4630      	mov	r0, r6
 8006e04:	d107      	bne.n	8006e16 <_dtoa_r+0xa16>
 8006e06:	f000 f9c9 	bl	800719c <__multadd>
 8006e0a:	4681      	mov	r9, r0
 8006e0c:	4607      	mov	r7, r0
 8006e0e:	9b04      	ldr	r3, [sp, #16]
 8006e10:	3301      	adds	r3, #1
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	e774      	b.n	8006d00 <_dtoa_r+0x900>
 8006e16:	f000 f9c1 	bl	800719c <__multadd>
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	4681      	mov	r9, r0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	220a      	movs	r2, #10
 8006e22:	4630      	mov	r0, r6
 8006e24:	f000 f9ba 	bl	800719c <__multadd>
 8006e28:	4607      	mov	r7, r0
 8006e2a:	e7f0      	b.n	8006e0e <_dtoa_r+0xa0e>
 8006e2c:	f1ba 0f00 	cmp.w	sl, #0
 8006e30:	9a01      	ldr	r2, [sp, #4]
 8006e32:	bfcc      	ite	gt
 8006e34:	46d0      	movgt	r8, sl
 8006e36:	f04f 0801 	movle.w	r8, #1
 8006e3a:	4490      	add	r8, r2
 8006e3c:	f04f 0900 	mov.w	r9, #0
 8006e40:	4629      	mov	r1, r5
 8006e42:	2201      	movs	r2, #1
 8006e44:	4630      	mov	r0, r6
 8006e46:	9302      	str	r3, [sp, #8]
 8006e48:	f000 fb56 	bl	80074f8 <__lshift>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4605      	mov	r5, r0
 8006e50:	f000 fbbe 	bl	80075d0 <__mcmp>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	dcb1      	bgt.n	8006dbc <_dtoa_r+0x9bc>
 8006e58:	d102      	bne.n	8006e60 <_dtoa_r+0xa60>
 8006e5a:	9b02      	ldr	r3, [sp, #8]
 8006e5c:	07db      	lsls	r3, r3, #31
 8006e5e:	d4ad      	bmi.n	8006dbc <_dtoa_r+0x9bc>
 8006e60:	4643      	mov	r3, r8
 8006e62:	4698      	mov	r8, r3
 8006e64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e68:	2a30      	cmp	r2, #48	; 0x30
 8006e6a:	d0fa      	beq.n	8006e62 <_dtoa_r+0xa62>
 8006e6c:	e6f7      	b.n	8006c5e <_dtoa_r+0x85e>
 8006e6e:	9a01      	ldr	r2, [sp, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d1a4      	bne.n	8006dbe <_dtoa_r+0x9be>
 8006e74:	f10b 0b01 	add.w	fp, fp, #1
 8006e78:	2331      	movs	r3, #49	; 0x31
 8006e7a:	e778      	b.n	8006d6e <_dtoa_r+0x96e>
 8006e7c:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <_dtoa_r+0xad0>)
 8006e7e:	f7ff bb2a 	b.w	80064d6 <_dtoa_r+0xd6>
 8006e82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f47f ab05 	bne.w	8006494 <_dtoa_r+0x94>
 8006e8a:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <_dtoa_r+0xad4>)
 8006e8c:	f7ff bb23 	b.w	80064d6 <_dtoa_r+0xd6>
 8006e90:	f1ba 0f00 	cmp.w	sl, #0
 8006e94:	dc03      	bgt.n	8006e9e <_dtoa_r+0xa9e>
 8006e96:	9b06      	ldr	r3, [sp, #24]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	f73f aec8 	bgt.w	8006c2e <_dtoa_r+0x82e>
 8006e9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f7ff fa22 	bl	80062ee <quorem>
 8006eaa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006eae:	f808 3b01 	strb.w	r3, [r8], #1
 8006eb2:	9a01      	ldr	r2, [sp, #4]
 8006eb4:	eba8 0202 	sub.w	r2, r8, r2
 8006eb8:	4592      	cmp	sl, r2
 8006eba:	ddb7      	ble.n	8006e2c <_dtoa_r+0xa2c>
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	220a      	movs	r2, #10
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f000 f96a 	bl	800719c <__multadd>
 8006ec8:	4605      	mov	r5, r0
 8006eca:	e7ea      	b.n	8006ea2 <_dtoa_r+0xaa2>
 8006ecc:	08008ad0 	.word	0x08008ad0
 8006ed0:	08008a30 	.word	0x08008a30
 8006ed4:	08008a54 	.word	0x08008a54

08006ed8 <_free_r>:
 8006ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eda:	2900      	cmp	r1, #0
 8006edc:	d044      	beq.n	8006f68 <_free_r+0x90>
 8006ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ee2:	9001      	str	r0, [sp, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8006eea:	bfb8      	it	lt
 8006eec:	18e4      	addlt	r4, r4, r3
 8006eee:	f000 f8e7 	bl	80070c0 <__malloc_lock>
 8006ef2:	4a1e      	ldr	r2, [pc, #120]	; (8006f6c <_free_r+0x94>)
 8006ef4:	9801      	ldr	r0, [sp, #4]
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	b933      	cbnz	r3, 8006f08 <_free_r+0x30>
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	6014      	str	r4, [r2, #0]
 8006efe:	b003      	add	sp, #12
 8006f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f04:	f000 b8e2 	b.w	80070cc <__malloc_unlock>
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	d908      	bls.n	8006f1e <_free_r+0x46>
 8006f0c:	6825      	ldr	r5, [r4, #0]
 8006f0e:	1961      	adds	r1, r4, r5
 8006f10:	428b      	cmp	r3, r1
 8006f12:	bf01      	itttt	eq
 8006f14:	6819      	ldreq	r1, [r3, #0]
 8006f16:	685b      	ldreq	r3, [r3, #4]
 8006f18:	1949      	addeq	r1, r1, r5
 8006f1a:	6021      	streq	r1, [r4, #0]
 8006f1c:	e7ed      	b.n	8006efa <_free_r+0x22>
 8006f1e:	461a      	mov	r2, r3
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	b10b      	cbz	r3, 8006f28 <_free_r+0x50>
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d9fa      	bls.n	8006f1e <_free_r+0x46>
 8006f28:	6811      	ldr	r1, [r2, #0]
 8006f2a:	1855      	adds	r5, r2, r1
 8006f2c:	42a5      	cmp	r5, r4
 8006f2e:	d10b      	bne.n	8006f48 <_free_r+0x70>
 8006f30:	6824      	ldr	r4, [r4, #0]
 8006f32:	4421      	add	r1, r4
 8006f34:	1854      	adds	r4, r2, r1
 8006f36:	42a3      	cmp	r3, r4
 8006f38:	6011      	str	r1, [r2, #0]
 8006f3a:	d1e0      	bne.n	8006efe <_free_r+0x26>
 8006f3c:	681c      	ldr	r4, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	6053      	str	r3, [r2, #4]
 8006f42:	440c      	add	r4, r1
 8006f44:	6014      	str	r4, [r2, #0]
 8006f46:	e7da      	b.n	8006efe <_free_r+0x26>
 8006f48:	d902      	bls.n	8006f50 <_free_r+0x78>
 8006f4a:	230c      	movs	r3, #12
 8006f4c:	6003      	str	r3, [r0, #0]
 8006f4e:	e7d6      	b.n	8006efe <_free_r+0x26>
 8006f50:	6825      	ldr	r5, [r4, #0]
 8006f52:	1961      	adds	r1, r4, r5
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf04      	itt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	bf04      	itt	eq
 8006f60:	1949      	addeq	r1, r1, r5
 8006f62:	6021      	streq	r1, [r4, #0]
 8006f64:	6054      	str	r4, [r2, #4]
 8006f66:	e7ca      	b.n	8006efe <_free_r+0x26>
 8006f68:	b003      	add	sp, #12
 8006f6a:	bd30      	pop	{r4, r5, pc}
 8006f6c:	20000b80 	.word	0x20000b80

08006f70 <malloc>:
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <malloc+0xc>)
 8006f72:	4601      	mov	r1, r0
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	f000 b823 	b.w	8006fc0 <_malloc_r>
 8006f7a:	bf00      	nop
 8006f7c:	20000070 	.word	0x20000070

08006f80 <sbrk_aligned>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4e0e      	ldr	r6, [pc, #56]	; (8006fbc <sbrk_aligned+0x3c>)
 8006f84:	460c      	mov	r4, r1
 8006f86:	6831      	ldr	r1, [r6, #0]
 8006f88:	4605      	mov	r5, r0
 8006f8a:	b911      	cbnz	r1, 8006f92 <sbrk_aligned+0x12>
 8006f8c:	f001 f808 	bl	8007fa0 <_sbrk_r>
 8006f90:	6030      	str	r0, [r6, #0]
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	f001 f803 	bl	8007fa0 <_sbrk_r>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d00a      	beq.n	8006fb4 <sbrk_aligned+0x34>
 8006f9e:	1cc4      	adds	r4, r0, #3
 8006fa0:	f024 0403 	bic.w	r4, r4, #3
 8006fa4:	42a0      	cmp	r0, r4
 8006fa6:	d007      	beq.n	8006fb8 <sbrk_aligned+0x38>
 8006fa8:	1a21      	subs	r1, r4, r0
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 fff8 	bl	8007fa0 <_sbrk_r>
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d101      	bne.n	8006fb8 <sbrk_aligned+0x38>
 8006fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	20000b84 	.word	0x20000b84

08006fc0 <_malloc_r>:
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	1ccd      	adds	r5, r1, #3
 8006fc6:	f025 0503 	bic.w	r5, r5, #3
 8006fca:	3508      	adds	r5, #8
 8006fcc:	2d0c      	cmp	r5, #12
 8006fce:	bf38      	it	cc
 8006fd0:	250c      	movcc	r5, #12
 8006fd2:	2d00      	cmp	r5, #0
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	db01      	blt.n	8006fdc <_malloc_r+0x1c>
 8006fd8:	42a9      	cmp	r1, r5
 8006fda:	d905      	bls.n	8006fe8 <_malloc_r+0x28>
 8006fdc:	230c      	movs	r3, #12
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	2600      	movs	r6, #0
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070bc <_malloc_r+0xfc>
 8006fec:	f000 f868 	bl	80070c0 <__malloc_lock>
 8006ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff4:	461c      	mov	r4, r3
 8006ff6:	bb5c      	cbnz	r4, 8007050 <_malloc_r+0x90>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f7ff ffc0 	bl	8006f80 <sbrk_aligned>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	4604      	mov	r4, r0
 8007004:	d155      	bne.n	80070b2 <_malloc_r+0xf2>
 8007006:	f8d8 4000 	ldr.w	r4, [r8]
 800700a:	4626      	mov	r6, r4
 800700c:	2e00      	cmp	r6, #0
 800700e:	d145      	bne.n	800709c <_malloc_r+0xdc>
 8007010:	2c00      	cmp	r4, #0
 8007012:	d048      	beq.n	80070a6 <_malloc_r+0xe6>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	4631      	mov	r1, r6
 8007018:	4638      	mov	r0, r7
 800701a:	eb04 0903 	add.w	r9, r4, r3
 800701e:	f000 ffbf 	bl	8007fa0 <_sbrk_r>
 8007022:	4581      	cmp	r9, r0
 8007024:	d13f      	bne.n	80070a6 <_malloc_r+0xe6>
 8007026:	6821      	ldr	r1, [r4, #0]
 8007028:	1a6d      	subs	r5, r5, r1
 800702a:	4629      	mov	r1, r5
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff ffa7 	bl	8006f80 <sbrk_aligned>
 8007032:	3001      	adds	r0, #1
 8007034:	d037      	beq.n	80070a6 <_malloc_r+0xe6>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	442b      	add	r3, r5
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	f8d8 3000 	ldr.w	r3, [r8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d038      	beq.n	80070b6 <_malloc_r+0xf6>
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	42a2      	cmp	r2, r4
 8007048:	d12b      	bne.n	80070a2 <_malloc_r+0xe2>
 800704a:	2200      	movs	r2, #0
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	e00f      	b.n	8007070 <_malloc_r+0xb0>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	1b52      	subs	r2, r2, r5
 8007054:	d41f      	bmi.n	8007096 <_malloc_r+0xd6>
 8007056:	2a0b      	cmp	r2, #11
 8007058:	d917      	bls.n	800708a <_malloc_r+0xca>
 800705a:	1961      	adds	r1, r4, r5
 800705c:	42a3      	cmp	r3, r4
 800705e:	6025      	str	r5, [r4, #0]
 8007060:	bf18      	it	ne
 8007062:	6059      	strne	r1, [r3, #4]
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	bf08      	it	eq
 8007068:	f8c8 1000 	streq.w	r1, [r8]
 800706c:	5162      	str	r2, [r4, r5]
 800706e:	604b      	str	r3, [r1, #4]
 8007070:	4638      	mov	r0, r7
 8007072:	f104 060b 	add.w	r6, r4, #11
 8007076:	f000 f829 	bl	80070cc <__malloc_unlock>
 800707a:	f026 0607 	bic.w	r6, r6, #7
 800707e:	1d23      	adds	r3, r4, #4
 8007080:	1af2      	subs	r2, r6, r3
 8007082:	d0ae      	beq.n	8006fe2 <_malloc_r+0x22>
 8007084:	1b9b      	subs	r3, r3, r6
 8007086:	50a3      	str	r3, [r4, r2]
 8007088:	e7ab      	b.n	8006fe2 <_malloc_r+0x22>
 800708a:	42a3      	cmp	r3, r4
 800708c:	6862      	ldr	r2, [r4, #4]
 800708e:	d1dd      	bne.n	800704c <_malloc_r+0x8c>
 8007090:	f8c8 2000 	str.w	r2, [r8]
 8007094:	e7ec      	b.n	8007070 <_malloc_r+0xb0>
 8007096:	4623      	mov	r3, r4
 8007098:	6864      	ldr	r4, [r4, #4]
 800709a:	e7ac      	b.n	8006ff6 <_malloc_r+0x36>
 800709c:	4634      	mov	r4, r6
 800709e:	6876      	ldr	r6, [r6, #4]
 80070a0:	e7b4      	b.n	800700c <_malloc_r+0x4c>
 80070a2:	4613      	mov	r3, r2
 80070a4:	e7cc      	b.n	8007040 <_malloc_r+0x80>
 80070a6:	230c      	movs	r3, #12
 80070a8:	603b      	str	r3, [r7, #0]
 80070aa:	4638      	mov	r0, r7
 80070ac:	f000 f80e 	bl	80070cc <__malloc_unlock>
 80070b0:	e797      	b.n	8006fe2 <_malloc_r+0x22>
 80070b2:	6025      	str	r5, [r4, #0]
 80070b4:	e7dc      	b.n	8007070 <_malloc_r+0xb0>
 80070b6:	605b      	str	r3, [r3, #4]
 80070b8:	deff      	udf	#255	; 0xff
 80070ba:	bf00      	nop
 80070bc:	20000b80 	.word	0x20000b80

080070c0 <__malloc_lock>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__malloc_lock+0x8>)
 80070c2:	f7ff b912 	b.w	80062ea <__retarget_lock_acquire_recursive>
 80070c6:	bf00      	nop
 80070c8:	20000b7c 	.word	0x20000b7c

080070cc <__malloc_unlock>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__malloc_unlock+0x8>)
 80070ce:	f7ff b90d 	b.w	80062ec <__retarget_lock_release_recursive>
 80070d2:	bf00      	nop
 80070d4:	20000b7c 	.word	0x20000b7c

080070d8 <_Balloc>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	69c6      	ldr	r6, [r0, #28]
 80070dc:	4604      	mov	r4, r0
 80070de:	460d      	mov	r5, r1
 80070e0:	b976      	cbnz	r6, 8007100 <_Balloc+0x28>
 80070e2:	2010      	movs	r0, #16
 80070e4:	f7ff ff44 	bl	8006f70 <malloc>
 80070e8:	4602      	mov	r2, r0
 80070ea:	61e0      	str	r0, [r4, #28]
 80070ec:	b920      	cbnz	r0, 80070f8 <_Balloc+0x20>
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <_Balloc+0x78>)
 80070f0:	4818      	ldr	r0, [pc, #96]	; (8007154 <_Balloc+0x7c>)
 80070f2:	216b      	movs	r1, #107	; 0x6b
 80070f4:	f000 ff72 	bl	8007fdc <__assert_func>
 80070f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070fc:	6006      	str	r6, [r0, #0]
 80070fe:	60c6      	str	r6, [r0, #12]
 8007100:	69e6      	ldr	r6, [r4, #28]
 8007102:	68f3      	ldr	r3, [r6, #12]
 8007104:	b183      	cbz	r3, 8007128 <_Balloc+0x50>
 8007106:	69e3      	ldr	r3, [r4, #28]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800710e:	b9b8      	cbnz	r0, 8007140 <_Balloc+0x68>
 8007110:	2101      	movs	r1, #1
 8007112:	fa01 f605 	lsl.w	r6, r1, r5
 8007116:	1d72      	adds	r2, r6, #5
 8007118:	0092      	lsls	r2, r2, #2
 800711a:	4620      	mov	r0, r4
 800711c:	f000 ff7c 	bl	8008018 <_calloc_r>
 8007120:	b160      	cbz	r0, 800713c <_Balloc+0x64>
 8007122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007126:	e00e      	b.n	8007146 <_Balloc+0x6e>
 8007128:	2221      	movs	r2, #33	; 0x21
 800712a:	2104      	movs	r1, #4
 800712c:	4620      	mov	r0, r4
 800712e:	f000 ff73 	bl	8008018 <_calloc_r>
 8007132:	69e3      	ldr	r3, [r4, #28]
 8007134:	60f0      	str	r0, [r6, #12]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e4      	bne.n	8007106 <_Balloc+0x2e>
 800713c:	2000      	movs	r0, #0
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	6802      	ldr	r2, [r0, #0]
 8007142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007146:	2300      	movs	r3, #0
 8007148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800714c:	e7f7      	b.n	800713e <_Balloc+0x66>
 800714e:	bf00      	nop
 8007150:	08008a61 	.word	0x08008a61
 8007154:	08008ae1 	.word	0x08008ae1

08007158 <_Bfree>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	69c6      	ldr	r6, [r0, #28]
 800715c:	4605      	mov	r5, r0
 800715e:	460c      	mov	r4, r1
 8007160:	b976      	cbnz	r6, 8007180 <_Bfree+0x28>
 8007162:	2010      	movs	r0, #16
 8007164:	f7ff ff04 	bl	8006f70 <malloc>
 8007168:	4602      	mov	r2, r0
 800716a:	61e8      	str	r0, [r5, #28]
 800716c:	b920      	cbnz	r0, 8007178 <_Bfree+0x20>
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <_Bfree+0x3c>)
 8007170:	4809      	ldr	r0, [pc, #36]	; (8007198 <_Bfree+0x40>)
 8007172:	218f      	movs	r1, #143	; 0x8f
 8007174:	f000 ff32 	bl	8007fdc <__assert_func>
 8007178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800717c:	6006      	str	r6, [r0, #0]
 800717e:	60c6      	str	r6, [r0, #12]
 8007180:	b13c      	cbz	r4, 8007192 <_Bfree+0x3a>
 8007182:	69eb      	ldr	r3, [r5, #28]
 8007184:	6862      	ldr	r2, [r4, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800718c:	6021      	str	r1, [r4, #0]
 800718e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	08008a61 	.word	0x08008a61
 8007198:	08008ae1 	.word	0x08008ae1

0800719c <__multadd>:
 800719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a0:	690d      	ldr	r5, [r1, #16]
 80071a2:	4607      	mov	r7, r0
 80071a4:	460c      	mov	r4, r1
 80071a6:	461e      	mov	r6, r3
 80071a8:	f101 0c14 	add.w	ip, r1, #20
 80071ac:	2000      	movs	r0, #0
 80071ae:	f8dc 3000 	ldr.w	r3, [ip]
 80071b2:	b299      	uxth	r1, r3
 80071b4:	fb02 6101 	mla	r1, r2, r1, r6
 80071b8:	0c1e      	lsrs	r6, r3, #16
 80071ba:	0c0b      	lsrs	r3, r1, #16
 80071bc:	fb02 3306 	mla	r3, r2, r6, r3
 80071c0:	b289      	uxth	r1, r1
 80071c2:	3001      	adds	r0, #1
 80071c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071c8:	4285      	cmp	r5, r0
 80071ca:	f84c 1b04 	str.w	r1, [ip], #4
 80071ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071d2:	dcec      	bgt.n	80071ae <__multadd+0x12>
 80071d4:	b30e      	cbz	r6, 800721a <__multadd+0x7e>
 80071d6:	68a3      	ldr	r3, [r4, #8]
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc19      	bgt.n	8007210 <__multadd+0x74>
 80071dc:	6861      	ldr	r1, [r4, #4]
 80071de:	4638      	mov	r0, r7
 80071e0:	3101      	adds	r1, #1
 80071e2:	f7ff ff79 	bl	80070d8 <_Balloc>
 80071e6:	4680      	mov	r8, r0
 80071e8:	b928      	cbnz	r0, 80071f6 <__multadd+0x5a>
 80071ea:	4602      	mov	r2, r0
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <__multadd+0x84>)
 80071ee:	480d      	ldr	r0, [pc, #52]	; (8007224 <__multadd+0x88>)
 80071f0:	21ba      	movs	r1, #186	; 0xba
 80071f2:	f000 fef3 	bl	8007fdc <__assert_func>
 80071f6:	6922      	ldr	r2, [r4, #16]
 80071f8:	3202      	adds	r2, #2
 80071fa:	f104 010c 	add.w	r1, r4, #12
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	300c      	adds	r0, #12
 8007202:	f000 fedd 	bl	8007fc0 <memcpy>
 8007206:	4621      	mov	r1, r4
 8007208:	4638      	mov	r0, r7
 800720a:	f7ff ffa5 	bl	8007158 <_Bfree>
 800720e:	4644      	mov	r4, r8
 8007210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007214:	3501      	adds	r5, #1
 8007216:	615e      	str	r6, [r3, #20]
 8007218:	6125      	str	r5, [r4, #16]
 800721a:	4620      	mov	r0, r4
 800721c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007220:	08008ad0 	.word	0x08008ad0
 8007224:	08008ae1 	.word	0x08008ae1

08007228 <__hi0bits>:
 8007228:	0c03      	lsrs	r3, r0, #16
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	b9d3      	cbnz	r3, 8007264 <__hi0bits+0x3c>
 800722e:	0400      	lsls	r0, r0, #16
 8007230:	2310      	movs	r3, #16
 8007232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007236:	bf04      	itt	eq
 8007238:	0200      	lsleq	r0, r0, #8
 800723a:	3308      	addeq	r3, #8
 800723c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007240:	bf04      	itt	eq
 8007242:	0100      	lsleq	r0, r0, #4
 8007244:	3304      	addeq	r3, #4
 8007246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800724a:	bf04      	itt	eq
 800724c:	0080      	lsleq	r0, r0, #2
 800724e:	3302      	addeq	r3, #2
 8007250:	2800      	cmp	r0, #0
 8007252:	db05      	blt.n	8007260 <__hi0bits+0x38>
 8007254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007258:	f103 0301 	add.w	r3, r3, #1
 800725c:	bf08      	it	eq
 800725e:	2320      	moveq	r3, #32
 8007260:	4618      	mov	r0, r3
 8007262:	4770      	bx	lr
 8007264:	2300      	movs	r3, #0
 8007266:	e7e4      	b.n	8007232 <__hi0bits+0xa>

08007268 <__lo0bits>:
 8007268:	6803      	ldr	r3, [r0, #0]
 800726a:	f013 0207 	ands.w	r2, r3, #7
 800726e:	d00c      	beq.n	800728a <__lo0bits+0x22>
 8007270:	07d9      	lsls	r1, r3, #31
 8007272:	d422      	bmi.n	80072ba <__lo0bits+0x52>
 8007274:	079a      	lsls	r2, r3, #30
 8007276:	bf49      	itett	mi
 8007278:	085b      	lsrmi	r3, r3, #1
 800727a:	089b      	lsrpl	r3, r3, #2
 800727c:	6003      	strmi	r3, [r0, #0]
 800727e:	2201      	movmi	r2, #1
 8007280:	bf5c      	itt	pl
 8007282:	6003      	strpl	r3, [r0, #0]
 8007284:	2202      	movpl	r2, #2
 8007286:	4610      	mov	r0, r2
 8007288:	4770      	bx	lr
 800728a:	b299      	uxth	r1, r3
 800728c:	b909      	cbnz	r1, 8007292 <__lo0bits+0x2a>
 800728e:	0c1b      	lsrs	r3, r3, #16
 8007290:	2210      	movs	r2, #16
 8007292:	b2d9      	uxtb	r1, r3
 8007294:	b909      	cbnz	r1, 800729a <__lo0bits+0x32>
 8007296:	3208      	adds	r2, #8
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	0719      	lsls	r1, r3, #28
 800729c:	bf04      	itt	eq
 800729e:	091b      	lsreq	r3, r3, #4
 80072a0:	3204      	addeq	r2, #4
 80072a2:	0799      	lsls	r1, r3, #30
 80072a4:	bf04      	itt	eq
 80072a6:	089b      	lsreq	r3, r3, #2
 80072a8:	3202      	addeq	r2, #2
 80072aa:	07d9      	lsls	r1, r3, #31
 80072ac:	d403      	bmi.n	80072b6 <__lo0bits+0x4e>
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	f102 0201 	add.w	r2, r2, #1
 80072b4:	d003      	beq.n	80072be <__lo0bits+0x56>
 80072b6:	6003      	str	r3, [r0, #0]
 80072b8:	e7e5      	b.n	8007286 <__lo0bits+0x1e>
 80072ba:	2200      	movs	r2, #0
 80072bc:	e7e3      	b.n	8007286 <__lo0bits+0x1e>
 80072be:	2220      	movs	r2, #32
 80072c0:	e7e1      	b.n	8007286 <__lo0bits+0x1e>
	...

080072c4 <__i2b>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	460c      	mov	r4, r1
 80072c8:	2101      	movs	r1, #1
 80072ca:	f7ff ff05 	bl	80070d8 <_Balloc>
 80072ce:	4602      	mov	r2, r0
 80072d0:	b928      	cbnz	r0, 80072de <__i2b+0x1a>
 80072d2:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <__i2b+0x24>)
 80072d4:	4805      	ldr	r0, [pc, #20]	; (80072ec <__i2b+0x28>)
 80072d6:	f240 1145 	movw	r1, #325	; 0x145
 80072da:	f000 fe7f 	bl	8007fdc <__assert_func>
 80072de:	2301      	movs	r3, #1
 80072e0:	6144      	str	r4, [r0, #20]
 80072e2:	6103      	str	r3, [r0, #16]
 80072e4:	bd10      	pop	{r4, pc}
 80072e6:	bf00      	nop
 80072e8:	08008ad0 	.word	0x08008ad0
 80072ec:	08008ae1 	.word	0x08008ae1

080072f0 <__multiply>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	4691      	mov	r9, r2
 80072f6:	690a      	ldr	r2, [r1, #16]
 80072f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	bfb8      	it	lt
 8007300:	460b      	movlt	r3, r1
 8007302:	460c      	mov	r4, r1
 8007304:	bfbc      	itt	lt
 8007306:	464c      	movlt	r4, r9
 8007308:	4699      	movlt	r9, r3
 800730a:	6927      	ldr	r7, [r4, #16]
 800730c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007310:	68a3      	ldr	r3, [r4, #8]
 8007312:	6861      	ldr	r1, [r4, #4]
 8007314:	eb07 060a 	add.w	r6, r7, sl
 8007318:	42b3      	cmp	r3, r6
 800731a:	b085      	sub	sp, #20
 800731c:	bfb8      	it	lt
 800731e:	3101      	addlt	r1, #1
 8007320:	f7ff feda 	bl	80070d8 <_Balloc>
 8007324:	b930      	cbnz	r0, 8007334 <__multiply+0x44>
 8007326:	4602      	mov	r2, r0
 8007328:	4b44      	ldr	r3, [pc, #272]	; (800743c <__multiply+0x14c>)
 800732a:	4845      	ldr	r0, [pc, #276]	; (8007440 <__multiply+0x150>)
 800732c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007330:	f000 fe54 	bl	8007fdc <__assert_func>
 8007334:	f100 0514 	add.w	r5, r0, #20
 8007338:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800733c:	462b      	mov	r3, r5
 800733e:	2200      	movs	r2, #0
 8007340:	4543      	cmp	r3, r8
 8007342:	d321      	bcc.n	8007388 <__multiply+0x98>
 8007344:	f104 0314 	add.w	r3, r4, #20
 8007348:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800734c:	f109 0314 	add.w	r3, r9, #20
 8007350:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007354:	9202      	str	r2, [sp, #8]
 8007356:	1b3a      	subs	r2, r7, r4
 8007358:	3a15      	subs	r2, #21
 800735a:	f022 0203 	bic.w	r2, r2, #3
 800735e:	3204      	adds	r2, #4
 8007360:	f104 0115 	add.w	r1, r4, #21
 8007364:	428f      	cmp	r7, r1
 8007366:	bf38      	it	cc
 8007368:	2204      	movcc	r2, #4
 800736a:	9201      	str	r2, [sp, #4]
 800736c:	9a02      	ldr	r2, [sp, #8]
 800736e:	9303      	str	r3, [sp, #12]
 8007370:	429a      	cmp	r2, r3
 8007372:	d80c      	bhi.n	800738e <__multiply+0x9e>
 8007374:	2e00      	cmp	r6, #0
 8007376:	dd03      	ble.n	8007380 <__multiply+0x90>
 8007378:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800737c:	2b00      	cmp	r3, #0
 800737e:	d05b      	beq.n	8007438 <__multiply+0x148>
 8007380:	6106      	str	r6, [r0, #16]
 8007382:	b005      	add	sp, #20
 8007384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007388:	f843 2b04 	str.w	r2, [r3], #4
 800738c:	e7d8      	b.n	8007340 <__multiply+0x50>
 800738e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007392:	f1ba 0f00 	cmp.w	sl, #0
 8007396:	d024      	beq.n	80073e2 <__multiply+0xf2>
 8007398:	f104 0e14 	add.w	lr, r4, #20
 800739c:	46a9      	mov	r9, r5
 800739e:	f04f 0c00 	mov.w	ip, #0
 80073a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073a6:	f8d9 1000 	ldr.w	r1, [r9]
 80073aa:	fa1f fb82 	uxth.w	fp, r2
 80073ae:	b289      	uxth	r1, r1
 80073b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80073b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073b8:	f8d9 2000 	ldr.w	r2, [r9]
 80073bc:	4461      	add	r1, ip
 80073be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80073c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073ca:	b289      	uxth	r1, r1
 80073cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073d0:	4577      	cmp	r7, lr
 80073d2:	f849 1b04 	str.w	r1, [r9], #4
 80073d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073da:	d8e2      	bhi.n	80073a2 <__multiply+0xb2>
 80073dc:	9a01      	ldr	r2, [sp, #4]
 80073de:	f845 c002 	str.w	ip, [r5, r2]
 80073e2:	9a03      	ldr	r2, [sp, #12]
 80073e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073e8:	3304      	adds	r3, #4
 80073ea:	f1b9 0f00 	cmp.w	r9, #0
 80073ee:	d021      	beq.n	8007434 <__multiply+0x144>
 80073f0:	6829      	ldr	r1, [r5, #0]
 80073f2:	f104 0c14 	add.w	ip, r4, #20
 80073f6:	46ae      	mov	lr, r5
 80073f8:	f04f 0a00 	mov.w	sl, #0
 80073fc:	f8bc b000 	ldrh.w	fp, [ip]
 8007400:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007404:	fb09 220b 	mla	r2, r9, fp, r2
 8007408:	4452      	add	r2, sl
 800740a:	b289      	uxth	r1, r1
 800740c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007410:	f84e 1b04 	str.w	r1, [lr], #4
 8007414:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007418:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800741c:	f8be 1000 	ldrh.w	r1, [lr]
 8007420:	fb09 110a 	mla	r1, r9, sl, r1
 8007424:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007428:	4567      	cmp	r7, ip
 800742a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800742e:	d8e5      	bhi.n	80073fc <__multiply+0x10c>
 8007430:	9a01      	ldr	r2, [sp, #4]
 8007432:	50a9      	str	r1, [r5, r2]
 8007434:	3504      	adds	r5, #4
 8007436:	e799      	b.n	800736c <__multiply+0x7c>
 8007438:	3e01      	subs	r6, #1
 800743a:	e79b      	b.n	8007374 <__multiply+0x84>
 800743c:	08008ad0 	.word	0x08008ad0
 8007440:	08008ae1 	.word	0x08008ae1

08007444 <__pow5mult>:
 8007444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007448:	4615      	mov	r5, r2
 800744a:	f012 0203 	ands.w	r2, r2, #3
 800744e:	4606      	mov	r6, r0
 8007450:	460f      	mov	r7, r1
 8007452:	d007      	beq.n	8007464 <__pow5mult+0x20>
 8007454:	4c25      	ldr	r4, [pc, #148]	; (80074ec <__pow5mult+0xa8>)
 8007456:	3a01      	subs	r2, #1
 8007458:	2300      	movs	r3, #0
 800745a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800745e:	f7ff fe9d 	bl	800719c <__multadd>
 8007462:	4607      	mov	r7, r0
 8007464:	10ad      	asrs	r5, r5, #2
 8007466:	d03d      	beq.n	80074e4 <__pow5mult+0xa0>
 8007468:	69f4      	ldr	r4, [r6, #28]
 800746a:	b97c      	cbnz	r4, 800748c <__pow5mult+0x48>
 800746c:	2010      	movs	r0, #16
 800746e:	f7ff fd7f 	bl	8006f70 <malloc>
 8007472:	4602      	mov	r2, r0
 8007474:	61f0      	str	r0, [r6, #28]
 8007476:	b928      	cbnz	r0, 8007484 <__pow5mult+0x40>
 8007478:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <__pow5mult+0xac>)
 800747a:	481e      	ldr	r0, [pc, #120]	; (80074f4 <__pow5mult+0xb0>)
 800747c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007480:	f000 fdac 	bl	8007fdc <__assert_func>
 8007484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007488:	6004      	str	r4, [r0, #0]
 800748a:	60c4      	str	r4, [r0, #12]
 800748c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007494:	b94c      	cbnz	r4, 80074aa <__pow5mult+0x66>
 8007496:	f240 2171 	movw	r1, #625	; 0x271
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff ff12 	bl	80072c4 <__i2b>
 80074a0:	2300      	movs	r3, #0
 80074a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80074a6:	4604      	mov	r4, r0
 80074a8:	6003      	str	r3, [r0, #0]
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	07eb      	lsls	r3, r5, #31
 80074b0:	d50a      	bpl.n	80074c8 <__pow5mult+0x84>
 80074b2:	4639      	mov	r1, r7
 80074b4:	4622      	mov	r2, r4
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7ff ff1a 	bl	80072f0 <__multiply>
 80074bc:	4639      	mov	r1, r7
 80074be:	4680      	mov	r8, r0
 80074c0:	4630      	mov	r0, r6
 80074c2:	f7ff fe49 	bl	8007158 <_Bfree>
 80074c6:	4647      	mov	r7, r8
 80074c8:	106d      	asrs	r5, r5, #1
 80074ca:	d00b      	beq.n	80074e4 <__pow5mult+0xa0>
 80074cc:	6820      	ldr	r0, [r4, #0]
 80074ce:	b938      	cbnz	r0, 80074e0 <__pow5mult+0x9c>
 80074d0:	4622      	mov	r2, r4
 80074d2:	4621      	mov	r1, r4
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7ff ff0b 	bl	80072f0 <__multiply>
 80074da:	6020      	str	r0, [r4, #0]
 80074dc:	f8c0 9000 	str.w	r9, [r0]
 80074e0:	4604      	mov	r4, r0
 80074e2:	e7e4      	b.n	80074ae <__pow5mult+0x6a>
 80074e4:	4638      	mov	r0, r7
 80074e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ea:	bf00      	nop
 80074ec:	08008c30 	.word	0x08008c30
 80074f0:	08008a61 	.word	0x08008a61
 80074f4:	08008ae1 	.word	0x08008ae1

080074f8 <__lshift>:
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	460c      	mov	r4, r1
 80074fe:	6849      	ldr	r1, [r1, #4]
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	4607      	mov	r7, r0
 800750a:	4691      	mov	r9, r2
 800750c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007510:	f108 0601 	add.w	r6, r8, #1
 8007514:	42b3      	cmp	r3, r6
 8007516:	db0b      	blt.n	8007530 <__lshift+0x38>
 8007518:	4638      	mov	r0, r7
 800751a:	f7ff fddd 	bl	80070d8 <_Balloc>
 800751e:	4605      	mov	r5, r0
 8007520:	b948      	cbnz	r0, 8007536 <__lshift+0x3e>
 8007522:	4602      	mov	r2, r0
 8007524:	4b28      	ldr	r3, [pc, #160]	; (80075c8 <__lshift+0xd0>)
 8007526:	4829      	ldr	r0, [pc, #164]	; (80075cc <__lshift+0xd4>)
 8007528:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800752c:	f000 fd56 	bl	8007fdc <__assert_func>
 8007530:	3101      	adds	r1, #1
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	e7ee      	b.n	8007514 <__lshift+0x1c>
 8007536:	2300      	movs	r3, #0
 8007538:	f100 0114 	add.w	r1, r0, #20
 800753c:	f100 0210 	add.w	r2, r0, #16
 8007540:	4618      	mov	r0, r3
 8007542:	4553      	cmp	r3, sl
 8007544:	db33      	blt.n	80075ae <__lshift+0xb6>
 8007546:	6920      	ldr	r0, [r4, #16]
 8007548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800754c:	f104 0314 	add.w	r3, r4, #20
 8007550:	f019 091f 	ands.w	r9, r9, #31
 8007554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007558:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800755c:	d02b      	beq.n	80075b6 <__lshift+0xbe>
 800755e:	f1c9 0e20 	rsb	lr, r9, #32
 8007562:	468a      	mov	sl, r1
 8007564:	2200      	movs	r2, #0
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	fa00 f009 	lsl.w	r0, r0, r9
 800756c:	4310      	orrs	r0, r2
 800756e:	f84a 0b04 	str.w	r0, [sl], #4
 8007572:	f853 2b04 	ldr.w	r2, [r3], #4
 8007576:	459c      	cmp	ip, r3
 8007578:	fa22 f20e 	lsr.w	r2, r2, lr
 800757c:	d8f3      	bhi.n	8007566 <__lshift+0x6e>
 800757e:	ebac 0304 	sub.w	r3, ip, r4
 8007582:	3b15      	subs	r3, #21
 8007584:	f023 0303 	bic.w	r3, r3, #3
 8007588:	3304      	adds	r3, #4
 800758a:	f104 0015 	add.w	r0, r4, #21
 800758e:	4584      	cmp	ip, r0
 8007590:	bf38      	it	cc
 8007592:	2304      	movcc	r3, #4
 8007594:	50ca      	str	r2, [r1, r3]
 8007596:	b10a      	cbz	r2, 800759c <__lshift+0xa4>
 8007598:	f108 0602 	add.w	r6, r8, #2
 800759c:	3e01      	subs	r6, #1
 800759e:	4638      	mov	r0, r7
 80075a0:	612e      	str	r6, [r5, #16]
 80075a2:	4621      	mov	r1, r4
 80075a4:	f7ff fdd8 	bl	8007158 <_Bfree>
 80075a8:	4628      	mov	r0, r5
 80075aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80075b2:	3301      	adds	r3, #1
 80075b4:	e7c5      	b.n	8007542 <__lshift+0x4a>
 80075b6:	3904      	subs	r1, #4
 80075b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80075c0:	459c      	cmp	ip, r3
 80075c2:	d8f9      	bhi.n	80075b8 <__lshift+0xc0>
 80075c4:	e7ea      	b.n	800759c <__lshift+0xa4>
 80075c6:	bf00      	nop
 80075c8:	08008ad0 	.word	0x08008ad0
 80075cc:	08008ae1 	.word	0x08008ae1

080075d0 <__mcmp>:
 80075d0:	b530      	push	{r4, r5, lr}
 80075d2:	6902      	ldr	r2, [r0, #16]
 80075d4:	690c      	ldr	r4, [r1, #16]
 80075d6:	1b12      	subs	r2, r2, r4
 80075d8:	d10e      	bne.n	80075f8 <__mcmp+0x28>
 80075da:	f100 0314 	add.w	r3, r0, #20
 80075de:	3114      	adds	r1, #20
 80075e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075f0:	42a5      	cmp	r5, r4
 80075f2:	d003      	beq.n	80075fc <__mcmp+0x2c>
 80075f4:	d305      	bcc.n	8007602 <__mcmp+0x32>
 80075f6:	2201      	movs	r2, #1
 80075f8:	4610      	mov	r0, r2
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	4283      	cmp	r3, r0
 80075fe:	d3f3      	bcc.n	80075e8 <__mcmp+0x18>
 8007600:	e7fa      	b.n	80075f8 <__mcmp+0x28>
 8007602:	f04f 32ff 	mov.w	r2, #4294967295
 8007606:	e7f7      	b.n	80075f8 <__mcmp+0x28>

08007608 <__mdiff>:
 8007608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	4606      	mov	r6, r0
 8007610:	4611      	mov	r1, r2
 8007612:	4620      	mov	r0, r4
 8007614:	4690      	mov	r8, r2
 8007616:	f7ff ffdb 	bl	80075d0 <__mcmp>
 800761a:	1e05      	subs	r5, r0, #0
 800761c:	d110      	bne.n	8007640 <__mdiff+0x38>
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff fd59 	bl	80070d8 <_Balloc>
 8007626:	b930      	cbnz	r0, 8007636 <__mdiff+0x2e>
 8007628:	4b3a      	ldr	r3, [pc, #232]	; (8007714 <__mdiff+0x10c>)
 800762a:	4602      	mov	r2, r0
 800762c:	f240 2137 	movw	r1, #567	; 0x237
 8007630:	4839      	ldr	r0, [pc, #228]	; (8007718 <__mdiff+0x110>)
 8007632:	f000 fcd3 	bl	8007fdc <__assert_func>
 8007636:	2301      	movs	r3, #1
 8007638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800763c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007640:	bfa4      	itt	ge
 8007642:	4643      	movge	r3, r8
 8007644:	46a0      	movge	r8, r4
 8007646:	4630      	mov	r0, r6
 8007648:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800764c:	bfa6      	itte	ge
 800764e:	461c      	movge	r4, r3
 8007650:	2500      	movge	r5, #0
 8007652:	2501      	movlt	r5, #1
 8007654:	f7ff fd40 	bl	80070d8 <_Balloc>
 8007658:	b920      	cbnz	r0, 8007664 <__mdiff+0x5c>
 800765a:	4b2e      	ldr	r3, [pc, #184]	; (8007714 <__mdiff+0x10c>)
 800765c:	4602      	mov	r2, r0
 800765e:	f240 2145 	movw	r1, #581	; 0x245
 8007662:	e7e5      	b.n	8007630 <__mdiff+0x28>
 8007664:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007668:	6926      	ldr	r6, [r4, #16]
 800766a:	60c5      	str	r5, [r0, #12]
 800766c:	f104 0914 	add.w	r9, r4, #20
 8007670:	f108 0514 	add.w	r5, r8, #20
 8007674:	f100 0e14 	add.w	lr, r0, #20
 8007678:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800767c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007680:	f108 0210 	add.w	r2, r8, #16
 8007684:	46f2      	mov	sl, lr
 8007686:	2100      	movs	r1, #0
 8007688:	f859 3b04 	ldr.w	r3, [r9], #4
 800768c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007690:	fa11 f88b 	uxtah	r8, r1, fp
 8007694:	b299      	uxth	r1, r3
 8007696:	0c1b      	lsrs	r3, r3, #16
 8007698:	eba8 0801 	sub.w	r8, r8, r1
 800769c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076a4:	fa1f f888 	uxth.w	r8, r8
 80076a8:	1419      	asrs	r1, r3, #16
 80076aa:	454e      	cmp	r6, r9
 80076ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076b0:	f84a 3b04 	str.w	r3, [sl], #4
 80076b4:	d8e8      	bhi.n	8007688 <__mdiff+0x80>
 80076b6:	1b33      	subs	r3, r6, r4
 80076b8:	3b15      	subs	r3, #21
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	3304      	adds	r3, #4
 80076c0:	3415      	adds	r4, #21
 80076c2:	42a6      	cmp	r6, r4
 80076c4:	bf38      	it	cc
 80076c6:	2304      	movcc	r3, #4
 80076c8:	441d      	add	r5, r3
 80076ca:	4473      	add	r3, lr
 80076cc:	469e      	mov	lr, r3
 80076ce:	462e      	mov	r6, r5
 80076d0:	4566      	cmp	r6, ip
 80076d2:	d30e      	bcc.n	80076f2 <__mdiff+0xea>
 80076d4:	f10c 0203 	add.w	r2, ip, #3
 80076d8:	1b52      	subs	r2, r2, r5
 80076da:	f022 0203 	bic.w	r2, r2, #3
 80076de:	3d03      	subs	r5, #3
 80076e0:	45ac      	cmp	ip, r5
 80076e2:	bf38      	it	cc
 80076e4:	2200      	movcc	r2, #0
 80076e6:	4413      	add	r3, r2
 80076e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80076ec:	b17a      	cbz	r2, 800770e <__mdiff+0x106>
 80076ee:	6107      	str	r7, [r0, #16]
 80076f0:	e7a4      	b.n	800763c <__mdiff+0x34>
 80076f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80076f6:	fa11 f288 	uxtah	r2, r1, r8
 80076fa:	1414      	asrs	r4, r2, #16
 80076fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007700:	b292      	uxth	r2, r2
 8007702:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007706:	f84e 2b04 	str.w	r2, [lr], #4
 800770a:	1421      	asrs	r1, r4, #16
 800770c:	e7e0      	b.n	80076d0 <__mdiff+0xc8>
 800770e:	3f01      	subs	r7, #1
 8007710:	e7ea      	b.n	80076e8 <__mdiff+0xe0>
 8007712:	bf00      	nop
 8007714:	08008ad0 	.word	0x08008ad0
 8007718:	08008ae1 	.word	0x08008ae1

0800771c <__d2b>:
 800771c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007720:	460f      	mov	r7, r1
 8007722:	2101      	movs	r1, #1
 8007724:	ec59 8b10 	vmov	r8, r9, d0
 8007728:	4616      	mov	r6, r2
 800772a:	f7ff fcd5 	bl	80070d8 <_Balloc>
 800772e:	4604      	mov	r4, r0
 8007730:	b930      	cbnz	r0, 8007740 <__d2b+0x24>
 8007732:	4602      	mov	r2, r0
 8007734:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <__d2b+0xac>)
 8007736:	4825      	ldr	r0, [pc, #148]	; (80077cc <__d2b+0xb0>)
 8007738:	f240 310f 	movw	r1, #783	; 0x30f
 800773c:	f000 fc4e 	bl	8007fdc <__assert_func>
 8007740:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007744:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007748:	bb2d      	cbnz	r5, 8007796 <__d2b+0x7a>
 800774a:	9301      	str	r3, [sp, #4]
 800774c:	f1b8 0300 	subs.w	r3, r8, #0
 8007750:	d026      	beq.n	80077a0 <__d2b+0x84>
 8007752:	4668      	mov	r0, sp
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	f7ff fd87 	bl	8007268 <__lo0bits>
 800775a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800775e:	b1e8      	cbz	r0, 800779c <__d2b+0x80>
 8007760:	f1c0 0320 	rsb	r3, r0, #32
 8007764:	fa02 f303 	lsl.w	r3, r2, r3
 8007768:	430b      	orrs	r3, r1
 800776a:	40c2      	lsrs	r2, r0
 800776c:	6163      	str	r3, [r4, #20]
 800776e:	9201      	str	r2, [sp, #4]
 8007770:	9b01      	ldr	r3, [sp, #4]
 8007772:	61a3      	str	r3, [r4, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	bf14      	ite	ne
 8007778:	2202      	movne	r2, #2
 800777a:	2201      	moveq	r2, #1
 800777c:	6122      	str	r2, [r4, #16]
 800777e:	b1bd      	cbz	r5, 80077b0 <__d2b+0x94>
 8007780:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007784:	4405      	add	r5, r0
 8007786:	603d      	str	r5, [r7, #0]
 8007788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800778c:	6030      	str	r0, [r6, #0]
 800778e:	4620      	mov	r0, r4
 8007790:	b003      	add	sp, #12
 8007792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779a:	e7d6      	b.n	800774a <__d2b+0x2e>
 800779c:	6161      	str	r1, [r4, #20]
 800779e:	e7e7      	b.n	8007770 <__d2b+0x54>
 80077a0:	a801      	add	r0, sp, #4
 80077a2:	f7ff fd61 	bl	8007268 <__lo0bits>
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	6163      	str	r3, [r4, #20]
 80077aa:	3020      	adds	r0, #32
 80077ac:	2201      	movs	r2, #1
 80077ae:	e7e5      	b.n	800777c <__d2b+0x60>
 80077b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077b8:	6038      	str	r0, [r7, #0]
 80077ba:	6918      	ldr	r0, [r3, #16]
 80077bc:	f7ff fd34 	bl	8007228 <__hi0bits>
 80077c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077c4:	e7e2      	b.n	800778c <__d2b+0x70>
 80077c6:	bf00      	nop
 80077c8:	08008ad0 	.word	0x08008ad0
 80077cc:	08008ae1 	.word	0x08008ae1

080077d0 <__ssputs_r>:
 80077d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d4:	688e      	ldr	r6, [r1, #8]
 80077d6:	461f      	mov	r7, r3
 80077d8:	42be      	cmp	r6, r7
 80077da:	680b      	ldr	r3, [r1, #0]
 80077dc:	4682      	mov	sl, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	4690      	mov	r8, r2
 80077e2:	d82c      	bhi.n	800783e <__ssputs_r+0x6e>
 80077e4:	898a      	ldrh	r2, [r1, #12]
 80077e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077ea:	d026      	beq.n	800783a <__ssputs_r+0x6a>
 80077ec:	6965      	ldr	r5, [r4, #20]
 80077ee:	6909      	ldr	r1, [r1, #16]
 80077f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077f4:	eba3 0901 	sub.w	r9, r3, r1
 80077f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077fc:	1c7b      	adds	r3, r7, #1
 80077fe:	444b      	add	r3, r9
 8007800:	106d      	asrs	r5, r5, #1
 8007802:	429d      	cmp	r5, r3
 8007804:	bf38      	it	cc
 8007806:	461d      	movcc	r5, r3
 8007808:	0553      	lsls	r3, r2, #21
 800780a:	d527      	bpl.n	800785c <__ssputs_r+0x8c>
 800780c:	4629      	mov	r1, r5
 800780e:	f7ff fbd7 	bl	8006fc0 <_malloc_r>
 8007812:	4606      	mov	r6, r0
 8007814:	b360      	cbz	r0, 8007870 <__ssputs_r+0xa0>
 8007816:	6921      	ldr	r1, [r4, #16]
 8007818:	464a      	mov	r2, r9
 800781a:	f000 fbd1 	bl	8007fc0 <memcpy>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	6126      	str	r6, [r4, #16]
 800782c:	6165      	str	r5, [r4, #20]
 800782e:	444e      	add	r6, r9
 8007830:	eba5 0509 	sub.w	r5, r5, r9
 8007834:	6026      	str	r6, [r4, #0]
 8007836:	60a5      	str	r5, [r4, #8]
 8007838:	463e      	mov	r6, r7
 800783a:	42be      	cmp	r6, r7
 800783c:	d900      	bls.n	8007840 <__ssputs_r+0x70>
 800783e:	463e      	mov	r6, r7
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	4632      	mov	r2, r6
 8007844:	4641      	mov	r1, r8
 8007846:	f000 fb6f 	bl	8007f28 <memmove>
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	1b9b      	subs	r3, r3, r6
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	4433      	add	r3, r6
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	2000      	movs	r0, #0
 8007858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785c:	462a      	mov	r2, r5
 800785e:	f000 fc03 	bl	8008068 <_realloc_r>
 8007862:	4606      	mov	r6, r0
 8007864:	2800      	cmp	r0, #0
 8007866:	d1e0      	bne.n	800782a <__ssputs_r+0x5a>
 8007868:	6921      	ldr	r1, [r4, #16]
 800786a:	4650      	mov	r0, sl
 800786c:	f7ff fb34 	bl	8006ed8 <_free_r>
 8007870:	230c      	movs	r3, #12
 8007872:	f8ca 3000 	str.w	r3, [sl]
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	f04f 30ff 	mov.w	r0, #4294967295
 8007882:	e7e9      	b.n	8007858 <__ssputs_r+0x88>

08007884 <_svfiprintf_r>:
 8007884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	4698      	mov	r8, r3
 800788a:	898b      	ldrh	r3, [r1, #12]
 800788c:	061b      	lsls	r3, r3, #24
 800788e:	b09d      	sub	sp, #116	; 0x74
 8007890:	4607      	mov	r7, r0
 8007892:	460d      	mov	r5, r1
 8007894:	4614      	mov	r4, r2
 8007896:	d50e      	bpl.n	80078b6 <_svfiprintf_r+0x32>
 8007898:	690b      	ldr	r3, [r1, #16]
 800789a:	b963      	cbnz	r3, 80078b6 <_svfiprintf_r+0x32>
 800789c:	2140      	movs	r1, #64	; 0x40
 800789e:	f7ff fb8f 	bl	8006fc0 <_malloc_r>
 80078a2:	6028      	str	r0, [r5, #0]
 80078a4:	6128      	str	r0, [r5, #16]
 80078a6:	b920      	cbnz	r0, 80078b2 <_svfiprintf_r+0x2e>
 80078a8:	230c      	movs	r3, #12
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295
 80078b0:	e0d0      	b.n	8007a54 <_svfiprintf_r+0x1d0>
 80078b2:	2340      	movs	r3, #64	; 0x40
 80078b4:	616b      	str	r3, [r5, #20]
 80078b6:	2300      	movs	r3, #0
 80078b8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ba:	2320      	movs	r3, #32
 80078bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80078c4:	2330      	movs	r3, #48	; 0x30
 80078c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a6c <_svfiprintf_r+0x1e8>
 80078ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078ce:	f04f 0901 	mov.w	r9, #1
 80078d2:	4623      	mov	r3, r4
 80078d4:	469a      	mov	sl, r3
 80078d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078da:	b10a      	cbz	r2, 80078e0 <_svfiprintf_r+0x5c>
 80078dc:	2a25      	cmp	r2, #37	; 0x25
 80078de:	d1f9      	bne.n	80078d4 <_svfiprintf_r+0x50>
 80078e0:	ebba 0b04 	subs.w	fp, sl, r4
 80078e4:	d00b      	beq.n	80078fe <_svfiprintf_r+0x7a>
 80078e6:	465b      	mov	r3, fp
 80078e8:	4622      	mov	r2, r4
 80078ea:	4629      	mov	r1, r5
 80078ec:	4638      	mov	r0, r7
 80078ee:	f7ff ff6f 	bl	80077d0 <__ssputs_r>
 80078f2:	3001      	adds	r0, #1
 80078f4:	f000 80a9 	beq.w	8007a4a <_svfiprintf_r+0x1c6>
 80078f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078fa:	445a      	add	r2, fp
 80078fc:	9209      	str	r2, [sp, #36]	; 0x24
 80078fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80a1 	beq.w	8007a4a <_svfiprintf_r+0x1c6>
 8007908:	2300      	movs	r3, #0
 800790a:	f04f 32ff 	mov.w	r2, #4294967295
 800790e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007912:	f10a 0a01 	add.w	sl, sl, #1
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	9307      	str	r3, [sp, #28]
 800791a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800791e:	931a      	str	r3, [sp, #104]	; 0x68
 8007920:	4654      	mov	r4, sl
 8007922:	2205      	movs	r2, #5
 8007924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007928:	4850      	ldr	r0, [pc, #320]	; (8007a6c <_svfiprintf_r+0x1e8>)
 800792a:	f7f8 fc89 	bl	8000240 <memchr>
 800792e:	9a04      	ldr	r2, [sp, #16]
 8007930:	b9d8      	cbnz	r0, 800796a <_svfiprintf_r+0xe6>
 8007932:	06d0      	lsls	r0, r2, #27
 8007934:	bf44      	itt	mi
 8007936:	2320      	movmi	r3, #32
 8007938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800793c:	0711      	lsls	r1, r2, #28
 800793e:	bf44      	itt	mi
 8007940:	232b      	movmi	r3, #43	; 0x2b
 8007942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007946:	f89a 3000 	ldrb.w	r3, [sl]
 800794a:	2b2a      	cmp	r3, #42	; 0x2a
 800794c:	d015      	beq.n	800797a <_svfiprintf_r+0xf6>
 800794e:	9a07      	ldr	r2, [sp, #28]
 8007950:	4654      	mov	r4, sl
 8007952:	2000      	movs	r0, #0
 8007954:	f04f 0c0a 	mov.w	ip, #10
 8007958:	4621      	mov	r1, r4
 800795a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800795e:	3b30      	subs	r3, #48	; 0x30
 8007960:	2b09      	cmp	r3, #9
 8007962:	d94d      	bls.n	8007a00 <_svfiprintf_r+0x17c>
 8007964:	b1b0      	cbz	r0, 8007994 <_svfiprintf_r+0x110>
 8007966:	9207      	str	r2, [sp, #28]
 8007968:	e014      	b.n	8007994 <_svfiprintf_r+0x110>
 800796a:	eba0 0308 	sub.w	r3, r0, r8
 800796e:	fa09 f303 	lsl.w	r3, r9, r3
 8007972:	4313      	orrs	r3, r2
 8007974:	9304      	str	r3, [sp, #16]
 8007976:	46a2      	mov	sl, r4
 8007978:	e7d2      	b.n	8007920 <_svfiprintf_r+0x9c>
 800797a:	9b03      	ldr	r3, [sp, #12]
 800797c:	1d19      	adds	r1, r3, #4
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	9103      	str	r1, [sp, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	bfbb      	ittet	lt
 8007986:	425b      	neglt	r3, r3
 8007988:	f042 0202 	orrlt.w	r2, r2, #2
 800798c:	9307      	strge	r3, [sp, #28]
 800798e:	9307      	strlt	r3, [sp, #28]
 8007990:	bfb8      	it	lt
 8007992:	9204      	strlt	r2, [sp, #16]
 8007994:	7823      	ldrb	r3, [r4, #0]
 8007996:	2b2e      	cmp	r3, #46	; 0x2e
 8007998:	d10c      	bne.n	80079b4 <_svfiprintf_r+0x130>
 800799a:	7863      	ldrb	r3, [r4, #1]
 800799c:	2b2a      	cmp	r3, #42	; 0x2a
 800799e:	d134      	bne.n	8007a0a <_svfiprintf_r+0x186>
 80079a0:	9b03      	ldr	r3, [sp, #12]
 80079a2:	1d1a      	adds	r2, r3, #4
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	9203      	str	r2, [sp, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	bfb8      	it	lt
 80079ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80079b0:	3402      	adds	r4, #2
 80079b2:	9305      	str	r3, [sp, #20]
 80079b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007a7c <_svfiprintf_r+0x1f8>
 80079b8:	7821      	ldrb	r1, [r4, #0]
 80079ba:	2203      	movs	r2, #3
 80079bc:	4650      	mov	r0, sl
 80079be:	f7f8 fc3f 	bl	8000240 <memchr>
 80079c2:	b138      	cbz	r0, 80079d4 <_svfiprintf_r+0x150>
 80079c4:	9b04      	ldr	r3, [sp, #16]
 80079c6:	eba0 000a 	sub.w	r0, r0, sl
 80079ca:	2240      	movs	r2, #64	; 0x40
 80079cc:	4082      	lsls	r2, r0
 80079ce:	4313      	orrs	r3, r2
 80079d0:	3401      	adds	r4, #1
 80079d2:	9304      	str	r3, [sp, #16]
 80079d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d8:	4825      	ldr	r0, [pc, #148]	; (8007a70 <_svfiprintf_r+0x1ec>)
 80079da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079de:	2206      	movs	r2, #6
 80079e0:	f7f8 fc2e 	bl	8000240 <memchr>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d038      	beq.n	8007a5a <_svfiprintf_r+0x1d6>
 80079e8:	4b22      	ldr	r3, [pc, #136]	; (8007a74 <_svfiprintf_r+0x1f0>)
 80079ea:	bb1b      	cbnz	r3, 8007a34 <_svfiprintf_r+0x1b0>
 80079ec:	9b03      	ldr	r3, [sp, #12]
 80079ee:	3307      	adds	r3, #7
 80079f0:	f023 0307 	bic.w	r3, r3, #7
 80079f4:	3308      	adds	r3, #8
 80079f6:	9303      	str	r3, [sp, #12]
 80079f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fa:	4433      	add	r3, r6
 80079fc:	9309      	str	r3, [sp, #36]	; 0x24
 80079fe:	e768      	b.n	80078d2 <_svfiprintf_r+0x4e>
 8007a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a04:	460c      	mov	r4, r1
 8007a06:	2001      	movs	r0, #1
 8007a08:	e7a6      	b.n	8007958 <_svfiprintf_r+0xd4>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	9305      	str	r3, [sp, #20]
 8007a10:	4619      	mov	r1, r3
 8007a12:	f04f 0c0a 	mov.w	ip, #10
 8007a16:	4620      	mov	r0, r4
 8007a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a1c:	3a30      	subs	r2, #48	; 0x30
 8007a1e:	2a09      	cmp	r2, #9
 8007a20:	d903      	bls.n	8007a2a <_svfiprintf_r+0x1a6>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0c6      	beq.n	80079b4 <_svfiprintf_r+0x130>
 8007a26:	9105      	str	r1, [sp, #20]
 8007a28:	e7c4      	b.n	80079b4 <_svfiprintf_r+0x130>
 8007a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a2e:	4604      	mov	r4, r0
 8007a30:	2301      	movs	r3, #1
 8007a32:	e7f0      	b.n	8007a16 <_svfiprintf_r+0x192>
 8007a34:	ab03      	add	r3, sp, #12
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	462a      	mov	r2, r5
 8007a3a:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <_svfiprintf_r+0x1f4>)
 8007a3c:	a904      	add	r1, sp, #16
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7fd fe72 	bl	8005728 <_printf_float>
 8007a44:	1c42      	adds	r2, r0, #1
 8007a46:	4606      	mov	r6, r0
 8007a48:	d1d6      	bne.n	80079f8 <_svfiprintf_r+0x174>
 8007a4a:	89ab      	ldrh	r3, [r5, #12]
 8007a4c:	065b      	lsls	r3, r3, #25
 8007a4e:	f53f af2d 	bmi.w	80078ac <_svfiprintf_r+0x28>
 8007a52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a54:	b01d      	add	sp, #116	; 0x74
 8007a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5a:	ab03      	add	r3, sp, #12
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	462a      	mov	r2, r5
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <_svfiprintf_r+0x1f4>)
 8007a62:	a904      	add	r1, sp, #16
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7fe f8e7 	bl	8005c38 <_printf_i>
 8007a6a:	e7eb      	b.n	8007a44 <_svfiprintf_r+0x1c0>
 8007a6c:	08008c3c 	.word	0x08008c3c
 8007a70:	08008c46 	.word	0x08008c46
 8007a74:	08005729 	.word	0x08005729
 8007a78:	080077d1 	.word	0x080077d1
 8007a7c:	08008c42 	.word	0x08008c42

08007a80 <__sfputc_r>:
 8007a80:	6893      	ldr	r3, [r2, #8]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	b410      	push	{r4}
 8007a88:	6093      	str	r3, [r2, #8]
 8007a8a:	da08      	bge.n	8007a9e <__sfputc_r+0x1e>
 8007a8c:	6994      	ldr	r4, [r2, #24]
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	db01      	blt.n	8007a96 <__sfputc_r+0x16>
 8007a92:	290a      	cmp	r1, #10
 8007a94:	d103      	bne.n	8007a9e <__sfputc_r+0x1e>
 8007a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a9a:	f7fe bb14 	b.w	80060c6 <__swbuf_r>
 8007a9e:	6813      	ldr	r3, [r2, #0]
 8007aa0:	1c58      	adds	r0, r3, #1
 8007aa2:	6010      	str	r0, [r2, #0]
 8007aa4:	7019      	strb	r1, [r3, #0]
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <__sfputs_r>:
 8007aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	460f      	mov	r7, r1
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	18d5      	adds	r5, r2, r3
 8007ab8:	42ac      	cmp	r4, r5
 8007aba:	d101      	bne.n	8007ac0 <__sfputs_r+0x12>
 8007abc:	2000      	movs	r0, #0
 8007abe:	e007      	b.n	8007ad0 <__sfputs_r+0x22>
 8007ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac4:	463a      	mov	r2, r7
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f7ff ffda 	bl	8007a80 <__sfputc_r>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d1f3      	bne.n	8007ab8 <__sfputs_r+0xa>
 8007ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ad4 <_vfiprintf_r>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	460d      	mov	r5, r1
 8007ada:	b09d      	sub	sp, #116	; 0x74
 8007adc:	4614      	mov	r4, r2
 8007ade:	4698      	mov	r8, r3
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	b118      	cbz	r0, 8007aec <_vfiprintf_r+0x18>
 8007ae4:	6a03      	ldr	r3, [r0, #32]
 8007ae6:	b90b      	cbnz	r3, 8007aec <_vfiprintf_r+0x18>
 8007ae8:	f7fe fa54 	bl	8005f94 <__sinit>
 8007aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aee:	07d9      	lsls	r1, r3, #31
 8007af0:	d405      	bmi.n	8007afe <_vfiprintf_r+0x2a>
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	059a      	lsls	r2, r3, #22
 8007af6:	d402      	bmi.n	8007afe <_vfiprintf_r+0x2a>
 8007af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007afa:	f7fe fbf6 	bl	80062ea <__retarget_lock_acquire_recursive>
 8007afe:	89ab      	ldrh	r3, [r5, #12]
 8007b00:	071b      	lsls	r3, r3, #28
 8007b02:	d501      	bpl.n	8007b08 <_vfiprintf_r+0x34>
 8007b04:	692b      	ldr	r3, [r5, #16]
 8007b06:	b99b      	cbnz	r3, 8007b30 <_vfiprintf_r+0x5c>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7fe fb18 	bl	8006140 <__swsetup_r>
 8007b10:	b170      	cbz	r0, 8007b30 <_vfiprintf_r+0x5c>
 8007b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b14:	07dc      	lsls	r4, r3, #31
 8007b16:	d504      	bpl.n	8007b22 <_vfiprintf_r+0x4e>
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	b01d      	add	sp, #116	; 0x74
 8007b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	0598      	lsls	r0, r3, #22
 8007b26:	d4f7      	bmi.n	8007b18 <_vfiprintf_r+0x44>
 8007b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2a:	f7fe fbdf 	bl	80062ec <__retarget_lock_release_recursive>
 8007b2e:	e7f3      	b.n	8007b18 <_vfiprintf_r+0x44>
 8007b30:	2300      	movs	r3, #0
 8007b32:	9309      	str	r3, [sp, #36]	; 0x24
 8007b34:	2320      	movs	r3, #32
 8007b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b3e:	2330      	movs	r3, #48	; 0x30
 8007b40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007cf4 <_vfiprintf_r+0x220>
 8007b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b48:	f04f 0901 	mov.w	r9, #1
 8007b4c:	4623      	mov	r3, r4
 8007b4e:	469a      	mov	sl, r3
 8007b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b54:	b10a      	cbz	r2, 8007b5a <_vfiprintf_r+0x86>
 8007b56:	2a25      	cmp	r2, #37	; 0x25
 8007b58:	d1f9      	bne.n	8007b4e <_vfiprintf_r+0x7a>
 8007b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b5e:	d00b      	beq.n	8007b78 <_vfiprintf_r+0xa4>
 8007b60:	465b      	mov	r3, fp
 8007b62:	4622      	mov	r2, r4
 8007b64:	4629      	mov	r1, r5
 8007b66:	4630      	mov	r0, r6
 8007b68:	f7ff ffa1 	bl	8007aae <__sfputs_r>
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	f000 80a9 	beq.w	8007cc4 <_vfiprintf_r+0x1f0>
 8007b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b74:	445a      	add	r2, fp
 8007b76:	9209      	str	r2, [sp, #36]	; 0x24
 8007b78:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80a1 	beq.w	8007cc4 <_vfiprintf_r+0x1f0>
 8007b82:	2300      	movs	r3, #0
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295
 8007b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b8c:	f10a 0a01 	add.w	sl, sl, #1
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b98:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9a:	4654      	mov	r4, sl
 8007b9c:	2205      	movs	r2, #5
 8007b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba2:	4854      	ldr	r0, [pc, #336]	; (8007cf4 <_vfiprintf_r+0x220>)
 8007ba4:	f7f8 fb4c 	bl	8000240 <memchr>
 8007ba8:	9a04      	ldr	r2, [sp, #16]
 8007baa:	b9d8      	cbnz	r0, 8007be4 <_vfiprintf_r+0x110>
 8007bac:	06d1      	lsls	r1, r2, #27
 8007bae:	bf44      	itt	mi
 8007bb0:	2320      	movmi	r3, #32
 8007bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb6:	0713      	lsls	r3, r2, #28
 8007bb8:	bf44      	itt	mi
 8007bba:	232b      	movmi	r3, #43	; 0x2b
 8007bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc6:	d015      	beq.n	8007bf4 <_vfiprintf_r+0x120>
 8007bc8:	9a07      	ldr	r2, [sp, #28]
 8007bca:	4654      	mov	r4, sl
 8007bcc:	2000      	movs	r0, #0
 8007bce:	f04f 0c0a 	mov.w	ip, #10
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bd8:	3b30      	subs	r3, #48	; 0x30
 8007bda:	2b09      	cmp	r3, #9
 8007bdc:	d94d      	bls.n	8007c7a <_vfiprintf_r+0x1a6>
 8007bde:	b1b0      	cbz	r0, 8007c0e <_vfiprintf_r+0x13a>
 8007be0:	9207      	str	r2, [sp, #28]
 8007be2:	e014      	b.n	8007c0e <_vfiprintf_r+0x13a>
 8007be4:	eba0 0308 	sub.w	r3, r0, r8
 8007be8:	fa09 f303 	lsl.w	r3, r9, r3
 8007bec:	4313      	orrs	r3, r2
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	46a2      	mov	sl, r4
 8007bf2:	e7d2      	b.n	8007b9a <_vfiprintf_r+0xc6>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	1d19      	adds	r1, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	9103      	str	r1, [sp, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfbb      	ittet	lt
 8007c00:	425b      	neglt	r3, r3
 8007c02:	f042 0202 	orrlt.w	r2, r2, #2
 8007c06:	9307      	strge	r3, [sp, #28]
 8007c08:	9307      	strlt	r3, [sp, #28]
 8007c0a:	bfb8      	it	lt
 8007c0c:	9204      	strlt	r2, [sp, #16]
 8007c0e:	7823      	ldrb	r3, [r4, #0]
 8007c10:	2b2e      	cmp	r3, #46	; 0x2e
 8007c12:	d10c      	bne.n	8007c2e <_vfiprintf_r+0x15a>
 8007c14:	7863      	ldrb	r3, [r4, #1]
 8007c16:	2b2a      	cmp	r3, #42	; 0x2a
 8007c18:	d134      	bne.n	8007c84 <_vfiprintf_r+0x1b0>
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	1d1a      	adds	r2, r3, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	9203      	str	r2, [sp, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfb8      	it	lt
 8007c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c2a:	3402      	adds	r4, #2
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007d04 <_vfiprintf_r+0x230>
 8007c32:	7821      	ldrb	r1, [r4, #0]
 8007c34:	2203      	movs	r2, #3
 8007c36:	4650      	mov	r0, sl
 8007c38:	f7f8 fb02 	bl	8000240 <memchr>
 8007c3c:	b138      	cbz	r0, 8007c4e <_vfiprintf_r+0x17a>
 8007c3e:	9b04      	ldr	r3, [sp, #16]
 8007c40:	eba0 000a 	sub.w	r0, r0, sl
 8007c44:	2240      	movs	r2, #64	; 0x40
 8007c46:	4082      	lsls	r2, r0
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	3401      	adds	r4, #1
 8007c4c:	9304      	str	r3, [sp, #16]
 8007c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c52:	4829      	ldr	r0, [pc, #164]	; (8007cf8 <_vfiprintf_r+0x224>)
 8007c54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c58:	2206      	movs	r2, #6
 8007c5a:	f7f8 faf1 	bl	8000240 <memchr>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d03f      	beq.n	8007ce2 <_vfiprintf_r+0x20e>
 8007c62:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <_vfiprintf_r+0x228>)
 8007c64:	bb1b      	cbnz	r3, 8007cae <_vfiprintf_r+0x1da>
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	3307      	adds	r3, #7
 8007c6a:	f023 0307 	bic.w	r3, r3, #7
 8007c6e:	3308      	adds	r3, #8
 8007c70:	9303      	str	r3, [sp, #12]
 8007c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c74:	443b      	add	r3, r7
 8007c76:	9309      	str	r3, [sp, #36]	; 0x24
 8007c78:	e768      	b.n	8007b4c <_vfiprintf_r+0x78>
 8007c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c7e:	460c      	mov	r4, r1
 8007c80:	2001      	movs	r0, #1
 8007c82:	e7a6      	b.n	8007bd2 <_vfiprintf_r+0xfe>
 8007c84:	2300      	movs	r3, #0
 8007c86:	3401      	adds	r4, #1
 8007c88:	9305      	str	r3, [sp, #20]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	f04f 0c0a 	mov.w	ip, #10
 8007c90:	4620      	mov	r0, r4
 8007c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c96:	3a30      	subs	r2, #48	; 0x30
 8007c98:	2a09      	cmp	r2, #9
 8007c9a:	d903      	bls.n	8007ca4 <_vfiprintf_r+0x1d0>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0c6      	beq.n	8007c2e <_vfiprintf_r+0x15a>
 8007ca0:	9105      	str	r1, [sp, #20]
 8007ca2:	e7c4      	b.n	8007c2e <_vfiprintf_r+0x15a>
 8007ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ca8:	4604      	mov	r4, r0
 8007caa:	2301      	movs	r3, #1
 8007cac:	e7f0      	b.n	8007c90 <_vfiprintf_r+0x1bc>
 8007cae:	ab03      	add	r3, sp, #12
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	462a      	mov	r2, r5
 8007cb4:	4b12      	ldr	r3, [pc, #72]	; (8007d00 <_vfiprintf_r+0x22c>)
 8007cb6:	a904      	add	r1, sp, #16
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7fd fd35 	bl	8005728 <_printf_float>
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	1c78      	adds	r0, r7, #1
 8007cc2:	d1d6      	bne.n	8007c72 <_vfiprintf_r+0x19e>
 8007cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc6:	07d9      	lsls	r1, r3, #31
 8007cc8:	d405      	bmi.n	8007cd6 <_vfiprintf_r+0x202>
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	059a      	lsls	r2, r3, #22
 8007cce:	d402      	bmi.n	8007cd6 <_vfiprintf_r+0x202>
 8007cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cd2:	f7fe fb0b 	bl	80062ec <__retarget_lock_release_recursive>
 8007cd6:	89ab      	ldrh	r3, [r5, #12]
 8007cd8:	065b      	lsls	r3, r3, #25
 8007cda:	f53f af1d 	bmi.w	8007b18 <_vfiprintf_r+0x44>
 8007cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce0:	e71c      	b.n	8007b1c <_vfiprintf_r+0x48>
 8007ce2:	ab03      	add	r3, sp, #12
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <_vfiprintf_r+0x22c>)
 8007cea:	a904      	add	r1, sp, #16
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7fd ffa3 	bl	8005c38 <_printf_i>
 8007cf2:	e7e4      	b.n	8007cbe <_vfiprintf_r+0x1ea>
 8007cf4:	08008c3c 	.word	0x08008c3c
 8007cf8:	08008c46 	.word	0x08008c46
 8007cfc:	08005729 	.word	0x08005729
 8007d00:	08007aaf 	.word	0x08007aaf
 8007d04:	08008c42 	.word	0x08008c42

08007d08 <__sflush_r>:
 8007d08:	898a      	ldrh	r2, [r1, #12]
 8007d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0e:	4605      	mov	r5, r0
 8007d10:	0710      	lsls	r0, r2, #28
 8007d12:	460c      	mov	r4, r1
 8007d14:	d458      	bmi.n	8007dc8 <__sflush_r+0xc0>
 8007d16:	684b      	ldr	r3, [r1, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dc05      	bgt.n	8007d28 <__sflush_r+0x20>
 8007d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dc02      	bgt.n	8007d28 <__sflush_r+0x20>
 8007d22:	2000      	movs	r0, #0
 8007d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	d0f9      	beq.n	8007d22 <__sflush_r+0x1a>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d34:	682f      	ldr	r7, [r5, #0]
 8007d36:	6a21      	ldr	r1, [r4, #32]
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	d032      	beq.n	8007da2 <__sflush_r+0x9a>
 8007d3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	075a      	lsls	r2, r3, #29
 8007d42:	d505      	bpl.n	8007d50 <__sflush_r+0x48>
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	1ac0      	subs	r0, r0, r3
 8007d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d4a:	b10b      	cbz	r3, 8007d50 <__sflush_r+0x48>
 8007d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d4e:	1ac0      	subs	r0, r0, r3
 8007d50:	2300      	movs	r3, #0
 8007d52:	4602      	mov	r2, r0
 8007d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d56:	6a21      	ldr	r1, [r4, #32]
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b0      	blx	r6
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	d106      	bne.n	8007d70 <__sflush_r+0x68>
 8007d62:	6829      	ldr	r1, [r5, #0]
 8007d64:	291d      	cmp	r1, #29
 8007d66:	d82b      	bhi.n	8007dc0 <__sflush_r+0xb8>
 8007d68:	4a29      	ldr	r2, [pc, #164]	; (8007e10 <__sflush_r+0x108>)
 8007d6a:	410a      	asrs	r2, r1
 8007d6c:	07d6      	lsls	r6, r2, #31
 8007d6e:	d427      	bmi.n	8007dc0 <__sflush_r+0xb8>
 8007d70:	2200      	movs	r2, #0
 8007d72:	6062      	str	r2, [r4, #4]
 8007d74:	04d9      	lsls	r1, r3, #19
 8007d76:	6922      	ldr	r2, [r4, #16]
 8007d78:	6022      	str	r2, [r4, #0]
 8007d7a:	d504      	bpl.n	8007d86 <__sflush_r+0x7e>
 8007d7c:	1c42      	adds	r2, r0, #1
 8007d7e:	d101      	bne.n	8007d84 <__sflush_r+0x7c>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b903      	cbnz	r3, 8007d86 <__sflush_r+0x7e>
 8007d84:	6560      	str	r0, [r4, #84]	; 0x54
 8007d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d88:	602f      	str	r7, [r5, #0]
 8007d8a:	2900      	cmp	r1, #0
 8007d8c:	d0c9      	beq.n	8007d22 <__sflush_r+0x1a>
 8007d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d92:	4299      	cmp	r1, r3
 8007d94:	d002      	beq.n	8007d9c <__sflush_r+0x94>
 8007d96:	4628      	mov	r0, r5
 8007d98:	f7ff f89e 	bl	8006ed8 <_free_r>
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	6360      	str	r0, [r4, #52]	; 0x34
 8007da0:	e7c0      	b.n	8007d24 <__sflush_r+0x1c>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b0      	blx	r6
 8007da8:	1c41      	adds	r1, r0, #1
 8007daa:	d1c8      	bne.n	8007d3e <__sflush_r+0x36>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0c5      	beq.n	8007d3e <__sflush_r+0x36>
 8007db2:	2b1d      	cmp	r3, #29
 8007db4:	d001      	beq.n	8007dba <__sflush_r+0xb2>
 8007db6:	2b16      	cmp	r3, #22
 8007db8:	d101      	bne.n	8007dbe <__sflush_r+0xb6>
 8007dba:	602f      	str	r7, [r5, #0]
 8007dbc:	e7b1      	b.n	8007d22 <__sflush_r+0x1a>
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	e7ad      	b.n	8007d24 <__sflush_r+0x1c>
 8007dc8:	690f      	ldr	r7, [r1, #16]
 8007dca:	2f00      	cmp	r7, #0
 8007dcc:	d0a9      	beq.n	8007d22 <__sflush_r+0x1a>
 8007dce:	0793      	lsls	r3, r2, #30
 8007dd0:	680e      	ldr	r6, [r1, #0]
 8007dd2:	bf08      	it	eq
 8007dd4:	694b      	ldreq	r3, [r1, #20]
 8007dd6:	600f      	str	r7, [r1, #0]
 8007dd8:	bf18      	it	ne
 8007dda:	2300      	movne	r3, #0
 8007ddc:	eba6 0807 	sub.w	r8, r6, r7
 8007de0:	608b      	str	r3, [r1, #8]
 8007de2:	f1b8 0f00 	cmp.w	r8, #0
 8007de6:	dd9c      	ble.n	8007d22 <__sflush_r+0x1a>
 8007de8:	6a21      	ldr	r1, [r4, #32]
 8007dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dec:	4643      	mov	r3, r8
 8007dee:	463a      	mov	r2, r7
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	2800      	cmp	r0, #0
 8007df6:	dc06      	bgt.n	8007e06 <__sflush_r+0xfe>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e78e      	b.n	8007d24 <__sflush_r+0x1c>
 8007e06:	4407      	add	r7, r0
 8007e08:	eba8 0800 	sub.w	r8, r8, r0
 8007e0c:	e7e9      	b.n	8007de2 <__sflush_r+0xda>
 8007e0e:	bf00      	nop
 8007e10:	dfbffffe 	.word	0xdfbffffe

08007e14 <_fflush_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	690b      	ldr	r3, [r1, #16]
 8007e18:	4605      	mov	r5, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	b913      	cbnz	r3, 8007e24 <_fflush_r+0x10>
 8007e1e:	2500      	movs	r5, #0
 8007e20:	4628      	mov	r0, r5
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	b118      	cbz	r0, 8007e2e <_fflush_r+0x1a>
 8007e26:	6a03      	ldr	r3, [r0, #32]
 8007e28:	b90b      	cbnz	r3, 8007e2e <_fflush_r+0x1a>
 8007e2a:	f7fe f8b3 	bl	8005f94 <__sinit>
 8007e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0f3      	beq.n	8007e1e <_fflush_r+0xa>
 8007e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e38:	07d0      	lsls	r0, r2, #31
 8007e3a:	d404      	bmi.n	8007e46 <_fflush_r+0x32>
 8007e3c:	0599      	lsls	r1, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_fflush_r+0x32>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f7fe fa52 	bl	80062ea <__retarget_lock_acquire_recursive>
 8007e46:	4628      	mov	r0, r5
 8007e48:	4621      	mov	r1, r4
 8007e4a:	f7ff ff5d 	bl	8007d08 <__sflush_r>
 8007e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e50:	07da      	lsls	r2, r3, #31
 8007e52:	4605      	mov	r5, r0
 8007e54:	d4e4      	bmi.n	8007e20 <_fflush_r+0xc>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	059b      	lsls	r3, r3, #22
 8007e5a:	d4e1      	bmi.n	8007e20 <_fflush_r+0xc>
 8007e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e5e:	f7fe fa45 	bl	80062ec <__retarget_lock_release_recursive>
 8007e62:	e7dd      	b.n	8007e20 <_fflush_r+0xc>

08007e64 <__swhatbuf_r>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	460c      	mov	r4, r1
 8007e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	b096      	sub	sp, #88	; 0x58
 8007e70:	4615      	mov	r5, r2
 8007e72:	461e      	mov	r6, r3
 8007e74:	da0d      	bge.n	8007e92 <__swhatbuf_r+0x2e>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	bf0c      	ite	eq
 8007e82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007e86:	2340      	movne	r3, #64	; 0x40
 8007e88:	2000      	movs	r0, #0
 8007e8a:	6031      	str	r1, [r6, #0]
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	b016      	add	sp, #88	; 0x58
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	466a      	mov	r2, sp
 8007e94:	f000 f862 	bl	8007f5c <_fstat_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	dbec      	blt.n	8007e76 <__swhatbuf_r+0x12>
 8007e9c:	9901      	ldr	r1, [sp, #4]
 8007e9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ea2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ea6:	4259      	negs	r1, r3
 8007ea8:	4159      	adcs	r1, r3
 8007eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eae:	e7eb      	b.n	8007e88 <__swhatbuf_r+0x24>

08007eb0 <__smakebuf_r>:
 8007eb0:	898b      	ldrh	r3, [r1, #12]
 8007eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eb4:	079d      	lsls	r5, r3, #30
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460c      	mov	r4, r1
 8007eba:	d507      	bpl.n	8007ecc <__smakebuf_r+0x1c>
 8007ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	6163      	str	r3, [r4, #20]
 8007ec8:	b002      	add	sp, #8
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	ab01      	add	r3, sp, #4
 8007ece:	466a      	mov	r2, sp
 8007ed0:	f7ff ffc8 	bl	8007e64 <__swhatbuf_r>
 8007ed4:	9900      	ldr	r1, [sp, #0]
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f7ff f871 	bl	8006fc0 <_malloc_r>
 8007ede:	b948      	cbnz	r0, 8007ef4 <__smakebuf_r+0x44>
 8007ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee4:	059a      	lsls	r2, r3, #22
 8007ee6:	d4ef      	bmi.n	8007ec8 <__smakebuf_r+0x18>
 8007ee8:	f023 0303 	bic.w	r3, r3, #3
 8007eec:	f043 0302 	orr.w	r3, r3, #2
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	e7e3      	b.n	8007ebc <__smakebuf_r+0xc>
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	6020      	str	r0, [r4, #0]
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	9b00      	ldr	r3, [sp, #0]
 8007f00:	6163      	str	r3, [r4, #20]
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	6120      	str	r0, [r4, #16]
 8007f06:	b15b      	cbz	r3, 8007f20 <__smakebuf_r+0x70>
 8007f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f000 f837 	bl	8007f80 <_isatty_r>
 8007f12:	b128      	cbz	r0, 8007f20 <__smakebuf_r+0x70>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	f043 0301 	orr.w	r3, r3, #1
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	431d      	orrs	r5, r3
 8007f24:	81a5      	strh	r5, [r4, #12]
 8007f26:	e7cf      	b.n	8007ec8 <__smakebuf_r+0x18>

08007f28 <memmove>:
 8007f28:	4288      	cmp	r0, r1
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	eb01 0402 	add.w	r4, r1, r2
 8007f30:	d902      	bls.n	8007f38 <memmove+0x10>
 8007f32:	4284      	cmp	r4, r0
 8007f34:	4623      	mov	r3, r4
 8007f36:	d807      	bhi.n	8007f48 <memmove+0x20>
 8007f38:	1e43      	subs	r3, r0, #1
 8007f3a:	42a1      	cmp	r1, r4
 8007f3c:	d008      	beq.n	8007f50 <memmove+0x28>
 8007f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f46:	e7f8      	b.n	8007f3a <memmove+0x12>
 8007f48:	4402      	add	r2, r0
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	428a      	cmp	r2, r1
 8007f4e:	d100      	bne.n	8007f52 <memmove+0x2a>
 8007f50:	bd10      	pop	{r4, pc}
 8007f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f5a:	e7f7      	b.n	8007f4c <memmove+0x24>

08007f5c <_fstat_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d07      	ldr	r5, [pc, #28]	; (8007f7c <_fstat_r+0x20>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	f7f9 fc50 	bl	800180e <_fstat>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d102      	bne.n	8007f78 <_fstat_r+0x1c>
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	b103      	cbz	r3, 8007f78 <_fstat_r+0x1c>
 8007f76:	6023      	str	r3, [r4, #0]
 8007f78:	bd38      	pop	{r3, r4, r5, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000b78 	.word	0x20000b78

08007f80 <_isatty_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d06      	ldr	r5, [pc, #24]	; (8007f9c <_isatty_r+0x1c>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	f7f9 fc4f 	bl	800182e <_isatty>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_isatty_r+0x1a>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_isatty_r+0x1a>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	20000b78 	.word	0x20000b78

08007fa0 <_sbrk_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d06      	ldr	r5, [pc, #24]	; (8007fbc <_sbrk_r+0x1c>)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	602b      	str	r3, [r5, #0]
 8007fac:	f7f9 fc58 	bl	8001860 <_sbrk>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_sbrk_r+0x1a>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_sbrk_r+0x1a>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	20000b78 	.word	0x20000b78

08007fc0 <memcpy>:
 8007fc0:	440a      	add	r2, r1
 8007fc2:	4291      	cmp	r1, r2
 8007fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fc8:	d100      	bne.n	8007fcc <memcpy+0xc>
 8007fca:	4770      	bx	lr
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fd6:	4291      	cmp	r1, r2
 8007fd8:	d1f9      	bne.n	8007fce <memcpy+0xe>
 8007fda:	bd10      	pop	{r4, pc}

08007fdc <__assert_func>:
 8007fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fde:	4614      	mov	r4, r2
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b09      	ldr	r3, [pc, #36]	; (8008008 <__assert_func+0x2c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	68d8      	ldr	r0, [r3, #12]
 8007fea:	b14c      	cbz	r4, 8008000 <__assert_func+0x24>
 8007fec:	4b07      	ldr	r3, [pc, #28]	; (800800c <__assert_func+0x30>)
 8007fee:	9100      	str	r1, [sp, #0]
 8007ff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ff4:	4906      	ldr	r1, [pc, #24]	; (8008010 <__assert_func+0x34>)
 8007ff6:	462b      	mov	r3, r5
 8007ff8:	f000 f872 	bl	80080e0 <fiprintf>
 8007ffc:	f000 f882 	bl	8008104 <abort>
 8008000:	4b04      	ldr	r3, [pc, #16]	; (8008014 <__assert_func+0x38>)
 8008002:	461c      	mov	r4, r3
 8008004:	e7f3      	b.n	8007fee <__assert_func+0x12>
 8008006:	bf00      	nop
 8008008:	20000070 	.word	0x20000070
 800800c:	08008c57 	.word	0x08008c57
 8008010:	08008c64 	.word	0x08008c64
 8008014:	08008c92 	.word	0x08008c92

08008018 <_calloc_r>:
 8008018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800801a:	fba1 2402 	umull	r2, r4, r1, r2
 800801e:	b94c      	cbnz	r4, 8008034 <_calloc_r+0x1c>
 8008020:	4611      	mov	r1, r2
 8008022:	9201      	str	r2, [sp, #4]
 8008024:	f7fe ffcc 	bl	8006fc0 <_malloc_r>
 8008028:	9a01      	ldr	r2, [sp, #4]
 800802a:	4605      	mov	r5, r0
 800802c:	b930      	cbnz	r0, 800803c <_calloc_r+0x24>
 800802e:	4628      	mov	r0, r5
 8008030:	b003      	add	sp, #12
 8008032:	bd30      	pop	{r4, r5, pc}
 8008034:	220c      	movs	r2, #12
 8008036:	6002      	str	r2, [r0, #0]
 8008038:	2500      	movs	r5, #0
 800803a:	e7f8      	b.n	800802e <_calloc_r+0x16>
 800803c:	4621      	mov	r1, r4
 800803e:	f7fe f8d7 	bl	80061f0 <memset>
 8008042:	e7f4      	b.n	800802e <_calloc_r+0x16>

08008044 <__ascii_mbtowc>:
 8008044:	b082      	sub	sp, #8
 8008046:	b901      	cbnz	r1, 800804a <__ascii_mbtowc+0x6>
 8008048:	a901      	add	r1, sp, #4
 800804a:	b142      	cbz	r2, 800805e <__ascii_mbtowc+0x1a>
 800804c:	b14b      	cbz	r3, 8008062 <__ascii_mbtowc+0x1e>
 800804e:	7813      	ldrb	r3, [r2, #0]
 8008050:	600b      	str	r3, [r1, #0]
 8008052:	7812      	ldrb	r2, [r2, #0]
 8008054:	1e10      	subs	r0, r2, #0
 8008056:	bf18      	it	ne
 8008058:	2001      	movne	r0, #1
 800805a:	b002      	add	sp, #8
 800805c:	4770      	bx	lr
 800805e:	4610      	mov	r0, r2
 8008060:	e7fb      	b.n	800805a <__ascii_mbtowc+0x16>
 8008062:	f06f 0001 	mvn.w	r0, #1
 8008066:	e7f8      	b.n	800805a <__ascii_mbtowc+0x16>

08008068 <_realloc_r>:
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	4680      	mov	r8, r0
 800806e:	4614      	mov	r4, r2
 8008070:	460e      	mov	r6, r1
 8008072:	b921      	cbnz	r1, 800807e <_realloc_r+0x16>
 8008074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008078:	4611      	mov	r1, r2
 800807a:	f7fe bfa1 	b.w	8006fc0 <_malloc_r>
 800807e:	b92a      	cbnz	r2, 800808c <_realloc_r+0x24>
 8008080:	f7fe ff2a 	bl	8006ed8 <_free_r>
 8008084:	4625      	mov	r5, r4
 8008086:	4628      	mov	r0, r5
 8008088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800808c:	f000 f841 	bl	8008112 <_malloc_usable_size_r>
 8008090:	4284      	cmp	r4, r0
 8008092:	4607      	mov	r7, r0
 8008094:	d802      	bhi.n	800809c <_realloc_r+0x34>
 8008096:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800809a:	d812      	bhi.n	80080c2 <_realloc_r+0x5a>
 800809c:	4621      	mov	r1, r4
 800809e:	4640      	mov	r0, r8
 80080a0:	f7fe ff8e 	bl	8006fc0 <_malloc_r>
 80080a4:	4605      	mov	r5, r0
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d0ed      	beq.n	8008086 <_realloc_r+0x1e>
 80080aa:	42bc      	cmp	r4, r7
 80080ac:	4622      	mov	r2, r4
 80080ae:	4631      	mov	r1, r6
 80080b0:	bf28      	it	cs
 80080b2:	463a      	movcs	r2, r7
 80080b4:	f7ff ff84 	bl	8007fc0 <memcpy>
 80080b8:	4631      	mov	r1, r6
 80080ba:	4640      	mov	r0, r8
 80080bc:	f7fe ff0c 	bl	8006ed8 <_free_r>
 80080c0:	e7e1      	b.n	8008086 <_realloc_r+0x1e>
 80080c2:	4635      	mov	r5, r6
 80080c4:	e7df      	b.n	8008086 <_realloc_r+0x1e>

080080c6 <__ascii_wctomb>:
 80080c6:	b149      	cbz	r1, 80080dc <__ascii_wctomb+0x16>
 80080c8:	2aff      	cmp	r2, #255	; 0xff
 80080ca:	bf85      	ittet	hi
 80080cc:	238a      	movhi	r3, #138	; 0x8a
 80080ce:	6003      	strhi	r3, [r0, #0]
 80080d0:	700a      	strbls	r2, [r1, #0]
 80080d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80080d6:	bf98      	it	ls
 80080d8:	2001      	movls	r0, #1
 80080da:	4770      	bx	lr
 80080dc:	4608      	mov	r0, r1
 80080de:	4770      	bx	lr

080080e0 <fiprintf>:
 80080e0:	b40e      	push	{r1, r2, r3}
 80080e2:	b503      	push	{r0, r1, lr}
 80080e4:	4601      	mov	r1, r0
 80080e6:	ab03      	add	r3, sp, #12
 80080e8:	4805      	ldr	r0, [pc, #20]	; (8008100 <fiprintf+0x20>)
 80080ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	f7ff fcef 	bl	8007ad4 <_vfiprintf_r>
 80080f6:	b002      	add	sp, #8
 80080f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080fc:	b003      	add	sp, #12
 80080fe:	4770      	bx	lr
 8008100:	20000070 	.word	0x20000070

08008104 <abort>:
 8008104:	b508      	push	{r3, lr}
 8008106:	2006      	movs	r0, #6
 8008108:	f000 f834 	bl	8008174 <raise>
 800810c:	2001      	movs	r0, #1
 800810e:	f7f9 fb2f 	bl	8001770 <_exit>

08008112 <_malloc_usable_size_r>:
 8008112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008116:	1f18      	subs	r0, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	bfbc      	itt	lt
 800811c:	580b      	ldrlt	r3, [r1, r0]
 800811e:	18c0      	addlt	r0, r0, r3
 8008120:	4770      	bx	lr

08008122 <_raise_r>:
 8008122:	291f      	cmp	r1, #31
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4604      	mov	r4, r0
 8008128:	460d      	mov	r5, r1
 800812a:	d904      	bls.n	8008136 <_raise_r+0x14>
 800812c:	2316      	movs	r3, #22
 800812e:	6003      	str	r3, [r0, #0]
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008138:	b112      	cbz	r2, 8008140 <_raise_r+0x1e>
 800813a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800813e:	b94b      	cbnz	r3, 8008154 <_raise_r+0x32>
 8008140:	4620      	mov	r0, r4
 8008142:	f000 f831 	bl	80081a8 <_getpid_r>
 8008146:	462a      	mov	r2, r5
 8008148:	4601      	mov	r1, r0
 800814a:	4620      	mov	r0, r4
 800814c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008150:	f000 b818 	b.w	8008184 <_kill_r>
 8008154:	2b01      	cmp	r3, #1
 8008156:	d00a      	beq.n	800816e <_raise_r+0x4c>
 8008158:	1c59      	adds	r1, r3, #1
 800815a:	d103      	bne.n	8008164 <_raise_r+0x42>
 800815c:	2316      	movs	r3, #22
 800815e:	6003      	str	r3, [r0, #0]
 8008160:	2001      	movs	r0, #1
 8008162:	e7e7      	b.n	8008134 <_raise_r+0x12>
 8008164:	2400      	movs	r4, #0
 8008166:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800816a:	4628      	mov	r0, r5
 800816c:	4798      	blx	r3
 800816e:	2000      	movs	r0, #0
 8008170:	e7e0      	b.n	8008134 <_raise_r+0x12>
	...

08008174 <raise>:
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <raise+0xc>)
 8008176:	4601      	mov	r1, r0
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f7ff bfd2 	b.w	8008122 <_raise_r>
 800817e:	bf00      	nop
 8008180:	20000070 	.word	0x20000070

08008184 <_kill_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	; (80081a4 <_kill_r+0x20>)
 8008188:	2300      	movs	r3, #0
 800818a:	4604      	mov	r4, r0
 800818c:	4608      	mov	r0, r1
 800818e:	4611      	mov	r1, r2
 8008190:	602b      	str	r3, [r5, #0]
 8008192:	f7f9 fadd 	bl	8001750 <_kill>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d102      	bne.n	80081a0 <_kill_r+0x1c>
 800819a:	682b      	ldr	r3, [r5, #0]
 800819c:	b103      	cbz	r3, 80081a0 <_kill_r+0x1c>
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop
 80081a4:	20000b78 	.word	0x20000b78

080081a8 <_getpid_r>:
 80081a8:	f7f9 baca 	b.w	8001740 <_getpid>

080081ac <checkint>:
 80081ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081b0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80081b4:	429a      	cmp	r2, r3
 80081b6:	b570      	push	{r4, r5, r6, lr}
 80081b8:	dd2a      	ble.n	8008210 <checkint+0x64>
 80081ba:	f240 4333 	movw	r3, #1075	; 0x433
 80081be:	429a      	cmp	r2, r3
 80081c0:	dc24      	bgt.n	800820c <checkint+0x60>
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	f1a3 0620 	sub.w	r6, r3, #32
 80081c8:	f04f 32ff 	mov.w	r2, #4294967295
 80081cc:	fa02 f403 	lsl.w	r4, r2, r3
 80081d0:	fa02 f606 	lsl.w	r6, r2, r6
 80081d4:	f1c3 0520 	rsb	r5, r3, #32
 80081d8:	fa22 f505 	lsr.w	r5, r2, r5
 80081dc:	4334      	orrs	r4, r6
 80081de:	432c      	orrs	r4, r5
 80081e0:	409a      	lsls	r2, r3
 80081e2:	ea20 0202 	bic.w	r2, r0, r2
 80081e6:	ea21 0404 	bic.w	r4, r1, r4
 80081ea:	4322      	orrs	r2, r4
 80081ec:	f1a3 0420 	sub.w	r4, r3, #32
 80081f0:	f1c3 0220 	rsb	r2, r3, #32
 80081f4:	d10c      	bne.n	8008210 <checkint+0x64>
 80081f6:	40d8      	lsrs	r0, r3
 80081f8:	fa01 f302 	lsl.w	r3, r1, r2
 80081fc:	4318      	orrs	r0, r3
 80081fe:	40e1      	lsrs	r1, r4
 8008200:	4308      	orrs	r0, r1
 8008202:	f000 0001 	and.w	r0, r0, #1
 8008206:	f1d0 0002 	rsbs	r0, r0, #2
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	2002      	movs	r0, #2
 800820e:	e7fc      	b.n	800820a <checkint+0x5e>
 8008210:	2000      	movs	r0, #0
 8008212:	e7fa      	b.n	800820a <checkint+0x5e>
 8008214:	0000      	movs	r0, r0
	...

08008218 <pow>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	ee10 4a90 	vmov	r4, s1
 8008220:	ed2d 8b0a 	vpush	{d8-d12}
 8008224:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8008228:	ee11 aa90 	vmov	sl, s3
 800822c:	f108 32ff 	add.w	r2, r8, #4294967295
 8008230:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8008234:	429a      	cmp	r2, r3
 8008236:	ee10 5a10 	vmov	r5, s0
 800823a:	ee11 0a10 	vmov	r0, s2
 800823e:	b087      	sub	sp, #28
 8008240:	46c4      	mov	ip, r8
 8008242:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8008246:	d806      	bhi.n	8008256 <pow+0x3e>
 8008248:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800824c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8008250:	2b7f      	cmp	r3, #127	; 0x7f
 8008252:	f240 8156 	bls.w	8008502 <pow+0x2ea>
 8008256:	1802      	adds	r2, r0, r0
 8008258:	eb4a 010a 	adc.w	r1, sl, sl
 800825c:	f06f 0b01 	mvn.w	fp, #1
 8008260:	1e57      	subs	r7, r2, #1
 8008262:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008266:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800826a:	45bb      	cmp	fp, r7
 800826c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8008270:	d242      	bcs.n	80082f8 <pow+0xe0>
 8008272:	ea52 0301 	orrs.w	r3, r2, r1
 8008276:	f04f 0300 	mov.w	r3, #0
 800827a:	d10c      	bne.n	8008296 <pow+0x7e>
 800827c:	196d      	adds	r5, r5, r5
 800827e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8008282:	4164      	adcs	r4, r4
 8008284:	42ab      	cmp	r3, r5
 8008286:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800828a:	41a3      	sbcs	r3, r4
 800828c:	f0c0 808f 	bcc.w	80083ae <pow+0x196>
 8008290:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008294:	e02b      	b.n	80082ee <pow+0xd6>
 8008296:	4ed4      	ldr	r6, [pc, #848]	; (80085e8 <pow+0x3d0>)
 8008298:	42b4      	cmp	r4, r6
 800829a:	bf08      	it	eq
 800829c:	429d      	cmpeq	r5, r3
 800829e:	d109      	bne.n	80082b4 <pow+0x9c>
 80082a0:	1800      	adds	r0, r0, r0
 80082a2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 80082a6:	eb4a 0a0a 	adc.w	sl, sl, sl
 80082aa:	4283      	cmp	r3, r0
 80082ac:	4bcf      	ldr	r3, [pc, #828]	; (80085ec <pow+0x3d4>)
 80082ae:	eb73 030a 	sbcs.w	r3, r3, sl
 80082b2:	e7eb      	b.n	800828c <pow+0x74>
 80082b4:	196d      	adds	r5, r5, r5
 80082b6:	48ce      	ldr	r0, [pc, #824]	; (80085f0 <pow+0x3d8>)
 80082b8:	4164      	adcs	r4, r4
 80082ba:	42ab      	cmp	r3, r5
 80082bc:	eb70 0604 	sbcs.w	r6, r0, r4
 80082c0:	d375      	bcc.n	80083ae <pow+0x196>
 80082c2:	4281      	cmp	r1, r0
 80082c4:	bf08      	it	eq
 80082c6:	429a      	cmpeq	r2, r3
 80082c8:	d171      	bne.n	80083ae <pow+0x196>
 80082ca:	4aca      	ldr	r2, [pc, #808]	; (80085f4 <pow+0x3dc>)
 80082cc:	4294      	cmp	r4, r2
 80082ce:	bf08      	it	eq
 80082d0:	429d      	cmpeq	r5, r3
 80082d2:	d0dd      	beq.n	8008290 <pow+0x78>
 80082d4:	4294      	cmp	r4, r2
 80082d6:	ea6f 0a0a 	mvn.w	sl, sl
 80082da:	bf34      	ite	cc
 80082dc:	2400      	movcc	r4, #0
 80082de:	2401      	movcs	r4, #1
 80082e0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80082e4:	4554      	cmp	r4, sl
 80082e6:	f040 81dc 	bne.w	80086a2 <pow+0x48a>
 80082ea:	ee21 0b01 	vmul.f64	d0, d1, d1
 80082ee:	b007      	add	sp, #28
 80082f0:	ecbd 8b0a 	vpop	{d8-d12}
 80082f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f8:	196f      	adds	r7, r5, r5
 80082fa:	eb44 0904 	adc.w	r9, r4, r4
 80082fe:	1e7a      	subs	r2, r7, #1
 8008300:	f169 0300 	sbc.w	r3, r9, #0
 8008304:	4593      	cmp	fp, r2
 8008306:	eb7e 0303 	sbcs.w	r3, lr, r3
 800830a:	d225      	bcs.n	8008358 <pow+0x140>
 800830c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8008310:	2c00      	cmp	r4, #0
 8008312:	da13      	bge.n	800833c <pow+0x124>
 8008314:	4651      	mov	r1, sl
 8008316:	f7ff ff49 	bl	80081ac <checkint>
 800831a:	2801      	cmp	r0, #1
 800831c:	d10e      	bne.n	800833c <pow+0x124>
 800831e:	eeb1 0b40 	vneg.f64	d0, d0
 8008322:	ea57 0909 	orrs.w	r9, r7, r9
 8008326:	d10b      	bne.n	8008340 <pow+0x128>
 8008328:	f1ba 0f00 	cmp.w	sl, #0
 800832c:	dadf      	bge.n	80082ee <pow+0xd6>
 800832e:	b007      	add	sp, #28
 8008330:	ecbd 8b0a 	vpop	{d8-d12}
 8008334:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	f000 b9ea 	b.w	8008710 <__math_divzero>
 800833c:	2000      	movs	r0, #0
 800833e:	e7f0      	b.n	8008322 <pow+0x10a>
 8008340:	f1ba 0f00 	cmp.w	sl, #0
 8008344:	dad3      	bge.n	80082ee <pow+0xd6>
 8008346:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800834a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800834e:	ed8d 7b00 	vstr	d7, [sp]
 8008352:	ed9d 0b00 	vldr	d0, [sp]
 8008356:	e7ca      	b.n	80082ee <pow+0xd6>
 8008358:	2c00      	cmp	r4, #0
 800835a:	da2b      	bge.n	80083b4 <pow+0x19c>
 800835c:	4651      	mov	r1, sl
 800835e:	f7ff ff25 	bl	80081ac <checkint>
 8008362:	b930      	cbnz	r0, 8008372 <pow+0x15a>
 8008364:	b007      	add	sp, #28
 8008366:	ecbd 8b0a 	vpop	{d8-d12}
 800836a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836e:	f000 b9e7 	b.w	8008740 <__math_invalid>
 8008372:	1e41      	subs	r1, r0, #1
 8008374:	4248      	negs	r0, r1
 8008376:	4148      	adcs	r0, r1
 8008378:	0480      	lsls	r0, r0, #18
 800837a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800837e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8008382:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8008386:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800838a:	2b7f      	cmp	r3, #127	; 0x7f
 800838c:	d92d      	bls.n	80083ea <pow+0x1d2>
 800838e:	4b96      	ldr	r3, [pc, #600]	; (80085e8 <pow+0x3d0>)
 8008390:	2000      	movs	r0, #0
 8008392:	429c      	cmp	r4, r3
 8008394:	bf08      	it	eq
 8008396:	4285      	cmpeq	r5, r0
 8008398:	f43f af7a 	beq.w	8008290 <pow+0x78>
 800839c:	f240 31bd 	movw	r1, #957	; 0x3bd
 80083a0:	428a      	cmp	r2, r1
 80083a2:	d80c      	bhi.n	80083be <pow+0x1a6>
 80083a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80083a8:	42a8      	cmp	r0, r5
 80083aa:	41a3      	sbcs	r3, r4
 80083ac:	d204      	bcs.n	80083b8 <pow+0x1a0>
 80083ae:	ee31 0b00 	vadd.f64	d0, d1, d0
 80083b2:	e79c      	b.n	80082ee <pow+0xd6>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e7e4      	b.n	8008382 <pow+0x16a>
 80083b8:	ee30 0b41 	vsub.f64	d0, d0, d1
 80083bc:	e797      	b.n	80082ee <pow+0xd6>
 80083be:	2d01      	cmp	r5, #1
 80083c0:	eb74 0303 	sbcs.w	r3, r4, r3
 80083c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80083c8:	bf34      	ite	cc
 80083ca:	2301      	movcc	r3, #1
 80083cc:	2300      	movcs	r3, #0
 80083ce:	4296      	cmp	r6, r2
 80083d0:	bf8c      	ite	hi
 80083d2:	2600      	movhi	r6, #0
 80083d4:	2601      	movls	r6, #1
 80083d6:	42b3      	cmp	r3, r6
 80083d8:	f000 809b 	beq.w	8008512 <pow+0x2fa>
 80083dc:	b007      	add	sp, #28
 80083de:	ecbd 8b0a 	vpop	{d8-d12}
 80083e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e6:	f000 b98b 	b.w	8008700 <__math_oflow>
 80083ea:	f1bc 0f00 	cmp.w	ip, #0
 80083ee:	d10b      	bne.n	8008408 <pow+0x1f0>
 80083f0:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80085d8 <pow+0x3c0>
 80083f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80083f8:	ec53 2b17 	vmov	r2, r3, d7
 80083fc:	ee17 5a10 	vmov	r5, s14
 8008400:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008404:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8008408:	4b7b      	ldr	r3, [pc, #492]	; (80085f8 <pow+0x3e0>)
 800840a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800840e:	4423      	add	r3, r4
 8008410:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8008414:	1519      	asrs	r1, r3, #20
 8008416:	0d1b      	lsrs	r3, r3, #20
 8008418:	051b      	lsls	r3, r3, #20
 800841a:	1ae7      	subs	r7, r4, r3
 800841c:	4b77      	ldr	r3, [pc, #476]	; (80085fc <pow+0x3e4>)
 800841e:	ee03 1a10 	vmov	s6, r1
 8008422:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8008426:	1e2e      	subs	r6, r5, #0
 8008428:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800842c:	ec47 6b15 	vmov	d5, r6, r7
 8008430:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8008434:	eea5 6b07 	vfma.f64	d6, d5, d7
 8008438:	ed93 7b00 	vldr	d7, [r3]
 800843c:	ed93 5b02 	vldr	d5, [r3, #8]
 8008440:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8008444:	eea3 2b07 	vfma.f64	d2, d3, d7
 8008448:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800844c:	ee36 4b02 	vadd.f64	d4, d6, d2
 8008450:	ee32 2b44 	vsub.f64	d2, d2, d4
 8008454:	eea3 7b05 	vfma.f64	d7, d3, d5
 8008458:	ed93 5b04 	vldr	d5, [r3, #16]
 800845c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8008460:	ee37 7b02 	vadd.f64	d7, d7, d2
 8008464:	ee26 5b05 	vmul.f64	d5, d6, d5
 8008468:	ee26 0b05 	vmul.f64	d0, d6, d5
 800846c:	ee34 8b00 	vadd.f64	d8, d4, d0
 8008470:	eeb0 9b40 	vmov.f64	d9, d0
 8008474:	ee34 4b48 	vsub.f64	d4, d4, d8
 8008478:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800847c:	ee34 ab00 	vadd.f64	d10, d4, d0
 8008480:	ed93 5b06 	vldr	d5, [r3, #24]
 8008484:	ee26 bb00 	vmul.f64	d11, d6, d0
 8008488:	ee37 7b09 	vadd.f64	d7, d7, d9
 800848c:	ed93 4b08 	vldr	d4, [r3, #32]
 8008490:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8008494:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8008498:	eea6 5b04 	vfma.f64	d5, d6, d4
 800849c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80084a0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80084a4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80084a8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80084ac:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80084b0:	eea0 4b03 	vfma.f64	d4, d0, d3
 80084b4:	eea0 5b04 	vfma.f64	d5, d0, d4
 80084b8:	eeab 7b05 	vfma.f64	d7, d11, d5
 80084bc:	ee38 4b07 	vadd.f64	d4, d8, d7
 80084c0:	ee21 6b04 	vmul.f64	d6, d1, d4
 80084c4:	ee16 3a90 	vmov	r3, s13
 80084c8:	eeb0 5b46 	vmov.f64	d5, d6
 80084cc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80084d0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80084d4:	18b2      	adds	r2, r6, r2
 80084d6:	2a3e      	cmp	r2, #62	; 0x3e
 80084d8:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80084dc:	ee38 8b44 	vsub.f64	d8, d8, d4
 80084e0:	ee38 8b07 	vadd.f64	d8, d8, d7
 80084e4:	eea1 5b08 	vfma.f64	d5, d1, d8
 80084e8:	d91b      	bls.n	8008522 <pow+0x30a>
 80084ea:	2a00      	cmp	r2, #0
 80084ec:	da0b      	bge.n	8008506 <pow+0x2ee>
 80084ee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80084f2:	ee36 0b00 	vadd.f64	d0, d6, d0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f43f aef9 	beq.w	80082ee <pow+0xd6>
 80084fc:	eeb1 0b40 	vneg.f64	d0, d0
 8008500:	e6f5      	b.n	80082ee <pow+0xd6>
 8008502:	2000      	movs	r0, #0
 8008504:	e780      	b.n	8008408 <pow+0x1f0>
 8008506:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800850a:	d909      	bls.n	8008520 <pow+0x308>
 800850c:	2b00      	cmp	r3, #0
 800850e:	f6bf af65 	bge.w	80083dc <pow+0x1c4>
 8008512:	b007      	add	sp, #28
 8008514:	ecbd 8b0a 	vpop	{d8-d12}
 8008518:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	f000 b8e8 	b.w	80086f0 <__math_uflow>
 8008520:	2600      	movs	r6, #0
 8008522:	4937      	ldr	r1, [pc, #220]	; (8008600 <pow+0x3e8>)
 8008524:	ed91 4b02 	vldr	d4, [r1, #8]
 8008528:	ed91 3b00 	vldr	d3, [r1]
 800852c:	eeb0 7b44 	vmov.f64	d7, d4
 8008530:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008534:	ee17 5a10 	vmov	r5, s14
 8008538:	ee37 7b44 	vsub.f64	d7, d7, d4
 800853c:	ed91 4b04 	vldr	d4, [r1, #16]
 8008540:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8008544:	eea7 6b04 	vfma.f64	d6, d7, d4
 8008548:	ed91 4b06 	vldr	d4, [r1, #24]
 800854c:	18dc      	adds	r4, r3, r3
 800854e:	f104 030f 	add.w	r3, r4, #15
 8008552:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008556:	eea7 6b04 	vfma.f64	d6, d7, d4
 800855a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800855e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8008562:	ee25 6b05 	vmul.f64	d6, d5, d5
 8008566:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800856a:	ed91 4b08 	vldr	d4, [r1, #32]
 800856e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008572:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8008576:	eea5 4b03 	vfma.f64	d4, d5, d3
 800857a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800857e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008582:	ee26 6b06 	vmul.f64	d6, d6, d6
 8008586:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800858a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800858e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8008592:	eea5 4b03 	vfma.f64	d4, d5, d3
 8008596:	1940      	adds	r0, r0, r5
 8008598:	2700      	movs	r7, #0
 800859a:	eb17 020c 	adds.w	r2, r7, ip
 800859e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80085a2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	d176      	bne.n	8008698 <pow+0x480>
 80085aa:	42bd      	cmp	r5, r7
 80085ac:	db2a      	blt.n	8008604 <pow+0x3ec>
 80085ae:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80085b2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80085b6:	4610      	mov	r0, r2
 80085b8:	ec41 0b10 	vmov	d0, r0, r1
 80085bc:	eea7 0b00 	vfma.f64	d0, d7, d0
 80085c0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80085e0 <pow+0x3c8>
 80085c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80085c8:	b007      	add	sp, #28
 80085ca:	ecbd 8b0a 	vpop	{d8-d12}
 80085ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d2:	f000 b8cd 	b.w	8008770 <__math_check_oflow>
 80085d6:	bf00      	nop
 80085d8:	00000000 	.word	0x00000000
 80085dc:	43300000 	.word	0x43300000
 80085e0:	00000000 	.word	0x00000000
 80085e4:	7f000000 	.word	0x7f000000
 80085e8:	3ff00000 	.word	0x3ff00000
 80085ec:	fff00000 	.word	0xfff00000
 80085f0:	ffe00000 	.word	0xffe00000
 80085f4:	7fe00000 	.word	0x7fe00000
 80085f8:	c0196aab 	.word	0xc0196aab
 80085fc:	08008d98 	.word	0x08008d98
 8008600:	08009de0 	.word	0x08009de0
 8008604:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008608:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800860c:	4610      	mov	r0, r2
 800860e:	ec41 0b15 	vmov	d5, r0, r1
 8008612:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8008616:	ee27 6b05 	vmul.f64	d6, d7, d5
 800861a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800861e:	eeb0 4bc7 	vabs.f64	d4, d7
 8008622:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8008626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80086a8 <pow+0x490>
 800862e:	d52a      	bpl.n	8008686 <pow+0x46e>
 8008630:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008634:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8008640:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8008644:	bf58      	it	pl
 8008646:	eeb0 4b43 	vmovpl.f64	d4, d3
 800864a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800864e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8008652:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008656:	ee36 6b05 	vadd.f64	d6, d6, d5
 800865a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800865e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8008662:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866a:	d104      	bne.n	8008676 <pow+0x45e>
 800866c:	4632      	mov	r2, r6
 800866e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008672:	ec43 2b17 	vmov	d7, r2, r3
 8008676:	ed8d 0b02 	vstr	d0, [sp, #8]
 800867a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800867e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8008682:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008686:	ee27 0b00 	vmul.f64	d0, d7, d0
 800868a:	b007      	add	sp, #28
 800868c:	ecbd 8b0a 	vpop	{d8-d12}
 8008690:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	f000 b863 	b.w	800875e <__math_check_uflow>
 8008698:	ec43 2b10 	vmov	d0, r2, r3
 800869c:	eea7 0b00 	vfma.f64	d0, d7, d0
 80086a0:	e625      	b.n	80082ee <pow+0xd6>
 80086a2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 80086b0 <pow+0x498>
 80086a6:	e622      	b.n	80082ee <pow+0xd6>
 80086a8:	00000000 	.word	0x00000000
 80086ac:	00100000 	.word	0x00100000
	...

080086b8 <with_errno>:
 80086b8:	b513      	push	{r0, r1, r4, lr}
 80086ba:	4604      	mov	r4, r0
 80086bc:	ed8d 0b00 	vstr	d0, [sp]
 80086c0:	f7fd fde8 	bl	8006294 <__errno>
 80086c4:	ed9d 0b00 	vldr	d0, [sp]
 80086c8:	6004      	str	r4, [r0, #0]
 80086ca:	b002      	add	sp, #8
 80086cc:	bd10      	pop	{r4, pc}

080086ce <xflow>:
 80086ce:	b082      	sub	sp, #8
 80086d0:	b158      	cbz	r0, 80086ea <xflow+0x1c>
 80086d2:	eeb1 7b40 	vneg.f64	d7, d0
 80086d6:	ed8d 7b00 	vstr	d7, [sp]
 80086da:	ed9d 7b00 	vldr	d7, [sp]
 80086de:	2022      	movs	r0, #34	; 0x22
 80086e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80086e4:	b002      	add	sp, #8
 80086e6:	f7ff bfe7 	b.w	80086b8 <with_errno>
 80086ea:	eeb0 7b40 	vmov.f64	d7, d0
 80086ee:	e7f2      	b.n	80086d6 <xflow+0x8>

080086f0 <__math_uflow>:
 80086f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086f8 <__math_uflow+0x8>
 80086f4:	f7ff bfeb 	b.w	80086ce <xflow>
 80086f8:	00000000 	.word	0x00000000
 80086fc:	10000000 	.word	0x10000000

08008700 <__math_oflow>:
 8008700:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008708 <__math_oflow+0x8>
 8008704:	f7ff bfe3 	b.w	80086ce <xflow>
 8008708:	00000000 	.word	0x00000000
 800870c:	70000000 	.word	0x70000000

08008710 <__math_divzero>:
 8008710:	b082      	sub	sp, #8
 8008712:	2800      	cmp	r0, #0
 8008714:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008718:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800871c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8008720:	ed8d 7b00 	vstr	d7, [sp]
 8008724:	ed9d 0b00 	vldr	d0, [sp]
 8008728:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8008738 <__math_divzero+0x28>
 800872c:	2022      	movs	r0, #34	; 0x22
 800872e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8008732:	b002      	add	sp, #8
 8008734:	f7ff bfc0 	b.w	80086b8 <with_errno>
	...

08008740 <__math_invalid>:
 8008740:	eeb0 7b40 	vmov.f64	d7, d0
 8008744:	eeb4 7b47 	vcmp.f64	d7, d7
 8008748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800874c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8008750:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8008754:	d602      	bvs.n	800875c <__math_invalid+0x1c>
 8008756:	2021      	movs	r0, #33	; 0x21
 8008758:	f7ff bfae 	b.w	80086b8 <with_errno>
 800875c:	4770      	bx	lr

0800875e <__math_check_uflow>:
 800875e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008766:	d102      	bne.n	800876e <__math_check_uflow+0x10>
 8008768:	2022      	movs	r0, #34	; 0x22
 800876a:	f7ff bfa5 	b.w	80086b8 <with_errno>
 800876e:	4770      	bx	lr

08008770 <__math_check_oflow>:
 8008770:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8008790 <__math_check_oflow+0x20>
 8008774:	eeb0 7bc0 	vabs.f64	d7, d0
 8008778:	eeb4 7b46 	vcmp.f64	d7, d6
 800877c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008780:	dd02      	ble.n	8008788 <__math_check_oflow+0x18>
 8008782:	2022      	movs	r0, #34	; 0x22
 8008784:	f7ff bf98 	b.w	80086b8 <with_errno>
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w
 8008790:	ffffffff 	.word	0xffffffff
 8008794:	7fefffff 	.word	0x7fefffff

08008798 <_init>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr

080087a4 <_fini>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	bf00      	nop
 80087a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087aa:	bc08      	pop	{r3}
 80087ac:	469e      	mov	lr, r3
 80087ae:	4770      	bx	lr
