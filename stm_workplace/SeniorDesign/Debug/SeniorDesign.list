
SeniorDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08007be8  08007be8  00017be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fac  08007fac  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb4  08007fb4  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08008190  000201d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08008230  00020274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000864  20000314  080082d0  00020314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000b78  080082d0  00020b78  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020342  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001530d  00000000  00000000  00020385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002e5b  00000000  00000000  00035692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001020  00000000  00000000  000384f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c51  00000000  00000000  00039510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ad55  00000000  00000000  0003a161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001496c  00000000  00000000  00064eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010346c  00000000  00000000  00079822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000051e4  00000000  00000000  0017cc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  00181e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	08007bcc 	.word	0x08007bcc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	08007bcc 	.word	0x08007bcc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <flowControllerADC>:
// Static Functions Declaration	----------------------------------------//


// Public Functions		------------------------------------------------//

void flowControllerADC(ADC_HandleTypeDef* hadc){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_9;
 8000602:	2309      	movs	r3, #9
 8000604:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 f977 	bl	8001908 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <flowControllerADC+0x3a>
	{
	  Error_Handler();
 8000620:	f000 fb0a 	bl	8000c38 <Error_Handler>
	}
	return;
 8000624:	bf00      	nop
 8000626:	bf00      	nop
}
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <readFlow>:
float readFlow(float voltage)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	ed87 0a01 	vstr	s0, [r7, #4]
	//	instFlow = roundf(instFlow);*/
	//	return instFlow;
//	instFlow = (voltage - 0.662)/  0.0132;
//	return instFlow;

	instFlow = (voltage/voltageDivider - (float)referenceVolt)/scalingFactor;
 800063a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000678 <readFlow+0x48>
 800063e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000646:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800067c <readFlow+0x4c>
 800064a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000652:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000680 <readFlow+0x50>
 8000656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <readFlow+0x54>)
 800065c:	edc3 7a00 	vstr	s15, [r3]
	return instFlow;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <readFlow+0x54>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	ee07 3a90 	vmov	s15, r3
}
 8000668:	eeb0 0a67 	vmov.f32	s0, s15
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	3f298953 	.word	0x3f298953
 800067c:	00000001 	.word	0x00000001
 8000680:	3ca3d70a 	.word	0x3ca3d70a
 8000684:	20000330 	.word	0x20000330

08000688 <setFlowRate>:

float setFlowRate(float inputVoltage, uint8_t targetFlowRate){
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000692:	4603      	mov	r3, r0
 8000694:	70fb      	strb	r3, [r7, #3]

	readFlow(inputVoltage);
 8000696:	ed97 0a01 	vldr	s0, [r7, #4]
 800069a:	f7ff ffc9 	bl	8000630 <readFlow>
	unRestrictedFlow = instFlow / (1.0 - flowRestriction);
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <setFlowRate+0xa0>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <setFlowRate+0xa4>)
 80006aa:	edd3 7a00 	vldr	s15, [r3]
 80006ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80006b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80006ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <setFlowRate+0xa8>)
 80006c4:	edc3 7a00 	vstr	s15, [r3]
	flowRestriction = (float)targetFlowRate / unRestrictedFlow;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <setFlowRate+0xa8>)
 80006d4:	ed93 7a00 	vldr	s14, [r3]
 80006d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <setFlowRate+0xa4>)
 80006de:	edc3 7a00 	vstr	s15, [r3]

	float outputVoltage = (float)(maxVoltage - referenceVolt) * flowRestriction + (float)referenceVolt;
 80006e2:	2305      	movs	r3, #5
 80006e4:	461a      	mov	r2, r3
 80006e6:	2301      	movs	r3, #1
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <setFlowRate+0xa4>)
 80006f4:	edd3 7a00 	vldr	s15, [r3]
 80006f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006fc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000734 <setFlowRate+0xac>
 8000700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000708:	edc7 7a03 	vstr	s15, [r7, #12]

	return outputVoltage / amp;
 800070c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000738 <setFlowRate+0xb0>
 8000710:	edd7 7a03 	vldr	s15, [r7, #12]
 8000714:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000718:	eef0 7a66 	vmov.f32	s15, s13

}
 800071c:	eeb0 0a67 	vmov.f32	s0, s15
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000330 	.word	0x20000330
 800072c:	20000338 	.word	0x20000338
 8000730:	20000334 	.word	0x20000334
 8000734:	00000001 	.word	0x00000001
 8000738:	403d7d7d 	.word	0x403d7d7d

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09e      	sub	sp, #120	; 0x78
 8000740:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fe82 	bl	800144a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f853 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f9d3 	bl	8000af4 <MX_GPIO_Init>
  MX_ETH_Init();
 800074e:	f000 f925 	bl	800099c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000752:	f000 f971 	bl	8000a38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000756:	f000 f99f 	bl	8000a98 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800075a:	f000 f8bb 	bl	80008d4 <MX_ADC1_Init>
  MX_DAC_Init();
 800075e:	f000 f8f3 	bl	8000948 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  //dacSet(&hdac, DAC_CHANNEL_1, 2.5);
  float volts = 0;
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	66fb      	str	r3, [r7, #108]	; 0x6c
  float FlowRate = 0;
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	66bb      	str	r3, [r7, #104]	; 0x68
  float vacuumScale = 0;
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	667b      	str	r3, [r7, #100]	; 0x64
  char msg[100];


  flowControllerADC(&hadc1);
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <main+0xa4>)
 8000776:	f7ff ff39 	bl	80005ec <flowControllerADC>
//	  sprintf(msg, "Vacuum Gauge\t\tVolts: %.3f V\tVacuum:\t\t%1.0f\tkPa\r\n", volts, vacuumScale);
//	  printMsg(msg, &huart3);
//	  HAL_Delay(1000);
//
//	  flowControllerADC(&hadc1);
	  volts = adcGet(&hadc1);
 800077a:	4819      	ldr	r0, [pc, #100]	; (80007e0 <main+0xa4>)
 800077c:	f000 fa98 	bl	8000cb0 <adcGet>
 8000780:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	  FlowRate = readFlow(volts);
 8000784:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8000788:	f7ff ff52 	bl	8000630 <readFlow>
 800078c:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
	  sprintf(msg, "Flow Controller\t\tVolts: %.3f V\tFlow Rate:\t%1.0f\tL/min\r\n", volts, FlowRate);
 8000790:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000794:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000798:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800079c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a0:	4638      	mov	r0, r7
 80007a2:	ed8d 7b00 	vstr	d7, [sp]
 80007a6:	ec53 2b16 	vmov	r2, r3, d6
 80007aa:	490e      	ldr	r1, [pc, #56]	; (80007e4 <main+0xa8>)
 80007ac:	f005 f938 	bl	8005a20 <siprintf>
	  printMsg(msg, &huart3);
 80007b0:	463b      	mov	r3, r7
 80007b2:	490d      	ldr	r1, [pc, #52]	; (80007e8 <main+0xac>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fab9 	bl	8000d2c <printMsg>
	  dacSet(&hdac, DAC_CHANNEL_1, setFlowRate(volts, 50));
 80007ba:	2032      	movs	r0, #50	; 0x32
 80007bc:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80007c0:	f7ff ff62 	bl	8000688 <setFlowRate>
 80007c4:	eef0 7a40 	vmov.f32	s15, s0
 80007c8:	eeb0 0a67 	vmov.f32	s0, s15
 80007cc:	2100      	movs	r1, #0
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <main+0xb0>)
 80007d0:	f000 fa3a 	bl	8000c48 <dacSet>
	  HAL_Delay(1000);
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f000 fe94 	bl	8001504 <HAL_Delay>
	  volts = adcGet(&hadc1);
 80007dc:	e7cd      	b.n	800077a <main+0x3e>
 80007de:	bf00      	nop
 80007e0:	20000374 	.word	0x20000374
 80007e4:	08007be8 	.word	0x08007be8
 80007e8:	20000480 	.word	0x20000480
 80007ec:	200003bc 	.word	0x200003bc

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2234      	movs	r2, #52	; 0x34
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 f971 	bl	8005ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000814:	f002 faca 	bl	8002dac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <SystemClock_Config+0xdc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a2b      	ldr	r2, [pc, #172]	; (80008cc <SystemClock_Config+0xdc>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <SystemClock_Config+0xdc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <SystemClock_Config+0xe0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <SystemClock_Config+0xe0>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <SystemClock_Config+0xe0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4618      	mov	r0, r3
 800087a:	f002 faf7 	bl	8002e6c <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000884:	f000 f9d8 	bl	8000c38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000888:	f002 faa0 	bl	8002dcc <HAL_PWREx_EnableOverDrive>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000892:	f000 f9d1 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	2103      	movs	r1, #3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fd88 	bl	80033c8 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008be:	f000 f9bb 	bl	8000c38 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_ADC1_Init+0x68>)
 80008da:	4a19      	ldr	r2, [pc, #100]	; (8000940 <MX_ADC1_Init+0x6c>)
 80008dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_ADC1_Init+0x68>)
 80008e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_ADC1_Init+0x68>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_ADC1_Init+0x68>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_ADC1_Init+0x68>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_ADC1_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_ADC1_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_ADC1_Init+0x68>)
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <MX_ADC1_Init+0x70>)
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_ADC1_Init+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_ADC1_Init+0x68>)
 8000914:	2201      	movs	r2, #1
 8000916:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_ADC1_Init+0x68>)
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_ADC1_Init+0x68>)
 8000922:	2201      	movs	r2, #1
 8000924:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_ADC1_Init+0x68>)
 8000928:	f000 fe10 	bl	800154c <HAL_ADC_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000932:	f000 f981 	bl	8000c38 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000374 	.word	0x20000374
 8000940:	40012000 	.word	0x40012000
 8000944:	0f000001 	.word	0x0f000001

08000948 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_DAC_Init+0x4c>)
 8000958:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <MX_DAC_Init+0x50>)
 800095a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_DAC_Init+0x4c>)
 800095e:	f001 fb08 	bl	8001f72 <HAL_DAC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000968:	f000 f966 	bl	8000c38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_DAC_Init+0x4c>)
 800097c:	f001 fb92 	bl	80020a4 <HAL_DAC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000986:	f000 f957 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200003bc 	.word	0x200003bc
 8000998:	40007400 	.word	0x40007400

0800099c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ETH_Init+0x84>)
 80009a2:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <MX_ETH_Init+0x88>)
 80009a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009b4:	22e1      	movs	r2, #225	; 0xe1
 80009b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ETH_Init+0x84>)
 80009cc:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_ETH_Init+0x84>)
 80009d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_ETH_Init+0x84>)
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <MX_ETH_Init+0x90>)
 80009dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_ETH_Init+0x84>)
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_ETH_Init+0x94>)
 80009e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_ETH_Init+0x84>)
 80009e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_ETH_Init+0x84>)
 80009ee:	f001 fba9 	bl	8002144 <HAL_ETH_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009f8:	f000 f91e 	bl	8000c38 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009fc:	2238      	movs	r2, #56	; 0x38
 80009fe:	2100      	movs	r1, #0
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a02:	f005 f870 	bl	8005ae6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a08:	2221      	movs	r2, #33	; 0x21
 8000a0a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a0e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a12:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200003d0 	.word	0x200003d0
 8000a24:	40028000 	.word	0x40028000
 8000a28:	20000a10 	.word	0x20000a10
 8000a2c:	20000274 	.word	0x20000274
 8000a30:	200001d4 	.word	0x200001d4
 8000a34:	2000033c 	.word	0x2000033c

08000a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <MX_USART3_UART_Init+0x5c>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a7c:	f003 faf2 	bl	8004064 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a86:	f000 f8d7 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000480 	.word	0x20000480
 8000a94:	40004800 	.word	0x40004800

08000a98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2206      	movs	r2, #6
 8000aa8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	f002 f81d 	bl	8002b1a <HAL_PCD_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ae6:	f000 f8a7 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000508 	.word	0x20000508

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a46      	ldr	r2, [pc, #280]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b3e      	ldr	r3, [pc, #248]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a3a      	ldr	r2, [pc, #232]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a34      	ldr	r2, [pc, #208]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <MX_GPIO_Init+0x134>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ba0:	4822      	ldr	r0, [pc, #136]	; (8000c2c <MX_GPIO_Init+0x138>)
 8000ba2:	f001 ffa1 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2140      	movs	r1, #64	; 0x40
 8000baa:	4821      	ldr	r0, [pc, #132]	; (8000c30 <MX_GPIO_Init+0x13c>)
 8000bac:	f001 ff9c 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481b      	ldr	r0, [pc, #108]	; (8000c34 <MX_GPIO_Init+0x140>)
 8000bc8:	f001 fde2 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bcc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4811      	ldr	r0, [pc, #68]	; (8000c2c <MX_GPIO_Init+0x138>)
 8000be6:	f001 fdd3 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bea:	2340      	movs	r3, #64	; 0x40
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_GPIO_Init+0x13c>)
 8000c02:	f001 fdc5 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_GPIO_Init+0x13c>)
 8000c1a:	f001 fdb9 	bl	8002790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40021800 	.word	0x40021800
 8000c34:	40020800 	.word	0x40020800

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
 8000c42:	0000      	movs	r0, r0
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <dacSet>:
// Static Functions Declaration	----------------------------------------//



// Public Functions		------------------------------------------------//
void dacSet(DAC_HandleTypeDef *dac, uint32_t channel, float volts){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_DAC_Start(dac, channel);
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f001 f9ac 	bl	8001fb6 <HAL_DAC_Start>
	dacBitVal = (volts/3.3)*4095;
 8000c5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c62:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c66:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000c98 <dacSet+0x50>
 8000c6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c6e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000ca0 <dacSet+0x58>
 8000c72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c76:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c7a:	ee17 2a90 	vmov	r2, s15
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <dacSet+0x60>)
 8000c80:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(dac, channel, DAC_ALIGN_12B_R, dacBitVal);
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <dacSet+0x60>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f001 f9e5 	bl	800205a <HAL_DAC_SetValue>
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	66666666 	.word	0x66666666
 8000c9c:	400a6666 	.word	0x400a6666
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	40affe00 	.word	0x40affe00
 8000ca8:	20000a18 	.word	0x20000a18
 8000cac:	00000000 	.word	0x00000000

08000cb0 <adcGet>:

float adcGet(ADC_HandleTypeDef *hadc1){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 fc8b 	bl	80015d4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, 1000);
 8000cbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fd88 	bl	80017d8 <HAL_ADC_PollForConversion>
	adcBitVal = HAL_ADC_GetValue(hadc1);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 fe10 	bl	80018ee <HAL_ADC_GetValue>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <adcGet+0x70>)
 8000cd4:	801a      	strh	r2, [r3, #0]
	adcVolts = (float)adcBitVal/4095 * 3.3;
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <adcGet+0x70>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	ee07 3a90 	vmov	s15, r3
 8000cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ce2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000d24 <adcGet+0x74>
 8000ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cee:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000d18 <adcGet+0x68>
 8000cf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cf6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <adcGet+0x78>)
 8000cfc:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc1);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 fd35 	bl	8001770 <HAL_ADC_Stop>
	return adcVolts;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <adcGet+0x78>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	ee07 3a90 	vmov	s15, r3
}
 8000d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	66666666 	.word	0x66666666
 8000d1c:	400a6666 	.word	0x400a6666
 8000d20:	20000a1c 	.word	0x20000a1c
 8000d24:	457ff000 	.word	0x457ff000
 8000d28:	20000a20 	.word	0x20000a20

08000d2c <printMsg>:
//	//adcVolts =roundf(arr[2] *100.0)/100;
//	adcVolts = arr[2];
//	return adcVolts;
//}

void printMsg(char * str, UART_HandleTypeDef *huart2){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	// sprintf(msg, "Volts: %.2f V\r\n", volts);
	// HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	HAL_UART_Transmit(huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fad2 	bl	80002e0 <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	6838      	ldr	r0, [r7, #0]
 8000d48:	f003 f9da 	bl	8004100 <HAL_UART_Transmit>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <HAL_ADC_MspInit+0xa4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d13b      	bne.n	8000e36 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a1a      	ldr	r2, [pc, #104]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_ADC_MspInit+0xa8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e06:	2360      	movs	r3, #96	; 0x60
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <HAL_ADC_MspInit+0xac>)
 8000e1a:	f001 fcb9 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <HAL_ADC_MspInit+0xb0>)
 8000e32:	f001 fcad 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40012000 	.word	0x40012000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400

08000e50 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <HAL_DAC_MspInit+0x74>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d123      	bne.n	8000eba <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_DAC_MspInit+0x78>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <HAL_DAC_MspInit+0x78>)
 8000e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_DAC_MspInit+0x78>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_DAC_MspInit+0x78>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_DAC_MspInit+0x78>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_DAC_MspInit+0x78>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_DAC_MspInit+0x7c>)
 8000eb6:	f001 fc6b 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40007400 	.word	0x40007400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_ETH_MspInit+0x158>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	f040 8096 	bne.w	8001020 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
 8000f00:	4b4a      	ldr	r3, [pc, #296]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f08:	623b      	str	r3, [r7, #32]
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	4b47      	ldr	r3, [pc, #284]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a46      	ldr	r2, [pc, #280]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b44      	ldr	r3, [pc, #272]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	4b41      	ldr	r3, [pc, #260]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a40      	ldr	r2, [pc, #256]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b3e      	ldr	r3, [pc, #248]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a3a      	ldr	r2, [pc, #232]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b38      	ldr	r3, [pc, #224]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a34      	ldr	r2, [pc, #208]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a2e      	ldr	r2, [pc, #184]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f9c:	2332      	movs	r3, #50	; 0x32
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fac:	230b      	movs	r3, #11
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481e      	ldr	r0, [pc, #120]	; (8001030 <HAL_ETH_MspInit+0x160>)
 8000fb8:	f001 fbea 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fbc:	2386      	movs	r3, #134	; 0x86
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4817      	ldr	r0, [pc, #92]	; (8001034 <HAL_ETH_MspInit+0x164>)
 8000fd8:	f001 fbda 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fee:	230b      	movs	r3, #11
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <HAL_ETH_MspInit+0x168>)
 8000ffa:	f001 fbc9 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ffe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001010:	230b      	movs	r3, #11
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <HAL_ETH_MspInit+0x16c>)
 800101c:	f001 fbb8 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	; 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40028000 	.word	0x40028000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40021800 	.word	0x40021800

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ae      	sub	sp, #184	; 0xb8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2290      	movs	r2, #144	; 0x90
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fd40 	bl	8005ae6 <memset>
  if(huart->Instance==USART3)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <HAL_UART_MspInit+0xb4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d13c      	bne.n	80010ea <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001074:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001076:	2300      	movs	r3, #0
 8001078:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fbc8 	bl	8003814 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800108a:	f7ff fdd5 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_UART_MspInit+0xb8>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <HAL_UART_MspInit+0xb8>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_UART_MspInit+0xb8>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_UART_MspInit+0xb8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_UART_MspInit+0xb8>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_UART_MspInit+0xb8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d8:	2307      	movs	r3, #7
 80010da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_UART_MspInit+0xbc>)
 80010e6:	f001 fb53 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	37b8      	adds	r7, #184	; 0xb8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40004800 	.word	0x40004800
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020c00 	.word	0x40020c00

08001100 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ae      	sub	sp, #184	; 0xb8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2290      	movs	r2, #144	; 0x90
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fce0 	bl	8005ae6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800112e:	d159      	bne.n	80011e4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001130:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001134:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fb67 	bl	8003814 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800114c:	f7ff fd74 	bl	8000c38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <HAL_PCD_MspInit+0xec>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a25      	ldr	r2, [pc, #148]	; (80011ec <HAL_PCD_MspInit+0xec>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_PCD_MspInit+0xec>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001168:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001182:	230a      	movs	r3, #10
 8001184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800118c:	4619      	mov	r1, r3
 800118e:	4818      	ldr	r0, [pc, #96]	; (80011f0 <HAL_PCD_MspInit+0xf0>)
 8001190:	f001 fafe 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <HAL_PCD_MspInit+0xf0>)
 80011b0:	f001 faee 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_PCD_MspInit+0xec>)
 80011b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <HAL_PCD_MspInit+0xec>)
 80011ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011be:	6353      	str	r3, [r2, #52]	; 0x34
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_PCD_MspInit+0xec>)
 80011c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_PCD_MspInit+0xec>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_PCD_MspInit+0xec>)
 80011d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d6:	6453      	str	r3, [r2, #68]	; 0x44
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_PCD_MspInit+0xec>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	37b8      	adds	r7, #184	; 0xb8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f940 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_kill>:

int _kill(int pid, int sig)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001262:	f004 fc93 	bl	8005b8c <__errno>
 8001266:	4603      	mov	r3, r0
 8001268:	2216      	movs	r2, #22
 800126a:	601a      	str	r2, [r3, #0]
  return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_exit>:

void _exit (int status)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffe7 	bl	8001258 <_kill>
  while (1) {}    /* Make sure we hang here */
 800128a:	e7fe      	b.n	800128a <_exit+0x12>

0800128c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	4601      	mov	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
  }

  return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e009      	b.n	80012ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbf1      	blt.n	80012d8 <_write+0x12>
  }
  return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_close>:

int _close(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001326:	605a      	str	r2, [r3, #4]
  return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_isatty>:

int _isatty(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f004 fbf8 	bl	8005b8c <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20080000 	.word	0x20080000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	20000a24 	.word	0x20000a24
 80013d0:	20000b78 	.word	0x20000b78

080013d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013fe:	490e      	ldr	r1, [pc, #56]	; (8001438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001414:	4c0b      	ldr	r4, [pc, #44]	; (8001444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001422:	f7ff ffd7 	bl	80013d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001426:	f004 fbb7 	bl	8005b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff f987 	bl	800073c <main>
  bx  lr    
 800142e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800143c:	08007fbc 	.word	0x08007fbc
  ldr r2, =_sbss
 8001440:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001444:	20000b78 	.word	0x20000b78

08001448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC_IRQHandler>

0800144a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144e:	2003      	movs	r0, #3
 8001450:	f000 fd5c 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f805 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145a:	f7ff fc7b 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fd69 	bl	8001f5a <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 fd3f 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000a28 	.word	0x20000a28

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000a28 	.word	0x20000a28

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e031      	b.n	80015c6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fc16 	bl	8000d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_ADC_Init+0x84>)
 8001590:	4013      	ands	r3, r2
 8001592:	f043 0202 	orr.w	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fb0a 	bl	8001bb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
 80015b6:	e001      	b.n	80015bc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	ffffeefd 	.word	0xffffeefd

080015d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Start+0x1a>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e0ad      	b.n	800174a <HAL_ADC_Start+0x176>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d018      	beq.n	8001636 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001614:	4b50      	ldr	r3, [pc, #320]	; (8001758 <HAL_ADC_Start+0x184>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a50      	ldr	r2, [pc, #320]	; (800175c <HAL_ADC_Start+0x188>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0c9a      	lsrs	r2, r3, #18
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001628:	e002      	b.n	8001630 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3b01      	subs	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f9      	bne.n	800162a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b01      	cmp	r3, #1
 8001642:	d175      	bne.n	8001730 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <HAL_ADC_Start+0x18c>)
 800164a:	4013      	ands	r3, r2
 800164c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800166a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800167e:	d106      	bne.n	800168e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	f023 0206 	bic.w	r2, r3, #6
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	645a      	str	r2, [r3, #68]	; 0x44
 800168c:	e002      	b.n	8001694 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_ADC_Start+0x190>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d143      	bne.n	8001748 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e03a      	b.n	8001748 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_ADC_Start+0x194>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d10e      	bne.n	80016fa <HAL_ADC_Start+0x126>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_ADC_Start+0x190>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d120      	bne.n	8001748 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_ADC_Start+0x198>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d11b      	bne.n	8001748 <HAL_ADC_Start+0x174>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d114      	bne.n	8001748 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	e00b      	b.n	8001748 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f043 0210 	orr.w	r2, r3, #16
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000000 	.word	0x20000000
 800175c:	431bde83 	.word	0x431bde83
 8001760:	fffff8fe 	.word	0xfffff8fe
 8001764:	40012300 	.word	0x40012300
 8001768:	40012000 	.word	0x40012000
 800176c:	40012200 	.word	0x40012200

08001770 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Stop+0x16>
 8001782:	2302      	movs	r3, #2
 8001784:	e01f      	b.n	80017c6 <HAL_ADC_Stop+0x56>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_ADC_Stop+0x64>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	ffffeefe 	.word	0xffffeefe

080017d8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f4:	d113      	bne.n	800181e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001804:	d10b      	bne.n	800181e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e063      	b.n	80018e6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800181e:	f7ff fe65 	bl	80014ec <HAL_GetTick>
 8001822:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001824:	e021      	b.n	800186a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d01d      	beq.n	800186a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_ADC_PollForConversion+0x6c>
 8001834:	f7ff fe5a 	bl	80014ec <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d212      	bcs.n	800186a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b02      	cmp	r3, #2
 8001850:	d00b      	beq.n	800186a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f043 0204 	orr.w	r2, r3, #4
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e03d      	b.n	80018e6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b02      	cmp	r3, #2
 8001876:	d1d6      	bne.n	8001826 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0212 	mvn.w	r2, #18
 8001880:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d123      	bne.n	80018e4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d11f      	bne.n	80018e4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d111      	bne.n	80018e4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1c>
 8001920:	2302      	movs	r3, #2
 8001922:	e136      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x28a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b09      	cmp	r3, #9
 8001932:	d93a      	bls.n	80019aa <HAL_ADC_ConfigChannel+0xa2>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800193c:	d035      	beq.n	80019aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68d9      	ldr	r1, [r3, #12]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	3b1e      	subs	r3, #30
 8001954:	2207      	movs	r2, #7
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	400a      	ands	r2, r1
 8001962:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a8d      	ldr	r2, [pc, #564]	; (8001ba0 <HAL_ADC_ConfigChannel+0x298>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10a      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68d9      	ldr	r1, [r3, #12]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	061a      	lsls	r2, r3, #24
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001982:	e035      	b.n	80019f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68d9      	ldr	r1, [r3, #12]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4618      	mov	r0, r3
 8001996:	4603      	mov	r3, r0
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4403      	add	r3, r0
 800199c:	3b1e      	subs	r3, #30
 800199e:	409a      	lsls	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a8:	e022      	b.n	80019f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6919      	ldr	r1, [r3, #16]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	2207      	movs	r2, #7
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6919      	ldr	r1, [r3, #16]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4403      	add	r3, r0
 80019e6:	409a      	lsls	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b06      	cmp	r3, #6
 80019f6:	d824      	bhi.n	8001a42 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	3b05      	subs	r3, #5
 8001a0a:	221f      	movs	r2, #31
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43da      	mvns	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	400a      	ands	r2, r1
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	3b05      	subs	r3, #5
 8001a34:	fa00 f203 	lsl.w	r2, r0, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a40:	e04c      	b.n	8001adc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d824      	bhi.n	8001a94 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b23      	subs	r3, #35	; 0x23
 8001a5c:	221f      	movs	r2, #31
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	400a      	ands	r2, r1
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	3b23      	subs	r3, #35	; 0x23
 8001a86:	fa00 f203 	lsl.w	r2, r0, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
 8001a92:	e023      	b.n	8001adc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b41      	subs	r3, #65	; 0x41
 8001aa6:	221f      	movs	r2, #31
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43da      	mvns	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	3b41      	subs	r3, #65	; 0x41
 8001ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_ADC_ConfigChannel+0x29c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10a      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1f4>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a2c      	ldr	r2, [pc, #176]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001af6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001afa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a28      	ldr	r2, [pc, #160]	; (8001ba4 <HAL_ADC_ConfigChannel+0x29c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10f      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x21e>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d10b      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b18:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b1a:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b24:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_ADC_ConfigChannel+0x29c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d12b      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x280>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1a      	ldr	r2, [pc, #104]	; (8001ba0 <HAL_ADC_ConfigChannel+0x298>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d003      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x23a>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b11      	cmp	r3, #17
 8001b40:	d122      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b4c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_ADC_ConfigChannel+0x298>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d111      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_ADC_ConfigChannel+0x2a4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9a      	lsrs	r2, r3, #18
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	10000012 	.word	0x10000012
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	40012300 	.word	0x40012300
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	431bde83 	.word	0x431bde83

08001bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001bbc:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <ADC_Init+0x1ec>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a77      	ldr	r2, [pc, #476]	; (8001da0 <ADC_Init+0x1ec>)
 8001bc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001bc8:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <ADC_Init+0x1ec>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4973      	ldr	r1, [pc, #460]	; (8001da0 <ADC_Init+0x1ec>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	021a      	lsls	r2, r3, #8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <ADC_Init+0x1f0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d022      	beq.n	8001c8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6899      	ldr	r1, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	e00f      	b.n	8001cae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0202 	bic.w	r2, r2, #2
 8001cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6899      	ldr	r1, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	005a      	lsls	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	3b01      	subs	r3, #1
 8001d08:	035a      	lsls	r2, r3, #13
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	e007      	b.n	8001d24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	051a      	lsls	r2, r3, #20
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d66:	025a      	lsls	r2, r3, #9
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	029a      	lsls	r2, r3, #10
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40012300 	.word	0x40012300
 8001da4:	0f000001 	.word	0x0f000001

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <__NVIC_SetPriorityGrouping+0x40>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00
 8001dec:	05fa0000 	.word	0x05fa0000

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff47 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff5c 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffb0 	bl	8001ec8 <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e014      	b.n	8001fae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	791b      	ldrb	r3, [r3, #4]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7fe ff5b 	bl	8000e50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	795b      	ldrb	r3, [r3, #5]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_DAC_Start+0x16>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e040      	b.n	800204e <HAL_DAC_Start+0x98>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002000:	2b3c      	cmp	r3, #60	; 0x3c
 8002002:	d11d      	bne.n	8002040 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	e014      	b.n	8002040 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	213c      	movs	r1, #60	; 0x3c
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	429a      	cmp	r2, r3
 800202e:	d107      	bne.n	8002040 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0202 	orr.w	r2, r2, #2
 800203e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800205a:	b480      	push	{r7}
 800205c:	b087      	sub	sp, #28
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	3308      	adds	r3, #8
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e004      	b.n	800208e <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	3314      	adds	r3, #20
 800208c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	461a      	mov	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	795b      	ldrb	r3, [r3, #5]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_DAC_ConfigChannel+0x18>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e03c      	b.n	8002136 <HAL_DAC_ConfigChannel+0x92>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2202      	movs	r2, #2
 80020c6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4013      	ands	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	22c0      	movs	r2, #192	; 0xc0
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	400a      	ands	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e06a      	b.n	800222c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800215c:	2b00      	cmp	r3, #0
 800215e:	d106      	bne.n	800216e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2223      	movs	r2, #35	; 0x23
 8002164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fe feb1 	bl	8000ed0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_ETH_Init+0xf0>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_ETH_Init+0xf0>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_ETH_Init+0xf0>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <HAL_ETH_Init+0xf4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <HAL_ETH_Init+0xf4>)
 800218c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002190:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <HAL_ETH_Init+0xf4>)
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4927      	ldr	r1, [pc, #156]	; (8002238 <HAL_ETH_Init+0xf4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_ETH_Init+0xf4>)
 80021a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021bc:	f7ff f996 	bl	80014ec <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021c2:	e011      	b.n	80021e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021c4:	f7ff f992 	bl	80014ec <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021d2:	d909      	bls.n	80021e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2204      	movs	r2, #4
 80021d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	22e0      	movs	r2, #224	; 0xe0
 80021e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e021      	b.n	800222c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1e4      	bne.n	80021c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f958 	bl	80024b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f9ff 	bl	8002604 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa55 	bl	80026b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	461a      	mov	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f9bd 	bl	8002594 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2210      	movs	r2, #16
 8002226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	40013800 	.word	0x40013800

0800223c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <ETH_SetMACConfig+0x15c>)
 8002252:	4013      	ands	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	7c1b      	ldrb	r3, [r3, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <ETH_SetMACConfig+0x28>
 800225e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002262:	e000      	b.n	8002266 <ETH_SetMACConfig+0x2a>
 8002264:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	7c5b      	ldrb	r3, [r3, #17]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <ETH_SetMACConfig+0x38>
 800226e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002272:	e000      	b.n	8002276 <ETH_SetMACConfig+0x3a>
 8002274:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002276:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800227c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	7fdb      	ldrb	r3, [r3, #31]
 8002282:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002284:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800228a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	7f92      	ldrb	r2, [r2, #30]
 8002290:	2a00      	cmp	r2, #0
 8002292:	d102      	bne.n	800229a <ETH_SetMACConfig+0x5e>
 8002294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002298:	e000      	b.n	800229c <ETH_SetMACConfig+0x60>
 800229a:	2200      	movs	r2, #0
                        macconf->Speed |
 800229c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7f1b      	ldrb	r3, [r3, #28]
 80022a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	d102      	bne.n	80022c4 <ETH_SetMACConfig+0x88>
 80022be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c2:	e000      	b.n	80022c6 <ETH_SetMACConfig+0x8a>
 80022c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	7bdb      	ldrb	r3, [r3, #15]
 80022cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022de:	4313      	orrs	r3, r2
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f7ff f904 	bl	8001504 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002312:	4013      	ands	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002322:	2a00      	cmp	r2, #0
 8002324:	d101      	bne.n	800232a <ETH_SetMACConfig+0xee>
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	e000      	b.n	800232c <ETH_SetMACConfig+0xf0>
 800232a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800232c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002332:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800233a:	2a01      	cmp	r2, #1
 800233c:	d101      	bne.n	8002342 <ETH_SetMACConfig+0x106>
 800233e:	2208      	movs	r2, #8
 8002340:	e000      	b.n	8002344 <ETH_SetMACConfig+0x108>
 8002342:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002344:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800234c:	2a01      	cmp	r2, #1
 800234e:	d101      	bne.n	8002354 <ETH_SetMACConfig+0x118>
 8002350:	2204      	movs	r2, #4
 8002352:	e000      	b.n	8002356 <ETH_SetMACConfig+0x11a>
 8002354:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002356:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800235e:	2a01      	cmp	r2, #1
 8002360:	d101      	bne.n	8002366 <ETH_SetMACConfig+0x12a>
 8002362:	2202      	movs	r2, #2
 8002364:	e000      	b.n	8002368 <ETH_SetMACConfig+0x12c>
 8002366:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002368:	4313      	orrs	r3, r2
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002380:	2001      	movs	r0, #1
 8002382:	f7ff f8bf 	bl	8001504 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	619a      	str	r2, [r3, #24]
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	ff20810f 	.word	0xff20810f

0800239c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <ETH_SetDMAConfig+0x110>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	7b1b      	ldrb	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <ETH_SetDMAConfig+0x2c>
 80023c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023c6:	e000      	b.n	80023ca <ETH_SetDMAConfig+0x2e>
 80023c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	7b5b      	ldrb	r3, [r3, #13]
 80023ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	7f52      	ldrb	r2, [r2, #29]
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	d102      	bne.n	80023e0 <ETH_SetDMAConfig+0x44>
 80023da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023de:	e000      	b.n	80023e2 <ETH_SetDMAConfig+0x46>
 80023e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	7b9b      	ldrb	r3, [r3, #14]
 80023e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	7f1b      	ldrb	r3, [r3, #28]
 80023f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7f9b      	ldrb	r3, [r3, #30]
 80023fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002400:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002406:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002410:	4313      	orrs	r3, r2
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002420:	461a      	mov	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff f866 	bl	8001504 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	461a      	mov	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	791b      	ldrb	r3, [r3, #4]
 800244a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002450:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002456:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800245c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002464:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002466:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800246e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002474:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800247e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002482:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff f837 	bl	8001504 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	f8de3f23 	.word	0xf8de3f23

080024b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0a6      	sub	sp, #152	; 0x98
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024ec:	2300      	movs	r3, #0
 80024ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002512:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002516:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800251c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002524:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002528:	4619      	mov	r1, r3
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fe86 	bl	800223c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002530:	2301      	movs	r3, #1
 8002532:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002534:	2301      	movs	r3, #1
 8002536:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002538:	2301      	movs	r3, #1
 800253a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800253e:	2301      	movs	r3, #1
 8002540:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002552:	2300      	movs	r3, #0
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800255c:	2301      	movs	r3, #1
 800255e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002564:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800256a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002570:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002580:	f107 0308 	add.w	r3, r7, #8
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ff08 	bl	800239c <ETH_SetDMAConfig>
}
 800258c:	bf00      	nop
 800258e:	3798      	adds	r7, #152	; 0x98
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3305      	adds	r3, #5
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	3204      	adds	r2, #4
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <ETH_MACAddressConfig+0x68>)
 80025b6:	4413      	add	r3, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3303      	adds	r3, #3
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	061a      	lsls	r2, r3, #24
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3302      	adds	r3, #2
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3301      	adds	r3, #1
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	4313      	orrs	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <ETH_MACAddressConfig+0x6c>)
 80025e6:	4413      	add	r3, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6013      	str	r3, [r2, #0]
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40028040 	.word	0x40028040
 8002600:	40028044 	.word	0x40028044

08002604 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e03e      	b.n	8002690 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68d9      	ldr	r1, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	3206      	adds	r2, #6
 8002644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d80c      	bhi.n	8002674 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68d9      	ldr	r1, [r3, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	e004      	b.n	800267e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	461a      	mov	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3301      	adds	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d9bd      	bls.n	8002612 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	611a      	str	r2, [r3, #16]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	e046      	b.n	8002752 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2200      	movs	r2, #0
 80026e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002700:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002708:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	3212      	adds	r2, #18
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d80c      	bhi.n	8002742 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6919      	ldr	r1, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	e004      	b.n	800274c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3301      	adds	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d9b5      	bls.n	80026c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002782:	60da      	str	r2, [r3, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	e175      	b.n	8002a9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f040 8164 	bne.w	8002a96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d005      	beq.n	80027e6 <HAL_GPIO_Init+0x56>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d130      	bne.n	8002848 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0201 	and.w	r2, r3, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b03      	cmp	r3, #3
 8002852:	d017      	beq.n	8002884 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d123      	bne.n	80028d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0203 	and.w	r2, r3, #3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80be 	beq.w	8002a96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002932:	4a61      	ldr	r2, [pc, #388]	; (8002ab8 <HAL_GPIO_Init+0x328>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_GPIO_Init+0x32c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d037      	beq.n	80029ce <HAL_GPIO_Init+0x23e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a57      	ldr	r2, [pc, #348]	; (8002ac0 <HAL_GPIO_Init+0x330>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d031      	beq.n	80029ca <HAL_GPIO_Init+0x23a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a56      	ldr	r2, [pc, #344]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02b      	beq.n	80029c6 <HAL_GPIO_Init+0x236>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a55      	ldr	r2, [pc, #340]	; (8002ac8 <HAL_GPIO_Init+0x338>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d025      	beq.n	80029c2 <HAL_GPIO_Init+0x232>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a54      	ldr	r2, [pc, #336]	; (8002acc <HAL_GPIO_Init+0x33c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <HAL_GPIO_Init+0x22e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a53      	ldr	r2, [pc, #332]	; (8002ad0 <HAL_GPIO_Init+0x340>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x22a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_GPIO_Init+0x344>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a51      	ldr	r2, [pc, #324]	; (8002ad8 <HAL_GPIO_Init+0x348>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x222>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a50      	ldr	r2, [pc, #320]	; (8002adc <HAL_GPIO_Init+0x34c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x21e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4f      	ldr	r2, [pc, #316]	; (8002ae0 <HAL_GPIO_Init+0x350>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x21a>
 80029a6:	2309      	movs	r3, #9
 80029a8:	e012      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029aa:	230a      	movs	r3, #10
 80029ac:	e010      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ae:	2308      	movs	r3, #8
 80029b0:	e00e      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029b2:	2307      	movs	r3, #7
 80029b4:	e00c      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029b6:	2306      	movs	r3, #6
 80029b8:	e00a      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ba:	2305      	movs	r3, #5
 80029bc:	e008      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029be:	2304      	movs	r3, #4
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029c2:	2303      	movs	r3, #3
 80029c4:	e004      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e002      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ce:	2300      	movs	r3, #0
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f002 0203 	and.w	r2, r2, #3
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	4093      	lsls	r3, r2
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029e0:	4935      	ldr	r1, [pc, #212]	; (8002ab8 <HAL_GPIO_Init+0x328>)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b3d      	ldr	r3, [pc, #244]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a12:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a42:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a66:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a90:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	f67f ae86 	bls.w	80027b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40013800 	.word	0x40013800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40021400 	.word	0x40021400
 8002ad4:	40021800 	.word	0x40021800
 8002ad8:	40021c00 	.word	0x40021c00
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40022400 	.word	0x40022400
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
 8002af4:	4613      	mov	r3, r2
 8002af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b04:	e003      	b.n	8002b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	041a      	lsls	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1c:	b08f      	sub	sp, #60	; 0x3c
 8002b1e:	af0a      	add	r7, sp, #40	; 0x28
 8002b20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e116      	b.n	8002d5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fada 	bl	8001100 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 ffbe 	bl	8004aec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	687e      	ldr	r6, [r7, #4]
 8002b78:	466d      	mov	r5, sp
 8002b7a:	f106 0410 	add.w	r4, r6, #16
 8002b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b8e:	1d33      	adds	r3, r6, #4
 8002b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b92:	6838      	ldr	r0, [r7, #0]
 8002b94:	f001 ff52 	bl	8004a3c <USB_CoreInit>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0d7      	b.n	8002d5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 ffac 	bl	8004b0e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	e04a      	b.n	8002c52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	333d      	adds	r3, #61	; 0x3d
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	333c      	adds	r3, #60	; 0x3c
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	b298      	uxth	r0, r3
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3344      	adds	r3, #68	; 0x44
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3340      	adds	r3, #64	; 0x40
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3348      	adds	r3, #72	; 0x48
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	334c      	adds	r3, #76	; 0x4c
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3354      	adds	r3, #84	; 0x54
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3af      	bcc.n	8002bbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e044      	b.n	8002cec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d3b5      	bcc.n	8002c62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	687e      	ldr	r6, [r7, #4]
 8002cfe:	466d      	mov	r5, sp
 8002d00:	f106 0410 	add.w	r4, r6, #16
 8002d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d10:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d14:	1d33      	adds	r3, r6, #4
 8002d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	f001 ff45 	bl	8004ba8 <USB_DevInit>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e014      	b.n	8002d5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f80b 	bl	8002d64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 f903 	bl	8004f5e <USB_DevDisconnect>

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	10000003 	.word	0x10000003

08002dac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40007000 	.word	0x40007000

08002dcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x98>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dfa:	f7fe fb77 	bl	80014ec <HAL_GetTick>
 8002dfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e00:	e009      	b.n	8002e16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e02:	f7fe fb73 	bl	80014ec <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e10:	d901      	bls.n	8002e16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e022      	b.n	8002e5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e22:	d1ee      	bne.n	8002e02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e30:	f7fe fb5c 	bl	80014ec <HAL_GetTick>
 8002e34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e36:	e009      	b.n	8002e4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e38:	f7fe fb58 	bl	80014ec <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e46:	d901      	bls.n	8002e4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e007      	b.n	8002e5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e58:	d1ee      	bne.n	8002e38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40007000 	.word	0x40007000

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e29b      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8087 	beq.w	8002f9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e90:	4b96      	ldr	r3, [pc, #600]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9c:	4b93      	ldr	r3, [pc, #588]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d112      	bne.n	8002ece <HAL_RCC_OscConfig+0x62>
 8002ea8:	4b90      	ldr	r3, [pc, #576]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	4b8d      	ldr	r3, [pc, #564]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x130>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d168      	bne.n	8002f9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e275      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x7a>
 8002ed8:	4b84      	ldr	r3, [pc, #528]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a83      	ldr	r2, [pc, #524]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e02e      	b.n	8002f44 <HAL_RCC_OscConfig+0xd8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x9c>
 8002eee:	4b7f      	ldr	r3, [pc, #508]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7e      	ldr	r2, [pc, #504]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b7c      	ldr	r3, [pc, #496]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7b      	ldr	r2, [pc, #492]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xd8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0xc0>
 8002f12:	4b76      	ldr	r3, [pc, #472]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b73      	ldr	r3, [pc, #460]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a72      	ldr	r2, [pc, #456]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xd8>
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6e      	ldr	r2, [pc, #440]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6b      	ldr	r2, [pc, #428]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe face 	bl	80014ec <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe faca 	bl	80014ec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e229      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe8>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe faba 	bl	80014ec <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fab6 	bl	80014ec <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e215      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b57      	ldr	r3, [pc, #348]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x110>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d069      	beq.n	800307e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002faa:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb6:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x190>
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x17a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1e9      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	493d      	ldr	r1, [pc, #244]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e040      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d023      	beq.n	800304c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b39      	ldr	r3, [pc, #228]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a38      	ldr	r2, [pc, #224]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fa6c 	bl	80014ec <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003018:	f7fe fa68 	bl	80014ec <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e1c7      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4929      	ldr	r1, [pc, #164]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
 800304a:	e018      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a26      	ldr	r2, [pc, #152]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fa48 	bl	80014ec <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003060:	f7fe fa44 	bl	80014ec <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e1a3      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d038      	beq.n	80030fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d019      	beq.n	80030c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309e:	f7fe fa25 	bl	80014ec <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a6:	f7fe fa21 	bl	80014ec <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e180      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 80030ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x23a>
 80030c4:	e01a      	b.n	80030fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	4a08      	ldr	r2, [pc, #32]	; (80030ec <HAL_RCC_OscConfig+0x280>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe fa0b 	bl	80014ec <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030da:	f7fe fa07 	bl	80014ec <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d903      	bls.n	80030f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e166      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
 80030ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	4b92      	ldr	r3, [pc, #584]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80030f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ee      	bne.n	80030da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a4 	beq.w	8003252 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310a:	4b8c      	ldr	r3, [pc, #560]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b89      	ldr	r3, [pc, #548]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a88      	ldr	r2, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b86      	ldr	r3, [pc, #536]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003132:	4b83      	ldr	r3, [pc, #524]	; (8003340 <HAL_RCC_OscConfig+0x4d4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d118      	bne.n	8003170 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800313e:	4b80      	ldr	r3, [pc, #512]	; (8003340 <HAL_RCC_OscConfig+0x4d4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7f      	ldr	r2, [pc, #508]	; (8003340 <HAL_RCC_OscConfig+0x4d4>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fe f9cf 	bl	80014ec <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003152:	f7fe f9cb 	bl	80014ec <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b64      	cmp	r3, #100	; 0x64
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e12a      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003164:	4b76      	ldr	r3, [pc, #472]	; (8003340 <HAL_RCC_OscConfig+0x4d4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x31a>
 8003178:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a6f      	ldr	r2, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	e02d      	b.n	80031e2 <HAL_RCC_OscConfig+0x376>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x33c>
 800318e:	4b6b      	ldr	r3, [pc, #428]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	4a6a      	ldr	r2, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6713      	str	r3, [r2, #112]	; 0x70
 800319a:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	4a67      	ldr	r2, [pc, #412]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	e01c      	b.n	80031e2 <HAL_RCC_OscConfig+0x376>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d10c      	bne.n	80031ca <HAL_RCC_OscConfig+0x35e>
 80031b0:	4b62      	ldr	r3, [pc, #392]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a61      	ldr	r2, [pc, #388]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
 80031bc:	4b5f      	ldr	r3, [pc, #380]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a5e      	ldr	r2, [pc, #376]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
 80031c8:	e00b      	b.n	80031e2 <HAL_RCC_OscConfig+0x376>
 80031ca:	4b5c      	ldr	r3, [pc, #368]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a5b      	ldr	r2, [pc, #364]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
 80031d6:	4b59      	ldr	r3, [pc, #356]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a58      	ldr	r2, [pc, #352]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d015      	beq.n	8003216 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fe f97f 	bl	80014ec <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe f97b 	bl	80014ec <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0d8      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ee      	beq.n	80031f2 <HAL_RCC_OscConfig+0x386>
 8003214:	e014      	b.n	8003240 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7fe f969 	bl	80014ec <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fe f965 	bl	80014ec <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	; 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e0c2      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ee      	bne.n	800321e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003246:	4b3d      	ldr	r3, [pc, #244]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a3c      	ldr	r2, [pc, #240]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800324c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80ae 	beq.w	80033b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325c:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d06d      	beq.n	8003344 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d14b      	bne.n	8003308 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a31      	ldr	r2, [pc, #196]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800327a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe f936 	bl	80014ec <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe f932 	bl	80014ec <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e091      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	3b01      	subs	r3, #1
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	071b      	lsls	r3, r3, #28
 80032ce:	491b      	ldr	r1, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a18      	ldr	r2, [pc, #96]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe f904 	bl	80014ec <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe f900 	bl	80014ec <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e05f      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x47c>
 8003306:	e057      	b.n	80033b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0b      	ldr	r2, [pc, #44]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 800330e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe f8ea 	bl	80014ec <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe f8e6 	bl	80014ec <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e045      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_RCC_OscConfig+0x4d0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x4b0>
 800333a:	e03d      	b.n	80033b8 <HAL_RCC_OscConfig+0x54c>
 800333c:	40023800 	.word	0x40023800
 8003340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003344:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <HAL_RCC_OscConfig+0x558>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d030      	beq.n	80033b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d129      	bne.n	80033b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d122      	bne.n	80033b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800337a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800337c:	4293      	cmp	r3, r2
 800337e:	d119      	bne.n	80033b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d10f      	bne.n	80033b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0d0      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b6a      	ldr	r3, [pc, #424]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d910      	bls.n	8003410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 020f 	bic.w	r2, r3, #15
 80033f6:	4965      	ldr	r1, [pc, #404]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b63      	ldr	r3, [pc, #396]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0b8      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003428:	4b59      	ldr	r3, [pc, #356]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a58      	ldr	r2, [pc, #352]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800342e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003440:	4b53      	ldr	r3, [pc, #332]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a52      	ldr	r2, [pc, #328]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800344a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b50      	ldr	r3, [pc, #320]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	494d      	ldr	r1, [pc, #308]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d040      	beq.n	80034ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d115      	bne.n	80034aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e073      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06b      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4936      	ldr	r1, [pc, #216]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fe f816 	bl	80014ec <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fe f812 	bl	80014ec <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e053      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b2d      	ldr	r3, [pc, #180]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d210      	bcs.n	800351c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 020f 	bic.w	r2, r3, #15
 8003502:	4922      	ldr	r1, [pc, #136]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e032      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4916      	ldr	r1, [pc, #88]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	490e      	ldr	r1, [pc, #56]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800355a:	f000 f821 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800355e:	4602      	mov	r2, r0
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	490a      	ldr	r1, [pc, #40]	; (8003594 <HAL_RCC_ClockConfig+0x1cc>)
 800356c:	5ccb      	ldrb	r3, [r1, r3]
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	4a09      	ldr	r2, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1d0>)
 8003574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_ClockConfig+0x1d4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd ff72 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023c00 	.word	0x40023c00
 8003590:	40023800 	.word	0x40023800
 8003594:	08007c20 	.word	0x08007c20
 8003598:	20000000 	.word	0x20000000
 800359c:	20000004 	.word	0x20000004

080035a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a4:	b094      	sub	sp, #80	; 0x50
 80035a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	647b      	str	r3, [r7, #68]	; 0x44
 80035ac:	2300      	movs	r3, #0
 80035ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b0:	2300      	movs	r3, #0
 80035b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b8:	4b79      	ldr	r3, [pc, #484]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d00d      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x40>
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	f200 80e1 	bhi.w	800378c <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d003      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x3a>
 80035d2:	e0db      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b73      	ldr	r3, [pc, #460]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d8:	e0db      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035da:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80035dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035de:	e0d8      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035ea:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d063      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	2200      	movs	r2, #0
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003600:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
 800360a:	2300      	movs	r3, #0
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
 800360e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4621      	mov	r1, r4
 800362c:	1a51      	subs	r1, r2, r1
 800362e:	6139      	str	r1, [r7, #16]
 8003630:	4629      	mov	r1, r5
 8003632:	eb63 0301 	sbc.w	r3, r3, r1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003644:	4659      	mov	r1, fp
 8003646:	018b      	lsls	r3, r1, #6
 8003648:	4651      	mov	r1, sl
 800364a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364e:	4651      	mov	r1, sl
 8003650:	018a      	lsls	r2, r1, #6
 8003652:	4651      	mov	r1, sl
 8003654:	ebb2 0801 	subs.w	r8, r2, r1
 8003658:	4659      	mov	r1, fp
 800365a:	eb63 0901 	sbc.w	r9, r3, r1
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003672:	4690      	mov	r8, r2
 8003674:	4699      	mov	r9, r3
 8003676:	4623      	mov	r3, r4
 8003678:	eb18 0303 	adds.w	r3, r8, r3
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	462b      	mov	r3, r5
 8003680:	eb49 0303 	adc.w	r3, r9, r3
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003692:	4629      	mov	r1, r5
 8003694:	024b      	lsls	r3, r1, #9
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369c:	4621      	mov	r1, r4
 800369e:	024a      	lsls	r2, r1, #9
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a6:	2200      	movs	r2, #0
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036b0:	f7fc fe1e 	bl	80002f0 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036bc:	e058      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	4611      	mov	r1, r2
 80036ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
 80036d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	f04f 0000 	mov.w	r0, #0
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	0159      	lsls	r1, r3, #5
 80036e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ea:	0150      	lsls	r0, r2, #5
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4641      	mov	r1, r8
 80036f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036f6:	4649      	mov	r1, r9
 80036f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800370c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003710:	ebb2 040a 	subs.w	r4, r2, sl
 8003714:	eb63 050b 	sbc.w	r5, r3, fp
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	00eb      	lsls	r3, r5, #3
 8003722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003726:	00e2      	lsls	r2, r4, #3
 8003728:	4614      	mov	r4, r2
 800372a:	461d      	mov	r5, r3
 800372c:	4643      	mov	r3, r8
 800372e:	18e3      	adds	r3, r4, r3
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	464b      	mov	r3, r9
 8003734:	eb45 0303 	adc.w	r3, r5, r3
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003746:	4629      	mov	r1, r5
 8003748:	028b      	lsls	r3, r1, #10
 800374a:	4621      	mov	r1, r4
 800374c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003750:	4621      	mov	r1, r4
 8003752:	028a      	lsls	r2, r1, #10
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375a:	2200      	movs	r2, #0
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	61fa      	str	r2, [r7, #28]
 8003760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003764:	f7fc fdc4 	bl	80002f0 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800378a:	e002      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800378e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003794:	4618      	mov	r0, r3
 8003796:	3750      	adds	r7, #80	; 0x50
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	007a1200 	.word	0x007a1200

080037ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000000 	.word	0x20000000

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff0 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4903      	ldr	r1, [pc, #12]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08007c30 	.word	0x08007c30

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037f0:	f7ff ffdc 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0b5b      	lsrs	r3, r3, #13
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	08007c30 	.word	0x08007c30

08003814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d012      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800383c:	4b69      	ldr	r3, [pc, #420]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a68      	ldr	r2, [pc, #416]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003842:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003846:	6093      	str	r3, [r2, #8]
 8003848:	4b66      	ldr	r3, [pc, #408]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	4964      	ldr	r1, [pc, #400]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d017      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800386e:	4b5d      	ldr	r3, [pc, #372]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	4959      	ldr	r1, [pc, #356]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388c:	d101      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800388e:	2301      	movs	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d017      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038aa:	4b4e      	ldr	r3, [pc, #312]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	494a      	ldr	r1, [pc, #296]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c8:	d101      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038ca:	2301      	movs	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 808b 	beq.w	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f8:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	4a39      	ldr	r2, [pc, #228]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	; 0x40
 8003904:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003910:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fd fde6 	bl	80014ec <HAL_GetTick>
 8003920:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003924:	f7fd fde2 	bl	80014ec <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e38f      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003936:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003942:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d035      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	429a      	cmp	r2, r3
 800395e:	d02e      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003982:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003988:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d114      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fd fdaa 	bl	80014ec <HAL_GetTick>
 8003998:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	e00a      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399c:	f7fd fda6 	bl	80014ec <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e351      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ee      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ca:	d111      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039d8:	4b04      	ldr	r3, [pc, #16]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039da:	400b      	ands	r3, r1
 80039dc:	4901      	ldr	r1, [pc, #4]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
 80039e2:	e00b      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40007000 	.word	0x40007000
 80039ec:	0ffffcff 	.word	0x0ffffcff
 80039f0:	4bac      	ldr	r3, [pc, #688]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4aab      	ldr	r2, [pc, #684]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039fa:	6093      	str	r3, [r2, #8]
 80039fc:	4ba9      	ldr	r3, [pc, #676]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a08:	49a6      	ldr	r1, [pc, #664]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d010      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a1a:	4ba2      	ldr	r3, [pc, #648]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a20:	4aa0      	ldr	r2, [pc, #640]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a2a:	4b9e      	ldr	r3, [pc, #632]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	499b      	ldr	r1, [pc, #620]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a48:	4b96      	ldr	r3, [pc, #600]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a56:	4993      	ldr	r1, [pc, #588]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a6a:	4b8e      	ldr	r3, [pc, #568]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a78:	498a      	ldr	r1, [pc, #552]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a8c:	4b85      	ldr	r3, [pc, #532]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9a:	4982      	ldr	r1, [pc, #520]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aae:	4b7d      	ldr	r3, [pc, #500]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4979      	ldr	r1, [pc, #484]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ad0:	4b74      	ldr	r3, [pc, #464]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4971      	ldr	r1, [pc, #452]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003af2:	4b6c      	ldr	r3, [pc, #432]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af8:	f023 020c 	bic.w	r2, r3, #12
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	4968      	ldr	r1, [pc, #416]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b14:	4b63      	ldr	r3, [pc, #396]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	4960      	ldr	r1, [pc, #384]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b36:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	4957      	ldr	r1, [pc, #348]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b58:	4b52      	ldr	r3, [pc, #328]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	494f      	ldr	r1, [pc, #316]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	4946      	ldr	r1, [pc, #280]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b9c:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	493e      	ldr	r1, [pc, #248]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bbe:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bcc:	4935      	ldr	r1, [pc, #212]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003be0:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bee:	492d      	ldr	r1, [pc, #180]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c02:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c10:	4924      	ldr	r1, [pc, #144]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c20:	d101      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c50:	4914      	ldr	r1, [pc, #80]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c74:	490b      	ldr	r1, [pc, #44]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00f      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c98:	4902      	ldr	r1, [pc, #8]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cb4:	4b8a      	ldr	r3, [pc, #552]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	4986      	ldr	r1, [pc, #536]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cd8:	4b81      	ldr	r3, [pc, #516]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce8:	497d      	ldr	r1, [pc, #500]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d006      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80d6 	beq.w	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d04:	4b76      	ldr	r3, [pc, #472]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a75      	ldr	r2, [pc, #468]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd fbec 	bl	80014ec <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d18:	f7fd fbe8 	bl	80014ec <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e195      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d021      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d11d      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d4a:	4b65      	ldr	r3, [pc, #404]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d58:	4b61      	ldr	r3, [pc, #388]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5e:	0e1b      	lsrs	r3, r3, #24
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	019a      	lsls	r2, r3, #6
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	071b      	lsls	r3, r3, #28
 8003d7e:	4958      	ldr	r1, [pc, #352]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d02e      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db0:	d129      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003db2:	4b4b      	ldr	r3, [pc, #300]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dc0:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc6:	0f1b      	lsrs	r3, r3, #28
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	019a      	lsls	r2, r3, #6
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	061b      	lsls	r3, r3, #24
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	071b      	lsls	r3, r3, #28
 8003de6:	493e      	ldr	r1, [pc, #248]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dee:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df4:	f023 021f 	bic.w	r2, r3, #31
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	4938      	ldr	r1, [pc, #224]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01d      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e12:	4b33      	ldr	r3, [pc, #204]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e18:	0e1b      	lsrs	r3, r3, #24
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e20:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e26:	0f1b      	lsrs	r3, r3, #28
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	019a      	lsls	r2, r3, #6
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	061b      	lsls	r3, r3, #24
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	4926      	ldr	r1, [pc, #152]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d011      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	019a      	lsls	r2, r3, #6
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	071b      	lsls	r3, r3, #28
 8003e76:	491a      	ldr	r1, [pc, #104]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e7e:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8a:	f7fd fb2f 	bl	80014ec <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e92:	f7fd fb2b 	bl	80014ec <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b64      	cmp	r3, #100	; 0x64
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0d8      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	f040 80ce 	bne.w	8004054 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec4:	f7fd fb12 	bl	80014ec <HAL_GetTick>
 8003ec8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eca:	e00b      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ecc:	f7fd fb0e 	bl	80014ec <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d904      	bls.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e0bb      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ee4:	4b5e      	ldr	r3, [pc, #376]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef0:	d0ec      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02e      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d12a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f1a:	4b51      	ldr	r3, [pc, #324]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f28:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	0f1b      	lsrs	r3, r3, #28
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	019a      	lsls	r2, r3, #6
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	071b      	lsls	r3, r3, #28
 8003f4e:	4944      	ldr	r1, [pc, #272]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f56:	4b42      	ldr	r3, [pc, #264]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	493d      	ldr	r1, [pc, #244]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d022      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f84:	d11d      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	0e1b      	lsrs	r3, r3, #24
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f94:	4b32      	ldr	r3, [pc, #200]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	0f1b      	lsrs	r3, r3, #28
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	019a      	lsls	r2, r3, #6
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	061b      	lsls	r3, r3, #24
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	071b      	lsls	r3, r3, #28
 8003fba:	4929      	ldr	r1, [pc, #164]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d028      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	0e1b      	lsrs	r3, r3, #24
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fdc:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	019a      	lsls	r2, r3, #6
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	071b      	lsls	r3, r3, #28
 8004002:	4917      	ldr	r1, [pc, #92]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4911      	ldr	r1, [pc, #68]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402c:	f7fd fa5e 	bl	80014ec <HAL_GetTick>
 8004030:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004034:	f7fd fa5a 	bl	80014ec <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e007      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004052:	d1ef      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e040      	b.n	80040f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fc ffda 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	; 0x24
 8004090:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8b0 	bl	8004208 <UART_SetConfig>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e022      	b.n	80040f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb08 	bl	80046d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fb8f 	bl	8004814 <UART_CheckIdleState>
 80040f6:	4603      	mov	r3, r0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004114:	2b20      	cmp	r3, #32
 8004116:	d171      	bne.n	80041fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_UART_Transmit+0x24>
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e06a      	b.n	80041fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2221      	movs	r2, #33	; 0x21
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004136:	f7fd f9d9 	bl	80014ec <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d108      	bne.n	8004168 <HAL_UART_Transmit+0x68>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e003      	b.n	8004170 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004170:	e02c      	b.n	80041cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fb96 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e038      	b.n	80041fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3302      	adds	r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e007      	b.n	80041ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1cc      	bne.n	8004172 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	2140      	movs	r1, #64	; 0x40
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fb63 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e005      	b.n	80041fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4ba6      	ldr	r3, [pc, #664]	; (80044cc <UART_SetConfig+0x2c4>)
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	430b      	orrs	r3, r1
 800423e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a94      	ldr	r2, [pc, #592]	; (80044d0 <UART_SetConfig+0x2c8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d120      	bne.n	80042c6 <UART_SetConfig+0xbe>
 8004284:	4b93      	ldr	r3, [pc, #588]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b03      	cmp	r3, #3
 8004290:	d816      	bhi.n	80042c0 <UART_SetConfig+0xb8>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x90>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042b5 	.word	0x080042b5
 80042a0:	080042af 	.word	0x080042af
 80042a4:	080042bb 	.word	0x080042bb
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e150      	b.n	8004550 <UART_SetConfig+0x348>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e14d      	b.n	8004550 <UART_SetConfig+0x348>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e14a      	b.n	8004550 <UART_SetConfig+0x348>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e147      	b.n	8004550 <UART_SetConfig+0x348>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e144      	b.n	8004550 <UART_SetConfig+0x348>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a83      	ldr	r2, [pc, #524]	; (80044d8 <UART_SetConfig+0x2d0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d132      	bne.n	8004336 <UART_SetConfig+0x12e>
 80042d0:	4b80      	ldr	r3, [pc, #512]	; (80044d4 <UART_SetConfig+0x2cc>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d828      	bhi.n	8004330 <UART_SetConfig+0x128>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0xdc>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004319 	.word	0x08004319
 80042e8:	08004331 	.word	0x08004331
 80042ec:	08004331 	.word	0x08004331
 80042f0:	08004331 	.word	0x08004331
 80042f4:	08004325 	.word	0x08004325
 80042f8:	08004331 	.word	0x08004331
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004331 	.word	0x08004331
 8004304:	0800431f 	.word	0x0800431f
 8004308:	08004331 	.word	0x08004331
 800430c:	08004331 	.word	0x08004331
 8004310:	08004331 	.word	0x08004331
 8004314:	0800432b 	.word	0x0800432b
 8004318:	2300      	movs	r3, #0
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e118      	b.n	8004550 <UART_SetConfig+0x348>
 800431e:	2302      	movs	r3, #2
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e115      	b.n	8004550 <UART_SetConfig+0x348>
 8004324:	2304      	movs	r3, #4
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e112      	b.n	8004550 <UART_SetConfig+0x348>
 800432a:	2308      	movs	r3, #8
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e10f      	b.n	8004550 <UART_SetConfig+0x348>
 8004330:	2310      	movs	r3, #16
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e10c      	b.n	8004550 <UART_SetConfig+0x348>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a68      	ldr	r2, [pc, #416]	; (80044dc <UART_SetConfig+0x2d4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d120      	bne.n	8004382 <UART_SetConfig+0x17a>
 8004340:	4b64      	ldr	r3, [pc, #400]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800434a:	2b30      	cmp	r3, #48	; 0x30
 800434c:	d013      	beq.n	8004376 <UART_SetConfig+0x16e>
 800434e:	2b30      	cmp	r3, #48	; 0x30
 8004350:	d814      	bhi.n	800437c <UART_SetConfig+0x174>
 8004352:	2b20      	cmp	r3, #32
 8004354:	d009      	beq.n	800436a <UART_SetConfig+0x162>
 8004356:	2b20      	cmp	r3, #32
 8004358:	d810      	bhi.n	800437c <UART_SetConfig+0x174>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <UART_SetConfig+0x15c>
 800435e:	2b10      	cmp	r3, #16
 8004360:	d006      	beq.n	8004370 <UART_SetConfig+0x168>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x174>
 8004364:	2300      	movs	r3, #0
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e0f2      	b.n	8004550 <UART_SetConfig+0x348>
 800436a:	2302      	movs	r3, #2
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e0ef      	b.n	8004550 <UART_SetConfig+0x348>
 8004370:	2304      	movs	r3, #4
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e0ec      	b.n	8004550 <UART_SetConfig+0x348>
 8004376:	2308      	movs	r3, #8
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e0e9      	b.n	8004550 <UART_SetConfig+0x348>
 800437c:	2310      	movs	r3, #16
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e0e6      	b.n	8004550 <UART_SetConfig+0x348>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <UART_SetConfig+0x2d8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d120      	bne.n	80043ce <UART_SetConfig+0x1c6>
 800438c:	4b51      	ldr	r3, [pc, #324]	; (80044d4 <UART_SetConfig+0x2cc>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004396:	2bc0      	cmp	r3, #192	; 0xc0
 8004398:	d013      	beq.n	80043c2 <UART_SetConfig+0x1ba>
 800439a:	2bc0      	cmp	r3, #192	; 0xc0
 800439c:	d814      	bhi.n	80043c8 <UART_SetConfig+0x1c0>
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	d009      	beq.n	80043b6 <UART_SetConfig+0x1ae>
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d810      	bhi.n	80043c8 <UART_SetConfig+0x1c0>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <UART_SetConfig+0x1a8>
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d006      	beq.n	80043bc <UART_SetConfig+0x1b4>
 80043ae:	e00b      	b.n	80043c8 <UART_SetConfig+0x1c0>
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e0cc      	b.n	8004550 <UART_SetConfig+0x348>
 80043b6:	2302      	movs	r3, #2
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e0c9      	b.n	8004550 <UART_SetConfig+0x348>
 80043bc:	2304      	movs	r3, #4
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e0c6      	b.n	8004550 <UART_SetConfig+0x348>
 80043c2:	2308      	movs	r3, #8
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e0c3      	b.n	8004550 <UART_SetConfig+0x348>
 80043c8:	2310      	movs	r3, #16
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0c0      	b.n	8004550 <UART_SetConfig+0x348>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a44      	ldr	r2, [pc, #272]	; (80044e4 <UART_SetConfig+0x2dc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d125      	bne.n	8004424 <UART_SetConfig+0x21c>
 80043d8:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <UART_SetConfig+0x2cc>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e6:	d017      	beq.n	8004418 <UART_SetConfig+0x210>
 80043e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ec:	d817      	bhi.n	800441e <UART_SetConfig+0x216>
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f2:	d00b      	beq.n	800440c <UART_SetConfig+0x204>
 80043f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f8:	d811      	bhi.n	800441e <UART_SetConfig+0x216>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <UART_SetConfig+0x1fe>
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d006      	beq.n	8004412 <UART_SetConfig+0x20a>
 8004404:	e00b      	b.n	800441e <UART_SetConfig+0x216>
 8004406:	2300      	movs	r3, #0
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e0a1      	b.n	8004550 <UART_SetConfig+0x348>
 800440c:	2302      	movs	r3, #2
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e09e      	b.n	8004550 <UART_SetConfig+0x348>
 8004412:	2304      	movs	r3, #4
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e09b      	b.n	8004550 <UART_SetConfig+0x348>
 8004418:	2308      	movs	r3, #8
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e098      	b.n	8004550 <UART_SetConfig+0x348>
 800441e:	2310      	movs	r3, #16
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e095      	b.n	8004550 <UART_SetConfig+0x348>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <UART_SetConfig+0x2e0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d125      	bne.n	800447a <UART_SetConfig+0x272>
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443c:	d017      	beq.n	800446e <UART_SetConfig+0x266>
 800443e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004442:	d817      	bhi.n	8004474 <UART_SetConfig+0x26c>
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d00b      	beq.n	8004462 <UART_SetConfig+0x25a>
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444e:	d811      	bhi.n	8004474 <UART_SetConfig+0x26c>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <UART_SetConfig+0x254>
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004458:	d006      	beq.n	8004468 <UART_SetConfig+0x260>
 800445a:	e00b      	b.n	8004474 <UART_SetConfig+0x26c>
 800445c:	2301      	movs	r3, #1
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e076      	b.n	8004550 <UART_SetConfig+0x348>
 8004462:	2302      	movs	r3, #2
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e073      	b.n	8004550 <UART_SetConfig+0x348>
 8004468:	2304      	movs	r3, #4
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e070      	b.n	8004550 <UART_SetConfig+0x348>
 800446e:	2308      	movs	r3, #8
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e06d      	b.n	8004550 <UART_SetConfig+0x348>
 8004474:	2310      	movs	r3, #16
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e06a      	b.n	8004550 <UART_SetConfig+0x348>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <UART_SetConfig+0x2e4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d138      	bne.n	80044f6 <UART_SetConfig+0x2ee>
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800448e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004492:	d017      	beq.n	80044c4 <UART_SetConfig+0x2bc>
 8004494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004498:	d82a      	bhi.n	80044f0 <UART_SetConfig+0x2e8>
 800449a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449e:	d00b      	beq.n	80044b8 <UART_SetConfig+0x2b0>
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d824      	bhi.n	80044f0 <UART_SetConfig+0x2e8>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <UART_SetConfig+0x2aa>
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d006      	beq.n	80044be <UART_SetConfig+0x2b6>
 80044b0:	e01e      	b.n	80044f0 <UART_SetConfig+0x2e8>
 80044b2:	2300      	movs	r3, #0
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e04b      	b.n	8004550 <UART_SetConfig+0x348>
 80044b8:	2302      	movs	r3, #2
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e048      	b.n	8004550 <UART_SetConfig+0x348>
 80044be:	2304      	movs	r3, #4
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e045      	b.n	8004550 <UART_SetConfig+0x348>
 80044c4:	2308      	movs	r3, #8
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e042      	b.n	8004550 <UART_SetConfig+0x348>
 80044ca:	bf00      	nop
 80044cc:	efff69f3 	.word	0xefff69f3
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40004400 	.word	0x40004400
 80044dc:	40004800 	.word	0x40004800
 80044e0:	40004c00 	.word	0x40004c00
 80044e4:	40005000 	.word	0x40005000
 80044e8:	40011400 	.word	0x40011400
 80044ec:	40007800 	.word	0x40007800
 80044f0:	2310      	movs	r3, #16
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e02c      	b.n	8004550 <UART_SetConfig+0x348>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a72      	ldr	r2, [pc, #456]	; (80046c4 <UART_SetConfig+0x4bc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d125      	bne.n	800454c <UART_SetConfig+0x344>
 8004500:	4b71      	ldr	r3, [pc, #452]	; (80046c8 <UART_SetConfig+0x4c0>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800450a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800450e:	d017      	beq.n	8004540 <UART_SetConfig+0x338>
 8004510:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004514:	d817      	bhi.n	8004546 <UART_SetConfig+0x33e>
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d00b      	beq.n	8004534 <UART_SetConfig+0x32c>
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	d811      	bhi.n	8004546 <UART_SetConfig+0x33e>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <UART_SetConfig+0x326>
 8004526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452a:	d006      	beq.n	800453a <UART_SetConfig+0x332>
 800452c:	e00b      	b.n	8004546 <UART_SetConfig+0x33e>
 800452e:	2300      	movs	r3, #0
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e00d      	b.n	8004550 <UART_SetConfig+0x348>
 8004534:	2302      	movs	r3, #2
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e00a      	b.n	8004550 <UART_SetConfig+0x348>
 800453a:	2304      	movs	r3, #4
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e007      	b.n	8004550 <UART_SetConfig+0x348>
 8004540:	2308      	movs	r3, #8
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e004      	b.n	8004550 <UART_SetConfig+0x348>
 8004546:	2310      	movs	r3, #16
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e001      	b.n	8004550 <UART_SetConfig+0x348>
 800454c:	2310      	movs	r3, #16
 800454e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004558:	d15b      	bne.n	8004612 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800455a:	7ffb      	ldrb	r3, [r7, #31]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d828      	bhi.n	80045b2 <UART_SetConfig+0x3aa>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0x360>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800458d 	.word	0x0800458d
 800456c:	08004595 	.word	0x08004595
 8004570:	0800459d 	.word	0x0800459d
 8004574:	080045b3 	.word	0x080045b3
 8004578:	080045a3 	.word	0x080045a3
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045b3 	.word	0x080045b3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7ff f91a 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8004590:	61b8      	str	r0, [r7, #24]
        break;
 8004592:	e013      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7ff f92a 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8004598:	61b8      	str	r0, [r7, #24]
        break;
 800459a:	e00f      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <UART_SetConfig+0x4c4>)
 800459e:	61bb      	str	r3, [r7, #24]
        break;
 80045a0:	e00c      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fffd 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80045a6:	61b8      	str	r0, [r7, #24]
        break;
 80045a8:	e008      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ae:	61bb      	str	r3, [r7, #24]
        break;
 80045b0:	e004      	b.n	80045bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77bb      	strb	r3, [r7, #30]
        break;
 80045ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d074      	beq.n	80046ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	005a      	lsls	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d916      	bls.n	800460c <UART_SetConfig+0x404>
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d212      	bcs.n	800460c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f023 030f 	bic.w	r3, r3, #15
 80045ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	4313      	orrs	r3, r2
 8004600:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	89fa      	ldrh	r2, [r7, #14]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	e04f      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77bb      	strb	r3, [r7, #30]
 8004610:	e04c      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d828      	bhi.n	800466a <UART_SetConfig+0x462>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x418>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004645 	.word	0x08004645
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466b 	.word	0x0800466b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800466b 	.word	0x0800466b
 8004638:	0800466b 	.word	0x0800466b
 800463c:	0800466b 	.word	0x0800466b
 8004640:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7ff f8be 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8004648:	61b8      	str	r0, [r7, #24]
        break;
 800464a:	e013      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7ff f8ce 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8004650:	61b8      	str	r0, [r7, #24]
        break;
 8004652:	e00f      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <UART_SetConfig+0x4c4>)
 8004656:	61bb      	str	r3, [r7, #24]
        break;
 8004658:	e00c      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe ffa1 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800465e:	61b8      	str	r0, [r7, #24]
        break;
 8004660:	e008      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e004      	b.n	8004674 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	77bb      	strb	r3, [r7, #30]
        break;
 8004672:	bf00      	nop
    }

    if (pclk != 0U)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	085a      	lsrs	r2, r3, #1
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	441a      	add	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b0f      	cmp	r3, #15
 8004692:	d909      	bls.n	80046a8 <UART_SetConfig+0x4a0>
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469a:	d205      	bcs.n	80046a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	e001      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40007c00 	.word	0x40007c00
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400

080046d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ce:	d10a      	bne.n	80047e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af02      	add	r7, sp, #8
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004824:	f7fc fe62 	bl	80014ec <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10e      	bne.n	8004856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f831 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e027      	b.n	80048a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d10e      	bne.n	8004882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f81b 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e011      	b.n	80048a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b09c      	sub	sp, #112	; 0x70
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	e0a7      	b.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	f000 80a3 	beq.w	8004a10 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fc fe0f 	bl	80014ec <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d13f      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004900:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800490c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004932:	64ba      	str	r2, [r7, #72]	; 0x48
 8004934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e068      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d050      	beq.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497c:	d148      	bne.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004986:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800499c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
 80049a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e6      	bne.n	8004988 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3308      	adds	r3, #8
 80049d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049da:	623a      	str	r2, [r7, #32]
 80049dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	69f9      	ldr	r1, [r7, #28]
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e5      	bne.n	80049ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e010      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	f43f af48 	beq.w	80048c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3770      	adds	r7, #112	; 0x70
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	f107 001c 	add.w	r0, r7, #28
 8004a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d120      	bne.n	8004a96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <USB_CoreInit+0xac>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa96 	bl	8004fbc <USB_CoreReset>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	e010      	b.n	8004ab8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa8a 	bl	8004fbc <USB_CoreReset>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10b      	bne.n	8004ad6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f043 0206 	orr.w	r2, r3, #6
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae2:	b004      	add	sp, #16
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	ffbdffbf 	.word	0xffbdffbf

08004aec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 0201 	bic.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d115      	bne.n	8004b5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f7fc fce1 	bl	8001504 <HAL_Delay>
      ms++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3301      	adds	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fa29 	bl	8004fa0 <USB_GetMode>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d01e      	beq.n	8004b92 <USB_SetCurrentMode+0x84>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b31      	cmp	r3, #49	; 0x31
 8004b58:	d9f0      	bls.n	8004b3c <USB_SetCurrentMode+0x2e>
 8004b5a:	e01a      	b.n	8004b92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d115      	bne.n	8004b8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7fc fcc8 	bl	8001504 <HAL_Delay>
      ms++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa10 	bl	8004fa0 <USB_GetMode>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <USB_SetCurrentMode+0x84>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b31      	cmp	r3, #49	; 0x31
 8004b8a:	d9f0      	bls.n	8004b6e <USB_SetCurrentMode+0x60>
 8004b8c:	e001      	b.n	8004b92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e005      	b.n	8004b9e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b32      	cmp	r3, #50	; 0x32
 8004b96:	d101      	bne.n	8004b9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ba8:	b084      	sub	sp, #16
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e009      	b.n	8004bdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3340      	adds	r3, #64	; 0x40
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b0e      	cmp	r3, #14
 8004be0:	d9f2      	bls.n	8004bc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11c      	bne.n	8004c22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e005      	b.n	8004c2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c34:	461a      	mov	r2, r3
 8004c36:	2300      	movs	r3, #0
 8004c38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	4619      	mov	r1, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c48:	461a      	mov	r2, r3
 8004c4a:	680b      	ldr	r3, [r1, #0]
 8004c4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d10c      	bne.n	8004c6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f965 	bl	8004f2c <USB_SetDevSpeed>
 8004c62:	e008      	b.n	8004c76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c64:	2101      	movs	r1, #1
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f960 	bl	8004f2c <USB_SetDevSpeed>
 8004c6c:	e003      	b.n	8004c76 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c6e:	2103      	movs	r1, #3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f95b 	bl	8004f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c76:	2110      	movs	r1, #16
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f8f3 	bl	8004e64 <USB_FlushTxFifo>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f91f 	bl	8004ecc <USB_FlushRxFifo>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	461a      	mov	r2, r3
 8004cac:	2300      	movs	r3, #0
 8004cae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	e043      	b.n	8004d4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd8:	d118      	bne.n	8004d0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	461a      	mov	r2, r3
 8004cee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e013      	b.n	8004d1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	461a      	mov	r2, r3
 8004d04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e008      	b.n	8004d1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	3301      	adds	r3, #1
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d3b7      	bcc.n	8004cc2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e043      	b.n	8004de0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d6e:	d118      	bne.n	8004da2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	461a      	mov	r2, r3
 8004d84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e013      	b.n	8004db4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	e008      	b.n	8004db4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	461a      	mov	r2, r3
 8004db0:	2300      	movs	r3, #0
 8004db2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d3b7      	bcc.n	8004d58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f043 0210 	orr.w	r2, r3, #16
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <USB_DevInit+0x2b4>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f043 0208 	orr.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <USB_DevInit+0x2b8>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e58:	b004      	add	sp, #16
 8004e5a:	4770      	bx	lr
 8004e5c:	803c3800 	.word	0x803c3800
 8004e60:	40000004 	.word	0x40000004

08004e64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3301      	adds	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <USB_FlushTxFifo+0x64>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d901      	bls.n	8004e84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e01b      	b.n	8004ebc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	daf2      	bge.n	8004e72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	019b      	lsls	r3, r3, #6
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <USB_FlushTxFifo+0x64>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e006      	b.n	8004ebc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d0f0      	beq.n	8004e9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	00030d40 	.word	0x00030d40

08004ecc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <USB_FlushRxFifo+0x5c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e018      	b.n	8004f1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	daf2      	bge.n	8004ed8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <USB_FlushRxFifo+0x5c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e006      	b.n	8004f1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d0f0      	beq.n	8004efc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	00030d40 	.word	0x00030d40

08004f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f78:	f023 0303 	bic.w	r3, r3, #3
 8004f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f003 0301 	and.w	r3, r3, #1
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <USB_CoreReset+0x64>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e01b      	b.n	8005012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	daf2      	bge.n	8004fc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a09      	ldr	r2, [pc, #36]	; (8005020 <USB_CoreReset+0x64>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e006      	b.n	8005012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d0f0      	beq.n	8004ff2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	00030d40 	.word	0x00030d40

08005024 <__cvt>:
 8005024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005026:	ed2d 8b02 	vpush	{d8}
 800502a:	eeb0 8b40 	vmov.f64	d8, d0
 800502e:	b085      	sub	sp, #20
 8005030:	4617      	mov	r7, r2
 8005032:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005034:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005036:	ee18 2a90 	vmov	r2, s17
 800503a:	f025 0520 	bic.w	r5, r5, #32
 800503e:	2a00      	cmp	r2, #0
 8005040:	bfb6      	itet	lt
 8005042:	222d      	movlt	r2, #45	; 0x2d
 8005044:	2200      	movge	r2, #0
 8005046:	eeb1 8b40 	vneglt.f64	d8, d0
 800504a:	2d46      	cmp	r5, #70	; 0x46
 800504c:	460c      	mov	r4, r1
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	d004      	beq.n	800505c <__cvt+0x38>
 8005052:	2d45      	cmp	r5, #69	; 0x45
 8005054:	d100      	bne.n	8005058 <__cvt+0x34>
 8005056:	3401      	adds	r4, #1
 8005058:	2102      	movs	r1, #2
 800505a:	e000      	b.n	800505e <__cvt+0x3a>
 800505c:	2103      	movs	r1, #3
 800505e:	ab03      	add	r3, sp, #12
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	ab02      	add	r3, sp, #8
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	4622      	mov	r2, r4
 8005068:	4633      	mov	r3, r6
 800506a:	eeb0 0b48 	vmov.f64	d0, d8
 800506e:	f000 fe43 	bl	8005cf8 <_dtoa_r>
 8005072:	2d47      	cmp	r5, #71	; 0x47
 8005074:	d101      	bne.n	800507a <__cvt+0x56>
 8005076:	07fb      	lsls	r3, r7, #31
 8005078:	d51a      	bpl.n	80050b0 <__cvt+0x8c>
 800507a:	2d46      	cmp	r5, #70	; 0x46
 800507c:	eb00 0204 	add.w	r2, r0, r4
 8005080:	d10c      	bne.n	800509c <__cvt+0x78>
 8005082:	7803      	ldrb	r3, [r0, #0]
 8005084:	2b30      	cmp	r3, #48	; 0x30
 8005086:	d107      	bne.n	8005098 <__cvt+0x74>
 8005088:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800508c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005090:	bf1c      	itt	ne
 8005092:	f1c4 0401 	rsbne	r4, r4, #1
 8005096:	6034      	strne	r4, [r6, #0]
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	441a      	add	r2, r3
 800509c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80050a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a4:	bf08      	it	eq
 80050a6:	9203      	streq	r2, [sp, #12]
 80050a8:	2130      	movs	r1, #48	; 0x30
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d307      	bcc.n	80050c0 <__cvt+0x9c>
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050b4:	1a1b      	subs	r3, r3, r0
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	b005      	add	sp, #20
 80050ba:	ecbd 8b02 	vpop	{d8}
 80050be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c0:	1c5c      	adds	r4, r3, #1
 80050c2:	9403      	str	r4, [sp, #12]
 80050c4:	7019      	strb	r1, [r3, #0]
 80050c6:	e7f0      	b.n	80050aa <__cvt+0x86>

080050c8 <__exponent>:
 80050c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ca:	4603      	mov	r3, r0
 80050cc:	2900      	cmp	r1, #0
 80050ce:	bfb8      	it	lt
 80050d0:	4249      	neglt	r1, r1
 80050d2:	f803 2b02 	strb.w	r2, [r3], #2
 80050d6:	bfb4      	ite	lt
 80050d8:	222d      	movlt	r2, #45	; 0x2d
 80050da:	222b      	movge	r2, #43	; 0x2b
 80050dc:	2909      	cmp	r1, #9
 80050de:	7042      	strb	r2, [r0, #1]
 80050e0:	dd2a      	ble.n	8005138 <__exponent+0x70>
 80050e2:	f10d 0207 	add.w	r2, sp, #7
 80050e6:	4617      	mov	r7, r2
 80050e8:	260a      	movs	r6, #10
 80050ea:	4694      	mov	ip, r2
 80050ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80050f0:	fb06 1415 	mls	r4, r6, r5, r1
 80050f4:	3430      	adds	r4, #48	; 0x30
 80050f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80050fa:	460c      	mov	r4, r1
 80050fc:	2c63      	cmp	r4, #99	; 0x63
 80050fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8005102:	4629      	mov	r1, r5
 8005104:	dcf1      	bgt.n	80050ea <__exponent+0x22>
 8005106:	3130      	adds	r1, #48	; 0x30
 8005108:	f1ac 0402 	sub.w	r4, ip, #2
 800510c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005110:	1c41      	adds	r1, r0, #1
 8005112:	4622      	mov	r2, r4
 8005114:	42ba      	cmp	r2, r7
 8005116:	d30a      	bcc.n	800512e <__exponent+0x66>
 8005118:	f10d 0209 	add.w	r2, sp, #9
 800511c:	eba2 020c 	sub.w	r2, r2, ip
 8005120:	42bc      	cmp	r4, r7
 8005122:	bf88      	it	hi
 8005124:	2200      	movhi	r2, #0
 8005126:	4413      	add	r3, r2
 8005128:	1a18      	subs	r0, r3, r0
 800512a:	b003      	add	sp, #12
 800512c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800512e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005132:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005136:	e7ed      	b.n	8005114 <__exponent+0x4c>
 8005138:	2330      	movs	r3, #48	; 0x30
 800513a:	3130      	adds	r1, #48	; 0x30
 800513c:	7083      	strb	r3, [r0, #2]
 800513e:	70c1      	strb	r1, [r0, #3]
 8005140:	1d03      	adds	r3, r0, #4
 8005142:	e7f1      	b.n	8005128 <__exponent+0x60>
 8005144:	0000      	movs	r0, r0
	...

08005148 <_printf_float>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	b08b      	sub	sp, #44	; 0x2c
 800514e:	460c      	mov	r4, r1
 8005150:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005154:	4616      	mov	r6, r2
 8005156:	461f      	mov	r7, r3
 8005158:	4605      	mov	r5, r0
 800515a:	f000 fccd 	bl	8005af8 <_localeconv_r>
 800515e:	f8d0 b000 	ldr.w	fp, [r0]
 8005162:	4658      	mov	r0, fp
 8005164:	f7fb f8bc 	bl	80002e0 <strlen>
 8005168:	2300      	movs	r3, #0
 800516a:	9308      	str	r3, [sp, #32]
 800516c:	f8d8 3000 	ldr.w	r3, [r8]
 8005170:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	3307      	adds	r3, #7
 8005178:	f023 0307 	bic.w	r3, r3, #7
 800517c:	f103 0108 	add.w	r1, r3, #8
 8005180:	f8c8 1000 	str.w	r1, [r8]
 8005184:	ed93 0b00 	vldr	d0, [r3]
 8005188:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80053e8 <_printf_float+0x2a0>
 800518c:	eeb0 7bc0 	vabs.f64	d7, d0
 8005190:	eeb4 7b46 	vcmp.f64	d7, d6
 8005194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005198:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800519c:	4682      	mov	sl, r0
 800519e:	dd24      	ble.n	80051ea <_printf_float+0xa2>
 80051a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	d502      	bpl.n	80051b0 <_printf_float+0x68>
 80051aa:	232d      	movs	r3, #45	; 0x2d
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b0:	498f      	ldr	r1, [pc, #572]	; (80053f0 <_printf_float+0x2a8>)
 80051b2:	4b90      	ldr	r3, [pc, #576]	; (80053f4 <_printf_float+0x2ac>)
 80051b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80051b8:	bf94      	ite	ls
 80051ba:	4688      	movls	r8, r1
 80051bc:	4698      	movhi	r8, r3
 80051be:	2303      	movs	r3, #3
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	f022 0204 	bic.w	r2, r2, #4
 80051c6:	2300      	movs	r3, #0
 80051c8:	6022      	str	r2, [r4, #0]
 80051ca:	9304      	str	r3, [sp, #16]
 80051cc:	9700      	str	r7, [sp, #0]
 80051ce:	4633      	mov	r3, r6
 80051d0:	aa09      	add	r2, sp, #36	; 0x24
 80051d2:	4621      	mov	r1, r4
 80051d4:	4628      	mov	r0, r5
 80051d6:	f000 f9d1 	bl	800557c <_printf_common>
 80051da:	3001      	adds	r0, #1
 80051dc:	f040 808a 	bne.w	80052f4 <_printf_float+0x1ac>
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	b00b      	add	sp, #44	; 0x2c
 80051e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80051ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f2:	d709      	bvc.n	8005208 <_printf_float+0xc0>
 80051f4:	ee10 3a90 	vmov	r3, s1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bfbc      	itt	lt
 80051fc:	232d      	movlt	r3, #45	; 0x2d
 80051fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005202:	497d      	ldr	r1, [pc, #500]	; (80053f8 <_printf_float+0x2b0>)
 8005204:	4b7d      	ldr	r3, [pc, #500]	; (80053fc <_printf_float+0x2b4>)
 8005206:	e7d5      	b.n	80051b4 <_printf_float+0x6c>
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800520e:	9104      	str	r1, [sp, #16]
 8005210:	1c59      	adds	r1, r3, #1
 8005212:	d13c      	bne.n	800528e <_printf_float+0x146>
 8005214:	2306      	movs	r3, #6
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	2300      	movs	r3, #0
 800521a:	9303      	str	r3, [sp, #12]
 800521c:	ab08      	add	r3, sp, #32
 800521e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005222:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005226:	ab07      	add	r3, sp, #28
 8005228:	6861      	ldr	r1, [r4, #4]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	f10d 031b 	add.w	r3, sp, #27
 8005232:	4628      	mov	r0, r5
 8005234:	f7ff fef6 	bl	8005024 <__cvt>
 8005238:	9b04      	ldr	r3, [sp, #16]
 800523a:	9907      	ldr	r1, [sp, #28]
 800523c:	2b47      	cmp	r3, #71	; 0x47
 800523e:	4680      	mov	r8, r0
 8005240:	d108      	bne.n	8005254 <_printf_float+0x10c>
 8005242:	1cc8      	adds	r0, r1, #3
 8005244:	db02      	blt.n	800524c <_printf_float+0x104>
 8005246:	6863      	ldr	r3, [r4, #4]
 8005248:	4299      	cmp	r1, r3
 800524a:	dd41      	ble.n	80052d0 <_printf_float+0x188>
 800524c:	f1a9 0902 	sub.w	r9, r9, #2
 8005250:	fa5f f989 	uxtb.w	r9, r9
 8005254:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005258:	d820      	bhi.n	800529c <_printf_float+0x154>
 800525a:	3901      	subs	r1, #1
 800525c:	464a      	mov	r2, r9
 800525e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005262:	9107      	str	r1, [sp, #28]
 8005264:	f7ff ff30 	bl	80050c8 <__exponent>
 8005268:	9a08      	ldr	r2, [sp, #32]
 800526a:	9004      	str	r0, [sp, #16]
 800526c:	1813      	adds	r3, r2, r0
 800526e:	2a01      	cmp	r2, #1
 8005270:	6123      	str	r3, [r4, #16]
 8005272:	dc02      	bgt.n	800527a <_printf_float+0x132>
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	07d2      	lsls	r2, r2, #31
 8005278:	d501      	bpl.n	800527e <_printf_float+0x136>
 800527a:	3301      	adds	r3, #1
 800527c:	6123      	str	r3, [r4, #16]
 800527e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0a2      	beq.n	80051cc <_printf_float+0x84>
 8005286:	232d      	movs	r3, #45	; 0x2d
 8005288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800528c:	e79e      	b.n	80051cc <_printf_float+0x84>
 800528e:	9904      	ldr	r1, [sp, #16]
 8005290:	2947      	cmp	r1, #71	; 0x47
 8005292:	d1c1      	bne.n	8005218 <_printf_float+0xd0>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1bf      	bne.n	8005218 <_printf_float+0xd0>
 8005298:	2301      	movs	r3, #1
 800529a:	e7bc      	b.n	8005216 <_printf_float+0xce>
 800529c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052a0:	d118      	bne.n	80052d4 <_printf_float+0x18c>
 80052a2:	2900      	cmp	r1, #0
 80052a4:	6863      	ldr	r3, [r4, #4]
 80052a6:	dd0b      	ble.n	80052c0 <_printf_float+0x178>
 80052a8:	6121      	str	r1, [r4, #16]
 80052aa:	b913      	cbnz	r3, 80052b2 <_printf_float+0x16a>
 80052ac:	6822      	ldr	r2, [r4, #0]
 80052ae:	07d0      	lsls	r0, r2, #31
 80052b0:	d502      	bpl.n	80052b8 <_printf_float+0x170>
 80052b2:	3301      	adds	r3, #1
 80052b4:	440b      	add	r3, r1
 80052b6:	6123      	str	r3, [r4, #16]
 80052b8:	2300      	movs	r3, #0
 80052ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80052bc:	9304      	str	r3, [sp, #16]
 80052be:	e7de      	b.n	800527e <_printf_float+0x136>
 80052c0:	b913      	cbnz	r3, 80052c8 <_printf_float+0x180>
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	07d2      	lsls	r2, r2, #31
 80052c6:	d501      	bpl.n	80052cc <_printf_float+0x184>
 80052c8:	3302      	adds	r3, #2
 80052ca:	e7f4      	b.n	80052b6 <_printf_float+0x16e>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e7f2      	b.n	80052b6 <_printf_float+0x16e>
 80052d0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80052d4:	9b08      	ldr	r3, [sp, #32]
 80052d6:	4299      	cmp	r1, r3
 80052d8:	db05      	blt.n	80052e6 <_printf_float+0x19e>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	6121      	str	r1, [r4, #16]
 80052de:	07d8      	lsls	r0, r3, #31
 80052e0:	d5ea      	bpl.n	80052b8 <_printf_float+0x170>
 80052e2:	1c4b      	adds	r3, r1, #1
 80052e4:	e7e7      	b.n	80052b6 <_printf_float+0x16e>
 80052e6:	2900      	cmp	r1, #0
 80052e8:	bfd4      	ite	le
 80052ea:	f1c1 0202 	rsble	r2, r1, #2
 80052ee:	2201      	movgt	r2, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	e7e0      	b.n	80052b6 <_printf_float+0x16e>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	055a      	lsls	r2, r3, #21
 80052f8:	d407      	bmi.n	800530a <_printf_float+0x1c2>
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	4642      	mov	r2, r8
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	47b8      	blx	r7
 8005304:	3001      	adds	r0, #1
 8005306:	d12a      	bne.n	800535e <_printf_float+0x216>
 8005308:	e76a      	b.n	80051e0 <_printf_float+0x98>
 800530a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800530e:	f240 80e0 	bls.w	80054d2 <_printf_float+0x38a>
 8005312:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005316:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531e:	d133      	bne.n	8005388 <_printf_float+0x240>
 8005320:	4a37      	ldr	r2, [pc, #220]	; (8005400 <_printf_float+0x2b8>)
 8005322:	2301      	movs	r3, #1
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	47b8      	blx	r7
 800532a:	3001      	adds	r0, #1
 800532c:	f43f af58 	beq.w	80051e0 <_printf_float+0x98>
 8005330:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005334:	429a      	cmp	r2, r3
 8005336:	db02      	blt.n	800533e <_printf_float+0x1f6>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	07d8      	lsls	r0, r3, #31
 800533c:	d50f      	bpl.n	800535e <_printf_float+0x216>
 800533e:	4653      	mov	r3, sl
 8005340:	465a      	mov	r2, fp
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	f43f af49 	beq.w	80051e0 <_printf_float+0x98>
 800534e:	f04f 0800 	mov.w	r8, #0
 8005352:	f104 091a 	add.w	r9, r4, #26
 8005356:	9b08      	ldr	r3, [sp, #32]
 8005358:	3b01      	subs	r3, #1
 800535a:	4543      	cmp	r3, r8
 800535c:	dc09      	bgt.n	8005372 <_printf_float+0x22a>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	079b      	lsls	r3, r3, #30
 8005362:	f100 8106 	bmi.w	8005572 <_printf_float+0x42a>
 8005366:	68e0      	ldr	r0, [r4, #12]
 8005368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536a:	4298      	cmp	r0, r3
 800536c:	bfb8      	it	lt
 800536e:	4618      	movlt	r0, r3
 8005370:	e738      	b.n	80051e4 <_printf_float+0x9c>
 8005372:	2301      	movs	r3, #1
 8005374:	464a      	mov	r2, r9
 8005376:	4631      	mov	r1, r6
 8005378:	4628      	mov	r0, r5
 800537a:	47b8      	blx	r7
 800537c:	3001      	adds	r0, #1
 800537e:	f43f af2f 	beq.w	80051e0 <_printf_float+0x98>
 8005382:	f108 0801 	add.w	r8, r8, #1
 8005386:	e7e6      	b.n	8005356 <_printf_float+0x20e>
 8005388:	9b07      	ldr	r3, [sp, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dc3a      	bgt.n	8005404 <_printf_float+0x2bc>
 800538e:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <_printf_float+0x2b8>)
 8005390:	2301      	movs	r3, #1
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	f43f af21 	beq.w	80051e0 <_printf_float+0x98>
 800539e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	d102      	bne.n	80053ac <_printf_float+0x264>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	07d9      	lsls	r1, r3, #31
 80053aa:	d5d8      	bpl.n	800535e <_printf_float+0x216>
 80053ac:	4653      	mov	r3, sl
 80053ae:	465a      	mov	r2, fp
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	f43f af12 	beq.w	80051e0 <_printf_float+0x98>
 80053bc:	f04f 0900 	mov.w	r9, #0
 80053c0:	f104 0a1a 	add.w	sl, r4, #26
 80053c4:	9b07      	ldr	r3, [sp, #28]
 80053c6:	425b      	negs	r3, r3
 80053c8:	454b      	cmp	r3, r9
 80053ca:	dc01      	bgt.n	80053d0 <_printf_float+0x288>
 80053cc:	9b08      	ldr	r3, [sp, #32]
 80053ce:	e795      	b.n	80052fc <_printf_float+0x1b4>
 80053d0:	2301      	movs	r3, #1
 80053d2:	4652      	mov	r2, sl
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	47b8      	blx	r7
 80053da:	3001      	adds	r0, #1
 80053dc:	f43f af00 	beq.w	80051e0 <_printf_float+0x98>
 80053e0:	f109 0901 	add.w	r9, r9, #1
 80053e4:	e7ee      	b.n	80053c4 <_printf_float+0x27c>
 80053e6:	bf00      	nop
 80053e8:	ffffffff 	.word	0xffffffff
 80053ec:	7fefffff 	.word	0x7fefffff
 80053f0:	08007c38 	.word	0x08007c38
 80053f4:	08007c3c 	.word	0x08007c3c
 80053f8:	08007c40 	.word	0x08007c40
 80053fc:	08007c44 	.word	0x08007c44
 8005400:	08007c48 	.word	0x08007c48
 8005404:	9a08      	ldr	r2, [sp, #32]
 8005406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005408:	429a      	cmp	r2, r3
 800540a:	bfa8      	it	ge
 800540c:	461a      	movge	r2, r3
 800540e:	2a00      	cmp	r2, #0
 8005410:	4691      	mov	r9, r2
 8005412:	dc38      	bgt.n	8005486 <_printf_float+0x33e>
 8005414:	2300      	movs	r3, #0
 8005416:	9305      	str	r3, [sp, #20]
 8005418:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800541c:	f104 021a 	add.w	r2, r4, #26
 8005420:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005422:	9905      	ldr	r1, [sp, #20]
 8005424:	9304      	str	r3, [sp, #16]
 8005426:	eba3 0309 	sub.w	r3, r3, r9
 800542a:	428b      	cmp	r3, r1
 800542c:	dc33      	bgt.n	8005496 <_printf_float+0x34e>
 800542e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005432:	429a      	cmp	r2, r3
 8005434:	db3c      	blt.n	80054b0 <_printf_float+0x368>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	07da      	lsls	r2, r3, #31
 800543a:	d439      	bmi.n	80054b0 <_printf_float+0x368>
 800543c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005440:	eba2 0903 	sub.w	r9, r2, r3
 8005444:	9b04      	ldr	r3, [sp, #16]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	4591      	cmp	r9, r2
 800544a:	bfa8      	it	ge
 800544c:	4691      	movge	r9, r2
 800544e:	f1b9 0f00 	cmp.w	r9, #0
 8005452:	dc35      	bgt.n	80054c0 <_printf_float+0x378>
 8005454:	f04f 0800 	mov.w	r8, #0
 8005458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800545c:	f104 0a1a 	add.w	sl, r4, #26
 8005460:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	eba3 0309 	sub.w	r3, r3, r9
 800546a:	4543      	cmp	r3, r8
 800546c:	f77f af77 	ble.w	800535e <_printf_float+0x216>
 8005470:	2301      	movs	r3, #1
 8005472:	4652      	mov	r2, sl
 8005474:	4631      	mov	r1, r6
 8005476:	4628      	mov	r0, r5
 8005478:	47b8      	blx	r7
 800547a:	3001      	adds	r0, #1
 800547c:	f43f aeb0 	beq.w	80051e0 <_printf_float+0x98>
 8005480:	f108 0801 	add.w	r8, r8, #1
 8005484:	e7ec      	b.n	8005460 <_printf_float+0x318>
 8005486:	4613      	mov	r3, r2
 8005488:	4631      	mov	r1, r6
 800548a:	4642      	mov	r2, r8
 800548c:	4628      	mov	r0, r5
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	d1bf      	bne.n	8005414 <_printf_float+0x2cc>
 8005494:	e6a4      	b.n	80051e0 <_printf_float+0x98>
 8005496:	2301      	movs	r3, #1
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	9204      	str	r2, [sp, #16]
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f ae9d 	beq.w	80051e0 <_printf_float+0x98>
 80054a6:	9b05      	ldr	r3, [sp, #20]
 80054a8:	9a04      	ldr	r2, [sp, #16]
 80054aa:	3301      	adds	r3, #1
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	e7b7      	b.n	8005420 <_printf_float+0x2d8>
 80054b0:	4653      	mov	r3, sl
 80054b2:	465a      	mov	r2, fp
 80054b4:	4631      	mov	r1, r6
 80054b6:	4628      	mov	r0, r5
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	d1be      	bne.n	800543c <_printf_float+0x2f4>
 80054be:	e68f      	b.n	80051e0 <_printf_float+0x98>
 80054c0:	9a04      	ldr	r2, [sp, #16]
 80054c2:	464b      	mov	r3, r9
 80054c4:	4442      	add	r2, r8
 80054c6:	4631      	mov	r1, r6
 80054c8:	4628      	mov	r0, r5
 80054ca:	47b8      	blx	r7
 80054cc:	3001      	adds	r0, #1
 80054ce:	d1c1      	bne.n	8005454 <_printf_float+0x30c>
 80054d0:	e686      	b.n	80051e0 <_printf_float+0x98>
 80054d2:	9a08      	ldr	r2, [sp, #32]
 80054d4:	2a01      	cmp	r2, #1
 80054d6:	dc01      	bgt.n	80054dc <_printf_float+0x394>
 80054d8:	07db      	lsls	r3, r3, #31
 80054da:	d537      	bpl.n	800554c <_printf_float+0x404>
 80054dc:	2301      	movs	r3, #1
 80054de:	4642      	mov	r2, r8
 80054e0:	4631      	mov	r1, r6
 80054e2:	4628      	mov	r0, r5
 80054e4:	47b8      	blx	r7
 80054e6:	3001      	adds	r0, #1
 80054e8:	f43f ae7a 	beq.w	80051e0 <_printf_float+0x98>
 80054ec:	4653      	mov	r3, sl
 80054ee:	465a      	mov	r2, fp
 80054f0:	4631      	mov	r1, r6
 80054f2:	4628      	mov	r0, r5
 80054f4:	47b8      	blx	r7
 80054f6:	3001      	adds	r0, #1
 80054f8:	f43f ae72 	beq.w	80051e0 <_printf_float+0x98>
 80054fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005500:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	9b08      	ldr	r3, [sp, #32]
 800550a:	d01a      	beq.n	8005542 <_printf_float+0x3fa>
 800550c:	3b01      	subs	r3, #1
 800550e:	f108 0201 	add.w	r2, r8, #1
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	47b8      	blx	r7
 8005518:	3001      	adds	r0, #1
 800551a:	d10e      	bne.n	800553a <_printf_float+0x3f2>
 800551c:	e660      	b.n	80051e0 <_printf_float+0x98>
 800551e:	2301      	movs	r3, #1
 8005520:	464a      	mov	r2, r9
 8005522:	4631      	mov	r1, r6
 8005524:	4628      	mov	r0, r5
 8005526:	47b8      	blx	r7
 8005528:	3001      	adds	r0, #1
 800552a:	f43f ae59 	beq.w	80051e0 <_printf_float+0x98>
 800552e:	f108 0801 	add.w	r8, r8, #1
 8005532:	9b08      	ldr	r3, [sp, #32]
 8005534:	3b01      	subs	r3, #1
 8005536:	4543      	cmp	r3, r8
 8005538:	dcf1      	bgt.n	800551e <_printf_float+0x3d6>
 800553a:	9b04      	ldr	r3, [sp, #16]
 800553c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005540:	e6dd      	b.n	80052fe <_printf_float+0x1b6>
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	f104 091a 	add.w	r9, r4, #26
 800554a:	e7f2      	b.n	8005532 <_printf_float+0x3ea>
 800554c:	2301      	movs	r3, #1
 800554e:	4642      	mov	r2, r8
 8005550:	e7df      	b.n	8005512 <_printf_float+0x3ca>
 8005552:	2301      	movs	r3, #1
 8005554:	464a      	mov	r2, r9
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f ae3f 	beq.w	80051e0 <_printf_float+0x98>
 8005562:	f108 0801 	add.w	r8, r8, #1
 8005566:	68e3      	ldr	r3, [r4, #12]
 8005568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800556a:	1a5b      	subs	r3, r3, r1
 800556c:	4543      	cmp	r3, r8
 800556e:	dcf0      	bgt.n	8005552 <_printf_float+0x40a>
 8005570:	e6f9      	b.n	8005366 <_printf_float+0x21e>
 8005572:	f04f 0800 	mov.w	r8, #0
 8005576:	f104 0919 	add.w	r9, r4, #25
 800557a:	e7f4      	b.n	8005566 <_printf_float+0x41e>

0800557c <_printf_common>:
 800557c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005580:	4616      	mov	r6, r2
 8005582:	4699      	mov	r9, r3
 8005584:	688a      	ldr	r2, [r1, #8]
 8005586:	690b      	ldr	r3, [r1, #16]
 8005588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800558c:	4293      	cmp	r3, r2
 800558e:	bfb8      	it	lt
 8005590:	4613      	movlt	r3, r2
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005598:	4607      	mov	r7, r0
 800559a:	460c      	mov	r4, r1
 800559c:	b10a      	cbz	r2, 80055a2 <_printf_common+0x26>
 800559e:	3301      	adds	r3, #1
 80055a0:	6033      	str	r3, [r6, #0]
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	0699      	lsls	r1, r3, #26
 80055a6:	bf42      	ittt	mi
 80055a8:	6833      	ldrmi	r3, [r6, #0]
 80055aa:	3302      	addmi	r3, #2
 80055ac:	6033      	strmi	r3, [r6, #0]
 80055ae:	6825      	ldr	r5, [r4, #0]
 80055b0:	f015 0506 	ands.w	r5, r5, #6
 80055b4:	d106      	bne.n	80055c4 <_printf_common+0x48>
 80055b6:	f104 0a19 	add.w	sl, r4, #25
 80055ba:	68e3      	ldr	r3, [r4, #12]
 80055bc:	6832      	ldr	r2, [r6, #0]
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	dc26      	bgt.n	8005612 <_printf_common+0x96>
 80055c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055c8:	1e13      	subs	r3, r2, #0
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	bf18      	it	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	0692      	lsls	r2, r2, #26
 80055d2:	d42b      	bmi.n	800562c <_printf_common+0xb0>
 80055d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055d8:	4649      	mov	r1, r9
 80055da:	4638      	mov	r0, r7
 80055dc:	47c0      	blx	r8
 80055de:	3001      	adds	r0, #1
 80055e0:	d01e      	beq.n	8005620 <_printf_common+0xa4>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	6922      	ldr	r2, [r4, #16]
 80055e6:	f003 0306 	and.w	r3, r3, #6
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	bf02      	ittt	eq
 80055ee:	68e5      	ldreq	r5, [r4, #12]
 80055f0:	6833      	ldreq	r3, [r6, #0]
 80055f2:	1aed      	subeq	r5, r5, r3
 80055f4:	68a3      	ldr	r3, [r4, #8]
 80055f6:	bf0c      	ite	eq
 80055f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055fc:	2500      	movne	r5, #0
 80055fe:	4293      	cmp	r3, r2
 8005600:	bfc4      	itt	gt
 8005602:	1a9b      	subgt	r3, r3, r2
 8005604:	18ed      	addgt	r5, r5, r3
 8005606:	2600      	movs	r6, #0
 8005608:	341a      	adds	r4, #26
 800560a:	42b5      	cmp	r5, r6
 800560c:	d11a      	bne.n	8005644 <_printf_common+0xc8>
 800560e:	2000      	movs	r0, #0
 8005610:	e008      	b.n	8005624 <_printf_common+0xa8>
 8005612:	2301      	movs	r3, #1
 8005614:	4652      	mov	r2, sl
 8005616:	4649      	mov	r1, r9
 8005618:	4638      	mov	r0, r7
 800561a:	47c0      	blx	r8
 800561c:	3001      	adds	r0, #1
 800561e:	d103      	bne.n	8005628 <_printf_common+0xac>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	3501      	adds	r5, #1
 800562a:	e7c6      	b.n	80055ba <_printf_common+0x3e>
 800562c:	18e1      	adds	r1, r4, r3
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	2030      	movs	r0, #48	; 0x30
 8005632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005636:	4422      	add	r2, r4
 8005638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800563c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005640:	3302      	adds	r3, #2
 8005642:	e7c7      	b.n	80055d4 <_printf_common+0x58>
 8005644:	2301      	movs	r3, #1
 8005646:	4622      	mov	r2, r4
 8005648:	4649      	mov	r1, r9
 800564a:	4638      	mov	r0, r7
 800564c:	47c0      	blx	r8
 800564e:	3001      	adds	r0, #1
 8005650:	d0e6      	beq.n	8005620 <_printf_common+0xa4>
 8005652:	3601      	adds	r6, #1
 8005654:	e7d9      	b.n	800560a <_printf_common+0x8e>
	...

08005658 <_printf_i>:
 8005658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800565c:	7e0f      	ldrb	r7, [r1, #24]
 800565e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005660:	2f78      	cmp	r7, #120	; 0x78
 8005662:	4691      	mov	r9, r2
 8005664:	4680      	mov	r8, r0
 8005666:	460c      	mov	r4, r1
 8005668:	469a      	mov	sl, r3
 800566a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800566e:	d807      	bhi.n	8005680 <_printf_i+0x28>
 8005670:	2f62      	cmp	r7, #98	; 0x62
 8005672:	d80a      	bhi.n	800568a <_printf_i+0x32>
 8005674:	2f00      	cmp	r7, #0
 8005676:	f000 80d4 	beq.w	8005822 <_printf_i+0x1ca>
 800567a:	2f58      	cmp	r7, #88	; 0x58
 800567c:	f000 80c0 	beq.w	8005800 <_printf_i+0x1a8>
 8005680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005688:	e03a      	b.n	8005700 <_printf_i+0xa8>
 800568a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800568e:	2b15      	cmp	r3, #21
 8005690:	d8f6      	bhi.n	8005680 <_printf_i+0x28>
 8005692:	a101      	add	r1, pc, #4	; (adr r1, 8005698 <_printf_i+0x40>)
 8005694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005698:	080056f1 	.word	0x080056f1
 800569c:	08005705 	.word	0x08005705
 80056a0:	08005681 	.word	0x08005681
 80056a4:	08005681 	.word	0x08005681
 80056a8:	08005681 	.word	0x08005681
 80056ac:	08005681 	.word	0x08005681
 80056b0:	08005705 	.word	0x08005705
 80056b4:	08005681 	.word	0x08005681
 80056b8:	08005681 	.word	0x08005681
 80056bc:	08005681 	.word	0x08005681
 80056c0:	08005681 	.word	0x08005681
 80056c4:	08005809 	.word	0x08005809
 80056c8:	08005731 	.word	0x08005731
 80056cc:	080057c3 	.word	0x080057c3
 80056d0:	08005681 	.word	0x08005681
 80056d4:	08005681 	.word	0x08005681
 80056d8:	0800582b 	.word	0x0800582b
 80056dc:	08005681 	.word	0x08005681
 80056e0:	08005731 	.word	0x08005731
 80056e4:	08005681 	.word	0x08005681
 80056e8:	08005681 	.word	0x08005681
 80056ec:	080057cb 	.word	0x080057cb
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	602a      	str	r2, [r5, #0]
 80056f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005700:	2301      	movs	r3, #1
 8005702:	e09f      	b.n	8005844 <_printf_i+0x1ec>
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	0607      	lsls	r7, r0, #24
 800570a:	f103 0104 	add.w	r1, r3, #4
 800570e:	6029      	str	r1, [r5, #0]
 8005710:	d501      	bpl.n	8005716 <_printf_i+0xbe>
 8005712:	681e      	ldr	r6, [r3, #0]
 8005714:	e003      	b.n	800571e <_printf_i+0xc6>
 8005716:	0646      	lsls	r6, r0, #25
 8005718:	d5fb      	bpl.n	8005712 <_printf_i+0xba>
 800571a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800571e:	2e00      	cmp	r6, #0
 8005720:	da03      	bge.n	800572a <_printf_i+0xd2>
 8005722:	232d      	movs	r3, #45	; 0x2d
 8005724:	4276      	negs	r6, r6
 8005726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572a:	485a      	ldr	r0, [pc, #360]	; (8005894 <_printf_i+0x23c>)
 800572c:	230a      	movs	r3, #10
 800572e:	e012      	b.n	8005756 <_printf_i+0xfe>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	1d19      	adds	r1, r3, #4
 8005736:	6029      	str	r1, [r5, #0]
 8005738:	0605      	lsls	r5, r0, #24
 800573a:	d501      	bpl.n	8005740 <_printf_i+0xe8>
 800573c:	681e      	ldr	r6, [r3, #0]
 800573e:	e002      	b.n	8005746 <_printf_i+0xee>
 8005740:	0641      	lsls	r1, r0, #25
 8005742:	d5fb      	bpl.n	800573c <_printf_i+0xe4>
 8005744:	881e      	ldrh	r6, [r3, #0]
 8005746:	4853      	ldr	r0, [pc, #332]	; (8005894 <_printf_i+0x23c>)
 8005748:	2f6f      	cmp	r7, #111	; 0x6f
 800574a:	bf0c      	ite	eq
 800574c:	2308      	moveq	r3, #8
 800574e:	230a      	movne	r3, #10
 8005750:	2100      	movs	r1, #0
 8005752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005756:	6865      	ldr	r5, [r4, #4]
 8005758:	60a5      	str	r5, [r4, #8]
 800575a:	2d00      	cmp	r5, #0
 800575c:	bfa2      	ittt	ge
 800575e:	6821      	ldrge	r1, [r4, #0]
 8005760:	f021 0104 	bicge.w	r1, r1, #4
 8005764:	6021      	strge	r1, [r4, #0]
 8005766:	b90e      	cbnz	r6, 800576c <_printf_i+0x114>
 8005768:	2d00      	cmp	r5, #0
 800576a:	d04b      	beq.n	8005804 <_printf_i+0x1ac>
 800576c:	4615      	mov	r5, r2
 800576e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005772:	fb03 6711 	mls	r7, r3, r1, r6
 8005776:	5dc7      	ldrb	r7, [r0, r7]
 8005778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800577c:	4637      	mov	r7, r6
 800577e:	42bb      	cmp	r3, r7
 8005780:	460e      	mov	r6, r1
 8005782:	d9f4      	bls.n	800576e <_printf_i+0x116>
 8005784:	2b08      	cmp	r3, #8
 8005786:	d10b      	bne.n	80057a0 <_printf_i+0x148>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	07de      	lsls	r6, r3, #31
 800578c:	d508      	bpl.n	80057a0 <_printf_i+0x148>
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	6861      	ldr	r1, [r4, #4]
 8005792:	4299      	cmp	r1, r3
 8005794:	bfde      	ittt	le
 8005796:	2330      	movle	r3, #48	; 0x30
 8005798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800579c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057a0:	1b52      	subs	r2, r2, r5
 80057a2:	6122      	str	r2, [r4, #16]
 80057a4:	f8cd a000 	str.w	sl, [sp]
 80057a8:	464b      	mov	r3, r9
 80057aa:	aa03      	add	r2, sp, #12
 80057ac:	4621      	mov	r1, r4
 80057ae:	4640      	mov	r0, r8
 80057b0:	f7ff fee4 	bl	800557c <_printf_common>
 80057b4:	3001      	adds	r0, #1
 80057b6:	d14a      	bne.n	800584e <_printf_i+0x1f6>
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	b004      	add	sp, #16
 80057be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	f043 0320 	orr.w	r3, r3, #32
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	4833      	ldr	r0, [pc, #204]	; (8005898 <_printf_i+0x240>)
 80057cc:	2778      	movs	r7, #120	; 0x78
 80057ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	6829      	ldr	r1, [r5, #0]
 80057d6:	061f      	lsls	r7, r3, #24
 80057d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80057dc:	d402      	bmi.n	80057e4 <_printf_i+0x18c>
 80057de:	065f      	lsls	r7, r3, #25
 80057e0:	bf48      	it	mi
 80057e2:	b2b6      	uxthmi	r6, r6
 80057e4:	07df      	lsls	r7, r3, #31
 80057e6:	bf48      	it	mi
 80057e8:	f043 0320 	orrmi.w	r3, r3, #32
 80057ec:	6029      	str	r1, [r5, #0]
 80057ee:	bf48      	it	mi
 80057f0:	6023      	strmi	r3, [r4, #0]
 80057f2:	b91e      	cbnz	r6, 80057fc <_printf_i+0x1a4>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	f023 0320 	bic.w	r3, r3, #32
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	2310      	movs	r3, #16
 80057fe:	e7a7      	b.n	8005750 <_printf_i+0xf8>
 8005800:	4824      	ldr	r0, [pc, #144]	; (8005894 <_printf_i+0x23c>)
 8005802:	e7e4      	b.n	80057ce <_printf_i+0x176>
 8005804:	4615      	mov	r5, r2
 8005806:	e7bd      	b.n	8005784 <_printf_i+0x12c>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	6826      	ldr	r6, [r4, #0]
 800580c:	6961      	ldr	r1, [r4, #20]
 800580e:	1d18      	adds	r0, r3, #4
 8005810:	6028      	str	r0, [r5, #0]
 8005812:	0635      	lsls	r5, r6, #24
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	d501      	bpl.n	800581c <_printf_i+0x1c4>
 8005818:	6019      	str	r1, [r3, #0]
 800581a:	e002      	b.n	8005822 <_printf_i+0x1ca>
 800581c:	0670      	lsls	r0, r6, #25
 800581e:	d5fb      	bpl.n	8005818 <_printf_i+0x1c0>
 8005820:	8019      	strh	r1, [r3, #0]
 8005822:	2300      	movs	r3, #0
 8005824:	6123      	str	r3, [r4, #16]
 8005826:	4615      	mov	r5, r2
 8005828:	e7bc      	b.n	80057a4 <_printf_i+0x14c>
 800582a:	682b      	ldr	r3, [r5, #0]
 800582c:	1d1a      	adds	r2, r3, #4
 800582e:	602a      	str	r2, [r5, #0]
 8005830:	681d      	ldr	r5, [r3, #0]
 8005832:	6862      	ldr	r2, [r4, #4]
 8005834:	2100      	movs	r1, #0
 8005836:	4628      	mov	r0, r5
 8005838:	f7fa fd02 	bl	8000240 <memchr>
 800583c:	b108      	cbz	r0, 8005842 <_printf_i+0x1ea>
 800583e:	1b40      	subs	r0, r0, r5
 8005840:	6060      	str	r0, [r4, #4]
 8005842:	6863      	ldr	r3, [r4, #4]
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	2300      	movs	r3, #0
 8005848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800584c:	e7aa      	b.n	80057a4 <_printf_i+0x14c>
 800584e:	6923      	ldr	r3, [r4, #16]
 8005850:	462a      	mov	r2, r5
 8005852:	4649      	mov	r1, r9
 8005854:	4640      	mov	r0, r8
 8005856:	47d0      	blx	sl
 8005858:	3001      	adds	r0, #1
 800585a:	d0ad      	beq.n	80057b8 <_printf_i+0x160>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	079b      	lsls	r3, r3, #30
 8005860:	d413      	bmi.n	800588a <_printf_i+0x232>
 8005862:	68e0      	ldr	r0, [r4, #12]
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	4298      	cmp	r0, r3
 8005868:	bfb8      	it	lt
 800586a:	4618      	movlt	r0, r3
 800586c:	e7a6      	b.n	80057bc <_printf_i+0x164>
 800586e:	2301      	movs	r3, #1
 8005870:	4632      	mov	r2, r6
 8005872:	4649      	mov	r1, r9
 8005874:	4640      	mov	r0, r8
 8005876:	47d0      	blx	sl
 8005878:	3001      	adds	r0, #1
 800587a:	d09d      	beq.n	80057b8 <_printf_i+0x160>
 800587c:	3501      	adds	r5, #1
 800587e:	68e3      	ldr	r3, [r4, #12]
 8005880:	9903      	ldr	r1, [sp, #12]
 8005882:	1a5b      	subs	r3, r3, r1
 8005884:	42ab      	cmp	r3, r5
 8005886:	dcf2      	bgt.n	800586e <_printf_i+0x216>
 8005888:	e7eb      	b.n	8005862 <_printf_i+0x20a>
 800588a:	2500      	movs	r5, #0
 800588c:	f104 0619 	add.w	r6, r4, #25
 8005890:	e7f5      	b.n	800587e <_printf_i+0x226>
 8005892:	bf00      	nop
 8005894:	08007c4a 	.word	0x08007c4a
 8005898:	08007c5b 	.word	0x08007c5b

0800589c <std>:
 800589c:	2300      	movs	r3, #0
 800589e:	b510      	push	{r4, lr}
 80058a0:	4604      	mov	r4, r0
 80058a2:	e9c0 3300 	strd	r3, r3, [r0]
 80058a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058aa:	6083      	str	r3, [r0, #8]
 80058ac:	8181      	strh	r1, [r0, #12]
 80058ae:	6643      	str	r3, [r0, #100]	; 0x64
 80058b0:	81c2      	strh	r2, [r0, #14]
 80058b2:	6183      	str	r3, [r0, #24]
 80058b4:	4619      	mov	r1, r3
 80058b6:	2208      	movs	r2, #8
 80058b8:	305c      	adds	r0, #92	; 0x5c
 80058ba:	f000 f914 	bl	8005ae6 <memset>
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <std+0x58>)
 80058c0:	6263      	str	r3, [r4, #36]	; 0x24
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <std+0x5c>)
 80058c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <std+0x60>)
 80058c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <std+0x64>)
 80058cc:	6323      	str	r3, [r4, #48]	; 0x30
 80058ce:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <std+0x68>)
 80058d0:	6224      	str	r4, [r4, #32]
 80058d2:	429c      	cmp	r4, r3
 80058d4:	d006      	beq.n	80058e4 <std+0x48>
 80058d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058da:	4294      	cmp	r4, r2
 80058dc:	d002      	beq.n	80058e4 <std+0x48>
 80058de:	33d0      	adds	r3, #208	; 0xd0
 80058e0:	429c      	cmp	r4, r3
 80058e2:	d105      	bne.n	80058f0 <std+0x54>
 80058e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ec:	f000 b978 	b.w	8005be0 <__retarget_lock_init_recursive>
 80058f0:	bd10      	pop	{r4, pc}
 80058f2:	bf00      	nop
 80058f4:	08005a61 	.word	0x08005a61
 80058f8:	08005a83 	.word	0x08005a83
 80058fc:	08005abb 	.word	0x08005abb
 8005900:	08005adf 	.word	0x08005adf
 8005904:	20000a2c 	.word	0x20000a2c

08005908 <stdio_exit_handler>:
 8005908:	4a02      	ldr	r2, [pc, #8]	; (8005914 <stdio_exit_handler+0xc>)
 800590a:	4903      	ldr	r1, [pc, #12]	; (8005918 <stdio_exit_handler+0x10>)
 800590c:	4803      	ldr	r0, [pc, #12]	; (800591c <stdio_exit_handler+0x14>)
 800590e:	f000 b869 	b.w	80059e4 <_fwalk_sglue>
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
 8005918:	08007485 	.word	0x08007485
 800591c:	20000018 	.word	0x20000018

08005920 <cleanup_stdio>:
 8005920:	6841      	ldr	r1, [r0, #4]
 8005922:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <cleanup_stdio+0x34>)
 8005924:	4299      	cmp	r1, r3
 8005926:	b510      	push	{r4, lr}
 8005928:	4604      	mov	r4, r0
 800592a:	d001      	beq.n	8005930 <cleanup_stdio+0x10>
 800592c:	f001 fdaa 	bl	8007484 <_fflush_r>
 8005930:	68a1      	ldr	r1, [r4, #8]
 8005932:	4b09      	ldr	r3, [pc, #36]	; (8005958 <cleanup_stdio+0x38>)
 8005934:	4299      	cmp	r1, r3
 8005936:	d002      	beq.n	800593e <cleanup_stdio+0x1e>
 8005938:	4620      	mov	r0, r4
 800593a:	f001 fda3 	bl	8007484 <_fflush_r>
 800593e:	68e1      	ldr	r1, [r4, #12]
 8005940:	4b06      	ldr	r3, [pc, #24]	; (800595c <cleanup_stdio+0x3c>)
 8005942:	4299      	cmp	r1, r3
 8005944:	d004      	beq.n	8005950 <cleanup_stdio+0x30>
 8005946:	4620      	mov	r0, r4
 8005948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594c:	f001 bd9a 	b.w	8007484 <_fflush_r>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	bf00      	nop
 8005954:	20000a2c 	.word	0x20000a2c
 8005958:	20000a94 	.word	0x20000a94
 800595c:	20000afc 	.word	0x20000afc

08005960 <global_stdio_init.part.0>:
 8005960:	b510      	push	{r4, lr}
 8005962:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <global_stdio_init.part.0+0x30>)
 8005964:	4c0b      	ldr	r4, [pc, #44]	; (8005994 <global_stdio_init.part.0+0x34>)
 8005966:	4a0c      	ldr	r2, [pc, #48]	; (8005998 <global_stdio_init.part.0+0x38>)
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	4620      	mov	r0, r4
 800596c:	2200      	movs	r2, #0
 800596e:	2104      	movs	r1, #4
 8005970:	f7ff ff94 	bl	800589c <std>
 8005974:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005978:	2201      	movs	r2, #1
 800597a:	2109      	movs	r1, #9
 800597c:	f7ff ff8e 	bl	800589c <std>
 8005980:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005984:	2202      	movs	r2, #2
 8005986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598a:	2112      	movs	r1, #18
 800598c:	f7ff bf86 	b.w	800589c <std>
 8005990:	20000b64 	.word	0x20000b64
 8005994:	20000a2c 	.word	0x20000a2c
 8005998:	08005909 	.word	0x08005909

0800599c <__sfp_lock_acquire>:
 800599c:	4801      	ldr	r0, [pc, #4]	; (80059a4 <__sfp_lock_acquire+0x8>)
 800599e:	f000 b920 	b.w	8005be2 <__retarget_lock_acquire_recursive>
 80059a2:	bf00      	nop
 80059a4:	20000b6d 	.word	0x20000b6d

080059a8 <__sfp_lock_release>:
 80059a8:	4801      	ldr	r0, [pc, #4]	; (80059b0 <__sfp_lock_release+0x8>)
 80059aa:	f000 b91b 	b.w	8005be4 <__retarget_lock_release_recursive>
 80059ae:	bf00      	nop
 80059b0:	20000b6d 	.word	0x20000b6d

080059b4 <__sinit>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	4604      	mov	r4, r0
 80059b8:	f7ff fff0 	bl	800599c <__sfp_lock_acquire>
 80059bc:	6a23      	ldr	r3, [r4, #32]
 80059be:	b11b      	cbz	r3, 80059c8 <__sinit+0x14>
 80059c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c4:	f7ff bff0 	b.w	80059a8 <__sfp_lock_release>
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <__sinit+0x28>)
 80059ca:	6223      	str	r3, [r4, #32]
 80059cc:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <__sinit+0x2c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f5      	bne.n	80059c0 <__sinit+0xc>
 80059d4:	f7ff ffc4 	bl	8005960 <global_stdio_init.part.0>
 80059d8:	e7f2      	b.n	80059c0 <__sinit+0xc>
 80059da:	bf00      	nop
 80059dc:	08005921 	.word	0x08005921
 80059e0:	20000b64 	.word	0x20000b64

080059e4 <_fwalk_sglue>:
 80059e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e8:	4607      	mov	r7, r0
 80059ea:	4688      	mov	r8, r1
 80059ec:	4614      	mov	r4, r2
 80059ee:	2600      	movs	r6, #0
 80059f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f4:	f1b9 0901 	subs.w	r9, r9, #1
 80059f8:	d505      	bpl.n	8005a06 <_fwalk_sglue+0x22>
 80059fa:	6824      	ldr	r4, [r4, #0]
 80059fc:	2c00      	cmp	r4, #0
 80059fe:	d1f7      	bne.n	80059f0 <_fwalk_sglue+0xc>
 8005a00:	4630      	mov	r0, r6
 8005a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d907      	bls.n	8005a1c <_fwalk_sglue+0x38>
 8005a0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a10:	3301      	adds	r3, #1
 8005a12:	d003      	beq.n	8005a1c <_fwalk_sglue+0x38>
 8005a14:	4629      	mov	r1, r5
 8005a16:	4638      	mov	r0, r7
 8005a18:	47c0      	blx	r8
 8005a1a:	4306      	orrs	r6, r0
 8005a1c:	3568      	adds	r5, #104	; 0x68
 8005a1e:	e7e9      	b.n	80059f4 <_fwalk_sglue+0x10>

08005a20 <siprintf>:
 8005a20:	b40e      	push	{r1, r2, r3}
 8005a22:	b500      	push	{lr}
 8005a24:	b09c      	sub	sp, #112	; 0x70
 8005a26:	ab1d      	add	r3, sp, #116	; 0x74
 8005a28:	9002      	str	r0, [sp, #8]
 8005a2a:	9006      	str	r0, [sp, #24]
 8005a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a30:	4809      	ldr	r0, [pc, #36]	; (8005a58 <siprintf+0x38>)
 8005a32:	9107      	str	r1, [sp, #28]
 8005a34:	9104      	str	r1, [sp, #16]
 8005a36:	4909      	ldr	r1, [pc, #36]	; (8005a5c <siprintf+0x3c>)
 8005a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a3c:	9105      	str	r1, [sp, #20]
 8005a3e:	6800      	ldr	r0, [r0, #0]
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	a902      	add	r1, sp, #8
 8005a44:	f001 fb9a 	bl	800717c <_svfiprintf_r>
 8005a48:	9b02      	ldr	r3, [sp, #8]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	b01c      	add	sp, #112	; 0x70
 8005a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a54:	b003      	add	sp, #12
 8005a56:	4770      	bx	lr
 8005a58:	20000064 	.word	0x20000064
 8005a5c:	ffff0208 	.word	0xffff0208

08005a60 <__sread>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	460c      	mov	r4, r1
 8005a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a68:	f000 f86c 	bl	8005b44 <_read_r>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	bfab      	itete	ge
 8005a70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a72:	89a3      	ldrhlt	r3, [r4, #12]
 8005a74:	181b      	addge	r3, r3, r0
 8005a76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a7a:	bfac      	ite	ge
 8005a7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a7e:	81a3      	strhlt	r3, [r4, #12]
 8005a80:	bd10      	pop	{r4, pc}

08005a82 <__swrite>:
 8005a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a86:	461f      	mov	r7, r3
 8005a88:	898b      	ldrh	r3, [r1, #12]
 8005a8a:	05db      	lsls	r3, r3, #23
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	4616      	mov	r6, r2
 8005a92:	d505      	bpl.n	8005aa0 <__swrite+0x1e>
 8005a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a98:	2302      	movs	r3, #2
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f000 f840 	bl	8005b20 <_lseek_r>
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	4632      	mov	r2, r6
 8005aae:	463b      	mov	r3, r7
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab6:	f000 b857 	b.w	8005b68 <_write_r>

08005aba <__sseek>:
 8005aba:	b510      	push	{r4, lr}
 8005abc:	460c      	mov	r4, r1
 8005abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac2:	f000 f82d 	bl	8005b20 <_lseek_r>
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	bf15      	itete	ne
 8005acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ad6:	81a3      	strheq	r3, [r4, #12]
 8005ad8:	bf18      	it	ne
 8005ada:	81a3      	strhne	r3, [r4, #12]
 8005adc:	bd10      	pop	{r4, pc}

08005ade <__sclose>:
 8005ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae2:	f000 b80d 	b.w	8005b00 <_close_r>

08005ae6 <memset>:
 8005ae6:	4402      	add	r2, r0
 8005ae8:	4603      	mov	r3, r0
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d100      	bne.n	8005af0 <memset+0xa>
 8005aee:	4770      	bx	lr
 8005af0:	f803 1b01 	strb.w	r1, [r3], #1
 8005af4:	e7f9      	b.n	8005aea <memset+0x4>
	...

08005af8 <_localeconv_r>:
 8005af8:	4800      	ldr	r0, [pc, #0]	; (8005afc <_localeconv_r+0x4>)
 8005afa:	4770      	bx	lr
 8005afc:	20000158 	.word	0x20000158

08005b00 <_close_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d06      	ldr	r5, [pc, #24]	; (8005b1c <_close_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	f7fb fbf7 	bl	80012fe <_close>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_close_r+0x1a>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_close_r+0x1a>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	20000b68 	.word	0x20000b68

08005b20 <_lseek_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	4d07      	ldr	r5, [pc, #28]	; (8005b40 <_lseek_r+0x20>)
 8005b24:	4604      	mov	r4, r0
 8005b26:	4608      	mov	r0, r1
 8005b28:	4611      	mov	r1, r2
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	602a      	str	r2, [r5, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f7fb fc0c 	bl	800134c <_lseek>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d102      	bne.n	8005b3e <_lseek_r+0x1e>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	b103      	cbz	r3, 8005b3e <_lseek_r+0x1e>
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	20000b68 	.word	0x20000b68

08005b44 <_read_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4d07      	ldr	r5, [pc, #28]	; (8005b64 <_read_r+0x20>)
 8005b48:	4604      	mov	r4, r0
 8005b4a:	4608      	mov	r0, r1
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	2200      	movs	r2, #0
 8005b50:	602a      	str	r2, [r5, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f7fb fb9a 	bl	800128c <_read>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_read_r+0x1e>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_read_r+0x1e>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20000b68 	.word	0x20000b68

08005b68 <_write_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d07      	ldr	r5, [pc, #28]	; (8005b88 <_write_r+0x20>)
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	4608      	mov	r0, r1
 8005b70:	4611      	mov	r1, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f7fb fba5 	bl	80012c6 <_write>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_write_r+0x1e>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_write_r+0x1e>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	20000b68 	.word	0x20000b68

08005b8c <__errno>:
 8005b8c:	4b01      	ldr	r3, [pc, #4]	; (8005b94 <__errno+0x8>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000064 	.word	0x20000064

08005b98 <__libc_init_array>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	4d0d      	ldr	r5, [pc, #52]	; (8005bd0 <__libc_init_array+0x38>)
 8005b9c:	4c0d      	ldr	r4, [pc, #52]	; (8005bd4 <__libc_init_array+0x3c>)
 8005b9e:	1b64      	subs	r4, r4, r5
 8005ba0:	10a4      	asrs	r4, r4, #2
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	42a6      	cmp	r6, r4
 8005ba6:	d109      	bne.n	8005bbc <__libc_init_array+0x24>
 8005ba8:	4d0b      	ldr	r5, [pc, #44]	; (8005bd8 <__libc_init_array+0x40>)
 8005baa:	4c0c      	ldr	r4, [pc, #48]	; (8005bdc <__libc_init_array+0x44>)
 8005bac:	f002 f80e 	bl	8007bcc <_init>
 8005bb0:	1b64      	subs	r4, r4, r5
 8005bb2:	10a4      	asrs	r4, r4, #2
 8005bb4:	2600      	movs	r6, #0
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	d105      	bne.n	8005bc6 <__libc_init_array+0x2e>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc0:	4798      	blx	r3
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	e7ee      	b.n	8005ba4 <__libc_init_array+0xc>
 8005bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bca:	4798      	blx	r3
 8005bcc:	3601      	adds	r6, #1
 8005bce:	e7f2      	b.n	8005bb6 <__libc_init_array+0x1e>
 8005bd0:	08007fb4 	.word	0x08007fb4
 8005bd4:	08007fb4 	.word	0x08007fb4
 8005bd8:	08007fb4 	.word	0x08007fb4
 8005bdc:	08007fb8 	.word	0x08007fb8

08005be0 <__retarget_lock_init_recursive>:
 8005be0:	4770      	bx	lr

08005be2 <__retarget_lock_acquire_recursive>:
 8005be2:	4770      	bx	lr

08005be4 <__retarget_lock_release_recursive>:
 8005be4:	4770      	bx	lr

08005be6 <quorem>:
 8005be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	6903      	ldr	r3, [r0, #16]
 8005bec:	690c      	ldr	r4, [r1, #16]
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	db7e      	blt.n	8005cf2 <quorem+0x10c>
 8005bf4:	3c01      	subs	r4, #1
 8005bf6:	f101 0814 	add.w	r8, r1, #20
 8005bfa:	f100 0514 	add.w	r5, r0, #20
 8005bfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c18:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c1c:	d331      	bcc.n	8005c82 <quorem+0x9c>
 8005c1e:	f04f 0e00 	mov.w	lr, #0
 8005c22:	4640      	mov	r0, r8
 8005c24:	46ac      	mov	ip, r5
 8005c26:	46f2      	mov	sl, lr
 8005c28:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c2c:	b293      	uxth	r3, r2
 8005c2e:	fb06 e303 	mla	r3, r6, r3, lr
 8005c32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c36:	0c1a      	lsrs	r2, r3, #16
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	ebaa 0303 	sub.w	r3, sl, r3
 8005c3e:	f8dc a000 	ldr.w	sl, [ip]
 8005c42:	fa13 f38a 	uxtah	r3, r3, sl
 8005c46:	fb06 220e 	mla	r2, r6, lr, r2
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	9b00      	ldr	r3, [sp, #0]
 8005c4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c52:	b292      	uxth	r2, r2
 8005c54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c60:	4581      	cmp	r9, r0
 8005c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c66:	f84c 3b04 	str.w	r3, [ip], #4
 8005c6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c6e:	d2db      	bcs.n	8005c28 <quorem+0x42>
 8005c70:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c74:	b92b      	cbnz	r3, 8005c82 <quorem+0x9c>
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	3b04      	subs	r3, #4
 8005c7a:	429d      	cmp	r5, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	d32c      	bcc.n	8005cda <quorem+0xf4>
 8005c80:	613c      	str	r4, [r7, #16]
 8005c82:	4638      	mov	r0, r7
 8005c84:	f001 f920 	bl	8006ec8 <__mcmp>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	db22      	blt.n	8005cd2 <quorem+0xec>
 8005c8c:	3601      	adds	r6, #1
 8005c8e:	4629      	mov	r1, r5
 8005c90:	2000      	movs	r0, #0
 8005c92:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c96:	f8d1 c000 	ldr.w	ip, [r1]
 8005c9a:	b293      	uxth	r3, r2
 8005c9c:	1ac3      	subs	r3, r0, r3
 8005c9e:	0c12      	lsrs	r2, r2, #16
 8005ca0:	fa13 f38c 	uxtah	r3, r3, ip
 8005ca4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cb2:	45c1      	cmp	r9, r8
 8005cb4:	f841 3b04 	str.w	r3, [r1], #4
 8005cb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cbc:	d2e9      	bcs.n	8005c92 <quorem+0xac>
 8005cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cc6:	b922      	cbnz	r2, 8005cd2 <quorem+0xec>
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	429d      	cmp	r5, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	d30a      	bcc.n	8005ce6 <quorem+0x100>
 8005cd0:	613c      	str	r4, [r7, #16]
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	b003      	add	sp, #12
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d1ce      	bne.n	8005c80 <quorem+0x9a>
 8005ce2:	3c01      	subs	r4, #1
 8005ce4:	e7c9      	b.n	8005c7a <quorem+0x94>
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	d1f0      	bne.n	8005cd0 <quorem+0xea>
 8005cee:	3c01      	subs	r4, #1
 8005cf0:	e7eb      	b.n	8005cca <quorem+0xe4>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e7ee      	b.n	8005cd4 <quorem+0xee>
	...

08005cf8 <_dtoa_r>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	ed2d 8b02 	vpush	{d8}
 8005d00:	69c5      	ldr	r5, [r0, #28]
 8005d02:	b091      	sub	sp, #68	; 0x44
 8005d04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005d08:	ec59 8b10 	vmov	r8, r9, d0
 8005d0c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005d0e:	9106      	str	r1, [sp, #24]
 8005d10:	4606      	mov	r6, r0
 8005d12:	9208      	str	r2, [sp, #32]
 8005d14:	930c      	str	r3, [sp, #48]	; 0x30
 8005d16:	b975      	cbnz	r5, 8005d36 <_dtoa_r+0x3e>
 8005d18:	2010      	movs	r0, #16
 8005d1a:	f000 fda5 	bl	8006868 <malloc>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	61f0      	str	r0, [r6, #28]
 8005d22:	b920      	cbnz	r0, 8005d2e <_dtoa_r+0x36>
 8005d24:	4ba6      	ldr	r3, [pc, #664]	; (8005fc0 <_dtoa_r+0x2c8>)
 8005d26:	21ef      	movs	r1, #239	; 0xef
 8005d28:	48a6      	ldr	r0, [pc, #664]	; (8005fc4 <_dtoa_r+0x2cc>)
 8005d2a:	f001 fc0b 	bl	8007544 <__assert_func>
 8005d2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d32:	6005      	str	r5, [r0, #0]
 8005d34:	60c5      	str	r5, [r0, #12]
 8005d36:	69f3      	ldr	r3, [r6, #28]
 8005d38:	6819      	ldr	r1, [r3, #0]
 8005d3a:	b151      	cbz	r1, 8005d52 <_dtoa_r+0x5a>
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	604a      	str	r2, [r1, #4]
 8005d40:	2301      	movs	r3, #1
 8005d42:	4093      	lsls	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 fe82 	bl	8006a50 <_Bfree>
 8005d4c:	69f3      	ldr	r3, [r6, #28]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	f1b9 0300 	subs.w	r3, r9, #0
 8005d56:	bfbb      	ittet	lt
 8005d58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d5c:	9303      	strlt	r3, [sp, #12]
 8005d5e:	2300      	movge	r3, #0
 8005d60:	2201      	movlt	r2, #1
 8005d62:	bfac      	ite	ge
 8005d64:	6023      	strge	r3, [r4, #0]
 8005d66:	6022      	strlt	r2, [r4, #0]
 8005d68:	4b97      	ldr	r3, [pc, #604]	; (8005fc8 <_dtoa_r+0x2d0>)
 8005d6a:	9c03      	ldr	r4, [sp, #12]
 8005d6c:	43a3      	bics	r3, r4
 8005d6e:	d11c      	bne.n	8005daa <_dtoa_r+0xb2>
 8005d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d72:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005d7c:	ea53 0308 	orrs.w	r3, r3, r8
 8005d80:	f000 84fb 	beq.w	800677a <_dtoa_r+0xa82>
 8005d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d86:	b963      	cbnz	r3, 8005da2 <_dtoa_r+0xaa>
 8005d88:	4b90      	ldr	r3, [pc, #576]	; (8005fcc <_dtoa_r+0x2d4>)
 8005d8a:	e020      	b.n	8005dce <_dtoa_r+0xd6>
 8005d8c:	4b90      	ldr	r3, [pc, #576]	; (8005fd0 <_dtoa_r+0x2d8>)
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	3308      	adds	r3, #8
 8005d92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	9801      	ldr	r0, [sp, #4]
 8005d98:	b011      	add	sp, #68	; 0x44
 8005d9a:	ecbd 8b02 	vpop	{d8}
 8005d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da2:	4b8a      	ldr	r3, [pc, #552]	; (8005fcc <_dtoa_r+0x2d4>)
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	3303      	adds	r3, #3
 8005da8:	e7f3      	b.n	8005d92 <_dtoa_r+0x9a>
 8005daa:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005dae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db6:	d10c      	bne.n	8005dd2 <_dtoa_r+0xda>
 8005db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dba:	2301      	movs	r3, #1
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 84d7 	beq.w	8006774 <_dtoa_r+0xa7c>
 8005dc6:	4b83      	ldr	r3, [pc, #524]	; (8005fd4 <_dtoa_r+0x2dc>)
 8005dc8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	e7e1      	b.n	8005d96 <_dtoa_r+0x9e>
 8005dd2:	aa0e      	add	r2, sp, #56	; 0x38
 8005dd4:	a90f      	add	r1, sp, #60	; 0x3c
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	eeb0 0b48 	vmov.f64	d0, d8
 8005ddc:	f001 f91a 	bl	8007014 <__d2b>
 8005de0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005de4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005de6:	4605      	mov	r5, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d046      	beq.n	8005e7a <_dtoa_r+0x182>
 8005dec:	eeb0 7b48 	vmov.f64	d7, d8
 8005df0:	ee18 1a90 	vmov	r1, s17
 8005df4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005df8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8005dfc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e04:	2000      	movs	r0, #0
 8005e06:	ee07 1a90 	vmov	s15, r1
 8005e0a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8005e0e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005fa8 <_dtoa_r+0x2b0>
 8005e12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e16:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005fb0 <_dtoa_r+0x2b8>
 8005e1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005e1e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005fb8 <_dtoa_r+0x2c0>
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005e2a:	eeb0 7b46 	vmov.f64	d7, d6
 8005e2e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005e32:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005e36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3e:	ee16 ba90 	vmov	fp, s13
 8005e42:	9009      	str	r0, [sp, #36]	; 0x24
 8005e44:	d508      	bpl.n	8005e58 <_dtoa_r+0x160>
 8005e46:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005e4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8005e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e52:	bf18      	it	ne
 8005e54:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005e58:	f1bb 0f16 	cmp.w	fp, #22
 8005e5c:	d82b      	bhi.n	8005eb6 <_dtoa_r+0x1be>
 8005e5e:	495e      	ldr	r1, [pc, #376]	; (8005fd8 <_dtoa_r+0x2e0>)
 8005e60:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005e64:	ed91 7b00 	vldr	d7, [r1]
 8005e68:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e70:	d501      	bpl.n	8005e76 <_dtoa_r+0x17e>
 8005e72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e76:	2100      	movs	r1, #0
 8005e78:	e01e      	b.n	8005eb8 <_dtoa_r+0x1c0>
 8005e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005e82:	2920      	cmp	r1, #32
 8005e84:	bfc1      	itttt	gt
 8005e86:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005e8a:	408c      	lslgt	r4, r1
 8005e8c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005e90:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005e94:	bfd6      	itet	le
 8005e96:	f1c1 0120 	rsble	r1, r1, #32
 8005e9a:	4321      	orrgt	r1, r4
 8005e9c:	fa08 f101 	lslle.w	r1, r8, r1
 8005ea0:	ee07 1a90 	vmov	s15, r1
 8005ea4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	ee17 1a90 	vmov	r1, s15
 8005eae:	2001      	movs	r0, #1
 8005eb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005eb4:	e7a7      	b.n	8005e06 <_dtoa_r+0x10e>
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	1ad2      	subs	r2, r2, r3
 8005eba:	1e53      	subs	r3, r2, #1
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	bf45      	ittet	mi
 8005ec0:	f1c2 0301 	rsbmi	r3, r2, #1
 8005ec4:	9304      	strmi	r3, [sp, #16]
 8005ec6:	2300      	movpl	r3, #0
 8005ec8:	2300      	movmi	r3, #0
 8005eca:	bf4c      	ite	mi
 8005ecc:	9305      	strmi	r3, [sp, #20]
 8005ece:	9304      	strpl	r3, [sp, #16]
 8005ed0:	f1bb 0f00 	cmp.w	fp, #0
 8005ed4:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ed6:	db18      	blt.n	8005f0a <_dtoa_r+0x212>
 8005ed8:	9b05      	ldr	r3, [sp, #20]
 8005eda:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005ede:	445b      	add	r3, fp
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9a06      	ldr	r2, [sp, #24]
 8005ee6:	2a09      	cmp	r2, #9
 8005ee8:	d848      	bhi.n	8005f7c <_dtoa_r+0x284>
 8005eea:	2a05      	cmp	r2, #5
 8005eec:	bfc4      	itt	gt
 8005eee:	3a04      	subgt	r2, #4
 8005ef0:	9206      	strgt	r2, [sp, #24]
 8005ef2:	9a06      	ldr	r2, [sp, #24]
 8005ef4:	f1a2 0202 	sub.w	r2, r2, #2
 8005ef8:	bfcc      	ite	gt
 8005efa:	2400      	movgt	r4, #0
 8005efc:	2401      	movle	r4, #1
 8005efe:	2a03      	cmp	r2, #3
 8005f00:	d847      	bhi.n	8005f92 <_dtoa_r+0x29a>
 8005f02:	e8df f002 	tbb	[pc, r2]
 8005f06:	2d0b      	.short	0x2d0b
 8005f08:	392b      	.short	0x392b
 8005f0a:	9b04      	ldr	r3, [sp, #16]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	eba3 030b 	sub.w	r3, r3, fp
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	920a      	str	r2, [sp, #40]	; 0x28
 8005f16:	f1cb 0300 	rsb	r3, fp, #0
 8005f1a:	e7e3      	b.n	8005ee4 <_dtoa_r+0x1ec>
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	9207      	str	r2, [sp, #28]
 8005f20:	9a08      	ldr	r2, [sp, #32]
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	dc38      	bgt.n	8005f98 <_dtoa_r+0x2a0>
 8005f26:	f04f 0a01 	mov.w	sl, #1
 8005f2a:	46d1      	mov	r9, sl
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	f8cd a020 	str.w	sl, [sp, #32]
 8005f32:	69f7      	ldr	r7, [r6, #28]
 8005f34:	2100      	movs	r1, #0
 8005f36:	2004      	movs	r0, #4
 8005f38:	f100 0c14 	add.w	ip, r0, #20
 8005f3c:	4594      	cmp	ip, r2
 8005f3e:	d930      	bls.n	8005fa2 <_dtoa_r+0x2aa>
 8005f40:	6079      	str	r1, [r7, #4]
 8005f42:	4630      	mov	r0, r6
 8005f44:	930d      	str	r3, [sp, #52]	; 0x34
 8005f46:	f000 fd43 	bl	80069d0 <_Balloc>
 8005f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f4c:	9001      	str	r0, [sp, #4]
 8005f4e:	4602      	mov	r2, r0
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d145      	bne.n	8005fe0 <_dtoa_r+0x2e8>
 8005f54:	4b21      	ldr	r3, [pc, #132]	; (8005fdc <_dtoa_r+0x2e4>)
 8005f56:	f240 11af 	movw	r1, #431	; 0x1af
 8005f5a:	e6e5      	b.n	8005d28 <_dtoa_r+0x30>
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	e7de      	b.n	8005f1e <_dtoa_r+0x226>
 8005f60:	2200      	movs	r2, #0
 8005f62:	9207      	str	r2, [sp, #28]
 8005f64:	9a08      	ldr	r2, [sp, #32]
 8005f66:	eb0b 0a02 	add.w	sl, fp, r2
 8005f6a:	f10a 0901 	add.w	r9, sl, #1
 8005f6e:	464a      	mov	r2, r9
 8005f70:	2a01      	cmp	r2, #1
 8005f72:	bfb8      	it	lt
 8005f74:	2201      	movlt	r2, #1
 8005f76:	e7dc      	b.n	8005f32 <_dtoa_r+0x23a>
 8005f78:	2201      	movs	r2, #1
 8005f7a:	e7f2      	b.n	8005f62 <_dtoa_r+0x26a>
 8005f7c:	2401      	movs	r4, #1
 8005f7e:	2200      	movs	r2, #0
 8005f80:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005f84:	f04f 3aff 	mov.w	sl, #4294967295
 8005f88:	2100      	movs	r1, #0
 8005f8a:	46d1      	mov	r9, sl
 8005f8c:	2212      	movs	r2, #18
 8005f8e:	9108      	str	r1, [sp, #32]
 8005f90:	e7cf      	b.n	8005f32 <_dtoa_r+0x23a>
 8005f92:	2201      	movs	r2, #1
 8005f94:	9207      	str	r2, [sp, #28]
 8005f96:	e7f5      	b.n	8005f84 <_dtoa_r+0x28c>
 8005f98:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005f9c:	46d1      	mov	r9, sl
 8005f9e:	4652      	mov	r2, sl
 8005fa0:	e7c7      	b.n	8005f32 <_dtoa_r+0x23a>
 8005fa2:	3101      	adds	r1, #1
 8005fa4:	0040      	lsls	r0, r0, #1
 8005fa6:	e7c7      	b.n	8005f38 <_dtoa_r+0x240>
 8005fa8:	636f4361 	.word	0x636f4361
 8005fac:	3fd287a7 	.word	0x3fd287a7
 8005fb0:	8b60c8b3 	.word	0x8b60c8b3
 8005fb4:	3fc68a28 	.word	0x3fc68a28
 8005fb8:	509f79fb 	.word	0x509f79fb
 8005fbc:	3fd34413 	.word	0x3fd34413
 8005fc0:	08007c79 	.word	0x08007c79
 8005fc4:	08007c90 	.word	0x08007c90
 8005fc8:	7ff00000 	.word	0x7ff00000
 8005fcc:	08007c75 	.word	0x08007c75
 8005fd0:	08007c6c 	.word	0x08007c6c
 8005fd4:	08007c49 	.word	0x08007c49
 8005fd8:	08007d80 	.word	0x08007d80
 8005fdc:	08007ce8 	.word	0x08007ce8
 8005fe0:	69f2      	ldr	r2, [r6, #28]
 8005fe2:	9901      	ldr	r1, [sp, #4]
 8005fe4:	6011      	str	r1, [r2, #0]
 8005fe6:	f1b9 0f0e 	cmp.w	r9, #14
 8005fea:	d86c      	bhi.n	80060c6 <_dtoa_r+0x3ce>
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	d06a      	beq.n	80060c6 <_dtoa_r+0x3ce>
 8005ff0:	f1bb 0f00 	cmp.w	fp, #0
 8005ff4:	f340 80a0 	ble.w	8006138 <_dtoa_r+0x440>
 8005ff8:	4ac1      	ldr	r2, [pc, #772]	; (8006300 <_dtoa_r+0x608>)
 8005ffa:	f00b 010f 	and.w	r1, fp, #15
 8005ffe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006002:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006006:	ed92 7b00 	vldr	d7, [r2]
 800600a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800600e:	f000 8087 	beq.w	8006120 <_dtoa_r+0x428>
 8006012:	49bc      	ldr	r1, [pc, #752]	; (8006304 <_dtoa_r+0x60c>)
 8006014:	ed91 6b08 	vldr	d6, [r1, #32]
 8006018:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800601c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006020:	f002 020f 	and.w	r2, r2, #15
 8006024:	2103      	movs	r1, #3
 8006026:	48b7      	ldr	r0, [pc, #732]	; (8006304 <_dtoa_r+0x60c>)
 8006028:	2a00      	cmp	r2, #0
 800602a:	d17b      	bne.n	8006124 <_dtoa_r+0x42c>
 800602c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006030:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006034:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800603a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800603e:	2a00      	cmp	r2, #0
 8006040:	f000 80a0 	beq.w	8006184 <_dtoa_r+0x48c>
 8006044:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006048:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006050:	f140 8098 	bpl.w	8006184 <_dtoa_r+0x48c>
 8006054:	f1b9 0f00 	cmp.w	r9, #0
 8006058:	f000 8094 	beq.w	8006184 <_dtoa_r+0x48c>
 800605c:	f1ba 0f00 	cmp.w	sl, #0
 8006060:	dd2f      	ble.n	80060c2 <_dtoa_r+0x3ca>
 8006062:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006066:	ee27 7b06 	vmul.f64	d7, d7, d6
 800606a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800606e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006072:	3101      	adds	r1, #1
 8006074:	4654      	mov	r4, sl
 8006076:	ed9d 6b02 	vldr	d6, [sp, #8]
 800607a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800607e:	ee07 1a90 	vmov	s15, r1
 8006082:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006086:	eea7 5b06 	vfma.f64	d5, d7, d6
 800608a:	ee15 7a90 	vmov	r7, s11
 800608e:	ec51 0b15 	vmov	r0, r1, d5
 8006092:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8006096:	2c00      	cmp	r4, #0
 8006098:	d177      	bne.n	800618a <_dtoa_r+0x492>
 800609a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800609e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80060a2:	ec41 0b17 	vmov	d7, r0, r1
 80060a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80060aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ae:	f300 826a 	bgt.w	8006586 <_dtoa_r+0x88e>
 80060b2:	eeb1 7b47 	vneg.f64	d7, d7
 80060b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	f100 8260 	bmi.w	8006582 <_dtoa_r+0x88a>
 80060c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80060c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	f2c0 811d 	blt.w	8006308 <_dtoa_r+0x610>
 80060ce:	f1bb 0f0e 	cmp.w	fp, #14
 80060d2:	f300 8119 	bgt.w	8006308 <_dtoa_r+0x610>
 80060d6:	4b8a      	ldr	r3, [pc, #552]	; (8006300 <_dtoa_r+0x608>)
 80060d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060dc:	ed93 6b00 	vldr	d6, [r3]
 80060e0:	9b08      	ldr	r3, [sp, #32]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f280 80b7 	bge.w	8006256 <_dtoa_r+0x55e>
 80060e8:	f1b9 0f00 	cmp.w	r9, #0
 80060ec:	f300 80b3 	bgt.w	8006256 <_dtoa_r+0x55e>
 80060f0:	f040 8246 	bne.w	8006580 <_dtoa_r+0x888>
 80060f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80060f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80060fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006100:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006108:	464c      	mov	r4, r9
 800610a:	464f      	mov	r7, r9
 800610c:	f280 821c 	bge.w	8006548 <_dtoa_r+0x850>
 8006110:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006114:	2331      	movs	r3, #49	; 0x31
 8006116:	f808 3b01 	strb.w	r3, [r8], #1
 800611a:	f10b 0b01 	add.w	fp, fp, #1
 800611e:	e218      	b.n	8006552 <_dtoa_r+0x85a>
 8006120:	2102      	movs	r1, #2
 8006122:	e780      	b.n	8006026 <_dtoa_r+0x32e>
 8006124:	07d4      	lsls	r4, r2, #31
 8006126:	d504      	bpl.n	8006132 <_dtoa_r+0x43a>
 8006128:	ed90 6b00 	vldr	d6, [r0]
 800612c:	3101      	adds	r1, #1
 800612e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006132:	1052      	asrs	r2, r2, #1
 8006134:	3008      	adds	r0, #8
 8006136:	e777      	b.n	8006028 <_dtoa_r+0x330>
 8006138:	d022      	beq.n	8006180 <_dtoa_r+0x488>
 800613a:	f1cb 0200 	rsb	r2, fp, #0
 800613e:	4970      	ldr	r1, [pc, #448]	; (8006300 <_dtoa_r+0x608>)
 8006140:	f002 000f 	and.w	r0, r2, #15
 8006144:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006148:	ed91 7b00 	vldr	d7, [r1]
 800614c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006150:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006154:	486b      	ldr	r0, [pc, #428]	; (8006304 <_dtoa_r+0x60c>)
 8006156:	1112      	asrs	r2, r2, #4
 8006158:	2400      	movs	r4, #0
 800615a:	2102      	movs	r1, #2
 800615c:	b92a      	cbnz	r2, 800616a <_dtoa_r+0x472>
 800615e:	2c00      	cmp	r4, #0
 8006160:	f43f af6a 	beq.w	8006038 <_dtoa_r+0x340>
 8006164:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006168:	e766      	b.n	8006038 <_dtoa_r+0x340>
 800616a:	07d7      	lsls	r7, r2, #31
 800616c:	d505      	bpl.n	800617a <_dtoa_r+0x482>
 800616e:	ed90 6b00 	vldr	d6, [r0]
 8006172:	3101      	adds	r1, #1
 8006174:	2401      	movs	r4, #1
 8006176:	ee27 7b06 	vmul.f64	d7, d7, d6
 800617a:	1052      	asrs	r2, r2, #1
 800617c:	3008      	adds	r0, #8
 800617e:	e7ed      	b.n	800615c <_dtoa_r+0x464>
 8006180:	2102      	movs	r1, #2
 8006182:	e759      	b.n	8006038 <_dtoa_r+0x340>
 8006184:	465a      	mov	r2, fp
 8006186:	464c      	mov	r4, r9
 8006188:	e775      	b.n	8006076 <_dtoa_r+0x37e>
 800618a:	ec41 0b17 	vmov	d7, r0, r1
 800618e:	495c      	ldr	r1, [pc, #368]	; (8006300 <_dtoa_r+0x608>)
 8006190:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8006194:	ed11 4b02 	vldr	d4, [r1, #-8]
 8006198:	9901      	ldr	r1, [sp, #4]
 800619a:	440c      	add	r4, r1
 800619c:	9907      	ldr	r1, [sp, #28]
 800619e:	b351      	cbz	r1, 80061f6 <_dtoa_r+0x4fe>
 80061a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80061a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80061a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80061ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80061b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80061b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80061b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80061bc:	ee14 1a90 	vmov	r1, s9
 80061c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80061c4:	3130      	adds	r1, #48	; 0x30
 80061c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80061ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d2:	f808 1b01 	strb.w	r1, [r8], #1
 80061d6:	d439      	bmi.n	800624c <_dtoa_r+0x554>
 80061d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80061dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80061e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e4:	d472      	bmi.n	80062cc <_dtoa_r+0x5d4>
 80061e6:	45a0      	cmp	r8, r4
 80061e8:	f43f af6b 	beq.w	80060c2 <_dtoa_r+0x3ca>
 80061ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 80061f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80061f4:	e7e0      	b.n	80061b8 <_dtoa_r+0x4c0>
 80061f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80061fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80061fe:	4620      	mov	r0, r4
 8006200:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006204:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006208:	ee14 1a90 	vmov	r1, s9
 800620c:	3130      	adds	r1, #48	; 0x30
 800620e:	f808 1b01 	strb.w	r1, [r8], #1
 8006212:	45a0      	cmp	r8, r4
 8006214:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006218:	ee36 6b45 	vsub.f64	d6, d6, d5
 800621c:	d118      	bne.n	8006250 <_dtoa_r+0x558>
 800621e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006222:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006226:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	dc4d      	bgt.n	80062cc <_dtoa_r+0x5d4>
 8006230:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006234:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623c:	f57f af41 	bpl.w	80060c2 <_dtoa_r+0x3ca>
 8006240:	4680      	mov	r8, r0
 8006242:	3801      	subs	r0, #1
 8006244:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006248:	2b30      	cmp	r3, #48	; 0x30
 800624a:	d0f9      	beq.n	8006240 <_dtoa_r+0x548>
 800624c:	4693      	mov	fp, r2
 800624e:	e02a      	b.n	80062a6 <_dtoa_r+0x5ae>
 8006250:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006254:	e7d6      	b.n	8006204 <_dtoa_r+0x50c>
 8006256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800625a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800625e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006262:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006266:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800626a:	ee15 3a10 	vmov	r3, s10
 800626e:	3330      	adds	r3, #48	; 0x30
 8006270:	f808 3b01 	strb.w	r3, [r8], #1
 8006274:	9b01      	ldr	r3, [sp, #4]
 8006276:	eba8 0303 	sub.w	r3, r8, r3
 800627a:	4599      	cmp	r9, r3
 800627c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006280:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006284:	d133      	bne.n	80062ee <_dtoa_r+0x5f6>
 8006286:	ee37 7b07 	vadd.f64	d7, d7, d7
 800628a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800628e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006292:	dc1a      	bgt.n	80062ca <_dtoa_r+0x5d2>
 8006294:	eeb4 7b46 	vcmp.f64	d7, d6
 8006298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629c:	d103      	bne.n	80062a6 <_dtoa_r+0x5ae>
 800629e:	ee15 3a10 	vmov	r3, s10
 80062a2:	07d9      	lsls	r1, r3, #31
 80062a4:	d411      	bmi.n	80062ca <_dtoa_r+0x5d2>
 80062a6:	4629      	mov	r1, r5
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 fbd1 	bl	8006a50 <_Bfree>
 80062ae:	2300      	movs	r3, #0
 80062b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062b2:	f888 3000 	strb.w	r3, [r8]
 80062b6:	f10b 0301 	add.w	r3, fp, #1
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f43f ad69 	beq.w	8005d96 <_dtoa_r+0x9e>
 80062c4:	f8c3 8000 	str.w	r8, [r3]
 80062c8:	e565      	b.n	8005d96 <_dtoa_r+0x9e>
 80062ca:	465a      	mov	r2, fp
 80062cc:	4643      	mov	r3, r8
 80062ce:	4698      	mov	r8, r3
 80062d0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80062d4:	2939      	cmp	r1, #57	; 0x39
 80062d6:	d106      	bne.n	80062e6 <_dtoa_r+0x5ee>
 80062d8:	9901      	ldr	r1, [sp, #4]
 80062da:	4299      	cmp	r1, r3
 80062dc:	d1f7      	bne.n	80062ce <_dtoa_r+0x5d6>
 80062de:	9801      	ldr	r0, [sp, #4]
 80062e0:	2130      	movs	r1, #48	; 0x30
 80062e2:	3201      	adds	r2, #1
 80062e4:	7001      	strb	r1, [r0, #0]
 80062e6:	7819      	ldrb	r1, [r3, #0]
 80062e8:	3101      	adds	r1, #1
 80062ea:	7019      	strb	r1, [r3, #0]
 80062ec:	e7ae      	b.n	800624c <_dtoa_r+0x554>
 80062ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80062f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80062f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062fa:	d1b2      	bne.n	8006262 <_dtoa_r+0x56a>
 80062fc:	e7d3      	b.n	80062a6 <_dtoa_r+0x5ae>
 80062fe:	bf00      	nop
 8006300:	08007d80 	.word	0x08007d80
 8006304:	08007d58 	.word	0x08007d58
 8006308:	9907      	ldr	r1, [sp, #28]
 800630a:	2900      	cmp	r1, #0
 800630c:	f000 80d0 	beq.w	80064b0 <_dtoa_r+0x7b8>
 8006310:	9906      	ldr	r1, [sp, #24]
 8006312:	2901      	cmp	r1, #1
 8006314:	f300 80b4 	bgt.w	8006480 <_dtoa_r+0x788>
 8006318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800631a:	2900      	cmp	r1, #0
 800631c:	f000 80ac 	beq.w	8006478 <_dtoa_r+0x780>
 8006320:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006324:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006328:	461c      	mov	r4, r3
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	4413      	add	r3, r2
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	9b05      	ldr	r3, [sp, #20]
 8006334:	2101      	movs	r1, #1
 8006336:	4413      	add	r3, r2
 8006338:	4630      	mov	r0, r6
 800633a:	9305      	str	r3, [sp, #20]
 800633c:	f000 fc3e 	bl	8006bbc <__i2b>
 8006340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006342:	4607      	mov	r7, r0
 8006344:	f1b8 0f00 	cmp.w	r8, #0
 8006348:	d00d      	beq.n	8006366 <_dtoa_r+0x66e>
 800634a:	9a05      	ldr	r2, [sp, #20]
 800634c:	2a00      	cmp	r2, #0
 800634e:	dd0a      	ble.n	8006366 <_dtoa_r+0x66e>
 8006350:	4542      	cmp	r2, r8
 8006352:	9904      	ldr	r1, [sp, #16]
 8006354:	bfa8      	it	ge
 8006356:	4642      	movge	r2, r8
 8006358:	1a89      	subs	r1, r1, r2
 800635a:	9104      	str	r1, [sp, #16]
 800635c:	9905      	ldr	r1, [sp, #20]
 800635e:	eba8 0802 	sub.w	r8, r8, r2
 8006362:	1a8a      	subs	r2, r1, r2
 8006364:	9205      	str	r2, [sp, #20]
 8006366:	b303      	cbz	r3, 80063aa <_dtoa_r+0x6b2>
 8006368:	9a07      	ldr	r2, [sp, #28]
 800636a:	2a00      	cmp	r2, #0
 800636c:	f000 80a5 	beq.w	80064ba <_dtoa_r+0x7c2>
 8006370:	2c00      	cmp	r4, #0
 8006372:	dd13      	ble.n	800639c <_dtoa_r+0x6a4>
 8006374:	4639      	mov	r1, r7
 8006376:	4622      	mov	r2, r4
 8006378:	4630      	mov	r0, r6
 800637a:	930d      	str	r3, [sp, #52]	; 0x34
 800637c:	f000 fcde 	bl	8006d3c <__pow5mult>
 8006380:	462a      	mov	r2, r5
 8006382:	4601      	mov	r1, r0
 8006384:	4607      	mov	r7, r0
 8006386:	4630      	mov	r0, r6
 8006388:	f000 fc2e 	bl	8006be8 <__multiply>
 800638c:	4629      	mov	r1, r5
 800638e:	9009      	str	r0, [sp, #36]	; 0x24
 8006390:	4630      	mov	r0, r6
 8006392:	f000 fb5d 	bl	8006a50 <_Bfree>
 8006396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800639a:	4615      	mov	r5, r2
 800639c:	1b1a      	subs	r2, r3, r4
 800639e:	d004      	beq.n	80063aa <_dtoa_r+0x6b2>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4630      	mov	r0, r6
 80063a4:	f000 fcca 	bl	8006d3c <__pow5mult>
 80063a8:	4605      	mov	r5, r0
 80063aa:	2101      	movs	r1, #1
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 fc05 	bl	8006bbc <__i2b>
 80063b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	f340 8081 	ble.w	80064be <_dtoa_r+0x7c6>
 80063bc:	461a      	mov	r2, r3
 80063be:	4601      	mov	r1, r0
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 fcbb 	bl	8006d3c <__pow5mult>
 80063c6:	9b06      	ldr	r3, [sp, #24]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	4604      	mov	r4, r0
 80063cc:	dd7a      	ble.n	80064c4 <_dtoa_r+0x7cc>
 80063ce:	2300      	movs	r3, #0
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	6922      	ldr	r2, [r4, #16]
 80063d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80063d8:	6910      	ldr	r0, [r2, #16]
 80063da:	f000 fba1 	bl	8006b20 <__hi0bits>
 80063de:	f1c0 0020 	rsb	r0, r0, #32
 80063e2:	9b05      	ldr	r3, [sp, #20]
 80063e4:	4418      	add	r0, r3
 80063e6:	f010 001f 	ands.w	r0, r0, #31
 80063ea:	f000 8093 	beq.w	8006514 <_dtoa_r+0x81c>
 80063ee:	f1c0 0220 	rsb	r2, r0, #32
 80063f2:	2a04      	cmp	r2, #4
 80063f4:	f340 8085 	ble.w	8006502 <_dtoa_r+0x80a>
 80063f8:	9b04      	ldr	r3, [sp, #16]
 80063fa:	f1c0 001c 	rsb	r0, r0, #28
 80063fe:	4403      	add	r3, r0
 8006400:	9304      	str	r3, [sp, #16]
 8006402:	9b05      	ldr	r3, [sp, #20]
 8006404:	4480      	add	r8, r0
 8006406:	4403      	add	r3, r0
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	9b04      	ldr	r3, [sp, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dd05      	ble.n	800641c <_dtoa_r+0x724>
 8006410:	4629      	mov	r1, r5
 8006412:	461a      	mov	r2, r3
 8006414:	4630      	mov	r0, r6
 8006416:	f000 fceb 	bl	8006df0 <__lshift>
 800641a:	4605      	mov	r5, r0
 800641c:	9b05      	ldr	r3, [sp, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	dd05      	ble.n	800642e <_dtoa_r+0x736>
 8006422:	4621      	mov	r1, r4
 8006424:	461a      	mov	r2, r3
 8006426:	4630      	mov	r0, r6
 8006428:	f000 fce2 	bl	8006df0 <__lshift>
 800642c:	4604      	mov	r4, r0
 800642e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d071      	beq.n	8006518 <_dtoa_r+0x820>
 8006434:	4621      	mov	r1, r4
 8006436:	4628      	mov	r0, r5
 8006438:	f000 fd46 	bl	8006ec8 <__mcmp>
 800643c:	2800      	cmp	r0, #0
 800643e:	da6b      	bge.n	8006518 <_dtoa_r+0x820>
 8006440:	2300      	movs	r3, #0
 8006442:	4629      	mov	r1, r5
 8006444:	220a      	movs	r2, #10
 8006446:	4630      	mov	r0, r6
 8006448:	f000 fb24 	bl	8006a94 <__multadd>
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006452:	4605      	mov	r5, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8197 	beq.w	8006788 <_dtoa_r+0xa90>
 800645a:	4639      	mov	r1, r7
 800645c:	2300      	movs	r3, #0
 800645e:	220a      	movs	r2, #10
 8006460:	4630      	mov	r0, r6
 8006462:	f000 fb17 	bl	8006a94 <__multadd>
 8006466:	f1ba 0f00 	cmp.w	sl, #0
 800646a:	4607      	mov	r7, r0
 800646c:	f300 8093 	bgt.w	8006596 <_dtoa_r+0x89e>
 8006470:	9b06      	ldr	r3, [sp, #24]
 8006472:	2b02      	cmp	r3, #2
 8006474:	dc57      	bgt.n	8006526 <_dtoa_r+0x82e>
 8006476:	e08e      	b.n	8006596 <_dtoa_r+0x89e>
 8006478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800647a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800647e:	e751      	b.n	8006324 <_dtoa_r+0x62c>
 8006480:	f109 34ff 	add.w	r4, r9, #4294967295
 8006484:	42a3      	cmp	r3, r4
 8006486:	bfbf      	itttt	lt
 8006488:	1ae2      	sublt	r2, r4, r3
 800648a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800648c:	189b      	addlt	r3, r3, r2
 800648e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006490:	bfae      	itee	ge
 8006492:	1b1c      	subge	r4, r3, r4
 8006494:	4623      	movlt	r3, r4
 8006496:	2400      	movlt	r4, #0
 8006498:	f1b9 0f00 	cmp.w	r9, #0
 800649c:	bfb5      	itete	lt
 800649e:	9a04      	ldrlt	r2, [sp, #16]
 80064a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80064a4:	eba2 0809 	sublt.w	r8, r2, r9
 80064a8:	464a      	movge	r2, r9
 80064aa:	bfb8      	it	lt
 80064ac:	2200      	movlt	r2, #0
 80064ae:	e73c      	b.n	800632a <_dtoa_r+0x632>
 80064b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80064b4:	9f07      	ldr	r7, [sp, #28]
 80064b6:	461c      	mov	r4, r3
 80064b8:	e744      	b.n	8006344 <_dtoa_r+0x64c>
 80064ba:	461a      	mov	r2, r3
 80064bc:	e770      	b.n	80063a0 <_dtoa_r+0x6a8>
 80064be:	9b06      	ldr	r3, [sp, #24]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	dc18      	bgt.n	80064f6 <_dtoa_r+0x7fe>
 80064c4:	9b02      	ldr	r3, [sp, #8]
 80064c6:	b9b3      	cbnz	r3, 80064f6 <_dtoa_r+0x7fe>
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80064ce:	b9a2      	cbnz	r2, 80064fa <_dtoa_r+0x802>
 80064d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064d4:	0d12      	lsrs	r2, r2, #20
 80064d6:	0512      	lsls	r2, r2, #20
 80064d8:	b18a      	cbz	r2, 80064fe <_dtoa_r+0x806>
 80064da:	9b04      	ldr	r3, [sp, #16]
 80064dc:	3301      	adds	r3, #1
 80064de:	9304      	str	r3, [sp, #16]
 80064e0:	9b05      	ldr	r3, [sp, #20]
 80064e2:	3301      	adds	r3, #1
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	2301      	movs	r3, #1
 80064e8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f47f af70 	bne.w	80063d2 <_dtoa_r+0x6da>
 80064f2:	2001      	movs	r0, #1
 80064f4:	e775      	b.n	80063e2 <_dtoa_r+0x6ea>
 80064f6:	2300      	movs	r3, #0
 80064f8:	e7f6      	b.n	80064e8 <_dtoa_r+0x7f0>
 80064fa:	9b02      	ldr	r3, [sp, #8]
 80064fc:	e7f4      	b.n	80064e8 <_dtoa_r+0x7f0>
 80064fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006500:	e7f3      	b.n	80064ea <_dtoa_r+0x7f2>
 8006502:	d082      	beq.n	800640a <_dtoa_r+0x712>
 8006504:	9b04      	ldr	r3, [sp, #16]
 8006506:	321c      	adds	r2, #28
 8006508:	4413      	add	r3, r2
 800650a:	9304      	str	r3, [sp, #16]
 800650c:	9b05      	ldr	r3, [sp, #20]
 800650e:	4490      	add	r8, r2
 8006510:	4413      	add	r3, r2
 8006512:	e779      	b.n	8006408 <_dtoa_r+0x710>
 8006514:	4602      	mov	r2, r0
 8006516:	e7f5      	b.n	8006504 <_dtoa_r+0x80c>
 8006518:	f1b9 0f00 	cmp.w	r9, #0
 800651c:	dc36      	bgt.n	800658c <_dtoa_r+0x894>
 800651e:	9b06      	ldr	r3, [sp, #24]
 8006520:	2b02      	cmp	r3, #2
 8006522:	dd33      	ble.n	800658c <_dtoa_r+0x894>
 8006524:	46ca      	mov	sl, r9
 8006526:	f1ba 0f00 	cmp.w	sl, #0
 800652a:	d10d      	bne.n	8006548 <_dtoa_r+0x850>
 800652c:	4621      	mov	r1, r4
 800652e:	4653      	mov	r3, sl
 8006530:	2205      	movs	r2, #5
 8006532:	4630      	mov	r0, r6
 8006534:	f000 faae 	bl	8006a94 <__multadd>
 8006538:	4601      	mov	r1, r0
 800653a:	4604      	mov	r4, r0
 800653c:	4628      	mov	r0, r5
 800653e:	f000 fcc3 	bl	8006ec8 <__mcmp>
 8006542:	2800      	cmp	r0, #0
 8006544:	f73f ade4 	bgt.w	8006110 <_dtoa_r+0x418>
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800654e:	ea6f 0b03 	mvn.w	fp, r3
 8006552:	f04f 0900 	mov.w	r9, #0
 8006556:	4621      	mov	r1, r4
 8006558:	4630      	mov	r0, r6
 800655a:	f000 fa79 	bl	8006a50 <_Bfree>
 800655e:	2f00      	cmp	r7, #0
 8006560:	f43f aea1 	beq.w	80062a6 <_dtoa_r+0x5ae>
 8006564:	f1b9 0f00 	cmp.w	r9, #0
 8006568:	d005      	beq.n	8006576 <_dtoa_r+0x87e>
 800656a:	45b9      	cmp	r9, r7
 800656c:	d003      	beq.n	8006576 <_dtoa_r+0x87e>
 800656e:	4649      	mov	r1, r9
 8006570:	4630      	mov	r0, r6
 8006572:	f000 fa6d 	bl	8006a50 <_Bfree>
 8006576:	4639      	mov	r1, r7
 8006578:	4630      	mov	r0, r6
 800657a:	f000 fa69 	bl	8006a50 <_Bfree>
 800657e:	e692      	b.n	80062a6 <_dtoa_r+0x5ae>
 8006580:	2400      	movs	r4, #0
 8006582:	4627      	mov	r7, r4
 8006584:	e7e0      	b.n	8006548 <_dtoa_r+0x850>
 8006586:	4693      	mov	fp, r2
 8006588:	4627      	mov	r7, r4
 800658a:	e5c1      	b.n	8006110 <_dtoa_r+0x418>
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	46ca      	mov	sl, r9
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 8100 	beq.w	8006796 <_dtoa_r+0xa9e>
 8006596:	f1b8 0f00 	cmp.w	r8, #0
 800659a:	dd05      	ble.n	80065a8 <_dtoa_r+0x8b0>
 800659c:	4639      	mov	r1, r7
 800659e:	4642      	mov	r2, r8
 80065a0:	4630      	mov	r0, r6
 80065a2:	f000 fc25 	bl	8006df0 <__lshift>
 80065a6:	4607      	mov	r7, r0
 80065a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d05d      	beq.n	800666a <_dtoa_r+0x972>
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	4630      	mov	r0, r6
 80065b2:	f000 fa0d 	bl	80069d0 <_Balloc>
 80065b6:	4680      	mov	r8, r0
 80065b8:	b928      	cbnz	r0, 80065c6 <_dtoa_r+0x8ce>
 80065ba:	4b82      	ldr	r3, [pc, #520]	; (80067c4 <_dtoa_r+0xacc>)
 80065bc:	4602      	mov	r2, r0
 80065be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80065c2:	f7ff bbb1 	b.w	8005d28 <_dtoa_r+0x30>
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	3202      	adds	r2, #2
 80065ca:	0092      	lsls	r2, r2, #2
 80065cc:	f107 010c 	add.w	r1, r7, #12
 80065d0:	300c      	adds	r0, #12
 80065d2:	f000 ffa9 	bl	8007528 <memcpy>
 80065d6:	2201      	movs	r2, #1
 80065d8:	4641      	mov	r1, r8
 80065da:	4630      	mov	r0, r6
 80065dc:	f000 fc08 	bl	8006df0 <__lshift>
 80065e0:	9b01      	ldr	r3, [sp, #4]
 80065e2:	3301      	adds	r3, #1
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	4453      	add	r3, sl
 80065ea:	9308      	str	r3, [sp, #32]
 80065ec:	9b02      	ldr	r3, [sp, #8]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	46b9      	mov	r9, r7
 80065f4:	9307      	str	r3, [sp, #28]
 80065f6:	4607      	mov	r7, r0
 80065f8:	9b04      	ldr	r3, [sp, #16]
 80065fa:	4621      	mov	r1, r4
 80065fc:	3b01      	subs	r3, #1
 80065fe:	4628      	mov	r0, r5
 8006600:	9302      	str	r3, [sp, #8]
 8006602:	f7ff faf0 	bl	8005be6 <quorem>
 8006606:	4603      	mov	r3, r0
 8006608:	3330      	adds	r3, #48	; 0x30
 800660a:	9005      	str	r0, [sp, #20]
 800660c:	4649      	mov	r1, r9
 800660e:	4628      	mov	r0, r5
 8006610:	9309      	str	r3, [sp, #36]	; 0x24
 8006612:	f000 fc59 	bl	8006ec8 <__mcmp>
 8006616:	463a      	mov	r2, r7
 8006618:	4682      	mov	sl, r0
 800661a:	4621      	mov	r1, r4
 800661c:	4630      	mov	r0, r6
 800661e:	f000 fc6f 	bl	8006f00 <__mdiff>
 8006622:	68c2      	ldr	r2, [r0, #12]
 8006624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006626:	4680      	mov	r8, r0
 8006628:	bb0a      	cbnz	r2, 800666e <_dtoa_r+0x976>
 800662a:	4601      	mov	r1, r0
 800662c:	4628      	mov	r0, r5
 800662e:	f000 fc4b 	bl	8006ec8 <__mcmp>
 8006632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006634:	4602      	mov	r2, r0
 8006636:	4641      	mov	r1, r8
 8006638:	4630      	mov	r0, r6
 800663a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800663e:	f000 fa07 	bl	8006a50 <_Bfree>
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006646:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800664a:	ea43 0102 	orr.w	r1, r3, r2
 800664e:	9b07      	ldr	r3, [sp, #28]
 8006650:	4319      	orrs	r1, r3
 8006652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006654:	d10d      	bne.n	8006672 <_dtoa_r+0x97a>
 8006656:	2b39      	cmp	r3, #57	; 0x39
 8006658:	d029      	beq.n	80066ae <_dtoa_r+0x9b6>
 800665a:	f1ba 0f00 	cmp.w	sl, #0
 800665e:	dd01      	ble.n	8006664 <_dtoa_r+0x96c>
 8006660:	9b05      	ldr	r3, [sp, #20]
 8006662:	3331      	adds	r3, #49	; 0x31
 8006664:	9a02      	ldr	r2, [sp, #8]
 8006666:	7013      	strb	r3, [r2, #0]
 8006668:	e775      	b.n	8006556 <_dtoa_r+0x85e>
 800666a:	4638      	mov	r0, r7
 800666c:	e7b8      	b.n	80065e0 <_dtoa_r+0x8e8>
 800666e:	2201      	movs	r2, #1
 8006670:	e7e1      	b.n	8006636 <_dtoa_r+0x93e>
 8006672:	f1ba 0f00 	cmp.w	sl, #0
 8006676:	db06      	blt.n	8006686 <_dtoa_r+0x98e>
 8006678:	9906      	ldr	r1, [sp, #24]
 800667a:	ea41 0a0a 	orr.w	sl, r1, sl
 800667e:	9907      	ldr	r1, [sp, #28]
 8006680:	ea5a 0a01 	orrs.w	sl, sl, r1
 8006684:	d120      	bne.n	80066c8 <_dtoa_r+0x9d0>
 8006686:	2a00      	cmp	r2, #0
 8006688:	ddec      	ble.n	8006664 <_dtoa_r+0x96c>
 800668a:	4629      	mov	r1, r5
 800668c:	2201      	movs	r2, #1
 800668e:	4630      	mov	r0, r6
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	f000 fbad 	bl	8006df0 <__lshift>
 8006696:	4621      	mov	r1, r4
 8006698:	4605      	mov	r5, r0
 800669a:	f000 fc15 	bl	8006ec8 <__mcmp>
 800669e:	2800      	cmp	r0, #0
 80066a0:	9b04      	ldr	r3, [sp, #16]
 80066a2:	dc02      	bgt.n	80066aa <_dtoa_r+0x9b2>
 80066a4:	d1de      	bne.n	8006664 <_dtoa_r+0x96c>
 80066a6:	07da      	lsls	r2, r3, #31
 80066a8:	d5dc      	bpl.n	8006664 <_dtoa_r+0x96c>
 80066aa:	2b39      	cmp	r3, #57	; 0x39
 80066ac:	d1d8      	bne.n	8006660 <_dtoa_r+0x968>
 80066ae:	9a02      	ldr	r2, [sp, #8]
 80066b0:	2339      	movs	r3, #57	; 0x39
 80066b2:	7013      	strb	r3, [r2, #0]
 80066b4:	4643      	mov	r3, r8
 80066b6:	4698      	mov	r8, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80066be:	2a39      	cmp	r2, #57	; 0x39
 80066c0:	d051      	beq.n	8006766 <_dtoa_r+0xa6e>
 80066c2:	3201      	adds	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e746      	b.n	8006556 <_dtoa_r+0x85e>
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	dd03      	ble.n	80066d4 <_dtoa_r+0x9dc>
 80066cc:	2b39      	cmp	r3, #57	; 0x39
 80066ce:	d0ee      	beq.n	80066ae <_dtoa_r+0x9b6>
 80066d0:	3301      	adds	r3, #1
 80066d2:	e7c7      	b.n	8006664 <_dtoa_r+0x96c>
 80066d4:	9a04      	ldr	r2, [sp, #16]
 80066d6:	9908      	ldr	r1, [sp, #32]
 80066d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066dc:	428a      	cmp	r2, r1
 80066de:	d02b      	beq.n	8006738 <_dtoa_r+0xa40>
 80066e0:	4629      	mov	r1, r5
 80066e2:	2300      	movs	r3, #0
 80066e4:	220a      	movs	r2, #10
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 f9d4 	bl	8006a94 <__multadd>
 80066ec:	45b9      	cmp	r9, r7
 80066ee:	4605      	mov	r5, r0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	f04f 020a 	mov.w	r2, #10
 80066f8:	4649      	mov	r1, r9
 80066fa:	4630      	mov	r0, r6
 80066fc:	d107      	bne.n	800670e <_dtoa_r+0xa16>
 80066fe:	f000 f9c9 	bl	8006a94 <__multadd>
 8006702:	4681      	mov	r9, r0
 8006704:	4607      	mov	r7, r0
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	e774      	b.n	80065f8 <_dtoa_r+0x900>
 800670e:	f000 f9c1 	bl	8006a94 <__multadd>
 8006712:	4639      	mov	r1, r7
 8006714:	4681      	mov	r9, r0
 8006716:	2300      	movs	r3, #0
 8006718:	220a      	movs	r2, #10
 800671a:	4630      	mov	r0, r6
 800671c:	f000 f9ba 	bl	8006a94 <__multadd>
 8006720:	4607      	mov	r7, r0
 8006722:	e7f0      	b.n	8006706 <_dtoa_r+0xa0e>
 8006724:	f1ba 0f00 	cmp.w	sl, #0
 8006728:	9a01      	ldr	r2, [sp, #4]
 800672a:	bfcc      	ite	gt
 800672c:	46d0      	movgt	r8, sl
 800672e:	f04f 0801 	movle.w	r8, #1
 8006732:	4490      	add	r8, r2
 8006734:	f04f 0900 	mov.w	r9, #0
 8006738:	4629      	mov	r1, r5
 800673a:	2201      	movs	r2, #1
 800673c:	4630      	mov	r0, r6
 800673e:	9302      	str	r3, [sp, #8]
 8006740:	f000 fb56 	bl	8006df0 <__lshift>
 8006744:	4621      	mov	r1, r4
 8006746:	4605      	mov	r5, r0
 8006748:	f000 fbbe 	bl	8006ec8 <__mcmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	dcb1      	bgt.n	80066b4 <_dtoa_r+0x9bc>
 8006750:	d102      	bne.n	8006758 <_dtoa_r+0xa60>
 8006752:	9b02      	ldr	r3, [sp, #8]
 8006754:	07db      	lsls	r3, r3, #31
 8006756:	d4ad      	bmi.n	80066b4 <_dtoa_r+0x9bc>
 8006758:	4643      	mov	r3, r8
 800675a:	4698      	mov	r8, r3
 800675c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006760:	2a30      	cmp	r2, #48	; 0x30
 8006762:	d0fa      	beq.n	800675a <_dtoa_r+0xa62>
 8006764:	e6f7      	b.n	8006556 <_dtoa_r+0x85e>
 8006766:	9a01      	ldr	r2, [sp, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d1a4      	bne.n	80066b6 <_dtoa_r+0x9be>
 800676c:	f10b 0b01 	add.w	fp, fp, #1
 8006770:	2331      	movs	r3, #49	; 0x31
 8006772:	e778      	b.n	8006666 <_dtoa_r+0x96e>
 8006774:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <_dtoa_r+0xad0>)
 8006776:	f7ff bb2a 	b.w	8005dce <_dtoa_r+0xd6>
 800677a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800677c:	2b00      	cmp	r3, #0
 800677e:	f47f ab05 	bne.w	8005d8c <_dtoa_r+0x94>
 8006782:	4b12      	ldr	r3, [pc, #72]	; (80067cc <_dtoa_r+0xad4>)
 8006784:	f7ff bb23 	b.w	8005dce <_dtoa_r+0xd6>
 8006788:	f1ba 0f00 	cmp.w	sl, #0
 800678c:	dc03      	bgt.n	8006796 <_dtoa_r+0xa9e>
 800678e:	9b06      	ldr	r3, [sp, #24]
 8006790:	2b02      	cmp	r3, #2
 8006792:	f73f aec8 	bgt.w	8006526 <_dtoa_r+0x82e>
 8006796:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800679a:	4621      	mov	r1, r4
 800679c:	4628      	mov	r0, r5
 800679e:	f7ff fa22 	bl	8005be6 <quorem>
 80067a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80067a6:	f808 3b01 	strb.w	r3, [r8], #1
 80067aa:	9a01      	ldr	r2, [sp, #4]
 80067ac:	eba8 0202 	sub.w	r2, r8, r2
 80067b0:	4592      	cmp	sl, r2
 80067b2:	ddb7      	ble.n	8006724 <_dtoa_r+0xa2c>
 80067b4:	4629      	mov	r1, r5
 80067b6:	2300      	movs	r3, #0
 80067b8:	220a      	movs	r2, #10
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 f96a 	bl	8006a94 <__multadd>
 80067c0:	4605      	mov	r5, r0
 80067c2:	e7ea      	b.n	800679a <_dtoa_r+0xaa2>
 80067c4:	08007ce8 	.word	0x08007ce8
 80067c8:	08007c48 	.word	0x08007c48
 80067cc:	08007c6c 	.word	0x08007c6c

080067d0 <_free_r>:
 80067d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067d2:	2900      	cmp	r1, #0
 80067d4:	d044      	beq.n	8006860 <_free_r+0x90>
 80067d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067da:	9001      	str	r0, [sp, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f1a1 0404 	sub.w	r4, r1, #4
 80067e2:	bfb8      	it	lt
 80067e4:	18e4      	addlt	r4, r4, r3
 80067e6:	f000 f8e7 	bl	80069b8 <__malloc_lock>
 80067ea:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <_free_r+0x94>)
 80067ec:	9801      	ldr	r0, [sp, #4]
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	b933      	cbnz	r3, 8006800 <_free_r+0x30>
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	6014      	str	r4, [r2, #0]
 80067f6:	b003      	add	sp, #12
 80067f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067fc:	f000 b8e2 	b.w	80069c4 <__malloc_unlock>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d908      	bls.n	8006816 <_free_r+0x46>
 8006804:	6825      	ldr	r5, [r4, #0]
 8006806:	1961      	adds	r1, r4, r5
 8006808:	428b      	cmp	r3, r1
 800680a:	bf01      	itttt	eq
 800680c:	6819      	ldreq	r1, [r3, #0]
 800680e:	685b      	ldreq	r3, [r3, #4]
 8006810:	1949      	addeq	r1, r1, r5
 8006812:	6021      	streq	r1, [r4, #0]
 8006814:	e7ed      	b.n	80067f2 <_free_r+0x22>
 8006816:	461a      	mov	r2, r3
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	b10b      	cbz	r3, 8006820 <_free_r+0x50>
 800681c:	42a3      	cmp	r3, r4
 800681e:	d9fa      	bls.n	8006816 <_free_r+0x46>
 8006820:	6811      	ldr	r1, [r2, #0]
 8006822:	1855      	adds	r5, r2, r1
 8006824:	42a5      	cmp	r5, r4
 8006826:	d10b      	bne.n	8006840 <_free_r+0x70>
 8006828:	6824      	ldr	r4, [r4, #0]
 800682a:	4421      	add	r1, r4
 800682c:	1854      	adds	r4, r2, r1
 800682e:	42a3      	cmp	r3, r4
 8006830:	6011      	str	r1, [r2, #0]
 8006832:	d1e0      	bne.n	80067f6 <_free_r+0x26>
 8006834:	681c      	ldr	r4, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	6053      	str	r3, [r2, #4]
 800683a:	440c      	add	r4, r1
 800683c:	6014      	str	r4, [r2, #0]
 800683e:	e7da      	b.n	80067f6 <_free_r+0x26>
 8006840:	d902      	bls.n	8006848 <_free_r+0x78>
 8006842:	230c      	movs	r3, #12
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	e7d6      	b.n	80067f6 <_free_r+0x26>
 8006848:	6825      	ldr	r5, [r4, #0]
 800684a:	1961      	adds	r1, r4, r5
 800684c:	428b      	cmp	r3, r1
 800684e:	bf04      	itt	eq
 8006850:	6819      	ldreq	r1, [r3, #0]
 8006852:	685b      	ldreq	r3, [r3, #4]
 8006854:	6063      	str	r3, [r4, #4]
 8006856:	bf04      	itt	eq
 8006858:	1949      	addeq	r1, r1, r5
 800685a:	6021      	streq	r1, [r4, #0]
 800685c:	6054      	str	r4, [r2, #4]
 800685e:	e7ca      	b.n	80067f6 <_free_r+0x26>
 8006860:	b003      	add	sp, #12
 8006862:	bd30      	pop	{r4, r5, pc}
 8006864:	20000b70 	.word	0x20000b70

08006868 <malloc>:
 8006868:	4b02      	ldr	r3, [pc, #8]	; (8006874 <malloc+0xc>)
 800686a:	4601      	mov	r1, r0
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f000 b823 	b.w	80068b8 <_malloc_r>
 8006872:	bf00      	nop
 8006874:	20000064 	.word	0x20000064

08006878 <sbrk_aligned>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4e0e      	ldr	r6, [pc, #56]	; (80068b4 <sbrk_aligned+0x3c>)
 800687c:	460c      	mov	r4, r1
 800687e:	6831      	ldr	r1, [r6, #0]
 8006880:	4605      	mov	r5, r0
 8006882:	b911      	cbnz	r1, 800688a <sbrk_aligned+0x12>
 8006884:	f000 fe40 	bl	8007508 <_sbrk_r>
 8006888:	6030      	str	r0, [r6, #0]
 800688a:	4621      	mov	r1, r4
 800688c:	4628      	mov	r0, r5
 800688e:	f000 fe3b 	bl	8007508 <_sbrk_r>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d00a      	beq.n	80068ac <sbrk_aligned+0x34>
 8006896:	1cc4      	adds	r4, r0, #3
 8006898:	f024 0403 	bic.w	r4, r4, #3
 800689c:	42a0      	cmp	r0, r4
 800689e:	d007      	beq.n	80068b0 <sbrk_aligned+0x38>
 80068a0:	1a21      	subs	r1, r4, r0
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 fe30 	bl	8007508 <_sbrk_r>
 80068a8:	3001      	adds	r0, #1
 80068aa:	d101      	bne.n	80068b0 <sbrk_aligned+0x38>
 80068ac:	f04f 34ff 	mov.w	r4, #4294967295
 80068b0:	4620      	mov	r0, r4
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	20000b74 	.word	0x20000b74

080068b8 <_malloc_r>:
 80068b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068bc:	1ccd      	adds	r5, r1, #3
 80068be:	f025 0503 	bic.w	r5, r5, #3
 80068c2:	3508      	adds	r5, #8
 80068c4:	2d0c      	cmp	r5, #12
 80068c6:	bf38      	it	cc
 80068c8:	250c      	movcc	r5, #12
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	4607      	mov	r7, r0
 80068ce:	db01      	blt.n	80068d4 <_malloc_r+0x1c>
 80068d0:	42a9      	cmp	r1, r5
 80068d2:	d905      	bls.n	80068e0 <_malloc_r+0x28>
 80068d4:	230c      	movs	r3, #12
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	2600      	movs	r6, #0
 80068da:	4630      	mov	r0, r6
 80068dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80069b4 <_malloc_r+0xfc>
 80068e4:	f000 f868 	bl	80069b8 <__malloc_lock>
 80068e8:	f8d8 3000 	ldr.w	r3, [r8]
 80068ec:	461c      	mov	r4, r3
 80068ee:	bb5c      	cbnz	r4, 8006948 <_malloc_r+0x90>
 80068f0:	4629      	mov	r1, r5
 80068f2:	4638      	mov	r0, r7
 80068f4:	f7ff ffc0 	bl	8006878 <sbrk_aligned>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	4604      	mov	r4, r0
 80068fc:	d155      	bne.n	80069aa <_malloc_r+0xf2>
 80068fe:	f8d8 4000 	ldr.w	r4, [r8]
 8006902:	4626      	mov	r6, r4
 8006904:	2e00      	cmp	r6, #0
 8006906:	d145      	bne.n	8006994 <_malloc_r+0xdc>
 8006908:	2c00      	cmp	r4, #0
 800690a:	d048      	beq.n	800699e <_malloc_r+0xe6>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	4631      	mov	r1, r6
 8006910:	4638      	mov	r0, r7
 8006912:	eb04 0903 	add.w	r9, r4, r3
 8006916:	f000 fdf7 	bl	8007508 <_sbrk_r>
 800691a:	4581      	cmp	r9, r0
 800691c:	d13f      	bne.n	800699e <_malloc_r+0xe6>
 800691e:	6821      	ldr	r1, [r4, #0]
 8006920:	1a6d      	subs	r5, r5, r1
 8006922:	4629      	mov	r1, r5
 8006924:	4638      	mov	r0, r7
 8006926:	f7ff ffa7 	bl	8006878 <sbrk_aligned>
 800692a:	3001      	adds	r0, #1
 800692c:	d037      	beq.n	800699e <_malloc_r+0xe6>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	442b      	add	r3, r5
 8006932:	6023      	str	r3, [r4, #0]
 8006934:	f8d8 3000 	ldr.w	r3, [r8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d038      	beq.n	80069ae <_malloc_r+0xf6>
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	42a2      	cmp	r2, r4
 8006940:	d12b      	bne.n	800699a <_malloc_r+0xe2>
 8006942:	2200      	movs	r2, #0
 8006944:	605a      	str	r2, [r3, #4]
 8006946:	e00f      	b.n	8006968 <_malloc_r+0xb0>
 8006948:	6822      	ldr	r2, [r4, #0]
 800694a:	1b52      	subs	r2, r2, r5
 800694c:	d41f      	bmi.n	800698e <_malloc_r+0xd6>
 800694e:	2a0b      	cmp	r2, #11
 8006950:	d917      	bls.n	8006982 <_malloc_r+0xca>
 8006952:	1961      	adds	r1, r4, r5
 8006954:	42a3      	cmp	r3, r4
 8006956:	6025      	str	r5, [r4, #0]
 8006958:	bf18      	it	ne
 800695a:	6059      	strne	r1, [r3, #4]
 800695c:	6863      	ldr	r3, [r4, #4]
 800695e:	bf08      	it	eq
 8006960:	f8c8 1000 	streq.w	r1, [r8]
 8006964:	5162      	str	r2, [r4, r5]
 8006966:	604b      	str	r3, [r1, #4]
 8006968:	4638      	mov	r0, r7
 800696a:	f104 060b 	add.w	r6, r4, #11
 800696e:	f000 f829 	bl	80069c4 <__malloc_unlock>
 8006972:	f026 0607 	bic.w	r6, r6, #7
 8006976:	1d23      	adds	r3, r4, #4
 8006978:	1af2      	subs	r2, r6, r3
 800697a:	d0ae      	beq.n	80068da <_malloc_r+0x22>
 800697c:	1b9b      	subs	r3, r3, r6
 800697e:	50a3      	str	r3, [r4, r2]
 8006980:	e7ab      	b.n	80068da <_malloc_r+0x22>
 8006982:	42a3      	cmp	r3, r4
 8006984:	6862      	ldr	r2, [r4, #4]
 8006986:	d1dd      	bne.n	8006944 <_malloc_r+0x8c>
 8006988:	f8c8 2000 	str.w	r2, [r8]
 800698c:	e7ec      	b.n	8006968 <_malloc_r+0xb0>
 800698e:	4623      	mov	r3, r4
 8006990:	6864      	ldr	r4, [r4, #4]
 8006992:	e7ac      	b.n	80068ee <_malloc_r+0x36>
 8006994:	4634      	mov	r4, r6
 8006996:	6876      	ldr	r6, [r6, #4]
 8006998:	e7b4      	b.n	8006904 <_malloc_r+0x4c>
 800699a:	4613      	mov	r3, r2
 800699c:	e7cc      	b.n	8006938 <_malloc_r+0x80>
 800699e:	230c      	movs	r3, #12
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4638      	mov	r0, r7
 80069a4:	f000 f80e 	bl	80069c4 <__malloc_unlock>
 80069a8:	e797      	b.n	80068da <_malloc_r+0x22>
 80069aa:	6025      	str	r5, [r4, #0]
 80069ac:	e7dc      	b.n	8006968 <_malloc_r+0xb0>
 80069ae:	605b      	str	r3, [r3, #4]
 80069b0:	deff      	udf	#255	; 0xff
 80069b2:	bf00      	nop
 80069b4:	20000b70 	.word	0x20000b70

080069b8 <__malloc_lock>:
 80069b8:	4801      	ldr	r0, [pc, #4]	; (80069c0 <__malloc_lock+0x8>)
 80069ba:	f7ff b912 	b.w	8005be2 <__retarget_lock_acquire_recursive>
 80069be:	bf00      	nop
 80069c0:	20000b6c 	.word	0x20000b6c

080069c4 <__malloc_unlock>:
 80069c4:	4801      	ldr	r0, [pc, #4]	; (80069cc <__malloc_unlock+0x8>)
 80069c6:	f7ff b90d 	b.w	8005be4 <__retarget_lock_release_recursive>
 80069ca:	bf00      	nop
 80069cc:	20000b6c 	.word	0x20000b6c

080069d0 <_Balloc>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	69c6      	ldr	r6, [r0, #28]
 80069d4:	4604      	mov	r4, r0
 80069d6:	460d      	mov	r5, r1
 80069d8:	b976      	cbnz	r6, 80069f8 <_Balloc+0x28>
 80069da:	2010      	movs	r0, #16
 80069dc:	f7ff ff44 	bl	8006868 <malloc>
 80069e0:	4602      	mov	r2, r0
 80069e2:	61e0      	str	r0, [r4, #28]
 80069e4:	b920      	cbnz	r0, 80069f0 <_Balloc+0x20>
 80069e6:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <_Balloc+0x78>)
 80069e8:	4818      	ldr	r0, [pc, #96]	; (8006a4c <_Balloc+0x7c>)
 80069ea:	216b      	movs	r1, #107	; 0x6b
 80069ec:	f000 fdaa 	bl	8007544 <__assert_func>
 80069f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069f4:	6006      	str	r6, [r0, #0]
 80069f6:	60c6      	str	r6, [r0, #12]
 80069f8:	69e6      	ldr	r6, [r4, #28]
 80069fa:	68f3      	ldr	r3, [r6, #12]
 80069fc:	b183      	cbz	r3, 8006a20 <_Balloc+0x50>
 80069fe:	69e3      	ldr	r3, [r4, #28]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a06:	b9b8      	cbnz	r0, 8006a38 <_Balloc+0x68>
 8006a08:	2101      	movs	r1, #1
 8006a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a0e:	1d72      	adds	r2, r6, #5
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fdb4 	bl	8007580 <_calloc_r>
 8006a18:	b160      	cbz	r0, 8006a34 <_Balloc+0x64>
 8006a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a1e:	e00e      	b.n	8006a3e <_Balloc+0x6e>
 8006a20:	2221      	movs	r2, #33	; 0x21
 8006a22:	2104      	movs	r1, #4
 8006a24:	4620      	mov	r0, r4
 8006a26:	f000 fdab 	bl	8007580 <_calloc_r>
 8006a2a:	69e3      	ldr	r3, [r4, #28]
 8006a2c:	60f0      	str	r0, [r6, #12]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e4      	bne.n	80069fe <_Balloc+0x2e>
 8006a34:	2000      	movs	r0, #0
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	6802      	ldr	r2, [r0, #0]
 8006a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a44:	e7f7      	b.n	8006a36 <_Balloc+0x66>
 8006a46:	bf00      	nop
 8006a48:	08007c79 	.word	0x08007c79
 8006a4c:	08007cf9 	.word	0x08007cf9

08006a50 <_Bfree>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	69c6      	ldr	r6, [r0, #28]
 8006a54:	4605      	mov	r5, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	b976      	cbnz	r6, 8006a78 <_Bfree+0x28>
 8006a5a:	2010      	movs	r0, #16
 8006a5c:	f7ff ff04 	bl	8006868 <malloc>
 8006a60:	4602      	mov	r2, r0
 8006a62:	61e8      	str	r0, [r5, #28]
 8006a64:	b920      	cbnz	r0, 8006a70 <_Bfree+0x20>
 8006a66:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <_Bfree+0x3c>)
 8006a68:	4809      	ldr	r0, [pc, #36]	; (8006a90 <_Bfree+0x40>)
 8006a6a:	218f      	movs	r1, #143	; 0x8f
 8006a6c:	f000 fd6a 	bl	8007544 <__assert_func>
 8006a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a74:	6006      	str	r6, [r0, #0]
 8006a76:	60c6      	str	r6, [r0, #12]
 8006a78:	b13c      	cbz	r4, 8006a8a <_Bfree+0x3a>
 8006a7a:	69eb      	ldr	r3, [r5, #28]
 8006a7c:	6862      	ldr	r2, [r4, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a84:	6021      	str	r1, [r4, #0]
 8006a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	08007c79 	.word	0x08007c79
 8006a90:	08007cf9 	.word	0x08007cf9

08006a94 <__multadd>:
 8006a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a98:	690d      	ldr	r5, [r1, #16]
 8006a9a:	4607      	mov	r7, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	461e      	mov	r6, r3
 8006aa0:	f101 0c14 	add.w	ip, r1, #20
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8006aaa:	b299      	uxth	r1, r3
 8006aac:	fb02 6101 	mla	r1, r2, r1, r6
 8006ab0:	0c1e      	lsrs	r6, r3, #16
 8006ab2:	0c0b      	lsrs	r3, r1, #16
 8006ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8006ab8:	b289      	uxth	r1, r1
 8006aba:	3001      	adds	r0, #1
 8006abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ac0:	4285      	cmp	r5, r0
 8006ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aca:	dcec      	bgt.n	8006aa6 <__multadd+0x12>
 8006acc:	b30e      	cbz	r6, 8006b12 <__multadd+0x7e>
 8006ace:	68a3      	ldr	r3, [r4, #8]
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dc19      	bgt.n	8006b08 <__multadd+0x74>
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	3101      	adds	r1, #1
 8006ada:	f7ff ff79 	bl	80069d0 <_Balloc>
 8006ade:	4680      	mov	r8, r0
 8006ae0:	b928      	cbnz	r0, 8006aee <__multadd+0x5a>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <__multadd+0x84>)
 8006ae6:	480d      	ldr	r0, [pc, #52]	; (8006b1c <__multadd+0x88>)
 8006ae8:	21ba      	movs	r1, #186	; 0xba
 8006aea:	f000 fd2b 	bl	8007544 <__assert_func>
 8006aee:	6922      	ldr	r2, [r4, #16]
 8006af0:	3202      	adds	r2, #2
 8006af2:	f104 010c 	add.w	r1, r4, #12
 8006af6:	0092      	lsls	r2, r2, #2
 8006af8:	300c      	adds	r0, #12
 8006afa:	f000 fd15 	bl	8007528 <memcpy>
 8006afe:	4621      	mov	r1, r4
 8006b00:	4638      	mov	r0, r7
 8006b02:	f7ff ffa5 	bl	8006a50 <_Bfree>
 8006b06:	4644      	mov	r4, r8
 8006b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	615e      	str	r6, [r3, #20]
 8006b10:	6125      	str	r5, [r4, #16]
 8006b12:	4620      	mov	r0, r4
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	08007ce8 	.word	0x08007ce8
 8006b1c:	08007cf9 	.word	0x08007cf9

08006b20 <__hi0bits>:
 8006b20:	0c03      	lsrs	r3, r0, #16
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	b9d3      	cbnz	r3, 8006b5c <__hi0bits+0x3c>
 8006b26:	0400      	lsls	r0, r0, #16
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b2e:	bf04      	itt	eq
 8006b30:	0200      	lsleq	r0, r0, #8
 8006b32:	3308      	addeq	r3, #8
 8006b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b38:	bf04      	itt	eq
 8006b3a:	0100      	lsleq	r0, r0, #4
 8006b3c:	3304      	addeq	r3, #4
 8006b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b42:	bf04      	itt	eq
 8006b44:	0080      	lsleq	r0, r0, #2
 8006b46:	3302      	addeq	r3, #2
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	db05      	blt.n	8006b58 <__hi0bits+0x38>
 8006b4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b50:	f103 0301 	add.w	r3, r3, #1
 8006b54:	bf08      	it	eq
 8006b56:	2320      	moveq	r3, #32
 8006b58:	4618      	mov	r0, r3
 8006b5a:	4770      	bx	lr
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e7e4      	b.n	8006b2a <__hi0bits+0xa>

08006b60 <__lo0bits>:
 8006b60:	6803      	ldr	r3, [r0, #0]
 8006b62:	f013 0207 	ands.w	r2, r3, #7
 8006b66:	d00c      	beq.n	8006b82 <__lo0bits+0x22>
 8006b68:	07d9      	lsls	r1, r3, #31
 8006b6a:	d422      	bmi.n	8006bb2 <__lo0bits+0x52>
 8006b6c:	079a      	lsls	r2, r3, #30
 8006b6e:	bf49      	itett	mi
 8006b70:	085b      	lsrmi	r3, r3, #1
 8006b72:	089b      	lsrpl	r3, r3, #2
 8006b74:	6003      	strmi	r3, [r0, #0]
 8006b76:	2201      	movmi	r2, #1
 8006b78:	bf5c      	itt	pl
 8006b7a:	6003      	strpl	r3, [r0, #0]
 8006b7c:	2202      	movpl	r2, #2
 8006b7e:	4610      	mov	r0, r2
 8006b80:	4770      	bx	lr
 8006b82:	b299      	uxth	r1, r3
 8006b84:	b909      	cbnz	r1, 8006b8a <__lo0bits+0x2a>
 8006b86:	0c1b      	lsrs	r3, r3, #16
 8006b88:	2210      	movs	r2, #16
 8006b8a:	b2d9      	uxtb	r1, r3
 8006b8c:	b909      	cbnz	r1, 8006b92 <__lo0bits+0x32>
 8006b8e:	3208      	adds	r2, #8
 8006b90:	0a1b      	lsrs	r3, r3, #8
 8006b92:	0719      	lsls	r1, r3, #28
 8006b94:	bf04      	itt	eq
 8006b96:	091b      	lsreq	r3, r3, #4
 8006b98:	3204      	addeq	r2, #4
 8006b9a:	0799      	lsls	r1, r3, #30
 8006b9c:	bf04      	itt	eq
 8006b9e:	089b      	lsreq	r3, r3, #2
 8006ba0:	3202      	addeq	r2, #2
 8006ba2:	07d9      	lsls	r1, r3, #31
 8006ba4:	d403      	bmi.n	8006bae <__lo0bits+0x4e>
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	f102 0201 	add.w	r2, r2, #1
 8006bac:	d003      	beq.n	8006bb6 <__lo0bits+0x56>
 8006bae:	6003      	str	r3, [r0, #0]
 8006bb0:	e7e5      	b.n	8006b7e <__lo0bits+0x1e>
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	e7e3      	b.n	8006b7e <__lo0bits+0x1e>
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	e7e1      	b.n	8006b7e <__lo0bits+0x1e>
	...

08006bbc <__i2b>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	f7ff ff05 	bl	80069d0 <_Balloc>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	b928      	cbnz	r0, 8006bd6 <__i2b+0x1a>
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <__i2b+0x24>)
 8006bcc:	4805      	ldr	r0, [pc, #20]	; (8006be4 <__i2b+0x28>)
 8006bce:	f240 1145 	movw	r1, #325	; 0x145
 8006bd2:	f000 fcb7 	bl	8007544 <__assert_func>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	6144      	str	r4, [r0, #20]
 8006bda:	6103      	str	r3, [r0, #16]
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	bf00      	nop
 8006be0:	08007ce8 	.word	0x08007ce8
 8006be4:	08007cf9 	.word	0x08007cf9

08006be8 <__multiply>:
 8006be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	4691      	mov	r9, r2
 8006bee:	690a      	ldr	r2, [r1, #16]
 8006bf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	bfb8      	it	lt
 8006bf8:	460b      	movlt	r3, r1
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	bfbc      	itt	lt
 8006bfe:	464c      	movlt	r4, r9
 8006c00:	4699      	movlt	r9, r3
 8006c02:	6927      	ldr	r7, [r4, #16]
 8006c04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c08:	68a3      	ldr	r3, [r4, #8]
 8006c0a:	6861      	ldr	r1, [r4, #4]
 8006c0c:	eb07 060a 	add.w	r6, r7, sl
 8006c10:	42b3      	cmp	r3, r6
 8006c12:	b085      	sub	sp, #20
 8006c14:	bfb8      	it	lt
 8006c16:	3101      	addlt	r1, #1
 8006c18:	f7ff feda 	bl	80069d0 <_Balloc>
 8006c1c:	b930      	cbnz	r0, 8006c2c <__multiply+0x44>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	4b44      	ldr	r3, [pc, #272]	; (8006d34 <__multiply+0x14c>)
 8006c22:	4845      	ldr	r0, [pc, #276]	; (8006d38 <__multiply+0x150>)
 8006c24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006c28:	f000 fc8c 	bl	8007544 <__assert_func>
 8006c2c:	f100 0514 	add.w	r5, r0, #20
 8006c30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c34:	462b      	mov	r3, r5
 8006c36:	2200      	movs	r2, #0
 8006c38:	4543      	cmp	r3, r8
 8006c3a:	d321      	bcc.n	8006c80 <__multiply+0x98>
 8006c3c:	f104 0314 	add.w	r3, r4, #20
 8006c40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c44:	f109 0314 	add.w	r3, r9, #20
 8006c48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c4c:	9202      	str	r2, [sp, #8]
 8006c4e:	1b3a      	subs	r2, r7, r4
 8006c50:	3a15      	subs	r2, #21
 8006c52:	f022 0203 	bic.w	r2, r2, #3
 8006c56:	3204      	adds	r2, #4
 8006c58:	f104 0115 	add.w	r1, r4, #21
 8006c5c:	428f      	cmp	r7, r1
 8006c5e:	bf38      	it	cc
 8006c60:	2204      	movcc	r2, #4
 8006c62:	9201      	str	r2, [sp, #4]
 8006c64:	9a02      	ldr	r2, [sp, #8]
 8006c66:	9303      	str	r3, [sp, #12]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d80c      	bhi.n	8006c86 <__multiply+0x9e>
 8006c6c:	2e00      	cmp	r6, #0
 8006c6e:	dd03      	ble.n	8006c78 <__multiply+0x90>
 8006c70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d05b      	beq.n	8006d30 <__multiply+0x148>
 8006c78:	6106      	str	r6, [r0, #16]
 8006c7a:	b005      	add	sp, #20
 8006c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c80:	f843 2b04 	str.w	r2, [r3], #4
 8006c84:	e7d8      	b.n	8006c38 <__multiply+0x50>
 8006c86:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c8a:	f1ba 0f00 	cmp.w	sl, #0
 8006c8e:	d024      	beq.n	8006cda <__multiply+0xf2>
 8006c90:	f104 0e14 	add.w	lr, r4, #20
 8006c94:	46a9      	mov	r9, r5
 8006c96:	f04f 0c00 	mov.w	ip, #0
 8006c9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c9e:	f8d9 1000 	ldr.w	r1, [r9]
 8006ca2:	fa1f fb82 	uxth.w	fp, r2
 8006ca6:	b289      	uxth	r1, r1
 8006ca8:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8006cb4:	4461      	add	r1, ip
 8006cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cba:	fb0a c20b 	mla	r2, sl, fp, ip
 8006cbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cc2:	b289      	uxth	r1, r1
 8006cc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cc8:	4577      	cmp	r7, lr
 8006cca:	f849 1b04 	str.w	r1, [r9], #4
 8006cce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cd2:	d8e2      	bhi.n	8006c9a <__multiply+0xb2>
 8006cd4:	9a01      	ldr	r2, [sp, #4]
 8006cd6:	f845 c002 	str.w	ip, [r5, r2]
 8006cda:	9a03      	ldr	r2, [sp, #12]
 8006cdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	f1b9 0f00 	cmp.w	r9, #0
 8006ce6:	d021      	beq.n	8006d2c <__multiply+0x144>
 8006ce8:	6829      	ldr	r1, [r5, #0]
 8006cea:	f104 0c14 	add.w	ip, r4, #20
 8006cee:	46ae      	mov	lr, r5
 8006cf0:	f04f 0a00 	mov.w	sl, #0
 8006cf4:	f8bc b000 	ldrh.w	fp, [ip]
 8006cf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cfc:	fb09 220b 	mla	r2, r9, fp, r2
 8006d00:	4452      	add	r2, sl
 8006d02:	b289      	uxth	r1, r1
 8006d04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d08:	f84e 1b04 	str.w	r1, [lr], #4
 8006d0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d14:	f8be 1000 	ldrh.w	r1, [lr]
 8006d18:	fb09 110a 	mla	r1, r9, sl, r1
 8006d1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d20:	4567      	cmp	r7, ip
 8006d22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d26:	d8e5      	bhi.n	8006cf4 <__multiply+0x10c>
 8006d28:	9a01      	ldr	r2, [sp, #4]
 8006d2a:	50a9      	str	r1, [r5, r2]
 8006d2c:	3504      	adds	r5, #4
 8006d2e:	e799      	b.n	8006c64 <__multiply+0x7c>
 8006d30:	3e01      	subs	r6, #1
 8006d32:	e79b      	b.n	8006c6c <__multiply+0x84>
 8006d34:	08007ce8 	.word	0x08007ce8
 8006d38:	08007cf9 	.word	0x08007cf9

08006d3c <__pow5mult>:
 8006d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d40:	4615      	mov	r5, r2
 8006d42:	f012 0203 	ands.w	r2, r2, #3
 8006d46:	4606      	mov	r6, r0
 8006d48:	460f      	mov	r7, r1
 8006d4a:	d007      	beq.n	8006d5c <__pow5mult+0x20>
 8006d4c:	4c25      	ldr	r4, [pc, #148]	; (8006de4 <__pow5mult+0xa8>)
 8006d4e:	3a01      	subs	r2, #1
 8006d50:	2300      	movs	r3, #0
 8006d52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d56:	f7ff fe9d 	bl	8006a94 <__multadd>
 8006d5a:	4607      	mov	r7, r0
 8006d5c:	10ad      	asrs	r5, r5, #2
 8006d5e:	d03d      	beq.n	8006ddc <__pow5mult+0xa0>
 8006d60:	69f4      	ldr	r4, [r6, #28]
 8006d62:	b97c      	cbnz	r4, 8006d84 <__pow5mult+0x48>
 8006d64:	2010      	movs	r0, #16
 8006d66:	f7ff fd7f 	bl	8006868 <malloc>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	61f0      	str	r0, [r6, #28]
 8006d6e:	b928      	cbnz	r0, 8006d7c <__pow5mult+0x40>
 8006d70:	4b1d      	ldr	r3, [pc, #116]	; (8006de8 <__pow5mult+0xac>)
 8006d72:	481e      	ldr	r0, [pc, #120]	; (8006dec <__pow5mult+0xb0>)
 8006d74:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006d78:	f000 fbe4 	bl	8007544 <__assert_func>
 8006d7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d80:	6004      	str	r4, [r0, #0]
 8006d82:	60c4      	str	r4, [r0, #12]
 8006d84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d8c:	b94c      	cbnz	r4, 8006da2 <__pow5mult+0x66>
 8006d8e:	f240 2171 	movw	r1, #625	; 0x271
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff ff12 	bl	8006bbc <__i2b>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d9e:	4604      	mov	r4, r0
 8006da0:	6003      	str	r3, [r0, #0]
 8006da2:	f04f 0900 	mov.w	r9, #0
 8006da6:	07eb      	lsls	r3, r5, #31
 8006da8:	d50a      	bpl.n	8006dc0 <__pow5mult+0x84>
 8006daa:	4639      	mov	r1, r7
 8006dac:	4622      	mov	r2, r4
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7ff ff1a 	bl	8006be8 <__multiply>
 8006db4:	4639      	mov	r1, r7
 8006db6:	4680      	mov	r8, r0
 8006db8:	4630      	mov	r0, r6
 8006dba:	f7ff fe49 	bl	8006a50 <_Bfree>
 8006dbe:	4647      	mov	r7, r8
 8006dc0:	106d      	asrs	r5, r5, #1
 8006dc2:	d00b      	beq.n	8006ddc <__pow5mult+0xa0>
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	b938      	cbnz	r0, 8006dd8 <__pow5mult+0x9c>
 8006dc8:	4622      	mov	r2, r4
 8006dca:	4621      	mov	r1, r4
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f7ff ff0b 	bl	8006be8 <__multiply>
 8006dd2:	6020      	str	r0, [r4, #0]
 8006dd4:	f8c0 9000 	str.w	r9, [r0]
 8006dd8:	4604      	mov	r4, r0
 8006dda:	e7e4      	b.n	8006da6 <__pow5mult+0x6a>
 8006ddc:	4638      	mov	r0, r7
 8006dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de2:	bf00      	nop
 8006de4:	08007e48 	.word	0x08007e48
 8006de8:	08007c79 	.word	0x08007c79
 8006dec:	08007cf9 	.word	0x08007cf9

08006df0 <__lshift>:
 8006df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df4:	460c      	mov	r4, r1
 8006df6:	6849      	ldr	r1, [r1, #4]
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dfe:	68a3      	ldr	r3, [r4, #8]
 8006e00:	4607      	mov	r7, r0
 8006e02:	4691      	mov	r9, r2
 8006e04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e08:	f108 0601 	add.w	r6, r8, #1
 8006e0c:	42b3      	cmp	r3, r6
 8006e0e:	db0b      	blt.n	8006e28 <__lshift+0x38>
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff fddd 	bl	80069d0 <_Balloc>
 8006e16:	4605      	mov	r5, r0
 8006e18:	b948      	cbnz	r0, 8006e2e <__lshift+0x3e>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <__lshift+0xd0>)
 8006e1e:	4829      	ldr	r0, [pc, #164]	; (8006ec4 <__lshift+0xd4>)
 8006e20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006e24:	f000 fb8e 	bl	8007544 <__assert_func>
 8006e28:	3101      	adds	r1, #1
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	e7ee      	b.n	8006e0c <__lshift+0x1c>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f100 0114 	add.w	r1, r0, #20
 8006e34:	f100 0210 	add.w	r2, r0, #16
 8006e38:	4618      	mov	r0, r3
 8006e3a:	4553      	cmp	r3, sl
 8006e3c:	db33      	blt.n	8006ea6 <__lshift+0xb6>
 8006e3e:	6920      	ldr	r0, [r4, #16]
 8006e40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e44:	f104 0314 	add.w	r3, r4, #20
 8006e48:	f019 091f 	ands.w	r9, r9, #31
 8006e4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e54:	d02b      	beq.n	8006eae <__lshift+0xbe>
 8006e56:	f1c9 0e20 	rsb	lr, r9, #32
 8006e5a:	468a      	mov	sl, r1
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	fa00 f009 	lsl.w	r0, r0, r9
 8006e64:	4310      	orrs	r0, r2
 8006e66:	f84a 0b04 	str.w	r0, [sl], #4
 8006e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e6e:	459c      	cmp	ip, r3
 8006e70:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e74:	d8f3      	bhi.n	8006e5e <__lshift+0x6e>
 8006e76:	ebac 0304 	sub.w	r3, ip, r4
 8006e7a:	3b15      	subs	r3, #21
 8006e7c:	f023 0303 	bic.w	r3, r3, #3
 8006e80:	3304      	adds	r3, #4
 8006e82:	f104 0015 	add.w	r0, r4, #21
 8006e86:	4584      	cmp	ip, r0
 8006e88:	bf38      	it	cc
 8006e8a:	2304      	movcc	r3, #4
 8006e8c:	50ca      	str	r2, [r1, r3]
 8006e8e:	b10a      	cbz	r2, 8006e94 <__lshift+0xa4>
 8006e90:	f108 0602 	add.w	r6, r8, #2
 8006e94:	3e01      	subs	r6, #1
 8006e96:	4638      	mov	r0, r7
 8006e98:	612e      	str	r6, [r5, #16]
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	f7ff fdd8 	bl	8006a50 <_Bfree>
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eaa:	3301      	adds	r3, #1
 8006eac:	e7c5      	b.n	8006e3a <__lshift+0x4a>
 8006eae:	3904      	subs	r1, #4
 8006eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eb8:	459c      	cmp	ip, r3
 8006eba:	d8f9      	bhi.n	8006eb0 <__lshift+0xc0>
 8006ebc:	e7ea      	b.n	8006e94 <__lshift+0xa4>
 8006ebe:	bf00      	nop
 8006ec0:	08007ce8 	.word	0x08007ce8
 8006ec4:	08007cf9 	.word	0x08007cf9

08006ec8 <__mcmp>:
 8006ec8:	b530      	push	{r4, r5, lr}
 8006eca:	6902      	ldr	r2, [r0, #16]
 8006ecc:	690c      	ldr	r4, [r1, #16]
 8006ece:	1b12      	subs	r2, r2, r4
 8006ed0:	d10e      	bne.n	8006ef0 <__mcmp+0x28>
 8006ed2:	f100 0314 	add.w	r3, r0, #20
 8006ed6:	3114      	adds	r1, #20
 8006ed8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006edc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ee0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ee4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ee8:	42a5      	cmp	r5, r4
 8006eea:	d003      	beq.n	8006ef4 <__mcmp+0x2c>
 8006eec:	d305      	bcc.n	8006efa <__mcmp+0x32>
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	bd30      	pop	{r4, r5, pc}
 8006ef4:	4283      	cmp	r3, r0
 8006ef6:	d3f3      	bcc.n	8006ee0 <__mcmp+0x18>
 8006ef8:	e7fa      	b.n	8006ef0 <__mcmp+0x28>
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	e7f7      	b.n	8006ef0 <__mcmp+0x28>

08006f00 <__mdiff>:
 8006f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	460c      	mov	r4, r1
 8006f06:	4606      	mov	r6, r0
 8006f08:	4611      	mov	r1, r2
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	4690      	mov	r8, r2
 8006f0e:	f7ff ffdb 	bl	8006ec8 <__mcmp>
 8006f12:	1e05      	subs	r5, r0, #0
 8006f14:	d110      	bne.n	8006f38 <__mdiff+0x38>
 8006f16:	4629      	mov	r1, r5
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f7ff fd59 	bl	80069d0 <_Balloc>
 8006f1e:	b930      	cbnz	r0, 8006f2e <__mdiff+0x2e>
 8006f20:	4b3a      	ldr	r3, [pc, #232]	; (800700c <__mdiff+0x10c>)
 8006f22:	4602      	mov	r2, r0
 8006f24:	f240 2137 	movw	r1, #567	; 0x237
 8006f28:	4839      	ldr	r0, [pc, #228]	; (8007010 <__mdiff+0x110>)
 8006f2a:	f000 fb0b 	bl	8007544 <__assert_func>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	bfa4      	itt	ge
 8006f3a:	4643      	movge	r3, r8
 8006f3c:	46a0      	movge	r8, r4
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f44:	bfa6      	itte	ge
 8006f46:	461c      	movge	r4, r3
 8006f48:	2500      	movge	r5, #0
 8006f4a:	2501      	movlt	r5, #1
 8006f4c:	f7ff fd40 	bl	80069d0 <_Balloc>
 8006f50:	b920      	cbnz	r0, 8006f5c <__mdiff+0x5c>
 8006f52:	4b2e      	ldr	r3, [pc, #184]	; (800700c <__mdiff+0x10c>)
 8006f54:	4602      	mov	r2, r0
 8006f56:	f240 2145 	movw	r1, #581	; 0x245
 8006f5a:	e7e5      	b.n	8006f28 <__mdiff+0x28>
 8006f5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f60:	6926      	ldr	r6, [r4, #16]
 8006f62:	60c5      	str	r5, [r0, #12]
 8006f64:	f104 0914 	add.w	r9, r4, #20
 8006f68:	f108 0514 	add.w	r5, r8, #20
 8006f6c:	f100 0e14 	add.w	lr, r0, #20
 8006f70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f78:	f108 0210 	add.w	r2, r8, #16
 8006f7c:	46f2      	mov	sl, lr
 8006f7e:	2100      	movs	r1, #0
 8006f80:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f88:	fa11 f88b 	uxtah	r8, r1, fp
 8006f8c:	b299      	uxth	r1, r3
 8006f8e:	0c1b      	lsrs	r3, r3, #16
 8006f90:	eba8 0801 	sub.w	r8, r8, r1
 8006f94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f9c:	fa1f f888 	uxth.w	r8, r8
 8006fa0:	1419      	asrs	r1, r3, #16
 8006fa2:	454e      	cmp	r6, r9
 8006fa4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fa8:	f84a 3b04 	str.w	r3, [sl], #4
 8006fac:	d8e8      	bhi.n	8006f80 <__mdiff+0x80>
 8006fae:	1b33      	subs	r3, r6, r4
 8006fb0:	3b15      	subs	r3, #21
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	3415      	adds	r4, #21
 8006fba:	42a6      	cmp	r6, r4
 8006fbc:	bf38      	it	cc
 8006fbe:	2304      	movcc	r3, #4
 8006fc0:	441d      	add	r5, r3
 8006fc2:	4473      	add	r3, lr
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	462e      	mov	r6, r5
 8006fc8:	4566      	cmp	r6, ip
 8006fca:	d30e      	bcc.n	8006fea <__mdiff+0xea>
 8006fcc:	f10c 0203 	add.w	r2, ip, #3
 8006fd0:	1b52      	subs	r2, r2, r5
 8006fd2:	f022 0203 	bic.w	r2, r2, #3
 8006fd6:	3d03      	subs	r5, #3
 8006fd8:	45ac      	cmp	ip, r5
 8006fda:	bf38      	it	cc
 8006fdc:	2200      	movcc	r2, #0
 8006fde:	4413      	add	r3, r2
 8006fe0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006fe4:	b17a      	cbz	r2, 8007006 <__mdiff+0x106>
 8006fe6:	6107      	str	r7, [r0, #16]
 8006fe8:	e7a4      	b.n	8006f34 <__mdiff+0x34>
 8006fea:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fee:	fa11 f288 	uxtah	r2, r1, r8
 8006ff2:	1414      	asrs	r4, r2, #16
 8006ff4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ffe:	f84e 2b04 	str.w	r2, [lr], #4
 8007002:	1421      	asrs	r1, r4, #16
 8007004:	e7e0      	b.n	8006fc8 <__mdiff+0xc8>
 8007006:	3f01      	subs	r7, #1
 8007008:	e7ea      	b.n	8006fe0 <__mdiff+0xe0>
 800700a:	bf00      	nop
 800700c:	08007ce8 	.word	0x08007ce8
 8007010:	08007cf9 	.word	0x08007cf9

08007014 <__d2b>:
 8007014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007018:	460f      	mov	r7, r1
 800701a:	2101      	movs	r1, #1
 800701c:	ec59 8b10 	vmov	r8, r9, d0
 8007020:	4616      	mov	r6, r2
 8007022:	f7ff fcd5 	bl	80069d0 <_Balloc>
 8007026:	4604      	mov	r4, r0
 8007028:	b930      	cbnz	r0, 8007038 <__d2b+0x24>
 800702a:	4602      	mov	r2, r0
 800702c:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <__d2b+0xac>)
 800702e:	4825      	ldr	r0, [pc, #148]	; (80070c4 <__d2b+0xb0>)
 8007030:	f240 310f 	movw	r1, #783	; 0x30f
 8007034:	f000 fa86 	bl	8007544 <__assert_func>
 8007038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800703c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007040:	bb2d      	cbnz	r5, 800708e <__d2b+0x7a>
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	f1b8 0300 	subs.w	r3, r8, #0
 8007048:	d026      	beq.n	8007098 <__d2b+0x84>
 800704a:	4668      	mov	r0, sp
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	f7ff fd87 	bl	8006b60 <__lo0bits>
 8007052:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007056:	b1e8      	cbz	r0, 8007094 <__d2b+0x80>
 8007058:	f1c0 0320 	rsb	r3, r0, #32
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	430b      	orrs	r3, r1
 8007062:	40c2      	lsrs	r2, r0
 8007064:	6163      	str	r3, [r4, #20]
 8007066:	9201      	str	r2, [sp, #4]
 8007068:	9b01      	ldr	r3, [sp, #4]
 800706a:	61a3      	str	r3, [r4, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	bf14      	ite	ne
 8007070:	2202      	movne	r2, #2
 8007072:	2201      	moveq	r2, #1
 8007074:	6122      	str	r2, [r4, #16]
 8007076:	b1bd      	cbz	r5, 80070a8 <__d2b+0x94>
 8007078:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800707c:	4405      	add	r5, r0
 800707e:	603d      	str	r5, [r7, #0]
 8007080:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007084:	6030      	str	r0, [r6, #0]
 8007086:	4620      	mov	r0, r4
 8007088:	b003      	add	sp, #12
 800708a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800708e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007092:	e7d6      	b.n	8007042 <__d2b+0x2e>
 8007094:	6161      	str	r1, [r4, #20]
 8007096:	e7e7      	b.n	8007068 <__d2b+0x54>
 8007098:	a801      	add	r0, sp, #4
 800709a:	f7ff fd61 	bl	8006b60 <__lo0bits>
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	6163      	str	r3, [r4, #20]
 80070a2:	3020      	adds	r0, #32
 80070a4:	2201      	movs	r2, #1
 80070a6:	e7e5      	b.n	8007074 <__d2b+0x60>
 80070a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070b0:	6038      	str	r0, [r7, #0]
 80070b2:	6918      	ldr	r0, [r3, #16]
 80070b4:	f7ff fd34 	bl	8006b20 <__hi0bits>
 80070b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070bc:	e7e2      	b.n	8007084 <__d2b+0x70>
 80070be:	bf00      	nop
 80070c0:	08007ce8 	.word	0x08007ce8
 80070c4:	08007cf9 	.word	0x08007cf9

080070c8 <__ssputs_r>:
 80070c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	688e      	ldr	r6, [r1, #8]
 80070ce:	461f      	mov	r7, r3
 80070d0:	42be      	cmp	r6, r7
 80070d2:	680b      	ldr	r3, [r1, #0]
 80070d4:	4682      	mov	sl, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	4690      	mov	r8, r2
 80070da:	d82c      	bhi.n	8007136 <__ssputs_r+0x6e>
 80070dc:	898a      	ldrh	r2, [r1, #12]
 80070de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070e2:	d026      	beq.n	8007132 <__ssputs_r+0x6a>
 80070e4:	6965      	ldr	r5, [r4, #20]
 80070e6:	6909      	ldr	r1, [r1, #16]
 80070e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ec:	eba3 0901 	sub.w	r9, r3, r1
 80070f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070f4:	1c7b      	adds	r3, r7, #1
 80070f6:	444b      	add	r3, r9
 80070f8:	106d      	asrs	r5, r5, #1
 80070fa:	429d      	cmp	r5, r3
 80070fc:	bf38      	it	cc
 80070fe:	461d      	movcc	r5, r3
 8007100:	0553      	lsls	r3, r2, #21
 8007102:	d527      	bpl.n	8007154 <__ssputs_r+0x8c>
 8007104:	4629      	mov	r1, r5
 8007106:	f7ff fbd7 	bl	80068b8 <_malloc_r>
 800710a:	4606      	mov	r6, r0
 800710c:	b360      	cbz	r0, 8007168 <__ssputs_r+0xa0>
 800710e:	6921      	ldr	r1, [r4, #16]
 8007110:	464a      	mov	r2, r9
 8007112:	f000 fa09 	bl	8007528 <memcpy>
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800711c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	6126      	str	r6, [r4, #16]
 8007124:	6165      	str	r5, [r4, #20]
 8007126:	444e      	add	r6, r9
 8007128:	eba5 0509 	sub.w	r5, r5, r9
 800712c:	6026      	str	r6, [r4, #0]
 800712e:	60a5      	str	r5, [r4, #8]
 8007130:	463e      	mov	r6, r7
 8007132:	42be      	cmp	r6, r7
 8007134:	d900      	bls.n	8007138 <__ssputs_r+0x70>
 8007136:	463e      	mov	r6, r7
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	4632      	mov	r2, r6
 800713c:	4641      	mov	r1, r8
 800713e:	f000 f9c9 	bl	80074d4 <memmove>
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	1b9b      	subs	r3, r3, r6
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	4433      	add	r3, r6
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	2000      	movs	r0, #0
 8007150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007154:	462a      	mov	r2, r5
 8007156:	f000 fa3b 	bl	80075d0 <_realloc_r>
 800715a:	4606      	mov	r6, r0
 800715c:	2800      	cmp	r0, #0
 800715e:	d1e0      	bne.n	8007122 <__ssputs_r+0x5a>
 8007160:	6921      	ldr	r1, [r4, #16]
 8007162:	4650      	mov	r0, sl
 8007164:	f7ff fb34 	bl	80067d0 <_free_r>
 8007168:	230c      	movs	r3, #12
 800716a:	f8ca 3000 	str.w	r3, [sl]
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	e7e9      	b.n	8007150 <__ssputs_r+0x88>

0800717c <_svfiprintf_r>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	4698      	mov	r8, r3
 8007182:	898b      	ldrh	r3, [r1, #12]
 8007184:	061b      	lsls	r3, r3, #24
 8007186:	b09d      	sub	sp, #116	; 0x74
 8007188:	4607      	mov	r7, r0
 800718a:	460d      	mov	r5, r1
 800718c:	4614      	mov	r4, r2
 800718e:	d50e      	bpl.n	80071ae <_svfiprintf_r+0x32>
 8007190:	690b      	ldr	r3, [r1, #16]
 8007192:	b963      	cbnz	r3, 80071ae <_svfiprintf_r+0x32>
 8007194:	2140      	movs	r1, #64	; 0x40
 8007196:	f7ff fb8f 	bl	80068b8 <_malloc_r>
 800719a:	6028      	str	r0, [r5, #0]
 800719c:	6128      	str	r0, [r5, #16]
 800719e:	b920      	cbnz	r0, 80071aa <_svfiprintf_r+0x2e>
 80071a0:	230c      	movs	r3, #12
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	f04f 30ff 	mov.w	r0, #4294967295
 80071a8:	e0d0      	b.n	800734c <_svfiprintf_r+0x1d0>
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	616b      	str	r3, [r5, #20]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9309      	str	r3, [sp, #36]	; 0x24
 80071b2:	2320      	movs	r3, #32
 80071b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80071bc:	2330      	movs	r3, #48	; 0x30
 80071be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007364 <_svfiprintf_r+0x1e8>
 80071c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071c6:	f04f 0901 	mov.w	r9, #1
 80071ca:	4623      	mov	r3, r4
 80071cc:	469a      	mov	sl, r3
 80071ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071d2:	b10a      	cbz	r2, 80071d8 <_svfiprintf_r+0x5c>
 80071d4:	2a25      	cmp	r2, #37	; 0x25
 80071d6:	d1f9      	bne.n	80071cc <_svfiprintf_r+0x50>
 80071d8:	ebba 0b04 	subs.w	fp, sl, r4
 80071dc:	d00b      	beq.n	80071f6 <_svfiprintf_r+0x7a>
 80071de:	465b      	mov	r3, fp
 80071e0:	4622      	mov	r2, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	4638      	mov	r0, r7
 80071e6:	f7ff ff6f 	bl	80070c8 <__ssputs_r>
 80071ea:	3001      	adds	r0, #1
 80071ec:	f000 80a9 	beq.w	8007342 <_svfiprintf_r+0x1c6>
 80071f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f2:	445a      	add	r2, fp
 80071f4:	9209      	str	r2, [sp, #36]	; 0x24
 80071f6:	f89a 3000 	ldrb.w	r3, [sl]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80a1 	beq.w	8007342 <_svfiprintf_r+0x1c6>
 8007200:	2300      	movs	r3, #0
 8007202:	f04f 32ff 	mov.w	r2, #4294967295
 8007206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800720a:	f10a 0a01 	add.w	sl, sl, #1
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	9307      	str	r3, [sp, #28]
 8007212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007216:	931a      	str	r3, [sp, #104]	; 0x68
 8007218:	4654      	mov	r4, sl
 800721a:	2205      	movs	r2, #5
 800721c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007220:	4850      	ldr	r0, [pc, #320]	; (8007364 <_svfiprintf_r+0x1e8>)
 8007222:	f7f9 f80d 	bl	8000240 <memchr>
 8007226:	9a04      	ldr	r2, [sp, #16]
 8007228:	b9d8      	cbnz	r0, 8007262 <_svfiprintf_r+0xe6>
 800722a:	06d0      	lsls	r0, r2, #27
 800722c:	bf44      	itt	mi
 800722e:	2320      	movmi	r3, #32
 8007230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007234:	0711      	lsls	r1, r2, #28
 8007236:	bf44      	itt	mi
 8007238:	232b      	movmi	r3, #43	; 0x2b
 800723a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800723e:	f89a 3000 	ldrb.w	r3, [sl]
 8007242:	2b2a      	cmp	r3, #42	; 0x2a
 8007244:	d015      	beq.n	8007272 <_svfiprintf_r+0xf6>
 8007246:	9a07      	ldr	r2, [sp, #28]
 8007248:	4654      	mov	r4, sl
 800724a:	2000      	movs	r0, #0
 800724c:	f04f 0c0a 	mov.w	ip, #10
 8007250:	4621      	mov	r1, r4
 8007252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007256:	3b30      	subs	r3, #48	; 0x30
 8007258:	2b09      	cmp	r3, #9
 800725a:	d94d      	bls.n	80072f8 <_svfiprintf_r+0x17c>
 800725c:	b1b0      	cbz	r0, 800728c <_svfiprintf_r+0x110>
 800725e:	9207      	str	r2, [sp, #28]
 8007260:	e014      	b.n	800728c <_svfiprintf_r+0x110>
 8007262:	eba0 0308 	sub.w	r3, r0, r8
 8007266:	fa09 f303 	lsl.w	r3, r9, r3
 800726a:	4313      	orrs	r3, r2
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	46a2      	mov	sl, r4
 8007270:	e7d2      	b.n	8007218 <_svfiprintf_r+0x9c>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	1d19      	adds	r1, r3, #4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	9103      	str	r1, [sp, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bfbb      	ittet	lt
 800727e:	425b      	neglt	r3, r3
 8007280:	f042 0202 	orrlt.w	r2, r2, #2
 8007284:	9307      	strge	r3, [sp, #28]
 8007286:	9307      	strlt	r3, [sp, #28]
 8007288:	bfb8      	it	lt
 800728a:	9204      	strlt	r2, [sp, #16]
 800728c:	7823      	ldrb	r3, [r4, #0]
 800728e:	2b2e      	cmp	r3, #46	; 0x2e
 8007290:	d10c      	bne.n	80072ac <_svfiprintf_r+0x130>
 8007292:	7863      	ldrb	r3, [r4, #1]
 8007294:	2b2a      	cmp	r3, #42	; 0x2a
 8007296:	d134      	bne.n	8007302 <_svfiprintf_r+0x186>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	1d1a      	adds	r2, r3, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	9203      	str	r2, [sp, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bfb8      	it	lt
 80072a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80072a8:	3402      	adds	r4, #2
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007374 <_svfiprintf_r+0x1f8>
 80072b0:	7821      	ldrb	r1, [r4, #0]
 80072b2:	2203      	movs	r2, #3
 80072b4:	4650      	mov	r0, sl
 80072b6:	f7f8 ffc3 	bl	8000240 <memchr>
 80072ba:	b138      	cbz	r0, 80072cc <_svfiprintf_r+0x150>
 80072bc:	9b04      	ldr	r3, [sp, #16]
 80072be:	eba0 000a 	sub.w	r0, r0, sl
 80072c2:	2240      	movs	r2, #64	; 0x40
 80072c4:	4082      	lsls	r2, r0
 80072c6:	4313      	orrs	r3, r2
 80072c8:	3401      	adds	r4, #1
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d0:	4825      	ldr	r0, [pc, #148]	; (8007368 <_svfiprintf_r+0x1ec>)
 80072d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072d6:	2206      	movs	r2, #6
 80072d8:	f7f8 ffb2 	bl	8000240 <memchr>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d038      	beq.n	8007352 <_svfiprintf_r+0x1d6>
 80072e0:	4b22      	ldr	r3, [pc, #136]	; (800736c <_svfiprintf_r+0x1f0>)
 80072e2:	bb1b      	cbnz	r3, 800732c <_svfiprintf_r+0x1b0>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	3307      	adds	r3, #7
 80072e8:	f023 0307 	bic.w	r3, r3, #7
 80072ec:	3308      	adds	r3, #8
 80072ee:	9303      	str	r3, [sp, #12]
 80072f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f2:	4433      	add	r3, r6
 80072f4:	9309      	str	r3, [sp, #36]	; 0x24
 80072f6:	e768      	b.n	80071ca <_svfiprintf_r+0x4e>
 80072f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80072fc:	460c      	mov	r4, r1
 80072fe:	2001      	movs	r0, #1
 8007300:	e7a6      	b.n	8007250 <_svfiprintf_r+0xd4>
 8007302:	2300      	movs	r3, #0
 8007304:	3401      	adds	r4, #1
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	4619      	mov	r1, r3
 800730a:	f04f 0c0a 	mov.w	ip, #10
 800730e:	4620      	mov	r0, r4
 8007310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007314:	3a30      	subs	r2, #48	; 0x30
 8007316:	2a09      	cmp	r2, #9
 8007318:	d903      	bls.n	8007322 <_svfiprintf_r+0x1a6>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0c6      	beq.n	80072ac <_svfiprintf_r+0x130>
 800731e:	9105      	str	r1, [sp, #20]
 8007320:	e7c4      	b.n	80072ac <_svfiprintf_r+0x130>
 8007322:	fb0c 2101 	mla	r1, ip, r1, r2
 8007326:	4604      	mov	r4, r0
 8007328:	2301      	movs	r3, #1
 800732a:	e7f0      	b.n	800730e <_svfiprintf_r+0x192>
 800732c:	ab03      	add	r3, sp, #12
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	462a      	mov	r2, r5
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <_svfiprintf_r+0x1f4>)
 8007334:	a904      	add	r1, sp, #16
 8007336:	4638      	mov	r0, r7
 8007338:	f7fd ff06 	bl	8005148 <_printf_float>
 800733c:	1c42      	adds	r2, r0, #1
 800733e:	4606      	mov	r6, r0
 8007340:	d1d6      	bne.n	80072f0 <_svfiprintf_r+0x174>
 8007342:	89ab      	ldrh	r3, [r5, #12]
 8007344:	065b      	lsls	r3, r3, #25
 8007346:	f53f af2d 	bmi.w	80071a4 <_svfiprintf_r+0x28>
 800734a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800734c:	b01d      	add	sp, #116	; 0x74
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	ab03      	add	r3, sp, #12
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	462a      	mov	r2, r5
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <_svfiprintf_r+0x1f4>)
 800735a:	a904      	add	r1, sp, #16
 800735c:	4638      	mov	r0, r7
 800735e:	f7fe f97b 	bl	8005658 <_printf_i>
 8007362:	e7eb      	b.n	800733c <_svfiprintf_r+0x1c0>
 8007364:	08007e54 	.word	0x08007e54
 8007368:	08007e5e 	.word	0x08007e5e
 800736c:	08005149 	.word	0x08005149
 8007370:	080070c9 	.word	0x080070c9
 8007374:	08007e5a 	.word	0x08007e5a

08007378 <__sflush_r>:
 8007378:	898a      	ldrh	r2, [r1, #12]
 800737a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800737e:	4605      	mov	r5, r0
 8007380:	0710      	lsls	r0, r2, #28
 8007382:	460c      	mov	r4, r1
 8007384:	d458      	bmi.n	8007438 <__sflush_r+0xc0>
 8007386:	684b      	ldr	r3, [r1, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	dc05      	bgt.n	8007398 <__sflush_r+0x20>
 800738c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	dc02      	bgt.n	8007398 <__sflush_r+0x20>
 8007392:	2000      	movs	r0, #0
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800739a:	2e00      	cmp	r6, #0
 800739c:	d0f9      	beq.n	8007392 <__sflush_r+0x1a>
 800739e:	2300      	movs	r3, #0
 80073a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073a4:	682f      	ldr	r7, [r5, #0]
 80073a6:	6a21      	ldr	r1, [r4, #32]
 80073a8:	602b      	str	r3, [r5, #0]
 80073aa:	d032      	beq.n	8007412 <__sflush_r+0x9a>
 80073ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	075a      	lsls	r2, r3, #29
 80073b2:	d505      	bpl.n	80073c0 <__sflush_r+0x48>
 80073b4:	6863      	ldr	r3, [r4, #4]
 80073b6:	1ac0      	subs	r0, r0, r3
 80073b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073ba:	b10b      	cbz	r3, 80073c0 <__sflush_r+0x48>
 80073bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073be:	1ac0      	subs	r0, r0, r3
 80073c0:	2300      	movs	r3, #0
 80073c2:	4602      	mov	r2, r0
 80073c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073c6:	6a21      	ldr	r1, [r4, #32]
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b0      	blx	r6
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	d106      	bne.n	80073e0 <__sflush_r+0x68>
 80073d2:	6829      	ldr	r1, [r5, #0]
 80073d4:	291d      	cmp	r1, #29
 80073d6:	d82b      	bhi.n	8007430 <__sflush_r+0xb8>
 80073d8:	4a29      	ldr	r2, [pc, #164]	; (8007480 <__sflush_r+0x108>)
 80073da:	410a      	asrs	r2, r1
 80073dc:	07d6      	lsls	r6, r2, #31
 80073de:	d427      	bmi.n	8007430 <__sflush_r+0xb8>
 80073e0:	2200      	movs	r2, #0
 80073e2:	6062      	str	r2, [r4, #4]
 80073e4:	04d9      	lsls	r1, r3, #19
 80073e6:	6922      	ldr	r2, [r4, #16]
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	d504      	bpl.n	80073f6 <__sflush_r+0x7e>
 80073ec:	1c42      	adds	r2, r0, #1
 80073ee:	d101      	bne.n	80073f4 <__sflush_r+0x7c>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b903      	cbnz	r3, 80073f6 <__sflush_r+0x7e>
 80073f4:	6560      	str	r0, [r4, #84]	; 0x54
 80073f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073f8:	602f      	str	r7, [r5, #0]
 80073fa:	2900      	cmp	r1, #0
 80073fc:	d0c9      	beq.n	8007392 <__sflush_r+0x1a>
 80073fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007402:	4299      	cmp	r1, r3
 8007404:	d002      	beq.n	800740c <__sflush_r+0x94>
 8007406:	4628      	mov	r0, r5
 8007408:	f7ff f9e2 	bl	80067d0 <_free_r>
 800740c:	2000      	movs	r0, #0
 800740e:	6360      	str	r0, [r4, #52]	; 0x34
 8007410:	e7c0      	b.n	8007394 <__sflush_r+0x1c>
 8007412:	2301      	movs	r3, #1
 8007414:	4628      	mov	r0, r5
 8007416:	47b0      	blx	r6
 8007418:	1c41      	adds	r1, r0, #1
 800741a:	d1c8      	bne.n	80073ae <__sflush_r+0x36>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0c5      	beq.n	80073ae <__sflush_r+0x36>
 8007422:	2b1d      	cmp	r3, #29
 8007424:	d001      	beq.n	800742a <__sflush_r+0xb2>
 8007426:	2b16      	cmp	r3, #22
 8007428:	d101      	bne.n	800742e <__sflush_r+0xb6>
 800742a:	602f      	str	r7, [r5, #0]
 800742c:	e7b1      	b.n	8007392 <__sflush_r+0x1a>
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	e7ad      	b.n	8007394 <__sflush_r+0x1c>
 8007438:	690f      	ldr	r7, [r1, #16]
 800743a:	2f00      	cmp	r7, #0
 800743c:	d0a9      	beq.n	8007392 <__sflush_r+0x1a>
 800743e:	0793      	lsls	r3, r2, #30
 8007440:	680e      	ldr	r6, [r1, #0]
 8007442:	bf08      	it	eq
 8007444:	694b      	ldreq	r3, [r1, #20]
 8007446:	600f      	str	r7, [r1, #0]
 8007448:	bf18      	it	ne
 800744a:	2300      	movne	r3, #0
 800744c:	eba6 0807 	sub.w	r8, r6, r7
 8007450:	608b      	str	r3, [r1, #8]
 8007452:	f1b8 0f00 	cmp.w	r8, #0
 8007456:	dd9c      	ble.n	8007392 <__sflush_r+0x1a>
 8007458:	6a21      	ldr	r1, [r4, #32]
 800745a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800745c:	4643      	mov	r3, r8
 800745e:	463a      	mov	r2, r7
 8007460:	4628      	mov	r0, r5
 8007462:	47b0      	blx	r6
 8007464:	2800      	cmp	r0, #0
 8007466:	dc06      	bgt.n	8007476 <__sflush_r+0xfe>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746e:	81a3      	strh	r3, [r4, #12]
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	e78e      	b.n	8007394 <__sflush_r+0x1c>
 8007476:	4407      	add	r7, r0
 8007478:	eba8 0800 	sub.w	r8, r8, r0
 800747c:	e7e9      	b.n	8007452 <__sflush_r+0xda>
 800747e:	bf00      	nop
 8007480:	dfbffffe 	.word	0xdfbffffe

08007484 <_fflush_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	690b      	ldr	r3, [r1, #16]
 8007488:	4605      	mov	r5, r0
 800748a:	460c      	mov	r4, r1
 800748c:	b913      	cbnz	r3, 8007494 <_fflush_r+0x10>
 800748e:	2500      	movs	r5, #0
 8007490:	4628      	mov	r0, r5
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	b118      	cbz	r0, 800749e <_fflush_r+0x1a>
 8007496:	6a03      	ldr	r3, [r0, #32]
 8007498:	b90b      	cbnz	r3, 800749e <_fflush_r+0x1a>
 800749a:	f7fe fa8b 	bl	80059b4 <__sinit>
 800749e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0f3      	beq.n	800748e <_fflush_r+0xa>
 80074a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074a8:	07d0      	lsls	r0, r2, #31
 80074aa:	d404      	bmi.n	80074b6 <_fflush_r+0x32>
 80074ac:	0599      	lsls	r1, r3, #22
 80074ae:	d402      	bmi.n	80074b6 <_fflush_r+0x32>
 80074b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074b2:	f7fe fb96 	bl	8005be2 <__retarget_lock_acquire_recursive>
 80074b6:	4628      	mov	r0, r5
 80074b8:	4621      	mov	r1, r4
 80074ba:	f7ff ff5d 	bl	8007378 <__sflush_r>
 80074be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074c0:	07da      	lsls	r2, r3, #31
 80074c2:	4605      	mov	r5, r0
 80074c4:	d4e4      	bmi.n	8007490 <_fflush_r+0xc>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	059b      	lsls	r3, r3, #22
 80074ca:	d4e1      	bmi.n	8007490 <_fflush_r+0xc>
 80074cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ce:	f7fe fb89 	bl	8005be4 <__retarget_lock_release_recursive>
 80074d2:	e7dd      	b.n	8007490 <_fflush_r+0xc>

080074d4 <memmove>:
 80074d4:	4288      	cmp	r0, r1
 80074d6:	b510      	push	{r4, lr}
 80074d8:	eb01 0402 	add.w	r4, r1, r2
 80074dc:	d902      	bls.n	80074e4 <memmove+0x10>
 80074de:	4284      	cmp	r4, r0
 80074e0:	4623      	mov	r3, r4
 80074e2:	d807      	bhi.n	80074f4 <memmove+0x20>
 80074e4:	1e43      	subs	r3, r0, #1
 80074e6:	42a1      	cmp	r1, r4
 80074e8:	d008      	beq.n	80074fc <memmove+0x28>
 80074ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074f2:	e7f8      	b.n	80074e6 <memmove+0x12>
 80074f4:	4402      	add	r2, r0
 80074f6:	4601      	mov	r1, r0
 80074f8:	428a      	cmp	r2, r1
 80074fa:	d100      	bne.n	80074fe <memmove+0x2a>
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007506:	e7f7      	b.n	80074f8 <memmove+0x24>

08007508 <_sbrk_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d06      	ldr	r5, [pc, #24]	; (8007524 <_sbrk_r+0x1c>)
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7f9 ff28 	bl	8001368 <_sbrk>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_sbrk_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_sbrk_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20000b68 	.word	0x20000b68

08007528 <memcpy>:
 8007528:	440a      	add	r2, r1
 800752a:	4291      	cmp	r1, r2
 800752c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007530:	d100      	bne.n	8007534 <memcpy+0xc>
 8007532:	4770      	bx	lr
 8007534:	b510      	push	{r4, lr}
 8007536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800753a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800753e:	4291      	cmp	r1, r2
 8007540:	d1f9      	bne.n	8007536 <memcpy+0xe>
 8007542:	bd10      	pop	{r4, pc}

08007544 <__assert_func>:
 8007544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007546:	4614      	mov	r4, r2
 8007548:	461a      	mov	r2, r3
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <__assert_func+0x2c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4605      	mov	r5, r0
 8007550:	68d8      	ldr	r0, [r3, #12]
 8007552:	b14c      	cbz	r4, 8007568 <__assert_func+0x24>
 8007554:	4b07      	ldr	r3, [pc, #28]	; (8007574 <__assert_func+0x30>)
 8007556:	9100      	str	r1, [sp, #0]
 8007558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800755c:	4906      	ldr	r1, [pc, #24]	; (8007578 <__assert_func+0x34>)
 800755e:	462b      	mov	r3, r5
 8007560:	f000 f872 	bl	8007648 <fiprintf>
 8007564:	f000 f882 	bl	800766c <abort>
 8007568:	4b04      	ldr	r3, [pc, #16]	; (800757c <__assert_func+0x38>)
 800756a:	461c      	mov	r4, r3
 800756c:	e7f3      	b.n	8007556 <__assert_func+0x12>
 800756e:	bf00      	nop
 8007570:	20000064 	.word	0x20000064
 8007574:	08007e6f 	.word	0x08007e6f
 8007578:	08007e7c 	.word	0x08007e7c
 800757c:	08007eaa 	.word	0x08007eaa

08007580 <_calloc_r>:
 8007580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007582:	fba1 2402 	umull	r2, r4, r1, r2
 8007586:	b94c      	cbnz	r4, 800759c <_calloc_r+0x1c>
 8007588:	4611      	mov	r1, r2
 800758a:	9201      	str	r2, [sp, #4]
 800758c:	f7ff f994 	bl	80068b8 <_malloc_r>
 8007590:	9a01      	ldr	r2, [sp, #4]
 8007592:	4605      	mov	r5, r0
 8007594:	b930      	cbnz	r0, 80075a4 <_calloc_r+0x24>
 8007596:	4628      	mov	r0, r5
 8007598:	b003      	add	sp, #12
 800759a:	bd30      	pop	{r4, r5, pc}
 800759c:	220c      	movs	r2, #12
 800759e:	6002      	str	r2, [r0, #0]
 80075a0:	2500      	movs	r5, #0
 80075a2:	e7f8      	b.n	8007596 <_calloc_r+0x16>
 80075a4:	4621      	mov	r1, r4
 80075a6:	f7fe fa9e 	bl	8005ae6 <memset>
 80075aa:	e7f4      	b.n	8007596 <_calloc_r+0x16>

080075ac <__ascii_mbtowc>:
 80075ac:	b082      	sub	sp, #8
 80075ae:	b901      	cbnz	r1, 80075b2 <__ascii_mbtowc+0x6>
 80075b0:	a901      	add	r1, sp, #4
 80075b2:	b142      	cbz	r2, 80075c6 <__ascii_mbtowc+0x1a>
 80075b4:	b14b      	cbz	r3, 80075ca <__ascii_mbtowc+0x1e>
 80075b6:	7813      	ldrb	r3, [r2, #0]
 80075b8:	600b      	str	r3, [r1, #0]
 80075ba:	7812      	ldrb	r2, [r2, #0]
 80075bc:	1e10      	subs	r0, r2, #0
 80075be:	bf18      	it	ne
 80075c0:	2001      	movne	r0, #1
 80075c2:	b002      	add	sp, #8
 80075c4:	4770      	bx	lr
 80075c6:	4610      	mov	r0, r2
 80075c8:	e7fb      	b.n	80075c2 <__ascii_mbtowc+0x16>
 80075ca:	f06f 0001 	mvn.w	r0, #1
 80075ce:	e7f8      	b.n	80075c2 <__ascii_mbtowc+0x16>

080075d0 <_realloc_r>:
 80075d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d4:	4680      	mov	r8, r0
 80075d6:	4614      	mov	r4, r2
 80075d8:	460e      	mov	r6, r1
 80075da:	b921      	cbnz	r1, 80075e6 <_realloc_r+0x16>
 80075dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e0:	4611      	mov	r1, r2
 80075e2:	f7ff b969 	b.w	80068b8 <_malloc_r>
 80075e6:	b92a      	cbnz	r2, 80075f4 <_realloc_r+0x24>
 80075e8:	f7ff f8f2 	bl	80067d0 <_free_r>
 80075ec:	4625      	mov	r5, r4
 80075ee:	4628      	mov	r0, r5
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	f000 f841 	bl	800767a <_malloc_usable_size_r>
 80075f8:	4284      	cmp	r4, r0
 80075fa:	4607      	mov	r7, r0
 80075fc:	d802      	bhi.n	8007604 <_realloc_r+0x34>
 80075fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007602:	d812      	bhi.n	800762a <_realloc_r+0x5a>
 8007604:	4621      	mov	r1, r4
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff f956 	bl	80068b8 <_malloc_r>
 800760c:	4605      	mov	r5, r0
 800760e:	2800      	cmp	r0, #0
 8007610:	d0ed      	beq.n	80075ee <_realloc_r+0x1e>
 8007612:	42bc      	cmp	r4, r7
 8007614:	4622      	mov	r2, r4
 8007616:	4631      	mov	r1, r6
 8007618:	bf28      	it	cs
 800761a:	463a      	movcs	r2, r7
 800761c:	f7ff ff84 	bl	8007528 <memcpy>
 8007620:	4631      	mov	r1, r6
 8007622:	4640      	mov	r0, r8
 8007624:	f7ff f8d4 	bl	80067d0 <_free_r>
 8007628:	e7e1      	b.n	80075ee <_realloc_r+0x1e>
 800762a:	4635      	mov	r5, r6
 800762c:	e7df      	b.n	80075ee <_realloc_r+0x1e>

0800762e <__ascii_wctomb>:
 800762e:	b149      	cbz	r1, 8007644 <__ascii_wctomb+0x16>
 8007630:	2aff      	cmp	r2, #255	; 0xff
 8007632:	bf85      	ittet	hi
 8007634:	238a      	movhi	r3, #138	; 0x8a
 8007636:	6003      	strhi	r3, [r0, #0]
 8007638:	700a      	strbls	r2, [r1, #0]
 800763a:	f04f 30ff 	movhi.w	r0, #4294967295
 800763e:	bf98      	it	ls
 8007640:	2001      	movls	r0, #1
 8007642:	4770      	bx	lr
 8007644:	4608      	mov	r0, r1
 8007646:	4770      	bx	lr

08007648 <fiprintf>:
 8007648:	b40e      	push	{r1, r2, r3}
 800764a:	b503      	push	{r0, r1, lr}
 800764c:	4601      	mov	r1, r0
 800764e:	ab03      	add	r3, sp, #12
 8007650:	4805      	ldr	r0, [pc, #20]	; (8007668 <fiprintf+0x20>)
 8007652:	f853 2b04 	ldr.w	r2, [r3], #4
 8007656:	6800      	ldr	r0, [r0, #0]
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	f000 f83f 	bl	80076dc <_vfiprintf_r>
 800765e:	b002      	add	sp, #8
 8007660:	f85d eb04 	ldr.w	lr, [sp], #4
 8007664:	b003      	add	sp, #12
 8007666:	4770      	bx	lr
 8007668:	20000064 	.word	0x20000064

0800766c <abort>:
 800766c:	b508      	push	{r3, lr}
 800766e:	2006      	movs	r0, #6
 8007670:	f000 fa0c 	bl	8007a8c <raise>
 8007674:	2001      	movs	r0, #1
 8007676:	f7f9 fdff 	bl	8001278 <_exit>

0800767a <_malloc_usable_size_r>:
 800767a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800767e:	1f18      	subs	r0, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfbc      	itt	lt
 8007684:	580b      	ldrlt	r3, [r1, r0]
 8007686:	18c0      	addlt	r0, r0, r3
 8007688:	4770      	bx	lr

0800768a <__sfputc_r>:
 800768a:	6893      	ldr	r3, [r2, #8]
 800768c:	3b01      	subs	r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	b410      	push	{r4}
 8007692:	6093      	str	r3, [r2, #8]
 8007694:	da08      	bge.n	80076a8 <__sfputc_r+0x1e>
 8007696:	6994      	ldr	r4, [r2, #24]
 8007698:	42a3      	cmp	r3, r4
 800769a:	db01      	blt.n	80076a0 <__sfputc_r+0x16>
 800769c:	290a      	cmp	r1, #10
 800769e:	d103      	bne.n	80076a8 <__sfputc_r+0x1e>
 80076a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a4:	f000 b934 	b.w	8007910 <__swbuf_r>
 80076a8:	6813      	ldr	r3, [r2, #0]
 80076aa:	1c58      	adds	r0, r3, #1
 80076ac:	6010      	str	r0, [r2, #0]
 80076ae:	7019      	strb	r1, [r3, #0]
 80076b0:	4608      	mov	r0, r1
 80076b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <__sfputs_r>:
 80076b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ba:	4606      	mov	r6, r0
 80076bc:	460f      	mov	r7, r1
 80076be:	4614      	mov	r4, r2
 80076c0:	18d5      	adds	r5, r2, r3
 80076c2:	42ac      	cmp	r4, r5
 80076c4:	d101      	bne.n	80076ca <__sfputs_r+0x12>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e007      	b.n	80076da <__sfputs_r+0x22>
 80076ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ce:	463a      	mov	r2, r7
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7ff ffda 	bl	800768a <__sfputc_r>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d1f3      	bne.n	80076c2 <__sfputs_r+0xa>
 80076da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076dc <_vfiprintf_r>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	460d      	mov	r5, r1
 80076e2:	b09d      	sub	sp, #116	; 0x74
 80076e4:	4614      	mov	r4, r2
 80076e6:	4698      	mov	r8, r3
 80076e8:	4606      	mov	r6, r0
 80076ea:	b118      	cbz	r0, 80076f4 <_vfiprintf_r+0x18>
 80076ec:	6a03      	ldr	r3, [r0, #32]
 80076ee:	b90b      	cbnz	r3, 80076f4 <_vfiprintf_r+0x18>
 80076f0:	f7fe f960 	bl	80059b4 <__sinit>
 80076f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076f6:	07d9      	lsls	r1, r3, #31
 80076f8:	d405      	bmi.n	8007706 <_vfiprintf_r+0x2a>
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	059a      	lsls	r2, r3, #22
 80076fe:	d402      	bmi.n	8007706 <_vfiprintf_r+0x2a>
 8007700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007702:	f7fe fa6e 	bl	8005be2 <__retarget_lock_acquire_recursive>
 8007706:	89ab      	ldrh	r3, [r5, #12]
 8007708:	071b      	lsls	r3, r3, #28
 800770a:	d501      	bpl.n	8007710 <_vfiprintf_r+0x34>
 800770c:	692b      	ldr	r3, [r5, #16]
 800770e:	b99b      	cbnz	r3, 8007738 <_vfiprintf_r+0x5c>
 8007710:	4629      	mov	r1, r5
 8007712:	4630      	mov	r0, r6
 8007714:	f000 f93a 	bl	800798c <__swsetup_r>
 8007718:	b170      	cbz	r0, 8007738 <_vfiprintf_r+0x5c>
 800771a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800771c:	07dc      	lsls	r4, r3, #31
 800771e:	d504      	bpl.n	800772a <_vfiprintf_r+0x4e>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	b01d      	add	sp, #116	; 0x74
 8007726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	0598      	lsls	r0, r3, #22
 800772e:	d4f7      	bmi.n	8007720 <_vfiprintf_r+0x44>
 8007730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007732:	f7fe fa57 	bl	8005be4 <__retarget_lock_release_recursive>
 8007736:	e7f3      	b.n	8007720 <_vfiprintf_r+0x44>
 8007738:	2300      	movs	r3, #0
 800773a:	9309      	str	r3, [sp, #36]	; 0x24
 800773c:	2320      	movs	r3, #32
 800773e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007742:	f8cd 800c 	str.w	r8, [sp, #12]
 8007746:	2330      	movs	r3, #48	; 0x30
 8007748:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078fc <_vfiprintf_r+0x220>
 800774c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007750:	f04f 0901 	mov.w	r9, #1
 8007754:	4623      	mov	r3, r4
 8007756:	469a      	mov	sl, r3
 8007758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800775c:	b10a      	cbz	r2, 8007762 <_vfiprintf_r+0x86>
 800775e:	2a25      	cmp	r2, #37	; 0x25
 8007760:	d1f9      	bne.n	8007756 <_vfiprintf_r+0x7a>
 8007762:	ebba 0b04 	subs.w	fp, sl, r4
 8007766:	d00b      	beq.n	8007780 <_vfiprintf_r+0xa4>
 8007768:	465b      	mov	r3, fp
 800776a:	4622      	mov	r2, r4
 800776c:	4629      	mov	r1, r5
 800776e:	4630      	mov	r0, r6
 8007770:	f7ff ffa2 	bl	80076b8 <__sfputs_r>
 8007774:	3001      	adds	r0, #1
 8007776:	f000 80a9 	beq.w	80078cc <_vfiprintf_r+0x1f0>
 800777a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800777c:	445a      	add	r2, fp
 800777e:	9209      	str	r2, [sp, #36]	; 0x24
 8007780:	f89a 3000 	ldrb.w	r3, [sl]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80a1 	beq.w	80078cc <_vfiprintf_r+0x1f0>
 800778a:	2300      	movs	r3, #0
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007794:	f10a 0a01 	add.w	sl, sl, #1
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	9307      	str	r3, [sp, #28]
 800779c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077a0:	931a      	str	r3, [sp, #104]	; 0x68
 80077a2:	4654      	mov	r4, sl
 80077a4:	2205      	movs	r2, #5
 80077a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077aa:	4854      	ldr	r0, [pc, #336]	; (80078fc <_vfiprintf_r+0x220>)
 80077ac:	f7f8 fd48 	bl	8000240 <memchr>
 80077b0:	9a04      	ldr	r2, [sp, #16]
 80077b2:	b9d8      	cbnz	r0, 80077ec <_vfiprintf_r+0x110>
 80077b4:	06d1      	lsls	r1, r2, #27
 80077b6:	bf44      	itt	mi
 80077b8:	2320      	movmi	r3, #32
 80077ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077be:	0713      	lsls	r3, r2, #28
 80077c0:	bf44      	itt	mi
 80077c2:	232b      	movmi	r3, #43	; 0x2b
 80077c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c8:	f89a 3000 	ldrb.w	r3, [sl]
 80077cc:	2b2a      	cmp	r3, #42	; 0x2a
 80077ce:	d015      	beq.n	80077fc <_vfiprintf_r+0x120>
 80077d0:	9a07      	ldr	r2, [sp, #28]
 80077d2:	4654      	mov	r4, sl
 80077d4:	2000      	movs	r0, #0
 80077d6:	f04f 0c0a 	mov.w	ip, #10
 80077da:	4621      	mov	r1, r4
 80077dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077e0:	3b30      	subs	r3, #48	; 0x30
 80077e2:	2b09      	cmp	r3, #9
 80077e4:	d94d      	bls.n	8007882 <_vfiprintf_r+0x1a6>
 80077e6:	b1b0      	cbz	r0, 8007816 <_vfiprintf_r+0x13a>
 80077e8:	9207      	str	r2, [sp, #28]
 80077ea:	e014      	b.n	8007816 <_vfiprintf_r+0x13a>
 80077ec:	eba0 0308 	sub.w	r3, r0, r8
 80077f0:	fa09 f303 	lsl.w	r3, r9, r3
 80077f4:	4313      	orrs	r3, r2
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	46a2      	mov	sl, r4
 80077fa:	e7d2      	b.n	80077a2 <_vfiprintf_r+0xc6>
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	1d19      	adds	r1, r3, #4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	9103      	str	r1, [sp, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	bfbb      	ittet	lt
 8007808:	425b      	neglt	r3, r3
 800780a:	f042 0202 	orrlt.w	r2, r2, #2
 800780e:	9307      	strge	r3, [sp, #28]
 8007810:	9307      	strlt	r3, [sp, #28]
 8007812:	bfb8      	it	lt
 8007814:	9204      	strlt	r2, [sp, #16]
 8007816:	7823      	ldrb	r3, [r4, #0]
 8007818:	2b2e      	cmp	r3, #46	; 0x2e
 800781a:	d10c      	bne.n	8007836 <_vfiprintf_r+0x15a>
 800781c:	7863      	ldrb	r3, [r4, #1]
 800781e:	2b2a      	cmp	r3, #42	; 0x2a
 8007820:	d134      	bne.n	800788c <_vfiprintf_r+0x1b0>
 8007822:	9b03      	ldr	r3, [sp, #12]
 8007824:	1d1a      	adds	r2, r3, #4
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	9203      	str	r2, [sp, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	bfb8      	it	lt
 800782e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007832:	3402      	adds	r4, #2
 8007834:	9305      	str	r3, [sp, #20]
 8007836:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800790c <_vfiprintf_r+0x230>
 800783a:	7821      	ldrb	r1, [r4, #0]
 800783c:	2203      	movs	r2, #3
 800783e:	4650      	mov	r0, sl
 8007840:	f7f8 fcfe 	bl	8000240 <memchr>
 8007844:	b138      	cbz	r0, 8007856 <_vfiprintf_r+0x17a>
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	eba0 000a 	sub.w	r0, r0, sl
 800784c:	2240      	movs	r2, #64	; 0x40
 800784e:	4082      	lsls	r2, r0
 8007850:	4313      	orrs	r3, r2
 8007852:	3401      	adds	r4, #1
 8007854:	9304      	str	r3, [sp, #16]
 8007856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785a:	4829      	ldr	r0, [pc, #164]	; (8007900 <_vfiprintf_r+0x224>)
 800785c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007860:	2206      	movs	r2, #6
 8007862:	f7f8 fced 	bl	8000240 <memchr>
 8007866:	2800      	cmp	r0, #0
 8007868:	d03f      	beq.n	80078ea <_vfiprintf_r+0x20e>
 800786a:	4b26      	ldr	r3, [pc, #152]	; (8007904 <_vfiprintf_r+0x228>)
 800786c:	bb1b      	cbnz	r3, 80078b6 <_vfiprintf_r+0x1da>
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	3307      	adds	r3, #7
 8007872:	f023 0307 	bic.w	r3, r3, #7
 8007876:	3308      	adds	r3, #8
 8007878:	9303      	str	r3, [sp, #12]
 800787a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787c:	443b      	add	r3, r7
 800787e:	9309      	str	r3, [sp, #36]	; 0x24
 8007880:	e768      	b.n	8007754 <_vfiprintf_r+0x78>
 8007882:	fb0c 3202 	mla	r2, ip, r2, r3
 8007886:	460c      	mov	r4, r1
 8007888:	2001      	movs	r0, #1
 800788a:	e7a6      	b.n	80077da <_vfiprintf_r+0xfe>
 800788c:	2300      	movs	r3, #0
 800788e:	3401      	adds	r4, #1
 8007890:	9305      	str	r3, [sp, #20]
 8007892:	4619      	mov	r1, r3
 8007894:	f04f 0c0a 	mov.w	ip, #10
 8007898:	4620      	mov	r0, r4
 800789a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800789e:	3a30      	subs	r2, #48	; 0x30
 80078a0:	2a09      	cmp	r2, #9
 80078a2:	d903      	bls.n	80078ac <_vfiprintf_r+0x1d0>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d0c6      	beq.n	8007836 <_vfiprintf_r+0x15a>
 80078a8:	9105      	str	r1, [sp, #20]
 80078aa:	e7c4      	b.n	8007836 <_vfiprintf_r+0x15a>
 80078ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80078b0:	4604      	mov	r4, r0
 80078b2:	2301      	movs	r3, #1
 80078b4:	e7f0      	b.n	8007898 <_vfiprintf_r+0x1bc>
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	462a      	mov	r2, r5
 80078bc:	4b12      	ldr	r3, [pc, #72]	; (8007908 <_vfiprintf_r+0x22c>)
 80078be:	a904      	add	r1, sp, #16
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7fd fc41 	bl	8005148 <_printf_float>
 80078c6:	4607      	mov	r7, r0
 80078c8:	1c78      	adds	r0, r7, #1
 80078ca:	d1d6      	bne.n	800787a <_vfiprintf_r+0x19e>
 80078cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078ce:	07d9      	lsls	r1, r3, #31
 80078d0:	d405      	bmi.n	80078de <_vfiprintf_r+0x202>
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	059a      	lsls	r2, r3, #22
 80078d6:	d402      	bmi.n	80078de <_vfiprintf_r+0x202>
 80078d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078da:	f7fe f983 	bl	8005be4 <__retarget_lock_release_recursive>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	065b      	lsls	r3, r3, #25
 80078e2:	f53f af1d 	bmi.w	8007720 <_vfiprintf_r+0x44>
 80078e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e8:	e71c      	b.n	8007724 <_vfiprintf_r+0x48>
 80078ea:	ab03      	add	r3, sp, #12
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	462a      	mov	r2, r5
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <_vfiprintf_r+0x22c>)
 80078f2:	a904      	add	r1, sp, #16
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7fd feaf 	bl	8005658 <_printf_i>
 80078fa:	e7e4      	b.n	80078c6 <_vfiprintf_r+0x1ea>
 80078fc:	08007e54 	.word	0x08007e54
 8007900:	08007e5e 	.word	0x08007e5e
 8007904:	08005149 	.word	0x08005149
 8007908:	080076b9 	.word	0x080076b9
 800790c:	08007e5a 	.word	0x08007e5a

08007910 <__swbuf_r>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	460e      	mov	r6, r1
 8007914:	4614      	mov	r4, r2
 8007916:	4605      	mov	r5, r0
 8007918:	b118      	cbz	r0, 8007922 <__swbuf_r+0x12>
 800791a:	6a03      	ldr	r3, [r0, #32]
 800791c:	b90b      	cbnz	r3, 8007922 <__swbuf_r+0x12>
 800791e:	f7fe f849 	bl	80059b4 <__sinit>
 8007922:	69a3      	ldr	r3, [r4, #24]
 8007924:	60a3      	str	r3, [r4, #8]
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	071a      	lsls	r2, r3, #28
 800792a:	d525      	bpl.n	8007978 <__swbuf_r+0x68>
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	b31b      	cbz	r3, 8007978 <__swbuf_r+0x68>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	6922      	ldr	r2, [r4, #16]
 8007934:	1a98      	subs	r0, r3, r2
 8007936:	6963      	ldr	r3, [r4, #20]
 8007938:	b2f6      	uxtb	r6, r6
 800793a:	4283      	cmp	r3, r0
 800793c:	4637      	mov	r7, r6
 800793e:	dc04      	bgt.n	800794a <__swbuf_r+0x3a>
 8007940:	4621      	mov	r1, r4
 8007942:	4628      	mov	r0, r5
 8007944:	f7ff fd9e 	bl	8007484 <_fflush_r>
 8007948:	b9e0      	cbnz	r0, 8007984 <__swbuf_r+0x74>
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	3b01      	subs	r3, #1
 800794e:	60a3      	str	r3, [r4, #8]
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	6022      	str	r2, [r4, #0]
 8007956:	701e      	strb	r6, [r3, #0]
 8007958:	6962      	ldr	r2, [r4, #20]
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	429a      	cmp	r2, r3
 800795e:	d004      	beq.n	800796a <__swbuf_r+0x5a>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	07db      	lsls	r3, r3, #31
 8007964:	d506      	bpl.n	8007974 <__swbuf_r+0x64>
 8007966:	2e0a      	cmp	r6, #10
 8007968:	d104      	bne.n	8007974 <__swbuf_r+0x64>
 800796a:	4621      	mov	r1, r4
 800796c:	4628      	mov	r0, r5
 800796e:	f7ff fd89 	bl	8007484 <_fflush_r>
 8007972:	b938      	cbnz	r0, 8007984 <__swbuf_r+0x74>
 8007974:	4638      	mov	r0, r7
 8007976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007978:	4621      	mov	r1, r4
 800797a:	4628      	mov	r0, r5
 800797c:	f000 f806 	bl	800798c <__swsetup_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	d0d5      	beq.n	8007930 <__swbuf_r+0x20>
 8007984:	f04f 37ff 	mov.w	r7, #4294967295
 8007988:	e7f4      	b.n	8007974 <__swbuf_r+0x64>
	...

0800798c <__swsetup_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <__swsetup_r+0xac>)
 8007990:	4605      	mov	r5, r0
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	460c      	mov	r4, r1
 8007996:	b118      	cbz	r0, 80079a0 <__swsetup_r+0x14>
 8007998:	6a03      	ldr	r3, [r0, #32]
 800799a:	b90b      	cbnz	r3, 80079a0 <__swsetup_r+0x14>
 800799c:	f7fe f80a 	bl	80059b4 <__sinit>
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a6:	0718      	lsls	r0, r3, #28
 80079a8:	d422      	bmi.n	80079f0 <__swsetup_r+0x64>
 80079aa:	06d9      	lsls	r1, r3, #27
 80079ac:	d407      	bmi.n	80079be <__swsetup_r+0x32>
 80079ae:	2309      	movs	r3, #9
 80079b0:	602b      	str	r3, [r5, #0]
 80079b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	e034      	b.n	8007a28 <__swsetup_r+0x9c>
 80079be:	0758      	lsls	r0, r3, #29
 80079c0:	d512      	bpl.n	80079e8 <__swsetup_r+0x5c>
 80079c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079c4:	b141      	cbz	r1, 80079d8 <__swsetup_r+0x4c>
 80079c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079ca:	4299      	cmp	r1, r3
 80079cc:	d002      	beq.n	80079d4 <__swsetup_r+0x48>
 80079ce:	4628      	mov	r0, r5
 80079d0:	f7fe fefe 	bl	80067d0 <_free_r>
 80079d4:	2300      	movs	r3, #0
 80079d6:	6363      	str	r3, [r4, #52]	; 0x34
 80079d8:	89a3      	ldrh	r3, [r4, #12]
 80079da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	2300      	movs	r3, #0
 80079e2:	6063      	str	r3, [r4, #4]
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f043 0308 	orr.w	r3, r3, #8
 80079ee:	81a3      	strh	r3, [r4, #12]
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	b94b      	cbnz	r3, 8007a08 <__swsetup_r+0x7c>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079fe:	d003      	beq.n	8007a08 <__swsetup_r+0x7c>
 8007a00:	4621      	mov	r1, r4
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 f884 	bl	8007b10 <__smakebuf_r>
 8007a08:	89a0      	ldrh	r0, [r4, #12]
 8007a0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a0e:	f010 0301 	ands.w	r3, r0, #1
 8007a12:	d00a      	beq.n	8007a2a <__swsetup_r+0x9e>
 8007a14:	2300      	movs	r3, #0
 8007a16:	60a3      	str	r3, [r4, #8]
 8007a18:	6963      	ldr	r3, [r4, #20]
 8007a1a:	425b      	negs	r3, r3
 8007a1c:	61a3      	str	r3, [r4, #24]
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	b943      	cbnz	r3, 8007a34 <__swsetup_r+0xa8>
 8007a22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a26:	d1c4      	bne.n	80079b2 <__swsetup_r+0x26>
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
 8007a2a:	0781      	lsls	r1, r0, #30
 8007a2c:	bf58      	it	pl
 8007a2e:	6963      	ldrpl	r3, [r4, #20]
 8007a30:	60a3      	str	r3, [r4, #8]
 8007a32:	e7f4      	b.n	8007a1e <__swsetup_r+0x92>
 8007a34:	2000      	movs	r0, #0
 8007a36:	e7f7      	b.n	8007a28 <__swsetup_r+0x9c>
 8007a38:	20000064 	.word	0x20000064

08007a3c <_raise_r>:
 8007a3c:	291f      	cmp	r1, #31
 8007a3e:	b538      	push	{r3, r4, r5, lr}
 8007a40:	4604      	mov	r4, r0
 8007a42:	460d      	mov	r5, r1
 8007a44:	d904      	bls.n	8007a50 <_raise_r+0x14>
 8007a46:	2316      	movs	r3, #22
 8007a48:	6003      	str	r3, [r0, #0]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a52:	b112      	cbz	r2, 8007a5a <_raise_r+0x1e>
 8007a54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a58:	b94b      	cbnz	r3, 8007a6e <_raise_r+0x32>
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f830 	bl	8007ac0 <_getpid_r>
 8007a60:	462a      	mov	r2, r5
 8007a62:	4601      	mov	r1, r0
 8007a64:	4620      	mov	r0, r4
 8007a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a6a:	f000 b817 	b.w	8007a9c <_kill_r>
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d00a      	beq.n	8007a88 <_raise_r+0x4c>
 8007a72:	1c59      	adds	r1, r3, #1
 8007a74:	d103      	bne.n	8007a7e <_raise_r+0x42>
 8007a76:	2316      	movs	r3, #22
 8007a78:	6003      	str	r3, [r0, #0]
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e7e7      	b.n	8007a4e <_raise_r+0x12>
 8007a7e:	2400      	movs	r4, #0
 8007a80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a84:	4628      	mov	r0, r5
 8007a86:	4798      	blx	r3
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7e0      	b.n	8007a4e <_raise_r+0x12>

08007a8c <raise>:
 8007a8c:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <raise+0xc>)
 8007a8e:	4601      	mov	r1, r0
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	f7ff bfd3 	b.w	8007a3c <_raise_r>
 8007a96:	bf00      	nop
 8007a98:	20000064 	.word	0x20000064

08007a9c <_kill_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d07      	ldr	r5, [pc, #28]	; (8007abc <_kill_r+0x20>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	602b      	str	r3, [r5, #0]
 8007aaa:	f7f9 fbd5 	bl	8001258 <_kill>
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	d102      	bne.n	8007ab8 <_kill_r+0x1c>
 8007ab2:	682b      	ldr	r3, [r5, #0]
 8007ab4:	b103      	cbz	r3, 8007ab8 <_kill_r+0x1c>
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	bd38      	pop	{r3, r4, r5, pc}
 8007aba:	bf00      	nop
 8007abc:	20000b68 	.word	0x20000b68

08007ac0 <_getpid_r>:
 8007ac0:	f7f9 bbc2 	b.w	8001248 <_getpid>

08007ac4 <__swhatbuf_r>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007acc:	2900      	cmp	r1, #0
 8007ace:	b096      	sub	sp, #88	; 0x58
 8007ad0:	4615      	mov	r5, r2
 8007ad2:	461e      	mov	r6, r3
 8007ad4:	da0d      	bge.n	8007af2 <__swhatbuf_r+0x2e>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007adc:	f04f 0100 	mov.w	r1, #0
 8007ae0:	bf0c      	ite	eq
 8007ae2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ae6:	2340      	movne	r3, #64	; 0x40
 8007ae8:	2000      	movs	r0, #0
 8007aea:	6031      	str	r1, [r6, #0]
 8007aec:	602b      	str	r3, [r5, #0]
 8007aee:	b016      	add	sp, #88	; 0x58
 8007af0:	bd70      	pop	{r4, r5, r6, pc}
 8007af2:	466a      	mov	r2, sp
 8007af4:	f000 f848 	bl	8007b88 <_fstat_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	dbec      	blt.n	8007ad6 <__swhatbuf_r+0x12>
 8007afc:	9901      	ldr	r1, [sp, #4]
 8007afe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b06:	4259      	negs	r1, r3
 8007b08:	4159      	adcs	r1, r3
 8007b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b0e:	e7eb      	b.n	8007ae8 <__swhatbuf_r+0x24>

08007b10 <__smakebuf_r>:
 8007b10:	898b      	ldrh	r3, [r1, #12]
 8007b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b14:	079d      	lsls	r5, r3, #30
 8007b16:	4606      	mov	r6, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	d507      	bpl.n	8007b2c <__smakebuf_r+0x1c>
 8007b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	2301      	movs	r3, #1
 8007b26:	6163      	str	r3, [r4, #20]
 8007b28:	b002      	add	sp, #8
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	ab01      	add	r3, sp, #4
 8007b2e:	466a      	mov	r2, sp
 8007b30:	f7ff ffc8 	bl	8007ac4 <__swhatbuf_r>
 8007b34:	9900      	ldr	r1, [sp, #0]
 8007b36:	4605      	mov	r5, r0
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7fe febd 	bl	80068b8 <_malloc_r>
 8007b3e:	b948      	cbnz	r0, 8007b54 <__smakebuf_r+0x44>
 8007b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b44:	059a      	lsls	r2, r3, #22
 8007b46:	d4ef      	bmi.n	8007b28 <__smakebuf_r+0x18>
 8007b48:	f023 0303 	bic.w	r3, r3, #3
 8007b4c:	f043 0302 	orr.w	r3, r3, #2
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	e7e3      	b.n	8007b1c <__smakebuf_r+0xc>
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	6020      	str	r0, [r4, #0]
 8007b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	9b00      	ldr	r3, [sp, #0]
 8007b60:	6163      	str	r3, [r4, #20]
 8007b62:	9b01      	ldr	r3, [sp, #4]
 8007b64:	6120      	str	r0, [r4, #16]
 8007b66:	b15b      	cbz	r3, 8007b80 <__smakebuf_r+0x70>
 8007b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f000 f81d 	bl	8007bac <_isatty_r>
 8007b72:	b128      	cbz	r0, 8007b80 <__smakebuf_r+0x70>
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f023 0303 	bic.w	r3, r3, #3
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	81a3      	strh	r3, [r4, #12]
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	431d      	orrs	r5, r3
 8007b84:	81a5      	strh	r5, [r4, #12]
 8007b86:	e7cf      	b.n	8007b28 <__smakebuf_r+0x18>

08007b88 <_fstat_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d07      	ldr	r5, [pc, #28]	; (8007ba8 <_fstat_r+0x20>)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4608      	mov	r0, r1
 8007b92:	4611      	mov	r1, r2
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	f7f9 fbbe 	bl	8001316 <_fstat>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	d102      	bne.n	8007ba4 <_fstat_r+0x1c>
 8007b9e:	682b      	ldr	r3, [r5, #0]
 8007ba0:	b103      	cbz	r3, 8007ba4 <_fstat_r+0x1c>
 8007ba2:	6023      	str	r3, [r4, #0]
 8007ba4:	bd38      	pop	{r3, r4, r5, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000b68 	.word	0x20000b68

08007bac <_isatty_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d06      	ldr	r5, [pc, #24]	; (8007bc8 <_isatty_r+0x1c>)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	f7f9 fbbd 	bl	8001336 <_isatty>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_isatty_r+0x1a>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_isatty_r+0x1a>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	20000b68 	.word	0x20000b68

08007bcc <_init>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	bf00      	nop
 8007bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd2:	bc08      	pop	{r3}
 8007bd4:	469e      	mov	lr, r3
 8007bd6:	4770      	bx	lr

08007bd8 <_fini>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr
