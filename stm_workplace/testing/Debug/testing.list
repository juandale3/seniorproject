
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08006e18  08006e18  00016e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c4  080071c4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080071c4  080071c4  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071c4  080071c4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c4  080071c4  000171c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080071cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000260  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000438  20000438  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d47e  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002007  00000000  00000000  0002d6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a58  00000000  00000000  0002f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007e1  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c9f9  00000000  00000000  00030909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e5e8  00000000  00000000  0004d302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a5f20  00000000  00000000  0005b8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003960  00000000  00000000  0010180c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0010516c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e00 	.word	0x08006e00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006e00 	.word	0x08006e00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <createDAC>:
dac_handletypedef createDAC(DAC_HandleTypeDef *dac, uint32_t channel)
/*
 * Creates user-defined data type to be able to control the DAC
 * Pass the DAC_HandleTypeDef and channel as args
 */
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	HAL_DAC_Start(dac, channel);
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	68b8      	ldr	r0, [r7, #8]
 8000bf8:	f001 faea 	bl	80021d0 <HAL_DAC_Start>
	dac_handletypedef output;
	output.dac = dac;
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	613b      	str	r3, [r7, #16]
	output.channel = channel;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	617b      	str	r3, [r7, #20]
	return output;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	461a      	mov	r2, r3
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c10:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	0000      	movs	r0, r0
	...

08000c20 <dacSet>:

void dacSet(dac_handletypedef *dac, float volts){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	ed87 0a00 	vstr	s0, [r7]
	dacBitVal = (volts/3.3)*4095;
 8000c2c:	6838      	ldr	r0, [r7, #0]
 8000c2e:	f7ff fc8b 	bl	8000548 <__aeabi_f2d>
 8000c32:	a314      	add	r3, pc, #80	; (adr r3, 8000c84 <dacSet+0x64>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	f7ff fe08 	bl	800084c <__aeabi_ddiv>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4610      	mov	r0, r2
 8000c42:	4619      	mov	r1, r3
 8000c44:	a311      	add	r3, pc, #68	; (adr r3, 8000c8c <dacSet+0x6c>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f7ff fcd5 	bl	80005f8 <__aeabi_dmul>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4610      	mov	r0, r2
 8000c54:	4619      	mov	r1, r3
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <dacSet+0x60>)
 8000c5e:	6013      	str	r3, [r2, #0]
	HAL_DAC_SetValue(dac->dac, dac->channel, DAC_ALIGN_12B_R, dacBitVal);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6859      	ldr	r1, [r3, #4]
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <dacSet+0x60>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f001 fa8a 	bl	8002186 <HAL_DAC_SetValue>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	f3af 8000 	nop.w
 8000c80:	200001f4 	.word	0x200001f4
 8000c84:	66666666 	.word	0x66666666
 8000c88:	400a6666 	.word	0x400a6666
 8000c8c:	00000000 	.word	0x00000000
 8000c90:	40affe00 	.word	0x40affe00

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9a:	f000 fb8b 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 f81d 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f000 f93d 	bl	8000f20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ca6:	f000 f90b 	bl	8000ec0 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000caa:	f000 f8df 	bl	8000e6c <MX_DAC1_Init>
  MX_ADC1_Init();
 8000cae:	f000 f86d 	bl	8000d8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  dac_handletypedef reg = createDAC(&hdac1, DAC_CHANNEL_1);
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <main+0x40>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff95 	bl	8000be8 <createDAC>
  dacSet(&reg, value_dac);
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <main+0x44>)
 8000cc0:	edd3 7a00 	vldr	s15, [r3]
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ffa8 	bl	8000c20 <dacSet>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <main+0x3c>
 8000cd2:	bf00      	nop
 8000cd4:	20000248 	.word	0x20000248
 8000cd8:	20000000 	.word	0x20000000

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b096      	sub	sp, #88	; 0x58
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ce6:	2228      	movs	r2, #40	; 0x28
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 f935 	bl	8004f5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d10:	2302      	movs	r3, #2
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	2301      	movs	r3, #1
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d18:	2310      	movs	r3, #16
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d20:	2300      	movs	r3, #0
 8000d22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fc74 	bl	800261c <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d3a:	f000 f927 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	230f      	movs	r3, #15
 8000d40:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fc9d 	bl	8003698 <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d64:	f000 f912 	bl	8000f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d70:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fec5 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d80:	f000 f904 	bl	8000f8c <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3758      	adds	r7, #88	; 0x58
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000db0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000db4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000df8:	2204      	movs	r2, #4
 8000dfa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e0a:	f000 fb39 	bl	8001480 <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 f8ba 	bl	8000f8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e24:	f000 ff7c 	bl	8001d20 <HAL_ADCEx_MultiModeConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e2e:	f000 f8ad 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e50:	f000 fca8 	bl	80017a4 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e5a:	f000 f897 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200001f8 	.word	0x200001f8

08000e6c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_DAC1_Init+0x4c>)
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <MX_DAC1_Init+0x50>)
 8000e80:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_DAC1_Init+0x4c>)
 8000e84:	f001 f95d 	bl	8002142 <HAL_DAC_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000e8e:	f000 f87d 	bl	8000f8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_DAC1_Init+0x4c>)
 8000ea2:	f001 f9e1 	bl	8002268 <HAL_DAC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000eac:	f000 f86e 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000248 	.word	0x20000248
 8000ebc:	40007400 	.word	0x40007400

08000ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <MX_USART2_UART_Init+0x5c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ecc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000f04:	f002 ff24 	bl	8003d50 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f000 f83d 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000025c 	.word	0x2000025c
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f40:	6153      	str	r3, [r2, #20]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8000f66:	232a      	movs	r3, #42	; 0x2a
 8000f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f001 f9dc 	bl	8002338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x44>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_MspInit+0x44>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_MspInit+0x44>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_MspInit+0x44>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001000:	d124      	bne.n	800104c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_ADC_MspInit+0x74>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <HAL_ADC_MspInit+0x74>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_ADC_MspInit+0x74>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_ADC_MspInit+0x74>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <HAL_ADC_MspInit+0x74>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_ADC_MspInit+0x74>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001032:	2301      	movs	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 f976 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <HAL_DAC_MspInit+0x74>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d124      	bne.n	80010c4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_DAC_MspInit+0x78>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_DAC_MspInit+0x78>)
 8001080:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_DAC_MspInit+0x78>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_DAC_MspInit+0x78>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_DAC_MspInit+0x78>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_DAC_MspInit+0x78>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010aa:	2310      	movs	r3, #16
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f001 f93a 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40007400 	.word	0x40007400
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_UART_MspInit+0x80>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d129      	bne.n	800114a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_UART_MspInit+0x84>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_UART_MspInit+0x84>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UART_MspInit+0x84>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_UART_MspInit+0x84>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_UART_MspInit+0x84>)
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_UART_MspInit+0x84>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001126:	f248 0304 	movw	r3, #32772	; 0x8004
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001138:	2307      	movs	r3, #7
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f001 f8f7 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40004400 	.word	0x40004400
 8001158:	40021000 	.word	0x40021000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <NMI_Handler+0x4>

08001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <MemManage_Handler+0x4>

0800116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <UsageFault_Handler+0x4>

0800117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a8:	f000 f94a 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_kill>:

int _kill(int pid, int sig)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ca:	f003 ff19 	bl	8005000 <__errno>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2216      	movs	r2, #22
 80011d2:	601a      	str	r2, [r3, #0]
  return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_exit>:

void _exit (int status)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffe7 	bl	80011c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011f2:	e7fe      	b.n	80011f2 <_exit+0x12>

080011f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e00a      	b.n	800121c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001206:	f3af 8000 	nop.w
 800120a:	4601      	mov	r1, r0
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60ba      	str	r2, [r7, #8]
 8001212:	b2ca      	uxtb	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbf0      	blt.n	8001206 <_read+0x12>
  }

  return len;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e009      	b.n	8001254 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf1      	blt.n	8001240 <_write+0x12>
  }
  return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_close>:

int _close(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128e:	605a      	str	r2, [r3, #4]
  return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_isatty>:

int _isatty(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f003 fe7e 	bl	8005000 <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20003000 	.word	0x20003000
 8001330:	00000400 	.word	0x00000400
 8001334:	200002e4 	.word	0x200002e4
 8001338:	20000438 	.word	0x20000438

0800133c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001364:	f7ff ffea 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	; (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f003 fe3d 	bl	800500c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001392:	f7ff fc7f 	bl	8000c94 <main>

08001396 <LoopForever>:

LoopForever:
    b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001398:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80013a4:	080071cc 	.word	0x080071cc
  ldr r2, =_sbss
 80013a8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80013ac:	20000438 	.word	0x20000438

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x28>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x28>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 fe89 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 f808 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fde2 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x54>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fe93 	bl	800212a <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 fe69 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x5c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000004 	.word	0x20000004
 8001438:	2000000c 	.word	0x2000000c
 800143c:	20000008 	.word	0x20000008

08001440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000000c 	.word	0x2000000c
 8001464:	200002e8 	.word	0x200002e8

08001468 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;  
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200002e8 	.word	0x200002e8

08001480 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b09a      	sub	sp, #104	; 0x68
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e172      	b.n	8001786 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d176      	bne.n	80015a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d152      	bne.n	8001560 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fd83 	bl	8000fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d13b      	bne.n	8001560 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fcdf 	bl	8001eac <ADC_Disable>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d12f      	bne.n	8001560 <HAL_ADC_Init+0xe0>
 8001500:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001504:	2b00      	cmp	r3, #0
 8001506:	d12b      	bne.n	8001560 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001510:	f023 0302 	bic.w	r3, r3, #2
 8001514:	f043 0202 	orr.w	r2, r3, #2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800152a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800153a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800153c:	4b94      	ldr	r3, [pc, #592]	; (8001790 <HAL_ADC_Init+0x310>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a94      	ldr	r2, [pc, #592]	; (8001794 <HAL_ADC_Init+0x314>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9a      	lsrs	r2, r3, #18
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001552:	e002      	b.n	800155a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3b01      	subs	r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f9      	bne.n	8001554 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800157c:	d110      	bne.n	80015a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f023 0312 	bic.w	r3, r3, #18
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 80df 	bne.w	800176c <HAL_ADC_Init+0x2ec>
 80015ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 80da 	bne.w	800176c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 80d2 	bne.w	800176c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015d0:	f043 0202 	orr.w	r2, r3, #2
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d8:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <HAL_ADC_Init+0x318>)
 80015da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e4:	d102      	bne.n	80015ec <HAL_ADC_Init+0x16c>
 80015e6:	4b6d      	ldr	r3, [pc, #436]	; (800179c <HAL_ADC_Init+0x31c>)
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e002      	b.n	80015f2 <HAL_ADC_Init+0x172>
 80015ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015f0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_ADC_Init+0x192>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Init+0x192>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_ADC_Init+0x194>
 8001612:	2300      	movs	r3, #0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d11c      	bne.n	8001652 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001618:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800161a:	2b00      	cmp	r3, #0
 800161c:	d010      	beq.n	8001640 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_ADC_Init+0x1ba>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x1ba>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_ADC_Init+0x1bc>
 800163a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800163c:	2b00      	cmp	r3, #0
 800163e:	d108      	bne.n	8001652 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	431a      	orrs	r2, r3
 800164e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001650:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7e5b      	ldrb	r3, [r3, #25]
 8001656:	035b      	lsls	r3, r3, #13
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800165c:	2a01      	cmp	r2, #1
 800165e:	d002      	beq.n	8001666 <HAL_ADC_Init+0x1e6>
 8001660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001664:	e000      	b.n	8001668 <HAL_ADC_Init+0x1e8>
 8001666:	2200      	movs	r2, #0
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4313      	orrs	r3, r2
 8001676:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001678:	4313      	orrs	r3, r2
 800167a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d11b      	bne.n	80016be <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7e5b      	ldrb	r3, [r3, #25]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	3b01      	subs	r3, #1
 8001694:	045a      	lsls	r2, r3, #17
 8001696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001698:	4313      	orrs	r3, r2
 800169a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169e:	663b      	str	r3, [r7, #96]	; 0x60
 80016a0:	e00d      	b.n	80016be <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80016aa:	f043 0220 	orr.w	r2, r3, #32
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d007      	beq.n	80016d6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	4313      	orrs	r3, r2
 80016d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016d2:	4313      	orrs	r3, r2
 80016d4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d114      	bne.n	800170e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016f2:	f023 0302 	bic.w	r3, r3, #2
 80016f6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	039a      	lsls	r2, r3, #14
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4313      	orrs	r3, r2
 8001708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800170a:	4313      	orrs	r3, r2
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <HAL_ADC_Init+0x320>)
 8001716:	4013      	ands	r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800171e:	430b      	orrs	r3, r1
 8001720:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d10c      	bne.n	8001744 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	f023 010f 	bic.w	r1, r3, #15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
 8001742:	e007      	b.n	8001754 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 020f 	bic.w	r2, r2, #15
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
 800176a:	e00a      	b.n	8001782 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f023 0312 	bic.w	r3, r3, #18
 8001774:	f043 0210 	orr.w	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800177c:	2301      	movs	r3, #1
 800177e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001782:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001786:	4618      	mov	r0, r3
 8001788:	3768      	adds	r7, #104	; 0x68
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000004 	.word	0x20000004
 8001794:	431bde83 	.word	0x431bde83
 8001798:	50000300 	.word	0x50000300
 800179c:	50000100 	.word	0x50000100
 80017a0:	fff0c007 	.word	0xfff0c007

080017a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b09b      	sub	sp, #108	; 0x6c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x22>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e2a1      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x566>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 8285 	bne.w	8001ce8 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d81c      	bhi.n	8001820 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	461a      	mov	r2, r3
 80017fa:	231f      	movs	r3, #31
 80017fc:	4093      	lsls	r3, r2
 80017fe:	43db      	mvns	r3, r3
 8001800:	4019      	ands	r1, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa00 f203 	lsl.w	r2, r0, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
 800181e:	e063      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b09      	cmp	r3, #9
 8001826:	d81e      	bhi.n	8001866 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	3b1e      	subs	r3, #30
 800183c:	221f      	movs	r2, #31
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	4019      	ands	r1, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	3b1e      	subs	r3, #30
 8001858:	fa00 f203 	lsl.w	r2, r0, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
 8001864:	e040      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b0e      	cmp	r3, #14
 800186c:	d81e      	bhi.n	80018ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	3b3c      	subs	r3, #60	; 0x3c
 8001882:	221f      	movs	r2, #31
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	3b3c      	subs	r3, #60	; 0x3c
 800189e:	fa00 f203 	lsl.w	r2, r0, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
 80018aa:	e01d      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	3b5a      	subs	r3, #90	; 0x5a
 80018c0:	221f      	movs	r2, #31
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	4019      	ands	r1, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	3b5a      	subs	r3, #90	; 0x5a
 80018dc:	fa00 f203 	lsl.w	r2, r0, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 80e5 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b09      	cmp	r3, #9
 80018fe:	d91c      	bls.n	800193a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6999      	ldr	r1, [r3, #24]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	3b1e      	subs	r3, #30
 8001912:	2207      	movs	r2, #7
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	4019      	ands	r1, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6898      	ldr	r0, [r3, #8]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	3b1e      	subs	r3, #30
 800192c:	fa00 f203 	lsl.w	r2, r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	619a      	str	r2, [r3, #24]
 8001938:	e019      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6959      	ldr	r1, [r3, #20]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6898      	ldr	r0, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	3b01      	subs	r3, #1
 800198c:	2b03      	cmp	r3, #3
 800198e:	d84f      	bhi.n	8001a30 <HAL_ADC_ConfigChannel+0x28c>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <HAL_ADC_ConfigChannel+0x1f4>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019cb 	.word	0x080019cb
 80019a0:	080019ed 	.word	0x080019ed
 80019a4:	08001a0f 	.word	0x08001a0f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ae:	4b9c      	ldr	r3, [pc, #624]	; (8001c20 <HAL_ADC_ConfigChannel+0x47c>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	0691      	lsls	r1, r2, #26
 80019b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019ba:	430a      	orrs	r2, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019c8:	e07b      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019d0:	4b93      	ldr	r3, [pc, #588]	; (8001c20 <HAL_ADC_ConfigChannel+0x47c>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	0691      	lsls	r1, r2, #26
 80019da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019dc:	430a      	orrs	r2, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019ea:	e06a      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019f2:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <HAL_ADC_ConfigChannel+0x47c>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	0691      	lsls	r1, r2, #26
 80019fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019fe:	430a      	orrs	r2, r1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a0a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a0c:	e059      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a14:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <HAL_ADC_ConfigChannel+0x47c>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	0691      	lsls	r1, r2, #26
 8001a1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a20:	430a      	orrs	r2, r1
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a2c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a2e:	e048      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	069b      	lsls	r3, r3, #26
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d107      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a52:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	069b      	lsls	r3, r3, #26
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d107      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a76:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	069b      	lsls	r3, r3, #26
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a9a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	069b      	lsls	r3, r3, #26
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001abe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ac0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x33e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x33e>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x340>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 810a 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d00f      	beq.n	8001b12 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43da      	mvns	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b10:	e049      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	409a      	lsls	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d91c      	bls.n	8001b6e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6999      	ldr	r1, [r3, #24]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	3b1b      	subs	r3, #27
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4019      	ands	r1, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6898      	ldr	r0, [r3, #8]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b1b      	subs	r3, #27
 8001b60:	fa00 f203 	lsl.w	r2, r0, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	619a      	str	r2, [r3, #24]
 8001b6c:	e01b      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6959      	ldr	r1, [r3, #20]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	2207      	movs	r2, #7
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4019      	ands	r1, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6898      	ldr	r0, [r3, #8]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_ADC_ConfigChannel+0x480>)
 8001ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d105      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d015      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bc2:	2b11      	cmp	r3, #17
 8001bc4:	d105      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	f040 8091 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 808a 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf2:	d102      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x456>
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_ADC_ConfigChannel+0x484>)
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e002      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x45c>
 8001bfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bfe:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d10e      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x488>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x488>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e006      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x48a>
 8001c20:	83fff000 	.word	0x83fff000
 8001c24:	50000300 	.word	0x50000300
 8001c28:	50000100 	.word	0x50000100
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d150      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x4b0>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x4b0>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x4b2>
 8001c54:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d13c      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d11d      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x4fa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c6a:	d118      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c76:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_ADC_ConfigChannel+0x574>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_ADC_ConfigChannel+0x578>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9a      	lsrs	r2, r3, #18
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c8e:	e002      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f9      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c9c:	e02e      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d10b      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x51a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cbc:	e01e      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d11a      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cd2:	e013      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f043 0220 	orr.w	r2, r3, #32
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ce6:	e00a      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cfa:	e000      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cfc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	376c      	adds	r7, #108	; 0x6c
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b099      	sub	sp, #100	; 0x64
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d38:	d102      	bne.n	8001d40 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	e002      	b.n	8001d46 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d44:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0a2      	b.n	8001e96 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e09b      	b.n	8001e96 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d17f      	bne.n	8001e74 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d179      	bne.n	8001e74 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001d82:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d040      	beq.n	8001e0e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d9e:	035b      	lsls	r3, r3, #13
 8001da0:	430b      	orrs	r3, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001da6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d15c      	bne.n	8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001dea:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d14b      	bne.n	8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001df8:	f023 030f 	bic.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	6811      	ldr	r1, [r2, #0]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	6892      	ldr	r2, [r2, #8]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	431a      	orrs	r2, r3
 8001e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e0c:	e03c      	b.n	8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e18:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d123      	bne.n	8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d107      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001e5c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d112      	bne.n	8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e6a:	f023 030f 	bic.w	r3, r3, #15
 8001e6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e70:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e72:	e009      	b.n	8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f043 0220 	orr.w	r2, r3, #32
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e86:	e000      	b.n	8001e8a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e88:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e96:	4618      	mov	r0, r3
 8001e98:	3764      	adds	r7, #100	; 0x64
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	50000100 	.word	0x50000100
 8001ea8:	50000300 	.word	0x50000300

08001eac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <ADC_Disable+0x2c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <ADC_Disable+0x2c>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <ADC_Disable+0x2e>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d047      	beq.n	8001f6e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 030d 	and.w	r3, r3, #13
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10f      	bne.n	8001f0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0202 	orr.w	r2, r2, #2
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2203      	movs	r2, #3
 8001f02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f04:	f7ff fab0 	bl	8001468 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f0a:	e029      	b.n	8001f60 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0210 	orr.w	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e023      	b.n	8001f70 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f28:	f7ff fa9e 	bl	8001468 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d914      	bls.n	8001f60 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10d      	bne.n	8001f60 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f043 0210 	orr.w	r2, r3, #16
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e007      	b.n	8001f70 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d0dc      	beq.n	8001f28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff47 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff5c 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffb0 	bl	8002098 <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e014      	b.n	800217e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	791b      	ldrb	r3, [r3, #4]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe ff77 	bl	8001058 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002186:	b480      	push	{r7}
 8002188:	b087      	sub	sp, #28
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	3308      	adds	r3, #8
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e004      	b.n	80021ba <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	3314      	adds	r3, #20
 80021b8:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	461a      	mov	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	795b      	ldrb	r3, [r3, #5]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_DAC_Start+0x16>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e039      	b.n	800225a <HAL_DAC_Start+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	2201      	movs	r2, #1
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	409a      	lsls	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002216:	2b3c      	cmp	r3, #60	; 0x3c
 8002218:	d118      	bne.n	800224c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	e00f      	b.n	800224c <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002236:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800223a:	d107      	bne.n	800224c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0202 	orr.w	r2, r2, #2
 800224a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	795b      	ldrb	r3, [r3, #5]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_DAC_ConfigChannel+0x20>
 8002284:	2302      	movs	r3, #2
 8002286:	e04e      	b.n	8002326 <HAL_DAC_ConfigChannel+0xbe>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2202      	movs	r2, #2
 8002292:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_DAC_ConfigChannel+0xcc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d112      	bne.n	80022cc <HAL_DAC_ConfigChannel+0x64>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10f      	bne.n	80022cc <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80022ac:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4013      	ands	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	e00e      	b.n	80022ea <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80022cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4013      	ands	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	22c0      	movs	r2, #192	; 0xc0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40007400 	.word	0x40007400

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002346:	e14e      	b.n	80025e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8140 	beq.w	80025e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d005      	beq.n	8002378 <HAL_GPIO_Init+0x40>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d130      	bne.n	80023da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ae:	2201      	movs	r2, #1
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f003 0201 	and.w	r2, r3, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d017      	beq.n	8002416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d123      	bne.n	800246a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	6939      	ldr	r1, [r7, #16]
 8002466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0203 	and.w	r2, r3, #3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 809a 	beq.w	80025e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ac:	4b55      	ldr	r3, [pc, #340]	; (8002604 <HAL_GPIO_Init+0x2cc>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a54      	ldr	r2, [pc, #336]	; (8002604 <HAL_GPIO_Init+0x2cc>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b52      	ldr	r3, [pc, #328]	; (8002604 <HAL_GPIO_Init+0x2cc>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c4:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ee:	d013      	beq.n	8002518 <HAL_GPIO_Init+0x1e0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a46      	ldr	r2, [pc, #280]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00d      	beq.n	8002514 <HAL_GPIO_Init+0x1dc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a45      	ldr	r2, [pc, #276]	; (8002610 <HAL_GPIO_Init+0x2d8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <HAL_GPIO_Init+0x1d8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a44      	ldr	r2, [pc, #272]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_GPIO_Init+0x1d4>
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_GPIO_Init+0x1e2>
 800250c:	2305      	movs	r3, #5
 800250e:	e004      	b.n	800251a <HAL_GPIO_Init+0x1e2>
 8002510:	2302      	movs	r3, #2
 8002512:	e002      	b.n	800251a <HAL_GPIO_Init+0x1e2>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_GPIO_Init+0x1e2>
 8002518:	2300      	movs	r3, #0
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	f002 0203 	and.w	r2, r2, #3
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	4093      	lsls	r3, r2
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800252a:	4937      	ldr	r1, [pc, #220]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002538:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800255c:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f aea9 	bne.w	8002348 <HAL_GPIO_Init+0x10>
  }
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40021000 	.word	0x40021000
 8002608:	40010000 	.word	0x40010000
 800260c:	48000400 	.word	0x48000400
 8002610:	48000800 	.word	0x48000800
 8002614:	48000c00 	.word	0x48000c00
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002622:	af00      	add	r7, sp, #0
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f001 b823 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 817d 	beq.w	8002952 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002658:	4bbc      	ldr	r3, [pc, #752]	; (800294c <HAL_RCC_OscConfig+0x330>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b04      	cmp	r3, #4
 8002662:	d00c      	beq.n	800267e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002664:	4bb9      	ldr	r3, [pc, #740]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d15c      	bne.n	800272a <HAL_RCC_OscConfig+0x10e>
 8002670:	4bb6      	ldr	r3, [pc, #728]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d155      	bne.n	800272a <HAL_RCC_OscConfig+0x10e>
 800267e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002682:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002692:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_OscConfig+0x94>
 80026aa:	4ba8      	ldr	r3, [pc, #672]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	e015      	b.n	80026dc <HAL_RCC_OscConfig+0xc0>
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026d8:	4b9c      	ldr	r3, [pc, #624]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026e8:	fa92 f2a2 	rbit	r2, r2
 80026ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026f4:	fab2 f282 	clz	r2, r2
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f042 0220 	orr.w	r2, r2, #32
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f002 021f 	and.w	r2, r2, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 811f 	beq.w	8002950 <HAL_RCC_OscConfig+0x334>
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 8116 	bne.w	8002950 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f000 bfaf 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x12e>
 800273c:	4b83      	ldr	r3, [pc, #524]	; (800294c <HAL_RCC_OscConfig+0x330>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a82      	ldr	r2, [pc, #520]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e036      	b.n	80027b8 <HAL_RCC_OscConfig+0x19c>
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x158>
 800275a:	4b7c      	ldr	r3, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x330>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7b      	ldr	r2, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b79      	ldr	r3, [pc, #484]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a78      	ldr	r2, [pc, #480]	; (800294c <HAL_RCC_OscConfig+0x330>)
 800276c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e021      	b.n	80027b8 <HAL_RCC_OscConfig+0x19c>
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x184>
 8002786:	4b71      	ldr	r3, [pc, #452]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a70      	ldr	r2, [pc, #448]	; (800294c <HAL_RCC_OscConfig+0x330>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b6e      	ldr	r3, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6d      	ldr	r2, [pc, #436]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x19c>
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a69      	ldr	r2, [pc, #420]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a66      	ldr	r2, [pc, #408]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b8:	4b64      	ldr	r3, [pc, #400]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f023 020f 	bic.w	r2, r3, #15
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	495f      	ldr	r1, [pc, #380]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d059      	beq.n	8002896 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe fe41 	bl	8001468 <HAL_GetTick>
 80027e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe fe3c 	bl	8001468 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d902      	bls.n	8002802 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	f000 bf43 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>
 8002802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002806:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002816:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <HAL_RCC_OscConfig+0x218>
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	e015      	b.n	8002860 <HAL_RCC_OscConfig+0x244>
 8002834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002838:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002850:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800285c:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_RCC_OscConfig+0x330>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002864:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002868:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800286c:	fa92 f2a2 	rbit	r2, r2
 8002870:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002874:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002878:	fab2 f282 	clz	r2, r2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f002 021f 	and.w	r2, r2, #31
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f202 	lsl.w	r2, r1, r2
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ab      	beq.n	80027ec <HAL_RCC_OscConfig+0x1d0>
 8002894:	e05d      	b.n	8002952 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe fde7 	bl	8001468 <HAL_GetTick>
 800289a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe fde2 	bl	8001468 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	; 0x64
 80028ae:	d902      	bls.n	80028b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	f000 bee9 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>
 80028b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d102      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2cc>
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_RCC_OscConfig+0x330>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	e015      	b.n	8002914 <HAL_RCC_OscConfig+0x2f8>
 80028e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002900:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002904:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_RCC_OscConfig+0x330>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002918:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800291c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002928:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0220 	orr.w	r2, r2, #32
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ab      	bne.n	80028a0 <HAL_RCC_OscConfig+0x284>
 8002948:	e003      	b.n	8002952 <HAL_RCC_OscConfig+0x336>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 817d 	beq.w	8002c62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002968:	4ba6      	ldr	r3, [pc, #664]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002974:	4ba3      	ldr	r3, [pc, #652]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d172      	bne.n	8002a66 <HAL_RCC_OscConfig+0x44a>
 8002980:	4ba0      	ldr	r3, [pc, #640]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d16c      	bne.n	8002a66 <HAL_RCC_OscConfig+0x44a>
 800298c:	2302      	movs	r3, #2
 800298e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800299e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d102      	bne.n	80029bc <HAL_RCC_OscConfig+0x3a0>
 80029b6:	4b93      	ldr	r3, [pc, #588]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e013      	b.n	80029e4 <HAL_RCC_OscConfig+0x3c8>
 80029bc:	2302      	movs	r3, #2
 80029be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029ce:	2302      	movs	r3, #2
 80029d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029e0:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	2202      	movs	r2, #2
 80029e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029ee:	fa92 f2a2 	rbit	r2, r2
 80029f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029fa:	fab2 f282 	clz	r2, r2
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	f042 0220 	orr.w	r2, r2, #32
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f002 021f 	and.w	r2, r2, #31
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCC_OscConfig+0x410>
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d002      	beq.n	8002a2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f000 be2e 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	21f8      	movs	r1, #248	; 0xf8
 8002a42:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a4a:	fa91 f1a1 	rbit	r1, r1
 8002a4e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a52:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a56:	fab1 f181 	clz	r1, r1
 8002a5a:	b2c9      	uxtb	r1, r1
 8002a5c:	408b      	lsls	r3, r1
 8002a5e:	4969      	ldr	r1, [pc, #420]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a64:	e0fd      	b.n	8002c62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8088 	beq.w	8002b88 <HAL_RCC_OscConfig+0x56c>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fce0 	bl	8001468 <HAL_GetTick>
 8002aa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aae:	f7fe fcdb 	bl	8001468 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d902      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	f000 bde2 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ad6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4d8>
 8002aee:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	e013      	b.n	8002b1c <HAL_RCC_OscConfig+0x500>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b18:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b26:	fa92 f2a2 	rbit	r2, r2
 8002b2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b32:	fab2 f282 	clz	r2, r2
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f042 0220 	orr.w	r2, r2, #32
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f002 021f 	and.w	r2, r2, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f202 	lsl.w	r2, r1, r2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0af      	beq.n	8002aae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	21f8      	movs	r1, #248	; 0xf8
 8002b64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b6c:	fa91 f1a1 	rbit	r1, r1
 8002b70:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b74:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b78:	fab1 f181 	clz	r1, r1
 8002b7c:	b2c9      	uxtb	r1, r1
 8002b7e:	408b      	lsls	r3, r1
 8002b80:	4920      	ldr	r1, [pc, #128]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
 8002b86:	e06c      	b.n	8002c62 <HAL_RCC_OscConfig+0x646>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fc58 	bl	8001468 <HAL_GetTick>
 8002bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fc53 	bl	8001468 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d902      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f000 bd5a 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d104      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5ec>
 8002bfe:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <HAL_RCC_OscConfig+0x5e8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e015      	b.n	8002c30 <HAL_RCC_OscConfig+0x614>
 8002c04:	40021000 	.word	0x40021000
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c2c:	4bc8      	ldr	r3, [pc, #800]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2202      	movs	r2, #2
 8002c32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c3a:	fa92 f2a2 	rbit	r2, r2
 8002c3e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c46:	fab2 f282 	clz	r2, r2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f002 021f 	and.w	r2, r2, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ad      	bne.n	8002bbe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8110 	beq.w	8002e98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d079      	beq.n	8002d7c <HAL_RCC_OscConfig+0x760>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4bab      	ldr	r3, [pc, #684]	; (8002f54 <HAL_RCC_OscConfig+0x938>)
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	461a      	mov	r2, r3
 8002cae:	2301      	movs	r3, #1
 8002cb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fbd9 	bl	8001468 <HAL_GetTick>
 8002cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fbd4 	bl	8001468 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d902      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	f000 bcdb 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cec:	2202      	movs	r2, #2
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d10:	2202      	movs	r2, #2
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	fa93 f2a3 	rbit	r2, r3
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2c:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d38:	2102      	movs	r1, #2
 8002d3a:	6019      	str	r1, [r3, #0]
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	fa93 f1a3 	rbit	r1, r3
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d52:	6019      	str	r1, [r3, #0]
  return result;
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2101      	movs	r1, #1
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0a0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x6a0>
 8002d7a:	e08d      	b.n	8002e98 <HAL_RCC_OscConfig+0x87c>
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d9e:	601a      	str	r2, [r3, #0]
  return result;
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002da8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b68      	ldr	r3, [pc, #416]	; (8002f54 <HAL_RCC_OscConfig+0x938>)
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	461a      	mov	r2, r3
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fb53 	bl	8001468 <HAL_GetTick>
 8002dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fb4e 	bl	8001468 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d902      	bls.n	8002dde <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	f000 bc55 	b.w	8003688 <HAL_RCC_OscConfig+0x106c>
 8002dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002de6:	2202      	movs	r2, #2
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e2e:	2202      	movs	r2, #2
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	fa93 f2a3 	rbit	r2, r3
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e56:	2102      	movs	r1, #2
 8002e58:	6019      	str	r1, [r3, #0]
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	fa93 f1a3 	rbit	r1, r3
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e70:	6019      	str	r1, [r3, #0]
  return result;
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d197      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 81a1 	beq.w	80031f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d116      	bne.n	8002eee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eca:	61d3      	str	r3, [r2, #28]
 8002ecc:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ee6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_RCC_OscConfig+0x93c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11a      	bne.n	8002f30 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_RCC_OscConfig+0x93c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <HAL_RCC_OscConfig+0x93c>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7fe faaf 	bl	8001468 <HAL_GetTick>
 8002f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	e009      	b.n	8002f24 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fe faaa 	bl	8001468 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e3b1      	b.n	8003688 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_RCC_OscConfig+0x93c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ef      	beq.n	8002f10 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d10d      	bne.n	8002f5c <HAL_RCC_OscConfig+0x940>
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4a02      	ldr	r2, [pc, #8]	; (8002f50 <HAL_RCC_OscConfig+0x934>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6213      	str	r3, [r2, #32]
 8002f4c:	e03c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x9ac>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	10908120 	.word	0x10908120
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10c      	bne.n	8002f86 <HAL_RCC_OscConfig+0x96a>
 8002f6c:	4bc1      	ldr	r3, [pc, #772]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	4ac0      	ldr	r2, [pc, #768]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	6213      	str	r3, [r2, #32]
 8002f78:	4bbe      	ldr	r3, [pc, #760]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4abd      	ldr	r2, [pc, #756]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002f7e:	f023 0304 	bic.w	r3, r3, #4
 8002f82:	6213      	str	r3, [r2, #32]
 8002f84:	e020      	b.n	8002fc8 <HAL_RCC_OscConfig+0x9ac>
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x994>
 8002f96:	4bb7      	ldr	r3, [pc, #732]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4ab6      	ldr	r2, [pc, #728]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	4bb4      	ldr	r3, [pc, #720]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4ab3      	ldr	r2, [pc, #716]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x9ac>
 8002fb0:	4bb0      	ldr	r3, [pc, #704]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4aaf      	ldr	r2, [pc, #700]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6213      	str	r3, [r2, #32]
 8002fbc:	4bad      	ldr	r3, [pc, #692]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4aac      	ldr	r2, [pc, #688]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8081 	beq.w	80030dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fda:	f7fe fa45 	bl	8001468 <HAL_GetTick>
 8002fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fa40 	bl	8001468 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e345      	b.n	8003688 <HAL_RCC_OscConfig+0x106c>
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003004:	2202      	movs	r2, #2
 8003006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	fa93 f2a3 	rbit	r2, r3
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003028:	2202      	movs	r2, #2
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003042:	601a      	str	r2, [r3, #0]
  return result;
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800304c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d102      	bne.n	8003068 <HAL_RCC_OscConfig+0xa4c>
 8003062:	4b84      	ldr	r3, [pc, #528]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	e013      	b.n	8003090 <HAL_RCC_OscConfig+0xa74>
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003070:	2202      	movs	r2, #2
 8003072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4b79      	ldr	r3, [pc, #484]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003094:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003098:	2102      	movs	r1, #2
 800309a:	6011      	str	r1, [r2, #0]
 800309c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	fa92 f1a2 	rbit	r1, r2
 80030aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030b2:	6011      	str	r1, [r2, #0]
  return result;
 80030b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d084      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x9c8>
 80030da:	e07f      	b.n	80031dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fe f9c4 	bl	8001468 <HAL_GetTick>
 80030e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	e00b      	b.n	80030fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe f9bf 	bl	8001468 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e2c4      	b.n	8003688 <HAL_RCC_OscConfig+0x106c>
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003106:	2202      	movs	r2, #2
 8003108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fa93 f2a3 	rbit	r2, r3
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800312a:	2202      	movs	r2, #2
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	fa93 f2a3 	rbit	r2, r3
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003144:	601a      	str	r2, [r3, #0]
  return result;
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800314e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d102      	bne.n	800316a <HAL_RCC_OscConfig+0xb4e>
 8003164:	4b43      	ldr	r3, [pc, #268]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	e013      	b.n	8003192 <HAL_RCC_OscConfig+0xb76>
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003172:	2202      	movs	r2, #2
 8003174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fa93 f2a3 	rbit	r2, r3
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003196:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800319a:	2102      	movs	r1, #2
 800319c:	6011      	str	r1, [r2, #0]
 800319e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	fa92 f1a2 	rbit	r1, r2
 80031ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031b4:	6011      	str	r1, [r2, #0]
  return result;
 80031b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	fab2 f282 	clz	r2, r2
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f002 021f 	and.w	r2, r2, #31
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f202 	lsl.w	r2, r1, r2
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d184      	bne.n	80030e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	4a22      	ldr	r2, [pc, #136]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8242 	beq.w	8003686 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_RCC_OscConfig+0xc58>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b08      	cmp	r3, #8
 800320c:	f000 8213 	beq.w	8003636 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 8162 	bne.w	80034e6 <HAL_RCC_OscConfig+0xeca>
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800322a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800322e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	fa93 f2a3 	rbit	r2, r3
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003246:	601a      	str	r2, [r3, #0]
  return result;
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003250:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800325c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	461a      	mov	r2, r3
 8003264:	2300      	movs	r3, #0
 8003266:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe f8fe 	bl	8001468 <HAL_GetTick>
 800326c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003270:	e00c      	b.n	800328c <HAL_RCC_OscConfig+0xc70>
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe f8f6 	bl	8001468 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1fd      	b.n	8003688 <HAL_RCC_OscConfig+0x106c>
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	fa93 f2a3 	rbit	r2, r3
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032b0:	601a      	str	r2, [r3, #0]
  return result;
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <HAL_RCC_OscConfig+0xcba>
 80032d0:	4bb0      	ldr	r3, [pc, #704]	; (8003594 <HAL_RCC_OscConfig+0xf78>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	e027      	b.n	8003326 <HAL_RCC_OscConfig+0xd0a>
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fa93 f2a3 	rbit	r2, r3
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	4b9c      	ldr	r3, [pc, #624]	; (8003594 <HAL_RCC_OscConfig+0xf78>)
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800332a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800332e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003332:	6011      	str	r1, [r2, #0]
 8003334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003338:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	fa92 f1a2 	rbit	r1, r2
 8003342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003346:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800334a:	6011      	str	r1, [r2, #0]
  return result;
 800334c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003350:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	fab2 f282 	clz	r2, r2
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f002 021f 	and.w	r2, r2, #31
 8003366:	2101      	movs	r1, #1
 8003368:	fa01 f202 	lsl.w	r2, r1, r2
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d182      	bne.n	8003278 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0xf78>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	430b      	orrs	r3, r1
 8003394:	497f      	ldr	r1, [pc, #508]	; (8003594 <HAL_RCC_OscConfig+0xf78>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80033a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033be:	601a      	str	r2, [r3, #0]
  return result;
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	2301      	movs	r3, #1
 80033de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe f842 	bl	8001468 <HAL_GetTick>
 80033e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e8:	e009      	b.n	80033fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe f83d 	bl	8001468 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e144      	b.n	8003688 <HAL_RCC_OscConfig+0x106c>
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800340a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003422:	601a      	str	r2, [r3, #0]
  return result;
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800342c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_RCC_OscConfig+0xe2c>
 8003442:	4b54      	ldr	r3, [pc, #336]	; (8003594 <HAL_RCC_OscConfig+0xf78>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e027      	b.n	8003498 <HAL_RCC_OscConfig+0xe7c>
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003476:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003480:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	fa93 f2a3 	rbit	r2, r3
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <HAL_RCC_OscConfig+0xf78>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800349c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034a4:	6011      	str	r1, [r2, #0]
 80034a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	fa92 f1a2 	rbit	r1, r2
 80034b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034bc:	6011      	str	r1, [r2, #0]
  return result;
 80034be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f002 021f 	and.w	r2, r2, #31
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f202 	lsl.w	r2, r1, r2
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d082      	beq.n	80033ea <HAL_RCC_OscConfig+0xdce>
 80034e4:	e0cf      	b.n	8003686 <HAL_RCC_OscConfig+0x106a>
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800350a:	601a      	str	r2, [r3, #0]
  return result;
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003514:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003520:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	461a      	mov	r2, r3
 8003528:	2300      	movs	r3, #0
 800352a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd ff9c 	bl	8001468 <HAL_GetTick>
 8003530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003534:	e009      	b.n	800354a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd ff97 	bl	8001468 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e09e      	b.n	8003688 <HAL_RCC_OscConfig+0x106c>
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800356e:	601a      	str	r2, [r3, #0]
  return result;
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003578:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d104      	bne.n	8003598 <HAL_RCC_OscConfig+0xf7c>
 800358e:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCC_OscConfig+0xf78>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	e029      	b.n	80035e8 <HAL_RCC_OscConfig+0xfcc>
 8003594:	40021000 	.word	0x40021000
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_OscConfig+0x1078>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035f4:	6011      	str	r1, [r2, #0]
 80035f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	fa92 f1a2 	rbit	r1, r2
 8003604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003608:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800360c:	6011      	str	r1, [r2, #0]
  return result;
 800360e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003612:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	fab2 f282 	clz	r2, r2
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f042 0220 	orr.w	r2, r2, #32
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f002 021f 	and.w	r2, r2, #31
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d180      	bne.n	8003536 <HAL_RCC_OscConfig+0xf1a>
 8003634:	e027      	b.n	8003686 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e01e      	b.n	8003688 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_OscConfig+0x1078>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003652:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003656:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	429a      	cmp	r2, r3
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800366a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800366e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b09e      	sub	sp, #120	; 0x78
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e162      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b90      	ldr	r3, [pc, #576]	; (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b8d      	ldr	r3, [pc, #564]	; (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	498b      	ldr	r1, [pc, #556]	; (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b89      	ldr	r3, [pc, #548]	; (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e14a      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b82      	ldr	r3, [pc, #520]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	497f      	ldr	r1, [pc, #508]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80dc 	beq.w	80038c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d13c      	bne.n	800378e <HAL_RCC_ClockConfig+0xf6>
 8003714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003718:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	b2db      	uxtb	r3, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d102      	bne.n	800373e <HAL_RCC_ClockConfig+0xa6>
 8003738:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	e00f      	b.n	800375e <HAL_RCC_ClockConfig+0xc6>
 800373e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003742:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	667b      	str	r3, [r7, #100]	; 0x64
 800374c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003750:	663b      	str	r3, [r7, #96]	; 0x60
 8003752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003762:	65ba      	str	r2, [r7, #88]	; 0x58
 8003764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003766:	fa92 f2a2 	rbit	r2, r2
 800376a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800376c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800376e:	fab2 f282 	clz	r2, r2
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f042 0220 	orr.w	r2, r2, #32
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f002 021f 	and.w	r2, r2, #31
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d17b      	bne.n	8003882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0f3      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d13c      	bne.n	8003810 <HAL_RCC_ClockConfig+0x178>
 8003796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x128>
 80037ba:	4b4f      	ldr	r3, [pc, #316]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	e00f      	b.n	80037e0 <HAL_RCC_ClockConfig+0x148>
 80037c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44
 80037ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40
 80037d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037dc:	4b46      	ldr	r3, [pc, #280]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80037e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e8:	fa92 f2a2 	rbit	r2, r2
 80037ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f0:	fab2 f282 	clz	r2, r2
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	f042 0220 	orr.w	r2, r2, #32
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f002 021f 	and.w	r2, r2, #31
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f202 	lsl.w	r2, r1, r2
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d13a      	bne.n	8003882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b2      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
 8003810:	2302      	movs	r3, #2
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_RCC_ClockConfig+0x1a0>
 8003832:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e00d      	b.n	8003854 <HAL_RCC_ClockConfig+0x1bc>
 8003838:	2302      	movs	r3, #2
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	2302      	movs	r3, #2
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	2202      	movs	r2, #2
 8003856:	61ba      	str	r2, [r7, #24]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	fa92 f2a2 	rbit	r2, r2
 800385e:	617a      	str	r2, [r7, #20]
  return result;
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	fab2 f282 	clz	r2, r2
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f002 021f 	and.w	r2, r2, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e079      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	491a      	ldr	r1, [pc, #104]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003894:	f7fd fde8 	bl	8001468 <HAL_GetTick>
 8003898:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389c:	f7fd fde4 	bl	8001468 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e061      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 020c 	and.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d1eb      	bne.n	800389c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d214      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 0207 	bic.w	r2, r3, #7
 80038da:	4906      	ldr	r1, [pc, #24]	; (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e040      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	491a      	ldr	r1, [pc, #104]	; (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4912      	ldr	r1, [pc, #72]	; (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800393a:	f000 f829 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800393e:	4601      	mov	r1, r0
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003948:	22f0      	movs	r2, #240	; 0xf0
 800394a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	fa92 f2a2 	rbit	r2, r2
 8003952:	60fa      	str	r2, [r7, #12]
  return result;
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	fab2 f282 	clz	r2, r2
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	40d3      	lsrs	r3, r2
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x2ec>)
 8003960:	5cd3      	ldrb	r3, [r2, r3]
 8003962:	fa21 f303 	lsr.w	r3, r1, r3
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <HAL_RCC_ClockConfig+0x2f0>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_RCC_ClockConfig+0x2f4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fd36 	bl	80013e0 <HAL_InitTick>
  
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3778      	adds	r7, #120	; 0x78
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	08006e18 	.word	0x08006e18
 8003988:	20000004 	.word	0x20000004
 800398c:	20000008 	.word	0x20000008

08003990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b08b      	sub	sp, #44	; 0x2c
 8003994:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039aa:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x36>
 80039be:	e03c      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039c2:	623b      	str	r3, [r7, #32]
      break;
 80039c4:	e03c      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	fa92 f2a2 	rbit	r2, r2
 80039d8:	607a      	str	r2, [r7, #4]
  return result;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	fab2 f282 	clz	r2, r2
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	40d3      	lsrs	r3, r2
 80039e4:	4a1c      	ldr	r2, [pc, #112]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039e6:	5cd3      	ldrb	r3, [r2, r3]
 80039e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039ea:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	220f      	movs	r2, #15
 80039f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	fa92 f2a2 	rbit	r2, r2
 80039fc:	60fa      	str	r2, [r7, #12]
  return result;
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	fab2 f282 	clz	r2, r2
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	40d3      	lsrs	r3, r2
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a18:	4a0e      	ldr	r2, [pc, #56]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	e004      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4a0c      	ldr	r2, [pc, #48]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	623b      	str	r3, [r7, #32]
      break;
 8003a38:	e002      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a3c:	623b      	str	r3, [r7, #32]
      break;
 8003a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a40:	6a3b      	ldr	r3, [r7, #32]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	372c      	adds	r7, #44	; 0x2c
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	08006e30 	.word	0x08006e30
 8003a5c:	08006e40 	.word	0x08006e40
 8003a60:	003d0900 	.word	0x003d0900

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000004 	.word	0x20000004

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a82:	f7ff ffef 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a86:	4601      	mov	r1, r0
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	fa92 f2a2 	rbit	r2, r2
 8003a9c:	603a      	str	r2, [r7, #0]
  return result;
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	fab2 f282 	clz	r2, r2
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	40d3      	lsrs	r3, r2
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x40>)
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08006e28 	.word	0x08006e28

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ac6:	f7ff ffcd 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003aca:	4601      	mov	r1, r0
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ad4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ad8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	fa92 f2a2 	rbit	r2, r2
 8003ae0:	603a      	str	r2, [r7, #0]
  return result;
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	40d3      	lsrs	r3, r2
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08006e28 	.word	0x08006e28

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b092      	sub	sp, #72	; 0x48
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80cd 	beq.w	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b28:	4b86      	ldr	r3, [pc, #536]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10e      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	4b83      	ldr	r3, [pc, #524]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	4a82      	ldr	r2, [pc, #520]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	61d3      	str	r3, [r2, #28]
 8003b40:	4b80      	ldr	r3, [pc, #512]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	4b7d      	ldr	r3, [pc, #500]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d118      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5e:	4b7a      	ldr	r3, [pc, #488]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a79      	ldr	r2, [pc, #484]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6a:	f7fd fc7d 	bl	8001468 <HAL_GetTick>
 8003b6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fd fc79 	bl	8001468 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b64      	cmp	r3, #100	; 0x64
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e0db      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b70      	ldr	r3, [pc, #448]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b90:	4b6c      	ldr	r3, [pc, #432]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d07d      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d076      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bae:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc8:	fab3 f383 	clz	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b5e      	ldr	r3, [pc, #376]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2301      	movs	r3, #1
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b55      	ldr	r3, [pc, #340]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c00:	4a50      	ldr	r2, [pc, #320]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c04:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d045      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fd fc2a 	bl	8001468 <HAL_GetTick>
 8003c14:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fd fc26 	bl	8001468 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e086      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	61fb      	str	r3, [r7, #28]
  return result;
 8003c46:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f043 0302 	orr.w	r3, r3, #2
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c5c:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	e007      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c62:	2302      	movs	r3, #2
 8003c64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2202      	movs	r2, #2
 8003c74:	613a      	str	r2, [r7, #16]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	fa92 f2a2 	rbit	r2, r2
 8003c7c:	60fa      	str	r2, [r7, #12]
  return result;
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	fab2 f282 	clz	r2, r2
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	f002 021f 	and.w	r2, r2, #31
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f202 	lsl.w	r2, r1, r2
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0bd      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c9c:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4926      	ldr	r1, [pc, #152]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d105      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb6:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	491a      	ldr	r1, [pc, #104]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f023 0210 	bic.w	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4912      	ldr	r1, [pc, #72]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	490b      	ldr	r1, [pc, #44]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	4903      	ldr	r1, [pc, #12]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3748      	adds	r7, #72	; 0x48
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	10908100 	.word	0x10908100

08003d50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e040      	b.n	8003de4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd f9ae 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	; 0x24
 8003d7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f82c 	bl	8003dec <UART_SetConfig>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e022      	b.n	8003de4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f956 	bl	8004058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f9dd 	bl	800419c <UART_CheckIdleState>
 8003de2:	4603      	mov	r3, r0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b8a      	ldr	r3, [pc, #552]	; (8004040 <UART_SetConfig+0x254>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	6979      	ldr	r1, [r7, #20]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a78      	ldr	r2, [pc, #480]	; (8004044 <UART_SetConfig+0x258>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d120      	bne.n	8003eaa <UART_SetConfig+0xbe>
 8003e68:	4b77      	ldr	r3, [pc, #476]	; (8004048 <UART_SetConfig+0x25c>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d817      	bhi.n	8003ea4 <UART_SetConfig+0xb8>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <UART_SetConfig+0x90>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e99 	.word	0x08003e99
 8003e84:	08003e9f 	.word	0x08003e9f
 8003e88:	08003e93 	.word	0x08003e93
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e01d      	b.n	8003ece <UART_SetConfig+0xe2>
 8003e92:	2302      	movs	r3, #2
 8003e94:	77fb      	strb	r3, [r7, #31]
 8003e96:	e01a      	b.n	8003ece <UART_SetConfig+0xe2>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e017      	b.n	8003ece <UART_SetConfig+0xe2>
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e014      	b.n	8003ece <UART_SetConfig+0xe2>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e011      	b.n	8003ece <UART_SetConfig+0xe2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a67      	ldr	r2, [pc, #412]	; (800404c <UART_SetConfig+0x260>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d102      	bne.n	8003eba <UART_SetConfig+0xce>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e009      	b.n	8003ece <UART_SetConfig+0xe2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a64      	ldr	r2, [pc, #400]	; (8004050 <UART_SetConfig+0x264>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d102      	bne.n	8003eca <UART_SetConfig+0xde>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e001      	b.n	8003ece <UART_SetConfig+0xe2>
 8003eca:	2310      	movs	r3, #16
 8003ecc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed6:	d15a      	bne.n	8003f8e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d827      	bhi.n	8003f2e <UART_SetConfig+0x142>
 8003ede:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0xf8>)
 8003ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08003f11 	.word	0x08003f11
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f1f 	.word	0x08003f1f
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f2f 	.word	0x08003f2f
 8003f00:	08003f2f 	.word	0x08003f2f
 8003f04:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7ff fdb8 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8003f0c:	61b8      	str	r0, [r7, #24]
        break;
 8003f0e:	e013      	b.n	8003f38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7ff fdd6 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8003f14:	61b8      	str	r0, [r7, #24]
        break;
 8003f16:	e00f      	b.n	8003f38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <UART_SetConfig+0x268>)
 8003f1a:	61bb      	str	r3, [r7, #24]
        break;
 8003f1c:	e00c      	b.n	8003f38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7ff fd37 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003f22:	61b8      	str	r0, [r7, #24]
        break;
 8003f24:	e008      	b.n	8003f38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2a:	61bb      	str	r3, [r7, #24]
        break;
 8003f2c:	e004      	b.n	8003f38 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	77bb      	strb	r3, [r7, #30]
        break;
 8003f36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d074      	beq.n	8004028 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	005a      	lsls	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b0f      	cmp	r3, #15
 8003f58:	d916      	bls.n	8003f88 <UART_SetConfig+0x19c>
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f60:	d212      	bcs.n	8003f88 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	f023 030f 	bic.w	r3, r3, #15
 8003f6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	89fb      	ldrh	r3, [r7, #14]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	89fa      	ldrh	r2, [r7, #14]
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	e04f      	b.n	8004028 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	77bb      	strb	r3, [r7, #30]
 8003f8c:	e04c      	b.n	8004028 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f8e:	7ffb      	ldrb	r3, [r7, #31]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d828      	bhi.n	8003fe6 <UART_SetConfig+0x1fa>
 8003f94:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0x1b0>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003fd1 	.word	0x08003fd1
 8003fa8:	08003fe7 	.word	0x08003fe7
 8003fac:	08003fd7 	.word	0x08003fd7
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fe7 	.word	0x08003fe7
 8003fb8:	08003fe7 	.word	0x08003fe7
 8003fbc:	08003fdf 	.word	0x08003fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7ff fd5c 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8003fc4:	61b8      	str	r0, [r7, #24]
        break;
 8003fc6:	e013      	b.n	8003ff0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc8:	f7ff fd7a 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8003fcc:	61b8      	str	r0, [r7, #24]
        break;
 8003fce:	e00f      	b.n	8003ff0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <UART_SetConfig+0x268>)
 8003fd2:	61bb      	str	r3, [r7, #24]
        break;
 8003fd4:	e00c      	b.n	8003ff0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd6:	f7ff fcdb 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003fda:	61b8      	str	r0, [r7, #24]
        break;
 8003fdc:	e008      	b.n	8003ff0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe2:	61bb      	str	r3, [r7, #24]
        break;
 8003fe4:	e004      	b.n	8003ff0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	77bb      	strb	r3, [r7, #30]
        break;
 8003fee:	bf00      	nop
    }

    if (pclk != 0U)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d018      	beq.n	8004028 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	085a      	lsrs	r2, r3, #1
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	441a      	add	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b0f      	cmp	r3, #15
 800400e:	d909      	bls.n	8004024 <UART_SetConfig+0x238>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d205      	bcs.n	8004024 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	b29a      	uxth	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	e001      	b.n	8004028 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004034:	7fbb      	ldrb	r3, [r7, #30]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	efff69f3 	.word	0xefff69f3
 8004044:	40013800 	.word	0x40013800
 8004048:	40021000 	.word	0x40021000
 800404c:	40004400 	.word	0x40004400
 8004050:	40004800 	.word	0x40004800
 8004054:	007a1200 	.word	0x007a1200

08004058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01a      	beq.n	800416e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004156:	d10a      	bne.n	800416e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b098      	sub	sp, #96	; 0x60
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041ac:	f7fd f95c 	bl	8001468 <HAL_GetTick>
 80041b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d12e      	bne.n	800421e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f88c 	bl	80042ec <UART_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d021      	beq.n	800421e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ee:	653b      	str	r3, [r7, #80]	; 0x50
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f8:	647b      	str	r3, [r7, #68]	; 0x44
 80041fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e6      	bne.n	80041da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e062      	b.n	80042e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d149      	bne.n	80042c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800422c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004234:	2200      	movs	r2, #0
 8004236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f856 	bl	80042ec <UART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d03c      	beq.n	80042c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	623b      	str	r3, [r7, #32]
   return(result);
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
 8004266:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800426a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e6      	bne.n	8004246 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	60fb      	str	r3, [r7, #12]
   return(result);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004298:	61fa      	str	r2, [r7, #28]
 800429a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	617b      	str	r3, [r7, #20]
   return(result);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e011      	b.n	80042e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3758      	adds	r7, #88	; 0x58
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fc:	e049      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d045      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fd f8af 	bl	8001468 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <UART_WaitOnFlagUntilTimeout+0x30>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e048      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d031      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d110      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2208      	movs	r2, #8
 8004342:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f838 	bl	80043ba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2208      	movs	r2, #8
 800434e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e029      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436c:	d111      	bne.n	8004392 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f81e 	bl	80043ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e00f      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d0a6      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b095      	sub	sp, #84	; 0x54
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e0:	643b      	str	r3, [r7, #64]	; 0x40
 80043e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	61fb      	str	r3, [r7, #28]
   return(result);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800441a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442c:	2b01      	cmp	r3, #1
 800442e:	d118      	bne.n	8004462 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	60bb      	str	r3, [r7, #8]
   return(result);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f023 0310 	bic.w	r3, r3, #16
 8004444:	647b      	str	r3, [r7, #68]	; 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	613b      	str	r3, [r7, #16]
   return(result);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e6      	bne.n	8004430 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004476:	bf00      	nop
 8004478:	3754      	adds	r7, #84	; 0x54
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <__cvt>:
 8004482:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004486:	ec55 4b10 	vmov	r4, r5, d0
 800448a:	2d00      	cmp	r5, #0
 800448c:	460e      	mov	r6, r1
 800448e:	4619      	mov	r1, r3
 8004490:	462b      	mov	r3, r5
 8004492:	bfbb      	ittet	lt
 8004494:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004498:	461d      	movlt	r5, r3
 800449a:	2300      	movge	r3, #0
 800449c:	232d      	movlt	r3, #45	; 0x2d
 800449e:	700b      	strb	r3, [r1, #0]
 80044a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044a6:	4691      	mov	r9, r2
 80044a8:	f023 0820 	bic.w	r8, r3, #32
 80044ac:	bfbc      	itt	lt
 80044ae:	4622      	movlt	r2, r4
 80044b0:	4614      	movlt	r4, r2
 80044b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044b6:	d005      	beq.n	80044c4 <__cvt+0x42>
 80044b8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044bc:	d100      	bne.n	80044c0 <__cvt+0x3e>
 80044be:	3601      	adds	r6, #1
 80044c0:	2102      	movs	r1, #2
 80044c2:	e000      	b.n	80044c6 <__cvt+0x44>
 80044c4:	2103      	movs	r1, #3
 80044c6:	ab03      	add	r3, sp, #12
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	ab02      	add	r3, sp, #8
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	ec45 4b10 	vmov	d0, r4, r5
 80044d2:	4653      	mov	r3, sl
 80044d4:	4632      	mov	r2, r6
 80044d6:	f000 fe4b 	bl	8005170 <_dtoa_r>
 80044da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044de:	4607      	mov	r7, r0
 80044e0:	d102      	bne.n	80044e8 <__cvt+0x66>
 80044e2:	f019 0f01 	tst.w	r9, #1
 80044e6:	d022      	beq.n	800452e <__cvt+0xac>
 80044e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044ec:	eb07 0906 	add.w	r9, r7, r6
 80044f0:	d110      	bne.n	8004514 <__cvt+0x92>
 80044f2:	783b      	ldrb	r3, [r7, #0]
 80044f4:	2b30      	cmp	r3, #48	; 0x30
 80044f6:	d10a      	bne.n	800450e <__cvt+0x8c>
 80044f8:	2200      	movs	r2, #0
 80044fa:	2300      	movs	r3, #0
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	f7fc fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004504:	b918      	cbnz	r0, 800450e <__cvt+0x8c>
 8004506:	f1c6 0601 	rsb	r6, r6, #1
 800450a:	f8ca 6000 	str.w	r6, [sl]
 800450e:	f8da 3000 	ldr.w	r3, [sl]
 8004512:	4499      	add	r9, r3
 8004514:	2200      	movs	r2, #0
 8004516:	2300      	movs	r3, #0
 8004518:	4620      	mov	r0, r4
 800451a:	4629      	mov	r1, r5
 800451c:	f7fc fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004520:	b108      	cbz	r0, 8004526 <__cvt+0xa4>
 8004522:	f8cd 900c 	str.w	r9, [sp, #12]
 8004526:	2230      	movs	r2, #48	; 0x30
 8004528:	9b03      	ldr	r3, [sp, #12]
 800452a:	454b      	cmp	r3, r9
 800452c:	d307      	bcc.n	800453e <__cvt+0xbc>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004532:	1bdb      	subs	r3, r3, r7
 8004534:	4638      	mov	r0, r7
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	b004      	add	sp, #16
 800453a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453e:	1c59      	adds	r1, r3, #1
 8004540:	9103      	str	r1, [sp, #12]
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e7f0      	b.n	8004528 <__cvt+0xa6>

08004546 <__exponent>:
 8004546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004548:	4603      	mov	r3, r0
 800454a:	2900      	cmp	r1, #0
 800454c:	bfb8      	it	lt
 800454e:	4249      	neglt	r1, r1
 8004550:	f803 2b02 	strb.w	r2, [r3], #2
 8004554:	bfb4      	ite	lt
 8004556:	222d      	movlt	r2, #45	; 0x2d
 8004558:	222b      	movge	r2, #43	; 0x2b
 800455a:	2909      	cmp	r1, #9
 800455c:	7042      	strb	r2, [r0, #1]
 800455e:	dd2a      	ble.n	80045b6 <__exponent+0x70>
 8004560:	f10d 0207 	add.w	r2, sp, #7
 8004564:	4617      	mov	r7, r2
 8004566:	260a      	movs	r6, #10
 8004568:	4694      	mov	ip, r2
 800456a:	fb91 f5f6 	sdiv	r5, r1, r6
 800456e:	fb06 1415 	mls	r4, r6, r5, r1
 8004572:	3430      	adds	r4, #48	; 0x30
 8004574:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004578:	460c      	mov	r4, r1
 800457a:	2c63      	cmp	r4, #99	; 0x63
 800457c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004580:	4629      	mov	r1, r5
 8004582:	dcf1      	bgt.n	8004568 <__exponent+0x22>
 8004584:	3130      	adds	r1, #48	; 0x30
 8004586:	f1ac 0402 	sub.w	r4, ip, #2
 800458a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800458e:	1c41      	adds	r1, r0, #1
 8004590:	4622      	mov	r2, r4
 8004592:	42ba      	cmp	r2, r7
 8004594:	d30a      	bcc.n	80045ac <__exponent+0x66>
 8004596:	f10d 0209 	add.w	r2, sp, #9
 800459a:	eba2 020c 	sub.w	r2, r2, ip
 800459e:	42bc      	cmp	r4, r7
 80045a0:	bf88      	it	hi
 80045a2:	2200      	movhi	r2, #0
 80045a4:	4413      	add	r3, r2
 80045a6:	1a18      	subs	r0, r3, r0
 80045a8:	b003      	add	sp, #12
 80045aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 80045b0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80045b4:	e7ed      	b.n	8004592 <__exponent+0x4c>
 80045b6:	2330      	movs	r3, #48	; 0x30
 80045b8:	3130      	adds	r1, #48	; 0x30
 80045ba:	7083      	strb	r3, [r0, #2]
 80045bc:	70c1      	strb	r1, [r0, #3]
 80045be:	1d03      	adds	r3, r0, #4
 80045c0:	e7f1      	b.n	80045a6 <__exponent+0x60>
	...

080045c4 <_printf_float>:
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	ed2d 8b02 	vpush	{d8}
 80045cc:	b08d      	sub	sp, #52	; 0x34
 80045ce:	460c      	mov	r4, r1
 80045d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045d4:	4616      	mov	r6, r2
 80045d6:	461f      	mov	r7, r3
 80045d8:	4605      	mov	r5, r0
 80045da:	f000 fcc7 	bl	8004f6c <_localeconv_r>
 80045de:	f8d0 a000 	ldr.w	sl, [r0]
 80045e2:	4650      	mov	r0, sl
 80045e4:	f7fb fe44 	bl	8000270 <strlen>
 80045e8:	2300      	movs	r3, #0
 80045ea:	930a      	str	r3, [sp, #40]	; 0x28
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	9305      	str	r3, [sp, #20]
 80045f0:	f8d8 3000 	ldr.w	r3, [r8]
 80045f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80045f8:	3307      	adds	r3, #7
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	f103 0208 	add.w	r2, r3, #8
 8004602:	f8c8 2000 	str.w	r2, [r8]
 8004606:	e9d3 8900 	ldrd	r8, r9, [r3]
 800460a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800460e:	9307      	str	r3, [sp, #28]
 8004610:	f8cd 8018 	str.w	r8, [sp, #24]
 8004614:	ee08 0a10 	vmov	s16, r0
 8004618:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800461c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004620:	4b9e      	ldr	r3, [pc, #632]	; (800489c <_printf_float+0x2d8>)
 8004622:	f04f 32ff 	mov.w	r2, #4294967295
 8004626:	f7fc fa81 	bl	8000b2c <__aeabi_dcmpun>
 800462a:	bb88      	cbnz	r0, 8004690 <_printf_float+0xcc>
 800462c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004630:	4b9a      	ldr	r3, [pc, #616]	; (800489c <_printf_float+0x2d8>)
 8004632:	f04f 32ff 	mov.w	r2, #4294967295
 8004636:	f7fc fa5b 	bl	8000af0 <__aeabi_dcmple>
 800463a:	bb48      	cbnz	r0, 8004690 <_printf_float+0xcc>
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	4640      	mov	r0, r8
 8004642:	4649      	mov	r1, r9
 8004644:	f7fc fa4a 	bl	8000adc <__aeabi_dcmplt>
 8004648:	b110      	cbz	r0, 8004650 <_printf_float+0x8c>
 800464a:	232d      	movs	r3, #45	; 0x2d
 800464c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004650:	4a93      	ldr	r2, [pc, #588]	; (80048a0 <_printf_float+0x2dc>)
 8004652:	4b94      	ldr	r3, [pc, #592]	; (80048a4 <_printf_float+0x2e0>)
 8004654:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004658:	bf94      	ite	ls
 800465a:	4690      	movls	r8, r2
 800465c:	4698      	movhi	r8, r3
 800465e:	2303      	movs	r3, #3
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	9b05      	ldr	r3, [sp, #20]
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	f04f 0900 	mov.w	r9, #0
 800466e:	9700      	str	r7, [sp, #0]
 8004670:	4633      	mov	r3, r6
 8004672:	aa0b      	add	r2, sp, #44	; 0x2c
 8004674:	4621      	mov	r1, r4
 8004676:	4628      	mov	r0, r5
 8004678:	f000 f9da 	bl	8004a30 <_printf_common>
 800467c:	3001      	adds	r0, #1
 800467e:	f040 8090 	bne.w	80047a2 <_printf_float+0x1de>
 8004682:	f04f 30ff 	mov.w	r0, #4294967295
 8004686:	b00d      	add	sp, #52	; 0x34
 8004688:	ecbd 8b02 	vpop	{d8}
 800468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004690:	4642      	mov	r2, r8
 8004692:	464b      	mov	r3, r9
 8004694:	4640      	mov	r0, r8
 8004696:	4649      	mov	r1, r9
 8004698:	f7fc fa48 	bl	8000b2c <__aeabi_dcmpun>
 800469c:	b140      	cbz	r0, 80046b0 <_printf_float+0xec>
 800469e:	464b      	mov	r3, r9
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bfbc      	itt	lt
 80046a4:	232d      	movlt	r3, #45	; 0x2d
 80046a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046aa:	4a7f      	ldr	r2, [pc, #508]	; (80048a8 <_printf_float+0x2e4>)
 80046ac:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <_printf_float+0x2e8>)
 80046ae:	e7d1      	b.n	8004654 <_printf_float+0x90>
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046b6:	9206      	str	r2, [sp, #24]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	d13f      	bne.n	800473c <_printf_float+0x178>
 80046bc:	2306      	movs	r3, #6
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	9b05      	ldr	r3, [sp, #20]
 80046c2:	6861      	ldr	r1, [r4, #4]
 80046c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046c8:	2300      	movs	r3, #0
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	ab0a      	add	r3, sp, #40	; 0x28
 80046ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046d2:	ab09      	add	r3, sp, #36	; 0x24
 80046d4:	ec49 8b10 	vmov	d0, r8, r9
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046e0:	4628      	mov	r0, r5
 80046e2:	f7ff fece 	bl	8004482 <__cvt>
 80046e6:	9b06      	ldr	r3, [sp, #24]
 80046e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046ea:	2b47      	cmp	r3, #71	; 0x47
 80046ec:	4680      	mov	r8, r0
 80046ee:	d108      	bne.n	8004702 <_printf_float+0x13e>
 80046f0:	1cc8      	adds	r0, r1, #3
 80046f2:	db02      	blt.n	80046fa <_printf_float+0x136>
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	4299      	cmp	r1, r3
 80046f8:	dd41      	ble.n	800477e <_printf_float+0x1ba>
 80046fa:	f1ab 0302 	sub.w	r3, fp, #2
 80046fe:	fa5f fb83 	uxtb.w	fp, r3
 8004702:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004706:	d820      	bhi.n	800474a <_printf_float+0x186>
 8004708:	3901      	subs	r1, #1
 800470a:	465a      	mov	r2, fp
 800470c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004710:	9109      	str	r1, [sp, #36]	; 0x24
 8004712:	f7ff ff18 	bl	8004546 <__exponent>
 8004716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004718:	1813      	adds	r3, r2, r0
 800471a:	2a01      	cmp	r2, #1
 800471c:	4681      	mov	r9, r0
 800471e:	6123      	str	r3, [r4, #16]
 8004720:	dc02      	bgt.n	8004728 <_printf_float+0x164>
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	07d2      	lsls	r2, r2, #31
 8004726:	d501      	bpl.n	800472c <_printf_float+0x168>
 8004728:	3301      	adds	r3, #1
 800472a:	6123      	str	r3, [r4, #16]
 800472c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004730:	2b00      	cmp	r3, #0
 8004732:	d09c      	beq.n	800466e <_printf_float+0xaa>
 8004734:	232d      	movs	r3, #45	; 0x2d
 8004736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473a:	e798      	b.n	800466e <_printf_float+0xaa>
 800473c:	9a06      	ldr	r2, [sp, #24]
 800473e:	2a47      	cmp	r2, #71	; 0x47
 8004740:	d1be      	bne.n	80046c0 <_printf_float+0xfc>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1bc      	bne.n	80046c0 <_printf_float+0xfc>
 8004746:	2301      	movs	r3, #1
 8004748:	e7b9      	b.n	80046be <_printf_float+0xfa>
 800474a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800474e:	d118      	bne.n	8004782 <_printf_float+0x1be>
 8004750:	2900      	cmp	r1, #0
 8004752:	6863      	ldr	r3, [r4, #4]
 8004754:	dd0b      	ble.n	800476e <_printf_float+0x1aa>
 8004756:	6121      	str	r1, [r4, #16]
 8004758:	b913      	cbnz	r3, 8004760 <_printf_float+0x19c>
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	07d0      	lsls	r0, r2, #31
 800475e:	d502      	bpl.n	8004766 <_printf_float+0x1a2>
 8004760:	3301      	adds	r3, #1
 8004762:	440b      	add	r3, r1
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	65a1      	str	r1, [r4, #88]	; 0x58
 8004768:	f04f 0900 	mov.w	r9, #0
 800476c:	e7de      	b.n	800472c <_printf_float+0x168>
 800476e:	b913      	cbnz	r3, 8004776 <_printf_float+0x1b2>
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	07d2      	lsls	r2, r2, #31
 8004774:	d501      	bpl.n	800477a <_printf_float+0x1b6>
 8004776:	3302      	adds	r3, #2
 8004778:	e7f4      	b.n	8004764 <_printf_float+0x1a0>
 800477a:	2301      	movs	r3, #1
 800477c:	e7f2      	b.n	8004764 <_printf_float+0x1a0>
 800477e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004784:	4299      	cmp	r1, r3
 8004786:	db05      	blt.n	8004794 <_printf_float+0x1d0>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	6121      	str	r1, [r4, #16]
 800478c:	07d8      	lsls	r0, r3, #31
 800478e:	d5ea      	bpl.n	8004766 <_printf_float+0x1a2>
 8004790:	1c4b      	adds	r3, r1, #1
 8004792:	e7e7      	b.n	8004764 <_printf_float+0x1a0>
 8004794:	2900      	cmp	r1, #0
 8004796:	bfd4      	ite	le
 8004798:	f1c1 0202 	rsble	r2, r1, #2
 800479c:	2201      	movgt	r2, #1
 800479e:	4413      	add	r3, r2
 80047a0:	e7e0      	b.n	8004764 <_printf_float+0x1a0>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	055a      	lsls	r2, r3, #21
 80047a6:	d407      	bmi.n	80047b8 <_printf_float+0x1f4>
 80047a8:	6923      	ldr	r3, [r4, #16]
 80047aa:	4642      	mov	r2, r8
 80047ac:	4631      	mov	r1, r6
 80047ae:	4628      	mov	r0, r5
 80047b0:	47b8      	blx	r7
 80047b2:	3001      	adds	r0, #1
 80047b4:	d12c      	bne.n	8004810 <_printf_float+0x24c>
 80047b6:	e764      	b.n	8004682 <_printf_float+0xbe>
 80047b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047bc:	f240 80e0 	bls.w	8004980 <_printf_float+0x3bc>
 80047c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047c4:	2200      	movs	r2, #0
 80047c6:	2300      	movs	r3, #0
 80047c8:	f7fc f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d034      	beq.n	800483a <_printf_float+0x276>
 80047d0:	4a37      	ldr	r2, [pc, #220]	; (80048b0 <_printf_float+0x2ec>)
 80047d2:	2301      	movs	r3, #1
 80047d4:	4631      	mov	r1, r6
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	f43f af51 	beq.w	8004682 <_printf_float+0xbe>
 80047e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047e4:	429a      	cmp	r2, r3
 80047e6:	db02      	blt.n	80047ee <_printf_float+0x22a>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	07d8      	lsls	r0, r3, #31
 80047ec:	d510      	bpl.n	8004810 <_printf_float+0x24c>
 80047ee:	ee18 3a10 	vmov	r3, s16
 80047f2:	4652      	mov	r2, sl
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	f43f af41 	beq.w	8004682 <_printf_float+0xbe>
 8004800:	f04f 0800 	mov.w	r8, #0
 8004804:	f104 091a 	add.w	r9, r4, #26
 8004808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	4543      	cmp	r3, r8
 800480e:	dc09      	bgt.n	8004824 <_printf_float+0x260>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	079b      	lsls	r3, r3, #30
 8004814:	f100 8107 	bmi.w	8004a26 <_printf_float+0x462>
 8004818:	68e0      	ldr	r0, [r4, #12]
 800481a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800481c:	4298      	cmp	r0, r3
 800481e:	bfb8      	it	lt
 8004820:	4618      	movlt	r0, r3
 8004822:	e730      	b.n	8004686 <_printf_float+0xc2>
 8004824:	2301      	movs	r3, #1
 8004826:	464a      	mov	r2, r9
 8004828:	4631      	mov	r1, r6
 800482a:	4628      	mov	r0, r5
 800482c:	47b8      	blx	r7
 800482e:	3001      	adds	r0, #1
 8004830:	f43f af27 	beq.w	8004682 <_printf_float+0xbe>
 8004834:	f108 0801 	add.w	r8, r8, #1
 8004838:	e7e6      	b.n	8004808 <_printf_float+0x244>
 800483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	dc39      	bgt.n	80048b4 <_printf_float+0x2f0>
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <_printf_float+0x2ec>)
 8004842:	2301      	movs	r3, #1
 8004844:	4631      	mov	r1, r6
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f af19 	beq.w	8004682 <_printf_float+0xbe>
 8004850:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004854:	4313      	orrs	r3, r2
 8004856:	d102      	bne.n	800485e <_printf_float+0x29a>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	07d9      	lsls	r1, r3, #31
 800485c:	d5d8      	bpl.n	8004810 <_printf_float+0x24c>
 800485e:	ee18 3a10 	vmov	r3, s16
 8004862:	4652      	mov	r2, sl
 8004864:	4631      	mov	r1, r6
 8004866:	4628      	mov	r0, r5
 8004868:	47b8      	blx	r7
 800486a:	3001      	adds	r0, #1
 800486c:	f43f af09 	beq.w	8004682 <_printf_float+0xbe>
 8004870:	f04f 0900 	mov.w	r9, #0
 8004874:	f104 0a1a 	add.w	sl, r4, #26
 8004878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487a:	425b      	negs	r3, r3
 800487c:	454b      	cmp	r3, r9
 800487e:	dc01      	bgt.n	8004884 <_printf_float+0x2c0>
 8004880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004882:	e792      	b.n	80047aa <_printf_float+0x1e6>
 8004884:	2301      	movs	r3, #1
 8004886:	4652      	mov	r2, sl
 8004888:	4631      	mov	r1, r6
 800488a:	4628      	mov	r0, r5
 800488c:	47b8      	blx	r7
 800488e:	3001      	adds	r0, #1
 8004890:	f43f aef7 	beq.w	8004682 <_printf_float+0xbe>
 8004894:	f109 0901 	add.w	r9, r9, #1
 8004898:	e7ee      	b.n	8004878 <_printf_float+0x2b4>
 800489a:	bf00      	nop
 800489c:	7fefffff 	.word	0x7fefffff
 80048a0:	08006e50 	.word	0x08006e50
 80048a4:	08006e54 	.word	0x08006e54
 80048a8:	08006e58 	.word	0x08006e58
 80048ac:	08006e5c 	.word	0x08006e5c
 80048b0:	08006e60 	.word	0x08006e60
 80048b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048b8:	429a      	cmp	r2, r3
 80048ba:	bfa8      	it	ge
 80048bc:	461a      	movge	r2, r3
 80048be:	2a00      	cmp	r2, #0
 80048c0:	4691      	mov	r9, r2
 80048c2:	dc37      	bgt.n	8004934 <_printf_float+0x370>
 80048c4:	f04f 0b00 	mov.w	fp, #0
 80048c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048cc:	f104 021a 	add.w	r2, r4, #26
 80048d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048d2:	9305      	str	r3, [sp, #20]
 80048d4:	eba3 0309 	sub.w	r3, r3, r9
 80048d8:	455b      	cmp	r3, fp
 80048da:	dc33      	bgt.n	8004944 <_printf_float+0x380>
 80048dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e0:	429a      	cmp	r2, r3
 80048e2:	db3b      	blt.n	800495c <_printf_float+0x398>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	07da      	lsls	r2, r3, #31
 80048e8:	d438      	bmi.n	800495c <_printf_float+0x398>
 80048ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80048ee:	eba2 0903 	sub.w	r9, r2, r3
 80048f2:	9b05      	ldr	r3, [sp, #20]
 80048f4:	1ad2      	subs	r2, r2, r3
 80048f6:	4591      	cmp	r9, r2
 80048f8:	bfa8      	it	ge
 80048fa:	4691      	movge	r9, r2
 80048fc:	f1b9 0f00 	cmp.w	r9, #0
 8004900:	dc35      	bgt.n	800496e <_printf_float+0x3aa>
 8004902:	f04f 0800 	mov.w	r8, #0
 8004906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800490a:	f104 0a1a 	add.w	sl, r4, #26
 800490e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	eba3 0309 	sub.w	r3, r3, r9
 8004918:	4543      	cmp	r3, r8
 800491a:	f77f af79 	ble.w	8004810 <_printf_float+0x24c>
 800491e:	2301      	movs	r3, #1
 8004920:	4652      	mov	r2, sl
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	47b8      	blx	r7
 8004928:	3001      	adds	r0, #1
 800492a:	f43f aeaa 	beq.w	8004682 <_printf_float+0xbe>
 800492e:	f108 0801 	add.w	r8, r8, #1
 8004932:	e7ec      	b.n	800490e <_printf_float+0x34a>
 8004934:	4613      	mov	r3, r2
 8004936:	4631      	mov	r1, r6
 8004938:	4642      	mov	r2, r8
 800493a:	4628      	mov	r0, r5
 800493c:	47b8      	blx	r7
 800493e:	3001      	adds	r0, #1
 8004940:	d1c0      	bne.n	80048c4 <_printf_float+0x300>
 8004942:	e69e      	b.n	8004682 <_printf_float+0xbe>
 8004944:	2301      	movs	r3, #1
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	9205      	str	r2, [sp, #20]
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f ae97 	beq.w	8004682 <_printf_float+0xbe>
 8004954:	9a05      	ldr	r2, [sp, #20]
 8004956:	f10b 0b01 	add.w	fp, fp, #1
 800495a:	e7b9      	b.n	80048d0 <_printf_float+0x30c>
 800495c:	ee18 3a10 	vmov	r3, s16
 8004960:	4652      	mov	r2, sl
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	47b8      	blx	r7
 8004968:	3001      	adds	r0, #1
 800496a:	d1be      	bne.n	80048ea <_printf_float+0x326>
 800496c:	e689      	b.n	8004682 <_printf_float+0xbe>
 800496e:	9a05      	ldr	r2, [sp, #20]
 8004970:	464b      	mov	r3, r9
 8004972:	4442      	add	r2, r8
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	d1c1      	bne.n	8004902 <_printf_float+0x33e>
 800497e:	e680      	b.n	8004682 <_printf_float+0xbe>
 8004980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004982:	2a01      	cmp	r2, #1
 8004984:	dc01      	bgt.n	800498a <_printf_float+0x3c6>
 8004986:	07db      	lsls	r3, r3, #31
 8004988:	d53a      	bpl.n	8004a00 <_printf_float+0x43c>
 800498a:	2301      	movs	r3, #1
 800498c:	4642      	mov	r2, r8
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f ae74 	beq.w	8004682 <_printf_float+0xbe>
 800499a:	ee18 3a10 	vmov	r3, s16
 800499e:	4652      	mov	r2, sl
 80049a0:	4631      	mov	r1, r6
 80049a2:	4628      	mov	r0, r5
 80049a4:	47b8      	blx	r7
 80049a6:	3001      	adds	r0, #1
 80049a8:	f43f ae6b 	beq.w	8004682 <_printf_float+0xbe>
 80049ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049b0:	2200      	movs	r2, #0
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80049b8:	f7fc f886 	bl	8000ac8 <__aeabi_dcmpeq>
 80049bc:	b9d8      	cbnz	r0, 80049f6 <_printf_float+0x432>
 80049be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80049c2:	f108 0201 	add.w	r2, r8, #1
 80049c6:	4631      	mov	r1, r6
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b8      	blx	r7
 80049cc:	3001      	adds	r0, #1
 80049ce:	d10e      	bne.n	80049ee <_printf_float+0x42a>
 80049d0:	e657      	b.n	8004682 <_printf_float+0xbe>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4631      	mov	r1, r6
 80049d8:	4628      	mov	r0, r5
 80049da:	47b8      	blx	r7
 80049dc:	3001      	adds	r0, #1
 80049de:	f43f ae50 	beq.w	8004682 <_printf_float+0xbe>
 80049e2:	f108 0801 	add.w	r8, r8, #1
 80049e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e8:	3b01      	subs	r3, #1
 80049ea:	4543      	cmp	r3, r8
 80049ec:	dcf1      	bgt.n	80049d2 <_printf_float+0x40e>
 80049ee:	464b      	mov	r3, r9
 80049f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049f4:	e6da      	b.n	80047ac <_printf_float+0x1e8>
 80049f6:	f04f 0800 	mov.w	r8, #0
 80049fa:	f104 0a1a 	add.w	sl, r4, #26
 80049fe:	e7f2      	b.n	80049e6 <_printf_float+0x422>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4642      	mov	r2, r8
 8004a04:	e7df      	b.n	80049c6 <_printf_float+0x402>
 8004a06:	2301      	movs	r3, #1
 8004a08:	464a      	mov	r2, r9
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	f43f ae36 	beq.w	8004682 <_printf_float+0xbe>
 8004a16:	f108 0801 	add.w	r8, r8, #1
 8004a1a:	68e3      	ldr	r3, [r4, #12]
 8004a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a1e:	1a5b      	subs	r3, r3, r1
 8004a20:	4543      	cmp	r3, r8
 8004a22:	dcf0      	bgt.n	8004a06 <_printf_float+0x442>
 8004a24:	e6f8      	b.n	8004818 <_printf_float+0x254>
 8004a26:	f04f 0800 	mov.w	r8, #0
 8004a2a:	f104 0919 	add.w	r9, r4, #25
 8004a2e:	e7f4      	b.n	8004a1a <_printf_float+0x456>

08004a30 <_printf_common>:
 8004a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	4616      	mov	r6, r2
 8004a36:	4699      	mov	r9, r3
 8004a38:	688a      	ldr	r2, [r1, #8]
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	bfb8      	it	lt
 8004a44:	4613      	movlt	r3, r2
 8004a46:	6033      	str	r3, [r6, #0]
 8004a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a4c:	4607      	mov	r7, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	b10a      	cbz	r2, 8004a56 <_printf_common+0x26>
 8004a52:	3301      	adds	r3, #1
 8004a54:	6033      	str	r3, [r6, #0]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	0699      	lsls	r1, r3, #26
 8004a5a:	bf42      	ittt	mi
 8004a5c:	6833      	ldrmi	r3, [r6, #0]
 8004a5e:	3302      	addmi	r3, #2
 8004a60:	6033      	strmi	r3, [r6, #0]
 8004a62:	6825      	ldr	r5, [r4, #0]
 8004a64:	f015 0506 	ands.w	r5, r5, #6
 8004a68:	d106      	bne.n	8004a78 <_printf_common+0x48>
 8004a6a:	f104 0a19 	add.w	sl, r4, #25
 8004a6e:	68e3      	ldr	r3, [r4, #12]
 8004a70:	6832      	ldr	r2, [r6, #0]
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	42ab      	cmp	r3, r5
 8004a76:	dc26      	bgt.n	8004ac6 <_printf_common+0x96>
 8004a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a7c:	1e13      	subs	r3, r2, #0
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	bf18      	it	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	0692      	lsls	r2, r2, #26
 8004a86:	d42b      	bmi.n	8004ae0 <_printf_common+0xb0>
 8004a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	3001      	adds	r0, #1
 8004a94:	d01e      	beq.n	8004ad4 <_printf_common+0xa4>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	6922      	ldr	r2, [r4, #16]
 8004a9a:	f003 0306 	and.w	r3, r3, #6
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	bf02      	ittt	eq
 8004aa2:	68e5      	ldreq	r5, [r4, #12]
 8004aa4:	6833      	ldreq	r3, [r6, #0]
 8004aa6:	1aed      	subeq	r5, r5, r3
 8004aa8:	68a3      	ldr	r3, [r4, #8]
 8004aaa:	bf0c      	ite	eq
 8004aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab0:	2500      	movne	r5, #0
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	bfc4      	itt	gt
 8004ab6:	1a9b      	subgt	r3, r3, r2
 8004ab8:	18ed      	addgt	r5, r5, r3
 8004aba:	2600      	movs	r6, #0
 8004abc:	341a      	adds	r4, #26
 8004abe:	42b5      	cmp	r5, r6
 8004ac0:	d11a      	bne.n	8004af8 <_printf_common+0xc8>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e008      	b.n	8004ad8 <_printf_common+0xa8>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4652      	mov	r2, sl
 8004aca:	4649      	mov	r1, r9
 8004acc:	4638      	mov	r0, r7
 8004ace:	47c0      	blx	r8
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d103      	bne.n	8004adc <_printf_common+0xac>
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004adc:	3501      	adds	r5, #1
 8004ade:	e7c6      	b.n	8004a6e <_printf_common+0x3e>
 8004ae0:	18e1      	adds	r1, r4, r3
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	2030      	movs	r0, #48	; 0x30
 8004ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aea:	4422      	add	r2, r4
 8004aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af4:	3302      	adds	r3, #2
 8004af6:	e7c7      	b.n	8004a88 <_printf_common+0x58>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4622      	mov	r2, r4
 8004afc:	4649      	mov	r1, r9
 8004afe:	4638      	mov	r0, r7
 8004b00:	47c0      	blx	r8
 8004b02:	3001      	adds	r0, #1
 8004b04:	d0e6      	beq.n	8004ad4 <_printf_common+0xa4>
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7d9      	b.n	8004abe <_printf_common+0x8e>
	...

08004b0c <_printf_i>:
 8004b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	7e0f      	ldrb	r7, [r1, #24]
 8004b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b14:	2f78      	cmp	r7, #120	; 0x78
 8004b16:	4691      	mov	r9, r2
 8004b18:	4680      	mov	r8, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	469a      	mov	sl, r3
 8004b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b22:	d807      	bhi.n	8004b34 <_printf_i+0x28>
 8004b24:	2f62      	cmp	r7, #98	; 0x62
 8004b26:	d80a      	bhi.n	8004b3e <_printf_i+0x32>
 8004b28:	2f00      	cmp	r7, #0
 8004b2a:	f000 80d4 	beq.w	8004cd6 <_printf_i+0x1ca>
 8004b2e:	2f58      	cmp	r7, #88	; 0x58
 8004b30:	f000 80c0 	beq.w	8004cb4 <_printf_i+0x1a8>
 8004b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b3c:	e03a      	b.n	8004bb4 <_printf_i+0xa8>
 8004b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b42:	2b15      	cmp	r3, #21
 8004b44:	d8f6      	bhi.n	8004b34 <_printf_i+0x28>
 8004b46:	a101      	add	r1, pc, #4	; (adr r1, 8004b4c <_printf_i+0x40>)
 8004b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004bb9 	.word	0x08004bb9
 8004b54:	08004b35 	.word	0x08004b35
 8004b58:	08004b35 	.word	0x08004b35
 8004b5c:	08004b35 	.word	0x08004b35
 8004b60:	08004b35 	.word	0x08004b35
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004b35 	.word	0x08004b35
 8004b6c:	08004b35 	.word	0x08004b35
 8004b70:	08004b35 	.word	0x08004b35
 8004b74:	08004b35 	.word	0x08004b35
 8004b78:	08004cbd 	.word	0x08004cbd
 8004b7c:	08004be5 	.word	0x08004be5
 8004b80:	08004c77 	.word	0x08004c77
 8004b84:	08004b35 	.word	0x08004b35
 8004b88:	08004b35 	.word	0x08004b35
 8004b8c:	08004cdf 	.word	0x08004cdf
 8004b90:	08004b35 	.word	0x08004b35
 8004b94:	08004be5 	.word	0x08004be5
 8004b98:	08004b35 	.word	0x08004b35
 8004b9c:	08004b35 	.word	0x08004b35
 8004ba0:	08004c7f 	.word	0x08004c7f
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	602a      	str	r2, [r5, #0]
 8004bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e09f      	b.n	8004cf8 <_printf_i+0x1ec>
 8004bb8:	6820      	ldr	r0, [r4, #0]
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	0607      	lsls	r7, r0, #24
 8004bbe:	f103 0104 	add.w	r1, r3, #4
 8004bc2:	6029      	str	r1, [r5, #0]
 8004bc4:	d501      	bpl.n	8004bca <_printf_i+0xbe>
 8004bc6:	681e      	ldr	r6, [r3, #0]
 8004bc8:	e003      	b.n	8004bd2 <_printf_i+0xc6>
 8004bca:	0646      	lsls	r6, r0, #25
 8004bcc:	d5fb      	bpl.n	8004bc6 <_printf_i+0xba>
 8004bce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bd2:	2e00      	cmp	r6, #0
 8004bd4:	da03      	bge.n	8004bde <_printf_i+0xd2>
 8004bd6:	232d      	movs	r3, #45	; 0x2d
 8004bd8:	4276      	negs	r6, r6
 8004bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bde:	485a      	ldr	r0, [pc, #360]	; (8004d48 <_printf_i+0x23c>)
 8004be0:	230a      	movs	r3, #10
 8004be2:	e012      	b.n	8004c0a <_printf_i+0xfe>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	6820      	ldr	r0, [r4, #0]
 8004be8:	1d19      	adds	r1, r3, #4
 8004bea:	6029      	str	r1, [r5, #0]
 8004bec:	0605      	lsls	r5, r0, #24
 8004bee:	d501      	bpl.n	8004bf4 <_printf_i+0xe8>
 8004bf0:	681e      	ldr	r6, [r3, #0]
 8004bf2:	e002      	b.n	8004bfa <_printf_i+0xee>
 8004bf4:	0641      	lsls	r1, r0, #25
 8004bf6:	d5fb      	bpl.n	8004bf0 <_printf_i+0xe4>
 8004bf8:	881e      	ldrh	r6, [r3, #0]
 8004bfa:	4853      	ldr	r0, [pc, #332]	; (8004d48 <_printf_i+0x23c>)
 8004bfc:	2f6f      	cmp	r7, #111	; 0x6f
 8004bfe:	bf0c      	ite	eq
 8004c00:	2308      	moveq	r3, #8
 8004c02:	230a      	movne	r3, #10
 8004c04:	2100      	movs	r1, #0
 8004c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c0a:	6865      	ldr	r5, [r4, #4]
 8004c0c:	60a5      	str	r5, [r4, #8]
 8004c0e:	2d00      	cmp	r5, #0
 8004c10:	bfa2      	ittt	ge
 8004c12:	6821      	ldrge	r1, [r4, #0]
 8004c14:	f021 0104 	bicge.w	r1, r1, #4
 8004c18:	6021      	strge	r1, [r4, #0]
 8004c1a:	b90e      	cbnz	r6, 8004c20 <_printf_i+0x114>
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	d04b      	beq.n	8004cb8 <_printf_i+0x1ac>
 8004c20:	4615      	mov	r5, r2
 8004c22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c26:	fb03 6711 	mls	r7, r3, r1, r6
 8004c2a:	5dc7      	ldrb	r7, [r0, r7]
 8004c2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c30:	4637      	mov	r7, r6
 8004c32:	42bb      	cmp	r3, r7
 8004c34:	460e      	mov	r6, r1
 8004c36:	d9f4      	bls.n	8004c22 <_printf_i+0x116>
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d10b      	bne.n	8004c54 <_printf_i+0x148>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	07de      	lsls	r6, r3, #31
 8004c40:	d508      	bpl.n	8004c54 <_printf_i+0x148>
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	6861      	ldr	r1, [r4, #4]
 8004c46:	4299      	cmp	r1, r3
 8004c48:	bfde      	ittt	le
 8004c4a:	2330      	movle	r3, #48	; 0x30
 8004c4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c54:	1b52      	subs	r2, r2, r5
 8004c56:	6122      	str	r2, [r4, #16]
 8004c58:	f8cd a000 	str.w	sl, [sp]
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	aa03      	add	r2, sp, #12
 8004c60:	4621      	mov	r1, r4
 8004c62:	4640      	mov	r0, r8
 8004c64:	f7ff fee4 	bl	8004a30 <_printf_common>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d14a      	bne.n	8004d02 <_printf_i+0x1f6>
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	b004      	add	sp, #16
 8004c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	f043 0320 	orr.w	r3, r3, #32
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	4833      	ldr	r0, [pc, #204]	; (8004d4c <_printf_i+0x240>)
 8004c80:	2778      	movs	r7, #120	; 0x78
 8004c82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	6829      	ldr	r1, [r5, #0]
 8004c8a:	061f      	lsls	r7, r3, #24
 8004c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c90:	d402      	bmi.n	8004c98 <_printf_i+0x18c>
 8004c92:	065f      	lsls	r7, r3, #25
 8004c94:	bf48      	it	mi
 8004c96:	b2b6      	uxthmi	r6, r6
 8004c98:	07df      	lsls	r7, r3, #31
 8004c9a:	bf48      	it	mi
 8004c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004ca0:	6029      	str	r1, [r5, #0]
 8004ca2:	bf48      	it	mi
 8004ca4:	6023      	strmi	r3, [r4, #0]
 8004ca6:	b91e      	cbnz	r6, 8004cb0 <_printf_i+0x1a4>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	f023 0320 	bic.w	r3, r3, #32
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	e7a7      	b.n	8004c04 <_printf_i+0xf8>
 8004cb4:	4824      	ldr	r0, [pc, #144]	; (8004d48 <_printf_i+0x23c>)
 8004cb6:	e7e4      	b.n	8004c82 <_printf_i+0x176>
 8004cb8:	4615      	mov	r5, r2
 8004cba:	e7bd      	b.n	8004c38 <_printf_i+0x12c>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	6826      	ldr	r6, [r4, #0]
 8004cc0:	6961      	ldr	r1, [r4, #20]
 8004cc2:	1d18      	adds	r0, r3, #4
 8004cc4:	6028      	str	r0, [r5, #0]
 8004cc6:	0635      	lsls	r5, r6, #24
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	d501      	bpl.n	8004cd0 <_printf_i+0x1c4>
 8004ccc:	6019      	str	r1, [r3, #0]
 8004cce:	e002      	b.n	8004cd6 <_printf_i+0x1ca>
 8004cd0:	0670      	lsls	r0, r6, #25
 8004cd2:	d5fb      	bpl.n	8004ccc <_printf_i+0x1c0>
 8004cd4:	8019      	strh	r1, [r3, #0]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	4615      	mov	r5, r2
 8004cdc:	e7bc      	b.n	8004c58 <_printf_i+0x14c>
 8004cde:	682b      	ldr	r3, [r5, #0]
 8004ce0:	1d1a      	adds	r2, r3, #4
 8004ce2:	602a      	str	r2, [r5, #0]
 8004ce4:	681d      	ldr	r5, [r3, #0]
 8004ce6:	6862      	ldr	r2, [r4, #4]
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4628      	mov	r0, r5
 8004cec:	f7fb fa70 	bl	80001d0 <memchr>
 8004cf0:	b108      	cbz	r0, 8004cf6 <_printf_i+0x1ea>
 8004cf2:	1b40      	subs	r0, r0, r5
 8004cf4:	6060      	str	r0, [r4, #4]
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	6123      	str	r3, [r4, #16]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d00:	e7aa      	b.n	8004c58 <_printf_i+0x14c>
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	462a      	mov	r2, r5
 8004d06:	4649      	mov	r1, r9
 8004d08:	4640      	mov	r0, r8
 8004d0a:	47d0      	blx	sl
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d0ad      	beq.n	8004c6c <_printf_i+0x160>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	079b      	lsls	r3, r3, #30
 8004d14:	d413      	bmi.n	8004d3e <_printf_i+0x232>
 8004d16:	68e0      	ldr	r0, [r4, #12]
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	4298      	cmp	r0, r3
 8004d1c:	bfb8      	it	lt
 8004d1e:	4618      	movlt	r0, r3
 8004d20:	e7a6      	b.n	8004c70 <_printf_i+0x164>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4632      	mov	r2, r6
 8004d26:	4649      	mov	r1, r9
 8004d28:	4640      	mov	r0, r8
 8004d2a:	47d0      	blx	sl
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d09d      	beq.n	8004c6c <_printf_i+0x160>
 8004d30:	3501      	adds	r5, #1
 8004d32:	68e3      	ldr	r3, [r4, #12]
 8004d34:	9903      	ldr	r1, [sp, #12]
 8004d36:	1a5b      	subs	r3, r3, r1
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	dcf2      	bgt.n	8004d22 <_printf_i+0x216>
 8004d3c:	e7eb      	b.n	8004d16 <_printf_i+0x20a>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	f104 0619 	add.w	r6, r4, #25
 8004d44:	e7f5      	b.n	8004d32 <_printf_i+0x226>
 8004d46:	bf00      	nop
 8004d48:	08006e62 	.word	0x08006e62
 8004d4c:	08006e73 	.word	0x08006e73

08004d50 <std>:
 8004d50:	2300      	movs	r3, #0
 8004d52:	b510      	push	{r4, lr}
 8004d54:	4604      	mov	r4, r0
 8004d56:	e9c0 3300 	strd	r3, r3, [r0]
 8004d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d5e:	6083      	str	r3, [r0, #8]
 8004d60:	8181      	strh	r1, [r0, #12]
 8004d62:	6643      	str	r3, [r0, #100]	; 0x64
 8004d64:	81c2      	strh	r2, [r0, #14]
 8004d66:	6183      	str	r3, [r0, #24]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	305c      	adds	r0, #92	; 0x5c
 8004d6e:	f000 f8f4 	bl	8004f5a <memset>
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <std+0x58>)
 8004d74:	6263      	str	r3, [r4, #36]	; 0x24
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <std+0x5c>)
 8004d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <std+0x60>)
 8004d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <std+0x64>)
 8004d80:	6323      	str	r3, [r4, #48]	; 0x30
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <std+0x68>)
 8004d84:	6224      	str	r4, [r4, #32]
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d006      	beq.n	8004d98 <std+0x48>
 8004d8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004d8e:	4294      	cmp	r4, r2
 8004d90:	d002      	beq.n	8004d98 <std+0x48>
 8004d92:	33d0      	adds	r3, #208	; 0xd0
 8004d94:	429c      	cmp	r4, r3
 8004d96:	d105      	bne.n	8004da4 <std+0x54>
 8004d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da0:	f000 b958 	b.w	8005054 <__retarget_lock_init_recursive>
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	bf00      	nop
 8004da8:	08004ed5 	.word	0x08004ed5
 8004dac:	08004ef7 	.word	0x08004ef7
 8004db0:	08004f2f 	.word	0x08004f2f
 8004db4:	08004f53 	.word	0x08004f53
 8004db8:	200002ec 	.word	0x200002ec

08004dbc <stdio_exit_handler>:
 8004dbc:	4a02      	ldr	r2, [pc, #8]	; (8004dc8 <stdio_exit_handler+0xc>)
 8004dbe:	4903      	ldr	r1, [pc, #12]	; (8004dcc <stdio_exit_handler+0x10>)
 8004dc0:	4803      	ldr	r0, [pc, #12]	; (8004dd0 <stdio_exit_handler+0x14>)
 8004dc2:	f000 b869 	b.w	8004e98 <_fwalk_sglue>
 8004dc6:	bf00      	nop
 8004dc8:	20000010 	.word	0x20000010
 8004dcc:	08006759 	.word	0x08006759
 8004dd0:	2000001c 	.word	0x2000001c

08004dd4 <cleanup_stdio>:
 8004dd4:	6841      	ldr	r1, [r0, #4]
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <cleanup_stdio+0x34>)
 8004dd8:	4299      	cmp	r1, r3
 8004dda:	b510      	push	{r4, lr}
 8004ddc:	4604      	mov	r4, r0
 8004dde:	d001      	beq.n	8004de4 <cleanup_stdio+0x10>
 8004de0:	f001 fcba 	bl	8006758 <_fflush_r>
 8004de4:	68a1      	ldr	r1, [r4, #8]
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <cleanup_stdio+0x38>)
 8004de8:	4299      	cmp	r1, r3
 8004dea:	d002      	beq.n	8004df2 <cleanup_stdio+0x1e>
 8004dec:	4620      	mov	r0, r4
 8004dee:	f001 fcb3 	bl	8006758 <_fflush_r>
 8004df2:	68e1      	ldr	r1, [r4, #12]
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <cleanup_stdio+0x3c>)
 8004df6:	4299      	cmp	r1, r3
 8004df8:	d004      	beq.n	8004e04 <cleanup_stdio+0x30>
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e00:	f001 bcaa 	b.w	8006758 <_fflush_r>
 8004e04:	bd10      	pop	{r4, pc}
 8004e06:	bf00      	nop
 8004e08:	200002ec 	.word	0x200002ec
 8004e0c:	20000354 	.word	0x20000354
 8004e10:	200003bc 	.word	0x200003bc

08004e14 <global_stdio_init.part.0>:
 8004e14:	b510      	push	{r4, lr}
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <global_stdio_init.part.0+0x30>)
 8004e18:	4c0b      	ldr	r4, [pc, #44]	; (8004e48 <global_stdio_init.part.0+0x34>)
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <global_stdio_init.part.0+0x38>)
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	4620      	mov	r0, r4
 8004e20:	2200      	movs	r2, #0
 8004e22:	2104      	movs	r1, #4
 8004e24:	f7ff ff94 	bl	8004d50 <std>
 8004e28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2109      	movs	r1, #9
 8004e30:	f7ff ff8e 	bl	8004d50 <std>
 8004e34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e38:	2202      	movs	r2, #2
 8004e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3e:	2112      	movs	r1, #18
 8004e40:	f7ff bf86 	b.w	8004d50 <std>
 8004e44:	20000424 	.word	0x20000424
 8004e48:	200002ec 	.word	0x200002ec
 8004e4c:	08004dbd 	.word	0x08004dbd

08004e50 <__sfp_lock_acquire>:
 8004e50:	4801      	ldr	r0, [pc, #4]	; (8004e58 <__sfp_lock_acquire+0x8>)
 8004e52:	f000 b900 	b.w	8005056 <__retarget_lock_acquire_recursive>
 8004e56:	bf00      	nop
 8004e58:	2000042d 	.word	0x2000042d

08004e5c <__sfp_lock_release>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__sfp_lock_release+0x8>)
 8004e5e:	f000 b8fb 	b.w	8005058 <__retarget_lock_release_recursive>
 8004e62:	bf00      	nop
 8004e64:	2000042d 	.word	0x2000042d

08004e68 <__sinit>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	f7ff fff0 	bl	8004e50 <__sfp_lock_acquire>
 8004e70:	6a23      	ldr	r3, [r4, #32]
 8004e72:	b11b      	cbz	r3, 8004e7c <__sinit+0x14>
 8004e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e78:	f7ff bff0 	b.w	8004e5c <__sfp_lock_release>
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <__sinit+0x28>)
 8004e7e:	6223      	str	r3, [r4, #32]
 8004e80:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <__sinit+0x2c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f5      	bne.n	8004e74 <__sinit+0xc>
 8004e88:	f7ff ffc4 	bl	8004e14 <global_stdio_init.part.0>
 8004e8c:	e7f2      	b.n	8004e74 <__sinit+0xc>
 8004e8e:	bf00      	nop
 8004e90:	08004dd5 	.word	0x08004dd5
 8004e94:	20000424 	.word	0x20000424

08004e98 <_fwalk_sglue>:
 8004e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	4688      	mov	r8, r1
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ea8:	f1b9 0901 	subs.w	r9, r9, #1
 8004eac:	d505      	bpl.n	8004eba <_fwalk_sglue+0x22>
 8004eae:	6824      	ldr	r4, [r4, #0]
 8004eb0:	2c00      	cmp	r4, #0
 8004eb2:	d1f7      	bne.n	8004ea4 <_fwalk_sglue+0xc>
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eba:	89ab      	ldrh	r3, [r5, #12]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d907      	bls.n	8004ed0 <_fwalk_sglue+0x38>
 8004ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	d003      	beq.n	8004ed0 <_fwalk_sglue+0x38>
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4638      	mov	r0, r7
 8004ecc:	47c0      	blx	r8
 8004ece:	4306      	orrs	r6, r0
 8004ed0:	3568      	adds	r5, #104	; 0x68
 8004ed2:	e7e9      	b.n	8004ea8 <_fwalk_sglue+0x10>

08004ed4 <__sread>:
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004edc:	f000 f86c 	bl	8004fb8 <_read_r>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	bfab      	itete	ge
 8004ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ee8:	181b      	addge	r3, r3, r0
 8004eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004eee:	bfac      	ite	ge
 8004ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ef2:	81a3      	strhlt	r3, [r4, #12]
 8004ef4:	bd10      	pop	{r4, pc}

08004ef6 <__swrite>:
 8004ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efa:	461f      	mov	r7, r3
 8004efc:	898b      	ldrh	r3, [r1, #12]
 8004efe:	05db      	lsls	r3, r3, #23
 8004f00:	4605      	mov	r5, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	4616      	mov	r6, r2
 8004f06:	d505      	bpl.n	8004f14 <__swrite+0x1e>
 8004f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f000 f840 	bl	8004f94 <_lseek_r>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f1e:	81a3      	strh	r3, [r4, #12]
 8004f20:	4632      	mov	r2, r6
 8004f22:	463b      	mov	r3, r7
 8004f24:	4628      	mov	r0, r5
 8004f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2a:	f000 b857 	b.w	8004fdc <_write_r>

08004f2e <__sseek>:
 8004f2e:	b510      	push	{r4, lr}
 8004f30:	460c      	mov	r4, r1
 8004f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f36:	f000 f82d 	bl	8004f94 <_lseek_r>
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	bf15      	itete	ne
 8004f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f4a:	81a3      	strheq	r3, [r4, #12]
 8004f4c:	bf18      	it	ne
 8004f4e:	81a3      	strhne	r3, [r4, #12]
 8004f50:	bd10      	pop	{r4, pc}

08004f52 <__sclose>:
 8004f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f56:	f000 b80d 	b.w	8004f74 <_close_r>

08004f5a <memset>:
 8004f5a:	4402      	add	r2, r0
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d100      	bne.n	8004f64 <memset+0xa>
 8004f62:	4770      	bx	lr
 8004f64:	f803 1b01 	strb.w	r1, [r3], #1
 8004f68:	e7f9      	b.n	8004f5e <memset+0x4>
	...

08004f6c <_localeconv_r>:
 8004f6c:	4800      	ldr	r0, [pc, #0]	; (8004f70 <_localeconv_r+0x4>)
 8004f6e:	4770      	bx	lr
 8004f70:	2000015c 	.word	0x2000015c

08004f74 <_close_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d06      	ldr	r5, [pc, #24]	; (8004f90 <_close_r+0x1c>)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	602b      	str	r3, [r5, #0]
 8004f80:	f7fc f971 	bl	8001266 <_close>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_close_r+0x1a>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_close_r+0x1a>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	20000428 	.word	0x20000428

08004f94 <_lseek_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d07      	ldr	r5, [pc, #28]	; (8004fb4 <_lseek_r+0x20>)
 8004f98:	4604      	mov	r4, r0
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	602a      	str	r2, [r5, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f7fc f986 	bl	80012b4 <_lseek>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_lseek_r+0x1e>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_lseek_r+0x1e>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20000428 	.word	0x20000428

08004fb8 <_read_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d07      	ldr	r5, [pc, #28]	; (8004fd8 <_read_r+0x20>)
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	4608      	mov	r0, r1
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f7fc f914 	bl	80011f4 <_read>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_read_r+0x1e>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_read_r+0x1e>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20000428 	.word	0x20000428

08004fdc <_write_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d07      	ldr	r5, [pc, #28]	; (8004ffc <_write_r+0x20>)
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	602a      	str	r2, [r5, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f7fc f91f 	bl	800122e <_write>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_write_r+0x1e>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_write_r+0x1e>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000428 	.word	0x20000428

08005000 <__errno>:
 8005000:	4b01      	ldr	r3, [pc, #4]	; (8005008 <__errno+0x8>)
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000068 	.word	0x20000068

0800500c <__libc_init_array>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4d0d      	ldr	r5, [pc, #52]	; (8005044 <__libc_init_array+0x38>)
 8005010:	4c0d      	ldr	r4, [pc, #52]	; (8005048 <__libc_init_array+0x3c>)
 8005012:	1b64      	subs	r4, r4, r5
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	2600      	movs	r6, #0
 8005018:	42a6      	cmp	r6, r4
 800501a:	d109      	bne.n	8005030 <__libc_init_array+0x24>
 800501c:	4d0b      	ldr	r5, [pc, #44]	; (800504c <__libc_init_array+0x40>)
 800501e:	4c0c      	ldr	r4, [pc, #48]	; (8005050 <__libc_init_array+0x44>)
 8005020:	f001 feee 	bl	8006e00 <_init>
 8005024:	1b64      	subs	r4, r4, r5
 8005026:	10a4      	asrs	r4, r4, #2
 8005028:	2600      	movs	r6, #0
 800502a:	42a6      	cmp	r6, r4
 800502c:	d105      	bne.n	800503a <__libc_init_array+0x2e>
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	f855 3b04 	ldr.w	r3, [r5], #4
 8005034:	4798      	blx	r3
 8005036:	3601      	adds	r6, #1
 8005038:	e7ee      	b.n	8005018 <__libc_init_array+0xc>
 800503a:	f855 3b04 	ldr.w	r3, [r5], #4
 800503e:	4798      	blx	r3
 8005040:	3601      	adds	r6, #1
 8005042:	e7f2      	b.n	800502a <__libc_init_array+0x1e>
 8005044:	080071c4 	.word	0x080071c4
 8005048:	080071c4 	.word	0x080071c4
 800504c:	080071c4 	.word	0x080071c4
 8005050:	080071c8 	.word	0x080071c8

08005054 <__retarget_lock_init_recursive>:
 8005054:	4770      	bx	lr

08005056 <__retarget_lock_acquire_recursive>:
 8005056:	4770      	bx	lr

08005058 <__retarget_lock_release_recursive>:
 8005058:	4770      	bx	lr

0800505a <quorem>:
 800505a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505e:	6903      	ldr	r3, [r0, #16]
 8005060:	690c      	ldr	r4, [r1, #16]
 8005062:	42a3      	cmp	r3, r4
 8005064:	4607      	mov	r7, r0
 8005066:	db7e      	blt.n	8005166 <quorem+0x10c>
 8005068:	3c01      	subs	r4, #1
 800506a:	f101 0814 	add.w	r8, r1, #20
 800506e:	f100 0514 	add.w	r5, r0, #20
 8005072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800507c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005080:	3301      	adds	r3, #1
 8005082:	429a      	cmp	r2, r3
 8005084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800508c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005090:	d331      	bcc.n	80050f6 <quorem+0x9c>
 8005092:	f04f 0e00 	mov.w	lr, #0
 8005096:	4640      	mov	r0, r8
 8005098:	46ac      	mov	ip, r5
 800509a:	46f2      	mov	sl, lr
 800509c:	f850 2b04 	ldr.w	r2, [r0], #4
 80050a0:	b293      	uxth	r3, r2
 80050a2:	fb06 e303 	mla	r3, r6, r3, lr
 80050a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050aa:	0c1a      	lsrs	r2, r3, #16
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ebaa 0303 	sub.w	r3, sl, r3
 80050b2:	f8dc a000 	ldr.w	sl, [ip]
 80050b6:	fa13 f38a 	uxtah	r3, r3, sl
 80050ba:	fb06 220e 	mla	r2, r6, lr, r2
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	9b00      	ldr	r3, [sp, #0]
 80050c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050c6:	b292      	uxth	r2, r2
 80050c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80050d4:	4581      	cmp	r9, r0
 80050d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050da:	f84c 3b04 	str.w	r3, [ip], #4
 80050de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050e2:	d2db      	bcs.n	800509c <quorem+0x42>
 80050e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80050e8:	b92b      	cbnz	r3, 80050f6 <quorem+0x9c>
 80050ea:	9b01      	ldr	r3, [sp, #4]
 80050ec:	3b04      	subs	r3, #4
 80050ee:	429d      	cmp	r5, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	d32c      	bcc.n	800514e <quorem+0xf4>
 80050f4:	613c      	str	r4, [r7, #16]
 80050f6:	4638      	mov	r0, r7
 80050f8:	f001 f9a8 	bl	800644c <__mcmp>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	db22      	blt.n	8005146 <quorem+0xec>
 8005100:	3601      	adds	r6, #1
 8005102:	4629      	mov	r1, r5
 8005104:	2000      	movs	r0, #0
 8005106:	f858 2b04 	ldr.w	r2, [r8], #4
 800510a:	f8d1 c000 	ldr.w	ip, [r1]
 800510e:	b293      	uxth	r3, r2
 8005110:	1ac3      	subs	r3, r0, r3
 8005112:	0c12      	lsrs	r2, r2, #16
 8005114:	fa13 f38c 	uxtah	r3, r3, ip
 8005118:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800511c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005120:	b29b      	uxth	r3, r3
 8005122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005126:	45c1      	cmp	r9, r8
 8005128:	f841 3b04 	str.w	r3, [r1], #4
 800512c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005130:	d2e9      	bcs.n	8005106 <quorem+0xac>
 8005132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800513a:	b922      	cbnz	r2, 8005146 <quorem+0xec>
 800513c:	3b04      	subs	r3, #4
 800513e:	429d      	cmp	r5, r3
 8005140:	461a      	mov	r2, r3
 8005142:	d30a      	bcc.n	800515a <quorem+0x100>
 8005144:	613c      	str	r4, [r7, #16]
 8005146:	4630      	mov	r0, r6
 8005148:	b003      	add	sp, #12
 800514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	3b04      	subs	r3, #4
 8005152:	2a00      	cmp	r2, #0
 8005154:	d1ce      	bne.n	80050f4 <quorem+0x9a>
 8005156:	3c01      	subs	r4, #1
 8005158:	e7c9      	b.n	80050ee <quorem+0x94>
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	3b04      	subs	r3, #4
 800515e:	2a00      	cmp	r2, #0
 8005160:	d1f0      	bne.n	8005144 <quorem+0xea>
 8005162:	3c01      	subs	r4, #1
 8005164:	e7eb      	b.n	800513e <quorem+0xe4>
 8005166:	2000      	movs	r0, #0
 8005168:	e7ee      	b.n	8005148 <quorem+0xee>
 800516a:	0000      	movs	r0, r0
 800516c:	0000      	movs	r0, r0
	...

08005170 <_dtoa_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	ed2d 8b04 	vpush	{d8-d9}
 8005178:	69c5      	ldr	r5, [r0, #28]
 800517a:	b093      	sub	sp, #76	; 0x4c
 800517c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005180:	ec57 6b10 	vmov	r6, r7, d0
 8005184:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005188:	9107      	str	r1, [sp, #28]
 800518a:	4604      	mov	r4, r0
 800518c:	920a      	str	r2, [sp, #40]	; 0x28
 800518e:	930d      	str	r3, [sp, #52]	; 0x34
 8005190:	b975      	cbnz	r5, 80051b0 <_dtoa_r+0x40>
 8005192:	2010      	movs	r0, #16
 8005194:	f000 fe2a 	bl	8005dec <malloc>
 8005198:	4602      	mov	r2, r0
 800519a:	61e0      	str	r0, [r4, #28]
 800519c:	b920      	cbnz	r0, 80051a8 <_dtoa_r+0x38>
 800519e:	4bae      	ldr	r3, [pc, #696]	; (8005458 <_dtoa_r+0x2e8>)
 80051a0:	21ef      	movs	r1, #239	; 0xef
 80051a2:	48ae      	ldr	r0, [pc, #696]	; (800545c <_dtoa_r+0x2ec>)
 80051a4:	f001 fb1e 	bl	80067e4 <__assert_func>
 80051a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051ac:	6005      	str	r5, [r0, #0]
 80051ae:	60c5      	str	r5, [r0, #12]
 80051b0:	69e3      	ldr	r3, [r4, #28]
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	b151      	cbz	r1, 80051cc <_dtoa_r+0x5c>
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	604a      	str	r2, [r1, #4]
 80051ba:	2301      	movs	r3, #1
 80051bc:	4093      	lsls	r3, r2
 80051be:	608b      	str	r3, [r1, #8]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 ff07 	bl	8005fd4 <_Bfree>
 80051c6:	69e3      	ldr	r3, [r4, #28]
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	1e3b      	subs	r3, r7, #0
 80051ce:	bfbb      	ittet	lt
 80051d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	9303      	strlt	r3, [sp, #12]
 80051d6:	2300      	movge	r3, #0
 80051d8:	2201      	movlt	r2, #1
 80051da:	bfac      	ite	ge
 80051dc:	f8c8 3000 	strge.w	r3, [r8]
 80051e0:	f8c8 2000 	strlt.w	r2, [r8]
 80051e4:	4b9e      	ldr	r3, [pc, #632]	; (8005460 <_dtoa_r+0x2f0>)
 80051e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80051ea:	ea33 0308 	bics.w	r3, r3, r8
 80051ee:	d11b      	bne.n	8005228 <_dtoa_r+0xb8>
 80051f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80051fc:	4333      	orrs	r3, r6
 80051fe:	f000 8593 	beq.w	8005d28 <_dtoa_r+0xbb8>
 8005202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005204:	b963      	cbnz	r3, 8005220 <_dtoa_r+0xb0>
 8005206:	4b97      	ldr	r3, [pc, #604]	; (8005464 <_dtoa_r+0x2f4>)
 8005208:	e027      	b.n	800525a <_dtoa_r+0xea>
 800520a:	4b97      	ldr	r3, [pc, #604]	; (8005468 <_dtoa_r+0x2f8>)
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	9800      	ldr	r0, [sp, #0]
 8005216:	b013      	add	sp, #76	; 0x4c
 8005218:	ecbd 8b04 	vpop	{d8-d9}
 800521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005220:	4b90      	ldr	r3, [pc, #576]	; (8005464 <_dtoa_r+0x2f4>)
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	3303      	adds	r3, #3
 8005226:	e7f3      	b.n	8005210 <_dtoa_r+0xa0>
 8005228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	ec51 0b17 	vmov	r0, r1, d7
 8005232:	eeb0 8a47 	vmov.f32	s16, s14
 8005236:	eef0 8a67 	vmov.f32	s17, s15
 800523a:	2300      	movs	r3, #0
 800523c:	f7fb fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8005240:	4681      	mov	r9, r0
 8005242:	b160      	cbz	r0, 800525e <_dtoa_r+0xee>
 8005244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005246:	2301      	movs	r3, #1
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8568 	beq.w	8005d22 <_dtoa_r+0xbb2>
 8005252:	4b86      	ldr	r3, [pc, #536]	; (800546c <_dtoa_r+0x2fc>)
 8005254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	3b01      	subs	r3, #1
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	e7da      	b.n	8005214 <_dtoa_r+0xa4>
 800525e:	aa10      	add	r2, sp, #64	; 0x40
 8005260:	a911      	add	r1, sp, #68	; 0x44
 8005262:	4620      	mov	r0, r4
 8005264:	eeb0 0a48 	vmov.f32	s0, s16
 8005268:	eef0 0a68 	vmov.f32	s1, s17
 800526c:	f001 f994 	bl	8006598 <__d2b>
 8005270:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005274:	4682      	mov	sl, r0
 8005276:	2d00      	cmp	r5, #0
 8005278:	d07f      	beq.n	800537a <_dtoa_r+0x20a>
 800527a:	ee18 3a90 	vmov	r3, s17
 800527e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005282:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005286:	ec51 0b18 	vmov	r0, r1, d8
 800528a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800528e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005292:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005296:	4619      	mov	r1, r3
 8005298:	2200      	movs	r2, #0
 800529a:	4b75      	ldr	r3, [pc, #468]	; (8005470 <_dtoa_r+0x300>)
 800529c:	f7fa fff4 	bl	8000288 <__aeabi_dsub>
 80052a0:	a367      	add	r3, pc, #412	; (adr r3, 8005440 <_dtoa_r+0x2d0>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f7fb f9a7 	bl	80005f8 <__aeabi_dmul>
 80052aa:	a367      	add	r3, pc, #412	; (adr r3, 8005448 <_dtoa_r+0x2d8>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fa ffec 	bl	800028c <__adddf3>
 80052b4:	4606      	mov	r6, r0
 80052b6:	4628      	mov	r0, r5
 80052b8:	460f      	mov	r7, r1
 80052ba:	f7fb f933 	bl	8000524 <__aeabi_i2d>
 80052be:	a364      	add	r3, pc, #400	; (adr r3, 8005450 <_dtoa_r+0x2e0>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f7fb f998 	bl	80005f8 <__aeabi_dmul>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4630      	mov	r0, r6
 80052ce:	4639      	mov	r1, r7
 80052d0:	f7fa ffdc 	bl	800028c <__adddf3>
 80052d4:	4606      	mov	r6, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	f7fb fc3e 	bl	8000b58 <__aeabi_d2iz>
 80052dc:	2200      	movs	r2, #0
 80052de:	4683      	mov	fp, r0
 80052e0:	2300      	movs	r3, #0
 80052e2:	4630      	mov	r0, r6
 80052e4:	4639      	mov	r1, r7
 80052e6:	f7fb fbf9 	bl	8000adc <__aeabi_dcmplt>
 80052ea:	b148      	cbz	r0, 8005300 <_dtoa_r+0x190>
 80052ec:	4658      	mov	r0, fp
 80052ee:	f7fb f919 	bl	8000524 <__aeabi_i2d>
 80052f2:	4632      	mov	r2, r6
 80052f4:	463b      	mov	r3, r7
 80052f6:	f7fb fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80052fa:	b908      	cbnz	r0, 8005300 <_dtoa_r+0x190>
 80052fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005300:	f1bb 0f16 	cmp.w	fp, #22
 8005304:	d857      	bhi.n	80053b6 <_dtoa_r+0x246>
 8005306:	4b5b      	ldr	r3, [pc, #364]	; (8005474 <_dtoa_r+0x304>)
 8005308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	ec51 0b18 	vmov	r0, r1, d8
 8005314:	f7fb fbe2 	bl	8000adc <__aeabi_dcmplt>
 8005318:	2800      	cmp	r0, #0
 800531a:	d04e      	beq.n	80053ba <_dtoa_r+0x24a>
 800531c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005320:	2300      	movs	r3, #0
 8005322:	930c      	str	r3, [sp, #48]	; 0x30
 8005324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005326:	1b5b      	subs	r3, r3, r5
 8005328:	1e5a      	subs	r2, r3, #1
 800532a:	bf45      	ittet	mi
 800532c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005330:	9305      	strmi	r3, [sp, #20]
 8005332:	2300      	movpl	r3, #0
 8005334:	2300      	movmi	r3, #0
 8005336:	9206      	str	r2, [sp, #24]
 8005338:	bf54      	ite	pl
 800533a:	9305      	strpl	r3, [sp, #20]
 800533c:	9306      	strmi	r3, [sp, #24]
 800533e:	f1bb 0f00 	cmp.w	fp, #0
 8005342:	db3c      	blt.n	80053be <_dtoa_r+0x24e>
 8005344:	9b06      	ldr	r3, [sp, #24]
 8005346:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800534a:	445b      	add	r3, fp
 800534c:	9306      	str	r3, [sp, #24]
 800534e:	2300      	movs	r3, #0
 8005350:	9308      	str	r3, [sp, #32]
 8005352:	9b07      	ldr	r3, [sp, #28]
 8005354:	2b09      	cmp	r3, #9
 8005356:	d868      	bhi.n	800542a <_dtoa_r+0x2ba>
 8005358:	2b05      	cmp	r3, #5
 800535a:	bfc4      	itt	gt
 800535c:	3b04      	subgt	r3, #4
 800535e:	9307      	strgt	r3, [sp, #28]
 8005360:	9b07      	ldr	r3, [sp, #28]
 8005362:	f1a3 0302 	sub.w	r3, r3, #2
 8005366:	bfcc      	ite	gt
 8005368:	2500      	movgt	r5, #0
 800536a:	2501      	movle	r5, #1
 800536c:	2b03      	cmp	r3, #3
 800536e:	f200 8085 	bhi.w	800547c <_dtoa_r+0x30c>
 8005372:	e8df f003 	tbb	[pc, r3]
 8005376:	3b2e      	.short	0x3b2e
 8005378:	5839      	.short	0x5839
 800537a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800537e:	441d      	add	r5, r3
 8005380:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005384:	2b20      	cmp	r3, #32
 8005386:	bfc1      	itttt	gt
 8005388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800538c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005390:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005394:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005398:	bfd6      	itet	le
 800539a:	f1c3 0320 	rsble	r3, r3, #32
 800539e:	ea48 0003 	orrgt.w	r0, r8, r3
 80053a2:	fa06 f003 	lslle.w	r0, r6, r3
 80053a6:	f7fb f8ad 	bl	8000504 <__aeabi_ui2d>
 80053aa:	2201      	movs	r2, #1
 80053ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80053b0:	3d01      	subs	r5, #1
 80053b2:	920e      	str	r2, [sp, #56]	; 0x38
 80053b4:	e76f      	b.n	8005296 <_dtoa_r+0x126>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e7b3      	b.n	8005322 <_dtoa_r+0x1b2>
 80053ba:	900c      	str	r0, [sp, #48]	; 0x30
 80053bc:	e7b2      	b.n	8005324 <_dtoa_r+0x1b4>
 80053be:	9b05      	ldr	r3, [sp, #20]
 80053c0:	eba3 030b 	sub.w	r3, r3, fp
 80053c4:	9305      	str	r3, [sp, #20]
 80053c6:	f1cb 0300 	rsb	r3, fp, #0
 80053ca:	9308      	str	r3, [sp, #32]
 80053cc:	2300      	movs	r3, #0
 80053ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80053d0:	e7bf      	b.n	8005352 <_dtoa_r+0x1e2>
 80053d2:	2300      	movs	r3, #0
 80053d4:	9309      	str	r3, [sp, #36]	; 0x24
 80053d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dc52      	bgt.n	8005482 <_dtoa_r+0x312>
 80053dc:	2301      	movs	r3, #1
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	461a      	mov	r2, r3
 80053e4:	920a      	str	r2, [sp, #40]	; 0x28
 80053e6:	e00b      	b.n	8005400 <_dtoa_r+0x290>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e7f3      	b.n	80053d4 <_dtoa_r+0x264>
 80053ec:	2300      	movs	r3, #0
 80053ee:	9309      	str	r3, [sp, #36]	; 0x24
 80053f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f2:	445b      	add	r3, fp
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	3301      	adds	r3, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	bfb8      	it	lt
 80053fe:	2301      	movlt	r3, #1
 8005400:	69e0      	ldr	r0, [r4, #28]
 8005402:	2100      	movs	r1, #0
 8005404:	2204      	movs	r2, #4
 8005406:	f102 0614 	add.w	r6, r2, #20
 800540a:	429e      	cmp	r6, r3
 800540c:	d93d      	bls.n	800548a <_dtoa_r+0x31a>
 800540e:	6041      	str	r1, [r0, #4]
 8005410:	4620      	mov	r0, r4
 8005412:	f000 fd9f 	bl	8005f54 <_Balloc>
 8005416:	9000      	str	r0, [sp, #0]
 8005418:	2800      	cmp	r0, #0
 800541a:	d139      	bne.n	8005490 <_dtoa_r+0x320>
 800541c:	4b16      	ldr	r3, [pc, #88]	; (8005478 <_dtoa_r+0x308>)
 800541e:	4602      	mov	r2, r0
 8005420:	f240 11af 	movw	r1, #431	; 0x1af
 8005424:	e6bd      	b.n	80051a2 <_dtoa_r+0x32>
 8005426:	2301      	movs	r3, #1
 8005428:	e7e1      	b.n	80053ee <_dtoa_r+0x27e>
 800542a:	2501      	movs	r5, #1
 800542c:	2300      	movs	r3, #0
 800542e:	9307      	str	r3, [sp, #28]
 8005430:	9509      	str	r5, [sp, #36]	; 0x24
 8005432:	f04f 33ff 	mov.w	r3, #4294967295
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	9304      	str	r3, [sp, #16]
 800543a:	2200      	movs	r2, #0
 800543c:	2312      	movs	r3, #18
 800543e:	e7d1      	b.n	80053e4 <_dtoa_r+0x274>
 8005440:	636f4361 	.word	0x636f4361
 8005444:	3fd287a7 	.word	0x3fd287a7
 8005448:	8b60c8b3 	.word	0x8b60c8b3
 800544c:	3fc68a28 	.word	0x3fc68a28
 8005450:	509f79fb 	.word	0x509f79fb
 8005454:	3fd34413 	.word	0x3fd34413
 8005458:	08006e91 	.word	0x08006e91
 800545c:	08006ea8 	.word	0x08006ea8
 8005460:	7ff00000 	.word	0x7ff00000
 8005464:	08006e8d 	.word	0x08006e8d
 8005468:	08006e84 	.word	0x08006e84
 800546c:	08006e61 	.word	0x08006e61
 8005470:	3ff80000 	.word	0x3ff80000
 8005474:	08006f98 	.word	0x08006f98
 8005478:	08006f00 	.word	0x08006f00
 800547c:	2301      	movs	r3, #1
 800547e:	9309      	str	r3, [sp, #36]	; 0x24
 8005480:	e7d7      	b.n	8005432 <_dtoa_r+0x2c2>
 8005482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	e7ba      	b.n	8005400 <_dtoa_r+0x290>
 800548a:	3101      	adds	r1, #1
 800548c:	0052      	lsls	r2, r2, #1
 800548e:	e7ba      	b.n	8005406 <_dtoa_r+0x296>
 8005490:	69e3      	ldr	r3, [r4, #28]
 8005492:	9a00      	ldr	r2, [sp, #0]
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	9b04      	ldr	r3, [sp, #16]
 8005498:	2b0e      	cmp	r3, #14
 800549a:	f200 80a8 	bhi.w	80055ee <_dtoa_r+0x47e>
 800549e:	2d00      	cmp	r5, #0
 80054a0:	f000 80a5 	beq.w	80055ee <_dtoa_r+0x47e>
 80054a4:	f1bb 0f00 	cmp.w	fp, #0
 80054a8:	dd38      	ble.n	800551c <_dtoa_r+0x3ac>
 80054aa:	4bc0      	ldr	r3, [pc, #768]	; (80057ac <_dtoa_r+0x63c>)
 80054ac:	f00b 020f 	and.w	r2, fp, #15
 80054b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80054b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80054bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80054c0:	d019      	beq.n	80054f6 <_dtoa_r+0x386>
 80054c2:	4bbb      	ldr	r3, [pc, #748]	; (80057b0 <_dtoa_r+0x640>)
 80054c4:	ec51 0b18 	vmov	r0, r1, d8
 80054c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054cc:	f7fb f9be 	bl	800084c <__aeabi_ddiv>
 80054d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054d4:	f008 080f 	and.w	r8, r8, #15
 80054d8:	2503      	movs	r5, #3
 80054da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80057b0 <_dtoa_r+0x640>
 80054de:	f1b8 0f00 	cmp.w	r8, #0
 80054e2:	d10a      	bne.n	80054fa <_dtoa_r+0x38a>
 80054e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e8:	4632      	mov	r2, r6
 80054ea:	463b      	mov	r3, r7
 80054ec:	f7fb f9ae 	bl	800084c <__aeabi_ddiv>
 80054f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f4:	e02b      	b.n	800554e <_dtoa_r+0x3de>
 80054f6:	2502      	movs	r5, #2
 80054f8:	e7ef      	b.n	80054da <_dtoa_r+0x36a>
 80054fa:	f018 0f01 	tst.w	r8, #1
 80054fe:	d008      	beq.n	8005512 <_dtoa_r+0x3a2>
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005508:	f7fb f876 	bl	80005f8 <__aeabi_dmul>
 800550c:	3501      	adds	r5, #1
 800550e:	4606      	mov	r6, r0
 8005510:	460f      	mov	r7, r1
 8005512:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005516:	f109 0908 	add.w	r9, r9, #8
 800551a:	e7e0      	b.n	80054de <_dtoa_r+0x36e>
 800551c:	f000 809f 	beq.w	800565e <_dtoa_r+0x4ee>
 8005520:	f1cb 0600 	rsb	r6, fp, #0
 8005524:	4ba1      	ldr	r3, [pc, #644]	; (80057ac <_dtoa_r+0x63c>)
 8005526:	4fa2      	ldr	r7, [pc, #648]	; (80057b0 <_dtoa_r+0x640>)
 8005528:	f006 020f 	and.w	r2, r6, #15
 800552c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	ec51 0b18 	vmov	r0, r1, d8
 8005538:	f7fb f85e 	bl	80005f8 <__aeabi_dmul>
 800553c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005540:	1136      	asrs	r6, r6, #4
 8005542:	2300      	movs	r3, #0
 8005544:	2502      	movs	r5, #2
 8005546:	2e00      	cmp	r6, #0
 8005548:	d17e      	bne.n	8005648 <_dtoa_r+0x4d8>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1d0      	bne.n	80054f0 <_dtoa_r+0x380>
 800554e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005550:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8084 	beq.w	8005662 <_dtoa_r+0x4f2>
 800555a:	4b96      	ldr	r3, [pc, #600]	; (80057b4 <_dtoa_r+0x644>)
 800555c:	2200      	movs	r2, #0
 800555e:	4640      	mov	r0, r8
 8005560:	4649      	mov	r1, r9
 8005562:	f7fb fabb 	bl	8000adc <__aeabi_dcmplt>
 8005566:	2800      	cmp	r0, #0
 8005568:	d07b      	beq.n	8005662 <_dtoa_r+0x4f2>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d078      	beq.n	8005662 <_dtoa_r+0x4f2>
 8005570:	9b01      	ldr	r3, [sp, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	dd39      	ble.n	80055ea <_dtoa_r+0x47a>
 8005576:	4b90      	ldr	r3, [pc, #576]	; (80057b8 <_dtoa_r+0x648>)
 8005578:	2200      	movs	r2, #0
 800557a:	4640      	mov	r0, r8
 800557c:	4649      	mov	r1, r9
 800557e:	f7fb f83b 	bl	80005f8 <__aeabi_dmul>
 8005582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005586:	9e01      	ldr	r6, [sp, #4]
 8005588:	f10b 37ff 	add.w	r7, fp, #4294967295
 800558c:	3501      	adds	r5, #1
 800558e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005592:	4628      	mov	r0, r5
 8005594:	f7fa ffc6 	bl	8000524 <__aeabi_i2d>
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	f7fb f82c 	bl	80005f8 <__aeabi_dmul>
 80055a0:	4b86      	ldr	r3, [pc, #536]	; (80057bc <_dtoa_r+0x64c>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	f7fa fe72 	bl	800028c <__adddf3>
 80055a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80055ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055b0:	9303      	str	r3, [sp, #12]
 80055b2:	2e00      	cmp	r6, #0
 80055b4:	d158      	bne.n	8005668 <_dtoa_r+0x4f8>
 80055b6:	4b82      	ldr	r3, [pc, #520]	; (80057c0 <_dtoa_r+0x650>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	4640      	mov	r0, r8
 80055bc:	4649      	mov	r1, r9
 80055be:	f7fa fe63 	bl	8000288 <__aeabi_dsub>
 80055c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055c6:	4680      	mov	r8, r0
 80055c8:	4689      	mov	r9, r1
 80055ca:	f7fb faa5 	bl	8000b18 <__aeabi_dcmpgt>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f040 8296 	bne.w	8005b00 <_dtoa_r+0x990>
 80055d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80055d8:	4640      	mov	r0, r8
 80055da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055de:	4649      	mov	r1, r9
 80055e0:	f7fb fa7c 	bl	8000adc <__aeabi_dcmplt>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f040 8289 	bne.w	8005afc <_dtoa_r+0x98c>
 80055ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80055ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f2c0 814e 	blt.w	8005892 <_dtoa_r+0x722>
 80055f6:	f1bb 0f0e 	cmp.w	fp, #14
 80055fa:	f300 814a 	bgt.w	8005892 <_dtoa_r+0x722>
 80055fe:	4b6b      	ldr	r3, [pc, #428]	; (80057ac <_dtoa_r+0x63c>)
 8005600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	f280 80dc 	bge.w	80057c8 <_dtoa_r+0x658>
 8005610:	9b04      	ldr	r3, [sp, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f300 80d8 	bgt.w	80057c8 <_dtoa_r+0x658>
 8005618:	f040 826f 	bne.w	8005afa <_dtoa_r+0x98a>
 800561c:	4b68      	ldr	r3, [pc, #416]	; (80057c0 <_dtoa_r+0x650>)
 800561e:	2200      	movs	r2, #0
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fa ffe8 	bl	80005f8 <__aeabi_dmul>
 8005628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800562c:	f7fb fa6a 	bl	8000b04 <__aeabi_dcmpge>
 8005630:	9e04      	ldr	r6, [sp, #16]
 8005632:	4637      	mov	r7, r6
 8005634:	2800      	cmp	r0, #0
 8005636:	f040 8245 	bne.w	8005ac4 <_dtoa_r+0x954>
 800563a:	9d00      	ldr	r5, [sp, #0]
 800563c:	2331      	movs	r3, #49	; 0x31
 800563e:	f805 3b01 	strb.w	r3, [r5], #1
 8005642:	f10b 0b01 	add.w	fp, fp, #1
 8005646:	e241      	b.n	8005acc <_dtoa_r+0x95c>
 8005648:	07f2      	lsls	r2, r6, #31
 800564a:	d505      	bpl.n	8005658 <_dtoa_r+0x4e8>
 800564c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005650:	f7fa ffd2 	bl	80005f8 <__aeabi_dmul>
 8005654:	3501      	adds	r5, #1
 8005656:	2301      	movs	r3, #1
 8005658:	1076      	asrs	r6, r6, #1
 800565a:	3708      	adds	r7, #8
 800565c:	e773      	b.n	8005546 <_dtoa_r+0x3d6>
 800565e:	2502      	movs	r5, #2
 8005660:	e775      	b.n	800554e <_dtoa_r+0x3de>
 8005662:	9e04      	ldr	r6, [sp, #16]
 8005664:	465f      	mov	r7, fp
 8005666:	e792      	b.n	800558e <_dtoa_r+0x41e>
 8005668:	9900      	ldr	r1, [sp, #0]
 800566a:	4b50      	ldr	r3, [pc, #320]	; (80057ac <_dtoa_r+0x63c>)
 800566c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005670:	4431      	add	r1, r6
 8005672:	9102      	str	r1, [sp, #8]
 8005674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005676:	eeb0 9a47 	vmov.f32	s18, s14
 800567a:	eef0 9a67 	vmov.f32	s19, s15
 800567e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005686:	2900      	cmp	r1, #0
 8005688:	d044      	beq.n	8005714 <_dtoa_r+0x5a4>
 800568a:	494e      	ldr	r1, [pc, #312]	; (80057c4 <_dtoa_r+0x654>)
 800568c:	2000      	movs	r0, #0
 800568e:	f7fb f8dd 	bl	800084c <__aeabi_ddiv>
 8005692:	ec53 2b19 	vmov	r2, r3, d9
 8005696:	f7fa fdf7 	bl	8000288 <__aeabi_dsub>
 800569a:	9d00      	ldr	r5, [sp, #0]
 800569c:	ec41 0b19 	vmov	d9, r0, r1
 80056a0:	4649      	mov	r1, r9
 80056a2:	4640      	mov	r0, r8
 80056a4:	f7fb fa58 	bl	8000b58 <__aeabi_d2iz>
 80056a8:	4606      	mov	r6, r0
 80056aa:	f7fa ff3b 	bl	8000524 <__aeabi_i2d>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4640      	mov	r0, r8
 80056b4:	4649      	mov	r1, r9
 80056b6:	f7fa fde7 	bl	8000288 <__aeabi_dsub>
 80056ba:	3630      	adds	r6, #48	; 0x30
 80056bc:	f805 6b01 	strb.w	r6, [r5], #1
 80056c0:	ec53 2b19 	vmov	r2, r3, d9
 80056c4:	4680      	mov	r8, r0
 80056c6:	4689      	mov	r9, r1
 80056c8:	f7fb fa08 	bl	8000adc <__aeabi_dcmplt>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d164      	bne.n	800579a <_dtoa_r+0x62a>
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	4937      	ldr	r1, [pc, #220]	; (80057b4 <_dtoa_r+0x644>)
 80056d6:	2000      	movs	r0, #0
 80056d8:	f7fa fdd6 	bl	8000288 <__aeabi_dsub>
 80056dc:	ec53 2b19 	vmov	r2, r3, d9
 80056e0:	f7fb f9fc 	bl	8000adc <__aeabi_dcmplt>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	f040 80b6 	bne.w	8005856 <_dtoa_r+0x6e6>
 80056ea:	9b02      	ldr	r3, [sp, #8]
 80056ec:	429d      	cmp	r5, r3
 80056ee:	f43f af7c 	beq.w	80055ea <_dtoa_r+0x47a>
 80056f2:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <_dtoa_r+0x648>)
 80056f4:	ec51 0b19 	vmov	r0, r1, d9
 80056f8:	2200      	movs	r2, #0
 80056fa:	f7fa ff7d 	bl	80005f8 <__aeabi_dmul>
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <_dtoa_r+0x648>)
 8005700:	ec41 0b19 	vmov	d9, r0, r1
 8005704:	2200      	movs	r2, #0
 8005706:	4640      	mov	r0, r8
 8005708:	4649      	mov	r1, r9
 800570a:	f7fa ff75 	bl	80005f8 <__aeabi_dmul>
 800570e:	4680      	mov	r8, r0
 8005710:	4689      	mov	r9, r1
 8005712:	e7c5      	b.n	80056a0 <_dtoa_r+0x530>
 8005714:	ec51 0b17 	vmov	r0, r1, d7
 8005718:	f7fa ff6e 	bl	80005f8 <__aeabi_dmul>
 800571c:	9b02      	ldr	r3, [sp, #8]
 800571e:	9d00      	ldr	r5, [sp, #0]
 8005720:	930f      	str	r3, [sp, #60]	; 0x3c
 8005722:	ec41 0b19 	vmov	d9, r0, r1
 8005726:	4649      	mov	r1, r9
 8005728:	4640      	mov	r0, r8
 800572a:	f7fb fa15 	bl	8000b58 <__aeabi_d2iz>
 800572e:	4606      	mov	r6, r0
 8005730:	f7fa fef8 	bl	8000524 <__aeabi_i2d>
 8005734:	3630      	adds	r6, #48	; 0x30
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4640      	mov	r0, r8
 800573c:	4649      	mov	r1, r9
 800573e:	f7fa fda3 	bl	8000288 <__aeabi_dsub>
 8005742:	f805 6b01 	strb.w	r6, [r5], #1
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	429d      	cmp	r5, r3
 800574a:	4680      	mov	r8, r0
 800574c:	4689      	mov	r9, r1
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	d124      	bne.n	800579e <_dtoa_r+0x62e>
 8005754:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <_dtoa_r+0x654>)
 8005756:	ec51 0b19 	vmov	r0, r1, d9
 800575a:	f7fa fd97 	bl	800028c <__adddf3>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4640      	mov	r0, r8
 8005764:	4649      	mov	r1, r9
 8005766:	f7fb f9d7 	bl	8000b18 <__aeabi_dcmpgt>
 800576a:	2800      	cmp	r0, #0
 800576c:	d173      	bne.n	8005856 <_dtoa_r+0x6e6>
 800576e:	ec53 2b19 	vmov	r2, r3, d9
 8005772:	4914      	ldr	r1, [pc, #80]	; (80057c4 <_dtoa_r+0x654>)
 8005774:	2000      	movs	r0, #0
 8005776:	f7fa fd87 	bl	8000288 <__aeabi_dsub>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f7fb f9ab 	bl	8000adc <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f af2f 	beq.w	80055ea <_dtoa_r+0x47a>
 800578c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800578e:	1e6b      	subs	r3, r5, #1
 8005790:	930f      	str	r3, [sp, #60]	; 0x3c
 8005792:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005796:	2b30      	cmp	r3, #48	; 0x30
 8005798:	d0f8      	beq.n	800578c <_dtoa_r+0x61c>
 800579a:	46bb      	mov	fp, r7
 800579c:	e04a      	b.n	8005834 <_dtoa_r+0x6c4>
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <_dtoa_r+0x648>)
 80057a0:	f7fa ff2a 	bl	80005f8 <__aeabi_dmul>
 80057a4:	4680      	mov	r8, r0
 80057a6:	4689      	mov	r9, r1
 80057a8:	e7bd      	b.n	8005726 <_dtoa_r+0x5b6>
 80057aa:	bf00      	nop
 80057ac:	08006f98 	.word	0x08006f98
 80057b0:	08006f70 	.word	0x08006f70
 80057b4:	3ff00000 	.word	0x3ff00000
 80057b8:	40240000 	.word	0x40240000
 80057bc:	401c0000 	.word	0x401c0000
 80057c0:	40140000 	.word	0x40140000
 80057c4:	3fe00000 	.word	0x3fe00000
 80057c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057cc:	9d00      	ldr	r5, [sp, #0]
 80057ce:	4642      	mov	r2, r8
 80057d0:	464b      	mov	r3, r9
 80057d2:	4630      	mov	r0, r6
 80057d4:	4639      	mov	r1, r7
 80057d6:	f7fb f839 	bl	800084c <__aeabi_ddiv>
 80057da:	f7fb f9bd 	bl	8000b58 <__aeabi_d2iz>
 80057de:	9001      	str	r0, [sp, #4]
 80057e0:	f7fa fea0 	bl	8000524 <__aeabi_i2d>
 80057e4:	4642      	mov	r2, r8
 80057e6:	464b      	mov	r3, r9
 80057e8:	f7fa ff06 	bl	80005f8 <__aeabi_dmul>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4630      	mov	r0, r6
 80057f2:	4639      	mov	r1, r7
 80057f4:	f7fa fd48 	bl	8000288 <__aeabi_dsub>
 80057f8:	9e01      	ldr	r6, [sp, #4]
 80057fa:	9f04      	ldr	r7, [sp, #16]
 80057fc:	3630      	adds	r6, #48	; 0x30
 80057fe:	f805 6b01 	strb.w	r6, [r5], #1
 8005802:	9e00      	ldr	r6, [sp, #0]
 8005804:	1bae      	subs	r6, r5, r6
 8005806:	42b7      	cmp	r7, r6
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	d134      	bne.n	8005878 <_dtoa_r+0x708>
 800580e:	f7fa fd3d 	bl	800028c <__adddf3>
 8005812:	4642      	mov	r2, r8
 8005814:	464b      	mov	r3, r9
 8005816:	4606      	mov	r6, r0
 8005818:	460f      	mov	r7, r1
 800581a:	f7fb f97d 	bl	8000b18 <__aeabi_dcmpgt>
 800581e:	b9c8      	cbnz	r0, 8005854 <_dtoa_r+0x6e4>
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	4630      	mov	r0, r6
 8005826:	4639      	mov	r1, r7
 8005828:	f7fb f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 800582c:	b110      	cbz	r0, 8005834 <_dtoa_r+0x6c4>
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	07db      	lsls	r3, r3, #31
 8005832:	d40f      	bmi.n	8005854 <_dtoa_r+0x6e4>
 8005834:	4651      	mov	r1, sl
 8005836:	4620      	mov	r0, r4
 8005838:	f000 fbcc 	bl	8005fd4 <_Bfree>
 800583c:	2300      	movs	r3, #0
 800583e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005840:	702b      	strb	r3, [r5, #0]
 8005842:	f10b 0301 	add.w	r3, fp, #1
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800584a:	2b00      	cmp	r3, #0
 800584c:	f43f ace2 	beq.w	8005214 <_dtoa_r+0xa4>
 8005850:	601d      	str	r5, [r3, #0]
 8005852:	e4df      	b.n	8005214 <_dtoa_r+0xa4>
 8005854:	465f      	mov	r7, fp
 8005856:	462b      	mov	r3, r5
 8005858:	461d      	mov	r5, r3
 800585a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800585e:	2a39      	cmp	r2, #57	; 0x39
 8005860:	d106      	bne.n	8005870 <_dtoa_r+0x700>
 8005862:	9a00      	ldr	r2, [sp, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d1f7      	bne.n	8005858 <_dtoa_r+0x6e8>
 8005868:	9900      	ldr	r1, [sp, #0]
 800586a:	2230      	movs	r2, #48	; 0x30
 800586c:	3701      	adds	r7, #1
 800586e:	700a      	strb	r2, [r1, #0]
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	3201      	adds	r2, #1
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e790      	b.n	800579a <_dtoa_r+0x62a>
 8005878:	4ba3      	ldr	r3, [pc, #652]	; (8005b08 <_dtoa_r+0x998>)
 800587a:	2200      	movs	r2, #0
 800587c:	f7fa febc 	bl	80005f8 <__aeabi_dmul>
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	4606      	mov	r6, r0
 8005886:	460f      	mov	r7, r1
 8005888:	f7fb f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800588c:	2800      	cmp	r0, #0
 800588e:	d09e      	beq.n	80057ce <_dtoa_r+0x65e>
 8005890:	e7d0      	b.n	8005834 <_dtoa_r+0x6c4>
 8005892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005894:	2a00      	cmp	r2, #0
 8005896:	f000 80ca 	beq.w	8005a2e <_dtoa_r+0x8be>
 800589a:	9a07      	ldr	r2, [sp, #28]
 800589c:	2a01      	cmp	r2, #1
 800589e:	f300 80ad 	bgt.w	80059fc <_dtoa_r+0x88c>
 80058a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	f000 80a5 	beq.w	80059f4 <_dtoa_r+0x884>
 80058aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058ae:	9e08      	ldr	r6, [sp, #32]
 80058b0:	9d05      	ldr	r5, [sp, #20]
 80058b2:	9a05      	ldr	r2, [sp, #20]
 80058b4:	441a      	add	r2, r3
 80058b6:	9205      	str	r2, [sp, #20]
 80058b8:	9a06      	ldr	r2, [sp, #24]
 80058ba:	2101      	movs	r1, #1
 80058bc:	441a      	add	r2, r3
 80058be:	4620      	mov	r0, r4
 80058c0:	9206      	str	r2, [sp, #24]
 80058c2:	f000 fc3d 	bl	8006140 <__i2b>
 80058c6:	4607      	mov	r7, r0
 80058c8:	b165      	cbz	r5, 80058e4 <_dtoa_r+0x774>
 80058ca:	9b06      	ldr	r3, [sp, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dd09      	ble.n	80058e4 <_dtoa_r+0x774>
 80058d0:	42ab      	cmp	r3, r5
 80058d2:	9a05      	ldr	r2, [sp, #20]
 80058d4:	bfa8      	it	ge
 80058d6:	462b      	movge	r3, r5
 80058d8:	1ad2      	subs	r2, r2, r3
 80058da:	9205      	str	r2, [sp, #20]
 80058dc:	9a06      	ldr	r2, [sp, #24]
 80058de:	1aed      	subs	r5, r5, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	9306      	str	r3, [sp, #24]
 80058e4:	9b08      	ldr	r3, [sp, #32]
 80058e6:	b1f3      	cbz	r3, 8005926 <_dtoa_r+0x7b6>
 80058e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80a3 	beq.w	8005a36 <_dtoa_r+0x8c6>
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	dd10      	ble.n	8005916 <_dtoa_r+0x7a6>
 80058f4:	4639      	mov	r1, r7
 80058f6:	4632      	mov	r2, r6
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fce1 	bl	80062c0 <__pow5mult>
 80058fe:	4652      	mov	r2, sl
 8005900:	4601      	mov	r1, r0
 8005902:	4607      	mov	r7, r0
 8005904:	4620      	mov	r0, r4
 8005906:	f000 fc31 	bl	800616c <__multiply>
 800590a:	4651      	mov	r1, sl
 800590c:	4680      	mov	r8, r0
 800590e:	4620      	mov	r0, r4
 8005910:	f000 fb60 	bl	8005fd4 <_Bfree>
 8005914:	46c2      	mov	sl, r8
 8005916:	9b08      	ldr	r3, [sp, #32]
 8005918:	1b9a      	subs	r2, r3, r6
 800591a:	d004      	beq.n	8005926 <_dtoa_r+0x7b6>
 800591c:	4651      	mov	r1, sl
 800591e:	4620      	mov	r0, r4
 8005920:	f000 fcce 	bl	80062c0 <__pow5mult>
 8005924:	4682      	mov	sl, r0
 8005926:	2101      	movs	r1, #1
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fc09 	bl	8006140 <__i2b>
 800592e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005930:	2b00      	cmp	r3, #0
 8005932:	4606      	mov	r6, r0
 8005934:	f340 8081 	ble.w	8005a3a <_dtoa_r+0x8ca>
 8005938:	461a      	mov	r2, r3
 800593a:	4601      	mov	r1, r0
 800593c:	4620      	mov	r0, r4
 800593e:	f000 fcbf 	bl	80062c0 <__pow5mult>
 8005942:	9b07      	ldr	r3, [sp, #28]
 8005944:	2b01      	cmp	r3, #1
 8005946:	4606      	mov	r6, r0
 8005948:	dd7a      	ble.n	8005a40 <_dtoa_r+0x8d0>
 800594a:	f04f 0800 	mov.w	r8, #0
 800594e:	6933      	ldr	r3, [r6, #16]
 8005950:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005954:	6918      	ldr	r0, [r3, #16]
 8005956:	f000 fba5 	bl	80060a4 <__hi0bits>
 800595a:	f1c0 0020 	rsb	r0, r0, #32
 800595e:	9b06      	ldr	r3, [sp, #24]
 8005960:	4418      	add	r0, r3
 8005962:	f010 001f 	ands.w	r0, r0, #31
 8005966:	f000 8094 	beq.w	8005a92 <_dtoa_r+0x922>
 800596a:	f1c0 0320 	rsb	r3, r0, #32
 800596e:	2b04      	cmp	r3, #4
 8005970:	f340 8085 	ble.w	8005a7e <_dtoa_r+0x90e>
 8005974:	9b05      	ldr	r3, [sp, #20]
 8005976:	f1c0 001c 	rsb	r0, r0, #28
 800597a:	4403      	add	r3, r0
 800597c:	9305      	str	r3, [sp, #20]
 800597e:	9b06      	ldr	r3, [sp, #24]
 8005980:	4403      	add	r3, r0
 8005982:	4405      	add	r5, r0
 8005984:	9306      	str	r3, [sp, #24]
 8005986:	9b05      	ldr	r3, [sp, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	dd05      	ble.n	8005998 <_dtoa_r+0x828>
 800598c:	4651      	mov	r1, sl
 800598e:	461a      	mov	r2, r3
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fcef 	bl	8006374 <__lshift>
 8005996:	4682      	mov	sl, r0
 8005998:	9b06      	ldr	r3, [sp, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	dd05      	ble.n	80059aa <_dtoa_r+0x83a>
 800599e:	4631      	mov	r1, r6
 80059a0:	461a      	mov	r2, r3
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 fce6 	bl	8006374 <__lshift>
 80059a8:	4606      	mov	r6, r0
 80059aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d072      	beq.n	8005a96 <_dtoa_r+0x926>
 80059b0:	4631      	mov	r1, r6
 80059b2:	4650      	mov	r0, sl
 80059b4:	f000 fd4a 	bl	800644c <__mcmp>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	da6c      	bge.n	8005a96 <_dtoa_r+0x926>
 80059bc:	2300      	movs	r3, #0
 80059be:	4651      	mov	r1, sl
 80059c0:	220a      	movs	r2, #10
 80059c2:	4620      	mov	r0, r4
 80059c4:	f000 fb28 	bl	8006018 <__multadd>
 80059c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059ce:	4682      	mov	sl, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 81b0 	beq.w	8005d36 <_dtoa_r+0xbc6>
 80059d6:	2300      	movs	r3, #0
 80059d8:	4639      	mov	r1, r7
 80059da:	220a      	movs	r2, #10
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 fb1b 	bl	8006018 <__multadd>
 80059e2:	9b01      	ldr	r3, [sp, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	4607      	mov	r7, r0
 80059e8:	f300 8096 	bgt.w	8005b18 <_dtoa_r+0x9a8>
 80059ec:	9b07      	ldr	r3, [sp, #28]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	dc59      	bgt.n	8005aa6 <_dtoa_r+0x936>
 80059f2:	e091      	b.n	8005b18 <_dtoa_r+0x9a8>
 80059f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059fa:	e758      	b.n	80058ae <_dtoa_r+0x73e>
 80059fc:	9b04      	ldr	r3, [sp, #16]
 80059fe:	1e5e      	subs	r6, r3, #1
 8005a00:	9b08      	ldr	r3, [sp, #32]
 8005a02:	42b3      	cmp	r3, r6
 8005a04:	bfbf      	itttt	lt
 8005a06:	9b08      	ldrlt	r3, [sp, #32]
 8005a08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005a0a:	9608      	strlt	r6, [sp, #32]
 8005a0c:	1af3      	sublt	r3, r6, r3
 8005a0e:	bfb4      	ite	lt
 8005a10:	18d2      	addlt	r2, r2, r3
 8005a12:	1b9e      	subge	r6, r3, r6
 8005a14:	9b04      	ldr	r3, [sp, #16]
 8005a16:	bfbc      	itt	lt
 8005a18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005a1a:	2600      	movlt	r6, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bfb7      	itett	lt
 8005a20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005a24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005a28:	1a9d      	sublt	r5, r3, r2
 8005a2a:	2300      	movlt	r3, #0
 8005a2c:	e741      	b.n	80058b2 <_dtoa_r+0x742>
 8005a2e:	9e08      	ldr	r6, [sp, #32]
 8005a30:	9d05      	ldr	r5, [sp, #20]
 8005a32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a34:	e748      	b.n	80058c8 <_dtoa_r+0x758>
 8005a36:	9a08      	ldr	r2, [sp, #32]
 8005a38:	e770      	b.n	800591c <_dtoa_r+0x7ac>
 8005a3a:	9b07      	ldr	r3, [sp, #28]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	dc19      	bgt.n	8005a74 <_dtoa_r+0x904>
 8005a40:	9b02      	ldr	r3, [sp, #8]
 8005a42:	b9bb      	cbnz	r3, 8005a74 <_dtoa_r+0x904>
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a4a:	b99b      	cbnz	r3, 8005a74 <_dtoa_r+0x904>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a52:	0d1b      	lsrs	r3, r3, #20
 8005a54:	051b      	lsls	r3, r3, #20
 8005a56:	b183      	cbz	r3, 8005a7a <_dtoa_r+0x90a>
 8005a58:	9b05      	ldr	r3, [sp, #20]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	9305      	str	r3, [sp, #20]
 8005a5e:	9b06      	ldr	r3, [sp, #24]
 8005a60:	3301      	adds	r3, #1
 8005a62:	9306      	str	r3, [sp, #24]
 8005a64:	f04f 0801 	mov.w	r8, #1
 8005a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f47f af6f 	bne.w	800594e <_dtoa_r+0x7de>
 8005a70:	2001      	movs	r0, #1
 8005a72:	e774      	b.n	800595e <_dtoa_r+0x7ee>
 8005a74:	f04f 0800 	mov.w	r8, #0
 8005a78:	e7f6      	b.n	8005a68 <_dtoa_r+0x8f8>
 8005a7a:	4698      	mov	r8, r3
 8005a7c:	e7f4      	b.n	8005a68 <_dtoa_r+0x8f8>
 8005a7e:	d082      	beq.n	8005986 <_dtoa_r+0x816>
 8005a80:	9a05      	ldr	r2, [sp, #20]
 8005a82:	331c      	adds	r3, #28
 8005a84:	441a      	add	r2, r3
 8005a86:	9205      	str	r2, [sp, #20]
 8005a88:	9a06      	ldr	r2, [sp, #24]
 8005a8a:	441a      	add	r2, r3
 8005a8c:	441d      	add	r5, r3
 8005a8e:	9206      	str	r2, [sp, #24]
 8005a90:	e779      	b.n	8005986 <_dtoa_r+0x816>
 8005a92:	4603      	mov	r3, r0
 8005a94:	e7f4      	b.n	8005a80 <_dtoa_r+0x910>
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dc37      	bgt.n	8005b0c <_dtoa_r+0x99c>
 8005a9c:	9b07      	ldr	r3, [sp, #28]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	dd34      	ble.n	8005b0c <_dtoa_r+0x99c>
 8005aa2:	9b04      	ldr	r3, [sp, #16]
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	b963      	cbnz	r3, 8005ac4 <_dtoa_r+0x954>
 8005aaa:	4631      	mov	r1, r6
 8005aac:	2205      	movs	r2, #5
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fab2 	bl	8006018 <__multadd>
 8005ab4:	4601      	mov	r1, r0
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	4650      	mov	r0, sl
 8005aba:	f000 fcc7 	bl	800644c <__mcmp>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	f73f adbb 	bgt.w	800563a <_dtoa_r+0x4ca>
 8005ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac6:	9d00      	ldr	r5, [sp, #0]
 8005ac8:	ea6f 0b03 	mvn.w	fp, r3
 8005acc:	f04f 0800 	mov.w	r8, #0
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fa7e 	bl	8005fd4 <_Bfree>
 8005ad8:	2f00      	cmp	r7, #0
 8005ada:	f43f aeab 	beq.w	8005834 <_dtoa_r+0x6c4>
 8005ade:	f1b8 0f00 	cmp.w	r8, #0
 8005ae2:	d005      	beq.n	8005af0 <_dtoa_r+0x980>
 8005ae4:	45b8      	cmp	r8, r7
 8005ae6:	d003      	beq.n	8005af0 <_dtoa_r+0x980>
 8005ae8:	4641      	mov	r1, r8
 8005aea:	4620      	mov	r0, r4
 8005aec:	f000 fa72 	bl	8005fd4 <_Bfree>
 8005af0:	4639      	mov	r1, r7
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 fa6e 	bl	8005fd4 <_Bfree>
 8005af8:	e69c      	b.n	8005834 <_dtoa_r+0x6c4>
 8005afa:	2600      	movs	r6, #0
 8005afc:	4637      	mov	r7, r6
 8005afe:	e7e1      	b.n	8005ac4 <_dtoa_r+0x954>
 8005b00:	46bb      	mov	fp, r7
 8005b02:	4637      	mov	r7, r6
 8005b04:	e599      	b.n	800563a <_dtoa_r+0x4ca>
 8005b06:	bf00      	nop
 8005b08:	40240000 	.word	0x40240000
 8005b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80c8 	beq.w	8005ca4 <_dtoa_r+0xb34>
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	dd05      	ble.n	8005b28 <_dtoa_r+0x9b8>
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	462a      	mov	r2, r5
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fc27 	bl	8006374 <__lshift>
 8005b26:	4607      	mov	r7, r0
 8005b28:	f1b8 0f00 	cmp.w	r8, #0
 8005b2c:	d05b      	beq.n	8005be6 <_dtoa_r+0xa76>
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 fa0f 	bl	8005f54 <_Balloc>
 8005b36:	4605      	mov	r5, r0
 8005b38:	b928      	cbnz	r0, 8005b46 <_dtoa_r+0x9d6>
 8005b3a:	4b83      	ldr	r3, [pc, #524]	; (8005d48 <_dtoa_r+0xbd8>)
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005b42:	f7ff bb2e 	b.w	80051a2 <_dtoa_r+0x32>
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	3202      	adds	r2, #2
 8005b4a:	0092      	lsls	r2, r2, #2
 8005b4c:	f107 010c 	add.w	r1, r7, #12
 8005b50:	300c      	adds	r0, #12
 8005b52:	f000 fe39 	bl	80067c8 <memcpy>
 8005b56:	2201      	movs	r2, #1
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f000 fc0a 	bl	8006374 <__lshift>
 8005b60:	9b00      	ldr	r3, [sp, #0]
 8005b62:	3301      	adds	r3, #1
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	9308      	str	r3, [sp, #32]
 8005b6e:	9b02      	ldr	r3, [sp, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	46b8      	mov	r8, r7
 8005b76:	9306      	str	r3, [sp, #24]
 8005b78:	4607      	mov	r7, r0
 8005b7a:	9b04      	ldr	r3, [sp, #16]
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	4650      	mov	r0, sl
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	f7ff fa69 	bl	800505a <quorem>
 8005b88:	4641      	mov	r1, r8
 8005b8a:	9002      	str	r0, [sp, #8]
 8005b8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b90:	4650      	mov	r0, sl
 8005b92:	f000 fc5b 	bl	800644c <__mcmp>
 8005b96:	463a      	mov	r2, r7
 8005b98:	9005      	str	r0, [sp, #20]
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 fc71 	bl	8006484 <__mdiff>
 8005ba2:	68c2      	ldr	r2, [r0, #12]
 8005ba4:	4605      	mov	r5, r0
 8005ba6:	bb02      	cbnz	r2, 8005bea <_dtoa_r+0xa7a>
 8005ba8:	4601      	mov	r1, r0
 8005baa:	4650      	mov	r0, sl
 8005bac:	f000 fc4e 	bl	800644c <__mcmp>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bb8:	f000 fa0c 	bl	8005fd4 <_Bfree>
 8005bbc:	9b07      	ldr	r3, [sp, #28]
 8005bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc0:	9d04      	ldr	r5, [sp, #16]
 8005bc2:	ea43 0102 	orr.w	r1, r3, r2
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	4319      	orrs	r1, r3
 8005bca:	d110      	bne.n	8005bee <_dtoa_r+0xa7e>
 8005bcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bd0:	d029      	beq.n	8005c26 <_dtoa_r+0xab6>
 8005bd2:	9b05      	ldr	r3, [sp, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dd02      	ble.n	8005bde <_dtoa_r+0xa6e>
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	f883 9000 	strb.w	r9, [r3]
 8005be4:	e774      	b.n	8005ad0 <_dtoa_r+0x960>
 8005be6:	4638      	mov	r0, r7
 8005be8:	e7ba      	b.n	8005b60 <_dtoa_r+0x9f0>
 8005bea:	2201      	movs	r2, #1
 8005bec:	e7e1      	b.n	8005bb2 <_dtoa_r+0xa42>
 8005bee:	9b05      	ldr	r3, [sp, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db04      	blt.n	8005bfe <_dtoa_r+0xa8e>
 8005bf4:	9907      	ldr	r1, [sp, #28]
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	9906      	ldr	r1, [sp, #24]
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	d120      	bne.n	8005c40 <_dtoa_r+0xad0>
 8005bfe:	2a00      	cmp	r2, #0
 8005c00:	dded      	ble.n	8005bde <_dtoa_r+0xa6e>
 8005c02:	4651      	mov	r1, sl
 8005c04:	2201      	movs	r2, #1
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 fbb4 	bl	8006374 <__lshift>
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4682      	mov	sl, r0
 8005c10:	f000 fc1c 	bl	800644c <__mcmp>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	dc03      	bgt.n	8005c20 <_dtoa_r+0xab0>
 8005c18:	d1e1      	bne.n	8005bde <_dtoa_r+0xa6e>
 8005c1a:	f019 0f01 	tst.w	r9, #1
 8005c1e:	d0de      	beq.n	8005bde <_dtoa_r+0xa6e>
 8005c20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c24:	d1d8      	bne.n	8005bd8 <_dtoa_r+0xa68>
 8005c26:	9a01      	ldr	r2, [sp, #4]
 8005c28:	2339      	movs	r3, #57	; 0x39
 8005c2a:	7013      	strb	r3, [r2, #0]
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	461d      	mov	r5, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c36:	2a39      	cmp	r2, #57	; 0x39
 8005c38:	d06c      	beq.n	8005d14 <_dtoa_r+0xba4>
 8005c3a:	3201      	adds	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e747      	b.n	8005ad0 <_dtoa_r+0x960>
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	dd07      	ble.n	8005c54 <_dtoa_r+0xae4>
 8005c44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c48:	d0ed      	beq.n	8005c26 <_dtoa_r+0xab6>
 8005c4a:	9a01      	ldr	r2, [sp, #4]
 8005c4c:	f109 0301 	add.w	r3, r9, #1
 8005c50:	7013      	strb	r3, [r2, #0]
 8005c52:	e73d      	b.n	8005ad0 <_dtoa_r+0x960>
 8005c54:	9b04      	ldr	r3, [sp, #16]
 8005c56:	9a08      	ldr	r2, [sp, #32]
 8005c58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d043      	beq.n	8005ce8 <_dtoa_r+0xb78>
 8005c60:	4651      	mov	r1, sl
 8005c62:	2300      	movs	r3, #0
 8005c64:	220a      	movs	r2, #10
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 f9d6 	bl	8006018 <__multadd>
 8005c6c:	45b8      	cmp	r8, r7
 8005c6e:	4682      	mov	sl, r0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	f04f 020a 	mov.w	r2, #10
 8005c78:	4641      	mov	r1, r8
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	d107      	bne.n	8005c8e <_dtoa_r+0xb1e>
 8005c7e:	f000 f9cb 	bl	8006018 <__multadd>
 8005c82:	4680      	mov	r8, r0
 8005c84:	4607      	mov	r7, r0
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	9304      	str	r3, [sp, #16]
 8005c8c:	e775      	b.n	8005b7a <_dtoa_r+0xa0a>
 8005c8e:	f000 f9c3 	bl	8006018 <__multadd>
 8005c92:	4639      	mov	r1, r7
 8005c94:	4680      	mov	r8, r0
 8005c96:	2300      	movs	r3, #0
 8005c98:	220a      	movs	r2, #10
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 f9bc 	bl	8006018 <__multadd>
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	e7f0      	b.n	8005c86 <_dtoa_r+0xb16>
 8005ca4:	9b04      	ldr	r3, [sp, #16]
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	9d00      	ldr	r5, [sp, #0]
 8005caa:	4631      	mov	r1, r6
 8005cac:	4650      	mov	r0, sl
 8005cae:	f7ff f9d4 	bl	800505a <quorem>
 8005cb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005cb6:	9b00      	ldr	r3, [sp, #0]
 8005cb8:	f805 9b01 	strb.w	r9, [r5], #1
 8005cbc:	1aea      	subs	r2, r5, r3
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	dd07      	ble.n	8005cd4 <_dtoa_r+0xb64>
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	220a      	movs	r2, #10
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 f9a4 	bl	8006018 <__multadd>
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	e7ea      	b.n	8005caa <_dtoa_r+0xb3a>
 8005cd4:	9b01      	ldr	r3, [sp, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bfc8      	it	gt
 8005cda:	461d      	movgt	r5, r3
 8005cdc:	9b00      	ldr	r3, [sp, #0]
 8005cde:	bfd8      	it	le
 8005ce0:	2501      	movle	r5, #1
 8005ce2:	441d      	add	r5, r3
 8005ce4:	f04f 0800 	mov.w	r8, #0
 8005ce8:	4651      	mov	r1, sl
 8005cea:	2201      	movs	r2, #1
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 fb41 	bl	8006374 <__lshift>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4682      	mov	sl, r0
 8005cf6:	f000 fba9 	bl	800644c <__mcmp>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	dc96      	bgt.n	8005c2c <_dtoa_r+0xabc>
 8005cfe:	d102      	bne.n	8005d06 <_dtoa_r+0xb96>
 8005d00:	f019 0f01 	tst.w	r9, #1
 8005d04:	d192      	bne.n	8005c2c <_dtoa_r+0xabc>
 8005d06:	462b      	mov	r3, r5
 8005d08:	461d      	mov	r5, r3
 8005d0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d0e:	2a30      	cmp	r2, #48	; 0x30
 8005d10:	d0fa      	beq.n	8005d08 <_dtoa_r+0xb98>
 8005d12:	e6dd      	b.n	8005ad0 <_dtoa_r+0x960>
 8005d14:	9a00      	ldr	r2, [sp, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d189      	bne.n	8005c2e <_dtoa_r+0xabe>
 8005d1a:	f10b 0b01 	add.w	fp, fp, #1
 8005d1e:	2331      	movs	r3, #49	; 0x31
 8005d20:	e796      	b.n	8005c50 <_dtoa_r+0xae0>
 8005d22:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <_dtoa_r+0xbdc>)
 8005d24:	f7ff ba99 	b.w	800525a <_dtoa_r+0xea>
 8005d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f47f aa6d 	bne.w	800520a <_dtoa_r+0x9a>
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <_dtoa_r+0xbe0>)
 8005d32:	f7ff ba92 	b.w	800525a <_dtoa_r+0xea>
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	dcb5      	bgt.n	8005ca8 <_dtoa_r+0xb38>
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	f73f aeb1 	bgt.w	8005aa6 <_dtoa_r+0x936>
 8005d44:	e7b0      	b.n	8005ca8 <_dtoa_r+0xb38>
 8005d46:	bf00      	nop
 8005d48:	08006f00 	.word	0x08006f00
 8005d4c:	08006e60 	.word	0x08006e60
 8005d50:	08006e84 	.word	0x08006e84

08005d54 <_free_r>:
 8005d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d044      	beq.n	8005de4 <_free_r+0x90>
 8005d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5e:	9001      	str	r0, [sp, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f1a1 0404 	sub.w	r4, r1, #4
 8005d66:	bfb8      	it	lt
 8005d68:	18e4      	addlt	r4, r4, r3
 8005d6a:	f000 f8e7 	bl	8005f3c <__malloc_lock>
 8005d6e:	4a1e      	ldr	r2, [pc, #120]	; (8005de8 <_free_r+0x94>)
 8005d70:	9801      	ldr	r0, [sp, #4]
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	b933      	cbnz	r3, 8005d84 <_free_r+0x30>
 8005d76:	6063      	str	r3, [r4, #4]
 8005d78:	6014      	str	r4, [r2, #0]
 8005d7a:	b003      	add	sp, #12
 8005d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d80:	f000 b8e2 	b.w	8005f48 <__malloc_unlock>
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	d908      	bls.n	8005d9a <_free_r+0x46>
 8005d88:	6825      	ldr	r5, [r4, #0]
 8005d8a:	1961      	adds	r1, r4, r5
 8005d8c:	428b      	cmp	r3, r1
 8005d8e:	bf01      	itttt	eq
 8005d90:	6819      	ldreq	r1, [r3, #0]
 8005d92:	685b      	ldreq	r3, [r3, #4]
 8005d94:	1949      	addeq	r1, r1, r5
 8005d96:	6021      	streq	r1, [r4, #0]
 8005d98:	e7ed      	b.n	8005d76 <_free_r+0x22>
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	b10b      	cbz	r3, 8005da4 <_free_r+0x50>
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	d9fa      	bls.n	8005d9a <_free_r+0x46>
 8005da4:	6811      	ldr	r1, [r2, #0]
 8005da6:	1855      	adds	r5, r2, r1
 8005da8:	42a5      	cmp	r5, r4
 8005daa:	d10b      	bne.n	8005dc4 <_free_r+0x70>
 8005dac:	6824      	ldr	r4, [r4, #0]
 8005dae:	4421      	add	r1, r4
 8005db0:	1854      	adds	r4, r2, r1
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	d1e0      	bne.n	8005d7a <_free_r+0x26>
 8005db8:	681c      	ldr	r4, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	6053      	str	r3, [r2, #4]
 8005dbe:	440c      	add	r4, r1
 8005dc0:	6014      	str	r4, [r2, #0]
 8005dc2:	e7da      	b.n	8005d7a <_free_r+0x26>
 8005dc4:	d902      	bls.n	8005dcc <_free_r+0x78>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	6003      	str	r3, [r0, #0]
 8005dca:	e7d6      	b.n	8005d7a <_free_r+0x26>
 8005dcc:	6825      	ldr	r5, [r4, #0]
 8005dce:	1961      	adds	r1, r4, r5
 8005dd0:	428b      	cmp	r3, r1
 8005dd2:	bf04      	itt	eq
 8005dd4:	6819      	ldreq	r1, [r3, #0]
 8005dd6:	685b      	ldreq	r3, [r3, #4]
 8005dd8:	6063      	str	r3, [r4, #4]
 8005dda:	bf04      	itt	eq
 8005ddc:	1949      	addeq	r1, r1, r5
 8005dde:	6021      	streq	r1, [r4, #0]
 8005de0:	6054      	str	r4, [r2, #4]
 8005de2:	e7ca      	b.n	8005d7a <_free_r+0x26>
 8005de4:	b003      	add	sp, #12
 8005de6:	bd30      	pop	{r4, r5, pc}
 8005de8:	20000430 	.word	0x20000430

08005dec <malloc>:
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <malloc+0xc>)
 8005dee:	4601      	mov	r1, r0
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	f000 b823 	b.w	8005e3c <_malloc_r>
 8005df6:	bf00      	nop
 8005df8:	20000068 	.word	0x20000068

08005dfc <sbrk_aligned>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4e0e      	ldr	r6, [pc, #56]	; (8005e38 <sbrk_aligned+0x3c>)
 8005e00:	460c      	mov	r4, r1
 8005e02:	6831      	ldr	r1, [r6, #0]
 8005e04:	4605      	mov	r5, r0
 8005e06:	b911      	cbnz	r1, 8005e0e <sbrk_aligned+0x12>
 8005e08:	f000 fcce 	bl	80067a8 <_sbrk_r>
 8005e0c:	6030      	str	r0, [r6, #0]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 fcc9 	bl	80067a8 <_sbrk_r>
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	d00a      	beq.n	8005e30 <sbrk_aligned+0x34>
 8005e1a:	1cc4      	adds	r4, r0, #3
 8005e1c:	f024 0403 	bic.w	r4, r4, #3
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d007      	beq.n	8005e34 <sbrk_aligned+0x38>
 8005e24:	1a21      	subs	r1, r4, r0
 8005e26:	4628      	mov	r0, r5
 8005e28:	f000 fcbe 	bl	80067a8 <_sbrk_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d101      	bne.n	8005e34 <sbrk_aligned+0x38>
 8005e30:	f04f 34ff 	mov.w	r4, #4294967295
 8005e34:	4620      	mov	r0, r4
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	20000434 	.word	0x20000434

08005e3c <_malloc_r>:
 8005e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	1ccd      	adds	r5, r1, #3
 8005e42:	f025 0503 	bic.w	r5, r5, #3
 8005e46:	3508      	adds	r5, #8
 8005e48:	2d0c      	cmp	r5, #12
 8005e4a:	bf38      	it	cc
 8005e4c:	250c      	movcc	r5, #12
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	4607      	mov	r7, r0
 8005e52:	db01      	blt.n	8005e58 <_malloc_r+0x1c>
 8005e54:	42a9      	cmp	r1, r5
 8005e56:	d905      	bls.n	8005e64 <_malloc_r+0x28>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	2600      	movs	r6, #0
 8005e5e:	4630      	mov	r0, r6
 8005e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f38 <_malloc_r+0xfc>
 8005e68:	f000 f868 	bl	8005f3c <__malloc_lock>
 8005e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e70:	461c      	mov	r4, r3
 8005e72:	bb5c      	cbnz	r4, 8005ecc <_malloc_r+0x90>
 8005e74:	4629      	mov	r1, r5
 8005e76:	4638      	mov	r0, r7
 8005e78:	f7ff ffc0 	bl	8005dfc <sbrk_aligned>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	4604      	mov	r4, r0
 8005e80:	d155      	bne.n	8005f2e <_malloc_r+0xf2>
 8005e82:	f8d8 4000 	ldr.w	r4, [r8]
 8005e86:	4626      	mov	r6, r4
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	d145      	bne.n	8005f18 <_malloc_r+0xdc>
 8005e8c:	2c00      	cmp	r4, #0
 8005e8e:	d048      	beq.n	8005f22 <_malloc_r+0xe6>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	4631      	mov	r1, r6
 8005e94:	4638      	mov	r0, r7
 8005e96:	eb04 0903 	add.w	r9, r4, r3
 8005e9a:	f000 fc85 	bl	80067a8 <_sbrk_r>
 8005e9e:	4581      	cmp	r9, r0
 8005ea0:	d13f      	bne.n	8005f22 <_malloc_r+0xe6>
 8005ea2:	6821      	ldr	r1, [r4, #0]
 8005ea4:	1a6d      	subs	r5, r5, r1
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7ff ffa7 	bl	8005dfc <sbrk_aligned>
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d037      	beq.n	8005f22 <_malloc_r+0xe6>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	442b      	add	r3, r5
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d038      	beq.n	8005f32 <_malloc_r+0xf6>
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	42a2      	cmp	r2, r4
 8005ec4:	d12b      	bne.n	8005f1e <_malloc_r+0xe2>
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	e00f      	b.n	8005eec <_malloc_r+0xb0>
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	1b52      	subs	r2, r2, r5
 8005ed0:	d41f      	bmi.n	8005f12 <_malloc_r+0xd6>
 8005ed2:	2a0b      	cmp	r2, #11
 8005ed4:	d917      	bls.n	8005f06 <_malloc_r+0xca>
 8005ed6:	1961      	adds	r1, r4, r5
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	6025      	str	r5, [r4, #0]
 8005edc:	bf18      	it	ne
 8005ede:	6059      	strne	r1, [r3, #4]
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	bf08      	it	eq
 8005ee4:	f8c8 1000 	streq.w	r1, [r8]
 8005ee8:	5162      	str	r2, [r4, r5]
 8005eea:	604b      	str	r3, [r1, #4]
 8005eec:	4638      	mov	r0, r7
 8005eee:	f104 060b 	add.w	r6, r4, #11
 8005ef2:	f000 f829 	bl	8005f48 <__malloc_unlock>
 8005ef6:	f026 0607 	bic.w	r6, r6, #7
 8005efa:	1d23      	adds	r3, r4, #4
 8005efc:	1af2      	subs	r2, r6, r3
 8005efe:	d0ae      	beq.n	8005e5e <_malloc_r+0x22>
 8005f00:	1b9b      	subs	r3, r3, r6
 8005f02:	50a3      	str	r3, [r4, r2]
 8005f04:	e7ab      	b.n	8005e5e <_malloc_r+0x22>
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	6862      	ldr	r2, [r4, #4]
 8005f0a:	d1dd      	bne.n	8005ec8 <_malloc_r+0x8c>
 8005f0c:	f8c8 2000 	str.w	r2, [r8]
 8005f10:	e7ec      	b.n	8005eec <_malloc_r+0xb0>
 8005f12:	4623      	mov	r3, r4
 8005f14:	6864      	ldr	r4, [r4, #4]
 8005f16:	e7ac      	b.n	8005e72 <_malloc_r+0x36>
 8005f18:	4634      	mov	r4, r6
 8005f1a:	6876      	ldr	r6, [r6, #4]
 8005f1c:	e7b4      	b.n	8005e88 <_malloc_r+0x4c>
 8005f1e:	4613      	mov	r3, r2
 8005f20:	e7cc      	b.n	8005ebc <_malloc_r+0x80>
 8005f22:	230c      	movs	r3, #12
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	4638      	mov	r0, r7
 8005f28:	f000 f80e 	bl	8005f48 <__malloc_unlock>
 8005f2c:	e797      	b.n	8005e5e <_malloc_r+0x22>
 8005f2e:	6025      	str	r5, [r4, #0]
 8005f30:	e7dc      	b.n	8005eec <_malloc_r+0xb0>
 8005f32:	605b      	str	r3, [r3, #4]
 8005f34:	deff      	udf	#255	; 0xff
 8005f36:	bf00      	nop
 8005f38:	20000430 	.word	0x20000430

08005f3c <__malloc_lock>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__malloc_lock+0x8>)
 8005f3e:	f7ff b88a 	b.w	8005056 <__retarget_lock_acquire_recursive>
 8005f42:	bf00      	nop
 8005f44:	2000042c 	.word	0x2000042c

08005f48 <__malloc_unlock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__malloc_unlock+0x8>)
 8005f4a:	f7ff b885 	b.w	8005058 <__retarget_lock_release_recursive>
 8005f4e:	bf00      	nop
 8005f50:	2000042c 	.word	0x2000042c

08005f54 <_Balloc>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	69c6      	ldr	r6, [r0, #28]
 8005f58:	4604      	mov	r4, r0
 8005f5a:	460d      	mov	r5, r1
 8005f5c:	b976      	cbnz	r6, 8005f7c <_Balloc+0x28>
 8005f5e:	2010      	movs	r0, #16
 8005f60:	f7ff ff44 	bl	8005dec <malloc>
 8005f64:	4602      	mov	r2, r0
 8005f66:	61e0      	str	r0, [r4, #28]
 8005f68:	b920      	cbnz	r0, 8005f74 <_Balloc+0x20>
 8005f6a:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <_Balloc+0x78>)
 8005f6c:	4818      	ldr	r0, [pc, #96]	; (8005fd0 <_Balloc+0x7c>)
 8005f6e:	216b      	movs	r1, #107	; 0x6b
 8005f70:	f000 fc38 	bl	80067e4 <__assert_func>
 8005f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f78:	6006      	str	r6, [r0, #0]
 8005f7a:	60c6      	str	r6, [r0, #12]
 8005f7c:	69e6      	ldr	r6, [r4, #28]
 8005f7e:	68f3      	ldr	r3, [r6, #12]
 8005f80:	b183      	cbz	r3, 8005fa4 <_Balloc+0x50>
 8005f82:	69e3      	ldr	r3, [r4, #28]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f8a:	b9b8      	cbnz	r0, 8005fbc <_Balloc+0x68>
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f92:	1d72      	adds	r2, r6, #5
 8005f94:	0092      	lsls	r2, r2, #2
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 fc42 	bl	8006820 <_calloc_r>
 8005f9c:	b160      	cbz	r0, 8005fb8 <_Balloc+0x64>
 8005f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fa2:	e00e      	b.n	8005fc2 <_Balloc+0x6e>
 8005fa4:	2221      	movs	r2, #33	; 0x21
 8005fa6:	2104      	movs	r1, #4
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 fc39 	bl	8006820 <_calloc_r>
 8005fae:	69e3      	ldr	r3, [r4, #28]
 8005fb0:	60f0      	str	r0, [r6, #12]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e4      	bne.n	8005f82 <_Balloc+0x2e>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	6802      	ldr	r2, [r0, #0]
 8005fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fc8:	e7f7      	b.n	8005fba <_Balloc+0x66>
 8005fca:	bf00      	nop
 8005fcc:	08006e91 	.word	0x08006e91
 8005fd0:	08006f11 	.word	0x08006f11

08005fd4 <_Bfree>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	69c6      	ldr	r6, [r0, #28]
 8005fd8:	4605      	mov	r5, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	b976      	cbnz	r6, 8005ffc <_Bfree+0x28>
 8005fde:	2010      	movs	r0, #16
 8005fe0:	f7ff ff04 	bl	8005dec <malloc>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	61e8      	str	r0, [r5, #28]
 8005fe8:	b920      	cbnz	r0, 8005ff4 <_Bfree+0x20>
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <_Bfree+0x3c>)
 8005fec:	4809      	ldr	r0, [pc, #36]	; (8006014 <_Bfree+0x40>)
 8005fee:	218f      	movs	r1, #143	; 0x8f
 8005ff0:	f000 fbf8 	bl	80067e4 <__assert_func>
 8005ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ff8:	6006      	str	r6, [r0, #0]
 8005ffa:	60c6      	str	r6, [r0, #12]
 8005ffc:	b13c      	cbz	r4, 800600e <_Bfree+0x3a>
 8005ffe:	69eb      	ldr	r3, [r5, #28]
 8006000:	6862      	ldr	r2, [r4, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006008:	6021      	str	r1, [r4, #0]
 800600a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	08006e91 	.word	0x08006e91
 8006014:	08006f11 	.word	0x08006f11

08006018 <__multadd>:
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	690d      	ldr	r5, [r1, #16]
 800601e:	4607      	mov	r7, r0
 8006020:	460c      	mov	r4, r1
 8006022:	461e      	mov	r6, r3
 8006024:	f101 0c14 	add.w	ip, r1, #20
 8006028:	2000      	movs	r0, #0
 800602a:	f8dc 3000 	ldr.w	r3, [ip]
 800602e:	b299      	uxth	r1, r3
 8006030:	fb02 6101 	mla	r1, r2, r1, r6
 8006034:	0c1e      	lsrs	r6, r3, #16
 8006036:	0c0b      	lsrs	r3, r1, #16
 8006038:	fb02 3306 	mla	r3, r2, r6, r3
 800603c:	b289      	uxth	r1, r1
 800603e:	3001      	adds	r0, #1
 8006040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006044:	4285      	cmp	r5, r0
 8006046:	f84c 1b04 	str.w	r1, [ip], #4
 800604a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800604e:	dcec      	bgt.n	800602a <__multadd+0x12>
 8006050:	b30e      	cbz	r6, 8006096 <__multadd+0x7e>
 8006052:	68a3      	ldr	r3, [r4, #8]
 8006054:	42ab      	cmp	r3, r5
 8006056:	dc19      	bgt.n	800608c <__multadd+0x74>
 8006058:	6861      	ldr	r1, [r4, #4]
 800605a:	4638      	mov	r0, r7
 800605c:	3101      	adds	r1, #1
 800605e:	f7ff ff79 	bl	8005f54 <_Balloc>
 8006062:	4680      	mov	r8, r0
 8006064:	b928      	cbnz	r0, 8006072 <__multadd+0x5a>
 8006066:	4602      	mov	r2, r0
 8006068:	4b0c      	ldr	r3, [pc, #48]	; (800609c <__multadd+0x84>)
 800606a:	480d      	ldr	r0, [pc, #52]	; (80060a0 <__multadd+0x88>)
 800606c:	21ba      	movs	r1, #186	; 0xba
 800606e:	f000 fbb9 	bl	80067e4 <__assert_func>
 8006072:	6922      	ldr	r2, [r4, #16]
 8006074:	3202      	adds	r2, #2
 8006076:	f104 010c 	add.w	r1, r4, #12
 800607a:	0092      	lsls	r2, r2, #2
 800607c:	300c      	adds	r0, #12
 800607e:	f000 fba3 	bl	80067c8 <memcpy>
 8006082:	4621      	mov	r1, r4
 8006084:	4638      	mov	r0, r7
 8006086:	f7ff ffa5 	bl	8005fd4 <_Bfree>
 800608a:	4644      	mov	r4, r8
 800608c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006090:	3501      	adds	r5, #1
 8006092:	615e      	str	r6, [r3, #20]
 8006094:	6125      	str	r5, [r4, #16]
 8006096:	4620      	mov	r0, r4
 8006098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800609c:	08006f00 	.word	0x08006f00
 80060a0:	08006f11 	.word	0x08006f11

080060a4 <__hi0bits>:
 80060a4:	0c03      	lsrs	r3, r0, #16
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	b9d3      	cbnz	r3, 80060e0 <__hi0bits+0x3c>
 80060aa:	0400      	lsls	r0, r0, #16
 80060ac:	2310      	movs	r3, #16
 80060ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80060b2:	bf04      	itt	eq
 80060b4:	0200      	lsleq	r0, r0, #8
 80060b6:	3308      	addeq	r3, #8
 80060b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80060bc:	bf04      	itt	eq
 80060be:	0100      	lsleq	r0, r0, #4
 80060c0:	3304      	addeq	r3, #4
 80060c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060c6:	bf04      	itt	eq
 80060c8:	0080      	lsleq	r0, r0, #2
 80060ca:	3302      	addeq	r3, #2
 80060cc:	2800      	cmp	r0, #0
 80060ce:	db05      	blt.n	80060dc <__hi0bits+0x38>
 80060d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060d4:	f103 0301 	add.w	r3, r3, #1
 80060d8:	bf08      	it	eq
 80060da:	2320      	moveq	r3, #32
 80060dc:	4618      	mov	r0, r3
 80060de:	4770      	bx	lr
 80060e0:	2300      	movs	r3, #0
 80060e2:	e7e4      	b.n	80060ae <__hi0bits+0xa>

080060e4 <__lo0bits>:
 80060e4:	6803      	ldr	r3, [r0, #0]
 80060e6:	f013 0207 	ands.w	r2, r3, #7
 80060ea:	d00c      	beq.n	8006106 <__lo0bits+0x22>
 80060ec:	07d9      	lsls	r1, r3, #31
 80060ee:	d422      	bmi.n	8006136 <__lo0bits+0x52>
 80060f0:	079a      	lsls	r2, r3, #30
 80060f2:	bf49      	itett	mi
 80060f4:	085b      	lsrmi	r3, r3, #1
 80060f6:	089b      	lsrpl	r3, r3, #2
 80060f8:	6003      	strmi	r3, [r0, #0]
 80060fa:	2201      	movmi	r2, #1
 80060fc:	bf5c      	itt	pl
 80060fe:	6003      	strpl	r3, [r0, #0]
 8006100:	2202      	movpl	r2, #2
 8006102:	4610      	mov	r0, r2
 8006104:	4770      	bx	lr
 8006106:	b299      	uxth	r1, r3
 8006108:	b909      	cbnz	r1, 800610e <__lo0bits+0x2a>
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	2210      	movs	r2, #16
 800610e:	b2d9      	uxtb	r1, r3
 8006110:	b909      	cbnz	r1, 8006116 <__lo0bits+0x32>
 8006112:	3208      	adds	r2, #8
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	0719      	lsls	r1, r3, #28
 8006118:	bf04      	itt	eq
 800611a:	091b      	lsreq	r3, r3, #4
 800611c:	3204      	addeq	r2, #4
 800611e:	0799      	lsls	r1, r3, #30
 8006120:	bf04      	itt	eq
 8006122:	089b      	lsreq	r3, r3, #2
 8006124:	3202      	addeq	r2, #2
 8006126:	07d9      	lsls	r1, r3, #31
 8006128:	d403      	bmi.n	8006132 <__lo0bits+0x4e>
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	f102 0201 	add.w	r2, r2, #1
 8006130:	d003      	beq.n	800613a <__lo0bits+0x56>
 8006132:	6003      	str	r3, [r0, #0]
 8006134:	e7e5      	b.n	8006102 <__lo0bits+0x1e>
 8006136:	2200      	movs	r2, #0
 8006138:	e7e3      	b.n	8006102 <__lo0bits+0x1e>
 800613a:	2220      	movs	r2, #32
 800613c:	e7e1      	b.n	8006102 <__lo0bits+0x1e>
	...

08006140 <__i2b>:
 8006140:	b510      	push	{r4, lr}
 8006142:	460c      	mov	r4, r1
 8006144:	2101      	movs	r1, #1
 8006146:	f7ff ff05 	bl	8005f54 <_Balloc>
 800614a:	4602      	mov	r2, r0
 800614c:	b928      	cbnz	r0, 800615a <__i2b+0x1a>
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <__i2b+0x24>)
 8006150:	4805      	ldr	r0, [pc, #20]	; (8006168 <__i2b+0x28>)
 8006152:	f240 1145 	movw	r1, #325	; 0x145
 8006156:	f000 fb45 	bl	80067e4 <__assert_func>
 800615a:	2301      	movs	r3, #1
 800615c:	6144      	str	r4, [r0, #20]
 800615e:	6103      	str	r3, [r0, #16]
 8006160:	bd10      	pop	{r4, pc}
 8006162:	bf00      	nop
 8006164:	08006f00 	.word	0x08006f00
 8006168:	08006f11 	.word	0x08006f11

0800616c <__multiply>:
 800616c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006170:	4691      	mov	r9, r2
 8006172:	690a      	ldr	r2, [r1, #16]
 8006174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006178:	429a      	cmp	r2, r3
 800617a:	bfb8      	it	lt
 800617c:	460b      	movlt	r3, r1
 800617e:	460c      	mov	r4, r1
 8006180:	bfbc      	itt	lt
 8006182:	464c      	movlt	r4, r9
 8006184:	4699      	movlt	r9, r3
 8006186:	6927      	ldr	r7, [r4, #16]
 8006188:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800618c:	68a3      	ldr	r3, [r4, #8]
 800618e:	6861      	ldr	r1, [r4, #4]
 8006190:	eb07 060a 	add.w	r6, r7, sl
 8006194:	42b3      	cmp	r3, r6
 8006196:	b085      	sub	sp, #20
 8006198:	bfb8      	it	lt
 800619a:	3101      	addlt	r1, #1
 800619c:	f7ff feda 	bl	8005f54 <_Balloc>
 80061a0:	b930      	cbnz	r0, 80061b0 <__multiply+0x44>
 80061a2:	4602      	mov	r2, r0
 80061a4:	4b44      	ldr	r3, [pc, #272]	; (80062b8 <__multiply+0x14c>)
 80061a6:	4845      	ldr	r0, [pc, #276]	; (80062bc <__multiply+0x150>)
 80061a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80061ac:	f000 fb1a 	bl	80067e4 <__assert_func>
 80061b0:	f100 0514 	add.w	r5, r0, #20
 80061b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061b8:	462b      	mov	r3, r5
 80061ba:	2200      	movs	r2, #0
 80061bc:	4543      	cmp	r3, r8
 80061be:	d321      	bcc.n	8006204 <__multiply+0x98>
 80061c0:	f104 0314 	add.w	r3, r4, #20
 80061c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061c8:	f109 0314 	add.w	r3, r9, #20
 80061cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061d0:	9202      	str	r2, [sp, #8]
 80061d2:	1b3a      	subs	r2, r7, r4
 80061d4:	3a15      	subs	r2, #21
 80061d6:	f022 0203 	bic.w	r2, r2, #3
 80061da:	3204      	adds	r2, #4
 80061dc:	f104 0115 	add.w	r1, r4, #21
 80061e0:	428f      	cmp	r7, r1
 80061e2:	bf38      	it	cc
 80061e4:	2204      	movcc	r2, #4
 80061e6:	9201      	str	r2, [sp, #4]
 80061e8:	9a02      	ldr	r2, [sp, #8]
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d80c      	bhi.n	800620a <__multiply+0x9e>
 80061f0:	2e00      	cmp	r6, #0
 80061f2:	dd03      	ble.n	80061fc <__multiply+0x90>
 80061f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d05b      	beq.n	80062b4 <__multiply+0x148>
 80061fc:	6106      	str	r6, [r0, #16]
 80061fe:	b005      	add	sp, #20
 8006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006204:	f843 2b04 	str.w	r2, [r3], #4
 8006208:	e7d8      	b.n	80061bc <__multiply+0x50>
 800620a:	f8b3 a000 	ldrh.w	sl, [r3]
 800620e:	f1ba 0f00 	cmp.w	sl, #0
 8006212:	d024      	beq.n	800625e <__multiply+0xf2>
 8006214:	f104 0e14 	add.w	lr, r4, #20
 8006218:	46a9      	mov	r9, r5
 800621a:	f04f 0c00 	mov.w	ip, #0
 800621e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006222:	f8d9 1000 	ldr.w	r1, [r9]
 8006226:	fa1f fb82 	uxth.w	fp, r2
 800622a:	b289      	uxth	r1, r1
 800622c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006234:	f8d9 2000 	ldr.w	r2, [r9]
 8006238:	4461      	add	r1, ip
 800623a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800623e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006246:	b289      	uxth	r1, r1
 8006248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800624c:	4577      	cmp	r7, lr
 800624e:	f849 1b04 	str.w	r1, [r9], #4
 8006252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006256:	d8e2      	bhi.n	800621e <__multiply+0xb2>
 8006258:	9a01      	ldr	r2, [sp, #4]
 800625a:	f845 c002 	str.w	ip, [r5, r2]
 800625e:	9a03      	ldr	r2, [sp, #12]
 8006260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006264:	3304      	adds	r3, #4
 8006266:	f1b9 0f00 	cmp.w	r9, #0
 800626a:	d021      	beq.n	80062b0 <__multiply+0x144>
 800626c:	6829      	ldr	r1, [r5, #0]
 800626e:	f104 0c14 	add.w	ip, r4, #20
 8006272:	46ae      	mov	lr, r5
 8006274:	f04f 0a00 	mov.w	sl, #0
 8006278:	f8bc b000 	ldrh.w	fp, [ip]
 800627c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006280:	fb09 220b 	mla	r2, r9, fp, r2
 8006284:	4452      	add	r2, sl
 8006286:	b289      	uxth	r1, r1
 8006288:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800628c:	f84e 1b04 	str.w	r1, [lr], #4
 8006290:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006294:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006298:	f8be 1000 	ldrh.w	r1, [lr]
 800629c:	fb09 110a 	mla	r1, r9, sl, r1
 80062a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80062a4:	4567      	cmp	r7, ip
 80062a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062aa:	d8e5      	bhi.n	8006278 <__multiply+0x10c>
 80062ac:	9a01      	ldr	r2, [sp, #4]
 80062ae:	50a9      	str	r1, [r5, r2]
 80062b0:	3504      	adds	r5, #4
 80062b2:	e799      	b.n	80061e8 <__multiply+0x7c>
 80062b4:	3e01      	subs	r6, #1
 80062b6:	e79b      	b.n	80061f0 <__multiply+0x84>
 80062b8:	08006f00 	.word	0x08006f00
 80062bc:	08006f11 	.word	0x08006f11

080062c0 <__pow5mult>:
 80062c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c4:	4615      	mov	r5, r2
 80062c6:	f012 0203 	ands.w	r2, r2, #3
 80062ca:	4606      	mov	r6, r0
 80062cc:	460f      	mov	r7, r1
 80062ce:	d007      	beq.n	80062e0 <__pow5mult+0x20>
 80062d0:	4c25      	ldr	r4, [pc, #148]	; (8006368 <__pow5mult+0xa8>)
 80062d2:	3a01      	subs	r2, #1
 80062d4:	2300      	movs	r3, #0
 80062d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062da:	f7ff fe9d 	bl	8006018 <__multadd>
 80062de:	4607      	mov	r7, r0
 80062e0:	10ad      	asrs	r5, r5, #2
 80062e2:	d03d      	beq.n	8006360 <__pow5mult+0xa0>
 80062e4:	69f4      	ldr	r4, [r6, #28]
 80062e6:	b97c      	cbnz	r4, 8006308 <__pow5mult+0x48>
 80062e8:	2010      	movs	r0, #16
 80062ea:	f7ff fd7f 	bl	8005dec <malloc>
 80062ee:	4602      	mov	r2, r0
 80062f0:	61f0      	str	r0, [r6, #28]
 80062f2:	b928      	cbnz	r0, 8006300 <__pow5mult+0x40>
 80062f4:	4b1d      	ldr	r3, [pc, #116]	; (800636c <__pow5mult+0xac>)
 80062f6:	481e      	ldr	r0, [pc, #120]	; (8006370 <__pow5mult+0xb0>)
 80062f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80062fc:	f000 fa72 	bl	80067e4 <__assert_func>
 8006300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006304:	6004      	str	r4, [r0, #0]
 8006306:	60c4      	str	r4, [r0, #12]
 8006308:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800630c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006310:	b94c      	cbnz	r4, 8006326 <__pow5mult+0x66>
 8006312:	f240 2171 	movw	r1, #625	; 0x271
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ff12 	bl	8006140 <__i2b>
 800631c:	2300      	movs	r3, #0
 800631e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006322:	4604      	mov	r4, r0
 8006324:	6003      	str	r3, [r0, #0]
 8006326:	f04f 0900 	mov.w	r9, #0
 800632a:	07eb      	lsls	r3, r5, #31
 800632c:	d50a      	bpl.n	8006344 <__pow5mult+0x84>
 800632e:	4639      	mov	r1, r7
 8006330:	4622      	mov	r2, r4
 8006332:	4630      	mov	r0, r6
 8006334:	f7ff ff1a 	bl	800616c <__multiply>
 8006338:	4639      	mov	r1, r7
 800633a:	4680      	mov	r8, r0
 800633c:	4630      	mov	r0, r6
 800633e:	f7ff fe49 	bl	8005fd4 <_Bfree>
 8006342:	4647      	mov	r7, r8
 8006344:	106d      	asrs	r5, r5, #1
 8006346:	d00b      	beq.n	8006360 <__pow5mult+0xa0>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	b938      	cbnz	r0, 800635c <__pow5mult+0x9c>
 800634c:	4622      	mov	r2, r4
 800634e:	4621      	mov	r1, r4
 8006350:	4630      	mov	r0, r6
 8006352:	f7ff ff0b 	bl	800616c <__multiply>
 8006356:	6020      	str	r0, [r4, #0]
 8006358:	f8c0 9000 	str.w	r9, [r0]
 800635c:	4604      	mov	r4, r0
 800635e:	e7e4      	b.n	800632a <__pow5mult+0x6a>
 8006360:	4638      	mov	r0, r7
 8006362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006366:	bf00      	nop
 8006368:	08007060 	.word	0x08007060
 800636c:	08006e91 	.word	0x08006e91
 8006370:	08006f11 	.word	0x08006f11

08006374 <__lshift>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	460c      	mov	r4, r1
 800637a:	6849      	ldr	r1, [r1, #4]
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006382:	68a3      	ldr	r3, [r4, #8]
 8006384:	4607      	mov	r7, r0
 8006386:	4691      	mov	r9, r2
 8006388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800638c:	f108 0601 	add.w	r6, r8, #1
 8006390:	42b3      	cmp	r3, r6
 8006392:	db0b      	blt.n	80063ac <__lshift+0x38>
 8006394:	4638      	mov	r0, r7
 8006396:	f7ff fddd 	bl	8005f54 <_Balloc>
 800639a:	4605      	mov	r5, r0
 800639c:	b948      	cbnz	r0, 80063b2 <__lshift+0x3e>
 800639e:	4602      	mov	r2, r0
 80063a0:	4b28      	ldr	r3, [pc, #160]	; (8006444 <__lshift+0xd0>)
 80063a2:	4829      	ldr	r0, [pc, #164]	; (8006448 <__lshift+0xd4>)
 80063a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80063a8:	f000 fa1c 	bl	80067e4 <__assert_func>
 80063ac:	3101      	adds	r1, #1
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	e7ee      	b.n	8006390 <__lshift+0x1c>
 80063b2:	2300      	movs	r3, #0
 80063b4:	f100 0114 	add.w	r1, r0, #20
 80063b8:	f100 0210 	add.w	r2, r0, #16
 80063bc:	4618      	mov	r0, r3
 80063be:	4553      	cmp	r3, sl
 80063c0:	db33      	blt.n	800642a <__lshift+0xb6>
 80063c2:	6920      	ldr	r0, [r4, #16]
 80063c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063c8:	f104 0314 	add.w	r3, r4, #20
 80063cc:	f019 091f 	ands.w	r9, r9, #31
 80063d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063d8:	d02b      	beq.n	8006432 <__lshift+0xbe>
 80063da:	f1c9 0e20 	rsb	lr, r9, #32
 80063de:	468a      	mov	sl, r1
 80063e0:	2200      	movs	r2, #0
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	fa00 f009 	lsl.w	r0, r0, r9
 80063e8:	4310      	orrs	r0, r2
 80063ea:	f84a 0b04 	str.w	r0, [sl], #4
 80063ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f2:	459c      	cmp	ip, r3
 80063f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80063f8:	d8f3      	bhi.n	80063e2 <__lshift+0x6e>
 80063fa:	ebac 0304 	sub.w	r3, ip, r4
 80063fe:	3b15      	subs	r3, #21
 8006400:	f023 0303 	bic.w	r3, r3, #3
 8006404:	3304      	adds	r3, #4
 8006406:	f104 0015 	add.w	r0, r4, #21
 800640a:	4584      	cmp	ip, r0
 800640c:	bf38      	it	cc
 800640e:	2304      	movcc	r3, #4
 8006410:	50ca      	str	r2, [r1, r3]
 8006412:	b10a      	cbz	r2, 8006418 <__lshift+0xa4>
 8006414:	f108 0602 	add.w	r6, r8, #2
 8006418:	3e01      	subs	r6, #1
 800641a:	4638      	mov	r0, r7
 800641c:	612e      	str	r6, [r5, #16]
 800641e:	4621      	mov	r1, r4
 8006420:	f7ff fdd8 	bl	8005fd4 <_Bfree>
 8006424:	4628      	mov	r0, r5
 8006426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642a:	f842 0f04 	str.w	r0, [r2, #4]!
 800642e:	3301      	adds	r3, #1
 8006430:	e7c5      	b.n	80063be <__lshift+0x4a>
 8006432:	3904      	subs	r1, #4
 8006434:	f853 2b04 	ldr.w	r2, [r3], #4
 8006438:	f841 2f04 	str.w	r2, [r1, #4]!
 800643c:	459c      	cmp	ip, r3
 800643e:	d8f9      	bhi.n	8006434 <__lshift+0xc0>
 8006440:	e7ea      	b.n	8006418 <__lshift+0xa4>
 8006442:	bf00      	nop
 8006444:	08006f00 	.word	0x08006f00
 8006448:	08006f11 	.word	0x08006f11

0800644c <__mcmp>:
 800644c:	b530      	push	{r4, r5, lr}
 800644e:	6902      	ldr	r2, [r0, #16]
 8006450:	690c      	ldr	r4, [r1, #16]
 8006452:	1b12      	subs	r2, r2, r4
 8006454:	d10e      	bne.n	8006474 <__mcmp+0x28>
 8006456:	f100 0314 	add.w	r3, r0, #20
 800645a:	3114      	adds	r1, #20
 800645c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006460:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006464:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006468:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800646c:	42a5      	cmp	r5, r4
 800646e:	d003      	beq.n	8006478 <__mcmp+0x2c>
 8006470:	d305      	bcc.n	800647e <__mcmp+0x32>
 8006472:	2201      	movs	r2, #1
 8006474:	4610      	mov	r0, r2
 8006476:	bd30      	pop	{r4, r5, pc}
 8006478:	4283      	cmp	r3, r0
 800647a:	d3f3      	bcc.n	8006464 <__mcmp+0x18>
 800647c:	e7fa      	b.n	8006474 <__mcmp+0x28>
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	e7f7      	b.n	8006474 <__mcmp+0x28>

08006484 <__mdiff>:
 8006484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	460c      	mov	r4, r1
 800648a:	4606      	mov	r6, r0
 800648c:	4611      	mov	r1, r2
 800648e:	4620      	mov	r0, r4
 8006490:	4690      	mov	r8, r2
 8006492:	f7ff ffdb 	bl	800644c <__mcmp>
 8006496:	1e05      	subs	r5, r0, #0
 8006498:	d110      	bne.n	80064bc <__mdiff+0x38>
 800649a:	4629      	mov	r1, r5
 800649c:	4630      	mov	r0, r6
 800649e:	f7ff fd59 	bl	8005f54 <_Balloc>
 80064a2:	b930      	cbnz	r0, 80064b2 <__mdiff+0x2e>
 80064a4:	4b3a      	ldr	r3, [pc, #232]	; (8006590 <__mdiff+0x10c>)
 80064a6:	4602      	mov	r2, r0
 80064a8:	f240 2137 	movw	r1, #567	; 0x237
 80064ac:	4839      	ldr	r0, [pc, #228]	; (8006594 <__mdiff+0x110>)
 80064ae:	f000 f999 	bl	80067e4 <__assert_func>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064bc:	bfa4      	itt	ge
 80064be:	4643      	movge	r3, r8
 80064c0:	46a0      	movge	r8, r4
 80064c2:	4630      	mov	r0, r6
 80064c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064c8:	bfa6      	itte	ge
 80064ca:	461c      	movge	r4, r3
 80064cc:	2500      	movge	r5, #0
 80064ce:	2501      	movlt	r5, #1
 80064d0:	f7ff fd40 	bl	8005f54 <_Balloc>
 80064d4:	b920      	cbnz	r0, 80064e0 <__mdiff+0x5c>
 80064d6:	4b2e      	ldr	r3, [pc, #184]	; (8006590 <__mdiff+0x10c>)
 80064d8:	4602      	mov	r2, r0
 80064da:	f240 2145 	movw	r1, #581	; 0x245
 80064de:	e7e5      	b.n	80064ac <__mdiff+0x28>
 80064e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064e4:	6926      	ldr	r6, [r4, #16]
 80064e6:	60c5      	str	r5, [r0, #12]
 80064e8:	f104 0914 	add.w	r9, r4, #20
 80064ec:	f108 0514 	add.w	r5, r8, #20
 80064f0:	f100 0e14 	add.w	lr, r0, #20
 80064f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80064f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064fc:	f108 0210 	add.w	r2, r8, #16
 8006500:	46f2      	mov	sl, lr
 8006502:	2100      	movs	r1, #0
 8006504:	f859 3b04 	ldr.w	r3, [r9], #4
 8006508:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800650c:	fa11 f88b 	uxtah	r8, r1, fp
 8006510:	b299      	uxth	r1, r3
 8006512:	0c1b      	lsrs	r3, r3, #16
 8006514:	eba8 0801 	sub.w	r8, r8, r1
 8006518:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800651c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006520:	fa1f f888 	uxth.w	r8, r8
 8006524:	1419      	asrs	r1, r3, #16
 8006526:	454e      	cmp	r6, r9
 8006528:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800652c:	f84a 3b04 	str.w	r3, [sl], #4
 8006530:	d8e8      	bhi.n	8006504 <__mdiff+0x80>
 8006532:	1b33      	subs	r3, r6, r4
 8006534:	3b15      	subs	r3, #21
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	3304      	adds	r3, #4
 800653c:	3415      	adds	r4, #21
 800653e:	42a6      	cmp	r6, r4
 8006540:	bf38      	it	cc
 8006542:	2304      	movcc	r3, #4
 8006544:	441d      	add	r5, r3
 8006546:	4473      	add	r3, lr
 8006548:	469e      	mov	lr, r3
 800654a:	462e      	mov	r6, r5
 800654c:	4566      	cmp	r6, ip
 800654e:	d30e      	bcc.n	800656e <__mdiff+0xea>
 8006550:	f10c 0203 	add.w	r2, ip, #3
 8006554:	1b52      	subs	r2, r2, r5
 8006556:	f022 0203 	bic.w	r2, r2, #3
 800655a:	3d03      	subs	r5, #3
 800655c:	45ac      	cmp	ip, r5
 800655e:	bf38      	it	cc
 8006560:	2200      	movcc	r2, #0
 8006562:	4413      	add	r3, r2
 8006564:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006568:	b17a      	cbz	r2, 800658a <__mdiff+0x106>
 800656a:	6107      	str	r7, [r0, #16]
 800656c:	e7a4      	b.n	80064b8 <__mdiff+0x34>
 800656e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006572:	fa11 f288 	uxtah	r2, r1, r8
 8006576:	1414      	asrs	r4, r2, #16
 8006578:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800657c:	b292      	uxth	r2, r2
 800657e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006582:	f84e 2b04 	str.w	r2, [lr], #4
 8006586:	1421      	asrs	r1, r4, #16
 8006588:	e7e0      	b.n	800654c <__mdiff+0xc8>
 800658a:	3f01      	subs	r7, #1
 800658c:	e7ea      	b.n	8006564 <__mdiff+0xe0>
 800658e:	bf00      	nop
 8006590:	08006f00 	.word	0x08006f00
 8006594:	08006f11 	.word	0x08006f11

08006598 <__d2b>:
 8006598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800659c:	460f      	mov	r7, r1
 800659e:	2101      	movs	r1, #1
 80065a0:	ec59 8b10 	vmov	r8, r9, d0
 80065a4:	4616      	mov	r6, r2
 80065a6:	f7ff fcd5 	bl	8005f54 <_Balloc>
 80065aa:	4604      	mov	r4, r0
 80065ac:	b930      	cbnz	r0, 80065bc <__d2b+0x24>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b24      	ldr	r3, [pc, #144]	; (8006644 <__d2b+0xac>)
 80065b2:	4825      	ldr	r0, [pc, #148]	; (8006648 <__d2b+0xb0>)
 80065b4:	f240 310f 	movw	r1, #783	; 0x30f
 80065b8:	f000 f914 	bl	80067e4 <__assert_func>
 80065bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065c4:	bb2d      	cbnz	r5, 8006612 <__d2b+0x7a>
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	f1b8 0300 	subs.w	r3, r8, #0
 80065cc:	d026      	beq.n	800661c <__d2b+0x84>
 80065ce:	4668      	mov	r0, sp
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	f7ff fd87 	bl	80060e4 <__lo0bits>
 80065d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065da:	b1e8      	cbz	r0, 8006618 <__d2b+0x80>
 80065dc:	f1c0 0320 	rsb	r3, r0, #32
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	430b      	orrs	r3, r1
 80065e6:	40c2      	lsrs	r2, r0
 80065e8:	6163      	str	r3, [r4, #20]
 80065ea:	9201      	str	r2, [sp, #4]
 80065ec:	9b01      	ldr	r3, [sp, #4]
 80065ee:	61a3      	str	r3, [r4, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bf14      	ite	ne
 80065f4:	2202      	movne	r2, #2
 80065f6:	2201      	moveq	r2, #1
 80065f8:	6122      	str	r2, [r4, #16]
 80065fa:	b1bd      	cbz	r5, 800662c <__d2b+0x94>
 80065fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006600:	4405      	add	r5, r0
 8006602:	603d      	str	r5, [r7, #0]
 8006604:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006608:	6030      	str	r0, [r6, #0]
 800660a:	4620      	mov	r0, r4
 800660c:	b003      	add	sp, #12
 800660e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006616:	e7d6      	b.n	80065c6 <__d2b+0x2e>
 8006618:	6161      	str	r1, [r4, #20]
 800661a:	e7e7      	b.n	80065ec <__d2b+0x54>
 800661c:	a801      	add	r0, sp, #4
 800661e:	f7ff fd61 	bl	80060e4 <__lo0bits>
 8006622:	9b01      	ldr	r3, [sp, #4]
 8006624:	6163      	str	r3, [r4, #20]
 8006626:	3020      	adds	r0, #32
 8006628:	2201      	movs	r2, #1
 800662a:	e7e5      	b.n	80065f8 <__d2b+0x60>
 800662c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006630:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006634:	6038      	str	r0, [r7, #0]
 8006636:	6918      	ldr	r0, [r3, #16]
 8006638:	f7ff fd34 	bl	80060a4 <__hi0bits>
 800663c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006640:	e7e2      	b.n	8006608 <__d2b+0x70>
 8006642:	bf00      	nop
 8006644:	08006f00 	.word	0x08006f00
 8006648:	08006f11 	.word	0x08006f11

0800664c <__sflush_r>:
 800664c:	898a      	ldrh	r2, [r1, #12]
 800664e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006652:	4605      	mov	r5, r0
 8006654:	0710      	lsls	r0, r2, #28
 8006656:	460c      	mov	r4, r1
 8006658:	d458      	bmi.n	800670c <__sflush_r+0xc0>
 800665a:	684b      	ldr	r3, [r1, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	dc05      	bgt.n	800666c <__sflush_r+0x20>
 8006660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	dc02      	bgt.n	800666c <__sflush_r+0x20>
 8006666:	2000      	movs	r0, #0
 8006668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800666c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800666e:	2e00      	cmp	r6, #0
 8006670:	d0f9      	beq.n	8006666 <__sflush_r+0x1a>
 8006672:	2300      	movs	r3, #0
 8006674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006678:	682f      	ldr	r7, [r5, #0]
 800667a:	6a21      	ldr	r1, [r4, #32]
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	d032      	beq.n	80066e6 <__sflush_r+0x9a>
 8006680:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	075a      	lsls	r2, r3, #29
 8006686:	d505      	bpl.n	8006694 <__sflush_r+0x48>
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	1ac0      	subs	r0, r0, r3
 800668c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800668e:	b10b      	cbz	r3, 8006694 <__sflush_r+0x48>
 8006690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006692:	1ac0      	subs	r0, r0, r3
 8006694:	2300      	movs	r3, #0
 8006696:	4602      	mov	r2, r0
 8006698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800669a:	6a21      	ldr	r1, [r4, #32]
 800669c:	4628      	mov	r0, r5
 800669e:	47b0      	blx	r6
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	d106      	bne.n	80066b4 <__sflush_r+0x68>
 80066a6:	6829      	ldr	r1, [r5, #0]
 80066a8:	291d      	cmp	r1, #29
 80066aa:	d82b      	bhi.n	8006704 <__sflush_r+0xb8>
 80066ac:	4a29      	ldr	r2, [pc, #164]	; (8006754 <__sflush_r+0x108>)
 80066ae:	410a      	asrs	r2, r1
 80066b0:	07d6      	lsls	r6, r2, #31
 80066b2:	d427      	bmi.n	8006704 <__sflush_r+0xb8>
 80066b4:	2200      	movs	r2, #0
 80066b6:	6062      	str	r2, [r4, #4]
 80066b8:	04d9      	lsls	r1, r3, #19
 80066ba:	6922      	ldr	r2, [r4, #16]
 80066bc:	6022      	str	r2, [r4, #0]
 80066be:	d504      	bpl.n	80066ca <__sflush_r+0x7e>
 80066c0:	1c42      	adds	r2, r0, #1
 80066c2:	d101      	bne.n	80066c8 <__sflush_r+0x7c>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b903      	cbnz	r3, 80066ca <__sflush_r+0x7e>
 80066c8:	6560      	str	r0, [r4, #84]	; 0x54
 80066ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066cc:	602f      	str	r7, [r5, #0]
 80066ce:	2900      	cmp	r1, #0
 80066d0:	d0c9      	beq.n	8006666 <__sflush_r+0x1a>
 80066d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066d6:	4299      	cmp	r1, r3
 80066d8:	d002      	beq.n	80066e0 <__sflush_r+0x94>
 80066da:	4628      	mov	r0, r5
 80066dc:	f7ff fb3a 	bl	8005d54 <_free_r>
 80066e0:	2000      	movs	r0, #0
 80066e2:	6360      	str	r0, [r4, #52]	; 0x34
 80066e4:	e7c0      	b.n	8006668 <__sflush_r+0x1c>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b0      	blx	r6
 80066ec:	1c41      	adds	r1, r0, #1
 80066ee:	d1c8      	bne.n	8006682 <__sflush_r+0x36>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0c5      	beq.n	8006682 <__sflush_r+0x36>
 80066f6:	2b1d      	cmp	r3, #29
 80066f8:	d001      	beq.n	80066fe <__sflush_r+0xb2>
 80066fa:	2b16      	cmp	r3, #22
 80066fc:	d101      	bne.n	8006702 <__sflush_r+0xb6>
 80066fe:	602f      	str	r7, [r5, #0]
 8006700:	e7b1      	b.n	8006666 <__sflush_r+0x1a>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	e7ad      	b.n	8006668 <__sflush_r+0x1c>
 800670c:	690f      	ldr	r7, [r1, #16]
 800670e:	2f00      	cmp	r7, #0
 8006710:	d0a9      	beq.n	8006666 <__sflush_r+0x1a>
 8006712:	0793      	lsls	r3, r2, #30
 8006714:	680e      	ldr	r6, [r1, #0]
 8006716:	bf08      	it	eq
 8006718:	694b      	ldreq	r3, [r1, #20]
 800671a:	600f      	str	r7, [r1, #0]
 800671c:	bf18      	it	ne
 800671e:	2300      	movne	r3, #0
 8006720:	eba6 0807 	sub.w	r8, r6, r7
 8006724:	608b      	str	r3, [r1, #8]
 8006726:	f1b8 0f00 	cmp.w	r8, #0
 800672a:	dd9c      	ble.n	8006666 <__sflush_r+0x1a>
 800672c:	6a21      	ldr	r1, [r4, #32]
 800672e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006730:	4643      	mov	r3, r8
 8006732:	463a      	mov	r2, r7
 8006734:	4628      	mov	r0, r5
 8006736:	47b0      	blx	r6
 8006738:	2800      	cmp	r0, #0
 800673a:	dc06      	bgt.n	800674a <__sflush_r+0xfe>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	e78e      	b.n	8006668 <__sflush_r+0x1c>
 800674a:	4407      	add	r7, r0
 800674c:	eba8 0800 	sub.w	r8, r8, r0
 8006750:	e7e9      	b.n	8006726 <__sflush_r+0xda>
 8006752:	bf00      	nop
 8006754:	dfbffffe 	.word	0xdfbffffe

08006758 <_fflush_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	690b      	ldr	r3, [r1, #16]
 800675c:	4605      	mov	r5, r0
 800675e:	460c      	mov	r4, r1
 8006760:	b913      	cbnz	r3, 8006768 <_fflush_r+0x10>
 8006762:	2500      	movs	r5, #0
 8006764:	4628      	mov	r0, r5
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	b118      	cbz	r0, 8006772 <_fflush_r+0x1a>
 800676a:	6a03      	ldr	r3, [r0, #32]
 800676c:	b90b      	cbnz	r3, 8006772 <_fflush_r+0x1a>
 800676e:	f7fe fb7b 	bl	8004e68 <__sinit>
 8006772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f3      	beq.n	8006762 <_fflush_r+0xa>
 800677a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800677c:	07d0      	lsls	r0, r2, #31
 800677e:	d404      	bmi.n	800678a <_fflush_r+0x32>
 8006780:	0599      	lsls	r1, r3, #22
 8006782:	d402      	bmi.n	800678a <_fflush_r+0x32>
 8006784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006786:	f7fe fc66 	bl	8005056 <__retarget_lock_acquire_recursive>
 800678a:	4628      	mov	r0, r5
 800678c:	4621      	mov	r1, r4
 800678e:	f7ff ff5d 	bl	800664c <__sflush_r>
 8006792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006794:	07da      	lsls	r2, r3, #31
 8006796:	4605      	mov	r5, r0
 8006798:	d4e4      	bmi.n	8006764 <_fflush_r+0xc>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	059b      	lsls	r3, r3, #22
 800679e:	d4e1      	bmi.n	8006764 <_fflush_r+0xc>
 80067a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a2:	f7fe fc59 	bl	8005058 <__retarget_lock_release_recursive>
 80067a6:	e7dd      	b.n	8006764 <_fflush_r+0xc>

080067a8 <_sbrk_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d06      	ldr	r5, [pc, #24]	; (80067c4 <_sbrk_r+0x1c>)
 80067ac:	2300      	movs	r3, #0
 80067ae:	4604      	mov	r4, r0
 80067b0:	4608      	mov	r0, r1
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	f7fa fd8c 	bl	80012d0 <_sbrk>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d102      	bne.n	80067c2 <_sbrk_r+0x1a>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	b103      	cbz	r3, 80067c2 <_sbrk_r+0x1a>
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	20000428 	.word	0x20000428

080067c8 <memcpy>:
 80067c8:	440a      	add	r2, r1
 80067ca:	4291      	cmp	r1, r2
 80067cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80067d0:	d100      	bne.n	80067d4 <memcpy+0xc>
 80067d2:	4770      	bx	lr
 80067d4:	b510      	push	{r4, lr}
 80067d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067de:	4291      	cmp	r1, r2
 80067e0:	d1f9      	bne.n	80067d6 <memcpy+0xe>
 80067e2:	bd10      	pop	{r4, pc}

080067e4 <__assert_func>:
 80067e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067e6:	4614      	mov	r4, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <__assert_func+0x2c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4605      	mov	r5, r0
 80067f0:	68d8      	ldr	r0, [r3, #12]
 80067f2:	b14c      	cbz	r4, 8006808 <__assert_func+0x24>
 80067f4:	4b07      	ldr	r3, [pc, #28]	; (8006814 <__assert_func+0x30>)
 80067f6:	9100      	str	r1, [sp, #0]
 80067f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067fc:	4906      	ldr	r1, [pc, #24]	; (8006818 <__assert_func+0x34>)
 80067fe:	462b      	mov	r3, r5
 8006800:	f000 f844 	bl	800688c <fiprintf>
 8006804:	f000 f854 	bl	80068b0 <abort>
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <__assert_func+0x38>)
 800680a:	461c      	mov	r4, r3
 800680c:	e7f3      	b.n	80067f6 <__assert_func+0x12>
 800680e:	bf00      	nop
 8006810:	20000068 	.word	0x20000068
 8006814:	08007076 	.word	0x08007076
 8006818:	08007083 	.word	0x08007083
 800681c:	080070b1 	.word	0x080070b1

08006820 <_calloc_r>:
 8006820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006822:	fba1 2402 	umull	r2, r4, r1, r2
 8006826:	b94c      	cbnz	r4, 800683c <_calloc_r+0x1c>
 8006828:	4611      	mov	r1, r2
 800682a:	9201      	str	r2, [sp, #4]
 800682c:	f7ff fb06 	bl	8005e3c <_malloc_r>
 8006830:	9a01      	ldr	r2, [sp, #4]
 8006832:	4605      	mov	r5, r0
 8006834:	b930      	cbnz	r0, 8006844 <_calloc_r+0x24>
 8006836:	4628      	mov	r0, r5
 8006838:	b003      	add	sp, #12
 800683a:	bd30      	pop	{r4, r5, pc}
 800683c:	220c      	movs	r2, #12
 800683e:	6002      	str	r2, [r0, #0]
 8006840:	2500      	movs	r5, #0
 8006842:	e7f8      	b.n	8006836 <_calloc_r+0x16>
 8006844:	4621      	mov	r1, r4
 8006846:	f7fe fb88 	bl	8004f5a <memset>
 800684a:	e7f4      	b.n	8006836 <_calloc_r+0x16>

0800684c <__ascii_mbtowc>:
 800684c:	b082      	sub	sp, #8
 800684e:	b901      	cbnz	r1, 8006852 <__ascii_mbtowc+0x6>
 8006850:	a901      	add	r1, sp, #4
 8006852:	b142      	cbz	r2, 8006866 <__ascii_mbtowc+0x1a>
 8006854:	b14b      	cbz	r3, 800686a <__ascii_mbtowc+0x1e>
 8006856:	7813      	ldrb	r3, [r2, #0]
 8006858:	600b      	str	r3, [r1, #0]
 800685a:	7812      	ldrb	r2, [r2, #0]
 800685c:	1e10      	subs	r0, r2, #0
 800685e:	bf18      	it	ne
 8006860:	2001      	movne	r0, #1
 8006862:	b002      	add	sp, #8
 8006864:	4770      	bx	lr
 8006866:	4610      	mov	r0, r2
 8006868:	e7fb      	b.n	8006862 <__ascii_mbtowc+0x16>
 800686a:	f06f 0001 	mvn.w	r0, #1
 800686e:	e7f8      	b.n	8006862 <__ascii_mbtowc+0x16>

08006870 <__ascii_wctomb>:
 8006870:	b149      	cbz	r1, 8006886 <__ascii_wctomb+0x16>
 8006872:	2aff      	cmp	r2, #255	; 0xff
 8006874:	bf85      	ittet	hi
 8006876:	238a      	movhi	r3, #138	; 0x8a
 8006878:	6003      	strhi	r3, [r0, #0]
 800687a:	700a      	strbls	r2, [r1, #0]
 800687c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006880:	bf98      	it	ls
 8006882:	2001      	movls	r0, #1
 8006884:	4770      	bx	lr
 8006886:	4608      	mov	r0, r1
 8006888:	4770      	bx	lr
	...

0800688c <fiprintf>:
 800688c:	b40e      	push	{r1, r2, r3}
 800688e:	b503      	push	{r0, r1, lr}
 8006890:	4601      	mov	r1, r0
 8006892:	ab03      	add	r3, sp, #12
 8006894:	4805      	ldr	r0, [pc, #20]	; (80068ac <fiprintf+0x20>)
 8006896:	f853 2b04 	ldr.w	r2, [r3], #4
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	f000 f837 	bl	8006910 <_vfiprintf_r>
 80068a2:	b002      	add	sp, #8
 80068a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a8:	b003      	add	sp, #12
 80068aa:	4770      	bx	lr
 80068ac:	20000068 	.word	0x20000068

080068b0 <abort>:
 80068b0:	b508      	push	{r3, lr}
 80068b2:	2006      	movs	r0, #6
 80068b4:	f000 fa04 	bl	8006cc0 <raise>
 80068b8:	2001      	movs	r0, #1
 80068ba:	f7fa fc91 	bl	80011e0 <_exit>

080068be <__sfputc_r>:
 80068be:	6893      	ldr	r3, [r2, #8]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	b410      	push	{r4}
 80068c6:	6093      	str	r3, [r2, #8]
 80068c8:	da08      	bge.n	80068dc <__sfputc_r+0x1e>
 80068ca:	6994      	ldr	r4, [r2, #24]
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	db01      	blt.n	80068d4 <__sfputc_r+0x16>
 80068d0:	290a      	cmp	r1, #10
 80068d2:	d103      	bne.n	80068dc <__sfputc_r+0x1e>
 80068d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068d8:	f000 b934 	b.w	8006b44 <__swbuf_r>
 80068dc:	6813      	ldr	r3, [r2, #0]
 80068de:	1c58      	adds	r0, r3, #1
 80068e0:	6010      	str	r0, [r2, #0]
 80068e2:	7019      	strb	r1, [r3, #0]
 80068e4:	4608      	mov	r0, r1
 80068e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <__sfputs_r>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	4606      	mov	r6, r0
 80068f0:	460f      	mov	r7, r1
 80068f2:	4614      	mov	r4, r2
 80068f4:	18d5      	adds	r5, r2, r3
 80068f6:	42ac      	cmp	r4, r5
 80068f8:	d101      	bne.n	80068fe <__sfputs_r+0x12>
 80068fa:	2000      	movs	r0, #0
 80068fc:	e007      	b.n	800690e <__sfputs_r+0x22>
 80068fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006902:	463a      	mov	r2, r7
 8006904:	4630      	mov	r0, r6
 8006906:	f7ff ffda 	bl	80068be <__sfputc_r>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d1f3      	bne.n	80068f6 <__sfputs_r+0xa>
 800690e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006910 <_vfiprintf_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	460d      	mov	r5, r1
 8006916:	b09d      	sub	sp, #116	; 0x74
 8006918:	4614      	mov	r4, r2
 800691a:	4698      	mov	r8, r3
 800691c:	4606      	mov	r6, r0
 800691e:	b118      	cbz	r0, 8006928 <_vfiprintf_r+0x18>
 8006920:	6a03      	ldr	r3, [r0, #32]
 8006922:	b90b      	cbnz	r3, 8006928 <_vfiprintf_r+0x18>
 8006924:	f7fe faa0 	bl	8004e68 <__sinit>
 8006928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800692a:	07d9      	lsls	r1, r3, #31
 800692c:	d405      	bmi.n	800693a <_vfiprintf_r+0x2a>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	059a      	lsls	r2, r3, #22
 8006932:	d402      	bmi.n	800693a <_vfiprintf_r+0x2a>
 8006934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006936:	f7fe fb8e 	bl	8005056 <__retarget_lock_acquire_recursive>
 800693a:	89ab      	ldrh	r3, [r5, #12]
 800693c:	071b      	lsls	r3, r3, #28
 800693e:	d501      	bpl.n	8006944 <_vfiprintf_r+0x34>
 8006940:	692b      	ldr	r3, [r5, #16]
 8006942:	b99b      	cbnz	r3, 800696c <_vfiprintf_r+0x5c>
 8006944:	4629      	mov	r1, r5
 8006946:	4630      	mov	r0, r6
 8006948:	f000 f93a 	bl	8006bc0 <__swsetup_r>
 800694c:	b170      	cbz	r0, 800696c <_vfiprintf_r+0x5c>
 800694e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006950:	07dc      	lsls	r4, r3, #31
 8006952:	d504      	bpl.n	800695e <_vfiprintf_r+0x4e>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b01d      	add	sp, #116	; 0x74
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	89ab      	ldrh	r3, [r5, #12]
 8006960:	0598      	lsls	r0, r3, #22
 8006962:	d4f7      	bmi.n	8006954 <_vfiprintf_r+0x44>
 8006964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006966:	f7fe fb77 	bl	8005058 <__retarget_lock_release_recursive>
 800696a:	e7f3      	b.n	8006954 <_vfiprintf_r+0x44>
 800696c:	2300      	movs	r3, #0
 800696e:	9309      	str	r3, [sp, #36]	; 0x24
 8006970:	2320      	movs	r3, #32
 8006972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006976:	f8cd 800c 	str.w	r8, [sp, #12]
 800697a:	2330      	movs	r3, #48	; 0x30
 800697c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006b30 <_vfiprintf_r+0x220>
 8006980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006984:	f04f 0901 	mov.w	r9, #1
 8006988:	4623      	mov	r3, r4
 800698a:	469a      	mov	sl, r3
 800698c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006990:	b10a      	cbz	r2, 8006996 <_vfiprintf_r+0x86>
 8006992:	2a25      	cmp	r2, #37	; 0x25
 8006994:	d1f9      	bne.n	800698a <_vfiprintf_r+0x7a>
 8006996:	ebba 0b04 	subs.w	fp, sl, r4
 800699a:	d00b      	beq.n	80069b4 <_vfiprintf_r+0xa4>
 800699c:	465b      	mov	r3, fp
 800699e:	4622      	mov	r2, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff ffa2 	bl	80068ec <__sfputs_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	f000 80a9 	beq.w	8006b00 <_vfiprintf_r+0x1f0>
 80069ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b0:	445a      	add	r2, fp
 80069b2:	9209      	str	r2, [sp, #36]	; 0x24
 80069b4:	f89a 3000 	ldrb.w	r3, [sl]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80a1 	beq.w	8006b00 <_vfiprintf_r+0x1f0>
 80069be:	2300      	movs	r3, #0
 80069c0:	f04f 32ff 	mov.w	r2, #4294967295
 80069c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c8:	f10a 0a01 	add.w	sl, sl, #1
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069d4:	931a      	str	r3, [sp, #104]	; 0x68
 80069d6:	4654      	mov	r4, sl
 80069d8:	2205      	movs	r2, #5
 80069da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069de:	4854      	ldr	r0, [pc, #336]	; (8006b30 <_vfiprintf_r+0x220>)
 80069e0:	f7f9 fbf6 	bl	80001d0 <memchr>
 80069e4:	9a04      	ldr	r2, [sp, #16]
 80069e6:	b9d8      	cbnz	r0, 8006a20 <_vfiprintf_r+0x110>
 80069e8:	06d1      	lsls	r1, r2, #27
 80069ea:	bf44      	itt	mi
 80069ec:	2320      	movmi	r3, #32
 80069ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f2:	0713      	lsls	r3, r2, #28
 80069f4:	bf44      	itt	mi
 80069f6:	232b      	movmi	r3, #43	; 0x2b
 80069f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006a00:	2b2a      	cmp	r3, #42	; 0x2a
 8006a02:	d015      	beq.n	8006a30 <_vfiprintf_r+0x120>
 8006a04:	9a07      	ldr	r2, [sp, #28]
 8006a06:	4654      	mov	r4, sl
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f04f 0c0a 	mov.w	ip, #10
 8006a0e:	4621      	mov	r1, r4
 8006a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a14:	3b30      	subs	r3, #48	; 0x30
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	d94d      	bls.n	8006ab6 <_vfiprintf_r+0x1a6>
 8006a1a:	b1b0      	cbz	r0, 8006a4a <_vfiprintf_r+0x13a>
 8006a1c:	9207      	str	r2, [sp, #28]
 8006a1e:	e014      	b.n	8006a4a <_vfiprintf_r+0x13a>
 8006a20:	eba0 0308 	sub.w	r3, r0, r8
 8006a24:	fa09 f303 	lsl.w	r3, r9, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	46a2      	mov	sl, r4
 8006a2e:	e7d2      	b.n	80069d6 <_vfiprintf_r+0xc6>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	1d19      	adds	r1, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	9103      	str	r1, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfbb      	ittet	lt
 8006a3c:	425b      	neglt	r3, r3
 8006a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a42:	9307      	strge	r3, [sp, #28]
 8006a44:	9307      	strlt	r3, [sp, #28]
 8006a46:	bfb8      	it	lt
 8006a48:	9204      	strlt	r2, [sp, #16]
 8006a4a:	7823      	ldrb	r3, [r4, #0]
 8006a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a4e:	d10c      	bne.n	8006a6a <_vfiprintf_r+0x15a>
 8006a50:	7863      	ldrb	r3, [r4, #1]
 8006a52:	2b2a      	cmp	r3, #42	; 0x2a
 8006a54:	d134      	bne.n	8006ac0 <_vfiprintf_r+0x1b0>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	1d1a      	adds	r2, r3, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	9203      	str	r2, [sp, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfb8      	it	lt
 8006a62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a66:	3402      	adds	r4, #2
 8006a68:	9305      	str	r3, [sp, #20]
 8006a6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006b40 <_vfiprintf_r+0x230>
 8006a6e:	7821      	ldrb	r1, [r4, #0]
 8006a70:	2203      	movs	r2, #3
 8006a72:	4650      	mov	r0, sl
 8006a74:	f7f9 fbac 	bl	80001d0 <memchr>
 8006a78:	b138      	cbz	r0, 8006a8a <_vfiprintf_r+0x17a>
 8006a7a:	9b04      	ldr	r3, [sp, #16]
 8006a7c:	eba0 000a 	sub.w	r0, r0, sl
 8006a80:	2240      	movs	r2, #64	; 0x40
 8006a82:	4082      	lsls	r2, r0
 8006a84:	4313      	orrs	r3, r2
 8006a86:	3401      	adds	r4, #1
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8e:	4829      	ldr	r0, [pc, #164]	; (8006b34 <_vfiprintf_r+0x224>)
 8006a90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a94:	2206      	movs	r2, #6
 8006a96:	f7f9 fb9b 	bl	80001d0 <memchr>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d03f      	beq.n	8006b1e <_vfiprintf_r+0x20e>
 8006a9e:	4b26      	ldr	r3, [pc, #152]	; (8006b38 <_vfiprintf_r+0x228>)
 8006aa0:	bb1b      	cbnz	r3, 8006aea <_vfiprintf_r+0x1da>
 8006aa2:	9b03      	ldr	r3, [sp, #12]
 8006aa4:	3307      	adds	r3, #7
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	3308      	adds	r3, #8
 8006aac:	9303      	str	r3, [sp, #12]
 8006aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab0:	443b      	add	r3, r7
 8006ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab4:	e768      	b.n	8006988 <_vfiprintf_r+0x78>
 8006ab6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aba:	460c      	mov	r4, r1
 8006abc:	2001      	movs	r0, #1
 8006abe:	e7a6      	b.n	8006a0e <_vfiprintf_r+0xfe>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	3401      	adds	r4, #1
 8006ac4:	9305      	str	r3, [sp, #20]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	f04f 0c0a 	mov.w	ip, #10
 8006acc:	4620      	mov	r0, r4
 8006ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad2:	3a30      	subs	r2, #48	; 0x30
 8006ad4:	2a09      	cmp	r2, #9
 8006ad6:	d903      	bls.n	8006ae0 <_vfiprintf_r+0x1d0>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0c6      	beq.n	8006a6a <_vfiprintf_r+0x15a>
 8006adc:	9105      	str	r1, [sp, #20]
 8006ade:	e7c4      	b.n	8006a6a <_vfiprintf_r+0x15a>
 8006ae0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7f0      	b.n	8006acc <_vfiprintf_r+0x1bc>
 8006aea:	ab03      	add	r3, sp, #12
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	462a      	mov	r2, r5
 8006af0:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <_vfiprintf_r+0x22c>)
 8006af2:	a904      	add	r1, sp, #16
 8006af4:	4630      	mov	r0, r6
 8006af6:	f7fd fd65 	bl	80045c4 <_printf_float>
 8006afa:	4607      	mov	r7, r0
 8006afc:	1c78      	adds	r0, r7, #1
 8006afe:	d1d6      	bne.n	8006aae <_vfiprintf_r+0x19e>
 8006b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b02:	07d9      	lsls	r1, r3, #31
 8006b04:	d405      	bmi.n	8006b12 <_vfiprintf_r+0x202>
 8006b06:	89ab      	ldrh	r3, [r5, #12]
 8006b08:	059a      	lsls	r2, r3, #22
 8006b0a:	d402      	bmi.n	8006b12 <_vfiprintf_r+0x202>
 8006b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b0e:	f7fe faa3 	bl	8005058 <__retarget_lock_release_recursive>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	065b      	lsls	r3, r3, #25
 8006b16:	f53f af1d 	bmi.w	8006954 <_vfiprintf_r+0x44>
 8006b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b1c:	e71c      	b.n	8006958 <_vfiprintf_r+0x48>
 8006b1e:	ab03      	add	r3, sp, #12
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	462a      	mov	r2, r5
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <_vfiprintf_r+0x22c>)
 8006b26:	a904      	add	r1, sp, #16
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f7fd ffef 	bl	8004b0c <_printf_i>
 8006b2e:	e7e4      	b.n	8006afa <_vfiprintf_r+0x1ea>
 8006b30:	080071b3 	.word	0x080071b3
 8006b34:	080071bd 	.word	0x080071bd
 8006b38:	080045c5 	.word	0x080045c5
 8006b3c:	080068ed 	.word	0x080068ed
 8006b40:	080071b9 	.word	0x080071b9

08006b44 <__swbuf_r>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	460e      	mov	r6, r1
 8006b48:	4614      	mov	r4, r2
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	b118      	cbz	r0, 8006b56 <__swbuf_r+0x12>
 8006b4e:	6a03      	ldr	r3, [r0, #32]
 8006b50:	b90b      	cbnz	r3, 8006b56 <__swbuf_r+0x12>
 8006b52:	f7fe f989 	bl	8004e68 <__sinit>
 8006b56:	69a3      	ldr	r3, [r4, #24]
 8006b58:	60a3      	str	r3, [r4, #8]
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	071a      	lsls	r2, r3, #28
 8006b5e:	d525      	bpl.n	8006bac <__swbuf_r+0x68>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	b31b      	cbz	r3, 8006bac <__swbuf_r+0x68>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	6922      	ldr	r2, [r4, #16]
 8006b68:	1a98      	subs	r0, r3, r2
 8006b6a:	6963      	ldr	r3, [r4, #20]
 8006b6c:	b2f6      	uxtb	r6, r6
 8006b6e:	4283      	cmp	r3, r0
 8006b70:	4637      	mov	r7, r6
 8006b72:	dc04      	bgt.n	8006b7e <__swbuf_r+0x3a>
 8006b74:	4621      	mov	r1, r4
 8006b76:	4628      	mov	r0, r5
 8006b78:	f7ff fdee 	bl	8006758 <_fflush_r>
 8006b7c:	b9e0      	cbnz	r0, 8006bb8 <__swbuf_r+0x74>
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	60a3      	str	r3, [r4, #8]
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	6022      	str	r2, [r4, #0]
 8006b8a:	701e      	strb	r6, [r3, #0]
 8006b8c:	6962      	ldr	r2, [r4, #20]
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d004      	beq.n	8006b9e <__swbuf_r+0x5a>
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	07db      	lsls	r3, r3, #31
 8006b98:	d506      	bpl.n	8006ba8 <__swbuf_r+0x64>
 8006b9a:	2e0a      	cmp	r6, #10
 8006b9c:	d104      	bne.n	8006ba8 <__swbuf_r+0x64>
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f7ff fdd9 	bl	8006758 <_fflush_r>
 8006ba6:	b938      	cbnz	r0, 8006bb8 <__swbuf_r+0x74>
 8006ba8:	4638      	mov	r0, r7
 8006baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bac:	4621      	mov	r1, r4
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f000 f806 	bl	8006bc0 <__swsetup_r>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d0d5      	beq.n	8006b64 <__swbuf_r+0x20>
 8006bb8:	f04f 37ff 	mov.w	r7, #4294967295
 8006bbc:	e7f4      	b.n	8006ba8 <__swbuf_r+0x64>
	...

08006bc0 <__swsetup_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4b2a      	ldr	r3, [pc, #168]	; (8006c6c <__swsetup_r+0xac>)
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	460c      	mov	r4, r1
 8006bca:	b118      	cbz	r0, 8006bd4 <__swsetup_r+0x14>
 8006bcc:	6a03      	ldr	r3, [r0, #32]
 8006bce:	b90b      	cbnz	r3, 8006bd4 <__swsetup_r+0x14>
 8006bd0:	f7fe f94a 	bl	8004e68 <__sinit>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bda:	0718      	lsls	r0, r3, #28
 8006bdc:	d422      	bmi.n	8006c24 <__swsetup_r+0x64>
 8006bde:	06d9      	lsls	r1, r3, #27
 8006be0:	d407      	bmi.n	8006bf2 <__swsetup_r+0x32>
 8006be2:	2309      	movs	r3, #9
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	e034      	b.n	8006c5c <__swsetup_r+0x9c>
 8006bf2:	0758      	lsls	r0, r3, #29
 8006bf4:	d512      	bpl.n	8006c1c <__swsetup_r+0x5c>
 8006bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bf8:	b141      	cbz	r1, 8006c0c <__swsetup_r+0x4c>
 8006bfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	d002      	beq.n	8006c08 <__swsetup_r+0x48>
 8006c02:	4628      	mov	r0, r5
 8006c04:	f7ff f8a6 	bl	8005d54 <_free_r>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6363      	str	r3, [r4, #52]	; 0x34
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	2300      	movs	r3, #0
 8006c16:	6063      	str	r3, [r4, #4]
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	f043 0308 	orr.w	r3, r3, #8
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	b94b      	cbnz	r3, 8006c3c <__swsetup_r+0x7c>
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c32:	d003      	beq.n	8006c3c <__swsetup_r+0x7c>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 f884 	bl	8006d44 <__smakebuf_r>
 8006c3c:	89a0      	ldrh	r0, [r4, #12]
 8006c3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c42:	f010 0301 	ands.w	r3, r0, #1
 8006c46:	d00a      	beq.n	8006c5e <__swsetup_r+0x9e>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60a3      	str	r3, [r4, #8]
 8006c4c:	6963      	ldr	r3, [r4, #20]
 8006c4e:	425b      	negs	r3, r3
 8006c50:	61a3      	str	r3, [r4, #24]
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	b943      	cbnz	r3, 8006c68 <__swsetup_r+0xa8>
 8006c56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c5a:	d1c4      	bne.n	8006be6 <__swsetup_r+0x26>
 8006c5c:	bd38      	pop	{r3, r4, r5, pc}
 8006c5e:	0781      	lsls	r1, r0, #30
 8006c60:	bf58      	it	pl
 8006c62:	6963      	ldrpl	r3, [r4, #20]
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	e7f4      	b.n	8006c52 <__swsetup_r+0x92>
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e7f7      	b.n	8006c5c <__swsetup_r+0x9c>
 8006c6c:	20000068 	.word	0x20000068

08006c70 <_raise_r>:
 8006c70:	291f      	cmp	r1, #31
 8006c72:	b538      	push	{r3, r4, r5, lr}
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	d904      	bls.n	8006c84 <_raise_r+0x14>
 8006c7a:	2316      	movs	r3, #22
 8006c7c:	6003      	str	r3, [r0, #0]
 8006c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006c86:	b112      	cbz	r2, 8006c8e <_raise_r+0x1e>
 8006c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c8c:	b94b      	cbnz	r3, 8006ca2 <_raise_r+0x32>
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 f830 	bl	8006cf4 <_getpid_r>
 8006c94:	462a      	mov	r2, r5
 8006c96:	4601      	mov	r1, r0
 8006c98:	4620      	mov	r0, r4
 8006c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c9e:	f000 b817 	b.w	8006cd0 <_kill_r>
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d00a      	beq.n	8006cbc <_raise_r+0x4c>
 8006ca6:	1c59      	adds	r1, r3, #1
 8006ca8:	d103      	bne.n	8006cb2 <_raise_r+0x42>
 8006caa:	2316      	movs	r3, #22
 8006cac:	6003      	str	r3, [r0, #0]
 8006cae:	2001      	movs	r0, #1
 8006cb0:	e7e7      	b.n	8006c82 <_raise_r+0x12>
 8006cb2:	2400      	movs	r4, #0
 8006cb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cb8:	4628      	mov	r0, r5
 8006cba:	4798      	blx	r3
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e7e0      	b.n	8006c82 <_raise_r+0x12>

08006cc0 <raise>:
 8006cc0:	4b02      	ldr	r3, [pc, #8]	; (8006ccc <raise+0xc>)
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	f7ff bfd3 	b.w	8006c70 <_raise_r>
 8006cca:	bf00      	nop
 8006ccc:	20000068 	.word	0x20000068

08006cd0 <_kill_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d07      	ldr	r5, [pc, #28]	; (8006cf0 <_kill_r+0x20>)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	602b      	str	r3, [r5, #0]
 8006cde:	f7fa fa6f 	bl	80011c0 <_kill>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	d102      	bne.n	8006cec <_kill_r+0x1c>
 8006ce6:	682b      	ldr	r3, [r5, #0]
 8006ce8:	b103      	cbz	r3, 8006cec <_kill_r+0x1c>
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	bd38      	pop	{r3, r4, r5, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000428 	.word	0x20000428

08006cf4 <_getpid_r>:
 8006cf4:	f7fa ba5c 	b.w	80011b0 <_getpid>

08006cf8 <__swhatbuf_r>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d00:	2900      	cmp	r1, #0
 8006d02:	b096      	sub	sp, #88	; 0x58
 8006d04:	4615      	mov	r5, r2
 8006d06:	461e      	mov	r6, r3
 8006d08:	da0d      	bge.n	8006d26 <__swhatbuf_r+0x2e>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d10:	f04f 0100 	mov.w	r1, #0
 8006d14:	bf0c      	ite	eq
 8006d16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d1a:	2340      	movne	r3, #64	; 0x40
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	6031      	str	r1, [r6, #0]
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	b016      	add	sp, #88	; 0x58
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	466a      	mov	r2, sp
 8006d28:	f000 f848 	bl	8006dbc <_fstat_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	dbec      	blt.n	8006d0a <__swhatbuf_r+0x12>
 8006d30:	9901      	ldr	r1, [sp, #4]
 8006d32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d3a:	4259      	negs	r1, r3
 8006d3c:	4159      	adcs	r1, r3
 8006d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d42:	e7eb      	b.n	8006d1c <__swhatbuf_r+0x24>

08006d44 <__smakebuf_r>:
 8006d44:	898b      	ldrh	r3, [r1, #12]
 8006d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d48:	079d      	lsls	r5, r3, #30
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	d507      	bpl.n	8006d60 <__smakebuf_r+0x1c>
 8006d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	6123      	str	r3, [r4, #16]
 8006d58:	2301      	movs	r3, #1
 8006d5a:	6163      	str	r3, [r4, #20]
 8006d5c:	b002      	add	sp, #8
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	ab01      	add	r3, sp, #4
 8006d62:	466a      	mov	r2, sp
 8006d64:	f7ff ffc8 	bl	8006cf8 <__swhatbuf_r>
 8006d68:	9900      	ldr	r1, [sp, #0]
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff f865 	bl	8005e3c <_malloc_r>
 8006d72:	b948      	cbnz	r0, 8006d88 <__smakebuf_r+0x44>
 8006d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d78:	059a      	lsls	r2, r3, #22
 8006d7a:	d4ef      	bmi.n	8006d5c <__smakebuf_r+0x18>
 8006d7c:	f023 0303 	bic.w	r3, r3, #3
 8006d80:	f043 0302 	orr.w	r3, r3, #2
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	e7e3      	b.n	8006d50 <__smakebuf_r+0xc>
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	6020      	str	r0, [r4, #0]
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	9b00      	ldr	r3, [sp, #0]
 8006d94:	6163      	str	r3, [r4, #20]
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	6120      	str	r0, [r4, #16]
 8006d9a:	b15b      	cbz	r3, 8006db4 <__smakebuf_r+0x70>
 8006d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 f81d 	bl	8006de0 <_isatty_r>
 8006da6:	b128      	cbz	r0, 8006db4 <__smakebuf_r+0x70>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	431d      	orrs	r5, r3
 8006db8:	81a5      	strh	r5, [r4, #12]
 8006dba:	e7cf      	b.n	8006d5c <__smakebuf_r+0x18>

08006dbc <_fstat_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d07      	ldr	r5, [pc, #28]	; (8006ddc <_fstat_r+0x20>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	f7fa fa58 	bl	800127e <_fstat>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	d102      	bne.n	8006dd8 <_fstat_r+0x1c>
 8006dd2:	682b      	ldr	r3, [r5, #0]
 8006dd4:	b103      	cbz	r3, 8006dd8 <_fstat_r+0x1c>
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	bd38      	pop	{r3, r4, r5, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000428 	.word	0x20000428

08006de0 <_isatty_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d06      	ldr	r5, [pc, #24]	; (8006dfc <_isatty_r+0x1c>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	f7fa fa57 	bl	800129e <_isatty>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_isatty_r+0x1a>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_isatty_r+0x1a>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20000428 	.word	0x20000428

08006e00 <_init>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	bf00      	nop
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr

08006e0c <_fini>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr
