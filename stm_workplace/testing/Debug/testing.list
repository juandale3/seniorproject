
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007bf0  08007bf0  00017bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f9c  08007f9c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007f9c  08007f9c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f9c  08007f9c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000002ac  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000480  20000480  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012ab3  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002958  00000000  00000000  00032cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001088  00000000  00000000  00035658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ce1  00000000  00000000  000366e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d91c  00000000  00000000  000373c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015002  00000000  00000000  00054cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000af6ec  00000000  00000000  00069cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005564  00000000  00000000  001193cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0011e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bd8 	.word	0x08007bd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007bd8 	.word	0x08007bd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fc38 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f810 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f966 	bl	8000e84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb8:	f000 f934 	bl	8000e24 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000bbc:	f000 f8d2 	bl	8000d64 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000bc0:	f000 f860 	bl	8000c84 <MX_ADC1_Init>
  MX_TIM7_Init();
 8000bc4:	f000 f8f8 	bl	8000db8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(2000);
  HAL_TIM_Base_Start_IT(&htim7);
 8000bc8:	4801      	ldr	r0, [pc, #4]	; (8000bd0 <main+0x28>)
 8000bca:	f003 f9b5 	bl	8003f38 <HAL_TIM_Base_Start_IT>
  //HAL_UART_Receive_IT(&huart2, (uint8_t *)msg, 5);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <main+0x26>
 8000bd0:	20000254 	.word	0x20000254

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b096      	sub	sp, #88	; 0x58
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bde:	2228      	movs	r2, #40	; 0x28
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 f8a5 	bl	8005d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c10:	2310      	movs	r3, #16
 8000c12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c14:	2302      	movs	r3, #2
 8000c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fd94 	bl	8002754 <HAL_RCC_OscConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c32:	f000 f99f 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	230f      	movs	r3, #15
 8000c38:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f002 fdbd 	bl	80037d0 <HAL_RCC_ClockConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 f98a 	bl	8000f74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c68:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 ffe5 	bl	8003c3c <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c78:	f000 f97c 	bl	8000f74 <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3758      	adds	r7, #88	; 0x58
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000ca8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d00:	4817      	ldr	r0, [pc, #92]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000d02:	f000 fbf3 	bl	80014ec <HAL_ADC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d0c:	f000 f932 	bl	8000f74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000d1c:	f001 f836 	bl	8001d8c <HAL_ADCEx_MultiModeConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d26:	f000 f925 	bl	8000f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_ADC1_Init+0xdc>)
 8000d48:	f000 fd62 	bl	8001810 <HAL_ADC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d52:	f000 f90f 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001f0 	.word	0x200001f0

08000d64 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_DAC1_Init+0x4c>)
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <MX_DAC1_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_DAC1_Init+0x4c>)
 8000d7c:	f001 fa43 	bl	8002206 <HAL_DAC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000d86:	f000 f8f5 	bl	8000f74 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_DAC1_Init+0x4c>)
 8000d9a:	f001 fa57 	bl	800224c <HAL_DAC_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000da4:	f000 f8e6 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000240 	.word	0x20000240
 8000db4:	40007400 	.word	0x40007400

08000db8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_TIM7_Init+0x64>)
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <MX_TIM7_Init+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 800 - 1;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_TIM7_Init+0x64>)
 8000dd0:	f240 321f 	movw	r2, #799	; 0x31f
 8000dd4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_TIM7_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5 - 1;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_TIM7_Init+0x64>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_TIM7_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <MX_TIM7_Init+0x64>)
 8000dea:	f003 f84d 	bl	8003e88 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000df4:	f000 f8be 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_TIM7_Init+0x64>)
 8000e06:	f003 fab3 	bl	8004370 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e10:	f000 f8b0 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000254 	.word	0x20000254
 8000e20:	40001400 	.word	0x40001400

08000e24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e2a:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <MX_USART2_UART_Init+0x5c>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART2_UART_Init+0x58>)
 8000e68:	f003 fb0e 	bl	8004488 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e72:	f000 f87f 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200002a0 	.word	0x200002a0
 8000e80:	40004400 	.word	0x40004400

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <MX_GPIO_Init+0x98>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <MX_GPIO_Init+0x98>)
 8000ea0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_GPIO_Init+0x98>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_GPIO_Init+0x98>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <MX_GPIO_Init+0x98>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_GPIO_Init+0x98>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f001 fc0c 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8000ed8:	232a      	movs	r3, #42	; 0x2a
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f001 fa8d 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000ef2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f001 fa7d 	bl	800240c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_TIM_PeriodElapsedCallback>:
//	if(htim == &htim17){
//		//HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
//	}
//
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if(htim == &htim7) { // Check if it's TIM7
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d119      	bne.n	8000f64 <HAL_TIM_PeriodElapsedCallback+0x44>
		pulseCount++;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f3a:	801a      	strh	r2, [r3, #0]
		if(pulseCount >= 3200){
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000f44:	d308      	bcc.n	8000f58 <HAL_TIM_PeriodElapsedCallback+0x38>
			//HAL_TIM_Base_Stop_IT(&htim7);
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f001 fbe7 	bl	8002720 <HAL_GPIO_TogglePin>
			pulseCount = 0;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	801a      	strh	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f001 fbde 	bl	8002720 <HAL_GPIO_TogglePin>
	    }

}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000254 	.word	0x20000254
 8000f70:	20000328 	.word	0x20000328

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe8:	d124      	bne.n	8001034 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_ADC_MspInit+0x74>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_ADC_MspInit+0x74>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_ADC_MspInit+0x74>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_ADC_MspInit+0x74>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_ADC_MspInit+0x74>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_ADC_MspInit+0x74>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101a:	2301      	movs	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f001 f9ec 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <HAL_DAC_MspInit+0x74>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d124      	bne.n	80010ac <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_DAC_MspInit+0x78>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <HAL_DAC_MspInit+0x78>)
 8001068:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_DAC_MspInit+0x78>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_DAC_MspInit+0x78>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_DAC_MspInit+0x78>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_DAC_MspInit+0x78>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001092:	2310      	movs	r3, #16
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f001 f9b0 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40007400 	.word	0x40007400
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_TIM_Base_MspInit+0x44>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d113      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_TIM_Base_MspInit+0x48>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <HAL_TIM_Base_MspInit+0x48>)
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_TIM_Base_MspInit+0x48>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0320 	and.w	r3, r3, #32
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2037      	movs	r0, #55	; 0x37
 80010ec:	f001 f855 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 80010f0:	2037      	movs	r0, #55	; 0x37
 80010f2:	f001 f86e 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40001400 	.word	0x40001400
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d131      	bne.n	800118e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_UART_MspInit+0x94>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_UART_MspInit+0x94>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_UART_MspInit+0x94>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_UART_MspInit+0x94>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <HAL_UART_MspInit+0x94>)
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_UART_MspInit+0x94>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800115a:	f248 0304 	movw	r3, #32772	; 0x8004
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116c:	2307      	movs	r3, #7
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f001 f947 	bl	800240c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2026      	movs	r0, #38	; 0x26
 8001184:	f001 f809 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001188:	2026      	movs	r0, #38	; 0x26
 800118a:	f001 f822 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40004400 	.word	0x40004400
 800119c:	40021000 	.word	0x40021000

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler+0x4>

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f95e 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <USART2_IRQHandler+0x10>)
 80011fa:	f003 f993 	bl	8004524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200002a0 	.word	0x200002a0

08001208 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM7_DAC2_IRQHandler+0x10>)
 800120e:	f002 feef 	bl	8003ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000254 	.word	0x20000254

0800121c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return 1;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_kill>:

int _kill(int pid, int sig)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001236:	f004 fdcf 	bl	8005dd8 <__errno>
 800123a:	4603      	mov	r3, r0
 800123c:	2216      	movs	r2, #22
 800123e:	601a      	str	r2, [r3, #0]
  return -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_exit>:

void _exit (int status)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ffe7 	bl	800122c <_kill>
  while (1) {}    /* Make sure we hang here */
 800125e:	e7fe      	b.n	800125e <_exit+0x12>

08001260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e00a      	b.n	8001288 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001272:	f3af 8000 	nop.w
 8001276:	4601      	mov	r1, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf0      	blt.n	8001272 <_read+0x12>
  }

  return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e009      	b.n	80012c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbf1      	blt.n	80012ac <_write+0x12>
  }
  return len;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_close>:

int _close(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fa:	605a      	str	r2, [r3, #4]
  return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_isatty>:

int _isatty(int file)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f004 fd34 	bl	8005dd8 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20003000 	.word	0x20003000
 800139c:	00000400 	.word	0x00000400
 80013a0:	2000032c 	.word	0x2000032c
 80013a4:	20000480 	.word	0x20000480

080013a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f004 fcf3 	bl	8005de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff fbd3 	bl	8000ba8 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001410:	08007fa4 	.word	0x08007fa4
  ldr r2, =_sbss
 8001414:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001418:	20000480 	.word	0x20000480

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 fea7 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fda0 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 febf 	bl	80021ee <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 fe87 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000330 	.word	0x20000330

080014d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000330 	.word	0x20000330

080014ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b09a      	sub	sp, #104	; 0x68
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e172      	b.n	80017f2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d176      	bne.n	800160c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	2b00      	cmp	r3, #0
 8001524:	d152      	bne.n	80015cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fd41 	bl	8000fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d13b      	bne.n	80015cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fcdf 	bl	8001f18 <ADC_Disable>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	d12f      	bne.n	80015cc <HAL_ADC_Init+0xe0>
 800156c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001570:	2b00      	cmp	r3, #0
 8001572:	d12b      	bne.n	80015cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157c:	f023 0302 	bic.w	r3, r3, #2
 8001580:	f043 0202 	orr.w	r2, r3, #2
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001596:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a8:	4b94      	ldr	r3, [pc, #592]	; (80017fc <HAL_ADC_Init+0x310>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a94      	ldr	r2, [pc, #592]	; (8001800 <HAL_ADC_Init+0x314>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9a      	lsrs	r2, r3, #18
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015be:	e002      	b.n	80015c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f9      	bne.n	80015c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80015e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015e8:	d110      	bne.n	800160c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f023 0312 	bic.w	r3, r3, #18
 80015f2:	f043 0210 	orr.w	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b00      	cmp	r3, #0
 8001616:	f040 80df 	bne.w	80017d8 <HAL_ADC_Init+0x2ec>
 800161a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 80da 	bne.w	80017d8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 80d2 	bne.w	80017d8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800163c:	f043 0202 	orr.w	r2, r3, #2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001644:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_ADC_Init+0x318>)
 8001646:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001650:	d102      	bne.n	8001658 <HAL_ADC_Init+0x16c>
 8001652:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <HAL_ADC_Init+0x31c>)
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e002      	b.n	800165e <HAL_ADC_Init+0x172>
 8001658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800165c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_ADC_Init+0x192>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x192>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_ADC_Init+0x194>
 800167e:	2300      	movs	r3, #0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d11c      	bne.n	80016be <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001684:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001686:	2b00      	cmp	r3, #0
 8001688:	d010      	beq.n	80016ac <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d107      	bne.n	80016a6 <HAL_ADC_Init+0x1ba>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_Init+0x1ba>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_ADC_Init+0x1bc>
 80016a6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80016ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016bc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7e5b      	ldrb	r3, [r3, #25]
 80016c2:	035b      	lsls	r3, r3, #13
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016c8:	2a01      	cmp	r2, #1
 80016ca:	d002      	beq.n	80016d2 <HAL_ADC_Init+0x1e6>
 80016cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d0:	e000      	b.n	80016d4 <HAL_ADC_Init+0x1e8>
 80016d2:	2200      	movs	r2, #0
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016e4:	4313      	orrs	r3, r2
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d11b      	bne.n	800172a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7e5b      	ldrb	r3, [r3, #25]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	3b01      	subs	r3, #1
 8001700:	045a      	lsls	r2, r3, #17
 8001702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001704:	4313      	orrs	r3, r2
 8001706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170a:	663b      	str	r3, [r7, #96]	; 0x60
 800170c:	e00d      	b.n	800172a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001716:	f043 0220 	orr.w	r2, r3, #32
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f043 0201 	orr.w	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	2b01      	cmp	r3, #1
 8001730:	d007      	beq.n	8001742 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	4313      	orrs	r3, r2
 800173c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800173e:	4313      	orrs	r3, r2
 8001740:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	d114      	bne.n	800177a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e1b      	ldrb	r3, [r3, #24]
 8001768:	039a      	lsls	r2, r3, #14
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4313      	orrs	r3, r2
 8001774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001776:	4313      	orrs	r3, r2
 8001778:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_ADC_Init+0x320>)
 8001782:	4013      	ands	r3, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800178a:	430b      	orrs	r3, r1
 800178c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10c      	bne.n	80017b0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	f023 010f 	bic.w	r1, r3, #15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	1e5a      	subs	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
 80017ae:	e007      	b.n	80017c0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020f 	bic.w	r2, r2, #15
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
 80017d6:	e00a      	b.n	80017ee <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f023 0312 	bic.w	r3, r3, #18
 80017e0:	f043 0210 	orr.w	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017e8:	2301      	movs	r3, #1
 80017ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3768      	adds	r7, #104	; 0x68
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000
 8001800:	431bde83 	.word	0x431bde83
 8001804:	50000300 	.word	0x50000300
 8001808:	50000100 	.word	0x50000100
 800180c:	fff0c007 	.word	0xfff0c007

08001810 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001810:	b480      	push	{r7}
 8001812:	b09b      	sub	sp, #108	; 0x6c
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x22>
 800182e:	2302      	movs	r3, #2
 8001830:	e2a1      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x566>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 8285 	bne.w	8001d54 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d81c      	bhi.n	800188c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	461a      	mov	r2, r3
 8001866:	231f      	movs	r3, #31
 8001868:	4093      	lsls	r3, r2
 800186a:	43db      	mvns	r3, r3
 800186c:	4019      	ands	r1, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa00 f203 	lsl.w	r2, r0, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
 800188a:	e063      	b.n	8001954 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b09      	cmp	r3, #9
 8001892:	d81e      	bhi.n	80018d2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	3b1e      	subs	r3, #30
 80018a8:	221f      	movs	r2, #31
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	4019      	ands	r1, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	3b1e      	subs	r3, #30
 80018c4:	fa00 f203 	lsl.w	r2, r0, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34
 80018d0:	e040      	b.n	8001954 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b0e      	cmp	r3, #14
 80018d8:	d81e      	bhi.n	8001918 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	3b3c      	subs	r3, #60	; 0x3c
 80018ee:	221f      	movs	r2, #31
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4019      	ands	r1, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	3b3c      	subs	r3, #60	; 0x3c
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	639a      	str	r2, [r3, #56]	; 0x38
 8001916:	e01d      	b.n	8001954 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	3b5a      	subs	r3, #90	; 0x5a
 800192c:	221f      	movs	r2, #31
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	4019      	ands	r1, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	3b5a      	subs	r3, #90	; 0x5a
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 80e5 	bne.w	8001b2e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b09      	cmp	r3, #9
 800196a:	d91c      	bls.n	80019a6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6999      	ldr	r1, [r3, #24]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	3b1e      	subs	r3, #30
 800197e:	2207      	movs	r2, #7
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	4019      	ands	r1, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6898      	ldr	r0, [r3, #8]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	3b1e      	subs	r3, #30
 8001998:	fa00 f203 	lsl.w	r2, r0, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	619a      	str	r2, [r3, #24]
 80019a4:	e019      	b.n	80019da <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6959      	ldr	r1, [r3, #20]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	2207      	movs	r2, #7
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4019      	ands	r1, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6898      	ldr	r0, [r3, #8]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d84f      	bhi.n	8001a9c <HAL_ADC_ConfigChannel+0x28c>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <HAL_ADC_ConfigChannel+0x1f4>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a37 	.word	0x08001a37
 8001a0c:	08001a59 	.word	0x08001a59
 8001a10:	08001a7b 	.word	0x08001a7b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a1a:	4b9c      	ldr	r3, [pc, #624]	; (8001c8c <HAL_ADC_ConfigChannel+0x47c>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	0691      	lsls	r1, r2, #26
 8001a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a26:	430a      	orrs	r2, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a32:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a34:	e07b      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a3c:	4b93      	ldr	r3, [pc, #588]	; (8001c8c <HAL_ADC_ConfigChannel+0x47c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	0691      	lsls	r1, r2, #26
 8001a46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a54:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a56:	e06a      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a5e:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_ADC_ConfigChannel+0x47c>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	0691      	lsls	r1, r2, #26
 8001a68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a76:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a78:	e059      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a80:	4b82      	ldr	r3, [pc, #520]	; (8001c8c <HAL_ADC_ConfigChannel+0x47c>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	0691      	lsls	r1, r2, #26
 8001a8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a98:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a9a:	e048      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	069b      	lsls	r3, r3, #26
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001abe:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	069b      	lsls	r3, r3, #26
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d107      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ae2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	069b      	lsls	r3, r3, #26
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d107      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b06:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	069b      	lsls	r3, r3, #26
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d107      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b2a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b2c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d108      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x33e>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x33e>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x340>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f040 810a 	bne.w	8001d6a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d00f      	beq.n	8001b7e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43da      	mvns	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	400a      	ands	r2, r1
 8001b78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b7c:	e049      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b09      	cmp	r3, #9
 8001b9e:	d91c      	bls.n	8001bda <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6999      	ldr	r1, [r3, #24]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b1b      	subs	r3, #27
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4019      	ands	r1, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6898      	ldr	r0, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b1b      	subs	r3, #27
 8001bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	619a      	str	r2, [r3, #24]
 8001bd8:	e01b      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6959      	ldr	r1, [r3, #20]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	2207      	movs	r2, #7
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	4019      	ands	r1, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6898      	ldr	r0, [r3, #8]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_ADC_ConfigChannel+0x480>)
 8001c14:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d105      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c2e:	2b11      	cmp	r3, #17
 8001c30:	d105      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	f040 8091 	bne.w	8001d6a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 808a 	bne.w	8001d6a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5e:	d102      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x456>
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_ADC_ConfigChannel+0x484>)
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x45c>
 8001c66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c6a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10e      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x488>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x488>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e006      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x48a>
 8001c8c:	83fff000 	.word	0x83fff000
 8001c90:	50000300 	.word	0x50000300
 8001c94:	50000100 	.word	0x50000100
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d150      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c9e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x4b0>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x4b0>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x4b2>
 8001cc0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d13c      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d11d      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x4fa>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd6:	d118      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_ADC_ConfigChannel+0x574>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_ADC_ConfigChannel+0x578>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9a      	lsrs	r2, r3, #18
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cfa:	e002      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f9      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d08:	e02e      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d10b      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x51a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d1a:	d106      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d26:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d28:	e01e      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d11a      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d3c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d3e:	e013      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f043 0220 	orr.w	r2, r3, #32
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d52:	e00a      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f043 0220 	orr.w	r2, r3, #32
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d66:	e000      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d68:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	376c      	adds	r7, #108	; 0x6c
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000
 8001d88:	431bde83 	.word	0x431bde83

08001d8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b099      	sub	sp, #100	; 0x64
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da4:	d102      	bne.n	8001dac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001da6:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	e002      	b.n	8001db2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001dac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001db0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0a2      	b.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e09b      	b.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d17f      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d179      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dec:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001dee:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d040      	beq.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e0a:	035b      	lsls	r3, r3, #13
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e12:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001e34:	2300      	movs	r3, #0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d15c      	bne.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001e56:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d14b      	bne.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e64:	f023 030f 	bic.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	6811      	ldr	r1, [r2, #0]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	6892      	ldr	r2, [r2, #8]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e76:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e78:	e03c      	b.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e84:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d108      	bne.n	8001ea6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d123      	bne.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001ec8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d112      	bne.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ed6:	f023 030f 	bic.w	r3, r3, #15
 8001eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001edc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ede:	e009      	b.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f043 0220 	orr.w	r2, r3, #32
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ef2:	e000      	b.n	8001ef6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ef4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001f02:	4618      	mov	r0, r3
 8001f04:	3764      	adds	r7, #100	; 0x64
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	50000100 	.word	0x50000100
 8001f14:	50000300 	.word	0x50000300

08001f18 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <ADC_Disable+0x2c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <ADC_Disable+0x2c>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <ADC_Disable+0x2e>
 8001f44:	2300      	movs	r3, #0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d047      	beq.n	8001fda <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 030d 	and.w	r3, r3, #13
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10f      	bne.n	8001f78 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0202 	orr.w	r2, r2, #2
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f70:	f7ff fab0 	bl	80014d4 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f76:	e029      	b.n	8001fcc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f043 0210 	orr.w	r2, r3, #16
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e023      	b.n	8001fdc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f94:	f7ff fa9e 	bl	80014d4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d914      	bls.n	8001fcc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10d      	bne.n	8001fcc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f043 0210 	orr.w	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e007      	b.n	8001fdc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d0dc      	beq.n	8001f94 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e014      	b.n	8002242 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	791b      	ldrb	r3, [r3, #4]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe ff09 	bl	8001040 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	795b      	ldrb	r3, [r3, #5]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_DAC_ConfigChannel+0x20>
 8002268:	2302      	movs	r3, #2
 800226a:	e04e      	b.n	800230a <HAL_DAC_ConfigChannel+0xbe>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2202      	movs	r2, #2
 8002276:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <HAL_DAC_ConfigChannel+0xcc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d112      	bne.n	80022b0 <HAL_DAC_ConfigChannel+0x64>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002290:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4013      	ands	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	e00e      	b.n	80022ce <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80022b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4013      	ands	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	22c0      	movs	r2, #192	; 0xc0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40007400 	.word	0x40007400

0800231c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800232a:	2b02      	cmp	r3, #2
 800232c:	d008      	beq.n	8002340 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2204      	movs	r2, #4
 8002332:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e020      	b.n	8002382 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 020e 	bic.w	r2, r2, #14
 800234e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	2101      	movs	r1, #1
 800236a:	fa01 f202 	lsl.w	r2, r1, r2
 800236e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d005      	beq.n	80023b0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2204      	movs	r2, #4
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e027      	b.n	8002400 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 020e 	bic.w	r2, r2, #14
 80023be:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	2101      	movs	r1, #1
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
    } 
  }
  return status;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241a:	e14e      	b.n	80026ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8140 	beq.w	80026b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d005      	beq.n	800244c <HAL_GPIO_Init+0x40>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d130      	bne.n	80024ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002482:	2201      	movs	r2, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 0201 	and.w	r2, r3, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d017      	beq.n	80024ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d123      	bne.n	800253e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	6939      	ldr	r1, [r7, #16]
 800253a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0203 	and.w	r2, r3, #3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 809a 	beq.w	80026b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002580:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <HAL_GPIO_Init+0x2cc>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a54      	ldr	r2, [pc, #336]	; (80026d8 <HAL_GPIO_Init+0x2cc>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b52      	ldr	r3, [pc, #328]	; (80026d8 <HAL_GPIO_Init+0x2cc>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002598:	4a50      	ldr	r2, [pc, #320]	; (80026dc <HAL_GPIO_Init+0x2d0>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025c2:	d013      	beq.n	80025ec <HAL_GPIO_Init+0x1e0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <HAL_GPIO_Init+0x2d4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00d      	beq.n	80025e8 <HAL_GPIO_Init+0x1dc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a45      	ldr	r2, [pc, #276]	; (80026e4 <HAL_GPIO_Init+0x2d8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <HAL_GPIO_Init+0x1d8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a44      	ldr	r2, [pc, #272]	; (80026e8 <HAL_GPIO_Init+0x2dc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_GPIO_Init+0x1d4>
 80025dc:	2303      	movs	r3, #3
 80025de:	e006      	b.n	80025ee <HAL_GPIO_Init+0x1e2>
 80025e0:	2305      	movs	r3, #5
 80025e2:	e004      	b.n	80025ee <HAL_GPIO_Init+0x1e2>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e002      	b.n	80025ee <HAL_GPIO_Init+0x1e2>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_GPIO_Init+0x1e2>
 80025ec:	2300      	movs	r3, #0
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	f002 0203 	and.w	r2, r2, #3
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	4093      	lsls	r3, r2
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025fe:	4937      	ldr	r1, [pc, #220]	; (80026dc <HAL_GPIO_Init+0x2d0>)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260c:	4b37      	ldr	r3, [pc, #220]	; (80026ec <HAL_GPIO_Init+0x2e0>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002630:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <HAL_GPIO_Init+0x2e0>)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_GPIO_Init+0x2e0>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800265a:	4a24      	ldr	r2, [pc, #144]	; (80026ec <HAL_GPIO_Init+0x2e0>)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_GPIO_Init+0x2e0>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002684:	4a19      	ldr	r2, [pc, #100]	; (80026ec <HAL_GPIO_Init+0x2e0>)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_GPIO_Init+0x2e0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <HAL_GPIO_Init+0x2e0>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3301      	adds	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f aea9 	bne.w	800241c <HAL_GPIO_Init+0x10>
  }
}
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010000 	.word	0x40010000
 80026e0:	48000400 	.word	0x48000400
 80026e4:	48000800 	.word	0x48000800
 80026e8:	48000c00 	.word	0x48000c00
 80026ec:	40010400 	.word	0x40010400

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800270c:	e002      	b.n	8002714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43d9      	mvns	r1, r3
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	400b      	ands	r3, r1
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800275a:	af00      	add	r7, sp, #0
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002764:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f001 b823 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 817d 	beq.w	8002a8a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002790:	4bbc      	ldr	r3, [pc, #752]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800279c:	4bb9      	ldr	r3, [pc, #740]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d15c      	bne.n	8002862 <HAL_RCC_OscConfig+0x10e>
 80027a8:	4bb6      	ldr	r3, [pc, #728]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d155      	bne.n	8002862 <HAL_RCC_OscConfig+0x10e>
 80027b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x94>
 80027e2:	4ba8      	ldr	r3, [pc, #672]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e015      	b.n	8002814 <HAL_RCC_OscConfig+0xc0>
 80027e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002800:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002804:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002810:	4b9c      	ldr	r3, [pc, #624]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002818:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800281c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002820:	fa92 f2a2 	rbit	r2, r2
 8002824:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002828:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800282c:	fab2 f282 	clz	r2, r2
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f042 0220 	orr.w	r2, r2, #32
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	f002 021f 	and.w	r2, r2, #31
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f202 	lsl.w	r2, r1, r2
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 811f 	beq.w	8002a88 <HAL_RCC_OscConfig+0x334>
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 8116 	bne.w	8002a88 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f000 bfaf 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x12e>
 8002874:	4b83      	ldr	r3, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a82      	ldr	r2, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 800287a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e036      	b.n	80028f0 <HAL_RCC_OscConfig+0x19c>
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x158>
 8002892:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7b      	ldr	r2, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b79      	ldr	r3, [pc, #484]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a78      	ldr	r2, [pc, #480]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e021      	b.n	80028f0 <HAL_RCC_OscConfig+0x19c>
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x184>
 80028be:	4b71      	ldr	r3, [pc, #452]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a70      	ldr	r2, [pc, #448]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6d      	ldr	r2, [pc, #436]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0x19c>
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a66      	ldr	r2, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028f0:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	f023 020f 	bic.w	r2, r3, #15
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	495f      	ldr	r1, [pc, #380]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002906:	4313      	orrs	r3, r2
 8002908:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d059      	beq.n	80029ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe fddb 	bl	80014d4 <HAL_GetTick>
 800291e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe fdd6 	bl	80014d4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d902      	bls.n	800293a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	f000 bf43 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 800293a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800294e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_RCC_OscConfig+0x218>
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e015      	b.n	8002998 <HAL_RCC_OscConfig+0x244>
 800296c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002970:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002984:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002988:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800299c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029a4:	fa92 f2a2 	rbit	r2, r2
 80029a8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029b0:	fab2 f282 	clz	r2, r2
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f042 0220 	orr.w	r2, r2, #32
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f002 021f 	and.w	r2, r2, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ab      	beq.n	8002924 <HAL_RCC_OscConfig+0x1d0>
 80029cc:	e05d      	b.n	8002a8a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fd81 	bl	80014d4 <HAL_GetTick>
 80029d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fd7c 	bl	80014d4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	; 0x64
 80029e6:	d902      	bls.n	80029ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	f000 bee9 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 80029ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2cc>
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	e015      	b.n	8002a4c <HAL_RCC_OscConfig+0x2f8>
 8002a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a24:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a38:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a50:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a54:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a58:	fa92 f2a2 	rbit	r2, r2
 8002a5c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a60:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ab      	bne.n	80029d8 <HAL_RCC_OscConfig+0x284>
 8002a80:	e003      	b.n	8002a8a <HAL_RCC_OscConfig+0x336>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 817d 	beq.w	8002d9a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002aa0:	4ba6      	ldr	r3, [pc, #664]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002aac:	4ba3      	ldr	r3, [pc, #652]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d172      	bne.n	8002b9e <HAL_RCC_OscConfig+0x44a>
 8002ab8:	4ba0      	ldr	r3, [pc, #640]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d16c      	bne.n	8002b9e <HAL_RCC_OscConfig+0x44a>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ad6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3a0>
 8002aee:	4b93      	ldr	r3, [pc, #588]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	e013      	b.n	8002b1c <HAL_RCC_OscConfig+0x3c8>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b18:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b22:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b26:	fa92 f2a2 	rbit	r2, r2
 8002b2a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b2e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b32:	fab2 f282 	clz	r2, r2
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f042 0220 	orr.w	r2, r2, #32
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f002 021f 	and.w	r2, r2, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f202 	lsl.w	r2, r1, r2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCC_OscConfig+0x410>
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f000 be2e 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b75      	ldr	r3, [pc, #468]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	21f8      	movs	r1, #248	; 0xf8
 8002b7a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b82:	fa91 f1a1 	rbit	r1, r1
 8002b86:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b8a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b8e:	fab1 f181 	clz	r1, r1
 8002b92:	b2c9      	uxtb	r1, r1
 8002b94:	408b      	lsls	r3, r1
 8002b96:	4969      	ldr	r1, [pc, #420]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9c:	e0fd      	b.n	8002d9a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8088 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x56c>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bc2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2301      	movs	r3, #1
 8002bda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fc7a 	bl	80014d4 <HAL_GetTick>
 8002be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe fc75 	bl	80014d4 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d902      	bls.n	8002bfc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	f000 bde2 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4d8>
 8002c26:	4b45      	ldr	r3, [pc, #276]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0x500>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c3e:	2302      	movs	r3, #2
 8002c40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c50:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2202      	movs	r2, #2
 8002c56:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c66:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c6a:	fab2 f282 	clz	r2, r2
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f042 0220 	orr.w	r2, r2, #32
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f002 021f 	and.w	r2, r2, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0af      	beq.n	8002be6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	21f8      	movs	r1, #248	; 0xf8
 8002c9c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ca4:	fa91 f1a1 	rbit	r1, r1
 8002ca8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002cac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cb0:	fab1 f181 	clz	r1, r1
 8002cb4:	b2c9      	uxtb	r1, r1
 8002cb6:	408b      	lsls	r3, r1
 8002cb8:	4920      	ldr	r1, [pc, #128]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
 8002cbe:	e06c      	b.n	8002d9a <HAL_RCC_OscConfig+0x646>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ce0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe fbf2 	bl	80014d4 <HAL_GetTick>
 8002cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fbed 	bl	80014d4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d902      	bls.n	8002d0c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	f000 bd5a 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d104      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5ec>
 8002d36:	4b01      	ldr	r3, [pc, #4]	; (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e015      	b.n	8002d68 <HAL_RCC_OscConfig+0x614>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	2302      	movs	r3, #2
 8002d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d64:	4bc8      	ldr	r3, [pc, #800]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d72:	fa92 f2a2 	rbit	r2, r2
 8002d76:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ad      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8110 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d079      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x760>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4bab      	ldr	r3, [pc, #684]	; (800308c <HAL_RCC_OscConfig+0x938>)
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	461a      	mov	r2, r3
 8002de6:	2301      	movs	r3, #1
 8002de8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7fe fb73 	bl	80014d4 <HAL_GetTick>
 8002dee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe fb6e 	bl	80014d4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d902      	bls.n	8002e0a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	f000 bcdb 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e48:	2202      	movs	r2, #2
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e64:	4b88      	ldr	r3, [pc, #544]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 8002e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e70:	2102      	movs	r1, #2
 8002e72:	6019      	str	r1, [r3, #0]
 8002e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	fa93 f1a3 	rbit	r1, r3
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e8a:	6019      	str	r1, [r3, #0]
  return result;
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0a0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x6a0>
 8002eb2:	e08d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x87c>
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ed6:	601a      	str	r2, [r3, #0]
  return result;
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ee0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b68      	ldr	r3, [pc, #416]	; (800308c <HAL_RCC_OscConfig+0x938>)
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe faed 	bl	80014d4 <HAL_GetTick>
 8002efa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f00:	f7fe fae8 	bl	80014d4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d902      	bls.n	8002f16 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	f000 bc55 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f1e:	2202      	movs	r2, #2
 8002f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f42:	2202      	movs	r2, #2
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f66:	2202      	movs	r2, #2
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 8002f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f8e:	2102      	movs	r1, #2
 8002f90:	6019      	str	r1, [r3, #0]
 8002f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f1a3 	rbit	r1, r3
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fa8:	6019      	str	r1, [r3, #0]
  return result;
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d197      	bne.n	8002f00 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 81a1 	beq.w	8003328 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fec:	4b26      	ldr	r3, [pc, #152]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d116      	bne.n	8003026 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	61d3      	str	r3, [r2, #28]
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800301e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_OscConfig+0x93c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11a      	bne.n	8003068 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_RCC_OscConfig+0x93c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <HAL_RCC_OscConfig+0x93c>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303e:	f7fe fa49 	bl	80014d4 <HAL_GetTick>
 8003042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	e009      	b.n	800305c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe fa44 	bl	80014d4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b64      	cmp	r3, #100	; 0x64
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e3b1      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_OscConfig+0x93c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ef      	beq.n	8003048 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10d      	bne.n	8003094 <HAL_RCC_OscConfig+0x940>
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4a02      	ldr	r2, [pc, #8]	; (8003088 <HAL_RCC_OscConfig+0x934>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	e03c      	b.n	8003100 <HAL_RCC_OscConfig+0x9ac>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	10908120 	.word	0x10908120
 8003090:	40007000 	.word	0x40007000
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10c      	bne.n	80030be <HAL_RCC_OscConfig+0x96a>
 80030a4:	4bc1      	ldr	r3, [pc, #772]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4ac0      	ldr	r2, [pc, #768]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	4bbe      	ldr	r3, [pc, #760]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4abd      	ldr	r2, [pc, #756]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030b6:	f023 0304 	bic.w	r3, r3, #4
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	e020      	b.n	8003100 <HAL_RCC_OscConfig+0x9ac>
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x994>
 80030ce:	4bb7      	ldr	r3, [pc, #732]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4ab6      	ldr	r2, [pc, #728]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6213      	str	r3, [r2, #32]
 80030da:	4bb4      	ldr	r3, [pc, #720]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4ab3      	ldr	r2, [pc, #716]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6213      	str	r3, [r2, #32]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0x9ac>
 80030e8:	4bb0      	ldr	r3, [pc, #704]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4aaf      	ldr	r2, [pc, #700]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	4bad      	ldr	r3, [pc, #692]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4aac      	ldr	r2, [pc, #688]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030fa:	f023 0304 	bic.w	r3, r3, #4
 80030fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8081 	beq.w	8003214 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fe f9df 	bl	80014d4 <HAL_GetTick>
 8003116:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe f9da 	bl	80014d4 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e345      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800313c:	2202      	movs	r2, #2
 800313e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003160:	2202      	movs	r2, #2
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800317a:	601a      	str	r2, [r3, #0]
  return result;
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003184:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0xa4c>
 800319a:	4b84      	ldr	r3, [pc, #528]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	e013      	b.n	80031c8 <HAL_RCC_OscConfig+0xa74>
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031a8:	2202      	movs	r2, #2
 80031aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fa93 f2a3 	rbit	r2, r3
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	4b79      	ldr	r3, [pc, #484]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031d0:	2102      	movs	r1, #2
 80031d2:	6011      	str	r1, [r2, #0]
 80031d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	fa92 f1a2 	rbit	r1, r2
 80031e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031ea:	6011      	str	r1, [r2, #0]
  return result;
 80031ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	fab2 f282 	clz	r2, r2
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f002 021f 	and.w	r2, r2, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d084      	beq.n	800311c <HAL_RCC_OscConfig+0x9c8>
 8003212:	e07f      	b.n	8003314 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fe f95e 	bl	80014d4 <HAL_GetTick>
 8003218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321c:	e00b      	b.n	8003236 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fe f959 	bl	80014d4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e2c4      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003262:	2202      	movs	r2, #2
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800327c:	601a      	str	r2, [r3, #0]
  return result;
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003286:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d102      	bne.n	80032a2 <HAL_RCC_OscConfig+0xb4e>
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	e013      	b.n	80032ca <HAL_RCC_OscConfig+0xb76>
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	fa93 f2a3 	rbit	r2, r3
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032d2:	2102      	movs	r1, #2
 80032d4:	6011      	str	r1, [r2, #0]
 80032d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	fa92 f1a2 	rbit	r1, r2
 80032e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032ec:	6011      	str	r1, [r2, #0]
  return result;
 80032ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	fab2 f282 	clz	r2, r2
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f002 021f 	and.w	r2, r2, #31
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f202 	lsl.w	r2, r1, r2
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d184      	bne.n	800321e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003314:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331c:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a22      	ldr	r2, [pc, #136]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 8003322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003326:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8242 	beq.w	80037be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_RCC_OscConfig+0xc58>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	f000 8213 	beq.w	800376e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	2b02      	cmp	r3, #2
 8003356:	f040 8162 	bne.w	800361e <HAL_RCC_OscConfig+0xeca>
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003362:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	fa93 f2a3 	rbit	r2, r3
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800337e:	601a      	str	r2, [r3, #0]
  return result;
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003388:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003394:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	461a      	mov	r2, r3
 800339c:	2300      	movs	r3, #0
 800339e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe f898 	bl	80014d4 <HAL_GetTick>
 80033a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a8:	e00c      	b.n	80033c4 <HAL_RCC_OscConfig+0xc70>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fe f890 	bl	80014d4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1fd      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033e8:	601a      	str	r2, [r3, #0]
  return result;
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <HAL_RCC_OscConfig+0xcba>
 8003408:	4bb0      	ldr	r3, [pc, #704]	; (80036cc <HAL_RCC_OscConfig+0xf78>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	e027      	b.n	800345e <HAL_RCC_OscConfig+0xd0a>
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003416:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800343c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	4b9c      	ldr	r3, [pc, #624]	; (80036cc <HAL_RCC_OscConfig+0xf78>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003462:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003466:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800346a:	6011      	str	r1, [r2, #0]
 800346c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003470:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	fa92 f1a2 	rbit	r1, r2
 800347a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003482:	6011      	str	r1, [r2, #0]
  return result;
 8003484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003488:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d182      	bne.n	80033b0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034aa:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0xf78>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	430b      	orrs	r3, r1
 80034cc:	497f      	ldr	r1, [pc, #508]	; (80036cc <HAL_RCC_OscConfig+0xf78>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034f6:	601a      	str	r2, [r3, #0]
  return result;
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003500:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800350c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	461a      	mov	r2, r3
 8003514:	2301      	movs	r3, #1
 8003516:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd ffdc 	bl	80014d4 <HAL_GetTick>
 800351c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003520:	e009      	b.n	8003536 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003522:	f7fd ffd7 	bl	80014d4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e144      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800353e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800355a:	601a      	str	r2, [r3, #0]
  return result;
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003564:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_RCC_OscConfig+0xe2c>
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <HAL_RCC_OscConfig+0xf78>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	e027      	b.n	80035d0 <HAL_RCC_OscConfig+0xe7c>
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800358c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCC_OscConfig+0xf78>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	fa92 f1a2 	rbit	r1, r2
 80035ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035f4:	6011      	str	r1, [r2, #0]
  return result;
 80035f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	fab2 f282 	clz	r2, r2
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	f042 0220 	orr.w	r2, r2, #32
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	f002 021f 	and.w	r2, r2, #31
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d082      	beq.n	8003522 <HAL_RCC_OscConfig+0xdce>
 800361c:	e0cf      	b.n	80037be <HAL_RCC_OscConfig+0x106a>
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003626:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800362a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003630:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	fa93 f2a3 	rbit	r2, r3
 800363a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003642:	601a      	str	r2, [r3, #0]
  return result;
 8003644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003648:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800364c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003658:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	461a      	mov	r2, r3
 8003660:	2300      	movs	r3, #0
 8003662:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fd ff36 	bl	80014d4 <HAL_GetTick>
 8003668:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366c:	e009      	b.n	8003682 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd ff31 	bl	80014d4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e09e      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800368a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036a6:	601a      	str	r2, [r3, #0]
  return result;
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d104      	bne.n	80036d0 <HAL_RCC_OscConfig+0xf7c>
 80036c6:	4b01      	ldr	r3, [pc, #4]	; (80036cc <HAL_RCC_OscConfig+0xf78>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	e029      	b.n	8003720 <HAL_RCC_OscConfig+0xfcc>
 80036cc:	40021000 	.word	0x40021000
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCC_OscConfig+0x1078>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003724:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003728:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003732:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	fa92 f1a2 	rbit	r1, r2
 800373c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003740:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003744:	6011      	str	r1, [r2, #0]
  return result;
 8003746:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800374a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	fab2 f282 	clz	r2, r2
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f042 0220 	orr.w	r2, r2, #32
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	f002 021f 	and.w	r2, r2, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f202 	lsl.w	r2, r1, r2
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d180      	bne.n	800366e <HAL_RCC_OscConfig+0xf1a>
 800376c:	e027      	b.n	80037be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01e      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_RCC_OscConfig+0x1078>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800378a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800378e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d10b      	bne.n	80037ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b09e      	sub	sp, #120	; 0x78
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e162      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b90      	ldr	r3, [pc, #576]	; (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d910      	bls.n	8003818 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b8d      	ldr	r3, [pc, #564]	; (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	498b      	ldr	r1, [pc, #556]	; (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b89      	ldr	r3, [pc, #548]	; (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e14a      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b82      	ldr	r3, [pc, #520]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	497f      	ldr	r1, [pc, #508]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80dc 	beq.w	80039fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d13c      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xf6>
 800384c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003850:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800385a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d102      	bne.n	8003876 <HAL_RCC_ClockConfig+0xa6>
 8003870:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	e00f      	b.n	8003896 <HAL_RCC_ClockConfig+0xc6>
 8003876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	667b      	str	r3, [r7, #100]	; 0x64
 8003884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003888:	663b      	str	r3, [r7, #96]	; 0x60
 800388a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003892:	4b67      	ldr	r3, [pc, #412]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800389a:	65ba      	str	r2, [r7, #88]	; 0x58
 800389c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800389e:	fa92 f2a2 	rbit	r2, r2
 80038a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038a6:	fab2 f282 	clz	r2, r2
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	f042 0220 	orr.w	r2, r2, #32
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	f002 021f 	and.w	r2, r2, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f202 	lsl.w	r2, r1, r2
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d17b      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0f3      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d13c      	bne.n	8003948 <HAL_RCC_ClockConfig+0x178>
 80038ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x128>
 80038f2:	4b4f      	ldr	r3, [pc, #316]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	e00f      	b.n	8003918 <HAL_RCC_ClockConfig+0x148>
 80038f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390a:	643b      	str	r3, [r7, #64]	; 0x40
 800390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003914:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391c:	63ba      	str	r2, [r7, #56]	; 0x38
 800391e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003920:	fa92 f2a2 	rbit	r2, r2
 8003924:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003928:	fab2 f282 	clz	r2, r2
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	f042 0220 	orr.w	r2, r2, #32
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	f002 021f 	and.w	r2, r2, #31
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d13a      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b2      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
 8003948:	2302      	movs	r3, #2
 800394a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_RCC_ClockConfig+0x1a0>
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	e00d      	b.n	800398c <HAL_RCC_ClockConfig+0x1bc>
 8003970:	2302      	movs	r3, #2
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	2302      	movs	r3, #2
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	2202      	movs	r2, #2
 800398e:	61ba      	str	r2, [r7, #24]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	fa92 f2a2 	rbit	r2, r2
 8003996:	617a      	str	r2, [r7, #20]
  return result;
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	fab2 f282 	clz	r2, r2
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	f042 0220 	orr.w	r2, r2, #32
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	f002 021f 	and.w	r2, r2, #31
 80039aa:	2101      	movs	r1, #1
 80039ac:	fa01 f202 	lsl.w	r2, r1, r2
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e079      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	491a      	ldr	r1, [pc, #104]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039cc:	f7fd fd82 	bl	80014d4 <HAL_GetTick>
 80039d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fd fd7e 	bl	80014d4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e061      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d214      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4906      	ldr	r1, [pc, #24]	; (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e040      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	491a      	ldr	r1, [pc, #104]	; (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4912      	ldr	r1, [pc, #72]	; (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a72:	f000 f829 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a76:	4601      	mov	r1, r0
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a80:	22f0      	movs	r2, #240	; 0xf0
 8003a82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	fa92 f2a2 	rbit	r2, r2
 8003a8a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	fab2 f282 	clz	r2, r2
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	40d3      	lsrs	r3, r2
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <HAL_RCC_ClockConfig+0x2ec>)
 8003a98:	5cd3      	ldrb	r3, [r2, r3]
 8003a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a9e:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <HAL_RCC_ClockConfig+0x2f0>)
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_RCC_ClockConfig+0x2f4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fcd0 	bl	800144c <HAL_InitTick>
  
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3778      	adds	r7, #120	; 0x78
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08007bf0 	.word	0x08007bf0
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	20000004 	.word	0x20000004

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b08b      	sub	sp, #44	; 0x2c
 8003acc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ae2:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d002      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x30>
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0x36>
 8003af6:	e03c      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003afa:	623b      	str	r3, [r7, #32]
      break;
 8003afc:	e03c      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	fa92 f2a2 	rbit	r2, r2
 8003b10:	607a      	str	r2, [r7, #4]
  return result;
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	fab2 f282 	clz	r2, r2
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	40d3      	lsrs	r3, r2
 8003b1c:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b22:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	fa92 f2a2 	rbit	r2, r2
 8003b34:	60fa      	str	r2, [r7, #12]
  return result;
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	fab2 f282 	clz	r2, r2
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	40d3      	lsrs	r3, r2
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b50:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b60:	e004      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	623b      	str	r3, [r7, #32]
      break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b74:	623b      	str	r3, [r7, #32]
      break;
 8003b76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b78:	6a3b      	ldr	r3, [r7, #32]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	372c      	adds	r7, #44	; 0x2c
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	007a1200 	.word	0x007a1200
 8003b90:	08007c08 	.word	0x08007c08
 8003b94:	08007c18 	.word	0x08007c18
 8003b98:	003d0900 	.word	0x003d0900

08003b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bba:	f7ff ffef 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bc8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	603a      	str	r2, [r7, #0]
  return result;
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	40d3      	lsrs	r3, r2
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	08007c00 	.word	0x08007c00

08003bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bfe:	f7ff ffcd 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003c02:	4601      	mov	r1, r0
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c0c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	fa92 f2a2 	rbit	r2, r2
 8003c18:	603a      	str	r2, [r7, #0]
  return result;
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	fab2 f282 	clz	r2, r2
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	40d3      	lsrs	r3, r2
 8003c24:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	08007c00 	.word	0x08007c00

08003c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b092      	sub	sp, #72	; 0x48
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80cd 	beq.w	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c60:	4b86      	ldr	r3, [pc, #536]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10e      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b83      	ldr	r3, [pc, #524]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4a82      	ldr	r2, [pc, #520]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	61d3      	str	r3, [r2, #28]
 8003c78:	4b80      	ldr	r3, [pc, #512]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d118      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c96:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a79      	ldr	r2, [pc, #484]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fc17 	bl	80014d4 <HAL_GetTick>
 8003ca6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	e008      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fd fc13 	bl	80014d4 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b64      	cmp	r3, #100	; 0x64
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e0db      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d07d      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d076      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cf4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	4b5e      	ldr	r3, [pc, #376]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2301      	movs	r3, #1
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b55      	ldr	r3, [pc, #340]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	2300      	movs	r3, #0
 8003d36:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d38:	4a50      	ldr	r2, [pc, #320]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d045      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fd fbc4 	bl	80014d4 <HAL_GetTick>
 8003d4c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7fd fbc0 	bl	80014d4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e086      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003d66:	2302      	movs	r3, #2
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	fa93 f3a3 	rbit	r3, r3
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	2302      	movs	r3, #2
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f043 0302 	orr.w	r3, r3, #2
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d102      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d94:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	e007      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	fa93 f3a3 	rbit	r3, r3
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	2202      	movs	r2, #2
 8003dac:	613a      	str	r2, [r7, #16]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	fa92 f2a2 	rbit	r2, r2
 8003db4:	60fa      	str	r2, [r7, #12]
  return result;
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f002 021f 	and.w	r2, r2, #31
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f202 	lsl.w	r2, r1, r2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0bd      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4926      	ldr	r1, [pc, #152]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003de6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f023 0203 	bic.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	491a      	ldr	r1, [pc, #104]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e24:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	f023 0210 	bic.w	r2, r3, #16
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4912      	ldr	r1, [pc, #72]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	490b      	ldr	r1, [pc, #44]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3748      	adds	r7, #72	; 0x48
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	10908100 	.word	0x10908100

08003e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e049      	b.n	8003f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd f904 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f000 f9da 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d001      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e040      	b.n	8003fd2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xa8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x58>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7a:	d009      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x58>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xac>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x58>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d115      	bne.n	8003fbc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_TIM_Base_Start_IT+0xb4>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d015      	beq.n	8003fce <HAL_TIM_Base_Start_IT+0x96>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d011      	beq.n	8003fce <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fba:	e008      	b.n	8003fce <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e000      	b.n	8003fd0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	00010007 	.word	0x00010007

08003ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0202 	mvn.w	r2, #2
 800401c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f905 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8f7 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f908 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0204 	mvn.w	r2, #4
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8db 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8cd 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8de 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d122      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d11b      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0208 	mvn.w	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8b1 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8a3 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8b4 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0210 	mvn.w	r2, #16
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f887 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f879 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f88a 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0201 	mvn.w	r2, #1
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fed6 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f960 	bl	8004460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d10e      	bne.n	80041ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f953 	bl	8004474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d10e      	bne.n	80041fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d107      	bne.n	80041fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f838 	bl	800426a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d10e      	bne.n	8004226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b20      	cmp	r3, #32
 8004214:	d107      	bne.n	8004226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0220 	mvn.w	r2, #32
 800421e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f913 	bl	800444c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a32      	ldr	r2, [pc, #200]	; (800435c <TIM_Base_SetConfig+0xdc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <TIM_Base_SetConfig+0x28>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0x28>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a2f      	ldr	r2, [pc, #188]	; (8004360 <TIM_Base_SetConfig+0xe0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d108      	bne.n	80042ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a27      	ldr	r2, [pc, #156]	; (800435c <TIM_Base_SetConfig+0xdc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <TIM_Base_SetConfig+0x6a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d00f      	beq.n	80042ea <TIM_Base_SetConfig+0x6a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a24      	ldr	r2, [pc, #144]	; (8004360 <TIM_Base_SetConfig+0xe0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00b      	beq.n	80042ea <TIM_Base_SetConfig+0x6a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a23      	ldr	r2, [pc, #140]	; (8004364 <TIM_Base_SetConfig+0xe4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <TIM_Base_SetConfig+0x6a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <TIM_Base_SetConfig+0xe8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_Base_SetConfig+0x6a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a21      	ldr	r2, [pc, #132]	; (800436c <TIM_Base_SetConfig+0xec>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0e      	ldr	r2, [pc, #56]	; (800435c <TIM_Base_SetConfig+0xdc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00b      	beq.n	8004340 <TIM_Base_SetConfig+0xc0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <TIM_Base_SetConfig+0xe4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d007      	beq.n	8004340 <TIM_Base_SetConfig+0xc0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <TIM_Base_SetConfig+0xe8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_Base_SetConfig+0xc0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0c      	ldr	r2, [pc, #48]	; (800436c <TIM_Base_SetConfig+0xec>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d103      	bne.n	8004348 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	615a      	str	r2, [r3, #20]
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40000400 	.word	0x40000400
 8004364:	40014000 	.word	0x40014000
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800

08004370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004384:	2302      	movs	r3, #2
 8004386:	e054      	b.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a24      	ldr	r2, [pc, #144]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d009      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a11      	ldr	r2, [pc, #68]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10c      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40000400 	.word	0x40000400
 8004448:	40014000 	.word	0x40014000

0800444c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e040      	b.n	800451c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fc fe2c 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2224      	movs	r2, #36	; 0x24
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fb32 	bl	8004b30 <UART_SetConfig>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e022      	b.n	800451c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fc5c 	bl	8004d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fce3 	bl	8004ee0 <UART_CheckIdleState>
 800451a:	4603      	mov	r3, r0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b0ba      	sub	sp, #232	; 0xe8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800454a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800454e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004552:	4013      	ands	r3, r2
 8004554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d115      	bne.n	800458c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00f      	beq.n	800458c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800456c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 82ab 	beq.w	8004ad8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
      }
      return;
 800458a:	e2a5      	b.n	8004ad8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800458c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8117 	beq.w	80047c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045a6:	4b85      	ldr	r3, [pc, #532]	; (80047bc <HAL_UART_IRQHandler+0x298>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 810a 	beq.w	80047c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d011      	beq.n	80045e0 <HAL_UART_IRQHandler+0xbc>
 80045bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00b      	beq.n	80045e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2201      	movs	r2, #1
 80045ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d6:	f043 0201 	orr.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d011      	beq.n	8004610 <HAL_UART_IRQHandler+0xec>
 80045ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2202      	movs	r2, #2
 80045fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d011      	beq.n	8004640 <HAL_UART_IRQHandler+0x11c>
 800461c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2204      	movs	r2, #4
 800462e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d017      	beq.n	800467c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2208      	movs	r2, #8
 800466a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004672:	f043 0208 	orr.w	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800467c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004684:	2b00      	cmp	r3, #0
 8004686:	d012      	beq.n	80046ae <HAL_UART_IRQHandler+0x18a>
 8004688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800469c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8211 	beq.w	8004adc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04f      	beq.n	80047a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fcf9 	bl	80050fe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d141      	bne.n	800479e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800474a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800475e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1d9      	bne.n	800471a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476a:	2b00      	cmp	r3, #0
 800476c:	d013      	beq.n	8004796 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004772:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <HAL_UART_IRQHandler+0x29c>)
 8004774:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	4618      	mov	r0, r3
 800477c:	f7fd fe07 	bl	800238e <HAL_DMA_Abort_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e00f      	b.n	80047b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9b4 	bl	8004b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	e00b      	b.n	80047b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9b0 	bl	8004b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e007      	b.n	80047b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9ac 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047b4:	e192      	b.n	8004adc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b6:	bf00      	nop
    return;
 80047b8:	e190      	b.n	8004adc <HAL_UART_IRQHandler+0x5b8>
 80047ba:	bf00      	nop
 80047bc:	04000120 	.word	0x04000120
 80047c0:	080051c7 	.word	0x080051c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 814b 	bne.w	8004a64 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8144 	beq.w	8004a64 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 813d 	beq.w	8004a64 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2210      	movs	r2, #16
 80047f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	f040 80b5 	bne.w	800496c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800480e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8164 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800481e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004822:	429a      	cmp	r2, r3
 8004824:	f080 815c 	bcs.w	8004ae0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800482e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b20      	cmp	r3, #32
 800483a:	f000 8086 	beq.w	800494a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800486c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004874:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1da      	bne.n	800483e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e1      	bne.n	8004888 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e3      	bne.n	80048c4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491a:	f023 0310 	bic.w	r3, r3, #16
 800491e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800492c:	65bb      	str	r3, [r7, #88]	; 0x58
 800492e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800493a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e4      	bne.n	800490a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	4618      	mov	r0, r3
 8004946:	f7fd fce9 	bl	800231c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495c:	b29b      	uxth	r3, r3
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	b29b      	uxth	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8d7 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800496a:	e0b9      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004978:	b29b      	uxth	r3, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80ab 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800498e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80a6 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ba:	647b      	str	r3, [r7, #68]	; 0x44
 80049bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e4      	bne.n	8004998 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3308      	adds	r3, #8
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	623b      	str	r3, [r7, #32]
   return(result);
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049f2:	633a      	str	r2, [r7, #48]	; 0x30
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e3      	bne.n	80049ce <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0310 	bic.w	r3, r3, #16
 8004a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	69b9      	ldr	r1, [r7, #24]
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e4      	bne.n	8004a1a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f85b 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a62:	e03f      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00e      	beq.n	8004a8e <HAL_UART_IRQHandler+0x56a>
 8004a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fbdd 	bl	8005246 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a8c:	e02d      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01c      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
    }
    return;
 8004ab6:	e017      	b.n	8004ae8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <HAL_UART_IRQHandler+0x5c6>
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fb8e 	bl	80051f2 <UART_EndTransmit_IT>
    return;
 8004ad6:	e008      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ad8:	bf00      	nop
 8004ada:	e006      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
    return;
 8004adc:	bf00      	nop
 8004ade:	e004      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ae0:	bf00      	nop
 8004ae2:	e002      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ae8:	bf00      	nop
  }

}
 8004aea:	37e8      	adds	r7, #232	; 0xe8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b8a      	ldr	r3, [pc, #552]	; (8004d84 <UART_SetConfig+0x254>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	6979      	ldr	r1, [r7, #20]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a78      	ldr	r2, [pc, #480]	; (8004d88 <UART_SetConfig+0x258>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d120      	bne.n	8004bee <UART_SetConfig+0xbe>
 8004bac:	4b77      	ldr	r3, [pc, #476]	; (8004d8c <UART_SetConfig+0x25c>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d817      	bhi.n	8004be8 <UART_SetConfig+0xb8>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x90>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bd1 	.word	0x08004bd1
 8004bc4:	08004bdd 	.word	0x08004bdd
 8004bc8:	08004be3 	.word	0x08004be3
 8004bcc:	08004bd7 	.word	0x08004bd7
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	e01d      	b.n	8004c12 <UART_SetConfig+0xe2>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	77fb      	strb	r3, [r7, #31]
 8004bda:	e01a      	b.n	8004c12 <UART_SetConfig+0xe2>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e017      	b.n	8004c12 <UART_SetConfig+0xe2>
 8004be2:	2308      	movs	r3, #8
 8004be4:	77fb      	strb	r3, [r7, #31]
 8004be6:	e014      	b.n	8004c12 <UART_SetConfig+0xe2>
 8004be8:	2310      	movs	r3, #16
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e011      	b.n	8004c12 <UART_SetConfig+0xe2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a67      	ldr	r2, [pc, #412]	; (8004d90 <UART_SetConfig+0x260>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d102      	bne.n	8004bfe <UART_SetConfig+0xce>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e009      	b.n	8004c12 <UART_SetConfig+0xe2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a64      	ldr	r2, [pc, #400]	; (8004d94 <UART_SetConfig+0x264>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d102      	bne.n	8004c0e <UART_SetConfig+0xde>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e001      	b.n	8004c12 <UART_SetConfig+0xe2>
 8004c0e:	2310      	movs	r3, #16
 8004c10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1a:	d15a      	bne.n	8004cd2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004c1c:	7ffb      	ldrb	r3, [r7, #31]
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d827      	bhi.n	8004c72 <UART_SetConfig+0x142>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0xf8>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c4d 	.word	0x08004c4d
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	08004c5d 	.word	0x08004c5d
 8004c34:	08004c73 	.word	0x08004c73
 8004c38:	08004c63 	.word	0x08004c63
 8004c3c:	08004c73 	.word	0x08004c73
 8004c40:	08004c73 	.word	0x08004c73
 8004c44:	08004c73 	.word	0x08004c73
 8004c48:	08004c6b 	.word	0x08004c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f7fe ffb2 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8004c50:	61b8      	str	r0, [r7, #24]
        break;
 8004c52:	e013      	b.n	8004c7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c54:	f7fe ffd0 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8004c58:	61b8      	str	r0, [r7, #24]
        break;
 8004c5a:	e00f      	b.n	8004c7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c5c:	4b4e      	ldr	r3, [pc, #312]	; (8004d98 <UART_SetConfig+0x268>)
 8004c5e:	61bb      	str	r3, [r7, #24]
        break;
 8004c60:	e00c      	b.n	8004c7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c62:	f7fe ff31 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8004c66:	61b8      	str	r0, [r7, #24]
        break;
 8004c68:	e008      	b.n	8004c7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6e:	61bb      	str	r3, [r7, #24]
        break;
 8004c70:	e004      	b.n	8004c7c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	77bb      	strb	r3, [r7, #30]
        break;
 8004c7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d074      	beq.n	8004d6c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	005a      	lsls	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b0f      	cmp	r3, #15
 8004c9c:	d916      	bls.n	8004ccc <UART_SetConfig+0x19c>
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca4:	d212      	bcs.n	8004ccc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f023 030f 	bic.w	r3, r3, #15
 8004cae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	89fb      	ldrh	r3, [r7, #14]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	89fa      	ldrh	r2, [r7, #14]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	e04f      	b.n	8004d6c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	77bb      	strb	r3, [r7, #30]
 8004cd0:	e04c      	b.n	8004d6c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cd2:	7ffb      	ldrb	r3, [r7, #31]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d828      	bhi.n	8004d2a <UART_SetConfig+0x1fa>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0x1b0>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004d05 	.word	0x08004d05
 8004ce4:	08004d0d 	.word	0x08004d0d
 8004ce8:	08004d15 	.word	0x08004d15
 8004cec:	08004d2b 	.word	0x08004d2b
 8004cf0:	08004d1b 	.word	0x08004d1b
 8004cf4:	08004d2b 	.word	0x08004d2b
 8004cf8:	08004d2b 	.word	0x08004d2b
 8004cfc:	08004d2b 	.word	0x08004d2b
 8004d00:	08004d23 	.word	0x08004d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7fe ff56 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8004d08:	61b8      	str	r0, [r7, #24]
        break;
 8004d0a:	e013      	b.n	8004d34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d0c:	f7fe ff74 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8004d10:	61b8      	str	r0, [r7, #24]
        break;
 8004d12:	e00f      	b.n	8004d34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <UART_SetConfig+0x268>)
 8004d16:	61bb      	str	r3, [r7, #24]
        break;
 8004d18:	e00c      	b.n	8004d34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1a:	f7fe fed5 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8004d1e:	61b8      	str	r0, [r7, #24]
        break;
 8004d20:	e008      	b.n	8004d34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d26:	61bb      	str	r3, [r7, #24]
        break;
 8004d28:	e004      	b.n	8004d34 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	77bb      	strb	r3, [r7, #30]
        break;
 8004d32:	bf00      	nop
    }

    if (pclk != 0U)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d018      	beq.n	8004d6c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	085a      	lsrs	r2, r3, #1
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d909      	bls.n	8004d68 <UART_SetConfig+0x238>
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5a:	d205      	bcs.n	8004d68 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60da      	str	r2, [r3, #12]
 8004d66:	e001      	b.n	8004d6c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d78:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	efff69f3 	.word	0xefff69f3
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40004400 	.word	0x40004400
 8004d94:	40004800 	.word	0x40004800
 8004d98:	007a1200 	.word	0x007a1200

08004d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9a:	d10a      	bne.n	8004eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b098      	sub	sp, #96	; 0x60
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef0:	f7fc faf0 	bl	80014d4 <HAL_GetTick>
 8004ef4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d12e      	bne.n	8004f62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f88c 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d021      	beq.n	8004f62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f32:	653b      	str	r3, [r7, #80]	; 0x50
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e062      	b.n	8005028 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d149      	bne.n	8005004 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f856 	bl	8005030 <UART_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d03c      	beq.n	8005004 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	623b      	str	r3, [r7, #32]
   return(result);
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004faa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e6      	bne.n	8004f8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fdc:	61fa      	str	r2, [r7, #28]
 8004fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e011      	b.n	8005028 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3758      	adds	r7, #88	; 0x58
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005040:	e049      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d045      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504a:	f7fc fa43 	bl	80014d4 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <UART_WaitOnFlagUntilTimeout+0x30>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e048      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d031      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b08      	cmp	r3, #8
 800507e:	d110      	bne.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2208      	movs	r2, #8
 8005086:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f838 	bl	80050fe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2208      	movs	r2, #8
 8005092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e029      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b0:	d111      	bne.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f81e 	bl	80050fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e00f      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d0a6      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050fe:	b480      	push	{r7}
 8005100:	b095      	sub	sp, #84	; 0x54
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005124:	643b      	str	r3, [r7, #64]	; 0x40
 8005126:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800512a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e6      	bne.n	8005106 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3308      	adds	r3, #8
 800513e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	61fb      	str	r3, [r7, #28]
   return(result);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3308      	adds	r3, #8
 8005156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005170:	2b01      	cmp	r3, #1
 8005172:	d118      	bne.n	80051a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	60bb      	str	r3, [r7, #8]
   return(result);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f023 0310 	bic.w	r3, r3, #16
 8005188:	647b      	str	r3, [r7, #68]	; 0x44
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6979      	ldr	r1, [r7, #20]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	613b      	str	r3, [r7, #16]
   return(result);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e6      	bne.n	8005174 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051ba:	bf00      	nop
 80051bc:	3754      	adds	r7, #84	; 0x54
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fc8d 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b088      	sub	sp, #32
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	60bb      	str	r3, [r7, #8]
   return(result);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6979      	ldr	r1, [r7, #20]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	613b      	str	r3, [r7, #16]
   return(result);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e6      	bne.n	80051fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fc59 	bl	8004af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800523e:	bf00      	nop
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <__cvt>:
 800525a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800525e:	ec55 4b10 	vmov	r4, r5, d0
 8005262:	2d00      	cmp	r5, #0
 8005264:	460e      	mov	r6, r1
 8005266:	4619      	mov	r1, r3
 8005268:	462b      	mov	r3, r5
 800526a:	bfbb      	ittet	lt
 800526c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005270:	461d      	movlt	r5, r3
 8005272:	2300      	movge	r3, #0
 8005274:	232d      	movlt	r3, #45	; 0x2d
 8005276:	700b      	strb	r3, [r1, #0]
 8005278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800527a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800527e:	4691      	mov	r9, r2
 8005280:	f023 0820 	bic.w	r8, r3, #32
 8005284:	bfbc      	itt	lt
 8005286:	4622      	movlt	r2, r4
 8005288:	4614      	movlt	r4, r2
 800528a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800528e:	d005      	beq.n	800529c <__cvt+0x42>
 8005290:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005294:	d100      	bne.n	8005298 <__cvt+0x3e>
 8005296:	3601      	adds	r6, #1
 8005298:	2102      	movs	r1, #2
 800529a:	e000      	b.n	800529e <__cvt+0x44>
 800529c:	2103      	movs	r1, #3
 800529e:	ab03      	add	r3, sp, #12
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	ab02      	add	r3, sp, #8
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	ec45 4b10 	vmov	d0, r4, r5
 80052aa:	4653      	mov	r3, sl
 80052ac:	4632      	mov	r2, r6
 80052ae:	f000 fe4b 	bl	8005f48 <_dtoa_r>
 80052b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052b6:	4607      	mov	r7, r0
 80052b8:	d102      	bne.n	80052c0 <__cvt+0x66>
 80052ba:	f019 0f01 	tst.w	r9, #1
 80052be:	d022      	beq.n	8005306 <__cvt+0xac>
 80052c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052c4:	eb07 0906 	add.w	r9, r7, r6
 80052c8:	d110      	bne.n	80052ec <__cvt+0x92>
 80052ca:	783b      	ldrb	r3, [r7, #0]
 80052cc:	2b30      	cmp	r3, #48	; 0x30
 80052ce:	d10a      	bne.n	80052e6 <__cvt+0x8c>
 80052d0:	2200      	movs	r2, #0
 80052d2:	2300      	movs	r3, #0
 80052d4:	4620      	mov	r0, r4
 80052d6:	4629      	mov	r1, r5
 80052d8:	f7fb fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80052dc:	b918      	cbnz	r0, 80052e6 <__cvt+0x8c>
 80052de:	f1c6 0601 	rsb	r6, r6, #1
 80052e2:	f8ca 6000 	str.w	r6, [sl]
 80052e6:	f8da 3000 	ldr.w	r3, [sl]
 80052ea:	4499      	add	r9, r3
 80052ec:	2200      	movs	r2, #0
 80052ee:	2300      	movs	r3, #0
 80052f0:	4620      	mov	r0, r4
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fb fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80052f8:	b108      	cbz	r0, 80052fe <__cvt+0xa4>
 80052fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80052fe:	2230      	movs	r2, #48	; 0x30
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	454b      	cmp	r3, r9
 8005304:	d307      	bcc.n	8005316 <__cvt+0xbc>
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800530a:	1bdb      	subs	r3, r3, r7
 800530c:	4638      	mov	r0, r7
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	b004      	add	sp, #16
 8005312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005316:	1c59      	adds	r1, r3, #1
 8005318:	9103      	str	r1, [sp, #12]
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	e7f0      	b.n	8005300 <__cvt+0xa6>

0800531e <__exponent>:
 800531e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005320:	4603      	mov	r3, r0
 8005322:	2900      	cmp	r1, #0
 8005324:	bfb8      	it	lt
 8005326:	4249      	neglt	r1, r1
 8005328:	f803 2b02 	strb.w	r2, [r3], #2
 800532c:	bfb4      	ite	lt
 800532e:	222d      	movlt	r2, #45	; 0x2d
 8005330:	222b      	movge	r2, #43	; 0x2b
 8005332:	2909      	cmp	r1, #9
 8005334:	7042      	strb	r2, [r0, #1]
 8005336:	dd2a      	ble.n	800538e <__exponent+0x70>
 8005338:	f10d 0207 	add.w	r2, sp, #7
 800533c:	4617      	mov	r7, r2
 800533e:	260a      	movs	r6, #10
 8005340:	4694      	mov	ip, r2
 8005342:	fb91 f5f6 	sdiv	r5, r1, r6
 8005346:	fb06 1415 	mls	r4, r6, r5, r1
 800534a:	3430      	adds	r4, #48	; 0x30
 800534c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005350:	460c      	mov	r4, r1
 8005352:	2c63      	cmp	r4, #99	; 0x63
 8005354:	f102 32ff 	add.w	r2, r2, #4294967295
 8005358:	4629      	mov	r1, r5
 800535a:	dcf1      	bgt.n	8005340 <__exponent+0x22>
 800535c:	3130      	adds	r1, #48	; 0x30
 800535e:	f1ac 0402 	sub.w	r4, ip, #2
 8005362:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005366:	1c41      	adds	r1, r0, #1
 8005368:	4622      	mov	r2, r4
 800536a:	42ba      	cmp	r2, r7
 800536c:	d30a      	bcc.n	8005384 <__exponent+0x66>
 800536e:	f10d 0209 	add.w	r2, sp, #9
 8005372:	eba2 020c 	sub.w	r2, r2, ip
 8005376:	42bc      	cmp	r4, r7
 8005378:	bf88      	it	hi
 800537a:	2200      	movhi	r2, #0
 800537c:	4413      	add	r3, r2
 800537e:	1a18      	subs	r0, r3, r0
 8005380:	b003      	add	sp, #12
 8005382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005384:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005388:	f801 5f01 	strb.w	r5, [r1, #1]!
 800538c:	e7ed      	b.n	800536a <__exponent+0x4c>
 800538e:	2330      	movs	r3, #48	; 0x30
 8005390:	3130      	adds	r1, #48	; 0x30
 8005392:	7083      	strb	r3, [r0, #2]
 8005394:	70c1      	strb	r1, [r0, #3]
 8005396:	1d03      	adds	r3, r0, #4
 8005398:	e7f1      	b.n	800537e <__exponent+0x60>
	...

0800539c <_printf_float>:
 800539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a0:	ed2d 8b02 	vpush	{d8}
 80053a4:	b08d      	sub	sp, #52	; 0x34
 80053a6:	460c      	mov	r4, r1
 80053a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053ac:	4616      	mov	r6, r2
 80053ae:	461f      	mov	r7, r3
 80053b0:	4605      	mov	r5, r0
 80053b2:	f000 fcc7 	bl	8005d44 <_localeconv_r>
 80053b6:	f8d0 a000 	ldr.w	sl, [r0]
 80053ba:	4650      	mov	r0, sl
 80053bc:	f7fa ff58 	bl	8000270 <strlen>
 80053c0:	2300      	movs	r3, #0
 80053c2:	930a      	str	r3, [sp, #40]	; 0x28
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	9305      	str	r3, [sp, #20]
 80053c8:	f8d8 3000 	ldr.w	r3, [r8]
 80053cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053d0:	3307      	adds	r3, #7
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	f103 0208 	add.w	r2, r3, #8
 80053da:	f8c8 2000 	str.w	r2, [r8]
 80053de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053e6:	9307      	str	r3, [sp, #28]
 80053e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80053ec:	ee08 0a10 	vmov	s16, r0
 80053f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80053f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f8:	4b9e      	ldr	r3, [pc, #632]	; (8005674 <_printf_float+0x2d8>)
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295
 80053fe:	f7fb fb95 	bl	8000b2c <__aeabi_dcmpun>
 8005402:	bb88      	cbnz	r0, 8005468 <_printf_float+0xcc>
 8005404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005408:	4b9a      	ldr	r3, [pc, #616]	; (8005674 <_printf_float+0x2d8>)
 800540a:	f04f 32ff 	mov.w	r2, #4294967295
 800540e:	f7fb fb6f 	bl	8000af0 <__aeabi_dcmple>
 8005412:	bb48      	cbnz	r0, 8005468 <_printf_float+0xcc>
 8005414:	2200      	movs	r2, #0
 8005416:	2300      	movs	r3, #0
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fb fb5e 	bl	8000adc <__aeabi_dcmplt>
 8005420:	b110      	cbz	r0, 8005428 <_printf_float+0x8c>
 8005422:	232d      	movs	r3, #45	; 0x2d
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	4a93      	ldr	r2, [pc, #588]	; (8005678 <_printf_float+0x2dc>)
 800542a:	4b94      	ldr	r3, [pc, #592]	; (800567c <_printf_float+0x2e0>)
 800542c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005430:	bf94      	ite	ls
 8005432:	4690      	movls	r8, r2
 8005434:	4698      	movhi	r8, r3
 8005436:	2303      	movs	r3, #3
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	9b05      	ldr	r3, [sp, #20]
 800543c:	f023 0304 	bic.w	r3, r3, #4
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	f04f 0900 	mov.w	r9, #0
 8005446:	9700      	str	r7, [sp, #0]
 8005448:	4633      	mov	r3, r6
 800544a:	aa0b      	add	r2, sp, #44	; 0x2c
 800544c:	4621      	mov	r1, r4
 800544e:	4628      	mov	r0, r5
 8005450:	f000 f9da 	bl	8005808 <_printf_common>
 8005454:	3001      	adds	r0, #1
 8005456:	f040 8090 	bne.w	800557a <_printf_float+0x1de>
 800545a:	f04f 30ff 	mov.w	r0, #4294967295
 800545e:	b00d      	add	sp, #52	; 0x34
 8005460:	ecbd 8b02 	vpop	{d8}
 8005464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fb fb5c 	bl	8000b2c <__aeabi_dcmpun>
 8005474:	b140      	cbz	r0, 8005488 <_printf_float+0xec>
 8005476:	464b      	mov	r3, r9
 8005478:	2b00      	cmp	r3, #0
 800547a:	bfbc      	itt	lt
 800547c:	232d      	movlt	r3, #45	; 0x2d
 800547e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005482:	4a7f      	ldr	r2, [pc, #508]	; (8005680 <_printf_float+0x2e4>)
 8005484:	4b7f      	ldr	r3, [pc, #508]	; (8005684 <_printf_float+0x2e8>)
 8005486:	e7d1      	b.n	800542c <_printf_float+0x90>
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800548e:	9206      	str	r2, [sp, #24]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	d13f      	bne.n	8005514 <_printf_float+0x178>
 8005494:	2306      	movs	r3, #6
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	9b05      	ldr	r3, [sp, #20]
 800549a:	6861      	ldr	r1, [r4, #4]
 800549c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054a0:	2300      	movs	r3, #0
 80054a2:	9303      	str	r3, [sp, #12]
 80054a4:	ab0a      	add	r3, sp, #40	; 0x28
 80054a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054aa:	ab09      	add	r3, sp, #36	; 0x24
 80054ac:	ec49 8b10 	vmov	d0, r8, r9
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054b8:	4628      	mov	r0, r5
 80054ba:	f7ff fece 	bl	800525a <__cvt>
 80054be:	9b06      	ldr	r3, [sp, #24]
 80054c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054c2:	2b47      	cmp	r3, #71	; 0x47
 80054c4:	4680      	mov	r8, r0
 80054c6:	d108      	bne.n	80054da <_printf_float+0x13e>
 80054c8:	1cc8      	adds	r0, r1, #3
 80054ca:	db02      	blt.n	80054d2 <_printf_float+0x136>
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	4299      	cmp	r1, r3
 80054d0:	dd41      	ble.n	8005556 <_printf_float+0x1ba>
 80054d2:	f1ab 0302 	sub.w	r3, fp, #2
 80054d6:	fa5f fb83 	uxtb.w	fp, r3
 80054da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054de:	d820      	bhi.n	8005522 <_printf_float+0x186>
 80054e0:	3901      	subs	r1, #1
 80054e2:	465a      	mov	r2, fp
 80054e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054e8:	9109      	str	r1, [sp, #36]	; 0x24
 80054ea:	f7ff ff18 	bl	800531e <__exponent>
 80054ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054f0:	1813      	adds	r3, r2, r0
 80054f2:	2a01      	cmp	r2, #1
 80054f4:	4681      	mov	r9, r0
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	dc02      	bgt.n	8005500 <_printf_float+0x164>
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	07d2      	lsls	r2, r2, #31
 80054fe:	d501      	bpl.n	8005504 <_printf_float+0x168>
 8005500:	3301      	adds	r3, #1
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005508:	2b00      	cmp	r3, #0
 800550a:	d09c      	beq.n	8005446 <_printf_float+0xaa>
 800550c:	232d      	movs	r3, #45	; 0x2d
 800550e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005512:	e798      	b.n	8005446 <_printf_float+0xaa>
 8005514:	9a06      	ldr	r2, [sp, #24]
 8005516:	2a47      	cmp	r2, #71	; 0x47
 8005518:	d1be      	bne.n	8005498 <_printf_float+0xfc>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1bc      	bne.n	8005498 <_printf_float+0xfc>
 800551e:	2301      	movs	r3, #1
 8005520:	e7b9      	b.n	8005496 <_printf_float+0xfa>
 8005522:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005526:	d118      	bne.n	800555a <_printf_float+0x1be>
 8005528:	2900      	cmp	r1, #0
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	dd0b      	ble.n	8005546 <_printf_float+0x1aa>
 800552e:	6121      	str	r1, [r4, #16]
 8005530:	b913      	cbnz	r3, 8005538 <_printf_float+0x19c>
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	07d0      	lsls	r0, r2, #31
 8005536:	d502      	bpl.n	800553e <_printf_float+0x1a2>
 8005538:	3301      	adds	r3, #1
 800553a:	440b      	add	r3, r1
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005540:	f04f 0900 	mov.w	r9, #0
 8005544:	e7de      	b.n	8005504 <_printf_float+0x168>
 8005546:	b913      	cbnz	r3, 800554e <_printf_float+0x1b2>
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	07d2      	lsls	r2, r2, #31
 800554c:	d501      	bpl.n	8005552 <_printf_float+0x1b6>
 800554e:	3302      	adds	r3, #2
 8005550:	e7f4      	b.n	800553c <_printf_float+0x1a0>
 8005552:	2301      	movs	r3, #1
 8005554:	e7f2      	b.n	800553c <_printf_float+0x1a0>
 8005556:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555c:	4299      	cmp	r1, r3
 800555e:	db05      	blt.n	800556c <_printf_float+0x1d0>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	6121      	str	r1, [r4, #16]
 8005564:	07d8      	lsls	r0, r3, #31
 8005566:	d5ea      	bpl.n	800553e <_printf_float+0x1a2>
 8005568:	1c4b      	adds	r3, r1, #1
 800556a:	e7e7      	b.n	800553c <_printf_float+0x1a0>
 800556c:	2900      	cmp	r1, #0
 800556e:	bfd4      	ite	le
 8005570:	f1c1 0202 	rsble	r2, r1, #2
 8005574:	2201      	movgt	r2, #1
 8005576:	4413      	add	r3, r2
 8005578:	e7e0      	b.n	800553c <_printf_float+0x1a0>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	055a      	lsls	r2, r3, #21
 800557e:	d407      	bmi.n	8005590 <_printf_float+0x1f4>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	4642      	mov	r2, r8
 8005584:	4631      	mov	r1, r6
 8005586:	4628      	mov	r0, r5
 8005588:	47b8      	blx	r7
 800558a:	3001      	adds	r0, #1
 800558c:	d12c      	bne.n	80055e8 <_printf_float+0x24c>
 800558e:	e764      	b.n	800545a <_printf_float+0xbe>
 8005590:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005594:	f240 80e0 	bls.w	8005758 <_printf_float+0x3bc>
 8005598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800559c:	2200      	movs	r2, #0
 800559e:	2300      	movs	r3, #0
 80055a0:	f7fb fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d034      	beq.n	8005612 <_printf_float+0x276>
 80055a8:	4a37      	ldr	r2, [pc, #220]	; (8005688 <_printf_float+0x2ec>)
 80055aa:	2301      	movs	r3, #1
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f af51 	beq.w	800545a <_printf_float+0xbe>
 80055b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055bc:	429a      	cmp	r2, r3
 80055be:	db02      	blt.n	80055c6 <_printf_float+0x22a>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	07d8      	lsls	r0, r3, #31
 80055c4:	d510      	bpl.n	80055e8 <_printf_float+0x24c>
 80055c6:	ee18 3a10 	vmov	r3, s16
 80055ca:	4652      	mov	r2, sl
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f af41 	beq.w	800545a <_printf_float+0xbe>
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	f104 091a 	add.w	r9, r4, #26
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4543      	cmp	r3, r8
 80055e6:	dc09      	bgt.n	80055fc <_printf_float+0x260>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	079b      	lsls	r3, r3, #30
 80055ec:	f100 8107 	bmi.w	80057fe <_printf_float+0x462>
 80055f0:	68e0      	ldr	r0, [r4, #12]
 80055f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f4:	4298      	cmp	r0, r3
 80055f6:	bfb8      	it	lt
 80055f8:	4618      	movlt	r0, r3
 80055fa:	e730      	b.n	800545e <_printf_float+0xc2>
 80055fc:	2301      	movs	r3, #1
 80055fe:	464a      	mov	r2, r9
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f af27 	beq.w	800545a <_printf_float+0xbe>
 800560c:	f108 0801 	add.w	r8, r8, #1
 8005610:	e7e6      	b.n	80055e0 <_printf_float+0x244>
 8005612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	dc39      	bgt.n	800568c <_printf_float+0x2f0>
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <_printf_float+0x2ec>)
 800561a:	2301      	movs	r3, #1
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f af19 	beq.w	800545a <_printf_float+0xbe>
 8005628:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800562c:	4313      	orrs	r3, r2
 800562e:	d102      	bne.n	8005636 <_printf_float+0x29a>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	07d9      	lsls	r1, r3, #31
 8005634:	d5d8      	bpl.n	80055e8 <_printf_float+0x24c>
 8005636:	ee18 3a10 	vmov	r3, s16
 800563a:	4652      	mov	r2, sl
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af09 	beq.w	800545a <_printf_float+0xbe>
 8005648:	f04f 0900 	mov.w	r9, #0
 800564c:	f104 0a1a 	add.w	sl, r4, #26
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	425b      	negs	r3, r3
 8005654:	454b      	cmp	r3, r9
 8005656:	dc01      	bgt.n	800565c <_printf_float+0x2c0>
 8005658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565a:	e792      	b.n	8005582 <_printf_float+0x1e6>
 800565c:	2301      	movs	r3, #1
 800565e:	4652      	mov	r2, sl
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f aef7 	beq.w	800545a <_printf_float+0xbe>
 800566c:	f109 0901 	add.w	r9, r9, #1
 8005670:	e7ee      	b.n	8005650 <_printf_float+0x2b4>
 8005672:	bf00      	nop
 8005674:	7fefffff 	.word	0x7fefffff
 8005678:	08007c28 	.word	0x08007c28
 800567c:	08007c2c 	.word	0x08007c2c
 8005680:	08007c30 	.word	0x08007c30
 8005684:	08007c34 	.word	0x08007c34
 8005688:	08007c38 	.word	0x08007c38
 800568c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800568e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005690:	429a      	cmp	r2, r3
 8005692:	bfa8      	it	ge
 8005694:	461a      	movge	r2, r3
 8005696:	2a00      	cmp	r2, #0
 8005698:	4691      	mov	r9, r2
 800569a:	dc37      	bgt.n	800570c <_printf_float+0x370>
 800569c:	f04f 0b00 	mov.w	fp, #0
 80056a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a4:	f104 021a 	add.w	r2, r4, #26
 80056a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056aa:	9305      	str	r3, [sp, #20]
 80056ac:	eba3 0309 	sub.w	r3, r3, r9
 80056b0:	455b      	cmp	r3, fp
 80056b2:	dc33      	bgt.n	800571c <_printf_float+0x380>
 80056b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b8:	429a      	cmp	r2, r3
 80056ba:	db3b      	blt.n	8005734 <_printf_float+0x398>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07da      	lsls	r2, r3, #31
 80056c0:	d438      	bmi.n	8005734 <_printf_float+0x398>
 80056c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056c6:	eba2 0903 	sub.w	r9, r2, r3
 80056ca:	9b05      	ldr	r3, [sp, #20]
 80056cc:	1ad2      	subs	r2, r2, r3
 80056ce:	4591      	cmp	r9, r2
 80056d0:	bfa8      	it	ge
 80056d2:	4691      	movge	r9, r2
 80056d4:	f1b9 0f00 	cmp.w	r9, #0
 80056d8:	dc35      	bgt.n	8005746 <_printf_float+0x3aa>
 80056da:	f04f 0800 	mov.w	r8, #0
 80056de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056e2:	f104 0a1a 	add.w	sl, r4, #26
 80056e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	eba3 0309 	sub.w	r3, r3, r9
 80056f0:	4543      	cmp	r3, r8
 80056f2:	f77f af79 	ble.w	80055e8 <_printf_float+0x24c>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f aeaa 	beq.w	800545a <_printf_float+0xbe>
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	e7ec      	b.n	80056e6 <_printf_float+0x34a>
 800570c:	4613      	mov	r3, r2
 800570e:	4631      	mov	r1, r6
 8005710:	4642      	mov	r2, r8
 8005712:	4628      	mov	r0, r5
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	d1c0      	bne.n	800569c <_printf_float+0x300>
 800571a:	e69e      	b.n	800545a <_printf_float+0xbe>
 800571c:	2301      	movs	r3, #1
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	9205      	str	r2, [sp, #20]
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f ae97 	beq.w	800545a <_printf_float+0xbe>
 800572c:	9a05      	ldr	r2, [sp, #20]
 800572e:	f10b 0b01 	add.w	fp, fp, #1
 8005732:	e7b9      	b.n	80056a8 <_printf_float+0x30c>
 8005734:	ee18 3a10 	vmov	r3, s16
 8005738:	4652      	mov	r2, sl
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	d1be      	bne.n	80056c2 <_printf_float+0x326>
 8005744:	e689      	b.n	800545a <_printf_float+0xbe>
 8005746:	9a05      	ldr	r2, [sp, #20]
 8005748:	464b      	mov	r3, r9
 800574a:	4442      	add	r2, r8
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	d1c1      	bne.n	80056da <_printf_float+0x33e>
 8005756:	e680      	b.n	800545a <_printf_float+0xbe>
 8005758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800575a:	2a01      	cmp	r2, #1
 800575c:	dc01      	bgt.n	8005762 <_printf_float+0x3c6>
 800575e:	07db      	lsls	r3, r3, #31
 8005760:	d53a      	bpl.n	80057d8 <_printf_float+0x43c>
 8005762:	2301      	movs	r3, #1
 8005764:	4642      	mov	r2, r8
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f ae74 	beq.w	800545a <_printf_float+0xbe>
 8005772:	ee18 3a10 	vmov	r3, s16
 8005776:	4652      	mov	r2, sl
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f ae6b 	beq.w	800545a <_printf_float+0xbe>
 8005784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005790:	f7fb f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005794:	b9d8      	cbnz	r0, 80057ce <_printf_float+0x432>
 8005796:	f10a 33ff 	add.w	r3, sl, #4294967295
 800579a:	f108 0201 	add.w	r2, r8, #1
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	d10e      	bne.n	80057c6 <_printf_float+0x42a>
 80057a8:	e657      	b.n	800545a <_printf_float+0xbe>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4652      	mov	r2, sl
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	f43f ae50 	beq.w	800545a <_printf_float+0xbe>
 80057ba:	f108 0801 	add.w	r8, r8, #1
 80057be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c0:	3b01      	subs	r3, #1
 80057c2:	4543      	cmp	r3, r8
 80057c4:	dcf1      	bgt.n	80057aa <_printf_float+0x40e>
 80057c6:	464b      	mov	r3, r9
 80057c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057cc:	e6da      	b.n	8005584 <_printf_float+0x1e8>
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	f104 0a1a 	add.w	sl, r4, #26
 80057d6:	e7f2      	b.n	80057be <_printf_float+0x422>
 80057d8:	2301      	movs	r3, #1
 80057da:	4642      	mov	r2, r8
 80057dc:	e7df      	b.n	800579e <_printf_float+0x402>
 80057de:	2301      	movs	r3, #1
 80057e0:	464a      	mov	r2, r9
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b8      	blx	r7
 80057e8:	3001      	adds	r0, #1
 80057ea:	f43f ae36 	beq.w	800545a <_printf_float+0xbe>
 80057ee:	f108 0801 	add.w	r8, r8, #1
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f6:	1a5b      	subs	r3, r3, r1
 80057f8:	4543      	cmp	r3, r8
 80057fa:	dcf0      	bgt.n	80057de <_printf_float+0x442>
 80057fc:	e6f8      	b.n	80055f0 <_printf_float+0x254>
 80057fe:	f04f 0800 	mov.w	r8, #0
 8005802:	f104 0919 	add.w	r9, r4, #25
 8005806:	e7f4      	b.n	80057f2 <_printf_float+0x456>

08005808 <_printf_common>:
 8005808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	4616      	mov	r6, r2
 800580e:	4699      	mov	r9, r3
 8005810:	688a      	ldr	r2, [r1, #8]
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005818:	4293      	cmp	r3, r2
 800581a:	bfb8      	it	lt
 800581c:	4613      	movlt	r3, r2
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005824:	4607      	mov	r7, r0
 8005826:	460c      	mov	r4, r1
 8005828:	b10a      	cbz	r2, 800582e <_printf_common+0x26>
 800582a:	3301      	adds	r3, #1
 800582c:	6033      	str	r3, [r6, #0]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	0699      	lsls	r1, r3, #26
 8005832:	bf42      	ittt	mi
 8005834:	6833      	ldrmi	r3, [r6, #0]
 8005836:	3302      	addmi	r3, #2
 8005838:	6033      	strmi	r3, [r6, #0]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	f015 0506 	ands.w	r5, r5, #6
 8005840:	d106      	bne.n	8005850 <_printf_common+0x48>
 8005842:	f104 0a19 	add.w	sl, r4, #25
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	6832      	ldr	r2, [r6, #0]
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	42ab      	cmp	r3, r5
 800584e:	dc26      	bgt.n	800589e <_printf_common+0x96>
 8005850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005854:	1e13      	subs	r3, r2, #0
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	bf18      	it	ne
 800585a:	2301      	movne	r3, #1
 800585c:	0692      	lsls	r2, r2, #26
 800585e:	d42b      	bmi.n	80058b8 <_printf_common+0xb0>
 8005860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005864:	4649      	mov	r1, r9
 8005866:	4638      	mov	r0, r7
 8005868:	47c0      	blx	r8
 800586a:	3001      	adds	r0, #1
 800586c:	d01e      	beq.n	80058ac <_printf_common+0xa4>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	6922      	ldr	r2, [r4, #16]
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	2b04      	cmp	r3, #4
 8005878:	bf02      	ittt	eq
 800587a:	68e5      	ldreq	r5, [r4, #12]
 800587c:	6833      	ldreq	r3, [r6, #0]
 800587e:	1aed      	subeq	r5, r5, r3
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	bf0c      	ite	eq
 8005884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005888:	2500      	movne	r5, #0
 800588a:	4293      	cmp	r3, r2
 800588c:	bfc4      	itt	gt
 800588e:	1a9b      	subgt	r3, r3, r2
 8005890:	18ed      	addgt	r5, r5, r3
 8005892:	2600      	movs	r6, #0
 8005894:	341a      	adds	r4, #26
 8005896:	42b5      	cmp	r5, r6
 8005898:	d11a      	bne.n	80058d0 <_printf_common+0xc8>
 800589a:	2000      	movs	r0, #0
 800589c:	e008      	b.n	80058b0 <_printf_common+0xa8>
 800589e:	2301      	movs	r3, #1
 80058a0:	4652      	mov	r2, sl
 80058a2:	4649      	mov	r1, r9
 80058a4:	4638      	mov	r0, r7
 80058a6:	47c0      	blx	r8
 80058a8:	3001      	adds	r0, #1
 80058aa:	d103      	bne.n	80058b4 <_printf_common+0xac>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	3501      	adds	r5, #1
 80058b6:	e7c6      	b.n	8005846 <_printf_common+0x3e>
 80058b8:	18e1      	adds	r1, r4, r3
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	2030      	movs	r0, #48	; 0x30
 80058be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c2:	4422      	add	r2, r4
 80058c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058cc:	3302      	adds	r3, #2
 80058ce:	e7c7      	b.n	8005860 <_printf_common+0x58>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4622      	mov	r2, r4
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d0e6      	beq.n	80058ac <_printf_common+0xa4>
 80058de:	3601      	adds	r6, #1
 80058e0:	e7d9      	b.n	8005896 <_printf_common+0x8e>
	...

080058e4 <_printf_i>:
 80058e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	7e0f      	ldrb	r7, [r1, #24]
 80058ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058ec:	2f78      	cmp	r7, #120	; 0x78
 80058ee:	4691      	mov	r9, r2
 80058f0:	4680      	mov	r8, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	469a      	mov	sl, r3
 80058f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058fa:	d807      	bhi.n	800590c <_printf_i+0x28>
 80058fc:	2f62      	cmp	r7, #98	; 0x62
 80058fe:	d80a      	bhi.n	8005916 <_printf_i+0x32>
 8005900:	2f00      	cmp	r7, #0
 8005902:	f000 80d4 	beq.w	8005aae <_printf_i+0x1ca>
 8005906:	2f58      	cmp	r7, #88	; 0x58
 8005908:	f000 80c0 	beq.w	8005a8c <_printf_i+0x1a8>
 800590c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005914:	e03a      	b.n	800598c <_printf_i+0xa8>
 8005916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800591a:	2b15      	cmp	r3, #21
 800591c:	d8f6      	bhi.n	800590c <_printf_i+0x28>
 800591e:	a101      	add	r1, pc, #4	; (adr r1, 8005924 <_printf_i+0x40>)
 8005920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005924:	0800597d 	.word	0x0800597d
 8005928:	08005991 	.word	0x08005991
 800592c:	0800590d 	.word	0x0800590d
 8005930:	0800590d 	.word	0x0800590d
 8005934:	0800590d 	.word	0x0800590d
 8005938:	0800590d 	.word	0x0800590d
 800593c:	08005991 	.word	0x08005991
 8005940:	0800590d 	.word	0x0800590d
 8005944:	0800590d 	.word	0x0800590d
 8005948:	0800590d 	.word	0x0800590d
 800594c:	0800590d 	.word	0x0800590d
 8005950:	08005a95 	.word	0x08005a95
 8005954:	080059bd 	.word	0x080059bd
 8005958:	08005a4f 	.word	0x08005a4f
 800595c:	0800590d 	.word	0x0800590d
 8005960:	0800590d 	.word	0x0800590d
 8005964:	08005ab7 	.word	0x08005ab7
 8005968:	0800590d 	.word	0x0800590d
 800596c:	080059bd 	.word	0x080059bd
 8005970:	0800590d 	.word	0x0800590d
 8005974:	0800590d 	.word	0x0800590d
 8005978:	08005a57 	.word	0x08005a57
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598c:	2301      	movs	r3, #1
 800598e:	e09f      	b.n	8005ad0 <_printf_i+0x1ec>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	0607      	lsls	r7, r0, #24
 8005996:	f103 0104 	add.w	r1, r3, #4
 800599a:	6029      	str	r1, [r5, #0]
 800599c:	d501      	bpl.n	80059a2 <_printf_i+0xbe>
 800599e:	681e      	ldr	r6, [r3, #0]
 80059a0:	e003      	b.n	80059aa <_printf_i+0xc6>
 80059a2:	0646      	lsls	r6, r0, #25
 80059a4:	d5fb      	bpl.n	800599e <_printf_i+0xba>
 80059a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	da03      	bge.n	80059b6 <_printf_i+0xd2>
 80059ae:	232d      	movs	r3, #45	; 0x2d
 80059b0:	4276      	negs	r6, r6
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b6:	485a      	ldr	r0, [pc, #360]	; (8005b20 <_printf_i+0x23c>)
 80059b8:	230a      	movs	r3, #10
 80059ba:	e012      	b.n	80059e2 <_printf_i+0xfe>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1d19      	adds	r1, r3, #4
 80059c2:	6029      	str	r1, [r5, #0]
 80059c4:	0605      	lsls	r5, r0, #24
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0xe8>
 80059c8:	681e      	ldr	r6, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0xee>
 80059cc:	0641      	lsls	r1, r0, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0xe4>
 80059d0:	881e      	ldrh	r6, [r3, #0]
 80059d2:	4853      	ldr	r0, [pc, #332]	; (8005b20 <_printf_i+0x23c>)
 80059d4:	2f6f      	cmp	r7, #111	; 0x6f
 80059d6:	bf0c      	ite	eq
 80059d8:	2308      	moveq	r3, #8
 80059da:	230a      	movne	r3, #10
 80059dc:	2100      	movs	r1, #0
 80059de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e2:	6865      	ldr	r5, [r4, #4]
 80059e4:	60a5      	str	r5, [r4, #8]
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	bfa2      	ittt	ge
 80059ea:	6821      	ldrge	r1, [r4, #0]
 80059ec:	f021 0104 	bicge.w	r1, r1, #4
 80059f0:	6021      	strge	r1, [r4, #0]
 80059f2:	b90e      	cbnz	r6, 80059f8 <_printf_i+0x114>
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	d04b      	beq.n	8005a90 <_printf_i+0x1ac>
 80059f8:	4615      	mov	r5, r2
 80059fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005a02:	5dc7      	ldrb	r7, [r0, r7]
 8005a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a08:	4637      	mov	r7, r6
 8005a0a:	42bb      	cmp	r3, r7
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	d9f4      	bls.n	80059fa <_printf_i+0x116>
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d10b      	bne.n	8005a2c <_printf_i+0x148>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07de      	lsls	r6, r3, #31
 8005a18:	d508      	bpl.n	8005a2c <_printf_i+0x148>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	6861      	ldr	r1, [r4, #4]
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	bfde      	ittt	le
 8005a22:	2330      	movle	r3, #48	; 0x30
 8005a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a2c:	1b52      	subs	r2, r2, r5
 8005a2e:	6122      	str	r2, [r4, #16]
 8005a30:	f8cd a000 	str.w	sl, [sp]
 8005a34:	464b      	mov	r3, r9
 8005a36:	aa03      	add	r2, sp, #12
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f7ff fee4 	bl	8005808 <_printf_common>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d14a      	bne.n	8005ada <_printf_i+0x1f6>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	b004      	add	sp, #16
 8005a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f043 0320 	orr.w	r3, r3, #32
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	4833      	ldr	r0, [pc, #204]	; (8005b24 <_printf_i+0x240>)
 8005a58:	2778      	movs	r7, #120	; 0x78
 8005a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	6829      	ldr	r1, [r5, #0]
 8005a62:	061f      	lsls	r7, r3, #24
 8005a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a68:	d402      	bmi.n	8005a70 <_printf_i+0x18c>
 8005a6a:	065f      	lsls	r7, r3, #25
 8005a6c:	bf48      	it	mi
 8005a6e:	b2b6      	uxthmi	r6, r6
 8005a70:	07df      	lsls	r7, r3, #31
 8005a72:	bf48      	it	mi
 8005a74:	f043 0320 	orrmi.w	r3, r3, #32
 8005a78:	6029      	str	r1, [r5, #0]
 8005a7a:	bf48      	it	mi
 8005a7c:	6023      	strmi	r3, [r4, #0]
 8005a7e:	b91e      	cbnz	r6, 8005a88 <_printf_i+0x1a4>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	2310      	movs	r3, #16
 8005a8a:	e7a7      	b.n	80059dc <_printf_i+0xf8>
 8005a8c:	4824      	ldr	r0, [pc, #144]	; (8005b20 <_printf_i+0x23c>)
 8005a8e:	e7e4      	b.n	8005a5a <_printf_i+0x176>
 8005a90:	4615      	mov	r5, r2
 8005a92:	e7bd      	b.n	8005a10 <_printf_i+0x12c>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	6826      	ldr	r6, [r4, #0]
 8005a98:	6961      	ldr	r1, [r4, #20]
 8005a9a:	1d18      	adds	r0, r3, #4
 8005a9c:	6028      	str	r0, [r5, #0]
 8005a9e:	0635      	lsls	r5, r6, #24
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	d501      	bpl.n	8005aa8 <_printf_i+0x1c4>
 8005aa4:	6019      	str	r1, [r3, #0]
 8005aa6:	e002      	b.n	8005aae <_printf_i+0x1ca>
 8005aa8:	0670      	lsls	r0, r6, #25
 8005aaa:	d5fb      	bpl.n	8005aa4 <_printf_i+0x1c0>
 8005aac:	8019      	strh	r1, [r3, #0]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	4615      	mov	r5, r2
 8005ab4:	e7bc      	b.n	8005a30 <_printf_i+0x14c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	1d1a      	adds	r2, r3, #4
 8005aba:	602a      	str	r2, [r5, #0]
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	6862      	ldr	r2, [r4, #4]
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7fa fb84 	bl	80001d0 <memchr>
 8005ac8:	b108      	cbz	r0, 8005ace <_printf_i+0x1ea>
 8005aca:	1b40      	subs	r0, r0, r5
 8005acc:	6060      	str	r0, [r4, #4]
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad8:	e7aa      	b.n	8005a30 <_printf_i+0x14c>
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	462a      	mov	r2, r5
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d0ad      	beq.n	8005a44 <_printf_i+0x160>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	079b      	lsls	r3, r3, #30
 8005aec:	d413      	bmi.n	8005b16 <_printf_i+0x232>
 8005aee:	68e0      	ldr	r0, [r4, #12]
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	4298      	cmp	r0, r3
 8005af4:	bfb8      	it	lt
 8005af6:	4618      	movlt	r0, r3
 8005af8:	e7a6      	b.n	8005a48 <_printf_i+0x164>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4632      	mov	r2, r6
 8005afe:	4649      	mov	r1, r9
 8005b00:	4640      	mov	r0, r8
 8005b02:	47d0      	blx	sl
 8005b04:	3001      	adds	r0, #1
 8005b06:	d09d      	beq.n	8005a44 <_printf_i+0x160>
 8005b08:	3501      	adds	r5, #1
 8005b0a:	68e3      	ldr	r3, [r4, #12]
 8005b0c:	9903      	ldr	r1, [sp, #12]
 8005b0e:	1a5b      	subs	r3, r3, r1
 8005b10:	42ab      	cmp	r3, r5
 8005b12:	dcf2      	bgt.n	8005afa <_printf_i+0x216>
 8005b14:	e7eb      	b.n	8005aee <_printf_i+0x20a>
 8005b16:	2500      	movs	r5, #0
 8005b18:	f104 0619 	add.w	r6, r4, #25
 8005b1c:	e7f5      	b.n	8005b0a <_printf_i+0x226>
 8005b1e:	bf00      	nop
 8005b20:	08007c3a 	.word	0x08007c3a
 8005b24:	08007c4b 	.word	0x08007c4b

08005b28 <std>:
 8005b28:	2300      	movs	r3, #0
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b36:	6083      	str	r3, [r0, #8]
 8005b38:	8181      	strh	r1, [r0, #12]
 8005b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b3c:	81c2      	strh	r2, [r0, #14]
 8005b3e:	6183      	str	r3, [r0, #24]
 8005b40:	4619      	mov	r1, r3
 8005b42:	2208      	movs	r2, #8
 8005b44:	305c      	adds	r0, #92	; 0x5c
 8005b46:	f000 f8f4 	bl	8005d32 <memset>
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <std+0x58>)
 8005b4c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <std+0x5c>)
 8005b50:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <std+0x60>)
 8005b54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <std+0x64>)
 8005b58:	6323      	str	r3, [r4, #48]	; 0x30
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <std+0x68>)
 8005b5c:	6224      	str	r4, [r4, #32]
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	d006      	beq.n	8005b70 <std+0x48>
 8005b62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b66:	4294      	cmp	r4, r2
 8005b68:	d002      	beq.n	8005b70 <std+0x48>
 8005b6a:	33d0      	adds	r3, #208	; 0xd0
 8005b6c:	429c      	cmp	r4, r3
 8005b6e:	d105      	bne.n	8005b7c <std+0x54>
 8005b70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b78:	f000 b958 	b.w	8005e2c <__retarget_lock_init_recursive>
 8005b7c:	bd10      	pop	{r4, pc}
 8005b7e:	bf00      	nop
 8005b80:	08005cad 	.word	0x08005cad
 8005b84:	08005ccf 	.word	0x08005ccf
 8005b88:	08005d07 	.word	0x08005d07
 8005b8c:	08005d2b 	.word	0x08005d2b
 8005b90:	20000334 	.word	0x20000334

08005b94 <stdio_exit_handler>:
 8005b94:	4a02      	ldr	r2, [pc, #8]	; (8005ba0 <stdio_exit_handler+0xc>)
 8005b96:	4903      	ldr	r1, [pc, #12]	; (8005ba4 <stdio_exit_handler+0x10>)
 8005b98:	4803      	ldr	r0, [pc, #12]	; (8005ba8 <stdio_exit_handler+0x14>)
 8005b9a:	f000 b869 	b.w	8005c70 <_fwalk_sglue>
 8005b9e:	bf00      	nop
 8005ba0:	2000000c 	.word	0x2000000c
 8005ba4:	08007531 	.word	0x08007531
 8005ba8:	20000018 	.word	0x20000018

08005bac <cleanup_stdio>:
 8005bac:	6841      	ldr	r1, [r0, #4]
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <cleanup_stdio+0x34>)
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	b510      	push	{r4, lr}
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	d001      	beq.n	8005bbc <cleanup_stdio+0x10>
 8005bb8:	f001 fcba 	bl	8007530 <_fflush_r>
 8005bbc:	68a1      	ldr	r1, [r4, #8]
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <cleanup_stdio+0x38>)
 8005bc0:	4299      	cmp	r1, r3
 8005bc2:	d002      	beq.n	8005bca <cleanup_stdio+0x1e>
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f001 fcb3 	bl	8007530 <_fflush_r>
 8005bca:	68e1      	ldr	r1, [r4, #12]
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <cleanup_stdio+0x3c>)
 8005bce:	4299      	cmp	r1, r3
 8005bd0:	d004      	beq.n	8005bdc <cleanup_stdio+0x30>
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd8:	f001 bcaa 	b.w	8007530 <_fflush_r>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	bf00      	nop
 8005be0:	20000334 	.word	0x20000334
 8005be4:	2000039c 	.word	0x2000039c
 8005be8:	20000404 	.word	0x20000404

08005bec <global_stdio_init.part.0>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <global_stdio_init.part.0+0x30>)
 8005bf0:	4c0b      	ldr	r4, [pc, #44]	; (8005c20 <global_stdio_init.part.0+0x34>)
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <global_stdio_init.part.0+0x38>)
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	f7ff ff94 	bl	8005b28 <std>
 8005c00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c04:	2201      	movs	r2, #1
 8005c06:	2109      	movs	r1, #9
 8005c08:	f7ff ff8e 	bl	8005b28 <std>
 8005c0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c10:	2202      	movs	r2, #2
 8005c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c16:	2112      	movs	r1, #18
 8005c18:	f7ff bf86 	b.w	8005b28 <std>
 8005c1c:	2000046c 	.word	0x2000046c
 8005c20:	20000334 	.word	0x20000334
 8005c24:	08005b95 	.word	0x08005b95

08005c28 <__sfp_lock_acquire>:
 8005c28:	4801      	ldr	r0, [pc, #4]	; (8005c30 <__sfp_lock_acquire+0x8>)
 8005c2a:	f000 b900 	b.w	8005e2e <__retarget_lock_acquire_recursive>
 8005c2e:	bf00      	nop
 8005c30:	20000475 	.word	0x20000475

08005c34 <__sfp_lock_release>:
 8005c34:	4801      	ldr	r0, [pc, #4]	; (8005c3c <__sfp_lock_release+0x8>)
 8005c36:	f000 b8fb 	b.w	8005e30 <__retarget_lock_release_recursive>
 8005c3a:	bf00      	nop
 8005c3c:	20000475 	.word	0x20000475

08005c40 <__sinit>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4604      	mov	r4, r0
 8005c44:	f7ff fff0 	bl	8005c28 <__sfp_lock_acquire>
 8005c48:	6a23      	ldr	r3, [r4, #32]
 8005c4a:	b11b      	cbz	r3, 8005c54 <__sinit+0x14>
 8005c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c50:	f7ff bff0 	b.w	8005c34 <__sfp_lock_release>
 8005c54:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <__sinit+0x28>)
 8005c56:	6223      	str	r3, [r4, #32]
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <__sinit+0x2c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f5      	bne.n	8005c4c <__sinit+0xc>
 8005c60:	f7ff ffc4 	bl	8005bec <global_stdio_init.part.0>
 8005c64:	e7f2      	b.n	8005c4c <__sinit+0xc>
 8005c66:	bf00      	nop
 8005c68:	08005bad 	.word	0x08005bad
 8005c6c:	2000046c 	.word	0x2000046c

08005c70 <_fwalk_sglue>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4607      	mov	r7, r0
 8005c76:	4688      	mov	r8, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c80:	f1b9 0901 	subs.w	r9, r9, #1
 8005c84:	d505      	bpl.n	8005c92 <_fwalk_sglue+0x22>
 8005c86:	6824      	ldr	r4, [r4, #0]
 8005c88:	2c00      	cmp	r4, #0
 8005c8a:	d1f7      	bne.n	8005c7c <_fwalk_sglue+0xc>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d907      	bls.n	8005ca8 <_fwalk_sglue+0x38>
 8005c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	d003      	beq.n	8005ca8 <_fwalk_sglue+0x38>
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	47c0      	blx	r8
 8005ca6:	4306      	orrs	r6, r0
 8005ca8:	3568      	adds	r5, #104	; 0x68
 8005caa:	e7e9      	b.n	8005c80 <_fwalk_sglue+0x10>

08005cac <__sread>:
 8005cac:	b510      	push	{r4, lr}
 8005cae:	460c      	mov	r4, r1
 8005cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb4:	f000 f86c 	bl	8005d90 <_read_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	bfab      	itete	ge
 8005cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8005cc0:	181b      	addge	r3, r3, r0
 8005cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cc6:	bfac      	ite	ge
 8005cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cca:	81a3      	strhlt	r3, [r4, #12]
 8005ccc:	bd10      	pop	{r4, pc}

08005cce <__swrite>:
 8005cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd2:	461f      	mov	r7, r3
 8005cd4:	898b      	ldrh	r3, [r1, #12]
 8005cd6:	05db      	lsls	r3, r3, #23
 8005cd8:	4605      	mov	r5, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4616      	mov	r6, r2
 8005cde:	d505      	bpl.n	8005cec <__swrite+0x1e>
 8005ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f000 f840 	bl	8005d6c <_lseek_r>
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cf6:	81a3      	strh	r3, [r4, #12]
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d02:	f000 b857 	b.w	8005db4 <_write_r>

08005d06 <__sseek>:
 8005d06:	b510      	push	{r4, lr}
 8005d08:	460c      	mov	r4, r1
 8005d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0e:	f000 f82d 	bl	8005d6c <_lseek_r>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	bf15      	itete	ne
 8005d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d22:	81a3      	strheq	r3, [r4, #12]
 8005d24:	bf18      	it	ne
 8005d26:	81a3      	strhne	r3, [r4, #12]
 8005d28:	bd10      	pop	{r4, pc}

08005d2a <__sclose>:
 8005d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2e:	f000 b80d 	b.w	8005d4c <_close_r>

08005d32 <memset>:
 8005d32:	4402      	add	r2, r0
 8005d34:	4603      	mov	r3, r0
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d100      	bne.n	8005d3c <memset+0xa>
 8005d3a:	4770      	bx	lr
 8005d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d40:	e7f9      	b.n	8005d36 <memset+0x4>
	...

08005d44 <_localeconv_r>:
 8005d44:	4800      	ldr	r0, [pc, #0]	; (8005d48 <_localeconv_r+0x4>)
 8005d46:	4770      	bx	lr
 8005d48:	20000158 	.word	0x20000158

08005d4c <_close_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d06      	ldr	r5, [pc, #24]	; (8005d68 <_close_r+0x1c>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	f7fb fabb 	bl	80012d2 <_close>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_close_r+0x1a>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_close_r+0x1a>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	20000470 	.word	0x20000470

08005d6c <_lseek_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d07      	ldr	r5, [pc, #28]	; (8005d8c <_lseek_r+0x20>)
 8005d70:	4604      	mov	r4, r0
 8005d72:	4608      	mov	r0, r1
 8005d74:	4611      	mov	r1, r2
 8005d76:	2200      	movs	r2, #0
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f7fb fad0 	bl	8001320 <_lseek>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_lseek_r+0x1e>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_lseek_r+0x1e>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	20000470 	.word	0x20000470

08005d90 <_read_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d07      	ldr	r5, [pc, #28]	; (8005db0 <_read_r+0x20>)
 8005d94:	4604      	mov	r4, r0
 8005d96:	4608      	mov	r0, r1
 8005d98:	4611      	mov	r1, r2
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	602a      	str	r2, [r5, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f7fb fa5e 	bl	8001260 <_read>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_read_r+0x1e>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_read_r+0x1e>
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	20000470 	.word	0x20000470

08005db4 <_write_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d07      	ldr	r5, [pc, #28]	; (8005dd4 <_write_r+0x20>)
 8005db8:	4604      	mov	r4, r0
 8005dba:	4608      	mov	r0, r1
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	602a      	str	r2, [r5, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f7fb fa69 	bl	800129a <_write>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_write_r+0x1e>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_write_r+0x1e>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	20000470 	.word	0x20000470

08005dd8 <__errno>:
 8005dd8:	4b01      	ldr	r3, [pc, #4]	; (8005de0 <__errno+0x8>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000064 	.word	0x20000064

08005de4 <__libc_init_array>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4d0d      	ldr	r5, [pc, #52]	; (8005e1c <__libc_init_array+0x38>)
 8005de8:	4c0d      	ldr	r4, [pc, #52]	; (8005e20 <__libc_init_array+0x3c>)
 8005dea:	1b64      	subs	r4, r4, r5
 8005dec:	10a4      	asrs	r4, r4, #2
 8005dee:	2600      	movs	r6, #0
 8005df0:	42a6      	cmp	r6, r4
 8005df2:	d109      	bne.n	8005e08 <__libc_init_array+0x24>
 8005df4:	4d0b      	ldr	r5, [pc, #44]	; (8005e24 <__libc_init_array+0x40>)
 8005df6:	4c0c      	ldr	r4, [pc, #48]	; (8005e28 <__libc_init_array+0x44>)
 8005df8:	f001 feee 	bl	8007bd8 <_init>
 8005dfc:	1b64      	subs	r4, r4, r5
 8005dfe:	10a4      	asrs	r4, r4, #2
 8005e00:	2600      	movs	r6, #0
 8005e02:	42a6      	cmp	r6, r4
 8005e04:	d105      	bne.n	8005e12 <__libc_init_array+0x2e>
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0c:	4798      	blx	r3
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7ee      	b.n	8005df0 <__libc_init_array+0xc>
 8005e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e16:	4798      	blx	r3
 8005e18:	3601      	adds	r6, #1
 8005e1a:	e7f2      	b.n	8005e02 <__libc_init_array+0x1e>
 8005e1c:	08007f9c 	.word	0x08007f9c
 8005e20:	08007f9c 	.word	0x08007f9c
 8005e24:	08007f9c 	.word	0x08007f9c
 8005e28:	08007fa0 	.word	0x08007fa0

08005e2c <__retarget_lock_init_recursive>:
 8005e2c:	4770      	bx	lr

08005e2e <__retarget_lock_acquire_recursive>:
 8005e2e:	4770      	bx	lr

08005e30 <__retarget_lock_release_recursive>:
 8005e30:	4770      	bx	lr

08005e32 <quorem>:
 8005e32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e36:	6903      	ldr	r3, [r0, #16]
 8005e38:	690c      	ldr	r4, [r1, #16]
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	db7e      	blt.n	8005f3e <quorem+0x10c>
 8005e40:	3c01      	subs	r4, #1
 8005e42:	f101 0814 	add.w	r8, r1, #20
 8005e46:	f100 0514 	add.w	r5, r0, #20
 8005e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e64:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e68:	d331      	bcc.n	8005ece <quorem+0x9c>
 8005e6a:	f04f 0e00 	mov.w	lr, #0
 8005e6e:	4640      	mov	r0, r8
 8005e70:	46ac      	mov	ip, r5
 8005e72:	46f2      	mov	sl, lr
 8005e74:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e78:	b293      	uxth	r3, r2
 8005e7a:	fb06 e303 	mla	r3, r6, r3, lr
 8005e7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e82:	0c1a      	lsrs	r2, r3, #16
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	ebaa 0303 	sub.w	r3, sl, r3
 8005e8a:	f8dc a000 	ldr.w	sl, [ip]
 8005e8e:	fa13 f38a 	uxtah	r3, r3, sl
 8005e92:	fb06 220e 	mla	r2, r6, lr, r2
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	9b00      	ldr	r3, [sp, #0]
 8005e9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e9e:	b292      	uxth	r2, r2
 8005ea0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ea8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005eac:	4581      	cmp	r9, r0
 8005eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eb2:	f84c 3b04 	str.w	r3, [ip], #4
 8005eb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005eba:	d2db      	bcs.n	8005e74 <quorem+0x42>
 8005ebc:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ec0:	b92b      	cbnz	r3, 8005ece <quorem+0x9c>
 8005ec2:	9b01      	ldr	r3, [sp, #4]
 8005ec4:	3b04      	subs	r3, #4
 8005ec6:	429d      	cmp	r5, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	d32c      	bcc.n	8005f26 <quorem+0xf4>
 8005ecc:	613c      	str	r4, [r7, #16]
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f001 f9a8 	bl	8007224 <__mcmp>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	db22      	blt.n	8005f1e <quorem+0xec>
 8005ed8:	3601      	adds	r6, #1
 8005eda:	4629      	mov	r1, r5
 8005edc:	2000      	movs	r0, #0
 8005ede:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ee2:	f8d1 c000 	ldr.w	ip, [r1]
 8005ee6:	b293      	uxth	r3, r2
 8005ee8:	1ac3      	subs	r3, r0, r3
 8005eea:	0c12      	lsrs	r2, r2, #16
 8005eec:	fa13 f38c 	uxtah	r3, r3, ip
 8005ef0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005ef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005efe:	45c1      	cmp	r9, r8
 8005f00:	f841 3b04 	str.w	r3, [r1], #4
 8005f04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f08:	d2e9      	bcs.n	8005ede <quorem+0xac>
 8005f0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f12:	b922      	cbnz	r2, 8005f1e <quorem+0xec>
 8005f14:	3b04      	subs	r3, #4
 8005f16:	429d      	cmp	r5, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	d30a      	bcc.n	8005f32 <quorem+0x100>
 8005f1c:	613c      	str	r4, [r7, #16]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	b003      	add	sp, #12
 8005f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	3b04      	subs	r3, #4
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	d1ce      	bne.n	8005ecc <quorem+0x9a>
 8005f2e:	3c01      	subs	r4, #1
 8005f30:	e7c9      	b.n	8005ec6 <quorem+0x94>
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	3b04      	subs	r3, #4
 8005f36:	2a00      	cmp	r2, #0
 8005f38:	d1f0      	bne.n	8005f1c <quorem+0xea>
 8005f3a:	3c01      	subs	r4, #1
 8005f3c:	e7eb      	b.n	8005f16 <quorem+0xe4>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e7ee      	b.n	8005f20 <quorem+0xee>
 8005f42:	0000      	movs	r0, r0
 8005f44:	0000      	movs	r0, r0
	...

08005f48 <_dtoa_r>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	ed2d 8b04 	vpush	{d8-d9}
 8005f50:	69c5      	ldr	r5, [r0, #28]
 8005f52:	b093      	sub	sp, #76	; 0x4c
 8005f54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f58:	ec57 6b10 	vmov	r6, r7, d0
 8005f5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f60:	9107      	str	r1, [sp, #28]
 8005f62:	4604      	mov	r4, r0
 8005f64:	920a      	str	r2, [sp, #40]	; 0x28
 8005f66:	930d      	str	r3, [sp, #52]	; 0x34
 8005f68:	b975      	cbnz	r5, 8005f88 <_dtoa_r+0x40>
 8005f6a:	2010      	movs	r0, #16
 8005f6c:	f000 fe2a 	bl	8006bc4 <malloc>
 8005f70:	4602      	mov	r2, r0
 8005f72:	61e0      	str	r0, [r4, #28]
 8005f74:	b920      	cbnz	r0, 8005f80 <_dtoa_r+0x38>
 8005f76:	4bae      	ldr	r3, [pc, #696]	; (8006230 <_dtoa_r+0x2e8>)
 8005f78:	21ef      	movs	r1, #239	; 0xef
 8005f7a:	48ae      	ldr	r0, [pc, #696]	; (8006234 <_dtoa_r+0x2ec>)
 8005f7c:	f001 fb1e 	bl	80075bc <__assert_func>
 8005f80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f84:	6005      	str	r5, [r0, #0]
 8005f86:	60c5      	str	r5, [r0, #12]
 8005f88:	69e3      	ldr	r3, [r4, #28]
 8005f8a:	6819      	ldr	r1, [r3, #0]
 8005f8c:	b151      	cbz	r1, 8005fa4 <_dtoa_r+0x5c>
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	604a      	str	r2, [r1, #4]
 8005f92:	2301      	movs	r3, #1
 8005f94:	4093      	lsls	r3, r2
 8005f96:	608b      	str	r3, [r1, #8]
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 ff07 	bl	8006dac <_Bfree>
 8005f9e:	69e3      	ldr	r3, [r4, #28]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	1e3b      	subs	r3, r7, #0
 8005fa6:	bfbb      	ittet	lt
 8005fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fac:	9303      	strlt	r3, [sp, #12]
 8005fae:	2300      	movge	r3, #0
 8005fb0:	2201      	movlt	r2, #1
 8005fb2:	bfac      	ite	ge
 8005fb4:	f8c8 3000 	strge.w	r3, [r8]
 8005fb8:	f8c8 2000 	strlt.w	r2, [r8]
 8005fbc:	4b9e      	ldr	r3, [pc, #632]	; (8006238 <_dtoa_r+0x2f0>)
 8005fbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005fc2:	ea33 0308 	bics.w	r3, r3, r8
 8005fc6:	d11b      	bne.n	8006000 <_dtoa_r+0xb8>
 8005fc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fca:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005fd4:	4333      	orrs	r3, r6
 8005fd6:	f000 8593 	beq.w	8006b00 <_dtoa_r+0xbb8>
 8005fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fdc:	b963      	cbnz	r3, 8005ff8 <_dtoa_r+0xb0>
 8005fde:	4b97      	ldr	r3, [pc, #604]	; (800623c <_dtoa_r+0x2f4>)
 8005fe0:	e027      	b.n	8006032 <_dtoa_r+0xea>
 8005fe2:	4b97      	ldr	r3, [pc, #604]	; (8006240 <_dtoa_r+0x2f8>)
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	9800      	ldr	r0, [sp, #0]
 8005fee:	b013      	add	sp, #76	; 0x4c
 8005ff0:	ecbd 8b04 	vpop	{d8-d9}
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	4b90      	ldr	r3, [pc, #576]	; (800623c <_dtoa_r+0x2f4>)
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	3303      	adds	r3, #3
 8005ffe:	e7f3      	b.n	8005fe8 <_dtoa_r+0xa0>
 8006000:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	ec51 0b17 	vmov	r0, r1, d7
 800600a:	eeb0 8a47 	vmov.f32	s16, s14
 800600e:	eef0 8a67 	vmov.f32	s17, s15
 8006012:	2300      	movs	r3, #0
 8006014:	f7fa fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8006018:	4681      	mov	r9, r0
 800601a:	b160      	cbz	r0, 8006036 <_dtoa_r+0xee>
 800601c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800601e:	2301      	movs	r3, #1
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8568 	beq.w	8006afa <_dtoa_r+0xbb2>
 800602a:	4b86      	ldr	r3, [pc, #536]	; (8006244 <_dtoa_r+0x2fc>)
 800602c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	3b01      	subs	r3, #1
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	e7da      	b.n	8005fec <_dtoa_r+0xa4>
 8006036:	aa10      	add	r2, sp, #64	; 0x40
 8006038:	a911      	add	r1, sp, #68	; 0x44
 800603a:	4620      	mov	r0, r4
 800603c:	eeb0 0a48 	vmov.f32	s0, s16
 8006040:	eef0 0a68 	vmov.f32	s1, s17
 8006044:	f001 f994 	bl	8007370 <__d2b>
 8006048:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800604c:	4682      	mov	sl, r0
 800604e:	2d00      	cmp	r5, #0
 8006050:	d07f      	beq.n	8006152 <_dtoa_r+0x20a>
 8006052:	ee18 3a90 	vmov	r3, s17
 8006056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800605a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800605e:	ec51 0b18 	vmov	r0, r1, d8
 8006062:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800606a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800606e:	4619      	mov	r1, r3
 8006070:	2200      	movs	r2, #0
 8006072:	4b75      	ldr	r3, [pc, #468]	; (8006248 <_dtoa_r+0x300>)
 8006074:	f7fa f908 	bl	8000288 <__aeabi_dsub>
 8006078:	a367      	add	r3, pc, #412	; (adr r3, 8006218 <_dtoa_r+0x2d0>)
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f7fa fabb 	bl	80005f8 <__aeabi_dmul>
 8006082:	a367      	add	r3, pc, #412	; (adr r3, 8006220 <_dtoa_r+0x2d8>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa f900 	bl	800028c <__adddf3>
 800608c:	4606      	mov	r6, r0
 800608e:	4628      	mov	r0, r5
 8006090:	460f      	mov	r7, r1
 8006092:	f7fa fa47 	bl	8000524 <__aeabi_i2d>
 8006096:	a364      	add	r3, pc, #400	; (adr r3, 8006228 <_dtoa_r+0x2e0>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa faac 	bl	80005f8 <__aeabi_dmul>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4630      	mov	r0, r6
 80060a6:	4639      	mov	r1, r7
 80060a8:	f7fa f8f0 	bl	800028c <__adddf3>
 80060ac:	4606      	mov	r6, r0
 80060ae:	460f      	mov	r7, r1
 80060b0:	f7fa fd52 	bl	8000b58 <__aeabi_d2iz>
 80060b4:	2200      	movs	r2, #0
 80060b6:	4683      	mov	fp, r0
 80060b8:	2300      	movs	r3, #0
 80060ba:	4630      	mov	r0, r6
 80060bc:	4639      	mov	r1, r7
 80060be:	f7fa fd0d 	bl	8000adc <__aeabi_dcmplt>
 80060c2:	b148      	cbz	r0, 80060d8 <_dtoa_r+0x190>
 80060c4:	4658      	mov	r0, fp
 80060c6:	f7fa fa2d 	bl	8000524 <__aeabi_i2d>
 80060ca:	4632      	mov	r2, r6
 80060cc:	463b      	mov	r3, r7
 80060ce:	f7fa fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80060d2:	b908      	cbnz	r0, 80060d8 <_dtoa_r+0x190>
 80060d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060d8:	f1bb 0f16 	cmp.w	fp, #22
 80060dc:	d857      	bhi.n	800618e <_dtoa_r+0x246>
 80060de:	4b5b      	ldr	r3, [pc, #364]	; (800624c <_dtoa_r+0x304>)
 80060e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	ec51 0b18 	vmov	r0, r1, d8
 80060ec:	f7fa fcf6 	bl	8000adc <__aeabi_dcmplt>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d04e      	beq.n	8006192 <_dtoa_r+0x24a>
 80060f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060f8:	2300      	movs	r3, #0
 80060fa:	930c      	str	r3, [sp, #48]	; 0x30
 80060fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060fe:	1b5b      	subs	r3, r3, r5
 8006100:	1e5a      	subs	r2, r3, #1
 8006102:	bf45      	ittet	mi
 8006104:	f1c3 0301 	rsbmi	r3, r3, #1
 8006108:	9305      	strmi	r3, [sp, #20]
 800610a:	2300      	movpl	r3, #0
 800610c:	2300      	movmi	r3, #0
 800610e:	9206      	str	r2, [sp, #24]
 8006110:	bf54      	ite	pl
 8006112:	9305      	strpl	r3, [sp, #20]
 8006114:	9306      	strmi	r3, [sp, #24]
 8006116:	f1bb 0f00 	cmp.w	fp, #0
 800611a:	db3c      	blt.n	8006196 <_dtoa_r+0x24e>
 800611c:	9b06      	ldr	r3, [sp, #24]
 800611e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006122:	445b      	add	r3, fp
 8006124:	9306      	str	r3, [sp, #24]
 8006126:	2300      	movs	r3, #0
 8006128:	9308      	str	r3, [sp, #32]
 800612a:	9b07      	ldr	r3, [sp, #28]
 800612c:	2b09      	cmp	r3, #9
 800612e:	d868      	bhi.n	8006202 <_dtoa_r+0x2ba>
 8006130:	2b05      	cmp	r3, #5
 8006132:	bfc4      	itt	gt
 8006134:	3b04      	subgt	r3, #4
 8006136:	9307      	strgt	r3, [sp, #28]
 8006138:	9b07      	ldr	r3, [sp, #28]
 800613a:	f1a3 0302 	sub.w	r3, r3, #2
 800613e:	bfcc      	ite	gt
 8006140:	2500      	movgt	r5, #0
 8006142:	2501      	movle	r5, #1
 8006144:	2b03      	cmp	r3, #3
 8006146:	f200 8085 	bhi.w	8006254 <_dtoa_r+0x30c>
 800614a:	e8df f003 	tbb	[pc, r3]
 800614e:	3b2e      	.short	0x3b2e
 8006150:	5839      	.short	0x5839
 8006152:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006156:	441d      	add	r5, r3
 8006158:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800615c:	2b20      	cmp	r3, #32
 800615e:	bfc1      	itttt	gt
 8006160:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006164:	fa08 f803 	lslgt.w	r8, r8, r3
 8006168:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800616c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006170:	bfd6      	itet	le
 8006172:	f1c3 0320 	rsble	r3, r3, #32
 8006176:	ea48 0003 	orrgt.w	r0, r8, r3
 800617a:	fa06 f003 	lslle.w	r0, r6, r3
 800617e:	f7fa f9c1 	bl	8000504 <__aeabi_ui2d>
 8006182:	2201      	movs	r2, #1
 8006184:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006188:	3d01      	subs	r5, #1
 800618a:	920e      	str	r2, [sp, #56]	; 0x38
 800618c:	e76f      	b.n	800606e <_dtoa_r+0x126>
 800618e:	2301      	movs	r3, #1
 8006190:	e7b3      	b.n	80060fa <_dtoa_r+0x1b2>
 8006192:	900c      	str	r0, [sp, #48]	; 0x30
 8006194:	e7b2      	b.n	80060fc <_dtoa_r+0x1b4>
 8006196:	9b05      	ldr	r3, [sp, #20]
 8006198:	eba3 030b 	sub.w	r3, r3, fp
 800619c:	9305      	str	r3, [sp, #20]
 800619e:	f1cb 0300 	rsb	r3, fp, #0
 80061a2:	9308      	str	r3, [sp, #32]
 80061a4:	2300      	movs	r3, #0
 80061a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a8:	e7bf      	b.n	800612a <_dtoa_r+0x1e2>
 80061aa:	2300      	movs	r3, #0
 80061ac:	9309      	str	r3, [sp, #36]	; 0x24
 80061ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dc52      	bgt.n	800625a <_dtoa_r+0x312>
 80061b4:	2301      	movs	r3, #1
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	461a      	mov	r2, r3
 80061bc:	920a      	str	r2, [sp, #40]	; 0x28
 80061be:	e00b      	b.n	80061d8 <_dtoa_r+0x290>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e7f3      	b.n	80061ac <_dtoa_r+0x264>
 80061c4:	2300      	movs	r3, #0
 80061c6:	9309      	str	r3, [sp, #36]	; 0x24
 80061c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ca:	445b      	add	r3, fp
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	3301      	adds	r3, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	bfb8      	it	lt
 80061d6:	2301      	movlt	r3, #1
 80061d8:	69e0      	ldr	r0, [r4, #28]
 80061da:	2100      	movs	r1, #0
 80061dc:	2204      	movs	r2, #4
 80061de:	f102 0614 	add.w	r6, r2, #20
 80061e2:	429e      	cmp	r6, r3
 80061e4:	d93d      	bls.n	8006262 <_dtoa_r+0x31a>
 80061e6:	6041      	str	r1, [r0, #4]
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fd9f 	bl	8006d2c <_Balloc>
 80061ee:	9000      	str	r0, [sp, #0]
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d139      	bne.n	8006268 <_dtoa_r+0x320>
 80061f4:	4b16      	ldr	r3, [pc, #88]	; (8006250 <_dtoa_r+0x308>)
 80061f6:	4602      	mov	r2, r0
 80061f8:	f240 11af 	movw	r1, #431	; 0x1af
 80061fc:	e6bd      	b.n	8005f7a <_dtoa_r+0x32>
 80061fe:	2301      	movs	r3, #1
 8006200:	e7e1      	b.n	80061c6 <_dtoa_r+0x27e>
 8006202:	2501      	movs	r5, #1
 8006204:	2300      	movs	r3, #0
 8006206:	9307      	str	r3, [sp, #28]
 8006208:	9509      	str	r5, [sp, #36]	; 0x24
 800620a:	f04f 33ff 	mov.w	r3, #4294967295
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	2200      	movs	r2, #0
 8006214:	2312      	movs	r3, #18
 8006216:	e7d1      	b.n	80061bc <_dtoa_r+0x274>
 8006218:	636f4361 	.word	0x636f4361
 800621c:	3fd287a7 	.word	0x3fd287a7
 8006220:	8b60c8b3 	.word	0x8b60c8b3
 8006224:	3fc68a28 	.word	0x3fc68a28
 8006228:	509f79fb 	.word	0x509f79fb
 800622c:	3fd34413 	.word	0x3fd34413
 8006230:	08007c69 	.word	0x08007c69
 8006234:	08007c80 	.word	0x08007c80
 8006238:	7ff00000 	.word	0x7ff00000
 800623c:	08007c65 	.word	0x08007c65
 8006240:	08007c5c 	.word	0x08007c5c
 8006244:	08007c39 	.word	0x08007c39
 8006248:	3ff80000 	.word	0x3ff80000
 800624c:	08007d70 	.word	0x08007d70
 8006250:	08007cd8 	.word	0x08007cd8
 8006254:	2301      	movs	r3, #1
 8006256:	9309      	str	r3, [sp, #36]	; 0x24
 8006258:	e7d7      	b.n	800620a <_dtoa_r+0x2c2>
 800625a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	9304      	str	r3, [sp, #16]
 8006260:	e7ba      	b.n	80061d8 <_dtoa_r+0x290>
 8006262:	3101      	adds	r1, #1
 8006264:	0052      	lsls	r2, r2, #1
 8006266:	e7ba      	b.n	80061de <_dtoa_r+0x296>
 8006268:	69e3      	ldr	r3, [r4, #28]
 800626a:	9a00      	ldr	r2, [sp, #0]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	9b04      	ldr	r3, [sp, #16]
 8006270:	2b0e      	cmp	r3, #14
 8006272:	f200 80a8 	bhi.w	80063c6 <_dtoa_r+0x47e>
 8006276:	2d00      	cmp	r5, #0
 8006278:	f000 80a5 	beq.w	80063c6 <_dtoa_r+0x47e>
 800627c:	f1bb 0f00 	cmp.w	fp, #0
 8006280:	dd38      	ble.n	80062f4 <_dtoa_r+0x3ac>
 8006282:	4bc0      	ldr	r3, [pc, #768]	; (8006584 <_dtoa_r+0x63c>)
 8006284:	f00b 020f 	and.w	r2, fp, #15
 8006288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800628c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006290:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006294:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006298:	d019      	beq.n	80062ce <_dtoa_r+0x386>
 800629a:	4bbb      	ldr	r3, [pc, #748]	; (8006588 <_dtoa_r+0x640>)
 800629c:	ec51 0b18 	vmov	r0, r1, d8
 80062a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062a4:	f7fa fad2 	bl	800084c <__aeabi_ddiv>
 80062a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ac:	f008 080f 	and.w	r8, r8, #15
 80062b0:	2503      	movs	r5, #3
 80062b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006588 <_dtoa_r+0x640>
 80062b6:	f1b8 0f00 	cmp.w	r8, #0
 80062ba:	d10a      	bne.n	80062d2 <_dtoa_r+0x38a>
 80062bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062c0:	4632      	mov	r2, r6
 80062c2:	463b      	mov	r3, r7
 80062c4:	f7fa fac2 	bl	800084c <__aeabi_ddiv>
 80062c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062cc:	e02b      	b.n	8006326 <_dtoa_r+0x3de>
 80062ce:	2502      	movs	r5, #2
 80062d0:	e7ef      	b.n	80062b2 <_dtoa_r+0x36a>
 80062d2:	f018 0f01 	tst.w	r8, #1
 80062d6:	d008      	beq.n	80062ea <_dtoa_r+0x3a2>
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80062e0:	f7fa f98a 	bl	80005f8 <__aeabi_dmul>
 80062e4:	3501      	adds	r5, #1
 80062e6:	4606      	mov	r6, r0
 80062e8:	460f      	mov	r7, r1
 80062ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062ee:	f109 0908 	add.w	r9, r9, #8
 80062f2:	e7e0      	b.n	80062b6 <_dtoa_r+0x36e>
 80062f4:	f000 809f 	beq.w	8006436 <_dtoa_r+0x4ee>
 80062f8:	f1cb 0600 	rsb	r6, fp, #0
 80062fc:	4ba1      	ldr	r3, [pc, #644]	; (8006584 <_dtoa_r+0x63c>)
 80062fe:	4fa2      	ldr	r7, [pc, #648]	; (8006588 <_dtoa_r+0x640>)
 8006300:	f006 020f 	and.w	r2, r6, #15
 8006304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	ec51 0b18 	vmov	r0, r1, d8
 8006310:	f7fa f972 	bl	80005f8 <__aeabi_dmul>
 8006314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006318:	1136      	asrs	r6, r6, #4
 800631a:	2300      	movs	r3, #0
 800631c:	2502      	movs	r5, #2
 800631e:	2e00      	cmp	r6, #0
 8006320:	d17e      	bne.n	8006420 <_dtoa_r+0x4d8>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1d0      	bne.n	80062c8 <_dtoa_r+0x380>
 8006326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006328:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8084 	beq.w	800643a <_dtoa_r+0x4f2>
 8006332:	4b96      	ldr	r3, [pc, #600]	; (800658c <_dtoa_r+0x644>)
 8006334:	2200      	movs	r2, #0
 8006336:	4640      	mov	r0, r8
 8006338:	4649      	mov	r1, r9
 800633a:	f7fa fbcf 	bl	8000adc <__aeabi_dcmplt>
 800633e:	2800      	cmp	r0, #0
 8006340:	d07b      	beq.n	800643a <_dtoa_r+0x4f2>
 8006342:	9b04      	ldr	r3, [sp, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d078      	beq.n	800643a <_dtoa_r+0x4f2>
 8006348:	9b01      	ldr	r3, [sp, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	dd39      	ble.n	80063c2 <_dtoa_r+0x47a>
 800634e:	4b90      	ldr	r3, [pc, #576]	; (8006590 <_dtoa_r+0x648>)
 8006350:	2200      	movs	r2, #0
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7fa f94f 	bl	80005f8 <__aeabi_dmul>
 800635a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800635e:	9e01      	ldr	r6, [sp, #4]
 8006360:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006364:	3501      	adds	r5, #1
 8006366:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800636a:	4628      	mov	r0, r5
 800636c:	f7fa f8da 	bl	8000524 <__aeabi_i2d>
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	f7fa f940 	bl	80005f8 <__aeabi_dmul>
 8006378:	4b86      	ldr	r3, [pc, #536]	; (8006594 <_dtoa_r+0x64c>)
 800637a:	2200      	movs	r2, #0
 800637c:	f7f9 ff86 	bl	800028c <__adddf3>
 8006380:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006388:	9303      	str	r3, [sp, #12]
 800638a:	2e00      	cmp	r6, #0
 800638c:	d158      	bne.n	8006440 <_dtoa_r+0x4f8>
 800638e:	4b82      	ldr	r3, [pc, #520]	; (8006598 <_dtoa_r+0x650>)
 8006390:	2200      	movs	r2, #0
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7f9 ff77 	bl	8000288 <__aeabi_dsub>
 800639a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800639e:	4680      	mov	r8, r0
 80063a0:	4689      	mov	r9, r1
 80063a2:	f7fa fbb9 	bl	8000b18 <__aeabi_dcmpgt>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f040 8296 	bne.w	80068d8 <_dtoa_r+0x990>
 80063ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80063b0:	4640      	mov	r0, r8
 80063b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063b6:	4649      	mov	r1, r9
 80063b8:	f7fa fb90 	bl	8000adc <__aeabi_dcmplt>
 80063bc:	2800      	cmp	r0, #0
 80063be:	f040 8289 	bne.w	80068d4 <_dtoa_r+0x98c>
 80063c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80063c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f2c0 814e 	blt.w	800666a <_dtoa_r+0x722>
 80063ce:	f1bb 0f0e 	cmp.w	fp, #14
 80063d2:	f300 814a 	bgt.w	800666a <_dtoa_r+0x722>
 80063d6:	4b6b      	ldr	r3, [pc, #428]	; (8006584 <_dtoa_r+0x63c>)
 80063d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f280 80dc 	bge.w	80065a0 <_dtoa_r+0x658>
 80063e8:	9b04      	ldr	r3, [sp, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f300 80d8 	bgt.w	80065a0 <_dtoa_r+0x658>
 80063f0:	f040 826f 	bne.w	80068d2 <_dtoa_r+0x98a>
 80063f4:	4b68      	ldr	r3, [pc, #416]	; (8006598 <_dtoa_r+0x650>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	4640      	mov	r0, r8
 80063fa:	4649      	mov	r1, r9
 80063fc:	f7fa f8fc 	bl	80005f8 <__aeabi_dmul>
 8006400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006404:	f7fa fb7e 	bl	8000b04 <__aeabi_dcmpge>
 8006408:	9e04      	ldr	r6, [sp, #16]
 800640a:	4637      	mov	r7, r6
 800640c:	2800      	cmp	r0, #0
 800640e:	f040 8245 	bne.w	800689c <_dtoa_r+0x954>
 8006412:	9d00      	ldr	r5, [sp, #0]
 8006414:	2331      	movs	r3, #49	; 0x31
 8006416:	f805 3b01 	strb.w	r3, [r5], #1
 800641a:	f10b 0b01 	add.w	fp, fp, #1
 800641e:	e241      	b.n	80068a4 <_dtoa_r+0x95c>
 8006420:	07f2      	lsls	r2, r6, #31
 8006422:	d505      	bpl.n	8006430 <_dtoa_r+0x4e8>
 8006424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006428:	f7fa f8e6 	bl	80005f8 <__aeabi_dmul>
 800642c:	3501      	adds	r5, #1
 800642e:	2301      	movs	r3, #1
 8006430:	1076      	asrs	r6, r6, #1
 8006432:	3708      	adds	r7, #8
 8006434:	e773      	b.n	800631e <_dtoa_r+0x3d6>
 8006436:	2502      	movs	r5, #2
 8006438:	e775      	b.n	8006326 <_dtoa_r+0x3de>
 800643a:	9e04      	ldr	r6, [sp, #16]
 800643c:	465f      	mov	r7, fp
 800643e:	e792      	b.n	8006366 <_dtoa_r+0x41e>
 8006440:	9900      	ldr	r1, [sp, #0]
 8006442:	4b50      	ldr	r3, [pc, #320]	; (8006584 <_dtoa_r+0x63c>)
 8006444:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006448:	4431      	add	r1, r6
 800644a:	9102      	str	r1, [sp, #8]
 800644c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800644e:	eeb0 9a47 	vmov.f32	s18, s14
 8006452:	eef0 9a67 	vmov.f32	s19, s15
 8006456:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800645a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800645e:	2900      	cmp	r1, #0
 8006460:	d044      	beq.n	80064ec <_dtoa_r+0x5a4>
 8006462:	494e      	ldr	r1, [pc, #312]	; (800659c <_dtoa_r+0x654>)
 8006464:	2000      	movs	r0, #0
 8006466:	f7fa f9f1 	bl	800084c <__aeabi_ddiv>
 800646a:	ec53 2b19 	vmov	r2, r3, d9
 800646e:	f7f9 ff0b 	bl	8000288 <__aeabi_dsub>
 8006472:	9d00      	ldr	r5, [sp, #0]
 8006474:	ec41 0b19 	vmov	d9, r0, r1
 8006478:	4649      	mov	r1, r9
 800647a:	4640      	mov	r0, r8
 800647c:	f7fa fb6c 	bl	8000b58 <__aeabi_d2iz>
 8006480:	4606      	mov	r6, r0
 8006482:	f7fa f84f 	bl	8000524 <__aeabi_i2d>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4640      	mov	r0, r8
 800648c:	4649      	mov	r1, r9
 800648e:	f7f9 fefb 	bl	8000288 <__aeabi_dsub>
 8006492:	3630      	adds	r6, #48	; 0x30
 8006494:	f805 6b01 	strb.w	r6, [r5], #1
 8006498:	ec53 2b19 	vmov	r2, r3, d9
 800649c:	4680      	mov	r8, r0
 800649e:	4689      	mov	r9, r1
 80064a0:	f7fa fb1c 	bl	8000adc <__aeabi_dcmplt>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d164      	bne.n	8006572 <_dtoa_r+0x62a>
 80064a8:	4642      	mov	r2, r8
 80064aa:	464b      	mov	r3, r9
 80064ac:	4937      	ldr	r1, [pc, #220]	; (800658c <_dtoa_r+0x644>)
 80064ae:	2000      	movs	r0, #0
 80064b0:	f7f9 feea 	bl	8000288 <__aeabi_dsub>
 80064b4:	ec53 2b19 	vmov	r2, r3, d9
 80064b8:	f7fa fb10 	bl	8000adc <__aeabi_dcmplt>
 80064bc:	2800      	cmp	r0, #0
 80064be:	f040 80b6 	bne.w	800662e <_dtoa_r+0x6e6>
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	429d      	cmp	r5, r3
 80064c6:	f43f af7c 	beq.w	80063c2 <_dtoa_r+0x47a>
 80064ca:	4b31      	ldr	r3, [pc, #196]	; (8006590 <_dtoa_r+0x648>)
 80064cc:	ec51 0b19 	vmov	r0, r1, d9
 80064d0:	2200      	movs	r2, #0
 80064d2:	f7fa f891 	bl	80005f8 <__aeabi_dmul>
 80064d6:	4b2e      	ldr	r3, [pc, #184]	; (8006590 <_dtoa_r+0x648>)
 80064d8:	ec41 0b19 	vmov	d9, r0, r1
 80064dc:	2200      	movs	r2, #0
 80064de:	4640      	mov	r0, r8
 80064e0:	4649      	mov	r1, r9
 80064e2:	f7fa f889 	bl	80005f8 <__aeabi_dmul>
 80064e6:	4680      	mov	r8, r0
 80064e8:	4689      	mov	r9, r1
 80064ea:	e7c5      	b.n	8006478 <_dtoa_r+0x530>
 80064ec:	ec51 0b17 	vmov	r0, r1, d7
 80064f0:	f7fa f882 	bl	80005f8 <__aeabi_dmul>
 80064f4:	9b02      	ldr	r3, [sp, #8]
 80064f6:	9d00      	ldr	r5, [sp, #0]
 80064f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80064fa:	ec41 0b19 	vmov	d9, r0, r1
 80064fe:	4649      	mov	r1, r9
 8006500:	4640      	mov	r0, r8
 8006502:	f7fa fb29 	bl	8000b58 <__aeabi_d2iz>
 8006506:	4606      	mov	r6, r0
 8006508:	f7fa f80c 	bl	8000524 <__aeabi_i2d>
 800650c:	3630      	adds	r6, #48	; 0x30
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4640      	mov	r0, r8
 8006514:	4649      	mov	r1, r9
 8006516:	f7f9 feb7 	bl	8000288 <__aeabi_dsub>
 800651a:	f805 6b01 	strb.w	r6, [r5], #1
 800651e:	9b02      	ldr	r3, [sp, #8]
 8006520:	429d      	cmp	r5, r3
 8006522:	4680      	mov	r8, r0
 8006524:	4689      	mov	r9, r1
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	d124      	bne.n	8006576 <_dtoa_r+0x62e>
 800652c:	4b1b      	ldr	r3, [pc, #108]	; (800659c <_dtoa_r+0x654>)
 800652e:	ec51 0b19 	vmov	r0, r1, d9
 8006532:	f7f9 feab 	bl	800028c <__adddf3>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4640      	mov	r0, r8
 800653c:	4649      	mov	r1, r9
 800653e:	f7fa faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8006542:	2800      	cmp	r0, #0
 8006544:	d173      	bne.n	800662e <_dtoa_r+0x6e6>
 8006546:	ec53 2b19 	vmov	r2, r3, d9
 800654a:	4914      	ldr	r1, [pc, #80]	; (800659c <_dtoa_r+0x654>)
 800654c:	2000      	movs	r0, #0
 800654e:	f7f9 fe9b 	bl	8000288 <__aeabi_dsub>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4640      	mov	r0, r8
 8006558:	4649      	mov	r1, r9
 800655a:	f7fa fabf 	bl	8000adc <__aeabi_dcmplt>
 800655e:	2800      	cmp	r0, #0
 8006560:	f43f af2f 	beq.w	80063c2 <_dtoa_r+0x47a>
 8006564:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006566:	1e6b      	subs	r3, r5, #1
 8006568:	930f      	str	r3, [sp, #60]	; 0x3c
 800656a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800656e:	2b30      	cmp	r3, #48	; 0x30
 8006570:	d0f8      	beq.n	8006564 <_dtoa_r+0x61c>
 8006572:	46bb      	mov	fp, r7
 8006574:	e04a      	b.n	800660c <_dtoa_r+0x6c4>
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <_dtoa_r+0x648>)
 8006578:	f7fa f83e 	bl	80005f8 <__aeabi_dmul>
 800657c:	4680      	mov	r8, r0
 800657e:	4689      	mov	r9, r1
 8006580:	e7bd      	b.n	80064fe <_dtoa_r+0x5b6>
 8006582:	bf00      	nop
 8006584:	08007d70 	.word	0x08007d70
 8006588:	08007d48 	.word	0x08007d48
 800658c:	3ff00000 	.word	0x3ff00000
 8006590:	40240000 	.word	0x40240000
 8006594:	401c0000 	.word	0x401c0000
 8006598:	40140000 	.word	0x40140000
 800659c:	3fe00000 	.word	0x3fe00000
 80065a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065a4:	9d00      	ldr	r5, [sp, #0]
 80065a6:	4642      	mov	r2, r8
 80065a8:	464b      	mov	r3, r9
 80065aa:	4630      	mov	r0, r6
 80065ac:	4639      	mov	r1, r7
 80065ae:	f7fa f94d 	bl	800084c <__aeabi_ddiv>
 80065b2:	f7fa fad1 	bl	8000b58 <__aeabi_d2iz>
 80065b6:	9001      	str	r0, [sp, #4]
 80065b8:	f7f9 ffb4 	bl	8000524 <__aeabi_i2d>
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	f7fa f81a 	bl	80005f8 <__aeabi_dmul>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4630      	mov	r0, r6
 80065ca:	4639      	mov	r1, r7
 80065cc:	f7f9 fe5c 	bl	8000288 <__aeabi_dsub>
 80065d0:	9e01      	ldr	r6, [sp, #4]
 80065d2:	9f04      	ldr	r7, [sp, #16]
 80065d4:	3630      	adds	r6, #48	; 0x30
 80065d6:	f805 6b01 	strb.w	r6, [r5], #1
 80065da:	9e00      	ldr	r6, [sp, #0]
 80065dc:	1bae      	subs	r6, r5, r6
 80065de:	42b7      	cmp	r7, r6
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	d134      	bne.n	8006650 <_dtoa_r+0x708>
 80065e6:	f7f9 fe51 	bl	800028c <__adddf3>
 80065ea:	4642      	mov	r2, r8
 80065ec:	464b      	mov	r3, r9
 80065ee:	4606      	mov	r6, r0
 80065f0:	460f      	mov	r7, r1
 80065f2:	f7fa fa91 	bl	8000b18 <__aeabi_dcmpgt>
 80065f6:	b9c8      	cbnz	r0, 800662c <_dtoa_r+0x6e4>
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f7fa fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8006604:	b110      	cbz	r0, 800660c <_dtoa_r+0x6c4>
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	07db      	lsls	r3, r3, #31
 800660a:	d40f      	bmi.n	800662c <_dtoa_r+0x6e4>
 800660c:	4651      	mov	r1, sl
 800660e:	4620      	mov	r0, r4
 8006610:	f000 fbcc 	bl	8006dac <_Bfree>
 8006614:	2300      	movs	r3, #0
 8006616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006618:	702b      	strb	r3, [r5, #0]
 800661a:	f10b 0301 	add.w	r3, fp, #1
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006622:	2b00      	cmp	r3, #0
 8006624:	f43f ace2 	beq.w	8005fec <_dtoa_r+0xa4>
 8006628:	601d      	str	r5, [r3, #0]
 800662a:	e4df      	b.n	8005fec <_dtoa_r+0xa4>
 800662c:	465f      	mov	r7, fp
 800662e:	462b      	mov	r3, r5
 8006630:	461d      	mov	r5, r3
 8006632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006636:	2a39      	cmp	r2, #57	; 0x39
 8006638:	d106      	bne.n	8006648 <_dtoa_r+0x700>
 800663a:	9a00      	ldr	r2, [sp, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d1f7      	bne.n	8006630 <_dtoa_r+0x6e8>
 8006640:	9900      	ldr	r1, [sp, #0]
 8006642:	2230      	movs	r2, #48	; 0x30
 8006644:	3701      	adds	r7, #1
 8006646:	700a      	strb	r2, [r1, #0]
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	3201      	adds	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e790      	b.n	8006572 <_dtoa_r+0x62a>
 8006650:	4ba3      	ldr	r3, [pc, #652]	; (80068e0 <_dtoa_r+0x998>)
 8006652:	2200      	movs	r2, #0
 8006654:	f7f9 ffd0 	bl	80005f8 <__aeabi_dmul>
 8006658:	2200      	movs	r2, #0
 800665a:	2300      	movs	r3, #0
 800665c:	4606      	mov	r6, r0
 800665e:	460f      	mov	r7, r1
 8006660:	f7fa fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006664:	2800      	cmp	r0, #0
 8006666:	d09e      	beq.n	80065a6 <_dtoa_r+0x65e>
 8006668:	e7d0      	b.n	800660c <_dtoa_r+0x6c4>
 800666a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800666c:	2a00      	cmp	r2, #0
 800666e:	f000 80ca 	beq.w	8006806 <_dtoa_r+0x8be>
 8006672:	9a07      	ldr	r2, [sp, #28]
 8006674:	2a01      	cmp	r2, #1
 8006676:	f300 80ad 	bgt.w	80067d4 <_dtoa_r+0x88c>
 800667a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800667c:	2a00      	cmp	r2, #0
 800667e:	f000 80a5 	beq.w	80067cc <_dtoa_r+0x884>
 8006682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006686:	9e08      	ldr	r6, [sp, #32]
 8006688:	9d05      	ldr	r5, [sp, #20]
 800668a:	9a05      	ldr	r2, [sp, #20]
 800668c:	441a      	add	r2, r3
 800668e:	9205      	str	r2, [sp, #20]
 8006690:	9a06      	ldr	r2, [sp, #24]
 8006692:	2101      	movs	r1, #1
 8006694:	441a      	add	r2, r3
 8006696:	4620      	mov	r0, r4
 8006698:	9206      	str	r2, [sp, #24]
 800669a:	f000 fc3d 	bl	8006f18 <__i2b>
 800669e:	4607      	mov	r7, r0
 80066a0:	b165      	cbz	r5, 80066bc <_dtoa_r+0x774>
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	dd09      	ble.n	80066bc <_dtoa_r+0x774>
 80066a8:	42ab      	cmp	r3, r5
 80066aa:	9a05      	ldr	r2, [sp, #20]
 80066ac:	bfa8      	it	ge
 80066ae:	462b      	movge	r3, r5
 80066b0:	1ad2      	subs	r2, r2, r3
 80066b2:	9205      	str	r2, [sp, #20]
 80066b4:	9a06      	ldr	r2, [sp, #24]
 80066b6:	1aed      	subs	r5, r5, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	9306      	str	r3, [sp, #24]
 80066bc:	9b08      	ldr	r3, [sp, #32]
 80066be:	b1f3      	cbz	r3, 80066fe <_dtoa_r+0x7b6>
 80066c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80a3 	beq.w	800680e <_dtoa_r+0x8c6>
 80066c8:	2e00      	cmp	r6, #0
 80066ca:	dd10      	ble.n	80066ee <_dtoa_r+0x7a6>
 80066cc:	4639      	mov	r1, r7
 80066ce:	4632      	mov	r2, r6
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 fce1 	bl	8007098 <__pow5mult>
 80066d6:	4652      	mov	r2, sl
 80066d8:	4601      	mov	r1, r0
 80066da:	4607      	mov	r7, r0
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fc31 	bl	8006f44 <__multiply>
 80066e2:	4651      	mov	r1, sl
 80066e4:	4680      	mov	r8, r0
 80066e6:	4620      	mov	r0, r4
 80066e8:	f000 fb60 	bl	8006dac <_Bfree>
 80066ec:	46c2      	mov	sl, r8
 80066ee:	9b08      	ldr	r3, [sp, #32]
 80066f0:	1b9a      	subs	r2, r3, r6
 80066f2:	d004      	beq.n	80066fe <_dtoa_r+0x7b6>
 80066f4:	4651      	mov	r1, sl
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 fcce 	bl	8007098 <__pow5mult>
 80066fc:	4682      	mov	sl, r0
 80066fe:	2101      	movs	r1, #1
 8006700:	4620      	mov	r0, r4
 8006702:	f000 fc09 	bl	8006f18 <__i2b>
 8006706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006708:	2b00      	cmp	r3, #0
 800670a:	4606      	mov	r6, r0
 800670c:	f340 8081 	ble.w	8006812 <_dtoa_r+0x8ca>
 8006710:	461a      	mov	r2, r3
 8006712:	4601      	mov	r1, r0
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fcbf 	bl	8007098 <__pow5mult>
 800671a:	9b07      	ldr	r3, [sp, #28]
 800671c:	2b01      	cmp	r3, #1
 800671e:	4606      	mov	r6, r0
 8006720:	dd7a      	ble.n	8006818 <_dtoa_r+0x8d0>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	6933      	ldr	r3, [r6, #16]
 8006728:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800672c:	6918      	ldr	r0, [r3, #16]
 800672e:	f000 fba5 	bl	8006e7c <__hi0bits>
 8006732:	f1c0 0020 	rsb	r0, r0, #32
 8006736:	9b06      	ldr	r3, [sp, #24]
 8006738:	4418      	add	r0, r3
 800673a:	f010 001f 	ands.w	r0, r0, #31
 800673e:	f000 8094 	beq.w	800686a <_dtoa_r+0x922>
 8006742:	f1c0 0320 	rsb	r3, r0, #32
 8006746:	2b04      	cmp	r3, #4
 8006748:	f340 8085 	ble.w	8006856 <_dtoa_r+0x90e>
 800674c:	9b05      	ldr	r3, [sp, #20]
 800674e:	f1c0 001c 	rsb	r0, r0, #28
 8006752:	4403      	add	r3, r0
 8006754:	9305      	str	r3, [sp, #20]
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	4403      	add	r3, r0
 800675a:	4405      	add	r5, r0
 800675c:	9306      	str	r3, [sp, #24]
 800675e:	9b05      	ldr	r3, [sp, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	dd05      	ble.n	8006770 <_dtoa_r+0x828>
 8006764:	4651      	mov	r1, sl
 8006766:	461a      	mov	r2, r3
 8006768:	4620      	mov	r0, r4
 800676a:	f000 fcef 	bl	800714c <__lshift>
 800676e:	4682      	mov	sl, r0
 8006770:	9b06      	ldr	r3, [sp, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	dd05      	ble.n	8006782 <_dtoa_r+0x83a>
 8006776:	4631      	mov	r1, r6
 8006778:	461a      	mov	r2, r3
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fce6 	bl	800714c <__lshift>
 8006780:	4606      	mov	r6, r0
 8006782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006784:	2b00      	cmp	r3, #0
 8006786:	d072      	beq.n	800686e <_dtoa_r+0x926>
 8006788:	4631      	mov	r1, r6
 800678a:	4650      	mov	r0, sl
 800678c:	f000 fd4a 	bl	8007224 <__mcmp>
 8006790:	2800      	cmp	r0, #0
 8006792:	da6c      	bge.n	800686e <_dtoa_r+0x926>
 8006794:	2300      	movs	r3, #0
 8006796:	4651      	mov	r1, sl
 8006798:	220a      	movs	r2, #10
 800679a:	4620      	mov	r0, r4
 800679c:	f000 fb28 	bl	8006df0 <__multadd>
 80067a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067a6:	4682      	mov	sl, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 81b0 	beq.w	8006b0e <_dtoa_r+0xbc6>
 80067ae:	2300      	movs	r3, #0
 80067b0:	4639      	mov	r1, r7
 80067b2:	220a      	movs	r2, #10
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 fb1b 	bl	8006df0 <__multadd>
 80067ba:	9b01      	ldr	r3, [sp, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	4607      	mov	r7, r0
 80067c0:	f300 8096 	bgt.w	80068f0 <_dtoa_r+0x9a8>
 80067c4:	9b07      	ldr	r3, [sp, #28]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	dc59      	bgt.n	800687e <_dtoa_r+0x936>
 80067ca:	e091      	b.n	80068f0 <_dtoa_r+0x9a8>
 80067cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067d2:	e758      	b.n	8006686 <_dtoa_r+0x73e>
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	1e5e      	subs	r6, r3, #1
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	42b3      	cmp	r3, r6
 80067dc:	bfbf      	itttt	lt
 80067de:	9b08      	ldrlt	r3, [sp, #32]
 80067e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80067e2:	9608      	strlt	r6, [sp, #32]
 80067e4:	1af3      	sublt	r3, r6, r3
 80067e6:	bfb4      	ite	lt
 80067e8:	18d2      	addlt	r2, r2, r3
 80067ea:	1b9e      	subge	r6, r3, r6
 80067ec:	9b04      	ldr	r3, [sp, #16]
 80067ee:	bfbc      	itt	lt
 80067f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80067f2:	2600      	movlt	r6, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bfb7      	itett	lt
 80067f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80067fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006800:	1a9d      	sublt	r5, r3, r2
 8006802:	2300      	movlt	r3, #0
 8006804:	e741      	b.n	800668a <_dtoa_r+0x742>
 8006806:	9e08      	ldr	r6, [sp, #32]
 8006808:	9d05      	ldr	r5, [sp, #20]
 800680a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800680c:	e748      	b.n	80066a0 <_dtoa_r+0x758>
 800680e:	9a08      	ldr	r2, [sp, #32]
 8006810:	e770      	b.n	80066f4 <_dtoa_r+0x7ac>
 8006812:	9b07      	ldr	r3, [sp, #28]
 8006814:	2b01      	cmp	r3, #1
 8006816:	dc19      	bgt.n	800684c <_dtoa_r+0x904>
 8006818:	9b02      	ldr	r3, [sp, #8]
 800681a:	b9bb      	cbnz	r3, 800684c <_dtoa_r+0x904>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006822:	b99b      	cbnz	r3, 800684c <_dtoa_r+0x904>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800682a:	0d1b      	lsrs	r3, r3, #20
 800682c:	051b      	lsls	r3, r3, #20
 800682e:	b183      	cbz	r3, 8006852 <_dtoa_r+0x90a>
 8006830:	9b05      	ldr	r3, [sp, #20]
 8006832:	3301      	adds	r3, #1
 8006834:	9305      	str	r3, [sp, #20]
 8006836:	9b06      	ldr	r3, [sp, #24]
 8006838:	3301      	adds	r3, #1
 800683a:	9306      	str	r3, [sp, #24]
 800683c:	f04f 0801 	mov.w	r8, #1
 8006840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006842:	2b00      	cmp	r3, #0
 8006844:	f47f af6f 	bne.w	8006726 <_dtoa_r+0x7de>
 8006848:	2001      	movs	r0, #1
 800684a:	e774      	b.n	8006736 <_dtoa_r+0x7ee>
 800684c:	f04f 0800 	mov.w	r8, #0
 8006850:	e7f6      	b.n	8006840 <_dtoa_r+0x8f8>
 8006852:	4698      	mov	r8, r3
 8006854:	e7f4      	b.n	8006840 <_dtoa_r+0x8f8>
 8006856:	d082      	beq.n	800675e <_dtoa_r+0x816>
 8006858:	9a05      	ldr	r2, [sp, #20]
 800685a:	331c      	adds	r3, #28
 800685c:	441a      	add	r2, r3
 800685e:	9205      	str	r2, [sp, #20]
 8006860:	9a06      	ldr	r2, [sp, #24]
 8006862:	441a      	add	r2, r3
 8006864:	441d      	add	r5, r3
 8006866:	9206      	str	r2, [sp, #24]
 8006868:	e779      	b.n	800675e <_dtoa_r+0x816>
 800686a:	4603      	mov	r3, r0
 800686c:	e7f4      	b.n	8006858 <_dtoa_r+0x910>
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	dc37      	bgt.n	80068e4 <_dtoa_r+0x99c>
 8006874:	9b07      	ldr	r3, [sp, #28]
 8006876:	2b02      	cmp	r3, #2
 8006878:	dd34      	ble.n	80068e4 <_dtoa_r+0x99c>
 800687a:	9b04      	ldr	r3, [sp, #16]
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	b963      	cbnz	r3, 800689c <_dtoa_r+0x954>
 8006882:	4631      	mov	r1, r6
 8006884:	2205      	movs	r2, #5
 8006886:	4620      	mov	r0, r4
 8006888:	f000 fab2 	bl	8006df0 <__multadd>
 800688c:	4601      	mov	r1, r0
 800688e:	4606      	mov	r6, r0
 8006890:	4650      	mov	r0, sl
 8006892:	f000 fcc7 	bl	8007224 <__mcmp>
 8006896:	2800      	cmp	r0, #0
 8006898:	f73f adbb 	bgt.w	8006412 <_dtoa_r+0x4ca>
 800689c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689e:	9d00      	ldr	r5, [sp, #0]
 80068a0:	ea6f 0b03 	mvn.w	fp, r3
 80068a4:	f04f 0800 	mov.w	r8, #0
 80068a8:	4631      	mov	r1, r6
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fa7e 	bl	8006dac <_Bfree>
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	f43f aeab 	beq.w	800660c <_dtoa_r+0x6c4>
 80068b6:	f1b8 0f00 	cmp.w	r8, #0
 80068ba:	d005      	beq.n	80068c8 <_dtoa_r+0x980>
 80068bc:	45b8      	cmp	r8, r7
 80068be:	d003      	beq.n	80068c8 <_dtoa_r+0x980>
 80068c0:	4641      	mov	r1, r8
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 fa72 	bl	8006dac <_Bfree>
 80068c8:	4639      	mov	r1, r7
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fa6e 	bl	8006dac <_Bfree>
 80068d0:	e69c      	b.n	800660c <_dtoa_r+0x6c4>
 80068d2:	2600      	movs	r6, #0
 80068d4:	4637      	mov	r7, r6
 80068d6:	e7e1      	b.n	800689c <_dtoa_r+0x954>
 80068d8:	46bb      	mov	fp, r7
 80068da:	4637      	mov	r7, r6
 80068dc:	e599      	b.n	8006412 <_dtoa_r+0x4ca>
 80068de:	bf00      	nop
 80068e0:	40240000 	.word	0x40240000
 80068e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80c8 	beq.w	8006a7c <_dtoa_r+0xb34>
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	dd05      	ble.n	8006900 <_dtoa_r+0x9b8>
 80068f4:	4639      	mov	r1, r7
 80068f6:	462a      	mov	r2, r5
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 fc27 	bl	800714c <__lshift>
 80068fe:	4607      	mov	r7, r0
 8006900:	f1b8 0f00 	cmp.w	r8, #0
 8006904:	d05b      	beq.n	80069be <_dtoa_r+0xa76>
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fa0f 	bl	8006d2c <_Balloc>
 800690e:	4605      	mov	r5, r0
 8006910:	b928      	cbnz	r0, 800691e <_dtoa_r+0x9d6>
 8006912:	4b83      	ldr	r3, [pc, #524]	; (8006b20 <_dtoa_r+0xbd8>)
 8006914:	4602      	mov	r2, r0
 8006916:	f240 21ef 	movw	r1, #751	; 0x2ef
 800691a:	f7ff bb2e 	b.w	8005f7a <_dtoa_r+0x32>
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	3202      	adds	r2, #2
 8006922:	0092      	lsls	r2, r2, #2
 8006924:	f107 010c 	add.w	r1, r7, #12
 8006928:	300c      	adds	r0, #12
 800692a:	f000 fe39 	bl	80075a0 <memcpy>
 800692e:	2201      	movs	r2, #1
 8006930:	4629      	mov	r1, r5
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fc0a 	bl	800714c <__lshift>
 8006938:	9b00      	ldr	r3, [sp, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006942:	4413      	add	r3, r2
 8006944:	9308      	str	r3, [sp, #32]
 8006946:	9b02      	ldr	r3, [sp, #8]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	46b8      	mov	r8, r7
 800694e:	9306      	str	r3, [sp, #24]
 8006950:	4607      	mov	r7, r0
 8006952:	9b04      	ldr	r3, [sp, #16]
 8006954:	4631      	mov	r1, r6
 8006956:	3b01      	subs	r3, #1
 8006958:	4650      	mov	r0, sl
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	f7ff fa69 	bl	8005e32 <quorem>
 8006960:	4641      	mov	r1, r8
 8006962:	9002      	str	r0, [sp, #8]
 8006964:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006968:	4650      	mov	r0, sl
 800696a:	f000 fc5b 	bl	8007224 <__mcmp>
 800696e:	463a      	mov	r2, r7
 8006970:	9005      	str	r0, [sp, #20]
 8006972:	4631      	mov	r1, r6
 8006974:	4620      	mov	r0, r4
 8006976:	f000 fc71 	bl	800725c <__mdiff>
 800697a:	68c2      	ldr	r2, [r0, #12]
 800697c:	4605      	mov	r5, r0
 800697e:	bb02      	cbnz	r2, 80069c2 <_dtoa_r+0xa7a>
 8006980:	4601      	mov	r1, r0
 8006982:	4650      	mov	r0, sl
 8006984:	f000 fc4e 	bl	8007224 <__mcmp>
 8006988:	4602      	mov	r2, r0
 800698a:	4629      	mov	r1, r5
 800698c:	4620      	mov	r0, r4
 800698e:	9209      	str	r2, [sp, #36]	; 0x24
 8006990:	f000 fa0c 	bl	8006dac <_Bfree>
 8006994:	9b07      	ldr	r3, [sp, #28]
 8006996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006998:	9d04      	ldr	r5, [sp, #16]
 800699a:	ea43 0102 	orr.w	r1, r3, r2
 800699e:	9b06      	ldr	r3, [sp, #24]
 80069a0:	4319      	orrs	r1, r3
 80069a2:	d110      	bne.n	80069c6 <_dtoa_r+0xa7e>
 80069a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069a8:	d029      	beq.n	80069fe <_dtoa_r+0xab6>
 80069aa:	9b05      	ldr	r3, [sp, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dd02      	ble.n	80069b6 <_dtoa_r+0xa6e>
 80069b0:	9b02      	ldr	r3, [sp, #8]
 80069b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80069b6:	9b01      	ldr	r3, [sp, #4]
 80069b8:	f883 9000 	strb.w	r9, [r3]
 80069bc:	e774      	b.n	80068a8 <_dtoa_r+0x960>
 80069be:	4638      	mov	r0, r7
 80069c0:	e7ba      	b.n	8006938 <_dtoa_r+0x9f0>
 80069c2:	2201      	movs	r2, #1
 80069c4:	e7e1      	b.n	800698a <_dtoa_r+0xa42>
 80069c6:	9b05      	ldr	r3, [sp, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	db04      	blt.n	80069d6 <_dtoa_r+0xa8e>
 80069cc:	9907      	ldr	r1, [sp, #28]
 80069ce:	430b      	orrs	r3, r1
 80069d0:	9906      	ldr	r1, [sp, #24]
 80069d2:	430b      	orrs	r3, r1
 80069d4:	d120      	bne.n	8006a18 <_dtoa_r+0xad0>
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	dded      	ble.n	80069b6 <_dtoa_r+0xa6e>
 80069da:	4651      	mov	r1, sl
 80069dc:	2201      	movs	r2, #1
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 fbb4 	bl	800714c <__lshift>
 80069e4:	4631      	mov	r1, r6
 80069e6:	4682      	mov	sl, r0
 80069e8:	f000 fc1c 	bl	8007224 <__mcmp>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	dc03      	bgt.n	80069f8 <_dtoa_r+0xab0>
 80069f0:	d1e1      	bne.n	80069b6 <_dtoa_r+0xa6e>
 80069f2:	f019 0f01 	tst.w	r9, #1
 80069f6:	d0de      	beq.n	80069b6 <_dtoa_r+0xa6e>
 80069f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069fc:	d1d8      	bne.n	80069b0 <_dtoa_r+0xa68>
 80069fe:	9a01      	ldr	r2, [sp, #4]
 8006a00:	2339      	movs	r3, #57	; 0x39
 8006a02:	7013      	strb	r3, [r2, #0]
 8006a04:	462b      	mov	r3, r5
 8006a06:	461d      	mov	r5, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a0e:	2a39      	cmp	r2, #57	; 0x39
 8006a10:	d06c      	beq.n	8006aec <_dtoa_r+0xba4>
 8006a12:	3201      	adds	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e747      	b.n	80068a8 <_dtoa_r+0x960>
 8006a18:	2a00      	cmp	r2, #0
 8006a1a:	dd07      	ble.n	8006a2c <_dtoa_r+0xae4>
 8006a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a20:	d0ed      	beq.n	80069fe <_dtoa_r+0xab6>
 8006a22:	9a01      	ldr	r2, [sp, #4]
 8006a24:	f109 0301 	add.w	r3, r9, #1
 8006a28:	7013      	strb	r3, [r2, #0]
 8006a2a:	e73d      	b.n	80068a8 <_dtoa_r+0x960>
 8006a2c:	9b04      	ldr	r3, [sp, #16]
 8006a2e:	9a08      	ldr	r2, [sp, #32]
 8006a30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d043      	beq.n	8006ac0 <_dtoa_r+0xb78>
 8006a38:	4651      	mov	r1, sl
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f9d6 	bl	8006df0 <__multadd>
 8006a44:	45b8      	cmp	r8, r7
 8006a46:	4682      	mov	sl, r0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	f04f 020a 	mov.w	r2, #10
 8006a50:	4641      	mov	r1, r8
 8006a52:	4620      	mov	r0, r4
 8006a54:	d107      	bne.n	8006a66 <_dtoa_r+0xb1e>
 8006a56:	f000 f9cb 	bl	8006df0 <__multadd>
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	9b04      	ldr	r3, [sp, #16]
 8006a60:	3301      	adds	r3, #1
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	e775      	b.n	8006952 <_dtoa_r+0xa0a>
 8006a66:	f000 f9c3 	bl	8006df0 <__multadd>
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	2300      	movs	r3, #0
 8006a70:	220a      	movs	r2, #10
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f9bc 	bl	8006df0 <__multadd>
 8006a78:	4607      	mov	r7, r0
 8006a7a:	e7f0      	b.n	8006a5e <_dtoa_r+0xb16>
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	9d00      	ldr	r5, [sp, #0]
 8006a82:	4631      	mov	r1, r6
 8006a84:	4650      	mov	r0, sl
 8006a86:	f7ff f9d4 	bl	8005e32 <quorem>
 8006a8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	f805 9b01 	strb.w	r9, [r5], #1
 8006a94:	1aea      	subs	r2, r5, r3
 8006a96:	9b01      	ldr	r3, [sp, #4]
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	dd07      	ble.n	8006aac <_dtoa_r+0xb64>
 8006a9c:	4651      	mov	r1, sl
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	220a      	movs	r2, #10
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 f9a4 	bl	8006df0 <__multadd>
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	e7ea      	b.n	8006a82 <_dtoa_r+0xb3a>
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bfc8      	it	gt
 8006ab2:	461d      	movgt	r5, r3
 8006ab4:	9b00      	ldr	r3, [sp, #0]
 8006ab6:	bfd8      	it	le
 8006ab8:	2501      	movle	r5, #1
 8006aba:	441d      	add	r5, r3
 8006abc:	f04f 0800 	mov.w	r8, #0
 8006ac0:	4651      	mov	r1, sl
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fb41 	bl	800714c <__lshift>
 8006aca:	4631      	mov	r1, r6
 8006acc:	4682      	mov	sl, r0
 8006ace:	f000 fba9 	bl	8007224 <__mcmp>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	dc96      	bgt.n	8006a04 <_dtoa_r+0xabc>
 8006ad6:	d102      	bne.n	8006ade <_dtoa_r+0xb96>
 8006ad8:	f019 0f01 	tst.w	r9, #1
 8006adc:	d192      	bne.n	8006a04 <_dtoa_r+0xabc>
 8006ade:	462b      	mov	r3, r5
 8006ae0:	461d      	mov	r5, r3
 8006ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ae6:	2a30      	cmp	r2, #48	; 0x30
 8006ae8:	d0fa      	beq.n	8006ae0 <_dtoa_r+0xb98>
 8006aea:	e6dd      	b.n	80068a8 <_dtoa_r+0x960>
 8006aec:	9a00      	ldr	r2, [sp, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d189      	bne.n	8006a06 <_dtoa_r+0xabe>
 8006af2:	f10b 0b01 	add.w	fp, fp, #1
 8006af6:	2331      	movs	r3, #49	; 0x31
 8006af8:	e796      	b.n	8006a28 <_dtoa_r+0xae0>
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <_dtoa_r+0xbdc>)
 8006afc:	f7ff ba99 	b.w	8006032 <_dtoa_r+0xea>
 8006b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f47f aa6d 	bne.w	8005fe2 <_dtoa_r+0x9a>
 8006b08:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <_dtoa_r+0xbe0>)
 8006b0a:	f7ff ba92 	b.w	8006032 <_dtoa_r+0xea>
 8006b0e:	9b01      	ldr	r3, [sp, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dcb5      	bgt.n	8006a80 <_dtoa_r+0xb38>
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	f73f aeb1 	bgt.w	800687e <_dtoa_r+0x936>
 8006b1c:	e7b0      	b.n	8006a80 <_dtoa_r+0xb38>
 8006b1e:	bf00      	nop
 8006b20:	08007cd8 	.word	0x08007cd8
 8006b24:	08007c38 	.word	0x08007c38
 8006b28:	08007c5c 	.word	0x08007c5c

08006b2c <_free_r>:
 8006b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d044      	beq.n	8006bbc <_free_r+0x90>
 8006b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b36:	9001      	str	r0, [sp, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b3e:	bfb8      	it	lt
 8006b40:	18e4      	addlt	r4, r4, r3
 8006b42:	f000 f8e7 	bl	8006d14 <__malloc_lock>
 8006b46:	4a1e      	ldr	r2, [pc, #120]	; (8006bc0 <_free_r+0x94>)
 8006b48:	9801      	ldr	r0, [sp, #4]
 8006b4a:	6813      	ldr	r3, [r2, #0]
 8006b4c:	b933      	cbnz	r3, 8006b5c <_free_r+0x30>
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	6014      	str	r4, [r2, #0]
 8006b52:	b003      	add	sp, #12
 8006b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b58:	f000 b8e2 	b.w	8006d20 <__malloc_unlock>
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d908      	bls.n	8006b72 <_free_r+0x46>
 8006b60:	6825      	ldr	r5, [r4, #0]
 8006b62:	1961      	adds	r1, r4, r5
 8006b64:	428b      	cmp	r3, r1
 8006b66:	bf01      	itttt	eq
 8006b68:	6819      	ldreq	r1, [r3, #0]
 8006b6a:	685b      	ldreq	r3, [r3, #4]
 8006b6c:	1949      	addeq	r1, r1, r5
 8006b6e:	6021      	streq	r1, [r4, #0]
 8006b70:	e7ed      	b.n	8006b4e <_free_r+0x22>
 8006b72:	461a      	mov	r2, r3
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	b10b      	cbz	r3, 8006b7c <_free_r+0x50>
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	d9fa      	bls.n	8006b72 <_free_r+0x46>
 8006b7c:	6811      	ldr	r1, [r2, #0]
 8006b7e:	1855      	adds	r5, r2, r1
 8006b80:	42a5      	cmp	r5, r4
 8006b82:	d10b      	bne.n	8006b9c <_free_r+0x70>
 8006b84:	6824      	ldr	r4, [r4, #0]
 8006b86:	4421      	add	r1, r4
 8006b88:	1854      	adds	r4, r2, r1
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	d1e0      	bne.n	8006b52 <_free_r+0x26>
 8006b90:	681c      	ldr	r4, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	6053      	str	r3, [r2, #4]
 8006b96:	440c      	add	r4, r1
 8006b98:	6014      	str	r4, [r2, #0]
 8006b9a:	e7da      	b.n	8006b52 <_free_r+0x26>
 8006b9c:	d902      	bls.n	8006ba4 <_free_r+0x78>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	6003      	str	r3, [r0, #0]
 8006ba2:	e7d6      	b.n	8006b52 <_free_r+0x26>
 8006ba4:	6825      	ldr	r5, [r4, #0]
 8006ba6:	1961      	adds	r1, r4, r5
 8006ba8:	428b      	cmp	r3, r1
 8006baa:	bf04      	itt	eq
 8006bac:	6819      	ldreq	r1, [r3, #0]
 8006bae:	685b      	ldreq	r3, [r3, #4]
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	bf04      	itt	eq
 8006bb4:	1949      	addeq	r1, r1, r5
 8006bb6:	6021      	streq	r1, [r4, #0]
 8006bb8:	6054      	str	r4, [r2, #4]
 8006bba:	e7ca      	b.n	8006b52 <_free_r+0x26>
 8006bbc:	b003      	add	sp, #12
 8006bbe:	bd30      	pop	{r4, r5, pc}
 8006bc0:	20000478 	.word	0x20000478

08006bc4 <malloc>:
 8006bc4:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <malloc+0xc>)
 8006bc6:	4601      	mov	r1, r0
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	f000 b823 	b.w	8006c14 <_malloc_r>
 8006bce:	bf00      	nop
 8006bd0:	20000064 	.word	0x20000064

08006bd4 <sbrk_aligned>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	4e0e      	ldr	r6, [pc, #56]	; (8006c10 <sbrk_aligned+0x3c>)
 8006bd8:	460c      	mov	r4, r1
 8006bda:	6831      	ldr	r1, [r6, #0]
 8006bdc:	4605      	mov	r5, r0
 8006bde:	b911      	cbnz	r1, 8006be6 <sbrk_aligned+0x12>
 8006be0:	f000 fcce 	bl	8007580 <_sbrk_r>
 8006be4:	6030      	str	r0, [r6, #0]
 8006be6:	4621      	mov	r1, r4
 8006be8:	4628      	mov	r0, r5
 8006bea:	f000 fcc9 	bl	8007580 <_sbrk_r>
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	d00a      	beq.n	8006c08 <sbrk_aligned+0x34>
 8006bf2:	1cc4      	adds	r4, r0, #3
 8006bf4:	f024 0403 	bic.w	r4, r4, #3
 8006bf8:	42a0      	cmp	r0, r4
 8006bfa:	d007      	beq.n	8006c0c <sbrk_aligned+0x38>
 8006bfc:	1a21      	subs	r1, r4, r0
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 fcbe 	bl	8007580 <_sbrk_r>
 8006c04:	3001      	adds	r0, #1
 8006c06:	d101      	bne.n	8006c0c <sbrk_aligned+0x38>
 8006c08:	f04f 34ff 	mov.w	r4, #4294967295
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	2000047c 	.word	0x2000047c

08006c14 <_malloc_r>:
 8006c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c18:	1ccd      	adds	r5, r1, #3
 8006c1a:	f025 0503 	bic.w	r5, r5, #3
 8006c1e:	3508      	adds	r5, #8
 8006c20:	2d0c      	cmp	r5, #12
 8006c22:	bf38      	it	cc
 8006c24:	250c      	movcc	r5, #12
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	4607      	mov	r7, r0
 8006c2a:	db01      	blt.n	8006c30 <_malloc_r+0x1c>
 8006c2c:	42a9      	cmp	r1, r5
 8006c2e:	d905      	bls.n	8006c3c <_malloc_r+0x28>
 8006c30:	230c      	movs	r3, #12
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	2600      	movs	r6, #0
 8006c36:	4630      	mov	r0, r6
 8006c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d10 <_malloc_r+0xfc>
 8006c40:	f000 f868 	bl	8006d14 <__malloc_lock>
 8006c44:	f8d8 3000 	ldr.w	r3, [r8]
 8006c48:	461c      	mov	r4, r3
 8006c4a:	bb5c      	cbnz	r4, 8006ca4 <_malloc_r+0x90>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4638      	mov	r0, r7
 8006c50:	f7ff ffc0 	bl	8006bd4 <sbrk_aligned>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	4604      	mov	r4, r0
 8006c58:	d155      	bne.n	8006d06 <_malloc_r+0xf2>
 8006c5a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c5e:	4626      	mov	r6, r4
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	d145      	bne.n	8006cf0 <_malloc_r+0xdc>
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	d048      	beq.n	8006cfa <_malloc_r+0xe6>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	eb04 0903 	add.w	r9, r4, r3
 8006c72:	f000 fc85 	bl	8007580 <_sbrk_r>
 8006c76:	4581      	cmp	r9, r0
 8006c78:	d13f      	bne.n	8006cfa <_malloc_r+0xe6>
 8006c7a:	6821      	ldr	r1, [r4, #0]
 8006c7c:	1a6d      	subs	r5, r5, r1
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4638      	mov	r0, r7
 8006c82:	f7ff ffa7 	bl	8006bd4 <sbrk_aligned>
 8006c86:	3001      	adds	r0, #1
 8006c88:	d037      	beq.n	8006cfa <_malloc_r+0xe6>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	442b      	add	r3, r5
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	f8d8 3000 	ldr.w	r3, [r8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d038      	beq.n	8006d0a <_malloc_r+0xf6>
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	42a2      	cmp	r2, r4
 8006c9c:	d12b      	bne.n	8006cf6 <_malloc_r+0xe2>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	e00f      	b.n	8006cc4 <_malloc_r+0xb0>
 8006ca4:	6822      	ldr	r2, [r4, #0]
 8006ca6:	1b52      	subs	r2, r2, r5
 8006ca8:	d41f      	bmi.n	8006cea <_malloc_r+0xd6>
 8006caa:	2a0b      	cmp	r2, #11
 8006cac:	d917      	bls.n	8006cde <_malloc_r+0xca>
 8006cae:	1961      	adds	r1, r4, r5
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	6025      	str	r5, [r4, #0]
 8006cb4:	bf18      	it	ne
 8006cb6:	6059      	strne	r1, [r3, #4]
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	bf08      	it	eq
 8006cbc:	f8c8 1000 	streq.w	r1, [r8]
 8006cc0:	5162      	str	r2, [r4, r5]
 8006cc2:	604b      	str	r3, [r1, #4]
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f104 060b 	add.w	r6, r4, #11
 8006cca:	f000 f829 	bl	8006d20 <__malloc_unlock>
 8006cce:	f026 0607 	bic.w	r6, r6, #7
 8006cd2:	1d23      	adds	r3, r4, #4
 8006cd4:	1af2      	subs	r2, r6, r3
 8006cd6:	d0ae      	beq.n	8006c36 <_malloc_r+0x22>
 8006cd8:	1b9b      	subs	r3, r3, r6
 8006cda:	50a3      	str	r3, [r4, r2]
 8006cdc:	e7ab      	b.n	8006c36 <_malloc_r+0x22>
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	6862      	ldr	r2, [r4, #4]
 8006ce2:	d1dd      	bne.n	8006ca0 <_malloc_r+0x8c>
 8006ce4:	f8c8 2000 	str.w	r2, [r8]
 8006ce8:	e7ec      	b.n	8006cc4 <_malloc_r+0xb0>
 8006cea:	4623      	mov	r3, r4
 8006cec:	6864      	ldr	r4, [r4, #4]
 8006cee:	e7ac      	b.n	8006c4a <_malloc_r+0x36>
 8006cf0:	4634      	mov	r4, r6
 8006cf2:	6876      	ldr	r6, [r6, #4]
 8006cf4:	e7b4      	b.n	8006c60 <_malloc_r+0x4c>
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	e7cc      	b.n	8006c94 <_malloc_r+0x80>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4638      	mov	r0, r7
 8006d00:	f000 f80e 	bl	8006d20 <__malloc_unlock>
 8006d04:	e797      	b.n	8006c36 <_malloc_r+0x22>
 8006d06:	6025      	str	r5, [r4, #0]
 8006d08:	e7dc      	b.n	8006cc4 <_malloc_r+0xb0>
 8006d0a:	605b      	str	r3, [r3, #4]
 8006d0c:	deff      	udf	#255	; 0xff
 8006d0e:	bf00      	nop
 8006d10:	20000478 	.word	0x20000478

08006d14 <__malloc_lock>:
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <__malloc_lock+0x8>)
 8006d16:	f7ff b88a 	b.w	8005e2e <__retarget_lock_acquire_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	20000474 	.word	0x20000474

08006d20 <__malloc_unlock>:
 8006d20:	4801      	ldr	r0, [pc, #4]	; (8006d28 <__malloc_unlock+0x8>)
 8006d22:	f7ff b885 	b.w	8005e30 <__retarget_lock_release_recursive>
 8006d26:	bf00      	nop
 8006d28:	20000474 	.word	0x20000474

08006d2c <_Balloc>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	69c6      	ldr	r6, [r0, #28]
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	b976      	cbnz	r6, 8006d54 <_Balloc+0x28>
 8006d36:	2010      	movs	r0, #16
 8006d38:	f7ff ff44 	bl	8006bc4 <malloc>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	61e0      	str	r0, [r4, #28]
 8006d40:	b920      	cbnz	r0, 8006d4c <_Balloc+0x20>
 8006d42:	4b18      	ldr	r3, [pc, #96]	; (8006da4 <_Balloc+0x78>)
 8006d44:	4818      	ldr	r0, [pc, #96]	; (8006da8 <_Balloc+0x7c>)
 8006d46:	216b      	movs	r1, #107	; 0x6b
 8006d48:	f000 fc38 	bl	80075bc <__assert_func>
 8006d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d50:	6006      	str	r6, [r0, #0]
 8006d52:	60c6      	str	r6, [r0, #12]
 8006d54:	69e6      	ldr	r6, [r4, #28]
 8006d56:	68f3      	ldr	r3, [r6, #12]
 8006d58:	b183      	cbz	r3, 8006d7c <_Balloc+0x50>
 8006d5a:	69e3      	ldr	r3, [r4, #28]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d62:	b9b8      	cbnz	r0, 8006d94 <_Balloc+0x68>
 8006d64:	2101      	movs	r1, #1
 8006d66:	fa01 f605 	lsl.w	r6, r1, r5
 8006d6a:	1d72      	adds	r2, r6, #5
 8006d6c:	0092      	lsls	r2, r2, #2
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 fc42 	bl	80075f8 <_calloc_r>
 8006d74:	b160      	cbz	r0, 8006d90 <_Balloc+0x64>
 8006d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d7a:	e00e      	b.n	8006d9a <_Balloc+0x6e>
 8006d7c:	2221      	movs	r2, #33	; 0x21
 8006d7e:	2104      	movs	r1, #4
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fc39 	bl	80075f8 <_calloc_r>
 8006d86:	69e3      	ldr	r3, [r4, #28]
 8006d88:	60f0      	str	r0, [r6, #12]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e4      	bne.n	8006d5a <_Balloc+0x2e>
 8006d90:	2000      	movs	r0, #0
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	6802      	ldr	r2, [r0, #0]
 8006d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006da0:	e7f7      	b.n	8006d92 <_Balloc+0x66>
 8006da2:	bf00      	nop
 8006da4:	08007c69 	.word	0x08007c69
 8006da8:	08007ce9 	.word	0x08007ce9

08006dac <_Bfree>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	69c6      	ldr	r6, [r0, #28]
 8006db0:	4605      	mov	r5, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b976      	cbnz	r6, 8006dd4 <_Bfree+0x28>
 8006db6:	2010      	movs	r0, #16
 8006db8:	f7ff ff04 	bl	8006bc4 <malloc>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	61e8      	str	r0, [r5, #28]
 8006dc0:	b920      	cbnz	r0, 8006dcc <_Bfree+0x20>
 8006dc2:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <_Bfree+0x3c>)
 8006dc4:	4809      	ldr	r0, [pc, #36]	; (8006dec <_Bfree+0x40>)
 8006dc6:	218f      	movs	r1, #143	; 0x8f
 8006dc8:	f000 fbf8 	bl	80075bc <__assert_func>
 8006dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dd0:	6006      	str	r6, [r0, #0]
 8006dd2:	60c6      	str	r6, [r0, #12]
 8006dd4:	b13c      	cbz	r4, 8006de6 <_Bfree+0x3a>
 8006dd6:	69eb      	ldr	r3, [r5, #28]
 8006dd8:	6862      	ldr	r2, [r4, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006de0:	6021      	str	r1, [r4, #0]
 8006de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	08007c69 	.word	0x08007c69
 8006dec:	08007ce9 	.word	0x08007ce9

08006df0 <__multadd>:
 8006df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	690d      	ldr	r5, [r1, #16]
 8006df6:	4607      	mov	r7, r0
 8006df8:	460c      	mov	r4, r1
 8006dfa:	461e      	mov	r6, r3
 8006dfc:	f101 0c14 	add.w	ip, r1, #20
 8006e00:	2000      	movs	r0, #0
 8006e02:	f8dc 3000 	ldr.w	r3, [ip]
 8006e06:	b299      	uxth	r1, r3
 8006e08:	fb02 6101 	mla	r1, r2, r1, r6
 8006e0c:	0c1e      	lsrs	r6, r3, #16
 8006e0e:	0c0b      	lsrs	r3, r1, #16
 8006e10:	fb02 3306 	mla	r3, r2, r6, r3
 8006e14:	b289      	uxth	r1, r1
 8006e16:	3001      	adds	r0, #1
 8006e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e1c:	4285      	cmp	r5, r0
 8006e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e26:	dcec      	bgt.n	8006e02 <__multadd+0x12>
 8006e28:	b30e      	cbz	r6, 8006e6e <__multadd+0x7e>
 8006e2a:	68a3      	ldr	r3, [r4, #8]
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dc19      	bgt.n	8006e64 <__multadd+0x74>
 8006e30:	6861      	ldr	r1, [r4, #4]
 8006e32:	4638      	mov	r0, r7
 8006e34:	3101      	adds	r1, #1
 8006e36:	f7ff ff79 	bl	8006d2c <_Balloc>
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	b928      	cbnz	r0, 8006e4a <__multadd+0x5a>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <__multadd+0x84>)
 8006e42:	480d      	ldr	r0, [pc, #52]	; (8006e78 <__multadd+0x88>)
 8006e44:	21ba      	movs	r1, #186	; 0xba
 8006e46:	f000 fbb9 	bl	80075bc <__assert_func>
 8006e4a:	6922      	ldr	r2, [r4, #16]
 8006e4c:	3202      	adds	r2, #2
 8006e4e:	f104 010c 	add.w	r1, r4, #12
 8006e52:	0092      	lsls	r2, r2, #2
 8006e54:	300c      	adds	r0, #12
 8006e56:	f000 fba3 	bl	80075a0 <memcpy>
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	f7ff ffa5 	bl	8006dac <_Bfree>
 8006e62:	4644      	mov	r4, r8
 8006e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e68:	3501      	adds	r5, #1
 8006e6a:	615e      	str	r6, [r3, #20]
 8006e6c:	6125      	str	r5, [r4, #16]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e74:	08007cd8 	.word	0x08007cd8
 8006e78:	08007ce9 	.word	0x08007ce9

08006e7c <__hi0bits>:
 8006e7c:	0c03      	lsrs	r3, r0, #16
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	b9d3      	cbnz	r3, 8006eb8 <__hi0bits+0x3c>
 8006e82:	0400      	lsls	r0, r0, #16
 8006e84:	2310      	movs	r3, #16
 8006e86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e8a:	bf04      	itt	eq
 8006e8c:	0200      	lsleq	r0, r0, #8
 8006e8e:	3308      	addeq	r3, #8
 8006e90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e94:	bf04      	itt	eq
 8006e96:	0100      	lsleq	r0, r0, #4
 8006e98:	3304      	addeq	r3, #4
 8006e9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e9e:	bf04      	itt	eq
 8006ea0:	0080      	lsleq	r0, r0, #2
 8006ea2:	3302      	addeq	r3, #2
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	db05      	blt.n	8006eb4 <__hi0bits+0x38>
 8006ea8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006eac:	f103 0301 	add.w	r3, r3, #1
 8006eb0:	bf08      	it	eq
 8006eb2:	2320      	moveq	r3, #32
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	4770      	bx	lr
 8006eb8:	2300      	movs	r3, #0
 8006eba:	e7e4      	b.n	8006e86 <__hi0bits+0xa>

08006ebc <__lo0bits>:
 8006ebc:	6803      	ldr	r3, [r0, #0]
 8006ebe:	f013 0207 	ands.w	r2, r3, #7
 8006ec2:	d00c      	beq.n	8006ede <__lo0bits+0x22>
 8006ec4:	07d9      	lsls	r1, r3, #31
 8006ec6:	d422      	bmi.n	8006f0e <__lo0bits+0x52>
 8006ec8:	079a      	lsls	r2, r3, #30
 8006eca:	bf49      	itett	mi
 8006ecc:	085b      	lsrmi	r3, r3, #1
 8006ece:	089b      	lsrpl	r3, r3, #2
 8006ed0:	6003      	strmi	r3, [r0, #0]
 8006ed2:	2201      	movmi	r2, #1
 8006ed4:	bf5c      	itt	pl
 8006ed6:	6003      	strpl	r3, [r0, #0]
 8006ed8:	2202      	movpl	r2, #2
 8006eda:	4610      	mov	r0, r2
 8006edc:	4770      	bx	lr
 8006ede:	b299      	uxth	r1, r3
 8006ee0:	b909      	cbnz	r1, 8006ee6 <__lo0bits+0x2a>
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	2210      	movs	r2, #16
 8006ee6:	b2d9      	uxtb	r1, r3
 8006ee8:	b909      	cbnz	r1, 8006eee <__lo0bits+0x32>
 8006eea:	3208      	adds	r2, #8
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	0719      	lsls	r1, r3, #28
 8006ef0:	bf04      	itt	eq
 8006ef2:	091b      	lsreq	r3, r3, #4
 8006ef4:	3204      	addeq	r2, #4
 8006ef6:	0799      	lsls	r1, r3, #30
 8006ef8:	bf04      	itt	eq
 8006efa:	089b      	lsreq	r3, r3, #2
 8006efc:	3202      	addeq	r2, #2
 8006efe:	07d9      	lsls	r1, r3, #31
 8006f00:	d403      	bmi.n	8006f0a <__lo0bits+0x4e>
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	f102 0201 	add.w	r2, r2, #1
 8006f08:	d003      	beq.n	8006f12 <__lo0bits+0x56>
 8006f0a:	6003      	str	r3, [r0, #0]
 8006f0c:	e7e5      	b.n	8006eda <__lo0bits+0x1e>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	e7e3      	b.n	8006eda <__lo0bits+0x1e>
 8006f12:	2220      	movs	r2, #32
 8006f14:	e7e1      	b.n	8006eda <__lo0bits+0x1e>
	...

08006f18 <__i2b>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	f7ff ff05 	bl	8006d2c <_Balloc>
 8006f22:	4602      	mov	r2, r0
 8006f24:	b928      	cbnz	r0, 8006f32 <__i2b+0x1a>
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <__i2b+0x24>)
 8006f28:	4805      	ldr	r0, [pc, #20]	; (8006f40 <__i2b+0x28>)
 8006f2a:	f240 1145 	movw	r1, #325	; 0x145
 8006f2e:	f000 fb45 	bl	80075bc <__assert_func>
 8006f32:	2301      	movs	r3, #1
 8006f34:	6144      	str	r4, [r0, #20]
 8006f36:	6103      	str	r3, [r0, #16]
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	bf00      	nop
 8006f3c:	08007cd8 	.word	0x08007cd8
 8006f40:	08007ce9 	.word	0x08007ce9

08006f44 <__multiply>:
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	4691      	mov	r9, r2
 8006f4a:	690a      	ldr	r2, [r1, #16]
 8006f4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	bfb8      	it	lt
 8006f54:	460b      	movlt	r3, r1
 8006f56:	460c      	mov	r4, r1
 8006f58:	bfbc      	itt	lt
 8006f5a:	464c      	movlt	r4, r9
 8006f5c:	4699      	movlt	r9, r3
 8006f5e:	6927      	ldr	r7, [r4, #16]
 8006f60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f64:	68a3      	ldr	r3, [r4, #8]
 8006f66:	6861      	ldr	r1, [r4, #4]
 8006f68:	eb07 060a 	add.w	r6, r7, sl
 8006f6c:	42b3      	cmp	r3, r6
 8006f6e:	b085      	sub	sp, #20
 8006f70:	bfb8      	it	lt
 8006f72:	3101      	addlt	r1, #1
 8006f74:	f7ff feda 	bl	8006d2c <_Balloc>
 8006f78:	b930      	cbnz	r0, 8006f88 <__multiply+0x44>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	4b44      	ldr	r3, [pc, #272]	; (8007090 <__multiply+0x14c>)
 8006f7e:	4845      	ldr	r0, [pc, #276]	; (8007094 <__multiply+0x150>)
 8006f80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f84:	f000 fb1a 	bl	80075bc <__assert_func>
 8006f88:	f100 0514 	add.w	r5, r0, #20
 8006f8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f90:	462b      	mov	r3, r5
 8006f92:	2200      	movs	r2, #0
 8006f94:	4543      	cmp	r3, r8
 8006f96:	d321      	bcc.n	8006fdc <__multiply+0x98>
 8006f98:	f104 0314 	add.w	r3, r4, #20
 8006f9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fa0:	f109 0314 	add.w	r3, r9, #20
 8006fa4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fa8:	9202      	str	r2, [sp, #8]
 8006faa:	1b3a      	subs	r2, r7, r4
 8006fac:	3a15      	subs	r2, #21
 8006fae:	f022 0203 	bic.w	r2, r2, #3
 8006fb2:	3204      	adds	r2, #4
 8006fb4:	f104 0115 	add.w	r1, r4, #21
 8006fb8:	428f      	cmp	r7, r1
 8006fba:	bf38      	it	cc
 8006fbc:	2204      	movcc	r2, #4
 8006fbe:	9201      	str	r2, [sp, #4]
 8006fc0:	9a02      	ldr	r2, [sp, #8]
 8006fc2:	9303      	str	r3, [sp, #12]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d80c      	bhi.n	8006fe2 <__multiply+0x9e>
 8006fc8:	2e00      	cmp	r6, #0
 8006fca:	dd03      	ble.n	8006fd4 <__multiply+0x90>
 8006fcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d05b      	beq.n	800708c <__multiply+0x148>
 8006fd4:	6106      	str	r6, [r0, #16]
 8006fd6:	b005      	add	sp, #20
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	f843 2b04 	str.w	r2, [r3], #4
 8006fe0:	e7d8      	b.n	8006f94 <__multiply+0x50>
 8006fe2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fe6:	f1ba 0f00 	cmp.w	sl, #0
 8006fea:	d024      	beq.n	8007036 <__multiply+0xf2>
 8006fec:	f104 0e14 	add.w	lr, r4, #20
 8006ff0:	46a9      	mov	r9, r5
 8006ff2:	f04f 0c00 	mov.w	ip, #0
 8006ff6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ffa:	f8d9 1000 	ldr.w	r1, [r9]
 8006ffe:	fa1f fb82 	uxth.w	fp, r2
 8007002:	b289      	uxth	r1, r1
 8007004:	fb0a 110b 	mla	r1, sl, fp, r1
 8007008:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800700c:	f8d9 2000 	ldr.w	r2, [r9]
 8007010:	4461      	add	r1, ip
 8007012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007016:	fb0a c20b 	mla	r2, sl, fp, ip
 800701a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800701e:	b289      	uxth	r1, r1
 8007020:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007024:	4577      	cmp	r7, lr
 8007026:	f849 1b04 	str.w	r1, [r9], #4
 800702a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800702e:	d8e2      	bhi.n	8006ff6 <__multiply+0xb2>
 8007030:	9a01      	ldr	r2, [sp, #4]
 8007032:	f845 c002 	str.w	ip, [r5, r2]
 8007036:	9a03      	ldr	r2, [sp, #12]
 8007038:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800703c:	3304      	adds	r3, #4
 800703e:	f1b9 0f00 	cmp.w	r9, #0
 8007042:	d021      	beq.n	8007088 <__multiply+0x144>
 8007044:	6829      	ldr	r1, [r5, #0]
 8007046:	f104 0c14 	add.w	ip, r4, #20
 800704a:	46ae      	mov	lr, r5
 800704c:	f04f 0a00 	mov.w	sl, #0
 8007050:	f8bc b000 	ldrh.w	fp, [ip]
 8007054:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007058:	fb09 220b 	mla	r2, r9, fp, r2
 800705c:	4452      	add	r2, sl
 800705e:	b289      	uxth	r1, r1
 8007060:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007064:	f84e 1b04 	str.w	r1, [lr], #4
 8007068:	f85c 1b04 	ldr.w	r1, [ip], #4
 800706c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007070:	f8be 1000 	ldrh.w	r1, [lr]
 8007074:	fb09 110a 	mla	r1, r9, sl, r1
 8007078:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800707c:	4567      	cmp	r7, ip
 800707e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007082:	d8e5      	bhi.n	8007050 <__multiply+0x10c>
 8007084:	9a01      	ldr	r2, [sp, #4]
 8007086:	50a9      	str	r1, [r5, r2]
 8007088:	3504      	adds	r5, #4
 800708a:	e799      	b.n	8006fc0 <__multiply+0x7c>
 800708c:	3e01      	subs	r6, #1
 800708e:	e79b      	b.n	8006fc8 <__multiply+0x84>
 8007090:	08007cd8 	.word	0x08007cd8
 8007094:	08007ce9 	.word	0x08007ce9

08007098 <__pow5mult>:
 8007098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800709c:	4615      	mov	r5, r2
 800709e:	f012 0203 	ands.w	r2, r2, #3
 80070a2:	4606      	mov	r6, r0
 80070a4:	460f      	mov	r7, r1
 80070a6:	d007      	beq.n	80070b8 <__pow5mult+0x20>
 80070a8:	4c25      	ldr	r4, [pc, #148]	; (8007140 <__pow5mult+0xa8>)
 80070aa:	3a01      	subs	r2, #1
 80070ac:	2300      	movs	r3, #0
 80070ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070b2:	f7ff fe9d 	bl	8006df0 <__multadd>
 80070b6:	4607      	mov	r7, r0
 80070b8:	10ad      	asrs	r5, r5, #2
 80070ba:	d03d      	beq.n	8007138 <__pow5mult+0xa0>
 80070bc:	69f4      	ldr	r4, [r6, #28]
 80070be:	b97c      	cbnz	r4, 80070e0 <__pow5mult+0x48>
 80070c0:	2010      	movs	r0, #16
 80070c2:	f7ff fd7f 	bl	8006bc4 <malloc>
 80070c6:	4602      	mov	r2, r0
 80070c8:	61f0      	str	r0, [r6, #28]
 80070ca:	b928      	cbnz	r0, 80070d8 <__pow5mult+0x40>
 80070cc:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <__pow5mult+0xac>)
 80070ce:	481e      	ldr	r0, [pc, #120]	; (8007148 <__pow5mult+0xb0>)
 80070d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80070d4:	f000 fa72 	bl	80075bc <__assert_func>
 80070d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070dc:	6004      	str	r4, [r0, #0]
 80070de:	60c4      	str	r4, [r0, #12]
 80070e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80070e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070e8:	b94c      	cbnz	r4, 80070fe <__pow5mult+0x66>
 80070ea:	f240 2171 	movw	r1, #625	; 0x271
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff ff12 	bl	8006f18 <__i2b>
 80070f4:	2300      	movs	r3, #0
 80070f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80070fa:	4604      	mov	r4, r0
 80070fc:	6003      	str	r3, [r0, #0]
 80070fe:	f04f 0900 	mov.w	r9, #0
 8007102:	07eb      	lsls	r3, r5, #31
 8007104:	d50a      	bpl.n	800711c <__pow5mult+0x84>
 8007106:	4639      	mov	r1, r7
 8007108:	4622      	mov	r2, r4
 800710a:	4630      	mov	r0, r6
 800710c:	f7ff ff1a 	bl	8006f44 <__multiply>
 8007110:	4639      	mov	r1, r7
 8007112:	4680      	mov	r8, r0
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff fe49 	bl	8006dac <_Bfree>
 800711a:	4647      	mov	r7, r8
 800711c:	106d      	asrs	r5, r5, #1
 800711e:	d00b      	beq.n	8007138 <__pow5mult+0xa0>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	b938      	cbnz	r0, 8007134 <__pow5mult+0x9c>
 8007124:	4622      	mov	r2, r4
 8007126:	4621      	mov	r1, r4
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff ff0b 	bl	8006f44 <__multiply>
 800712e:	6020      	str	r0, [r4, #0]
 8007130:	f8c0 9000 	str.w	r9, [r0]
 8007134:	4604      	mov	r4, r0
 8007136:	e7e4      	b.n	8007102 <__pow5mult+0x6a>
 8007138:	4638      	mov	r0, r7
 800713a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713e:	bf00      	nop
 8007140:	08007e38 	.word	0x08007e38
 8007144:	08007c69 	.word	0x08007c69
 8007148:	08007ce9 	.word	0x08007ce9

0800714c <__lshift>:
 800714c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007150:	460c      	mov	r4, r1
 8007152:	6849      	ldr	r1, [r1, #4]
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800715a:	68a3      	ldr	r3, [r4, #8]
 800715c:	4607      	mov	r7, r0
 800715e:	4691      	mov	r9, r2
 8007160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007164:	f108 0601 	add.w	r6, r8, #1
 8007168:	42b3      	cmp	r3, r6
 800716a:	db0b      	blt.n	8007184 <__lshift+0x38>
 800716c:	4638      	mov	r0, r7
 800716e:	f7ff fddd 	bl	8006d2c <_Balloc>
 8007172:	4605      	mov	r5, r0
 8007174:	b948      	cbnz	r0, 800718a <__lshift+0x3e>
 8007176:	4602      	mov	r2, r0
 8007178:	4b28      	ldr	r3, [pc, #160]	; (800721c <__lshift+0xd0>)
 800717a:	4829      	ldr	r0, [pc, #164]	; (8007220 <__lshift+0xd4>)
 800717c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007180:	f000 fa1c 	bl	80075bc <__assert_func>
 8007184:	3101      	adds	r1, #1
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	e7ee      	b.n	8007168 <__lshift+0x1c>
 800718a:	2300      	movs	r3, #0
 800718c:	f100 0114 	add.w	r1, r0, #20
 8007190:	f100 0210 	add.w	r2, r0, #16
 8007194:	4618      	mov	r0, r3
 8007196:	4553      	cmp	r3, sl
 8007198:	db33      	blt.n	8007202 <__lshift+0xb6>
 800719a:	6920      	ldr	r0, [r4, #16]
 800719c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071a0:	f104 0314 	add.w	r3, r4, #20
 80071a4:	f019 091f 	ands.w	r9, r9, #31
 80071a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071b0:	d02b      	beq.n	800720a <__lshift+0xbe>
 80071b2:	f1c9 0e20 	rsb	lr, r9, #32
 80071b6:	468a      	mov	sl, r1
 80071b8:	2200      	movs	r2, #0
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	fa00 f009 	lsl.w	r0, r0, r9
 80071c0:	4310      	orrs	r0, r2
 80071c2:	f84a 0b04 	str.w	r0, [sl], #4
 80071c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ca:	459c      	cmp	ip, r3
 80071cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80071d0:	d8f3      	bhi.n	80071ba <__lshift+0x6e>
 80071d2:	ebac 0304 	sub.w	r3, ip, r4
 80071d6:	3b15      	subs	r3, #21
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	3304      	adds	r3, #4
 80071de:	f104 0015 	add.w	r0, r4, #21
 80071e2:	4584      	cmp	ip, r0
 80071e4:	bf38      	it	cc
 80071e6:	2304      	movcc	r3, #4
 80071e8:	50ca      	str	r2, [r1, r3]
 80071ea:	b10a      	cbz	r2, 80071f0 <__lshift+0xa4>
 80071ec:	f108 0602 	add.w	r6, r8, #2
 80071f0:	3e01      	subs	r6, #1
 80071f2:	4638      	mov	r0, r7
 80071f4:	612e      	str	r6, [r5, #16]
 80071f6:	4621      	mov	r1, r4
 80071f8:	f7ff fdd8 	bl	8006dac <_Bfree>
 80071fc:	4628      	mov	r0, r5
 80071fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007202:	f842 0f04 	str.w	r0, [r2, #4]!
 8007206:	3301      	adds	r3, #1
 8007208:	e7c5      	b.n	8007196 <__lshift+0x4a>
 800720a:	3904      	subs	r1, #4
 800720c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007210:	f841 2f04 	str.w	r2, [r1, #4]!
 8007214:	459c      	cmp	ip, r3
 8007216:	d8f9      	bhi.n	800720c <__lshift+0xc0>
 8007218:	e7ea      	b.n	80071f0 <__lshift+0xa4>
 800721a:	bf00      	nop
 800721c:	08007cd8 	.word	0x08007cd8
 8007220:	08007ce9 	.word	0x08007ce9

08007224 <__mcmp>:
 8007224:	b530      	push	{r4, r5, lr}
 8007226:	6902      	ldr	r2, [r0, #16]
 8007228:	690c      	ldr	r4, [r1, #16]
 800722a:	1b12      	subs	r2, r2, r4
 800722c:	d10e      	bne.n	800724c <__mcmp+0x28>
 800722e:	f100 0314 	add.w	r3, r0, #20
 8007232:	3114      	adds	r1, #20
 8007234:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007238:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800723c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007240:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007244:	42a5      	cmp	r5, r4
 8007246:	d003      	beq.n	8007250 <__mcmp+0x2c>
 8007248:	d305      	bcc.n	8007256 <__mcmp+0x32>
 800724a:	2201      	movs	r2, #1
 800724c:	4610      	mov	r0, r2
 800724e:	bd30      	pop	{r4, r5, pc}
 8007250:	4283      	cmp	r3, r0
 8007252:	d3f3      	bcc.n	800723c <__mcmp+0x18>
 8007254:	e7fa      	b.n	800724c <__mcmp+0x28>
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	e7f7      	b.n	800724c <__mcmp+0x28>

0800725c <__mdiff>:
 800725c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	460c      	mov	r4, r1
 8007262:	4606      	mov	r6, r0
 8007264:	4611      	mov	r1, r2
 8007266:	4620      	mov	r0, r4
 8007268:	4690      	mov	r8, r2
 800726a:	f7ff ffdb 	bl	8007224 <__mcmp>
 800726e:	1e05      	subs	r5, r0, #0
 8007270:	d110      	bne.n	8007294 <__mdiff+0x38>
 8007272:	4629      	mov	r1, r5
 8007274:	4630      	mov	r0, r6
 8007276:	f7ff fd59 	bl	8006d2c <_Balloc>
 800727a:	b930      	cbnz	r0, 800728a <__mdiff+0x2e>
 800727c:	4b3a      	ldr	r3, [pc, #232]	; (8007368 <__mdiff+0x10c>)
 800727e:	4602      	mov	r2, r0
 8007280:	f240 2137 	movw	r1, #567	; 0x237
 8007284:	4839      	ldr	r0, [pc, #228]	; (800736c <__mdiff+0x110>)
 8007286:	f000 f999 	bl	80075bc <__assert_func>
 800728a:	2301      	movs	r3, #1
 800728c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007294:	bfa4      	itt	ge
 8007296:	4643      	movge	r3, r8
 8007298:	46a0      	movge	r8, r4
 800729a:	4630      	mov	r0, r6
 800729c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072a0:	bfa6      	itte	ge
 80072a2:	461c      	movge	r4, r3
 80072a4:	2500      	movge	r5, #0
 80072a6:	2501      	movlt	r5, #1
 80072a8:	f7ff fd40 	bl	8006d2c <_Balloc>
 80072ac:	b920      	cbnz	r0, 80072b8 <__mdiff+0x5c>
 80072ae:	4b2e      	ldr	r3, [pc, #184]	; (8007368 <__mdiff+0x10c>)
 80072b0:	4602      	mov	r2, r0
 80072b2:	f240 2145 	movw	r1, #581	; 0x245
 80072b6:	e7e5      	b.n	8007284 <__mdiff+0x28>
 80072b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072bc:	6926      	ldr	r6, [r4, #16]
 80072be:	60c5      	str	r5, [r0, #12]
 80072c0:	f104 0914 	add.w	r9, r4, #20
 80072c4:	f108 0514 	add.w	r5, r8, #20
 80072c8:	f100 0e14 	add.w	lr, r0, #20
 80072cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80072d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072d4:	f108 0210 	add.w	r2, r8, #16
 80072d8:	46f2      	mov	sl, lr
 80072da:	2100      	movs	r1, #0
 80072dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80072e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072e4:	fa11 f88b 	uxtah	r8, r1, fp
 80072e8:	b299      	uxth	r1, r3
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	eba8 0801 	sub.w	r8, r8, r1
 80072f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072f8:	fa1f f888 	uxth.w	r8, r8
 80072fc:	1419      	asrs	r1, r3, #16
 80072fe:	454e      	cmp	r6, r9
 8007300:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007304:	f84a 3b04 	str.w	r3, [sl], #4
 8007308:	d8e8      	bhi.n	80072dc <__mdiff+0x80>
 800730a:	1b33      	subs	r3, r6, r4
 800730c:	3b15      	subs	r3, #21
 800730e:	f023 0303 	bic.w	r3, r3, #3
 8007312:	3304      	adds	r3, #4
 8007314:	3415      	adds	r4, #21
 8007316:	42a6      	cmp	r6, r4
 8007318:	bf38      	it	cc
 800731a:	2304      	movcc	r3, #4
 800731c:	441d      	add	r5, r3
 800731e:	4473      	add	r3, lr
 8007320:	469e      	mov	lr, r3
 8007322:	462e      	mov	r6, r5
 8007324:	4566      	cmp	r6, ip
 8007326:	d30e      	bcc.n	8007346 <__mdiff+0xea>
 8007328:	f10c 0203 	add.w	r2, ip, #3
 800732c:	1b52      	subs	r2, r2, r5
 800732e:	f022 0203 	bic.w	r2, r2, #3
 8007332:	3d03      	subs	r5, #3
 8007334:	45ac      	cmp	ip, r5
 8007336:	bf38      	it	cc
 8007338:	2200      	movcc	r2, #0
 800733a:	4413      	add	r3, r2
 800733c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007340:	b17a      	cbz	r2, 8007362 <__mdiff+0x106>
 8007342:	6107      	str	r7, [r0, #16]
 8007344:	e7a4      	b.n	8007290 <__mdiff+0x34>
 8007346:	f856 8b04 	ldr.w	r8, [r6], #4
 800734a:	fa11 f288 	uxtah	r2, r1, r8
 800734e:	1414      	asrs	r4, r2, #16
 8007350:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007354:	b292      	uxth	r2, r2
 8007356:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800735a:	f84e 2b04 	str.w	r2, [lr], #4
 800735e:	1421      	asrs	r1, r4, #16
 8007360:	e7e0      	b.n	8007324 <__mdiff+0xc8>
 8007362:	3f01      	subs	r7, #1
 8007364:	e7ea      	b.n	800733c <__mdiff+0xe0>
 8007366:	bf00      	nop
 8007368:	08007cd8 	.word	0x08007cd8
 800736c:	08007ce9 	.word	0x08007ce9

08007370 <__d2b>:
 8007370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007374:	460f      	mov	r7, r1
 8007376:	2101      	movs	r1, #1
 8007378:	ec59 8b10 	vmov	r8, r9, d0
 800737c:	4616      	mov	r6, r2
 800737e:	f7ff fcd5 	bl	8006d2c <_Balloc>
 8007382:	4604      	mov	r4, r0
 8007384:	b930      	cbnz	r0, 8007394 <__d2b+0x24>
 8007386:	4602      	mov	r2, r0
 8007388:	4b24      	ldr	r3, [pc, #144]	; (800741c <__d2b+0xac>)
 800738a:	4825      	ldr	r0, [pc, #148]	; (8007420 <__d2b+0xb0>)
 800738c:	f240 310f 	movw	r1, #783	; 0x30f
 8007390:	f000 f914 	bl	80075bc <__assert_func>
 8007394:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800739c:	bb2d      	cbnz	r5, 80073ea <__d2b+0x7a>
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	f1b8 0300 	subs.w	r3, r8, #0
 80073a4:	d026      	beq.n	80073f4 <__d2b+0x84>
 80073a6:	4668      	mov	r0, sp
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	f7ff fd87 	bl	8006ebc <__lo0bits>
 80073ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073b2:	b1e8      	cbz	r0, 80073f0 <__d2b+0x80>
 80073b4:	f1c0 0320 	rsb	r3, r0, #32
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	430b      	orrs	r3, r1
 80073be:	40c2      	lsrs	r2, r0
 80073c0:	6163      	str	r3, [r4, #20]
 80073c2:	9201      	str	r2, [sp, #4]
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	61a3      	str	r3, [r4, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	bf14      	ite	ne
 80073cc:	2202      	movne	r2, #2
 80073ce:	2201      	moveq	r2, #1
 80073d0:	6122      	str	r2, [r4, #16]
 80073d2:	b1bd      	cbz	r5, 8007404 <__d2b+0x94>
 80073d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073d8:	4405      	add	r5, r0
 80073da:	603d      	str	r5, [r7, #0]
 80073dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073e0:	6030      	str	r0, [r6, #0]
 80073e2:	4620      	mov	r0, r4
 80073e4:	b003      	add	sp, #12
 80073e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ee:	e7d6      	b.n	800739e <__d2b+0x2e>
 80073f0:	6161      	str	r1, [r4, #20]
 80073f2:	e7e7      	b.n	80073c4 <__d2b+0x54>
 80073f4:	a801      	add	r0, sp, #4
 80073f6:	f7ff fd61 	bl	8006ebc <__lo0bits>
 80073fa:	9b01      	ldr	r3, [sp, #4]
 80073fc:	6163      	str	r3, [r4, #20]
 80073fe:	3020      	adds	r0, #32
 8007400:	2201      	movs	r2, #1
 8007402:	e7e5      	b.n	80073d0 <__d2b+0x60>
 8007404:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007408:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800740c:	6038      	str	r0, [r7, #0]
 800740e:	6918      	ldr	r0, [r3, #16]
 8007410:	f7ff fd34 	bl	8006e7c <__hi0bits>
 8007414:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007418:	e7e2      	b.n	80073e0 <__d2b+0x70>
 800741a:	bf00      	nop
 800741c:	08007cd8 	.word	0x08007cd8
 8007420:	08007ce9 	.word	0x08007ce9

08007424 <__sflush_r>:
 8007424:	898a      	ldrh	r2, [r1, #12]
 8007426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742a:	4605      	mov	r5, r0
 800742c:	0710      	lsls	r0, r2, #28
 800742e:	460c      	mov	r4, r1
 8007430:	d458      	bmi.n	80074e4 <__sflush_r+0xc0>
 8007432:	684b      	ldr	r3, [r1, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	dc05      	bgt.n	8007444 <__sflush_r+0x20>
 8007438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	dc02      	bgt.n	8007444 <__sflush_r+0x20>
 800743e:	2000      	movs	r0, #0
 8007440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007446:	2e00      	cmp	r6, #0
 8007448:	d0f9      	beq.n	800743e <__sflush_r+0x1a>
 800744a:	2300      	movs	r3, #0
 800744c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007450:	682f      	ldr	r7, [r5, #0]
 8007452:	6a21      	ldr	r1, [r4, #32]
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	d032      	beq.n	80074be <__sflush_r+0x9a>
 8007458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	075a      	lsls	r2, r3, #29
 800745e:	d505      	bpl.n	800746c <__sflush_r+0x48>
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	1ac0      	subs	r0, r0, r3
 8007464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007466:	b10b      	cbz	r3, 800746c <__sflush_r+0x48>
 8007468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800746a:	1ac0      	subs	r0, r0, r3
 800746c:	2300      	movs	r3, #0
 800746e:	4602      	mov	r2, r0
 8007470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007472:	6a21      	ldr	r1, [r4, #32]
 8007474:	4628      	mov	r0, r5
 8007476:	47b0      	blx	r6
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	d106      	bne.n	800748c <__sflush_r+0x68>
 800747e:	6829      	ldr	r1, [r5, #0]
 8007480:	291d      	cmp	r1, #29
 8007482:	d82b      	bhi.n	80074dc <__sflush_r+0xb8>
 8007484:	4a29      	ldr	r2, [pc, #164]	; (800752c <__sflush_r+0x108>)
 8007486:	410a      	asrs	r2, r1
 8007488:	07d6      	lsls	r6, r2, #31
 800748a:	d427      	bmi.n	80074dc <__sflush_r+0xb8>
 800748c:	2200      	movs	r2, #0
 800748e:	6062      	str	r2, [r4, #4]
 8007490:	04d9      	lsls	r1, r3, #19
 8007492:	6922      	ldr	r2, [r4, #16]
 8007494:	6022      	str	r2, [r4, #0]
 8007496:	d504      	bpl.n	80074a2 <__sflush_r+0x7e>
 8007498:	1c42      	adds	r2, r0, #1
 800749a:	d101      	bne.n	80074a0 <__sflush_r+0x7c>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b903      	cbnz	r3, 80074a2 <__sflush_r+0x7e>
 80074a0:	6560      	str	r0, [r4, #84]	; 0x54
 80074a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a4:	602f      	str	r7, [r5, #0]
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d0c9      	beq.n	800743e <__sflush_r+0x1a>
 80074aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ae:	4299      	cmp	r1, r3
 80074b0:	d002      	beq.n	80074b8 <__sflush_r+0x94>
 80074b2:	4628      	mov	r0, r5
 80074b4:	f7ff fb3a 	bl	8006b2c <_free_r>
 80074b8:	2000      	movs	r0, #0
 80074ba:	6360      	str	r0, [r4, #52]	; 0x34
 80074bc:	e7c0      	b.n	8007440 <__sflush_r+0x1c>
 80074be:	2301      	movs	r3, #1
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b0      	blx	r6
 80074c4:	1c41      	adds	r1, r0, #1
 80074c6:	d1c8      	bne.n	800745a <__sflush_r+0x36>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0c5      	beq.n	800745a <__sflush_r+0x36>
 80074ce:	2b1d      	cmp	r3, #29
 80074d0:	d001      	beq.n	80074d6 <__sflush_r+0xb2>
 80074d2:	2b16      	cmp	r3, #22
 80074d4:	d101      	bne.n	80074da <__sflush_r+0xb6>
 80074d6:	602f      	str	r7, [r5, #0]
 80074d8:	e7b1      	b.n	800743e <__sflush_r+0x1a>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	e7ad      	b.n	8007440 <__sflush_r+0x1c>
 80074e4:	690f      	ldr	r7, [r1, #16]
 80074e6:	2f00      	cmp	r7, #0
 80074e8:	d0a9      	beq.n	800743e <__sflush_r+0x1a>
 80074ea:	0793      	lsls	r3, r2, #30
 80074ec:	680e      	ldr	r6, [r1, #0]
 80074ee:	bf08      	it	eq
 80074f0:	694b      	ldreq	r3, [r1, #20]
 80074f2:	600f      	str	r7, [r1, #0]
 80074f4:	bf18      	it	ne
 80074f6:	2300      	movne	r3, #0
 80074f8:	eba6 0807 	sub.w	r8, r6, r7
 80074fc:	608b      	str	r3, [r1, #8]
 80074fe:	f1b8 0f00 	cmp.w	r8, #0
 8007502:	dd9c      	ble.n	800743e <__sflush_r+0x1a>
 8007504:	6a21      	ldr	r1, [r4, #32]
 8007506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007508:	4643      	mov	r3, r8
 800750a:	463a      	mov	r2, r7
 800750c:	4628      	mov	r0, r5
 800750e:	47b0      	blx	r6
 8007510:	2800      	cmp	r0, #0
 8007512:	dc06      	bgt.n	8007522 <__sflush_r+0xfe>
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751a:	81a3      	strh	r3, [r4, #12]
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	e78e      	b.n	8007440 <__sflush_r+0x1c>
 8007522:	4407      	add	r7, r0
 8007524:	eba8 0800 	sub.w	r8, r8, r0
 8007528:	e7e9      	b.n	80074fe <__sflush_r+0xda>
 800752a:	bf00      	nop
 800752c:	dfbffffe 	.word	0xdfbffffe

08007530 <_fflush_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	690b      	ldr	r3, [r1, #16]
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	b913      	cbnz	r3, 8007540 <_fflush_r+0x10>
 800753a:	2500      	movs	r5, #0
 800753c:	4628      	mov	r0, r5
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	b118      	cbz	r0, 800754a <_fflush_r+0x1a>
 8007542:	6a03      	ldr	r3, [r0, #32]
 8007544:	b90b      	cbnz	r3, 800754a <_fflush_r+0x1a>
 8007546:	f7fe fb7b 	bl	8005c40 <__sinit>
 800754a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f3      	beq.n	800753a <_fflush_r+0xa>
 8007552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007554:	07d0      	lsls	r0, r2, #31
 8007556:	d404      	bmi.n	8007562 <_fflush_r+0x32>
 8007558:	0599      	lsls	r1, r3, #22
 800755a:	d402      	bmi.n	8007562 <_fflush_r+0x32>
 800755c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800755e:	f7fe fc66 	bl	8005e2e <__retarget_lock_acquire_recursive>
 8007562:	4628      	mov	r0, r5
 8007564:	4621      	mov	r1, r4
 8007566:	f7ff ff5d 	bl	8007424 <__sflush_r>
 800756a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800756c:	07da      	lsls	r2, r3, #31
 800756e:	4605      	mov	r5, r0
 8007570:	d4e4      	bmi.n	800753c <_fflush_r+0xc>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	059b      	lsls	r3, r3, #22
 8007576:	d4e1      	bmi.n	800753c <_fflush_r+0xc>
 8007578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757a:	f7fe fc59 	bl	8005e30 <__retarget_lock_release_recursive>
 800757e:	e7dd      	b.n	800753c <_fflush_r+0xc>

08007580 <_sbrk_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4d06      	ldr	r5, [pc, #24]	; (800759c <_sbrk_r+0x1c>)
 8007584:	2300      	movs	r3, #0
 8007586:	4604      	mov	r4, r0
 8007588:	4608      	mov	r0, r1
 800758a:	602b      	str	r3, [r5, #0]
 800758c:	f7f9 fed6 	bl	800133c <_sbrk>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_sbrk_r+0x1a>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_sbrk_r+0x1a>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	20000470 	.word	0x20000470

080075a0 <memcpy>:
 80075a0:	440a      	add	r2, r1
 80075a2:	4291      	cmp	r1, r2
 80075a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075a8:	d100      	bne.n	80075ac <memcpy+0xc>
 80075aa:	4770      	bx	lr
 80075ac:	b510      	push	{r4, lr}
 80075ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075b6:	4291      	cmp	r1, r2
 80075b8:	d1f9      	bne.n	80075ae <memcpy+0xe>
 80075ba:	bd10      	pop	{r4, pc}

080075bc <__assert_func>:
 80075bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075be:	4614      	mov	r4, r2
 80075c0:	461a      	mov	r2, r3
 80075c2:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <__assert_func+0x2c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4605      	mov	r5, r0
 80075c8:	68d8      	ldr	r0, [r3, #12]
 80075ca:	b14c      	cbz	r4, 80075e0 <__assert_func+0x24>
 80075cc:	4b07      	ldr	r3, [pc, #28]	; (80075ec <__assert_func+0x30>)
 80075ce:	9100      	str	r1, [sp, #0]
 80075d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075d4:	4906      	ldr	r1, [pc, #24]	; (80075f0 <__assert_func+0x34>)
 80075d6:	462b      	mov	r3, r5
 80075d8:	f000 f844 	bl	8007664 <fiprintf>
 80075dc:	f000 f854 	bl	8007688 <abort>
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <__assert_func+0x38>)
 80075e2:	461c      	mov	r4, r3
 80075e4:	e7f3      	b.n	80075ce <__assert_func+0x12>
 80075e6:	bf00      	nop
 80075e8:	20000064 	.word	0x20000064
 80075ec:	08007e4e 	.word	0x08007e4e
 80075f0:	08007e5b 	.word	0x08007e5b
 80075f4:	08007e89 	.word	0x08007e89

080075f8 <_calloc_r>:
 80075f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fa:	fba1 2402 	umull	r2, r4, r1, r2
 80075fe:	b94c      	cbnz	r4, 8007614 <_calloc_r+0x1c>
 8007600:	4611      	mov	r1, r2
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	f7ff fb06 	bl	8006c14 <_malloc_r>
 8007608:	9a01      	ldr	r2, [sp, #4]
 800760a:	4605      	mov	r5, r0
 800760c:	b930      	cbnz	r0, 800761c <_calloc_r+0x24>
 800760e:	4628      	mov	r0, r5
 8007610:	b003      	add	sp, #12
 8007612:	bd30      	pop	{r4, r5, pc}
 8007614:	220c      	movs	r2, #12
 8007616:	6002      	str	r2, [r0, #0]
 8007618:	2500      	movs	r5, #0
 800761a:	e7f8      	b.n	800760e <_calloc_r+0x16>
 800761c:	4621      	mov	r1, r4
 800761e:	f7fe fb88 	bl	8005d32 <memset>
 8007622:	e7f4      	b.n	800760e <_calloc_r+0x16>

08007624 <__ascii_mbtowc>:
 8007624:	b082      	sub	sp, #8
 8007626:	b901      	cbnz	r1, 800762a <__ascii_mbtowc+0x6>
 8007628:	a901      	add	r1, sp, #4
 800762a:	b142      	cbz	r2, 800763e <__ascii_mbtowc+0x1a>
 800762c:	b14b      	cbz	r3, 8007642 <__ascii_mbtowc+0x1e>
 800762e:	7813      	ldrb	r3, [r2, #0]
 8007630:	600b      	str	r3, [r1, #0]
 8007632:	7812      	ldrb	r2, [r2, #0]
 8007634:	1e10      	subs	r0, r2, #0
 8007636:	bf18      	it	ne
 8007638:	2001      	movne	r0, #1
 800763a:	b002      	add	sp, #8
 800763c:	4770      	bx	lr
 800763e:	4610      	mov	r0, r2
 8007640:	e7fb      	b.n	800763a <__ascii_mbtowc+0x16>
 8007642:	f06f 0001 	mvn.w	r0, #1
 8007646:	e7f8      	b.n	800763a <__ascii_mbtowc+0x16>

08007648 <__ascii_wctomb>:
 8007648:	b149      	cbz	r1, 800765e <__ascii_wctomb+0x16>
 800764a:	2aff      	cmp	r2, #255	; 0xff
 800764c:	bf85      	ittet	hi
 800764e:	238a      	movhi	r3, #138	; 0x8a
 8007650:	6003      	strhi	r3, [r0, #0]
 8007652:	700a      	strbls	r2, [r1, #0]
 8007654:	f04f 30ff 	movhi.w	r0, #4294967295
 8007658:	bf98      	it	ls
 800765a:	2001      	movls	r0, #1
 800765c:	4770      	bx	lr
 800765e:	4608      	mov	r0, r1
 8007660:	4770      	bx	lr
	...

08007664 <fiprintf>:
 8007664:	b40e      	push	{r1, r2, r3}
 8007666:	b503      	push	{r0, r1, lr}
 8007668:	4601      	mov	r1, r0
 800766a:	ab03      	add	r3, sp, #12
 800766c:	4805      	ldr	r0, [pc, #20]	; (8007684 <fiprintf+0x20>)
 800766e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007672:	6800      	ldr	r0, [r0, #0]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	f000 f837 	bl	80076e8 <_vfiprintf_r>
 800767a:	b002      	add	sp, #8
 800767c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007680:	b003      	add	sp, #12
 8007682:	4770      	bx	lr
 8007684:	20000064 	.word	0x20000064

08007688 <abort>:
 8007688:	b508      	push	{r3, lr}
 800768a:	2006      	movs	r0, #6
 800768c:	f000 fa04 	bl	8007a98 <raise>
 8007690:	2001      	movs	r0, #1
 8007692:	f7f9 fddb 	bl	800124c <_exit>

08007696 <__sfputc_r>:
 8007696:	6893      	ldr	r3, [r2, #8]
 8007698:	3b01      	subs	r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	b410      	push	{r4}
 800769e:	6093      	str	r3, [r2, #8]
 80076a0:	da08      	bge.n	80076b4 <__sfputc_r+0x1e>
 80076a2:	6994      	ldr	r4, [r2, #24]
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	db01      	blt.n	80076ac <__sfputc_r+0x16>
 80076a8:	290a      	cmp	r1, #10
 80076aa:	d103      	bne.n	80076b4 <__sfputc_r+0x1e>
 80076ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b0:	f000 b934 	b.w	800791c <__swbuf_r>
 80076b4:	6813      	ldr	r3, [r2, #0]
 80076b6:	1c58      	adds	r0, r3, #1
 80076b8:	6010      	str	r0, [r2, #0]
 80076ba:	7019      	strb	r1, [r3, #0]
 80076bc:	4608      	mov	r0, r1
 80076be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <__sfputs_r>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	4606      	mov	r6, r0
 80076c8:	460f      	mov	r7, r1
 80076ca:	4614      	mov	r4, r2
 80076cc:	18d5      	adds	r5, r2, r3
 80076ce:	42ac      	cmp	r4, r5
 80076d0:	d101      	bne.n	80076d6 <__sfputs_r+0x12>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e007      	b.n	80076e6 <__sfputs_r+0x22>
 80076d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076da:	463a      	mov	r2, r7
 80076dc:	4630      	mov	r0, r6
 80076de:	f7ff ffda 	bl	8007696 <__sfputc_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d1f3      	bne.n	80076ce <__sfputs_r+0xa>
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076e8 <_vfiprintf_r>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	460d      	mov	r5, r1
 80076ee:	b09d      	sub	sp, #116	; 0x74
 80076f0:	4614      	mov	r4, r2
 80076f2:	4698      	mov	r8, r3
 80076f4:	4606      	mov	r6, r0
 80076f6:	b118      	cbz	r0, 8007700 <_vfiprintf_r+0x18>
 80076f8:	6a03      	ldr	r3, [r0, #32]
 80076fa:	b90b      	cbnz	r3, 8007700 <_vfiprintf_r+0x18>
 80076fc:	f7fe faa0 	bl	8005c40 <__sinit>
 8007700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007702:	07d9      	lsls	r1, r3, #31
 8007704:	d405      	bmi.n	8007712 <_vfiprintf_r+0x2a>
 8007706:	89ab      	ldrh	r3, [r5, #12]
 8007708:	059a      	lsls	r2, r3, #22
 800770a:	d402      	bmi.n	8007712 <_vfiprintf_r+0x2a>
 800770c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800770e:	f7fe fb8e 	bl	8005e2e <__retarget_lock_acquire_recursive>
 8007712:	89ab      	ldrh	r3, [r5, #12]
 8007714:	071b      	lsls	r3, r3, #28
 8007716:	d501      	bpl.n	800771c <_vfiprintf_r+0x34>
 8007718:	692b      	ldr	r3, [r5, #16]
 800771a:	b99b      	cbnz	r3, 8007744 <_vfiprintf_r+0x5c>
 800771c:	4629      	mov	r1, r5
 800771e:	4630      	mov	r0, r6
 8007720:	f000 f93a 	bl	8007998 <__swsetup_r>
 8007724:	b170      	cbz	r0, 8007744 <_vfiprintf_r+0x5c>
 8007726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007728:	07dc      	lsls	r4, r3, #31
 800772a:	d504      	bpl.n	8007736 <_vfiprintf_r+0x4e>
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	b01d      	add	sp, #116	; 0x74
 8007732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	0598      	lsls	r0, r3, #22
 800773a:	d4f7      	bmi.n	800772c <_vfiprintf_r+0x44>
 800773c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773e:	f7fe fb77 	bl	8005e30 <__retarget_lock_release_recursive>
 8007742:	e7f3      	b.n	800772c <_vfiprintf_r+0x44>
 8007744:	2300      	movs	r3, #0
 8007746:	9309      	str	r3, [sp, #36]	; 0x24
 8007748:	2320      	movs	r3, #32
 800774a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800774e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007752:	2330      	movs	r3, #48	; 0x30
 8007754:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007908 <_vfiprintf_r+0x220>
 8007758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800775c:	f04f 0901 	mov.w	r9, #1
 8007760:	4623      	mov	r3, r4
 8007762:	469a      	mov	sl, r3
 8007764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007768:	b10a      	cbz	r2, 800776e <_vfiprintf_r+0x86>
 800776a:	2a25      	cmp	r2, #37	; 0x25
 800776c:	d1f9      	bne.n	8007762 <_vfiprintf_r+0x7a>
 800776e:	ebba 0b04 	subs.w	fp, sl, r4
 8007772:	d00b      	beq.n	800778c <_vfiprintf_r+0xa4>
 8007774:	465b      	mov	r3, fp
 8007776:	4622      	mov	r2, r4
 8007778:	4629      	mov	r1, r5
 800777a:	4630      	mov	r0, r6
 800777c:	f7ff ffa2 	bl	80076c4 <__sfputs_r>
 8007780:	3001      	adds	r0, #1
 8007782:	f000 80a9 	beq.w	80078d8 <_vfiprintf_r+0x1f0>
 8007786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007788:	445a      	add	r2, fp
 800778a:	9209      	str	r2, [sp, #36]	; 0x24
 800778c:	f89a 3000 	ldrb.w	r3, [sl]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80a1 	beq.w	80078d8 <_vfiprintf_r+0x1f0>
 8007796:	2300      	movs	r3, #0
 8007798:	f04f 32ff 	mov.w	r2, #4294967295
 800779c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a0:	f10a 0a01 	add.w	sl, sl, #1
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ac:	931a      	str	r3, [sp, #104]	; 0x68
 80077ae:	4654      	mov	r4, sl
 80077b0:	2205      	movs	r2, #5
 80077b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b6:	4854      	ldr	r0, [pc, #336]	; (8007908 <_vfiprintf_r+0x220>)
 80077b8:	f7f8 fd0a 	bl	80001d0 <memchr>
 80077bc:	9a04      	ldr	r2, [sp, #16]
 80077be:	b9d8      	cbnz	r0, 80077f8 <_vfiprintf_r+0x110>
 80077c0:	06d1      	lsls	r1, r2, #27
 80077c2:	bf44      	itt	mi
 80077c4:	2320      	movmi	r3, #32
 80077c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ca:	0713      	lsls	r3, r2, #28
 80077cc:	bf44      	itt	mi
 80077ce:	232b      	movmi	r3, #43	; 0x2b
 80077d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d4:	f89a 3000 	ldrb.w	r3, [sl]
 80077d8:	2b2a      	cmp	r3, #42	; 0x2a
 80077da:	d015      	beq.n	8007808 <_vfiprintf_r+0x120>
 80077dc:	9a07      	ldr	r2, [sp, #28]
 80077de:	4654      	mov	r4, sl
 80077e0:	2000      	movs	r0, #0
 80077e2:	f04f 0c0a 	mov.w	ip, #10
 80077e6:	4621      	mov	r1, r4
 80077e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ec:	3b30      	subs	r3, #48	; 0x30
 80077ee:	2b09      	cmp	r3, #9
 80077f0:	d94d      	bls.n	800788e <_vfiprintf_r+0x1a6>
 80077f2:	b1b0      	cbz	r0, 8007822 <_vfiprintf_r+0x13a>
 80077f4:	9207      	str	r2, [sp, #28]
 80077f6:	e014      	b.n	8007822 <_vfiprintf_r+0x13a>
 80077f8:	eba0 0308 	sub.w	r3, r0, r8
 80077fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007800:	4313      	orrs	r3, r2
 8007802:	9304      	str	r3, [sp, #16]
 8007804:	46a2      	mov	sl, r4
 8007806:	e7d2      	b.n	80077ae <_vfiprintf_r+0xc6>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	1d19      	adds	r1, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	9103      	str	r1, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfbb      	ittet	lt
 8007814:	425b      	neglt	r3, r3
 8007816:	f042 0202 	orrlt.w	r2, r2, #2
 800781a:	9307      	strge	r3, [sp, #28]
 800781c:	9307      	strlt	r3, [sp, #28]
 800781e:	bfb8      	it	lt
 8007820:	9204      	strlt	r2, [sp, #16]
 8007822:	7823      	ldrb	r3, [r4, #0]
 8007824:	2b2e      	cmp	r3, #46	; 0x2e
 8007826:	d10c      	bne.n	8007842 <_vfiprintf_r+0x15a>
 8007828:	7863      	ldrb	r3, [r4, #1]
 800782a:	2b2a      	cmp	r3, #42	; 0x2a
 800782c:	d134      	bne.n	8007898 <_vfiprintf_r+0x1b0>
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	1d1a      	adds	r2, r3, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	9203      	str	r2, [sp, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	bfb8      	it	lt
 800783a:	f04f 33ff 	movlt.w	r3, #4294967295
 800783e:	3402      	adds	r4, #2
 8007840:	9305      	str	r3, [sp, #20]
 8007842:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007918 <_vfiprintf_r+0x230>
 8007846:	7821      	ldrb	r1, [r4, #0]
 8007848:	2203      	movs	r2, #3
 800784a:	4650      	mov	r0, sl
 800784c:	f7f8 fcc0 	bl	80001d0 <memchr>
 8007850:	b138      	cbz	r0, 8007862 <_vfiprintf_r+0x17a>
 8007852:	9b04      	ldr	r3, [sp, #16]
 8007854:	eba0 000a 	sub.w	r0, r0, sl
 8007858:	2240      	movs	r2, #64	; 0x40
 800785a:	4082      	lsls	r2, r0
 800785c:	4313      	orrs	r3, r2
 800785e:	3401      	adds	r4, #1
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007866:	4829      	ldr	r0, [pc, #164]	; (800790c <_vfiprintf_r+0x224>)
 8007868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800786c:	2206      	movs	r2, #6
 800786e:	f7f8 fcaf 	bl	80001d0 <memchr>
 8007872:	2800      	cmp	r0, #0
 8007874:	d03f      	beq.n	80078f6 <_vfiprintf_r+0x20e>
 8007876:	4b26      	ldr	r3, [pc, #152]	; (8007910 <_vfiprintf_r+0x228>)
 8007878:	bb1b      	cbnz	r3, 80078c2 <_vfiprintf_r+0x1da>
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	3307      	adds	r3, #7
 800787e:	f023 0307 	bic.w	r3, r3, #7
 8007882:	3308      	adds	r3, #8
 8007884:	9303      	str	r3, [sp, #12]
 8007886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007888:	443b      	add	r3, r7
 800788a:	9309      	str	r3, [sp, #36]	; 0x24
 800788c:	e768      	b.n	8007760 <_vfiprintf_r+0x78>
 800788e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007892:	460c      	mov	r4, r1
 8007894:	2001      	movs	r0, #1
 8007896:	e7a6      	b.n	80077e6 <_vfiprintf_r+0xfe>
 8007898:	2300      	movs	r3, #0
 800789a:	3401      	adds	r4, #1
 800789c:	9305      	str	r3, [sp, #20]
 800789e:	4619      	mov	r1, r3
 80078a0:	f04f 0c0a 	mov.w	ip, #10
 80078a4:	4620      	mov	r0, r4
 80078a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078aa:	3a30      	subs	r2, #48	; 0x30
 80078ac:	2a09      	cmp	r2, #9
 80078ae:	d903      	bls.n	80078b8 <_vfiprintf_r+0x1d0>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0c6      	beq.n	8007842 <_vfiprintf_r+0x15a>
 80078b4:	9105      	str	r1, [sp, #20]
 80078b6:	e7c4      	b.n	8007842 <_vfiprintf_r+0x15a>
 80078b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80078bc:	4604      	mov	r4, r0
 80078be:	2301      	movs	r3, #1
 80078c0:	e7f0      	b.n	80078a4 <_vfiprintf_r+0x1bc>
 80078c2:	ab03      	add	r3, sp, #12
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	462a      	mov	r2, r5
 80078c8:	4b12      	ldr	r3, [pc, #72]	; (8007914 <_vfiprintf_r+0x22c>)
 80078ca:	a904      	add	r1, sp, #16
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7fd fd65 	bl	800539c <_printf_float>
 80078d2:	4607      	mov	r7, r0
 80078d4:	1c78      	adds	r0, r7, #1
 80078d6:	d1d6      	bne.n	8007886 <_vfiprintf_r+0x19e>
 80078d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078da:	07d9      	lsls	r1, r3, #31
 80078dc:	d405      	bmi.n	80078ea <_vfiprintf_r+0x202>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	059a      	lsls	r2, r3, #22
 80078e2:	d402      	bmi.n	80078ea <_vfiprintf_r+0x202>
 80078e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e6:	f7fe faa3 	bl	8005e30 <__retarget_lock_release_recursive>
 80078ea:	89ab      	ldrh	r3, [r5, #12]
 80078ec:	065b      	lsls	r3, r3, #25
 80078ee:	f53f af1d 	bmi.w	800772c <_vfiprintf_r+0x44>
 80078f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078f4:	e71c      	b.n	8007730 <_vfiprintf_r+0x48>
 80078f6:	ab03      	add	r3, sp, #12
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	462a      	mov	r2, r5
 80078fc:	4b05      	ldr	r3, [pc, #20]	; (8007914 <_vfiprintf_r+0x22c>)
 80078fe:	a904      	add	r1, sp, #16
 8007900:	4630      	mov	r0, r6
 8007902:	f7fd ffef 	bl	80058e4 <_printf_i>
 8007906:	e7e4      	b.n	80078d2 <_vfiprintf_r+0x1ea>
 8007908:	08007f8b 	.word	0x08007f8b
 800790c:	08007f95 	.word	0x08007f95
 8007910:	0800539d 	.word	0x0800539d
 8007914:	080076c5 	.word	0x080076c5
 8007918:	08007f91 	.word	0x08007f91

0800791c <__swbuf_r>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	460e      	mov	r6, r1
 8007920:	4614      	mov	r4, r2
 8007922:	4605      	mov	r5, r0
 8007924:	b118      	cbz	r0, 800792e <__swbuf_r+0x12>
 8007926:	6a03      	ldr	r3, [r0, #32]
 8007928:	b90b      	cbnz	r3, 800792e <__swbuf_r+0x12>
 800792a:	f7fe f989 	bl	8005c40 <__sinit>
 800792e:	69a3      	ldr	r3, [r4, #24]
 8007930:	60a3      	str	r3, [r4, #8]
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	071a      	lsls	r2, r3, #28
 8007936:	d525      	bpl.n	8007984 <__swbuf_r+0x68>
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	b31b      	cbz	r3, 8007984 <__swbuf_r+0x68>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	1a98      	subs	r0, r3, r2
 8007942:	6963      	ldr	r3, [r4, #20]
 8007944:	b2f6      	uxtb	r6, r6
 8007946:	4283      	cmp	r3, r0
 8007948:	4637      	mov	r7, r6
 800794a:	dc04      	bgt.n	8007956 <__swbuf_r+0x3a>
 800794c:	4621      	mov	r1, r4
 800794e:	4628      	mov	r0, r5
 8007950:	f7ff fdee 	bl	8007530 <_fflush_r>
 8007954:	b9e0      	cbnz	r0, 8007990 <__swbuf_r+0x74>
 8007956:	68a3      	ldr	r3, [r4, #8]
 8007958:	3b01      	subs	r3, #1
 800795a:	60a3      	str	r3, [r4, #8]
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	6022      	str	r2, [r4, #0]
 8007962:	701e      	strb	r6, [r3, #0]
 8007964:	6962      	ldr	r2, [r4, #20]
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	429a      	cmp	r2, r3
 800796a:	d004      	beq.n	8007976 <__swbuf_r+0x5a>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	07db      	lsls	r3, r3, #31
 8007970:	d506      	bpl.n	8007980 <__swbuf_r+0x64>
 8007972:	2e0a      	cmp	r6, #10
 8007974:	d104      	bne.n	8007980 <__swbuf_r+0x64>
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	f7ff fdd9 	bl	8007530 <_fflush_r>
 800797e:	b938      	cbnz	r0, 8007990 <__swbuf_r+0x74>
 8007980:	4638      	mov	r0, r7
 8007982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007984:	4621      	mov	r1, r4
 8007986:	4628      	mov	r0, r5
 8007988:	f000 f806 	bl	8007998 <__swsetup_r>
 800798c:	2800      	cmp	r0, #0
 800798e:	d0d5      	beq.n	800793c <__swbuf_r+0x20>
 8007990:	f04f 37ff 	mov.w	r7, #4294967295
 8007994:	e7f4      	b.n	8007980 <__swbuf_r+0x64>
	...

08007998 <__swsetup_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4b2a      	ldr	r3, [pc, #168]	; (8007a44 <__swsetup_r+0xac>)
 800799c:	4605      	mov	r5, r0
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	460c      	mov	r4, r1
 80079a2:	b118      	cbz	r0, 80079ac <__swsetup_r+0x14>
 80079a4:	6a03      	ldr	r3, [r0, #32]
 80079a6:	b90b      	cbnz	r3, 80079ac <__swsetup_r+0x14>
 80079a8:	f7fe f94a 	bl	8005c40 <__sinit>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079b2:	0718      	lsls	r0, r3, #28
 80079b4:	d422      	bmi.n	80079fc <__swsetup_r+0x64>
 80079b6:	06d9      	lsls	r1, r3, #27
 80079b8:	d407      	bmi.n	80079ca <__swsetup_r+0x32>
 80079ba:	2309      	movs	r3, #9
 80079bc:	602b      	str	r3, [r5, #0]
 80079be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	f04f 30ff 	mov.w	r0, #4294967295
 80079c8:	e034      	b.n	8007a34 <__swsetup_r+0x9c>
 80079ca:	0758      	lsls	r0, r3, #29
 80079cc:	d512      	bpl.n	80079f4 <__swsetup_r+0x5c>
 80079ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079d0:	b141      	cbz	r1, 80079e4 <__swsetup_r+0x4c>
 80079d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079d6:	4299      	cmp	r1, r3
 80079d8:	d002      	beq.n	80079e0 <__swsetup_r+0x48>
 80079da:	4628      	mov	r0, r5
 80079dc:	f7ff f8a6 	bl	8006b2c <_free_r>
 80079e0:	2300      	movs	r3, #0
 80079e2:	6363      	str	r3, [r4, #52]	; 0x34
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079ea:	81a3      	strh	r3, [r4, #12]
 80079ec:	2300      	movs	r3, #0
 80079ee:	6063      	str	r3, [r4, #4]
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f043 0308 	orr.w	r3, r3, #8
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	b94b      	cbnz	r3, 8007a14 <__swsetup_r+0x7c>
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a0a:	d003      	beq.n	8007a14 <__swsetup_r+0x7c>
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 f884 	bl	8007b1c <__smakebuf_r>
 8007a14:	89a0      	ldrh	r0, [r4, #12]
 8007a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a1a:	f010 0301 	ands.w	r3, r0, #1
 8007a1e:	d00a      	beq.n	8007a36 <__swsetup_r+0x9e>
 8007a20:	2300      	movs	r3, #0
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	6963      	ldr	r3, [r4, #20]
 8007a26:	425b      	negs	r3, r3
 8007a28:	61a3      	str	r3, [r4, #24]
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	b943      	cbnz	r3, 8007a40 <__swsetup_r+0xa8>
 8007a2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a32:	d1c4      	bne.n	80079be <__swsetup_r+0x26>
 8007a34:	bd38      	pop	{r3, r4, r5, pc}
 8007a36:	0781      	lsls	r1, r0, #30
 8007a38:	bf58      	it	pl
 8007a3a:	6963      	ldrpl	r3, [r4, #20]
 8007a3c:	60a3      	str	r3, [r4, #8]
 8007a3e:	e7f4      	b.n	8007a2a <__swsetup_r+0x92>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e7f7      	b.n	8007a34 <__swsetup_r+0x9c>
 8007a44:	20000064 	.word	0x20000064

08007a48 <_raise_r>:
 8007a48:	291f      	cmp	r1, #31
 8007a4a:	b538      	push	{r3, r4, r5, lr}
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	d904      	bls.n	8007a5c <_raise_r+0x14>
 8007a52:	2316      	movs	r3, #22
 8007a54:	6003      	str	r3, [r0, #0]
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a5e:	b112      	cbz	r2, 8007a66 <_raise_r+0x1e>
 8007a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a64:	b94b      	cbnz	r3, 8007a7a <_raise_r+0x32>
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 f830 	bl	8007acc <_getpid_r>
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	4601      	mov	r1, r0
 8007a70:	4620      	mov	r0, r4
 8007a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a76:	f000 b817 	b.w	8007aa8 <_kill_r>
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d00a      	beq.n	8007a94 <_raise_r+0x4c>
 8007a7e:	1c59      	adds	r1, r3, #1
 8007a80:	d103      	bne.n	8007a8a <_raise_r+0x42>
 8007a82:	2316      	movs	r3, #22
 8007a84:	6003      	str	r3, [r0, #0]
 8007a86:	2001      	movs	r0, #1
 8007a88:	e7e7      	b.n	8007a5a <_raise_r+0x12>
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a90:	4628      	mov	r0, r5
 8007a92:	4798      	blx	r3
 8007a94:	2000      	movs	r0, #0
 8007a96:	e7e0      	b.n	8007a5a <_raise_r+0x12>

08007a98 <raise>:
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <raise+0xc>)
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	f7ff bfd3 	b.w	8007a48 <_raise_r>
 8007aa2:	bf00      	nop
 8007aa4:	20000064 	.word	0x20000064

08007aa8 <_kill_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d07      	ldr	r5, [pc, #28]	; (8007ac8 <_kill_r+0x20>)
 8007aac:	2300      	movs	r3, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	f7f9 fbb9 	bl	800122c <_kill>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d102      	bne.n	8007ac4 <_kill_r+0x1c>
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	b103      	cbz	r3, 8007ac4 <_kill_r+0x1c>
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	bd38      	pop	{r3, r4, r5, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000470 	.word	0x20000470

08007acc <_getpid_r>:
 8007acc:	f7f9 bba6 	b.w	800121c <_getpid>

08007ad0 <__swhatbuf_r>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	b096      	sub	sp, #88	; 0x58
 8007adc:	4615      	mov	r5, r2
 8007ade:	461e      	mov	r6, r3
 8007ae0:	da0d      	bge.n	8007afe <__swhatbuf_r+0x2e>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	bf0c      	ite	eq
 8007aee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007af2:	2340      	movne	r3, #64	; 0x40
 8007af4:	2000      	movs	r0, #0
 8007af6:	6031      	str	r1, [r6, #0]
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	b016      	add	sp, #88	; 0x58
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
 8007afe:	466a      	mov	r2, sp
 8007b00:	f000 f848 	bl	8007b94 <_fstat_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dbec      	blt.n	8007ae2 <__swhatbuf_r+0x12>
 8007b08:	9901      	ldr	r1, [sp, #4]
 8007b0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b12:	4259      	negs	r1, r3
 8007b14:	4159      	adcs	r1, r3
 8007b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b1a:	e7eb      	b.n	8007af4 <__swhatbuf_r+0x24>

08007b1c <__smakebuf_r>:
 8007b1c:	898b      	ldrh	r3, [r1, #12]
 8007b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b20:	079d      	lsls	r5, r3, #30
 8007b22:	4606      	mov	r6, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	d507      	bpl.n	8007b38 <__smakebuf_r+0x1c>
 8007b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	6123      	str	r3, [r4, #16]
 8007b30:	2301      	movs	r3, #1
 8007b32:	6163      	str	r3, [r4, #20]
 8007b34:	b002      	add	sp, #8
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	ab01      	add	r3, sp, #4
 8007b3a:	466a      	mov	r2, sp
 8007b3c:	f7ff ffc8 	bl	8007ad0 <__swhatbuf_r>
 8007b40:	9900      	ldr	r1, [sp, #0]
 8007b42:	4605      	mov	r5, r0
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff f865 	bl	8006c14 <_malloc_r>
 8007b4a:	b948      	cbnz	r0, 8007b60 <__smakebuf_r+0x44>
 8007b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b50:	059a      	lsls	r2, r3, #22
 8007b52:	d4ef      	bmi.n	8007b34 <__smakebuf_r+0x18>
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	f043 0302 	orr.w	r3, r3, #2
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	e7e3      	b.n	8007b28 <__smakebuf_r+0xc>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	6020      	str	r0, [r4, #0]
 8007b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	6163      	str	r3, [r4, #20]
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	6120      	str	r0, [r4, #16]
 8007b72:	b15b      	cbz	r3, 8007b8c <__smakebuf_r+0x70>
 8007b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f81d 	bl	8007bb8 <_isatty_r>
 8007b7e:	b128      	cbz	r0, 8007b8c <__smakebuf_r+0x70>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	431d      	orrs	r5, r3
 8007b90:	81a5      	strh	r5, [r4, #12]
 8007b92:	e7cf      	b.n	8007b34 <__smakebuf_r+0x18>

08007b94 <_fstat_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	; (8007bb4 <_fstat_r+0x20>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	f7f9 fba2 	bl	80012ea <_fstat>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d102      	bne.n	8007bb0 <_fstat_r+0x1c>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	b103      	cbz	r3, 8007bb0 <_fstat_r+0x1c>
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000470 	.word	0x20000470

08007bb8 <_isatty_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d06      	ldr	r5, [pc, #24]	; (8007bd4 <_isatty_r+0x1c>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	f7f9 fba1 	bl	800130a <_isatty>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_isatty_r+0x1a>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_isatty_r+0x1a>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20000470 	.word	0x20000470

08007bd8 <_init>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr

08007be4 <_fini>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr
