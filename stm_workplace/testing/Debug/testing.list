
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080086d8  080086d8  000186d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a84  08008a84  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008a84  08008a84  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a84  08008a84  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000002a8  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001291c  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002975  00000000  00000000  00032b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001080  00000000  00000000  000354d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cdb  00000000  00000000  00036558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d91c  00000000  00000000  00037233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001504f  00000000  00000000  00054b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000af71e  00000000  00000000  00069b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005550  00000000  00000000  001192bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  0011e80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086c0 	.word	0x080086c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080086c0 	.word	0x080086c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fc9a 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f812 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f9e2 	bl	8000f7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb8:	f000 f9b0 	bl	8000f1c <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000bbc:	f000 f8d8 	bl	8000d70 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000bc0:	f000 f866 	bl	8000c90 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bc4:	f000 f8fe 	bl	8000dc4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <main+0x2c>)
 8000bcc:	f003 fa44 	bl	8004058 <HAL_TIM_PWM_Start>
  //HAL_UART_Receive_IT(&huart2, (uint8_t *)msg, 5);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <main+0x28>
 8000bd2:	bf00      	nop
 8000bd4:	20000254 	.word	0x20000254

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b096      	sub	sp, #88	; 0x58
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be2:	2228      	movs	r2, #40	; 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 fe19 	bl	800681e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	2301      	movs	r3, #1
 8000c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2310      	movs	r3, #16
 8000c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 fdc2 	bl	80027b4 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c36:	f000 f9d7 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fdeb 	bl	8003830 <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f9c2 	bl	8000fe8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000c64:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000c68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 f810 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c82:	f000 f9b1 	bl	8000fe8 <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3758      	adds	r7, #88	; 0x58
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d0c:	4817      	ldr	r0, [pc, #92]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000d0e:	f000 fc4f 	bl	80015b0 <HAL_ADC_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 f966 	bl	8000fe8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4811      	ldr	r0, [pc, #68]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000d28:	f001 f892 	bl	8001e50 <HAL_ADCEx_MultiModeConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d32:	f000 f959 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_ADC1_Init+0xdc>)
 8000d54:	f000 fdbe 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d5e:	f000 f943 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001f0 	.word	0x200001f0

08000d70 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_DAC1_Init+0x4c>)
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <MX_DAC1_Init+0x50>)
 8000d84:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_DAC1_Init+0x4c>)
 8000d88:	f001 fa9f 	bl	80022ca <HAL_DAC_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000d92:	f000 f929 	bl	8000fe8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_DAC1_Init+0x4c>)
 8000da6:	f001 fab3 	bl	8002310 <HAL_DAC_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000db0:	f000 f91a 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000240 	.word	0x20000240
 8000dc0:	40007400 	.word	0x40007400

08000dc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b09a      	sub	sp, #104	; 0x68
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	222c      	movs	r2, #44	; 0x2c
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f005 fd0d 	bl	800681e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e04:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e06:	4a44      	ldr	r2, [pc, #272]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000 - 1;
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e0c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200 - 1;
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e1a:	22c7      	movs	r2, #199	; 0xc7
 8000e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e2a:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e30:	4838      	ldr	r0, [pc, #224]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e32:	f003 f859 	bl	8003ee8 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f000 f8d4 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4831      	ldr	r0, [pc, #196]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e4e:	f003 fb03 	bl	8004458 <HAL_TIM_ConfigClockSource>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e58:	f000 f8c6 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e5c:	482d      	ldr	r0, [pc, #180]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e5e:	f003 f89a 	bl	8003f96 <HAL_TIM_PWM_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e68:	f000 f8be 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4825      	ldr	r0, [pc, #148]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000e80:	f003 ff92 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e8a:	f000 f8ad 	bl	8000fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8e:	2360      	movs	r3, #96	; 0x60
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100 - 1;
 8000e92:	2363      	movs	r3, #99	; 0x63
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4818      	ldr	r0, [pc, #96]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000eb4:	f003 f9bc 	bl	8004230 <HAL_TIM_PWM_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000ebe:	f000 f893 	bl	8000fe8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000ef8:	f003 ffc4 	bl	8004e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f02:	f000 f871 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <MX_TIM1_Init+0x150>)
 8000f08:	f000 f932 	bl	8001170 <HAL_TIM_MspPostInit>

}
 8000f0c:	bf00      	nop
 8000f0e:	3768      	adds	r7, #104	; 0x68
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000254 	.word	0x20000254
 8000f18:	40012c00 	.word	0x40012c00

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f22:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <MX_USART2_UART_Init+0x5c>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f60:	f004 f808 	bl	8004f74 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f000 f83d 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200002a0 	.word	0x200002a0
 8000f78:	40004400 	.word	0x40004400

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_GPIO_Init+0x68>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_GPIO_Init+0x68>)
 8000f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_GPIO_Init+0x68>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_GPIO_Init+0x68>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <MX_GPIO_Init+0x68>)
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_GPIO_Init+0x68>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8000fc2:	232a      	movs	r3, #42	; 0x2a
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f001 fa7a 	bl	80024d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x44>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_MspInit+0x44>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x44>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x44>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800105c:	d124      	bne.n	80010a8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	6153      	str	r3, [r2, #20]
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f001 fa14 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_DAC_MspInit+0x74>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d124      	bne.n	8001120 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001106:	2310      	movs	r3, #16
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f001 f9d8 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40007400 	.word	0x40007400
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_TIM_Base_MspInit+0x38>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10b      	bne.n	800115a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_TIM_Base_MspInit+0x3c>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_TIM_Base_MspInit+0x3c>)
 8001148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800114c:	6193      	str	r3, [r2, #24]
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_TIM_Base_MspInit+0x3c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40012c00 	.word	0x40012c00
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <HAL_TIM_MspPostInit+0x68>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d11d      	bne.n	80011ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_TIM_MspPostInit+0x6c>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a11      	ldr	r2, [pc, #68]	; (80011dc <HAL_TIM_MspPostInit+0x6c>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_TIM_MspPostInit+0x6c>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011bc:	2306      	movs	r3, #6
 80011be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f001 f981 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40012c00 	.word	0x40012c00
 80011dc:	40021000 	.word	0x40021000

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <HAL_UART_MspInit+0x90>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d131      	bne.n	8001266 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_UART_MspInit+0x94>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <HAL_UART_MspInit+0x94>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_UART_MspInit+0x94>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_UART_MspInit+0x94>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_UART_MspInit+0x94>)
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	6153      	str	r3, [r2, #20]
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_UART_MspInit+0x94>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001232:	f248 0304 	movw	r3, #32772	; 0x8004
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001244:	2307      	movs	r3, #7
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f001 f93d 	bl	80024d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2026      	movs	r0, #38	; 0x26
 800125c:	f000 ffff 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001260:	2026      	movs	r0, #38	; 0x26
 8001262:	f001 f818 	bl	8002296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40004400 	.word	0x40004400
 8001274:	40021000 	.word	0x40021000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 f954 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <USART2_IRQHandler+0x10>)
 80012d2:	f003 fe9d 	bl	8005010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200002a0 	.word	0x200002a0

080012e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return 1;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_kill>:

int _kill(int pid, int sig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012fa:	f005 fae3 	bl	80068c4 <__errno>
 80012fe:	4603      	mov	r3, r0
 8001300:	2216      	movs	r2, #22
 8001302:	601a      	str	r2, [r3, #0]
  return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_exit>:

void _exit (int status)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffe7 	bl	80012f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001322:	e7fe      	b.n	8001322 <_exit+0x12>

08001324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e00a      	b.n	800134c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001336:	f3af 8000 	nop.w
 800133a:	4601      	mov	r1, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbf0      	blt.n	8001336 <_read+0x12>
  }

  return len;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e009      	b.n	8001384 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf1      	blt.n	8001370 <_write+0x12>
  }
  return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_close>:

int _close(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013be:	605a      	str	r2, [r3, #4]
  return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_isatty>:

int _isatty(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f005 fa48 	bl	80068c4 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20003000 	.word	0x20003000
 8001460:	00000400 	.word	0x00000400
 8001464:	20000328 	.word	0x20000328
 8001468:	20000480 	.word	0x20000480

0800146c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001494:	f7ff ffea 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <LoopForever+0x6>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <LoopForever+0xe>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <LoopForever+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014be:	f005 fa07 	bl	80068d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c2:	f7ff fb71 	bl	8000ba8 <main>

080014c6 <LoopForever>:

LoopForever:
    b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014c8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014d4:	08008a8c 	.word	0x08008a8c
  ldr r2, =_sbss
 80014d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014dc:	2000047c 	.word	0x2000047c

080014e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_Init+0x28>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_Init+0x28>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 fea7 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f808 	bl	8001510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff fd78 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000

08001510 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x54>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x58>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 febf 	bl	80022b2 <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 fe87 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_InitTick+0x5c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000000 	.word	0x20000000
 8001568:	20000008 	.word	0x20000008
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_IncTick+0x24>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008
 8001594:	2000032c 	.word	0x2000032c

08001598 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;  
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	2000032c 	.word	0x2000032c

080015b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b09a      	sub	sp, #104	; 0x68
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e172      	b.n	80018b6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d176      	bne.n	80016d0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d152      	bne.n	8001690 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fd19 	bl	800103c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d13b      	bne.n	8001690 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fcdf 	bl	8001fdc <ADC_Disable>
 800161e:	4603      	mov	r3, r0
 8001620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b00      	cmp	r3, #0
 800162e:	d12f      	bne.n	8001690 <HAL_ADC_Init+0xe0>
 8001630:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001634:	2b00      	cmp	r3, #0
 8001636:	d12b      	bne.n	8001690 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001640:	f023 0302 	bic.w	r3, r3, #2
 8001644:	f043 0202 	orr.w	r2, r3, #2
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800165a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800166a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800166c:	4b94      	ldr	r3, [pc, #592]	; (80018c0 <HAL_ADC_Init+0x310>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a94      	ldr	r2, [pc, #592]	; (80018c4 <HAL_ADC_Init+0x314>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0c9a      	lsrs	r2, r3, #18
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001682:	e002      	b.n	800168a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3b01      	subs	r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f9      	bne.n	8001684 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ac:	d110      	bne.n	80016d0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f023 0312 	bic.w	r3, r3, #18
 80016b6:	f043 0210 	orr.w	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 80df 	bne.w	800189c <HAL_ADC_Init+0x2ec>
 80016de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 80da 	bne.w	800189c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 80d2 	bne.w	800189c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001700:	f043 0202 	orr.w	r2, r3, #2
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001708:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_ADC_Init+0x318>)
 800170a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001714:	d102      	bne.n	800171c <HAL_ADC_Init+0x16c>
 8001716:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <HAL_ADC_Init+0x31c>)
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e002      	b.n	8001722 <HAL_ADC_Init+0x172>
 800171c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001720:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_ADC_Init+0x192>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Init+0x192>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_ADC_Init+0x194>
 8001742:	2300      	movs	r3, #0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11c      	bne.n	8001782 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001748:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800174a:	2b00      	cmp	r3, #0
 800174c:	d010      	beq.n	8001770 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_ADC_Init+0x1ba>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_ADC_Init+0x1ba>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_ADC_Init+0x1bc>
 800176a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	431a      	orrs	r2, r3
 800177e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001780:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7e5b      	ldrb	r3, [r3, #25]
 8001786:	035b      	lsls	r3, r3, #13
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800178c:	2a01      	cmp	r2, #1
 800178e:	d002      	beq.n	8001796 <HAL_ADC_Init+0x1e6>
 8001790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001794:	e000      	b.n	8001798 <HAL_ADC_Init+0x1e8>
 8001796:	2200      	movs	r2, #0
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017a8:	4313      	orrs	r3, r2
 80017aa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d11b      	bne.n	80017ee <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7e5b      	ldrb	r3, [r3, #25]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	3b01      	subs	r3, #1
 80017c4:	045a      	lsls	r2, r3, #17
 80017c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c8:	4313      	orrs	r3, r2
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	663b      	str	r3, [r7, #96]	; 0x60
 80017d0:	e00d      	b.n	80017ee <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017da:	f043 0220 	orr.w	r2, r3, #32
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d007      	beq.n	8001806 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	4313      	orrs	r3, r2
 8001800:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001802:	4313      	orrs	r3, r2
 8001804:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	d114      	bne.n	800183e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
 800182c:	039a      	lsls	r2, r3, #14
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4313      	orrs	r3, r2
 8001838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800183a:	4313      	orrs	r3, r2
 800183c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_ADC_Init+0x320>)
 8001846:	4013      	ands	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800184e:	430b      	orrs	r3, r1
 8001850:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10c      	bne.n	8001874 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f023 010f 	bic.w	r1, r3, #15
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
 8001872:	e007      	b.n	8001884 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 020f 	bic.w	r2, r2, #15
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
 800189a:	e00a      	b.n	80018b2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f023 0312 	bic.w	r3, r3, #18
 80018a4:	f043 0210 	orr.w	r2, r3, #16
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80018b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3768      	adds	r7, #104	; 0x68
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	50000300 	.word	0x50000300
 80018cc:	50000100 	.word	0x50000100
 80018d0:	fff0c007 	.word	0xfff0c007

080018d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b09b      	sub	sp, #108	; 0x6c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x22>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e2a1      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x566>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 8285 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b04      	cmp	r3, #4
 8001914:	d81c      	bhi.n	8001950 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	461a      	mov	r2, r3
 800192a:	231f      	movs	r3, #31
 800192c:	4093      	lsls	r3, r2
 800192e:	43db      	mvns	r3, r3
 8001930:	4019      	ands	r1, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa00 f203 	lsl.w	r2, r0, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
 800194e:	e063      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b09      	cmp	r3, #9
 8001956:	d81e      	bhi.n	8001996 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	3b1e      	subs	r3, #30
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	4019      	ands	r1, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	3b1e      	subs	r3, #30
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
 8001994:	e040      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b0e      	cmp	r3, #14
 800199c:	d81e      	bhi.n	80019dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	3b3c      	subs	r3, #60	; 0x3c
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4019      	ands	r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	3b3c      	subs	r3, #60	; 0x3c
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
 80019da:	e01d      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	3b5a      	subs	r3, #90	; 0x5a
 80019f0:	221f      	movs	r2, #31
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	4019      	ands	r1, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	3b5a      	subs	r3, #90	; 0x5a
 8001a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 80e5 	bne.w	8001bf2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b09      	cmp	r3, #9
 8001a2e:	d91c      	bls.n	8001a6a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6999      	ldr	r1, [r3, #24]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b1e      	subs	r3, #30
 8001a42:	2207      	movs	r2, #7
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4019      	ands	r1, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	6898      	ldr	r0, [r3, #8]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b1e      	subs	r3, #30
 8001a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	e019      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6959      	ldr	r1, [r3, #20]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4019      	ands	r1, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6898      	ldr	r0, [r3, #8]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	fa00 f203 	lsl.w	r2, r0, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	08db      	lsrs	r3, r3, #3
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d84f      	bhi.n	8001b60 <HAL_ADC_ConfigChannel+0x28c>
 8001ac0:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac6:	bf00      	nop
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001afb 	.word	0x08001afb
 8001ad0:	08001b1d 	.word	0x08001b1d
 8001ad4:	08001b3f 	.word	0x08001b3f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ade:	4b9c      	ldr	r3, [pc, #624]	; (8001d50 <HAL_ADC_ConfigChannel+0x47c>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	0691      	lsls	r1, r2, #26
 8001ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aea:	430a      	orrs	r2, r1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001af6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001af8:	e07b      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b00:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <HAL_ADC_ConfigChannel+0x47c>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	0691      	lsls	r1, r2, #26
 8001b0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b18:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b1a:	e06a      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <HAL_ADC_ConfigChannel+0x47c>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	0691      	lsls	r1, r2, #26
 8001b2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b3a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b3c:	e059      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b44:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <HAL_ADC_ConfigChannel+0x47c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	0691      	lsls	r1, r2, #26
 8001b4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b50:	430a      	orrs	r2, r1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b5c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b5e:	e048      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	069b      	lsls	r3, r3, #26
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d107      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b82:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	069b      	lsls	r3, r3, #26
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d107      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ba6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	069b      	lsls	r3, r3, #26
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d107      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bca:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	069b      	lsls	r3, r3, #26
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d107      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001bf0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d108      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x33e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x33e>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x340>
 8001c12:	2300      	movs	r3, #0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 810a 	bne.w	8001e2e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d00f      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43da      	mvns	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001c40:	e049      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	409a      	lsls	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b09      	cmp	r3, #9
 8001c62:	d91c      	bls.n	8001c9e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6999      	ldr	r1, [r3, #24]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	3b1b      	subs	r3, #27
 8001c76:	2207      	movs	r2, #7
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4019      	ands	r1, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6898      	ldr	r0, [r3, #8]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b1b      	subs	r3, #27
 8001c90:	fa00 f203 	lsl.w	r2, r0, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	e01b      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6959      	ldr	r1, [r3, #20]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	4019      	ands	r1, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6898      	ldr	r0, [r3, #8]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_ADC_ConfigChannel+0x480>)
 8001cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d015      	beq.n	8001d1a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cf2:	2b11      	cmp	r3, #17
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	f040 8091 	bne.w	8001e2e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 808a 	bne.w	8001e2e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d22:	d102      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x456>
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_ADC_ConfigChannel+0x484>)
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e002      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x45c>
 8001d2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d2e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10e      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x488>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x488>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e006      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x48a>
 8001d50:	83fff000 	.word	0x83fff000
 8001d54:	50000300 	.word	0x50000300
 8001d58:	50000100 	.word	0x50000100
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d150      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x4b0>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x4b0>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x4b2>
 8001d84:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d13c      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d11d      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x4fa>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d9a:	d118      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_ADC_ConfigChannel+0x574>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <HAL_ADC_ConfigChannel+0x578>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0c9a      	lsrs	r2, r3, #18
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dbe:	e002      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f9      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dcc:	e02e      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b11      	cmp	r3, #17
 8001dd4:	d10b      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x51a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dde:	d106      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dec:	e01e      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b12      	cmp	r3, #18
 8001df4:	d11a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e00:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e02:	e013      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f043 0220 	orr.w	r2, r3, #32
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e16:	e00a      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e2c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	376c      	adds	r7, #108	; 0x6c
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	431bde83 	.word	0x431bde83

08001e50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b099      	sub	sp, #100	; 0x64
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e68:	d102      	bne.n	8001e70 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e6a:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	e002      	b.n	8001e76 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e74:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0a2      	b.n	8001fc6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e09b      	b.n	8001fc6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d17f      	bne.n	8001fa4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d179      	bne.n	8001fa4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb0:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001eb2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d040      	beq.n	8001f3e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ece:	035b      	lsls	r3, r3, #13
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d108      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d15c      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001f1a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d14b      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f28:	f023 030f 	bic.w	r3, r3, #15
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	6811      	ldr	r1, [r2, #0]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	6892      	ldr	r2, [r2, #8]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f3a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f3c:	e03c      	b.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f48:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d108      	bne.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d123      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f8c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d112      	bne.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f9a:	f023 030f 	bic.w	r3, r3, #15
 8001f9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fa0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fa2:	e009      	b.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001fb6:	e000      	b.n	8001fba <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3764      	adds	r7, #100	; 0x64
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	50000100 	.word	0x50000100
 8001fd8:	50000300 	.word	0x50000300

08001fdc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <ADC_Disable+0x2c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <ADC_Disable+0x2c>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <ADC_Disable+0x2e>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d047      	beq.n	800209e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030d 	and.w	r3, r3, #13
 8002018:	2b01      	cmp	r3, #1
 800201a:	d10f      	bne.n	800203c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0202 	orr.w	r2, r2, #2
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2203      	movs	r2, #3
 8002032:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002034:	f7ff fab0 	bl	8001598 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800203a:	e029      	b.n	8002090 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e023      	b.n	80020a0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002058:	f7ff fa9e 	bl	8001598 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d914      	bls.n	8002090 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10d      	bne.n	8002090 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0210 	orr.w	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e007      	b.n	80020a0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d0dc      	beq.n	8002058 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <__NVIC_EnableIRQ+0x38>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff29 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff3e 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff31 	bl	800210c <__NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffa2 	bl	8002204 <SysTick_Config>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e014      	b.n	8002306 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7fe fee1 	bl	80010b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	795b      	ldrb	r3, [r3, #5]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_DAC_ConfigChannel+0x20>
 800232c:	2302      	movs	r3, #2
 800232e:	e04e      	b.n	80023ce <HAL_DAC_ConfigChannel+0xbe>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2202      	movs	r2, #2
 800233a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a24      	ldr	r2, [pc, #144]	; (80023dc <HAL_DAC_ConfigChannel+0xcc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d112      	bne.n	8002374 <HAL_DAC_ConfigChannel+0x64>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10f      	bne.n	8002374 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002354:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4013      	ands	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e00e      	b.n	8002392 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002374:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4013      	ands	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	22c0      	movs	r2, #192	; 0xc0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	400a      	ands	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40007400 	.word	0x40007400

080023e0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d008      	beq.n	8002404 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2204      	movs	r2, #4
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e020      	b.n	8002446 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 020e 	bic.w	r2, r2, #14
 8002412:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f202 	lsl.w	r2, r1, r2
 8002432:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002464:	2b02      	cmp	r3, #2
 8002466:	d005      	beq.n	8002474 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2204      	movs	r2, #4
 800246c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e027      	b.n	80024c4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 020e 	bic.w	r2, r2, #14
 8002482:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f202 	lsl.w	r2, r1, r2
 80024a2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
    } 
  }
  return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	e14e      	b.n	800277e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8140 	beq.w	8002778 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d005      	beq.n	8002510 <HAL_GPIO_Init+0x40>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d130      	bne.n	8002572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002546:	2201      	movs	r2, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 0201 	and.w	r2, r3, #1
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b03      	cmp	r3, #3
 800257c:	d017      	beq.n	80025ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d123      	bne.n	8002602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	6939      	ldr	r1, [r7, #16]
 80025fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0203 	and.w	r2, r3, #3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 809a 	beq.w	8002778 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002644:	4b55      	ldr	r3, [pc, #340]	; (800279c <HAL_GPIO_Init+0x2cc>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	4a54      	ldr	r2, [pc, #336]	; (800279c <HAL_GPIO_Init+0x2cc>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6193      	str	r3, [r2, #24]
 8002650:	4b52      	ldr	r3, [pc, #328]	; (800279c <HAL_GPIO_Init+0x2cc>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800265c:	4a50      	ldr	r2, [pc, #320]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002686:	d013      	beq.n	80026b0 <HAL_GPIO_Init+0x1e0>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <HAL_GPIO_Init+0x2d4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00d      	beq.n	80026ac <HAL_GPIO_Init+0x1dc>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a45      	ldr	r2, [pc, #276]	; (80027a8 <HAL_GPIO_Init+0x2d8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d007      	beq.n	80026a8 <HAL_GPIO_Init+0x1d8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a44      	ldr	r2, [pc, #272]	; (80027ac <HAL_GPIO_Init+0x2dc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d101      	bne.n	80026a4 <HAL_GPIO_Init+0x1d4>
 80026a0:	2303      	movs	r3, #3
 80026a2:	e006      	b.n	80026b2 <HAL_GPIO_Init+0x1e2>
 80026a4:	2305      	movs	r3, #5
 80026a6:	e004      	b.n	80026b2 <HAL_GPIO_Init+0x1e2>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e002      	b.n	80026b2 <HAL_GPIO_Init+0x1e2>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_GPIO_Init+0x1e2>
 80026b0:	2300      	movs	r3, #0
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	f002 0203 	and.w	r2, r2, #3
 80026b8:	0092      	lsls	r2, r2, #2
 80026ba:	4093      	lsls	r3, r2
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026c2:	4937      	ldr	r1, [pc, #220]	; (80027a0 <HAL_GPIO_Init+0x2d0>)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026f4:	4a2e      	ldr	r2, [pc, #184]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800271e:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002772:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_GPIO_Init+0x2e0>)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3301      	adds	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	f47f aea9 	bne.w	80024e0 <HAL_GPIO_Init+0x10>
  }
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010000 	.word	0x40010000
 80027a4:	48000400 	.word	0x48000400
 80027a8:	48000800 	.word	0x48000800
 80027ac:	48000c00 	.word	0x48000c00
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f001 b823 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 817d 	beq.w	8002aea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027f0:	4bbc      	ldr	r3, [pc, #752]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d00c      	beq.n	8002816 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027fc:	4bb9      	ldr	r3, [pc, #740]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b08      	cmp	r3, #8
 8002806:	d15c      	bne.n	80028c2 <HAL_RCC_OscConfig+0x10e>
 8002808:	4bb6      	ldr	r3, [pc, #728]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d155      	bne.n	80028c2 <HAL_RCC_OscConfig+0x10e>
 8002816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800281a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800282a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d102      	bne.n	8002848 <HAL_RCC_OscConfig+0x94>
 8002842:	4ba8      	ldr	r3, [pc, #672]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	e015      	b.n	8002874 <HAL_RCC_OscConfig+0xc0>
 8002848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800285c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002860:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002864:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002870:	4b9c      	ldr	r3, [pc, #624]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002878:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800287c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002880:	fa92 f2a2 	rbit	r2, r2
 8002884:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002888:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800288c:	fab2 f282 	clz	r2, r2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f042 0220 	orr.w	r2, r2, #32
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f002 021f 	and.w	r2, r2, #31
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 811f 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x334>
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 8116 	bne.w	8002ae8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	f000 bfaf 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x12e>
 80028d4:	4b83      	ldr	r3, [pc, #524]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a82      	ldr	r2, [pc, #520]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	e036      	b.n	8002950 <HAL_RCC_OscConfig+0x19c>
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x158>
 80028f2:	4b7c      	ldr	r3, [pc, #496]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7b      	ldr	r2, [pc, #492]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a78      	ldr	r2, [pc, #480]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e021      	b.n	8002950 <HAL_RCC_OscConfig+0x19c>
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x184>
 800291e:	4b71      	ldr	r3, [pc, #452]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a70      	ldr	r2, [pc, #448]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b6e      	ldr	r3, [pc, #440]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6d      	ldr	r2, [pc, #436]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0x19c>
 8002938:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a69      	ldr	r2, [pc, #420]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a66      	ldr	r2, [pc, #408]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002950:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f023 020f 	bic.w	r2, r3, #15
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	495f      	ldr	r1, [pc, #380]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002966:	4313      	orrs	r3, r2
 8002968:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d059      	beq.n	8002a2e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe fe0d 	bl	8001598 <HAL_GetTick>
 800297e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe fe08 	bl	8001598 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b64      	cmp	r3, #100	; 0x64
 8002992:	d902      	bls.n	800299a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	f000 bf43 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>
 800299a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80029ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d102      	bne.n	80029cc <HAL_RCC_OscConfig+0x218>
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e015      	b.n	80029f8 <HAL_RCC_OscConfig+0x244>
 80029cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029f4:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a00:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a0c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a10:	fab2 f282 	clz	r2, r2
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f002 021f 	and.w	r2, r2, #31
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f202 	lsl.w	r2, r1, r2
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ab      	beq.n	8002984 <HAL_RCC_OscConfig+0x1d0>
 8002a2c:	e05d      	b.n	8002aea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fdb3 	bl	8001598 <HAL_GetTick>
 8002a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe fdae 	bl	8001598 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d902      	bls.n	8002a4e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	f000 bee9 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>
 8002a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a52:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d102      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2cc>
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	e015      	b.n	8002aac <HAL_RCC_OscConfig+0x2f8>
 8002a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a84:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a98:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ab0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ab4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ab8:	fa92 f2a2 	rbit	r2, r2
 8002abc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ac0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ac4:	fab2 f282 	clz	r2, r2
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f042 0220 	orr.w	r2, r2, #32
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f002 021f 	and.w	r2, r2, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ab      	bne.n	8002a38 <HAL_RCC_OscConfig+0x284>
 8002ae0:	e003      	b.n	8002aea <HAL_RCC_OscConfig+0x336>
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 817d 	beq.w	8002dfa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b00:	4ba6      	ldr	r3, [pc, #664]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b0c:	4ba3      	ldr	r3, [pc, #652]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d172      	bne.n	8002bfe <HAL_RCC_OscConfig+0x44a>
 8002b18:	4ba0      	ldr	r3, [pc, #640]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d16c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x44a>
 8002b24:	2302      	movs	r3, #2
 8002b26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3a0>
 8002b4e:	4b93      	ldr	r3, [pc, #588]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	e013      	b.n	8002b7c <HAL_RCC_OscConfig+0x3c8>
 8002b54:	2302      	movs	r3, #2
 8002b56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b66:	2302      	movs	r3, #2
 8002b68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b78:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f042 0220 	orr.w	r2, r2, #32
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	f002 021f 	and.w	r2, r2, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x410>
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f000 be2e 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b75      	ldr	r3, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	21f8      	movs	r1, #248	; 0xf8
 8002bda:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002be2:	fa91 f1a1 	rbit	r1, r1
 8002be6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002bea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002bee:	fab1 f181 	clz	r1, r1
 8002bf2:	b2c9      	uxtb	r1, r1
 8002bf4:	408b      	lsls	r3, r1
 8002bf6:	4969      	ldr	r1, [pc, #420]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfc:	e0fd      	b.n	8002dfa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8088 	beq.w	8002d20 <HAL_RCC_OscConfig+0x56c>
 8002c10:	2301      	movs	r3, #1
 8002c12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	461a      	mov	r2, r3
 8002c38:	2301      	movs	r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fcac 	bl	8001598 <HAL_GetTick>
 8002c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c46:	f7fe fca7 	bl	8001598 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	f000 bde2 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4d8>
 8002c86:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	e013      	b.n	8002cb4 <HAL_RCC_OscConfig+0x500>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ca4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002cb0:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002cba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002cbe:	fa92 f2a2 	rbit	r2, r2
 8002cc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002cc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002cca:	fab2 f282 	clz	r2, r2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f042 0220 	orr.w	r2, r2, #32
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f002 021f 	and.w	r2, r2, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0af      	beq.n	8002c46 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce6:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	21f8      	movs	r1, #248	; 0xf8
 8002cfc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d04:	fa91 f1a1 	rbit	r1, r1
 8002d08:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d0c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d10:	fab1 f181 	clz	r1, r1
 8002d14:	b2c9      	uxtb	r1, r1
 8002d16:	408b      	lsls	r3, r1
 8002d18:	4920      	ldr	r1, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
 8002d1e:	e06c      	b.n	8002dfa <HAL_RCC_OscConfig+0x646>
 8002d20:	2301      	movs	r3, #1
 8002d22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	461a      	mov	r2, r3
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fc24 	bl	8001598 <HAL_GetTick>
 8002d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe fc1f 	bl	8001598 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d902      	bls.n	8002d6c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	f000 bd5a 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d104      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5ec>
 8002d96:	4b01      	ldr	r3, [pc, #4]	; (8002d9c <HAL_RCC_OscConfig+0x5e8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e015      	b.n	8002dc8 <HAL_RCC_OscConfig+0x614>
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	2302      	movs	r3, #2
 8002da2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002db2:	2302      	movs	r3, #2
 8002db4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002db8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002dc4:	4bc8      	ldr	r3, [pc, #800]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002dce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002dd2:	fa92 f2a2 	rbit	r2, r2
 8002dd6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002dda:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f042 0220 	orr.w	r2, r2, #32
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ad      	bne.n	8002d56 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8110 	beq.w	8003030 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d079      	beq.n	8002f14 <HAL_RCC_OscConfig+0x760>
 8002e20:	2301      	movs	r3, #1
 8002e22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4bab      	ldr	r3, [pc, #684]	; (80030ec <HAL_RCC_OscConfig+0x938>)
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	461a      	mov	r2, r3
 8002e46:	2301      	movs	r3, #1
 8002e48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fba5 	bl	8001598 <HAL_GetTick>
 8002e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe fba0 	bl	8001598 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d902      	bls.n	8002e6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	f000 bcdb 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e84:	2202      	movs	r2, #2
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ec2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec4:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 8002ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	6019      	str	r1, [r3, #0]
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f1a3 	rbit	r1, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002eea:	6019      	str	r1, [r3, #0]
  return result;
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2101      	movs	r1, #1
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0a0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x6a0>
 8002f12:	e08d      	b.n	8003030 <HAL_RCC_OscConfig+0x87c>
 8002f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	fa93 f2a3 	rbit	r2, r3
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f36:	601a      	str	r2, [r3, #0]
  return result;
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b68      	ldr	r3, [pc, #416]	; (80030ec <HAL_RCC_OscConfig+0x938>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	461a      	mov	r2, r3
 8002f52:	2300      	movs	r3, #0
 8002f54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fb1f 	bl	8001598 <HAL_GetTick>
 8002f5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f60:	f7fe fb1a 	bl	8001598 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d902      	bls.n	8002f76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	f000 bc55 	b.w	8003820 <HAL_RCC_OscConfig+0x106c>
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f7e:	2202      	movs	r2, #2
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fa93 f2a3 	rbit	r2, r3
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fe0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 8002fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fee:	2102      	movs	r1, #2
 8002ff0:	6019      	str	r1, [r3, #0]
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f1a3 	rbit	r1, r3
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003008:	6019      	str	r1, [r3, #0]
  return result;
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d197      	bne.n	8002f60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 81a1 	beq.w	8003388 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304c:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003058:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	61d3      	str	r3, [r2, #28]
 8003064:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800307e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_RCC_OscConfig+0x93c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11a      	bne.n	80030c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_RCC_OscConfig+0x93c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_RCC_OscConfig+0x93c>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fe fa7b 	bl	8001598 <HAL_GetTick>
 80030a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	e009      	b.n	80030bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a8:	f7fe fa76 	bl	8001598 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b64      	cmp	r3, #100	; 0x64
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e3b1      	b.n	8003820 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_RCC_OscConfig+0x93c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10d      	bne.n	80030f4 <HAL_RCC_OscConfig+0x940>
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4a02      	ldr	r2, [pc, #8]	; (80030e8 <HAL_RCC_OscConfig+0x934>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6213      	str	r3, [r2, #32]
 80030e4:	e03c      	b.n	8003160 <HAL_RCC_OscConfig+0x9ac>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	10908120 	.word	0x10908120
 80030f0:	40007000 	.word	0x40007000
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10c      	bne.n	800311e <HAL_RCC_OscConfig+0x96a>
 8003104:	4bc1      	ldr	r3, [pc, #772]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4ac0      	ldr	r2, [pc, #768]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	4bbe      	ldr	r3, [pc, #760]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4abd      	ldr	r2, [pc, #756]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003116:	f023 0304 	bic.w	r3, r3, #4
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	e020      	b.n	8003160 <HAL_RCC_OscConfig+0x9ac>
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b05      	cmp	r3, #5
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x994>
 800312e:	4bb7      	ldr	r3, [pc, #732]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4ab6      	ldr	r2, [pc, #728]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	6213      	str	r3, [r2, #32]
 800313a:	4bb4      	ldr	r3, [pc, #720]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4ab3      	ldr	r2, [pc, #716]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6213      	str	r3, [r2, #32]
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0x9ac>
 8003148:	4bb0      	ldr	r3, [pc, #704]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4aaf      	ldr	r2, [pc, #700]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	4bad      	ldr	r3, [pc, #692]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4aac      	ldr	r2, [pc, #688]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 800315a:	f023 0304 	bic.w	r3, r3, #4
 800315e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003164:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8081 	beq.w	8003274 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7fe fa11 	bl	8001598 <HAL_GetTick>
 8003176:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe fa0c 	bl	8001598 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e345      	b.n	8003820 <HAL_RCC_OscConfig+0x106c>
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800319c:	2202      	movs	r2, #2
 800319e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	fa93 f2a3 	rbit	r2, r3
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031da:	601a      	str	r2, [r3, #0]
  return result;
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_OscConfig+0xa4c>
 80031fa:	4b84      	ldr	r3, [pc, #528]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	e013      	b.n	8003228 <HAL_RCC_OscConfig+0xa74>
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	4b79      	ldr	r3, [pc, #484]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800322c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003230:	2102      	movs	r1, #2
 8003232:	6011      	str	r1, [r2, #0]
 8003234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003238:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	fa92 f1a2 	rbit	r1, r2
 8003242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003246:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800324a:	6011      	str	r1, [r2, #0]
  return result;
 800324c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003250:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	fab2 f282 	clz	r2, r2
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f002 021f 	and.w	r2, r2, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d084      	beq.n	800317c <HAL_RCC_OscConfig+0x9c8>
 8003272:	e07f      	b.n	8003374 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003274:	f7fe f990 	bl	8001598 <HAL_GetTick>
 8003278:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	e00b      	b.n	8003296 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe f98b 	bl	8001598 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e2c4      	b.n	8003820 <HAL_RCC_OscConfig+0x106c>
 8003296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800329e:	2202      	movs	r2, #2
 80032a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032c2:	2202      	movs	r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032dc:	601a      	str	r2, [r3, #0]
  return result;
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d102      	bne.n	8003302 <HAL_RCC_OscConfig+0xb4e>
 80032fc:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	e013      	b.n	800332a <HAL_RCC_OscConfig+0xb76>
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800330a:	2202      	movs	r2, #2
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fa93 f2a3 	rbit	r2, r3
 800331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003320:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800332e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003332:	2102      	movs	r1, #2
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800333a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	fa92 f1a2 	rbit	r1, r2
 8003344:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003348:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800334c:	6011      	str	r1, [r2, #0]
  return result;
 800334e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003352:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	fab2 f282 	clz	r2, r2
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f002 021f 	and.w	r2, r2, #31
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d184      	bne.n	800327e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003374:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4b23      	ldr	r3, [pc, #140]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4a22      	ldr	r2, [pc, #136]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003386:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8242 	beq.w	800381e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_RCC_OscConfig+0xc58>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	f000 8213 	beq.w	80037ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	f040 8162 	bne.w	800367e <HAL_RCC_OscConfig+0xeca>
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	fa93 f2a3 	rbit	r2, r3
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033de:	601a      	str	r2, [r3, #0]
  return result;
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe f8ca 	bl	8001598 <HAL_GetTick>
 8003404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	e00c      	b.n	8003424 <HAL_RCC_OscConfig+0xc70>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe f8c2 	bl	8001598 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1fd      	b.n	8003820 <HAL_RCC_OscConfig+0x106c>
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800342c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003448:	601a      	str	r2, [r3, #0]
  return result;
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003452:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0xcba>
 8003468:	4bb0      	ldr	r3, [pc, #704]	; (800372c <HAL_RCC_OscConfig+0xf78>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e027      	b.n	80034be <HAL_RCC_OscConfig+0xd0a>
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003476:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003480:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	fa93 f2a3 	rbit	r2, r3
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003498:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800349c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	fa93 f2a3 	rbit	r2, r3
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	4b9c      	ldr	r3, [pc, #624]	; (800372c <HAL_RCC_OscConfig+0xf78>)
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034ca:	6011      	str	r1, [r2, #0]
 80034cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	fa92 f1a2 	rbit	r1, r2
 80034da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034e2:	6011      	str	r1, [r2, #0]
  return result;
 80034e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	fab2 f282 	clz	r2, r2
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	f042 0220 	orr.w	r2, r2, #32
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	f002 021f 	and.w	r2, r2, #31
 80034fe:	2101      	movs	r1, #1
 8003500:	fa01 f202 	lsl.w	r2, r1, r2
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d182      	bne.n	8003410 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350a:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0xf78>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	430b      	orrs	r3, r1
 800352c:	497f      	ldr	r1, [pc, #508]	; (800372c <HAL_RCC_OscConfig+0xf78>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800353a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800353e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	fa93 f2a3 	rbit	r2, r3
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003556:	601a      	str	r2, [r3, #0]
  return result;
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003560:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800356c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	461a      	mov	r2, r3
 8003574:	2301      	movs	r3, #1
 8003576:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe f80e 	bl	8001598 <HAL_GetTick>
 800357c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003580:	e009      	b.n	8003596 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003582:	f7fe f809 	bl	8001598 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e144      	b.n	8003820 <HAL_RCC_OscConfig+0x106c>
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800359e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	fa93 f2a3 	rbit	r2, r3
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035ba:	601a      	str	r2, [r3, #0]
  return result;
 80035bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <HAL_RCC_OscConfig+0xe2c>
 80035da:	4b54      	ldr	r3, [pc, #336]	; (800372c <HAL_RCC_OscConfig+0xf78>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	e027      	b.n	8003630 <HAL_RCC_OscConfig+0xe7c>
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	fa93 f2a3 	rbit	r2, r3
 80035fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003600:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800360e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003618:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	fa93 f2a3 	rbit	r2, r3
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_RCC_OscConfig+0xf78>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003634:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003638:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800363c:	6011      	str	r1, [r2, #0]
 800363e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003642:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	fa92 f1a2 	rbit	r1, r2
 800364c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003650:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003654:	6011      	str	r1, [r2, #0]
  return result;
 8003656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800365a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	fab2 f282 	clz	r2, r2
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f042 0220 	orr.w	r2, r2, #32
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f002 021f 	and.w	r2, r2, #31
 8003670:	2101      	movs	r1, #1
 8003672:	fa01 f202 	lsl.w	r2, r1, r2
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d082      	beq.n	8003582 <HAL_RCC_OscConfig+0xdce>
 800367c:	e0cf      	b.n	800381e <HAL_RCC_OscConfig+0x106a>
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036a2:	601a      	str	r2, [r3, #0]
  return result;
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	461a      	mov	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd ff68 	bl	8001598 <HAL_GetTick>
 80036c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036cc:	e009      	b.n	80036e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fd ff63 	bl	8001598 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e09e      	b.n	8003820 <HAL_RCC_OscConfig+0x106c>
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	fa93 f2a3 	rbit	r2, r3
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003706:	601a      	str	r2, [r3, #0]
  return result;
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003710:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d104      	bne.n	8003730 <HAL_RCC_OscConfig+0xf7c>
 8003726:	4b01      	ldr	r3, [pc, #4]	; (800372c <HAL_RCC_OscConfig+0xf78>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	e029      	b.n	8003780 <HAL_RCC_OscConfig+0xfcc>
 800372c:	40021000 	.word	0x40021000
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	fa93 f2a3 	rbit	r2, r3
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800375e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	fa93 f2a3 	rbit	r2, r3
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_RCC_OscConfig+0x1078>)
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003784:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003788:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800378c:	6011      	str	r1, [r2, #0]
 800378e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003792:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	fa92 f1a2 	rbit	r1, r2
 800379c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037a4:	6011      	str	r1, [r2, #0]
  return result;
 80037a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d180      	bne.n	80036ce <HAL_RCC_OscConfig+0xf1a>
 80037cc:	e027      	b.n	800381e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e01e      	b.n	8003820 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_RCC_OscConfig+0x1078>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d10b      	bne.n	800381a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003802:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b09e      	sub	sp, #120	; 0x78
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e162      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b90      	ldr	r3, [pc, #576]	; (8003a8c <HAL_RCC_ClockConfig+0x25c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b8d      	ldr	r3, [pc, #564]	; (8003a8c <HAL_RCC_ClockConfig+0x25c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	498b      	ldr	r1, [pc, #556]	; (8003a8c <HAL_RCC_ClockConfig+0x25c>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b89      	ldr	r3, [pc, #548]	; (8003a8c <HAL_RCC_ClockConfig+0x25c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e14a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003884:	4b82      	ldr	r3, [pc, #520]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	497f      	ldr	r1, [pc, #508]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80dc 	beq.w	8003a5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d13c      	bne.n	8003926 <HAL_RCC_ClockConfig+0xf6>
 80038ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xa6>
 80038d0:	4b6f      	ldr	r3, [pc, #444]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	e00f      	b.n	80038f6 <HAL_RCC_ClockConfig+0xc6>
 80038d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	667b      	str	r3, [r7, #100]	; 0x64
 80038e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038e8:	663b      	str	r3, [r7, #96]	; 0x60
 80038ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f2:	4b67      	ldr	r3, [pc, #412]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80038fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038fe:	fa92 f2a2 	rbit	r2, r2
 8003902:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003906:	fab2 f282 	clz	r2, r2
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	f042 0220 	orr.w	r2, r2, #32
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	f002 021f 	and.w	r2, r2, #31
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f202 	lsl.w	r2, r1, r2
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d17b      	bne.n	8003a1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0f3      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d13c      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x178>
 800392e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003932:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800393c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d102      	bne.n	8003958 <HAL_RCC_ClockConfig+0x128>
 8003952:	4b4f      	ldr	r3, [pc, #316]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	e00f      	b.n	8003978 <HAL_RCC_ClockConfig+0x148>
 8003958:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800395c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
 8003966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396a:	643b      	str	r3, [r7, #64]	; 0x40
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003974:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800397c:	63ba      	str	r2, [r7, #56]	; 0x38
 800397e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003980:	fa92 f2a2 	rbit	r2, r2
 8003984:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003988:	fab2 f282 	clz	r2, r2
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	f042 0220 	orr.w	r2, r2, #32
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f002 021f 	and.w	r2, r2, #31
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f202 	lsl.w	r2, r1, r2
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d13a      	bne.n	8003a1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0b2      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2de>
 80039a8:	2302      	movs	r3, #2
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d102      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1a0>
 80039ca:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	e00d      	b.n	80039ec <HAL_RCC_ClockConfig+0x1bc>
 80039d0:	2302      	movs	r3, #2
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
 80039dc:	2302      	movs	r3, #2
 80039de:	623b      	str	r3, [r7, #32]
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	2202      	movs	r2, #2
 80039ee:	61ba      	str	r2, [r7, #24]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	fa92 f2a2 	rbit	r2, r2
 80039f6:	617a      	str	r2, [r7, #20]
  return result;
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	fab2 f282 	clz	r2, r2
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	f042 0220 	orr.w	r2, r2, #32
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	f002 021f 	and.w	r2, r2, #31
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e079      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f023 0203 	bic.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	491a      	ldr	r1, [pc, #104]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd fdb4 	bl	8001598 <HAL_GetTick>
 8003a30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7fd fdb0 	bl	8001598 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e061      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 020c 	and.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCC_ClockConfig+0x25c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d214      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_RCC_ClockConfig+0x25c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 0207 	bic.w	r2, r3, #7
 8003a72:	4906      	ldr	r1, [pc, #24]	; (8003a8c <HAL_RCC_ClockConfig+0x25c>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <HAL_RCC_ClockConfig+0x25c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e040      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2de>
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_RCC_ClockConfig+0x2e8>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	491a      	ldr	r1, [pc, #104]	; (8003b18 <HAL_RCC_ClockConfig+0x2e8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <HAL_RCC_ClockConfig+0x2e8>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4912      	ldr	r1, [pc, #72]	; (8003b18 <HAL_RCC_ClockConfig+0x2e8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ad2:	f000 f829 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <HAL_RCC_ClockConfig+0x2e8>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae0:	22f0      	movs	r2, #240	; 0xf0
 8003ae2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	fa92 f2a2 	rbit	r2, r2
 8003aea:	60fa      	str	r2, [r7, #12]
  return result;
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	fab2 f282 	clz	r2, r2
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	40d3      	lsrs	r3, r2
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x2ec>)
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
 8003afa:	fa21 f303 	lsr.w	r3, r1, r3
 8003afe:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <HAL_RCC_ClockConfig+0x2f0>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RCC_ClockConfig+0x2f4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fd02 	bl	8001510 <HAL_InitTick>
  
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3778      	adds	r7, #120	; 0x78
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	080086d8 	.word	0x080086d8
 8003b20:	20000000 	.word	0x20000000
 8003b24:	20000004 	.word	0x20000004

08003b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b08b      	sub	sp, #44	; 0x2c
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b42:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x30>
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x36>
 8003b56:	e03c      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b5a:	623b      	str	r3, [r7, #32]
      break;
 8003b5c:	e03c      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	fa92 f2a2 	rbit	r2, r2
 8003b70:	607a      	str	r2, [r7, #4]
  return result;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	fab2 f282 	clz	r2, r2
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	40d3      	lsrs	r3, r2
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b7e:	5cd3      	ldrb	r3, [r2, r3]
 8003b80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	fa92 f2a2 	rbit	r2, r2
 8003b94:	60fa      	str	r2, [r7, #12]
  return result;
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	fab2 f282 	clz	r2, r2
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	40d3      	lsrs	r3, r2
 8003ba0:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ba2:	5cd3      	ldrb	r3, [r2, r3]
 8003ba4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bb0:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc0:	e004      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	623b      	str	r3, [r7, #32]
      break;
 8003bd0:	e002      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bd4:	623b      	str	r3, [r7, #32]
      break;
 8003bd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	372c      	adds	r7, #44	; 0x2c
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	007a1200 	.word	0x007a1200
 8003bf0:	080086f0 	.word	0x080086f0
 8003bf4:	08008700 	.word	0x08008700
 8003bf8:	003d0900 	.word	0x003d0900

08003bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000000 	.word	0x20000000

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c1a:	f7ff ffef 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c1e:	4601      	mov	r1, r0
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	fa92 f2a2 	rbit	r2, r2
 8003c34:	603a      	str	r2, [r7, #0]
  return result;
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	fab2 f282 	clz	r2, r2
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	40d3      	lsrs	r3, r2
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	080086e8 	.word	0x080086e8

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c5e:	f7ff ffcd 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c62:	4601      	mov	r1, r0
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	fa92 f2a2 	rbit	r2, r2
 8003c78:	603a      	str	r2, [r7, #0]
  return result;
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	fab2 f282 	clz	r2, r2
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	40d3      	lsrs	r3, r2
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c86:	5cd3      	ldrb	r3, [r2, r3]
 8003c88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	080086e8 	.word	0x080086e8

08003c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b092      	sub	sp, #72	; 0x48
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80cd 	beq.w	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc0:	4b86      	ldr	r3, [pc, #536]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10e      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b83      	ldr	r3, [pc, #524]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	4a82      	ldr	r2, [pc, #520]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	61d3      	str	r3, [r2, #28]
 8003cd8:	4b80      	ldr	r3, [pc, #512]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf6:	4b7a      	ldr	r3, [pc, #488]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a79      	ldr	r2, [pc, #484]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d02:	f7fd fc49 	bl	8001598 <HAL_GetTick>
 8003d06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	e008      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0a:	f7fd fc45 	bl	8001598 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d901      	bls.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e0db      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d28:	4b6c      	ldr	r3, [pc, #432]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d07d      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d076      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d46:	4b65      	ldr	r3, [pc, #404]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b5e      	ldr	r3, [pc, #376]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2301      	movs	r3, #1
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	461a      	mov	r2, r3
 8003d94:	2300      	movs	r3, #0
 8003d96:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d98:	4a50      	ldr	r2, [pc, #320]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d045      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd fbf6 	bl	8001598 <HAL_GetTick>
 8003dac:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fd fbf2 	bl	8001598 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e086      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	61fb      	str	r3, [r7, #28]
  return result;
 8003dde:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f043 0302 	orr.w	r3, r3, #2
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d102      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003df4:	4b39      	ldr	r3, [pc, #228]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	e007      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	4b35      	ldr	r3, [pc, #212]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	613a      	str	r2, [r7, #16]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	fa92 f2a2 	rbit	r2, r2
 8003e14:	60fa      	str	r2, [r7, #12]
  return result;
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	fab2 f282 	clz	r2, r2
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	f002 021f 	and.w	r2, r2, #31
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0bd      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e34:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4926      	ldr	r1, [pc, #152]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4e:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e58:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	491a      	ldr	r1, [pc, #104]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f023 0210 	bic.w	r2, r3, #16
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4912      	ldr	r1, [pc, #72]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	490b      	ldr	r1, [pc, #44]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	4903      	ldr	r1, [pc, #12]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3748      	adds	r7, #72	; 0x48
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	10908100 	.word	0x10908100

08003ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e049      	b.n	8003f8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd f90e 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fb60 	bl	80045ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e049      	b.n	800403c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f841 	bl	8004044 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f000 fb09 	bl	80045ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_TIM_PWM_Start+0x24>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e03c      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b04      	cmp	r3, #4
 8004080:	d109      	bne.n	8004096 <HAL_TIM_PWM_Start+0x3e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	e02f      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_PWM_Start+0x58>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e022      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_PWM_Start+0x72>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e015      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x8c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e008      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e088      	b.n	8004210 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xb6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	e023      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d104      	bne.n	800411e <HAL_TIM_PWM_Start+0xc6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	e01b      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start+0xd6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412c:	e013      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d104      	bne.n	800413e <HAL_TIM_PWM_Start+0xe6>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800413c:	e00b      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b10      	cmp	r3, #16
 8004142:	d104      	bne.n	800414e <HAL_TIM_PWM_Start+0xf6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800414c:	e003      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2201      	movs	r2, #1
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fdfc 	bl	8004d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2b      	ldr	r2, [pc, #172]	; (8004218 <HAL_TIM_PWM_Start+0x1c0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_TIM_PWM_Start+0x134>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2a      	ldr	r2, [pc, #168]	; (800421c <HAL_TIM_PWM_Start+0x1c4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_TIM_PWM_Start+0x134>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a28      	ldr	r2, [pc, #160]	; (8004220 <HAL_TIM_PWM_Start+0x1c8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_PWM_Start+0x134>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a27      	ldr	r2, [pc, #156]	; (8004224 <HAL_TIM_PWM_Start+0x1cc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <HAL_TIM_PWM_Start+0x138>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_TIM_PWM_Start+0x13a>
 8004190:	2300      	movs	r3, #0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <HAL_TIM_PWM_Start+0x1c0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_TIM_PWM_Start+0x176>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d009      	beq.n	80041ce <HAL_TIM_PWM_Start+0x176>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <HAL_TIM_PWM_Start+0x1d0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_TIM_PWM_Start+0x176>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <HAL_TIM_PWM_Start+0x1c4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d115      	bne.n	80041fa <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_TIM_PWM_Start+0x1d4>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b06      	cmp	r3, #6
 80041de:	d015      	beq.n	800420c <HAL_TIM_PWM_Start+0x1b4>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e6:	d011      	beq.n	800420c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	e008      	b.n	800420c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e000      	b.n	800420e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40012c00 	.word	0x40012c00
 800421c:	40014000 	.word	0x40014000
 8004220:	40014400 	.word	0x40014400
 8004224:	40014800 	.word	0x40014800
 8004228:	40000400 	.word	0x40000400
 800422c:	00010007 	.word	0x00010007

08004230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800424a:	2302      	movs	r3, #2
 800424c:	e0ff      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b14      	cmp	r3, #20
 800425a:	f200 80f0 	bhi.w	800443e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	080042b9 	.word	0x080042b9
 8004268:	0800443f 	.word	0x0800443f
 800426c:	0800443f 	.word	0x0800443f
 8004270:	0800443f 	.word	0x0800443f
 8004274:	080042f9 	.word	0x080042f9
 8004278:	0800443f 	.word	0x0800443f
 800427c:	0800443f 	.word	0x0800443f
 8004280:	0800443f 	.word	0x0800443f
 8004284:	0800433b 	.word	0x0800433b
 8004288:	0800443f 	.word	0x0800443f
 800428c:	0800443f 	.word	0x0800443f
 8004290:	0800443f 	.word	0x0800443f
 8004294:	0800437b 	.word	0x0800437b
 8004298:	0800443f 	.word	0x0800443f
 800429c:	0800443f 	.word	0x0800443f
 80042a0:	0800443f 	.word	0x0800443f
 80042a4:	080043bd 	.word	0x080043bd
 80042a8:	0800443f 	.word	0x0800443f
 80042ac:	0800443f 	.word	0x0800443f
 80042b0:	0800443f 	.word	0x0800443f
 80042b4:	080043fd 	.word	0x080043fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fa0c 	bl	80046dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0208 	orr.w	r2, r2, #8
 80042d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0204 	bic.w	r2, r2, #4
 80042e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6999      	ldr	r1, [r3, #24]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	619a      	str	r2, [r3, #24]
      break;
 80042f6:	e0a5      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fa72 	bl	80047e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6999      	ldr	r1, [r3, #24]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	021a      	lsls	r2, r3, #8
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	619a      	str	r2, [r3, #24]
      break;
 8004338:	e084      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fad1 	bl	80048e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0208 	orr.w	r2, r2, #8
 8004354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0204 	bic.w	r2, r2, #4
 8004364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69d9      	ldr	r1, [r3, #28]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	61da      	str	r2, [r3, #28]
      break;
 8004378:	e064      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fb2f 	bl	80049e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69d9      	ldr	r1, [r3, #28]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	021a      	lsls	r2, r3, #8
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	61da      	str	r2, [r3, #28]
      break;
 80043ba:	e043      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fb72 	bl	8004aac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0208 	orr.w	r2, r2, #8
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0204 	bic.w	r2, r2, #4
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043fa:	e023      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fbb0 	bl	8004b68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004416:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004426:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	021a      	lsls	r2, r3, #8
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800443c:	e002      	b.n	8004444 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
      break;
 8004442:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop

08004458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIM_ConfigClockSource+0x1c>
 8004470:	2302      	movs	r3, #2
 8004472:	e0b6      	b.n	80045e2 <HAL_TIM_ConfigClockSource+0x18a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800449e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b0:	d03e      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0xd8>
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b6:	f200 8087 	bhi.w	80045c8 <HAL_TIM_ConfigClockSource+0x170>
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	f000 8086 	beq.w	80045ce <HAL_TIM_ConfigClockSource+0x176>
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c6:	d87f      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x170>
 80044c8:	2b70      	cmp	r3, #112	; 0x70
 80044ca:	d01a      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0xaa>
 80044cc:	2b70      	cmp	r3, #112	; 0x70
 80044ce:	d87b      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x170>
 80044d0:	2b60      	cmp	r3, #96	; 0x60
 80044d2:	d050      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0x11e>
 80044d4:	2b60      	cmp	r3, #96	; 0x60
 80044d6:	d877      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x170>
 80044d8:	2b50      	cmp	r3, #80	; 0x50
 80044da:	d03c      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0xfe>
 80044dc:	2b50      	cmp	r3, #80	; 0x50
 80044de:	d873      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x170>
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d058      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x13e>
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d86f      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x170>
 80044e8:	2b30      	cmp	r3, #48	; 0x30
 80044ea:	d064      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15e>
 80044ec:	2b30      	cmp	r3, #48	; 0x30
 80044ee:	d86b      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x170>
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d060      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15e>
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d867      	bhi.n	80045c8 <HAL_TIM_ConfigClockSource+0x170>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d05c      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15e>
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d05a      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x15e>
 8004500:	e062      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004512:	f000 fc03 	bl	8004d1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	609a      	str	r2, [r3, #8]
      break;
 800452e:	e04f      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004540:	f000 fbec 	bl	8004d1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004552:	609a      	str	r2, [r3, #8]
      break;
 8004554:	e03c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	461a      	mov	r2, r3
 8004564:	f000 fb60 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2150      	movs	r1, #80	; 0x50
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fbb9 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 8004574:	e02c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004582:	461a      	mov	r2, r3
 8004584:	f000 fb7f 	bl	8004c86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2160      	movs	r1, #96	; 0x60
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fba9 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 8004594:	e01c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	461a      	mov	r2, r3
 80045a4:	f000 fb40 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2140      	movs	r1, #64	; 0x40
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fb99 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 80045b4:	e00c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f000 fb90 	bl	8004ce6 <TIM_ITRx_SetConfig>
      break;
 80045c6:	e003      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      break;
 80045cc:	e000      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a32      	ldr	r2, [pc, #200]	; (80046c8 <TIM_Base_SetConfig+0xdc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_Base_SetConfig+0x28>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0x28>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <TIM_Base_SetConfig+0xe0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d108      	bne.n	8004626 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <TIM_Base_SetConfig+0xdc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <TIM_Base_SetConfig+0x6a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d00f      	beq.n	8004656 <TIM_Base_SetConfig+0x6a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <TIM_Base_SetConfig+0xe0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_Base_SetConfig+0x6a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <TIM_Base_SetConfig+0xe4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <TIM_Base_SetConfig+0x6a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <TIM_Base_SetConfig+0xe8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_Base_SetConfig+0x6a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <TIM_Base_SetConfig+0xec>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d108      	bne.n	8004668 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <TIM_Base_SetConfig+0xdc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00b      	beq.n	80046ac <TIM_Base_SetConfig+0xc0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <TIM_Base_SetConfig+0xe4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <TIM_Base_SetConfig+0xc0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <TIM_Base_SetConfig+0xe8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0xc0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <TIM_Base_SetConfig+0xec>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d103      	bne.n	80046b4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	615a      	str	r2, [r3, #20]
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800

080046dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f023 0201 	bic.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f023 0302 	bic.w	r3, r3, #2
 8004728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a28      	ldr	r2, [pc, #160]	; (80047d8 <TIM_OC1_SetConfig+0xfc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00b      	beq.n	8004754 <TIM_OC1_SetConfig+0x78>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a27      	ldr	r2, [pc, #156]	; (80047dc <TIM_OC1_SetConfig+0x100>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d007      	beq.n	8004754 <TIM_OC1_SetConfig+0x78>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <TIM_OC1_SetConfig+0x104>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_OC1_SetConfig+0x78>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <TIM_OC1_SetConfig+0x108>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d10c      	bne.n	800476e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0308 	bic.w	r3, r3, #8
 800475a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f023 0304 	bic.w	r3, r3, #4
 800476c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <TIM_OC1_SetConfig+0xfc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_OC1_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <TIM_OC1_SetConfig+0x100>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d007      	beq.n	800478e <TIM_OC1_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <TIM_OC1_SetConfig+0x104>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_OC1_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <TIM_OC1_SetConfig+0x108>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d111      	bne.n	80047b2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800479c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	621a      	str	r2, [r3, #32]
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800

080047e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0210 	bic.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0320 	bic.w	r3, r3, #32
 8004836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a24      	ldr	r2, [pc, #144]	; (80048d8 <TIM_OC2_SetConfig+0xf0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10d      	bne.n	8004868 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <TIM_OC2_SetConfig+0xf0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00b      	beq.n	8004888 <TIM_OC2_SetConfig+0xa0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1a      	ldr	r2, [pc, #104]	; (80048dc <TIM_OC2_SetConfig+0xf4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <TIM_OC2_SetConfig+0xa0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <TIM_OC2_SetConfig+0xf8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC2_SetConfig+0xa0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <TIM_OC2_SetConfig+0xfc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d113      	bne.n	80048b0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800488e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004896:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800

080048e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a23      	ldr	r2, [pc, #140]	; (80049d4 <TIM_OC3_SetConfig+0xec>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d10d      	bne.n	8004966 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004964:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <TIM_OC3_SetConfig+0xec>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_OC3_SetConfig+0x9e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <TIM_OC3_SetConfig+0xf0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_OC3_SetConfig+0x9e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a18      	ldr	r2, [pc, #96]	; (80049dc <TIM_OC3_SetConfig+0xf4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_OC3_SetConfig+0x9e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <TIM_OC3_SetConfig+0xf8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d113      	bne.n	80049ae <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800498c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	621a      	str	r2, [r3, #32]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800

080049e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <TIM_OC4_SetConfig+0xb8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <TIM_OC4_SetConfig+0x7c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <TIM_OC4_SetConfig+0xbc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <TIM_OC4_SetConfig+0x7c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <TIM_OC4_SetConfig+0xc0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC4_SetConfig+0x7c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <TIM_OC4_SetConfig+0xc4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d109      	bne.n	8004a74 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800

08004aac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004af0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <TIM_OC5_SetConfig+0xac>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <TIM_OC5_SetConfig+0x72>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <TIM_OC5_SetConfig+0xb0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d007      	beq.n	8004b1e <TIM_OC5_SetConfig+0x72>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <TIM_OC5_SetConfig+0xb4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_OC5_SetConfig+0x72>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <TIM_OC5_SetConfig+0xb8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d109      	bne.n	8004b32 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40014400 	.word	0x40014400
 8004b64:	40014800 	.word	0x40014800

08004b68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	051b      	lsls	r3, r3, #20
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <TIM_OC6_SetConfig+0xb0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00b      	beq.n	8004bdc <TIM_OC6_SetConfig+0x74>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <TIM_OC6_SetConfig+0xb4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d007      	beq.n	8004bdc <TIM_OC6_SetConfig+0x74>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <TIM_OC6_SetConfig+0xb8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <TIM_OC6_SetConfig+0x74>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a13      	ldr	r2, [pc, #76]	; (8004c24 <TIM_OC6_SetConfig+0xbc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d109      	bne.n	8004bf0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0201 	bic.w	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 030a 	bic.w	r3, r3, #10
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0210 	bic.w	r2, r3, #16
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	031b      	lsls	r3, r3, #12
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f043 0307 	orr.w	r3, r3, #7
 8004d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	609a      	str	r2, [r3, #8]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	021a      	lsls	r2, r3, #8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2201      	movs	r2, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a1a      	ldr	r2, [r3, #32]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	401a      	ands	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e054      	b.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004df0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	d009      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a11      	ldr	r2, [pc, #68]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10c      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40014000 	.word	0x40014000

08004e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e060      	b.n	8004f62 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d115      	bne.n	8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	051b      	lsls	r3, r3, #20
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00

08004f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e040      	b.n	8005008 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fc f922 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2224      	movs	r2, #36	; 0x24
 8004fa0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fb32 	bl	800561c <UART_SetConfig>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e022      	b.n	8005008 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fc5c 	bl	8005888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fce3 	bl	80059cc <UART_CheckIdleState>
 8005006:	4603      	mov	r3, r0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b0ba      	sub	sp, #232	; 0xe8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005036:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800503a:	f640 030f 	movw	r3, #2063	; 0x80f
 800503e:	4013      	ands	r3, r2
 8005040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d115      	bne.n	8005078 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00f      	beq.n	8005078 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d009      	beq.n	8005078 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 82ab 	beq.w	80055c4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	4798      	blx	r3
      }
      return;
 8005076:	e2a5      	b.n	80055c4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8117 	beq.w	80052b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800508e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005092:	4b85      	ldr	r3, [pc, #532]	; (80052a8 <HAL_UART_IRQHandler+0x298>)
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 810a 	beq.w	80052b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d011      	beq.n	80050cc <HAL_UART_IRQHandler+0xbc>
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2201      	movs	r2, #1
 80050ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d011      	beq.n	80050fc <HAL_UART_IRQHandler+0xec>
 80050d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2202      	movs	r2, #2
 80050ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f2:	f043 0204 	orr.w	r2, r3, #4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d011      	beq.n	800512c <HAL_UART_IRQHandler+0x11c>
 8005108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00b      	beq.n	800512c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2204      	movs	r2, #4
 800511a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005122:	f043 0202 	orr.w	r2, r3, #2
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800512c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d017      	beq.n	8005168 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d105      	bne.n	8005150 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005148:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2208      	movs	r2, #8
 8005156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515e:	f043 0208 	orr.w	r2, r3, #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005170:	2b00      	cmp	r3, #0
 8005172:	d012      	beq.n	800519a <HAL_UART_IRQHandler+0x18a>
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005178:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00c      	beq.n	800519a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8211 	beq.w	80055c8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d04f      	beq.n	8005292 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fcf9 	bl	8005bea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d141      	bne.n	800528a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800521c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005232:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800523e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800524a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1d9      	bne.n	8005206 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005256:	2b00      	cmp	r3, #0
 8005258:	d013      	beq.n	8005282 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800525e:	4a13      	ldr	r2, [pc, #76]	; (80052ac <HAL_UART_IRQHandler+0x29c>)
 8005260:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd f8f3 	bl	8002452 <HAL_DMA_Abort_IT>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d017      	beq.n	80052a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800527c:	4610      	mov	r0, r2
 800527e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	e00f      	b.n	80052a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9b4 	bl	80055f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	e00b      	b.n	80052a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9b0 	bl	80055f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	e007      	b.n	80052a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9ac 	bl	80055f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80052a0:	e192      	b.n	80055c8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a2:	bf00      	nop
    return;
 80052a4:	e190      	b.n	80055c8 <HAL_UART_IRQHandler+0x5b8>
 80052a6:	bf00      	nop
 80052a8:	04000120 	.word	0x04000120
 80052ac:	08005cb3 	.word	0x08005cb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	f040 814b 	bne.w	8005550 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8144 	beq.w	8005550 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 813d 	beq.w	8005550 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2210      	movs	r2, #16
 80052dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	f040 80b5 	bne.w	8005458 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8164 	beq.w	80055cc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800530a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800530e:	429a      	cmp	r2, r3
 8005310:	f080 815c 	bcs.w	80055cc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800531a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b20      	cmp	r3, #32
 8005326:	f000 8086 	beq.w	8005436 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800533e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005346:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005358:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005360:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800536c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1da      	bne.n	800532a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005398:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800539c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e1      	bne.n	8005374 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e3      	bne.n	80053b0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005406:	f023 0310 	bic.w	r3, r3, #16
 800540a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005418:	65bb      	str	r3, [r7, #88]	; 0x58
 800541a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800541e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e4      	bne.n	80053f6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005430:	4618      	mov	r0, r3
 8005432:	f7fc ffd5 	bl	80023e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005448:	b29b      	uxth	r3, r3
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	b29b      	uxth	r3, r3
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8d7 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005456:	e0b9      	b.n	80055cc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005464:	b29b      	uxth	r3, r3
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80ab 	beq.w	80055d0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800547a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80a6 	beq.w	80055d0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054a6:	647b      	str	r3, [r7, #68]	; 0x44
 80054a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e4      	bne.n	8005484 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	623b      	str	r3, [r7, #32]
   return(result);
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054de:	633a      	str	r2, [r7, #48]	; 0x30
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e3      	bne.n	80054ba <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	60fb      	str	r3, [r7, #12]
   return(result);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0310 	bic.w	r3, r3, #16
 800551a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	69b9      	ldr	r1, [r7, #24]
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	617b      	str	r3, [r7, #20]
   return(result);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e4      	bne.n	8005506 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f85b 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800554e:	e03f      	b.n	80055d0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00e      	beq.n	800557a <HAL_UART_IRQHandler+0x56a>
 800555c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fbdd 	bl	8005d32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005578:	e02d      	b.n	80055d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00e      	beq.n	80055a4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01c      	beq.n	80055d4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
    }
    return;
 80055a2:	e017      	b.n	80055d4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d012      	beq.n	80055d6 <HAL_UART_IRQHandler+0x5c6>
 80055b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fb8e 	bl	8005cde <UART_EndTransmit_IT>
    return;
 80055c2:	e008      	b.n	80055d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80055c4:	bf00      	nop
 80055c6:	e006      	b.n	80055d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80055c8:	bf00      	nop
 80055ca:	e004      	b.n	80055d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80055cc:	bf00      	nop
 80055ce:	e002      	b.n	80055d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80055d4:	bf00      	nop
  }

}
 80055d6:	37e8      	adds	r7, #232	; 0xe8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b8a      	ldr	r3, [pc, #552]	; (8005870 <UART_SetConfig+0x254>)
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	6979      	ldr	r1, [r7, #20]
 8005650:	430b      	orrs	r3, r1
 8005652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a78      	ldr	r2, [pc, #480]	; (8005874 <UART_SetConfig+0x258>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d120      	bne.n	80056da <UART_SetConfig+0xbe>
 8005698:	4b77      	ldr	r3, [pc, #476]	; (8005878 <UART_SetConfig+0x25c>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d817      	bhi.n	80056d4 <UART_SetConfig+0xb8>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x90>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056c9 	.word	0x080056c9
 80056b4:	080056cf 	.word	0x080056cf
 80056b8:	080056c3 	.word	0x080056c3
 80056bc:	2300      	movs	r3, #0
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e01d      	b.n	80056fe <UART_SetConfig+0xe2>
 80056c2:	2302      	movs	r3, #2
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e01a      	b.n	80056fe <UART_SetConfig+0xe2>
 80056c8:	2304      	movs	r3, #4
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e017      	b.n	80056fe <UART_SetConfig+0xe2>
 80056ce:	2308      	movs	r3, #8
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e014      	b.n	80056fe <UART_SetConfig+0xe2>
 80056d4:	2310      	movs	r3, #16
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e011      	b.n	80056fe <UART_SetConfig+0xe2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a67      	ldr	r2, [pc, #412]	; (800587c <UART_SetConfig+0x260>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d102      	bne.n	80056ea <UART_SetConfig+0xce>
 80056e4:	2300      	movs	r3, #0
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e009      	b.n	80056fe <UART_SetConfig+0xe2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a64      	ldr	r2, [pc, #400]	; (8005880 <UART_SetConfig+0x264>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d102      	bne.n	80056fa <UART_SetConfig+0xde>
 80056f4:	2300      	movs	r3, #0
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e001      	b.n	80056fe <UART_SetConfig+0xe2>
 80056fa:	2310      	movs	r3, #16
 80056fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005706:	d15a      	bne.n	80057be <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005708:	7ffb      	ldrb	r3, [r7, #31]
 800570a:	2b08      	cmp	r3, #8
 800570c:	d827      	bhi.n	800575e <UART_SetConfig+0x142>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0xf8>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	0800575f 	.word	0x0800575f
 8005724:	0800574f 	.word	0x0800574f
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800575f 	.word	0x0800575f
 8005730:	0800575f 	.word	0x0800575f
 8005734:	08005757 	.word	0x08005757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fe fa6c 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 800573c:	61b8      	str	r0, [r7, #24]
        break;
 800573e:	e013      	b.n	8005768 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fe fa8a 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8005744:	61b8      	str	r0, [r7, #24]
        break;
 8005746:	e00f      	b.n	8005768 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005748:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <UART_SetConfig+0x268>)
 800574a:	61bb      	str	r3, [r7, #24]
        break;
 800574c:	e00c      	b.n	8005768 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574e:	f7fe f9eb 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8005752:	61b8      	str	r0, [r7, #24]
        break;
 8005754:	e008      	b.n	8005768 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	61bb      	str	r3, [r7, #24]
        break;
 800575c:	e004      	b.n	8005768 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	77bb      	strb	r3, [r7, #30]
        break;
 8005766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d074      	beq.n	8005858 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	005a      	lsls	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005782:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b0f      	cmp	r3, #15
 8005788:	d916      	bls.n	80057b8 <UART_SetConfig+0x19c>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d212      	bcs.n	80057b8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f023 030f 	bic.w	r3, r3, #15
 800579a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	89fb      	ldrh	r3, [r7, #14]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	89fa      	ldrh	r2, [r7, #14]
 80057b4:	60da      	str	r2, [r3, #12]
 80057b6:	e04f      	b.n	8005858 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	77bb      	strb	r3, [r7, #30]
 80057bc:	e04c      	b.n	8005858 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057be:	7ffb      	ldrb	r3, [r7, #31]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d828      	bhi.n	8005816 <UART_SetConfig+0x1fa>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0x1b0>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080057f9 	.word	0x080057f9
 80057d4:	08005801 	.word	0x08005801
 80057d8:	08005817 	.word	0x08005817
 80057dc:	08005807 	.word	0x08005807
 80057e0:	08005817 	.word	0x08005817
 80057e4:	08005817 	.word	0x08005817
 80057e8:	08005817 	.word	0x08005817
 80057ec:	0800580f 	.word	0x0800580f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7fe fa10 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 80057f4:	61b8      	str	r0, [r7, #24]
        break;
 80057f6:	e013      	b.n	8005820 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7fe fa2e 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 80057fc:	61b8      	str	r0, [r7, #24]
        break;
 80057fe:	e00f      	b.n	8005820 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005800:	4b20      	ldr	r3, [pc, #128]	; (8005884 <UART_SetConfig+0x268>)
 8005802:	61bb      	str	r3, [r7, #24]
        break;
 8005804:	e00c      	b.n	8005820 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005806:	f7fe f98f 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 800580a:	61b8      	str	r0, [r7, #24]
        break;
 800580c:	e008      	b.n	8005820 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005812:	61bb      	str	r3, [r7, #24]
        break;
 8005814:	e004      	b.n	8005820 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	77bb      	strb	r3, [r7, #30]
        break;
 800581e:	bf00      	nop
    }

    if (pclk != 0U)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d018      	beq.n	8005858 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	085a      	lsrs	r2, r3, #1
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	441a      	add	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d909      	bls.n	8005854 <UART_SetConfig+0x238>
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005846:	d205      	bcs.n	8005854 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60da      	str	r2, [r3, #12]
 8005852:	e001      	b.n	8005858 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005864:	7fbb      	ldrb	r3, [r7, #30]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	efff69f3 	.word	0xefff69f3
 8005874:	40013800 	.word	0x40013800
 8005878:	40021000 	.word	0x40021000
 800587c:	40004400 	.word	0x40004400
 8005880:	40004800 	.word	0x40004800
 8005884:	007a1200 	.word	0x007a1200

08005888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01a      	beq.n	800599e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005986:	d10a      	bne.n	800599e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b098      	sub	sp, #96	; 0x60
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059dc:	f7fb fddc 	bl	8001598 <HAL_GetTick>
 80059e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d12e      	bne.n	8005a4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f8:	2200      	movs	r2, #0
 80059fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f88c 	bl	8005b1c <UART_WaitOnFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d021      	beq.n	8005a4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a28:	647b      	str	r3, [r7, #68]	; 0x44
 8005a2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e6      	bne.n	8005a0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e062      	b.n	8005b14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d149      	bne.n	8005af0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a64:	2200      	movs	r2, #0
 8005a66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f856 	bl	8005b1c <UART_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d03c      	beq.n	8005af0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	623b      	str	r3, [r7, #32]
   return(result);
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
 8005a96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e6      	bne.n	8005a76 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3308      	adds	r3, #8
 8005aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ac8:	61fa      	str	r2, [r7, #28]
 8005aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	69b9      	ldr	r1, [r7, #24]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e011      	b.n	8005b14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3758      	adds	r7, #88	; 0x58
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2c:	e049      	b.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d045      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b36:	f7fb fd2f 	bl	8001598 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e048      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d031      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d110      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2208      	movs	r2, #8
 8005b72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f838 	bl	8005bea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e029      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9c:	d111      	bne.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f81e 	bl	8005bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e00f      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2301      	moveq	r3, #1
 8005bd4:	2300      	movne	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d0a6      	beq.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b095      	sub	sp, #84	; 0x54
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c10:	643b      	str	r3, [r7, #64]	; 0x40
 8005c12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e6      	bne.n	8005bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d118      	bne.n	8005c92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 0310 	bic.w	r3, r3, #16
 8005c74:	647b      	str	r3, [r7, #68]	; 0x44
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6979      	ldr	r1, [r7, #20]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e6      	bne.n	8005c60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ca6:	bf00      	nop
 8005ca8:	3754      	adds	r7, #84	; 0x54
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff fc8d 	bl	80055f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b088      	sub	sp, #32
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e6      	bne.n	8005ce6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fc59 	bl	80055dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d2a:	bf00      	nop
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <__cvt>:
 8005d46:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4a:	ec55 4b10 	vmov	r4, r5, d0
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	460e      	mov	r6, r1
 8005d52:	4619      	mov	r1, r3
 8005d54:	462b      	mov	r3, r5
 8005d56:	bfbb      	ittet	lt
 8005d58:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d5c:	461d      	movlt	r5, r3
 8005d5e:	2300      	movge	r3, #0
 8005d60:	232d      	movlt	r3, #45	; 0x2d
 8005d62:	700b      	strb	r3, [r1, #0]
 8005d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d66:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d6a:	4691      	mov	r9, r2
 8005d6c:	f023 0820 	bic.w	r8, r3, #32
 8005d70:	bfbc      	itt	lt
 8005d72:	4622      	movlt	r2, r4
 8005d74:	4614      	movlt	r4, r2
 8005d76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d7a:	d005      	beq.n	8005d88 <__cvt+0x42>
 8005d7c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d80:	d100      	bne.n	8005d84 <__cvt+0x3e>
 8005d82:	3601      	adds	r6, #1
 8005d84:	2102      	movs	r1, #2
 8005d86:	e000      	b.n	8005d8a <__cvt+0x44>
 8005d88:	2103      	movs	r1, #3
 8005d8a:	ab03      	add	r3, sp, #12
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	ab02      	add	r3, sp, #8
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	ec45 4b10 	vmov	d0, r4, r5
 8005d96:	4653      	mov	r3, sl
 8005d98:	4632      	mov	r2, r6
 8005d9a:	f000 fe49 	bl	8006a30 <_dtoa_r>
 8005d9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005da2:	4607      	mov	r7, r0
 8005da4:	d102      	bne.n	8005dac <__cvt+0x66>
 8005da6:	f019 0f01 	tst.w	r9, #1
 8005daa:	d022      	beq.n	8005df2 <__cvt+0xac>
 8005dac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005db0:	eb07 0906 	add.w	r9, r7, r6
 8005db4:	d110      	bne.n	8005dd8 <__cvt+0x92>
 8005db6:	783b      	ldrb	r3, [r7, #0]
 8005db8:	2b30      	cmp	r3, #48	; 0x30
 8005dba:	d10a      	bne.n	8005dd2 <__cvt+0x8c>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7fa fe80 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dc8:	b918      	cbnz	r0, 8005dd2 <__cvt+0x8c>
 8005dca:	f1c6 0601 	rsb	r6, r6, #1
 8005dce:	f8ca 6000 	str.w	r6, [sl]
 8005dd2:	f8da 3000 	ldr.w	r3, [sl]
 8005dd6:	4499      	add	r9, r3
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8005de4:	b108      	cbz	r0, 8005dea <__cvt+0xa4>
 8005de6:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dea:	2230      	movs	r2, #48	; 0x30
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	454b      	cmp	r3, r9
 8005df0:	d307      	bcc.n	8005e02 <__cvt+0xbc>
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005df6:	1bdb      	subs	r3, r3, r7
 8005df8:	4638      	mov	r0, r7
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	b004      	add	sp, #16
 8005dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	9103      	str	r1, [sp, #12]
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e7f0      	b.n	8005dec <__cvt+0xa6>

08005e0a <__exponent>:
 8005e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	bfb8      	it	lt
 8005e12:	4249      	neglt	r1, r1
 8005e14:	f803 2b02 	strb.w	r2, [r3], #2
 8005e18:	bfb4      	ite	lt
 8005e1a:	222d      	movlt	r2, #45	; 0x2d
 8005e1c:	222b      	movge	r2, #43	; 0x2b
 8005e1e:	2909      	cmp	r1, #9
 8005e20:	7042      	strb	r2, [r0, #1]
 8005e22:	dd2a      	ble.n	8005e7a <__exponent+0x70>
 8005e24:	f10d 0207 	add.w	r2, sp, #7
 8005e28:	4617      	mov	r7, r2
 8005e2a:	260a      	movs	r6, #10
 8005e2c:	4694      	mov	ip, r2
 8005e2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e32:	fb06 1415 	mls	r4, r6, r5, r1
 8005e36:	3430      	adds	r4, #48	; 0x30
 8005e38:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	2c63      	cmp	r4, #99	; 0x63
 8005e40:	f102 32ff 	add.w	r2, r2, #4294967295
 8005e44:	4629      	mov	r1, r5
 8005e46:	dcf1      	bgt.n	8005e2c <__exponent+0x22>
 8005e48:	3130      	adds	r1, #48	; 0x30
 8005e4a:	f1ac 0402 	sub.w	r4, ip, #2
 8005e4e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e52:	1c41      	adds	r1, r0, #1
 8005e54:	4622      	mov	r2, r4
 8005e56:	42ba      	cmp	r2, r7
 8005e58:	d30a      	bcc.n	8005e70 <__exponent+0x66>
 8005e5a:	f10d 0209 	add.w	r2, sp, #9
 8005e5e:	eba2 020c 	sub.w	r2, r2, ip
 8005e62:	42bc      	cmp	r4, r7
 8005e64:	bf88      	it	hi
 8005e66:	2200      	movhi	r2, #0
 8005e68:	4413      	add	r3, r2
 8005e6a:	1a18      	subs	r0, r3, r0
 8005e6c:	b003      	add	sp, #12
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e70:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e74:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e78:	e7ed      	b.n	8005e56 <__exponent+0x4c>
 8005e7a:	2330      	movs	r3, #48	; 0x30
 8005e7c:	3130      	adds	r1, #48	; 0x30
 8005e7e:	7083      	strb	r3, [r0, #2]
 8005e80:	70c1      	strb	r1, [r0, #3]
 8005e82:	1d03      	adds	r3, r0, #4
 8005e84:	e7f1      	b.n	8005e6a <__exponent+0x60>
	...

08005e88 <_printf_float>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	ed2d 8b02 	vpush	{d8}
 8005e90:	b08d      	sub	sp, #52	; 0x34
 8005e92:	460c      	mov	r4, r1
 8005e94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e98:	4616      	mov	r6, r2
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	f000 fcc7 	bl	8006830 <_localeconv_r>
 8005ea2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ea6:	4650      	mov	r0, sl
 8005ea8:	f7fa f9e2 	bl	8000270 <strlen>
 8005eac:	2300      	movs	r3, #0
 8005eae:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ebc:	3307      	adds	r3, #7
 8005ebe:	f023 0307 	bic.w	r3, r3, #7
 8005ec2:	f103 0208 	add.w	r2, r3, #8
 8005ec6:	f8c8 2000 	str.w	r2, [r8]
 8005eca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ece:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ed2:	9307      	str	r3, [sp, #28]
 8005ed4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ed8:	ee08 0a10 	vmov	s16, r0
 8005edc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005ee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee4:	4b9e      	ldr	r3, [pc, #632]	; (8006160 <_printf_float+0x2d8>)
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eea:	f7fa fe1f 	bl	8000b2c <__aeabi_dcmpun>
 8005eee:	bb88      	cbnz	r0, 8005f54 <_printf_float+0xcc>
 8005ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ef4:	4b9a      	ldr	r3, [pc, #616]	; (8006160 <_printf_float+0x2d8>)
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8005efa:	f7fa fdf9 	bl	8000af0 <__aeabi_dcmple>
 8005efe:	bb48      	cbnz	r0, 8005f54 <_printf_float+0xcc>
 8005f00:	2200      	movs	r2, #0
 8005f02:	2300      	movs	r3, #0
 8005f04:	4640      	mov	r0, r8
 8005f06:	4649      	mov	r1, r9
 8005f08:	f7fa fde8 	bl	8000adc <__aeabi_dcmplt>
 8005f0c:	b110      	cbz	r0, 8005f14 <_printf_float+0x8c>
 8005f0e:	232d      	movs	r3, #45	; 0x2d
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f14:	4a93      	ldr	r2, [pc, #588]	; (8006164 <_printf_float+0x2dc>)
 8005f16:	4b94      	ldr	r3, [pc, #592]	; (8006168 <_printf_float+0x2e0>)
 8005f18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f1c:	bf94      	ite	ls
 8005f1e:	4690      	movls	r8, r2
 8005f20:	4698      	movhi	r8, r3
 8005f22:	2303      	movs	r3, #3
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	9b05      	ldr	r3, [sp, #20]
 8005f28:	f023 0304 	bic.w	r3, r3, #4
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	f04f 0900 	mov.w	r9, #0
 8005f32:	9700      	str	r7, [sp, #0]
 8005f34:	4633      	mov	r3, r6
 8005f36:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 f9da 	bl	80062f4 <_printf_common>
 8005f40:	3001      	adds	r0, #1
 8005f42:	f040 8090 	bne.w	8006066 <_printf_float+0x1de>
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4a:	b00d      	add	sp, #52	; 0x34
 8005f4c:	ecbd 8b02 	vpop	{d8}
 8005f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f54:	4642      	mov	r2, r8
 8005f56:	464b      	mov	r3, r9
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	f7fa fde6 	bl	8000b2c <__aeabi_dcmpun>
 8005f60:	b140      	cbz	r0, 8005f74 <_printf_float+0xec>
 8005f62:	464b      	mov	r3, r9
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bfbc      	itt	lt
 8005f68:	232d      	movlt	r3, #45	; 0x2d
 8005f6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f6e:	4a7f      	ldr	r2, [pc, #508]	; (800616c <_printf_float+0x2e4>)
 8005f70:	4b7f      	ldr	r3, [pc, #508]	; (8006170 <_printf_float+0x2e8>)
 8005f72:	e7d1      	b.n	8005f18 <_printf_float+0x90>
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f7a:	9206      	str	r2, [sp, #24]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	d13f      	bne.n	8006000 <_printf_float+0x178>
 8005f80:	2306      	movs	r3, #6
 8005f82:	6063      	str	r3, [r4, #4]
 8005f84:	9b05      	ldr	r3, [sp, #20]
 8005f86:	6861      	ldr	r1, [r4, #4]
 8005f88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9303      	str	r3, [sp, #12]
 8005f90:	ab0a      	add	r3, sp, #40	; 0x28
 8005f92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f96:	ab09      	add	r3, sp, #36	; 0x24
 8005f98:	ec49 8b10 	vmov	d0, r8, r9
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	6022      	str	r2, [r4, #0]
 8005fa0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f7ff fece 	bl	8005d46 <__cvt>
 8005faa:	9b06      	ldr	r3, [sp, #24]
 8005fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fae:	2b47      	cmp	r3, #71	; 0x47
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	d108      	bne.n	8005fc6 <_printf_float+0x13e>
 8005fb4:	1cc8      	adds	r0, r1, #3
 8005fb6:	db02      	blt.n	8005fbe <_printf_float+0x136>
 8005fb8:	6863      	ldr	r3, [r4, #4]
 8005fba:	4299      	cmp	r1, r3
 8005fbc:	dd41      	ble.n	8006042 <_printf_float+0x1ba>
 8005fbe:	f1ab 0302 	sub.w	r3, fp, #2
 8005fc2:	fa5f fb83 	uxtb.w	fp, r3
 8005fc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fca:	d820      	bhi.n	800600e <_printf_float+0x186>
 8005fcc:	3901      	subs	r1, #1
 8005fce:	465a      	mov	r2, fp
 8005fd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fd4:	9109      	str	r1, [sp, #36]	; 0x24
 8005fd6:	f7ff ff18 	bl	8005e0a <__exponent>
 8005fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fdc:	1813      	adds	r3, r2, r0
 8005fde:	2a01      	cmp	r2, #1
 8005fe0:	4681      	mov	r9, r0
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	dc02      	bgt.n	8005fec <_printf_float+0x164>
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	07d2      	lsls	r2, r2, #31
 8005fea:	d501      	bpl.n	8005ff0 <_printf_float+0x168>
 8005fec:	3301      	adds	r3, #1
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d09c      	beq.n	8005f32 <_printf_float+0xaa>
 8005ff8:	232d      	movs	r3, #45	; 0x2d
 8005ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ffe:	e798      	b.n	8005f32 <_printf_float+0xaa>
 8006000:	9a06      	ldr	r2, [sp, #24]
 8006002:	2a47      	cmp	r2, #71	; 0x47
 8006004:	d1be      	bne.n	8005f84 <_printf_float+0xfc>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1bc      	bne.n	8005f84 <_printf_float+0xfc>
 800600a:	2301      	movs	r3, #1
 800600c:	e7b9      	b.n	8005f82 <_printf_float+0xfa>
 800600e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006012:	d118      	bne.n	8006046 <_printf_float+0x1be>
 8006014:	2900      	cmp	r1, #0
 8006016:	6863      	ldr	r3, [r4, #4]
 8006018:	dd0b      	ble.n	8006032 <_printf_float+0x1aa>
 800601a:	6121      	str	r1, [r4, #16]
 800601c:	b913      	cbnz	r3, 8006024 <_printf_float+0x19c>
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	07d0      	lsls	r0, r2, #31
 8006022:	d502      	bpl.n	800602a <_printf_float+0x1a2>
 8006024:	3301      	adds	r3, #1
 8006026:	440b      	add	r3, r1
 8006028:	6123      	str	r3, [r4, #16]
 800602a:	65a1      	str	r1, [r4, #88]	; 0x58
 800602c:	f04f 0900 	mov.w	r9, #0
 8006030:	e7de      	b.n	8005ff0 <_printf_float+0x168>
 8006032:	b913      	cbnz	r3, 800603a <_printf_float+0x1b2>
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	07d2      	lsls	r2, r2, #31
 8006038:	d501      	bpl.n	800603e <_printf_float+0x1b6>
 800603a:	3302      	adds	r3, #2
 800603c:	e7f4      	b.n	8006028 <_printf_float+0x1a0>
 800603e:	2301      	movs	r3, #1
 8006040:	e7f2      	b.n	8006028 <_printf_float+0x1a0>
 8006042:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006048:	4299      	cmp	r1, r3
 800604a:	db05      	blt.n	8006058 <_printf_float+0x1d0>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	6121      	str	r1, [r4, #16]
 8006050:	07d8      	lsls	r0, r3, #31
 8006052:	d5ea      	bpl.n	800602a <_printf_float+0x1a2>
 8006054:	1c4b      	adds	r3, r1, #1
 8006056:	e7e7      	b.n	8006028 <_printf_float+0x1a0>
 8006058:	2900      	cmp	r1, #0
 800605a:	bfd4      	ite	le
 800605c:	f1c1 0202 	rsble	r2, r1, #2
 8006060:	2201      	movgt	r2, #1
 8006062:	4413      	add	r3, r2
 8006064:	e7e0      	b.n	8006028 <_printf_float+0x1a0>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	055a      	lsls	r2, r3, #21
 800606a:	d407      	bmi.n	800607c <_printf_float+0x1f4>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	4642      	mov	r2, r8
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	d12c      	bne.n	80060d4 <_printf_float+0x24c>
 800607a:	e764      	b.n	8005f46 <_printf_float+0xbe>
 800607c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006080:	f240 80e0 	bls.w	8006244 <_printf_float+0x3bc>
 8006084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006088:	2200      	movs	r2, #0
 800608a:	2300      	movs	r3, #0
 800608c:	f7fa fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006090:	2800      	cmp	r0, #0
 8006092:	d034      	beq.n	80060fe <_printf_float+0x276>
 8006094:	4a37      	ldr	r2, [pc, #220]	; (8006174 <_printf_float+0x2ec>)
 8006096:	2301      	movs	r3, #1
 8006098:	4631      	mov	r1, r6
 800609a:	4628      	mov	r0, r5
 800609c:	47b8      	blx	r7
 800609e:	3001      	adds	r0, #1
 80060a0:	f43f af51 	beq.w	8005f46 <_printf_float+0xbe>
 80060a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060a8:	429a      	cmp	r2, r3
 80060aa:	db02      	blt.n	80060b2 <_printf_float+0x22a>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	07d8      	lsls	r0, r3, #31
 80060b0:	d510      	bpl.n	80060d4 <_printf_float+0x24c>
 80060b2:	ee18 3a10 	vmov	r3, s16
 80060b6:	4652      	mov	r2, sl
 80060b8:	4631      	mov	r1, r6
 80060ba:	4628      	mov	r0, r5
 80060bc:	47b8      	blx	r7
 80060be:	3001      	adds	r0, #1
 80060c0:	f43f af41 	beq.w	8005f46 <_printf_float+0xbe>
 80060c4:	f04f 0800 	mov.w	r8, #0
 80060c8:	f104 091a 	add.w	r9, r4, #26
 80060cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4543      	cmp	r3, r8
 80060d2:	dc09      	bgt.n	80060e8 <_printf_float+0x260>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	079b      	lsls	r3, r3, #30
 80060d8:	f100 8107 	bmi.w	80062ea <_printf_float+0x462>
 80060dc:	68e0      	ldr	r0, [r4, #12]
 80060de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e0:	4298      	cmp	r0, r3
 80060e2:	bfb8      	it	lt
 80060e4:	4618      	movlt	r0, r3
 80060e6:	e730      	b.n	8005f4a <_printf_float+0xc2>
 80060e8:	2301      	movs	r3, #1
 80060ea:	464a      	mov	r2, r9
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f af27 	beq.w	8005f46 <_printf_float+0xbe>
 80060f8:	f108 0801 	add.w	r8, r8, #1
 80060fc:	e7e6      	b.n	80060cc <_printf_float+0x244>
 80060fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	dc39      	bgt.n	8006178 <_printf_float+0x2f0>
 8006104:	4a1b      	ldr	r2, [pc, #108]	; (8006174 <_printf_float+0x2ec>)
 8006106:	2301      	movs	r3, #1
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	f43f af19 	beq.w	8005f46 <_printf_float+0xbe>
 8006114:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006118:	4313      	orrs	r3, r2
 800611a:	d102      	bne.n	8006122 <_printf_float+0x29a>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	07d9      	lsls	r1, r3, #31
 8006120:	d5d8      	bpl.n	80060d4 <_printf_float+0x24c>
 8006122:	ee18 3a10 	vmov	r3, s16
 8006126:	4652      	mov	r2, sl
 8006128:	4631      	mov	r1, r6
 800612a:	4628      	mov	r0, r5
 800612c:	47b8      	blx	r7
 800612e:	3001      	adds	r0, #1
 8006130:	f43f af09 	beq.w	8005f46 <_printf_float+0xbe>
 8006134:	f04f 0900 	mov.w	r9, #0
 8006138:	f104 0a1a 	add.w	sl, r4, #26
 800613c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613e:	425b      	negs	r3, r3
 8006140:	454b      	cmp	r3, r9
 8006142:	dc01      	bgt.n	8006148 <_printf_float+0x2c0>
 8006144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006146:	e792      	b.n	800606e <_printf_float+0x1e6>
 8006148:	2301      	movs	r3, #1
 800614a:	4652      	mov	r2, sl
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f aef7 	beq.w	8005f46 <_printf_float+0xbe>
 8006158:	f109 0901 	add.w	r9, r9, #1
 800615c:	e7ee      	b.n	800613c <_printf_float+0x2b4>
 800615e:	bf00      	nop
 8006160:	7fefffff 	.word	0x7fefffff
 8006164:	08008710 	.word	0x08008710
 8006168:	08008714 	.word	0x08008714
 800616c:	08008718 	.word	0x08008718
 8006170:	0800871c 	.word	0x0800871c
 8006174:	08008720 	.word	0x08008720
 8006178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800617a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800617c:	429a      	cmp	r2, r3
 800617e:	bfa8      	it	ge
 8006180:	461a      	movge	r2, r3
 8006182:	2a00      	cmp	r2, #0
 8006184:	4691      	mov	r9, r2
 8006186:	dc37      	bgt.n	80061f8 <_printf_float+0x370>
 8006188:	f04f 0b00 	mov.w	fp, #0
 800618c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006190:	f104 021a 	add.w	r2, r4, #26
 8006194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	eba3 0309 	sub.w	r3, r3, r9
 800619c:	455b      	cmp	r3, fp
 800619e:	dc33      	bgt.n	8006208 <_printf_float+0x380>
 80061a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a4:	429a      	cmp	r2, r3
 80061a6:	db3b      	blt.n	8006220 <_printf_float+0x398>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	07da      	lsls	r2, r3, #31
 80061ac:	d438      	bmi.n	8006220 <_printf_float+0x398>
 80061ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80061b2:	eba2 0903 	sub.w	r9, r2, r3
 80061b6:	9b05      	ldr	r3, [sp, #20]
 80061b8:	1ad2      	subs	r2, r2, r3
 80061ba:	4591      	cmp	r9, r2
 80061bc:	bfa8      	it	ge
 80061be:	4691      	movge	r9, r2
 80061c0:	f1b9 0f00 	cmp.w	r9, #0
 80061c4:	dc35      	bgt.n	8006232 <_printf_float+0x3aa>
 80061c6:	f04f 0800 	mov.w	r8, #0
 80061ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061ce:	f104 0a1a 	add.w	sl, r4, #26
 80061d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	eba3 0309 	sub.w	r3, r3, r9
 80061dc:	4543      	cmp	r3, r8
 80061de:	f77f af79 	ble.w	80060d4 <_printf_float+0x24c>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4652      	mov	r2, sl
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f aeaa 	beq.w	8005f46 <_printf_float+0xbe>
 80061f2:	f108 0801 	add.w	r8, r8, #1
 80061f6:	e7ec      	b.n	80061d2 <_printf_float+0x34a>
 80061f8:	4613      	mov	r3, r2
 80061fa:	4631      	mov	r1, r6
 80061fc:	4642      	mov	r2, r8
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	d1c0      	bne.n	8006188 <_printf_float+0x300>
 8006206:	e69e      	b.n	8005f46 <_printf_float+0xbe>
 8006208:	2301      	movs	r3, #1
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	9205      	str	r2, [sp, #20]
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	f43f ae97 	beq.w	8005f46 <_printf_float+0xbe>
 8006218:	9a05      	ldr	r2, [sp, #20]
 800621a:	f10b 0b01 	add.w	fp, fp, #1
 800621e:	e7b9      	b.n	8006194 <_printf_float+0x30c>
 8006220:	ee18 3a10 	vmov	r3, s16
 8006224:	4652      	mov	r2, sl
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	d1be      	bne.n	80061ae <_printf_float+0x326>
 8006230:	e689      	b.n	8005f46 <_printf_float+0xbe>
 8006232:	9a05      	ldr	r2, [sp, #20]
 8006234:	464b      	mov	r3, r9
 8006236:	4442      	add	r2, r8
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	d1c1      	bne.n	80061c6 <_printf_float+0x33e>
 8006242:	e680      	b.n	8005f46 <_printf_float+0xbe>
 8006244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006246:	2a01      	cmp	r2, #1
 8006248:	dc01      	bgt.n	800624e <_printf_float+0x3c6>
 800624a:	07db      	lsls	r3, r3, #31
 800624c:	d53a      	bpl.n	80062c4 <_printf_float+0x43c>
 800624e:	2301      	movs	r3, #1
 8006250:	4642      	mov	r2, r8
 8006252:	4631      	mov	r1, r6
 8006254:	4628      	mov	r0, r5
 8006256:	47b8      	blx	r7
 8006258:	3001      	adds	r0, #1
 800625a:	f43f ae74 	beq.w	8005f46 <_printf_float+0xbe>
 800625e:	ee18 3a10 	vmov	r3, s16
 8006262:	4652      	mov	r2, sl
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f ae6b 	beq.w	8005f46 <_printf_float+0xbe>
 8006270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006274:	2200      	movs	r2, #0
 8006276:	2300      	movs	r3, #0
 8006278:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800627c:	f7fa fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006280:	b9d8      	cbnz	r0, 80062ba <_printf_float+0x432>
 8006282:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006286:	f108 0201 	add.w	r2, r8, #1
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	d10e      	bne.n	80062b2 <_printf_float+0x42a>
 8006294:	e657      	b.n	8005f46 <_printf_float+0xbe>
 8006296:	2301      	movs	r3, #1
 8006298:	4652      	mov	r2, sl
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f ae50 	beq.w	8005f46 <_printf_float+0xbe>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ac:	3b01      	subs	r3, #1
 80062ae:	4543      	cmp	r3, r8
 80062b0:	dcf1      	bgt.n	8006296 <_printf_float+0x40e>
 80062b2:	464b      	mov	r3, r9
 80062b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062b8:	e6da      	b.n	8006070 <_printf_float+0x1e8>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	f104 0a1a 	add.w	sl, r4, #26
 80062c2:	e7f2      	b.n	80062aa <_printf_float+0x422>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4642      	mov	r2, r8
 80062c8:	e7df      	b.n	800628a <_printf_float+0x402>
 80062ca:	2301      	movs	r3, #1
 80062cc:	464a      	mov	r2, r9
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f ae36 	beq.w	8005f46 <_printf_float+0xbe>
 80062da:	f108 0801 	add.w	r8, r8, #1
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	4543      	cmp	r3, r8
 80062e6:	dcf0      	bgt.n	80062ca <_printf_float+0x442>
 80062e8:	e6f8      	b.n	80060dc <_printf_float+0x254>
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	f104 0919 	add.w	r9, r4, #25
 80062f2:	e7f4      	b.n	80062de <_printf_float+0x456>

080062f4 <_printf_common>:
 80062f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	4616      	mov	r6, r2
 80062fa:	4699      	mov	r9, r3
 80062fc:	688a      	ldr	r2, [r1, #8]
 80062fe:	690b      	ldr	r3, [r1, #16]
 8006300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006304:	4293      	cmp	r3, r2
 8006306:	bfb8      	it	lt
 8006308:	4613      	movlt	r3, r2
 800630a:	6033      	str	r3, [r6, #0]
 800630c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006310:	4607      	mov	r7, r0
 8006312:	460c      	mov	r4, r1
 8006314:	b10a      	cbz	r2, 800631a <_printf_common+0x26>
 8006316:	3301      	adds	r3, #1
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	0699      	lsls	r1, r3, #26
 800631e:	bf42      	ittt	mi
 8006320:	6833      	ldrmi	r3, [r6, #0]
 8006322:	3302      	addmi	r3, #2
 8006324:	6033      	strmi	r3, [r6, #0]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	f015 0506 	ands.w	r5, r5, #6
 800632c:	d106      	bne.n	800633c <_printf_common+0x48>
 800632e:	f104 0a19 	add.w	sl, r4, #25
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	6832      	ldr	r2, [r6, #0]
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	42ab      	cmp	r3, r5
 800633a:	dc26      	bgt.n	800638a <_printf_common+0x96>
 800633c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006340:	1e13      	subs	r3, r2, #0
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	bf18      	it	ne
 8006346:	2301      	movne	r3, #1
 8006348:	0692      	lsls	r2, r2, #26
 800634a:	d42b      	bmi.n	80063a4 <_printf_common+0xb0>
 800634c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006350:	4649      	mov	r1, r9
 8006352:	4638      	mov	r0, r7
 8006354:	47c0      	blx	r8
 8006356:	3001      	adds	r0, #1
 8006358:	d01e      	beq.n	8006398 <_printf_common+0xa4>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	6922      	ldr	r2, [r4, #16]
 800635e:	f003 0306 	and.w	r3, r3, #6
 8006362:	2b04      	cmp	r3, #4
 8006364:	bf02      	ittt	eq
 8006366:	68e5      	ldreq	r5, [r4, #12]
 8006368:	6833      	ldreq	r3, [r6, #0]
 800636a:	1aed      	subeq	r5, r5, r3
 800636c:	68a3      	ldr	r3, [r4, #8]
 800636e:	bf0c      	ite	eq
 8006370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006374:	2500      	movne	r5, #0
 8006376:	4293      	cmp	r3, r2
 8006378:	bfc4      	itt	gt
 800637a:	1a9b      	subgt	r3, r3, r2
 800637c:	18ed      	addgt	r5, r5, r3
 800637e:	2600      	movs	r6, #0
 8006380:	341a      	adds	r4, #26
 8006382:	42b5      	cmp	r5, r6
 8006384:	d11a      	bne.n	80063bc <_printf_common+0xc8>
 8006386:	2000      	movs	r0, #0
 8006388:	e008      	b.n	800639c <_printf_common+0xa8>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4649      	mov	r1, r9
 8006390:	4638      	mov	r0, r7
 8006392:	47c0      	blx	r8
 8006394:	3001      	adds	r0, #1
 8006396:	d103      	bne.n	80063a0 <_printf_common+0xac>
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a0:	3501      	adds	r5, #1
 80063a2:	e7c6      	b.n	8006332 <_printf_common+0x3e>
 80063a4:	18e1      	adds	r1, r4, r3
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	2030      	movs	r0, #48	; 0x30
 80063aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ae:	4422      	add	r2, r4
 80063b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063b8:	3302      	adds	r3, #2
 80063ba:	e7c7      	b.n	800634c <_printf_common+0x58>
 80063bc:	2301      	movs	r3, #1
 80063be:	4622      	mov	r2, r4
 80063c0:	4649      	mov	r1, r9
 80063c2:	4638      	mov	r0, r7
 80063c4:	47c0      	blx	r8
 80063c6:	3001      	adds	r0, #1
 80063c8:	d0e6      	beq.n	8006398 <_printf_common+0xa4>
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7d9      	b.n	8006382 <_printf_common+0x8e>
	...

080063d0 <_printf_i>:
 80063d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	7e0f      	ldrb	r7, [r1, #24]
 80063d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063d8:	2f78      	cmp	r7, #120	; 0x78
 80063da:	4691      	mov	r9, r2
 80063dc:	4680      	mov	r8, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	469a      	mov	sl, r3
 80063e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063e6:	d807      	bhi.n	80063f8 <_printf_i+0x28>
 80063e8:	2f62      	cmp	r7, #98	; 0x62
 80063ea:	d80a      	bhi.n	8006402 <_printf_i+0x32>
 80063ec:	2f00      	cmp	r7, #0
 80063ee:	f000 80d4 	beq.w	800659a <_printf_i+0x1ca>
 80063f2:	2f58      	cmp	r7, #88	; 0x58
 80063f4:	f000 80c0 	beq.w	8006578 <_printf_i+0x1a8>
 80063f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006400:	e03a      	b.n	8006478 <_printf_i+0xa8>
 8006402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006406:	2b15      	cmp	r3, #21
 8006408:	d8f6      	bhi.n	80063f8 <_printf_i+0x28>
 800640a:	a101      	add	r1, pc, #4	; (adr r1, 8006410 <_printf_i+0x40>)
 800640c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006410:	08006469 	.word	0x08006469
 8006414:	0800647d 	.word	0x0800647d
 8006418:	080063f9 	.word	0x080063f9
 800641c:	080063f9 	.word	0x080063f9
 8006420:	080063f9 	.word	0x080063f9
 8006424:	080063f9 	.word	0x080063f9
 8006428:	0800647d 	.word	0x0800647d
 800642c:	080063f9 	.word	0x080063f9
 8006430:	080063f9 	.word	0x080063f9
 8006434:	080063f9 	.word	0x080063f9
 8006438:	080063f9 	.word	0x080063f9
 800643c:	08006581 	.word	0x08006581
 8006440:	080064a9 	.word	0x080064a9
 8006444:	0800653b 	.word	0x0800653b
 8006448:	080063f9 	.word	0x080063f9
 800644c:	080063f9 	.word	0x080063f9
 8006450:	080065a3 	.word	0x080065a3
 8006454:	080063f9 	.word	0x080063f9
 8006458:	080064a9 	.word	0x080064a9
 800645c:	080063f9 	.word	0x080063f9
 8006460:	080063f9 	.word	0x080063f9
 8006464:	08006543 	.word	0x08006543
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	602a      	str	r2, [r5, #0]
 8006470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006478:	2301      	movs	r3, #1
 800647a:	e09f      	b.n	80065bc <_printf_i+0x1ec>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	0607      	lsls	r7, r0, #24
 8006482:	f103 0104 	add.w	r1, r3, #4
 8006486:	6029      	str	r1, [r5, #0]
 8006488:	d501      	bpl.n	800648e <_printf_i+0xbe>
 800648a:	681e      	ldr	r6, [r3, #0]
 800648c:	e003      	b.n	8006496 <_printf_i+0xc6>
 800648e:	0646      	lsls	r6, r0, #25
 8006490:	d5fb      	bpl.n	800648a <_printf_i+0xba>
 8006492:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006496:	2e00      	cmp	r6, #0
 8006498:	da03      	bge.n	80064a2 <_printf_i+0xd2>
 800649a:	232d      	movs	r3, #45	; 0x2d
 800649c:	4276      	negs	r6, r6
 800649e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a2:	485a      	ldr	r0, [pc, #360]	; (800660c <_printf_i+0x23c>)
 80064a4:	230a      	movs	r3, #10
 80064a6:	e012      	b.n	80064ce <_printf_i+0xfe>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	6820      	ldr	r0, [r4, #0]
 80064ac:	1d19      	adds	r1, r3, #4
 80064ae:	6029      	str	r1, [r5, #0]
 80064b0:	0605      	lsls	r5, r0, #24
 80064b2:	d501      	bpl.n	80064b8 <_printf_i+0xe8>
 80064b4:	681e      	ldr	r6, [r3, #0]
 80064b6:	e002      	b.n	80064be <_printf_i+0xee>
 80064b8:	0641      	lsls	r1, r0, #25
 80064ba:	d5fb      	bpl.n	80064b4 <_printf_i+0xe4>
 80064bc:	881e      	ldrh	r6, [r3, #0]
 80064be:	4853      	ldr	r0, [pc, #332]	; (800660c <_printf_i+0x23c>)
 80064c0:	2f6f      	cmp	r7, #111	; 0x6f
 80064c2:	bf0c      	ite	eq
 80064c4:	2308      	moveq	r3, #8
 80064c6:	230a      	movne	r3, #10
 80064c8:	2100      	movs	r1, #0
 80064ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ce:	6865      	ldr	r5, [r4, #4]
 80064d0:	60a5      	str	r5, [r4, #8]
 80064d2:	2d00      	cmp	r5, #0
 80064d4:	bfa2      	ittt	ge
 80064d6:	6821      	ldrge	r1, [r4, #0]
 80064d8:	f021 0104 	bicge.w	r1, r1, #4
 80064dc:	6021      	strge	r1, [r4, #0]
 80064de:	b90e      	cbnz	r6, 80064e4 <_printf_i+0x114>
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	d04b      	beq.n	800657c <_printf_i+0x1ac>
 80064e4:	4615      	mov	r5, r2
 80064e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80064ea:	fb03 6711 	mls	r7, r3, r1, r6
 80064ee:	5dc7      	ldrb	r7, [r0, r7]
 80064f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064f4:	4637      	mov	r7, r6
 80064f6:	42bb      	cmp	r3, r7
 80064f8:	460e      	mov	r6, r1
 80064fa:	d9f4      	bls.n	80064e6 <_printf_i+0x116>
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d10b      	bne.n	8006518 <_printf_i+0x148>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	07de      	lsls	r6, r3, #31
 8006504:	d508      	bpl.n	8006518 <_printf_i+0x148>
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	6861      	ldr	r1, [r4, #4]
 800650a:	4299      	cmp	r1, r3
 800650c:	bfde      	ittt	le
 800650e:	2330      	movle	r3, #48	; 0x30
 8006510:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006514:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006518:	1b52      	subs	r2, r2, r5
 800651a:	6122      	str	r2, [r4, #16]
 800651c:	f8cd a000 	str.w	sl, [sp]
 8006520:	464b      	mov	r3, r9
 8006522:	aa03      	add	r2, sp, #12
 8006524:	4621      	mov	r1, r4
 8006526:	4640      	mov	r0, r8
 8006528:	f7ff fee4 	bl	80062f4 <_printf_common>
 800652c:	3001      	adds	r0, #1
 800652e:	d14a      	bne.n	80065c6 <_printf_i+0x1f6>
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	b004      	add	sp, #16
 8006536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	4833      	ldr	r0, [pc, #204]	; (8006610 <_printf_i+0x240>)
 8006544:	2778      	movs	r7, #120	; 0x78
 8006546:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	6829      	ldr	r1, [r5, #0]
 800654e:	061f      	lsls	r7, r3, #24
 8006550:	f851 6b04 	ldr.w	r6, [r1], #4
 8006554:	d402      	bmi.n	800655c <_printf_i+0x18c>
 8006556:	065f      	lsls	r7, r3, #25
 8006558:	bf48      	it	mi
 800655a:	b2b6      	uxthmi	r6, r6
 800655c:	07df      	lsls	r7, r3, #31
 800655e:	bf48      	it	mi
 8006560:	f043 0320 	orrmi.w	r3, r3, #32
 8006564:	6029      	str	r1, [r5, #0]
 8006566:	bf48      	it	mi
 8006568:	6023      	strmi	r3, [r4, #0]
 800656a:	b91e      	cbnz	r6, 8006574 <_printf_i+0x1a4>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	f023 0320 	bic.w	r3, r3, #32
 8006572:	6023      	str	r3, [r4, #0]
 8006574:	2310      	movs	r3, #16
 8006576:	e7a7      	b.n	80064c8 <_printf_i+0xf8>
 8006578:	4824      	ldr	r0, [pc, #144]	; (800660c <_printf_i+0x23c>)
 800657a:	e7e4      	b.n	8006546 <_printf_i+0x176>
 800657c:	4615      	mov	r5, r2
 800657e:	e7bd      	b.n	80064fc <_printf_i+0x12c>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	6826      	ldr	r6, [r4, #0]
 8006584:	6961      	ldr	r1, [r4, #20]
 8006586:	1d18      	adds	r0, r3, #4
 8006588:	6028      	str	r0, [r5, #0]
 800658a:	0635      	lsls	r5, r6, #24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	d501      	bpl.n	8006594 <_printf_i+0x1c4>
 8006590:	6019      	str	r1, [r3, #0]
 8006592:	e002      	b.n	800659a <_printf_i+0x1ca>
 8006594:	0670      	lsls	r0, r6, #25
 8006596:	d5fb      	bpl.n	8006590 <_printf_i+0x1c0>
 8006598:	8019      	strh	r1, [r3, #0]
 800659a:	2300      	movs	r3, #0
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	4615      	mov	r5, r2
 80065a0:	e7bc      	b.n	800651c <_printf_i+0x14c>
 80065a2:	682b      	ldr	r3, [r5, #0]
 80065a4:	1d1a      	adds	r2, r3, #4
 80065a6:	602a      	str	r2, [r5, #0]
 80065a8:	681d      	ldr	r5, [r3, #0]
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	2100      	movs	r1, #0
 80065ae:	4628      	mov	r0, r5
 80065b0:	f7f9 fe0e 	bl	80001d0 <memchr>
 80065b4:	b108      	cbz	r0, 80065ba <_printf_i+0x1ea>
 80065b6:	1b40      	subs	r0, r0, r5
 80065b8:	6060      	str	r0, [r4, #4]
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	2300      	movs	r3, #0
 80065c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065c4:	e7aa      	b.n	800651c <_printf_i+0x14c>
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	462a      	mov	r2, r5
 80065ca:	4649      	mov	r1, r9
 80065cc:	4640      	mov	r0, r8
 80065ce:	47d0      	blx	sl
 80065d0:	3001      	adds	r0, #1
 80065d2:	d0ad      	beq.n	8006530 <_printf_i+0x160>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	079b      	lsls	r3, r3, #30
 80065d8:	d413      	bmi.n	8006602 <_printf_i+0x232>
 80065da:	68e0      	ldr	r0, [r4, #12]
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	4298      	cmp	r0, r3
 80065e0:	bfb8      	it	lt
 80065e2:	4618      	movlt	r0, r3
 80065e4:	e7a6      	b.n	8006534 <_printf_i+0x164>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4632      	mov	r2, r6
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	47d0      	blx	sl
 80065f0:	3001      	adds	r0, #1
 80065f2:	d09d      	beq.n	8006530 <_printf_i+0x160>
 80065f4:	3501      	adds	r5, #1
 80065f6:	68e3      	ldr	r3, [r4, #12]
 80065f8:	9903      	ldr	r1, [sp, #12]
 80065fa:	1a5b      	subs	r3, r3, r1
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dcf2      	bgt.n	80065e6 <_printf_i+0x216>
 8006600:	e7eb      	b.n	80065da <_printf_i+0x20a>
 8006602:	2500      	movs	r5, #0
 8006604:	f104 0619 	add.w	r6, r4, #25
 8006608:	e7f5      	b.n	80065f6 <_printf_i+0x226>
 800660a:	bf00      	nop
 800660c:	08008722 	.word	0x08008722
 8006610:	08008733 	.word	0x08008733

08006614 <std>:
 8006614:	2300      	movs	r3, #0
 8006616:	b510      	push	{r4, lr}
 8006618:	4604      	mov	r4, r0
 800661a:	e9c0 3300 	strd	r3, r3, [r0]
 800661e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006622:	6083      	str	r3, [r0, #8]
 8006624:	8181      	strh	r1, [r0, #12]
 8006626:	6643      	str	r3, [r0, #100]	; 0x64
 8006628:	81c2      	strh	r2, [r0, #14]
 800662a:	6183      	str	r3, [r0, #24]
 800662c:	4619      	mov	r1, r3
 800662e:	2208      	movs	r2, #8
 8006630:	305c      	adds	r0, #92	; 0x5c
 8006632:	f000 f8f4 	bl	800681e <memset>
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <std+0x58>)
 8006638:	6263      	str	r3, [r4, #36]	; 0x24
 800663a:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <std+0x5c>)
 800663c:	62a3      	str	r3, [r4, #40]	; 0x28
 800663e:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <std+0x60>)
 8006640:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006642:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <std+0x64>)
 8006644:	6323      	str	r3, [r4, #48]	; 0x30
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <std+0x68>)
 8006648:	6224      	str	r4, [r4, #32]
 800664a:	429c      	cmp	r4, r3
 800664c:	d006      	beq.n	800665c <std+0x48>
 800664e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006652:	4294      	cmp	r4, r2
 8006654:	d002      	beq.n	800665c <std+0x48>
 8006656:	33d0      	adds	r3, #208	; 0xd0
 8006658:	429c      	cmp	r4, r3
 800665a:	d105      	bne.n	8006668 <std+0x54>
 800665c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006664:	f000 b958 	b.w	8006918 <__retarget_lock_init_recursive>
 8006668:	bd10      	pop	{r4, pc}
 800666a:	bf00      	nop
 800666c:	08006799 	.word	0x08006799
 8006670:	080067bb 	.word	0x080067bb
 8006674:	080067f3 	.word	0x080067f3
 8006678:	08006817 	.word	0x08006817
 800667c:	20000330 	.word	0x20000330

08006680 <stdio_exit_handler>:
 8006680:	4a02      	ldr	r2, [pc, #8]	; (800668c <stdio_exit_handler+0xc>)
 8006682:	4903      	ldr	r1, [pc, #12]	; (8006690 <stdio_exit_handler+0x10>)
 8006684:	4803      	ldr	r0, [pc, #12]	; (8006694 <stdio_exit_handler+0x14>)
 8006686:	f000 b869 	b.w	800675c <_fwalk_sglue>
 800668a:	bf00      	nop
 800668c:	2000000c 	.word	0x2000000c
 8006690:	08008019 	.word	0x08008019
 8006694:	20000018 	.word	0x20000018

08006698 <cleanup_stdio>:
 8006698:	6841      	ldr	r1, [r0, #4]
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <cleanup_stdio+0x34>)
 800669c:	4299      	cmp	r1, r3
 800669e:	b510      	push	{r4, lr}
 80066a0:	4604      	mov	r4, r0
 80066a2:	d001      	beq.n	80066a8 <cleanup_stdio+0x10>
 80066a4:	f001 fcb8 	bl	8008018 <_fflush_r>
 80066a8:	68a1      	ldr	r1, [r4, #8]
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <cleanup_stdio+0x38>)
 80066ac:	4299      	cmp	r1, r3
 80066ae:	d002      	beq.n	80066b6 <cleanup_stdio+0x1e>
 80066b0:	4620      	mov	r0, r4
 80066b2:	f001 fcb1 	bl	8008018 <_fflush_r>
 80066b6:	68e1      	ldr	r1, [r4, #12]
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <cleanup_stdio+0x3c>)
 80066ba:	4299      	cmp	r1, r3
 80066bc:	d004      	beq.n	80066c8 <cleanup_stdio+0x30>
 80066be:	4620      	mov	r0, r4
 80066c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c4:	f001 bca8 	b.w	8008018 <_fflush_r>
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	bf00      	nop
 80066cc:	20000330 	.word	0x20000330
 80066d0:	20000398 	.word	0x20000398
 80066d4:	20000400 	.word	0x20000400

080066d8 <global_stdio_init.part.0>:
 80066d8:	b510      	push	{r4, lr}
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <global_stdio_init.part.0+0x30>)
 80066dc:	4c0b      	ldr	r4, [pc, #44]	; (800670c <global_stdio_init.part.0+0x34>)
 80066de:	4a0c      	ldr	r2, [pc, #48]	; (8006710 <global_stdio_init.part.0+0x38>)
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	4620      	mov	r0, r4
 80066e4:	2200      	movs	r2, #0
 80066e6:	2104      	movs	r1, #4
 80066e8:	f7ff ff94 	bl	8006614 <std>
 80066ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80066f0:	2201      	movs	r2, #1
 80066f2:	2109      	movs	r1, #9
 80066f4:	f7ff ff8e 	bl	8006614 <std>
 80066f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80066fc:	2202      	movs	r2, #2
 80066fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006702:	2112      	movs	r1, #18
 8006704:	f7ff bf86 	b.w	8006614 <std>
 8006708:	20000468 	.word	0x20000468
 800670c:	20000330 	.word	0x20000330
 8006710:	08006681 	.word	0x08006681

08006714 <__sfp_lock_acquire>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__sfp_lock_acquire+0x8>)
 8006716:	f000 b900 	b.w	800691a <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	20000471 	.word	0x20000471

08006720 <__sfp_lock_release>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__sfp_lock_release+0x8>)
 8006722:	f000 b8fb 	b.w	800691c <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	20000471 	.word	0x20000471

0800672c <__sinit>:
 800672c:	b510      	push	{r4, lr}
 800672e:	4604      	mov	r4, r0
 8006730:	f7ff fff0 	bl	8006714 <__sfp_lock_acquire>
 8006734:	6a23      	ldr	r3, [r4, #32]
 8006736:	b11b      	cbz	r3, 8006740 <__sinit+0x14>
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673c:	f7ff bff0 	b.w	8006720 <__sfp_lock_release>
 8006740:	4b04      	ldr	r3, [pc, #16]	; (8006754 <__sinit+0x28>)
 8006742:	6223      	str	r3, [r4, #32]
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <__sinit+0x2c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f5      	bne.n	8006738 <__sinit+0xc>
 800674c:	f7ff ffc4 	bl	80066d8 <global_stdio_init.part.0>
 8006750:	e7f2      	b.n	8006738 <__sinit+0xc>
 8006752:	bf00      	nop
 8006754:	08006699 	.word	0x08006699
 8006758:	20000468 	.word	0x20000468

0800675c <_fwalk_sglue>:
 800675c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006760:	4607      	mov	r7, r0
 8006762:	4688      	mov	r8, r1
 8006764:	4614      	mov	r4, r2
 8006766:	2600      	movs	r6, #0
 8006768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800676c:	f1b9 0901 	subs.w	r9, r9, #1
 8006770:	d505      	bpl.n	800677e <_fwalk_sglue+0x22>
 8006772:	6824      	ldr	r4, [r4, #0]
 8006774:	2c00      	cmp	r4, #0
 8006776:	d1f7      	bne.n	8006768 <_fwalk_sglue+0xc>
 8006778:	4630      	mov	r0, r6
 800677a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800677e:	89ab      	ldrh	r3, [r5, #12]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d907      	bls.n	8006794 <_fwalk_sglue+0x38>
 8006784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006788:	3301      	adds	r3, #1
 800678a:	d003      	beq.n	8006794 <_fwalk_sglue+0x38>
 800678c:	4629      	mov	r1, r5
 800678e:	4638      	mov	r0, r7
 8006790:	47c0      	blx	r8
 8006792:	4306      	orrs	r6, r0
 8006794:	3568      	adds	r5, #104	; 0x68
 8006796:	e7e9      	b.n	800676c <_fwalk_sglue+0x10>

08006798 <__sread>:
 8006798:	b510      	push	{r4, lr}
 800679a:	460c      	mov	r4, r1
 800679c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a0:	f000 f86c 	bl	800687c <_read_r>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	bfab      	itete	ge
 80067a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067aa:	89a3      	ldrhlt	r3, [r4, #12]
 80067ac:	181b      	addge	r3, r3, r0
 80067ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067b2:	bfac      	ite	ge
 80067b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80067b6:	81a3      	strhlt	r3, [r4, #12]
 80067b8:	bd10      	pop	{r4, pc}

080067ba <__swrite>:
 80067ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067be:	461f      	mov	r7, r3
 80067c0:	898b      	ldrh	r3, [r1, #12]
 80067c2:	05db      	lsls	r3, r3, #23
 80067c4:	4605      	mov	r5, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	4616      	mov	r6, r2
 80067ca:	d505      	bpl.n	80067d8 <__swrite+0x1e>
 80067cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d0:	2302      	movs	r3, #2
 80067d2:	2200      	movs	r2, #0
 80067d4:	f000 f840 	bl	8006858 <_lseek_r>
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	4632      	mov	r2, r6
 80067e6:	463b      	mov	r3, r7
 80067e8:	4628      	mov	r0, r5
 80067ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ee:	f000 b857 	b.w	80068a0 <_write_r>

080067f2 <__sseek>:
 80067f2:	b510      	push	{r4, lr}
 80067f4:	460c      	mov	r4, r1
 80067f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fa:	f000 f82d 	bl	8006858 <_lseek_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	bf15      	itete	ne
 8006804:	6560      	strne	r0, [r4, #84]	; 0x54
 8006806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800680a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800680e:	81a3      	strheq	r3, [r4, #12]
 8006810:	bf18      	it	ne
 8006812:	81a3      	strhne	r3, [r4, #12]
 8006814:	bd10      	pop	{r4, pc}

08006816 <__sclose>:
 8006816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681a:	f000 b80d 	b.w	8006838 <_close_r>

0800681e <memset>:
 800681e:	4402      	add	r2, r0
 8006820:	4603      	mov	r3, r0
 8006822:	4293      	cmp	r3, r2
 8006824:	d100      	bne.n	8006828 <memset+0xa>
 8006826:	4770      	bx	lr
 8006828:	f803 1b01 	strb.w	r1, [r3], #1
 800682c:	e7f9      	b.n	8006822 <memset+0x4>
	...

08006830 <_localeconv_r>:
 8006830:	4800      	ldr	r0, [pc, #0]	; (8006834 <_localeconv_r+0x4>)
 8006832:	4770      	bx	lr
 8006834:	20000158 	.word	0x20000158

08006838 <_close_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d06      	ldr	r5, [pc, #24]	; (8006854 <_close_r+0x1c>)
 800683c:	2300      	movs	r3, #0
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	f7fa fda7 	bl	8001396 <_close>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_close_r+0x1a>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_close_r+0x1a>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	2000046c 	.word	0x2000046c

08006858 <_lseek_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4d07      	ldr	r5, [pc, #28]	; (8006878 <_lseek_r+0x20>)
 800685c:	4604      	mov	r4, r0
 800685e:	4608      	mov	r0, r1
 8006860:	4611      	mov	r1, r2
 8006862:	2200      	movs	r2, #0
 8006864:	602a      	str	r2, [r5, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f7fa fdbc 	bl	80013e4 <_lseek>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_lseek_r+0x1e>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_lseek_r+0x1e>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	2000046c 	.word	0x2000046c

0800687c <_read_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4d07      	ldr	r5, [pc, #28]	; (800689c <_read_r+0x20>)
 8006880:	4604      	mov	r4, r0
 8006882:	4608      	mov	r0, r1
 8006884:	4611      	mov	r1, r2
 8006886:	2200      	movs	r2, #0
 8006888:	602a      	str	r2, [r5, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	f7fa fd4a 	bl	8001324 <_read>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_read_r+0x1e>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b103      	cbz	r3, 800689a <_read_r+0x1e>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	2000046c 	.word	0x2000046c

080068a0 <_write_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d07      	ldr	r5, [pc, #28]	; (80068c0 <_write_r+0x20>)
 80068a4:	4604      	mov	r4, r0
 80068a6:	4608      	mov	r0, r1
 80068a8:	4611      	mov	r1, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	602a      	str	r2, [r5, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f7fa fd55 	bl	800135e <_write>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_write_r+0x1e>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_write_r+0x1e>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	2000046c 	.word	0x2000046c

080068c4 <__errno>:
 80068c4:	4b01      	ldr	r3, [pc, #4]	; (80068cc <__errno+0x8>)
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20000064 	.word	0x20000064

080068d0 <__libc_init_array>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	4d0d      	ldr	r5, [pc, #52]	; (8006908 <__libc_init_array+0x38>)
 80068d4:	4c0d      	ldr	r4, [pc, #52]	; (800690c <__libc_init_array+0x3c>)
 80068d6:	1b64      	subs	r4, r4, r5
 80068d8:	10a4      	asrs	r4, r4, #2
 80068da:	2600      	movs	r6, #0
 80068dc:	42a6      	cmp	r6, r4
 80068de:	d109      	bne.n	80068f4 <__libc_init_array+0x24>
 80068e0:	4d0b      	ldr	r5, [pc, #44]	; (8006910 <__libc_init_array+0x40>)
 80068e2:	4c0c      	ldr	r4, [pc, #48]	; (8006914 <__libc_init_array+0x44>)
 80068e4:	f001 feec 	bl	80086c0 <_init>
 80068e8:	1b64      	subs	r4, r4, r5
 80068ea:	10a4      	asrs	r4, r4, #2
 80068ec:	2600      	movs	r6, #0
 80068ee:	42a6      	cmp	r6, r4
 80068f0:	d105      	bne.n	80068fe <__libc_init_array+0x2e>
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f8:	4798      	blx	r3
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7ee      	b.n	80068dc <__libc_init_array+0xc>
 80068fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006902:	4798      	blx	r3
 8006904:	3601      	adds	r6, #1
 8006906:	e7f2      	b.n	80068ee <__libc_init_array+0x1e>
 8006908:	08008a84 	.word	0x08008a84
 800690c:	08008a84 	.word	0x08008a84
 8006910:	08008a84 	.word	0x08008a84
 8006914:	08008a88 	.word	0x08008a88

08006918 <__retarget_lock_init_recursive>:
 8006918:	4770      	bx	lr

0800691a <__retarget_lock_acquire_recursive>:
 800691a:	4770      	bx	lr

0800691c <__retarget_lock_release_recursive>:
 800691c:	4770      	bx	lr

0800691e <quorem>:
 800691e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006922:	6903      	ldr	r3, [r0, #16]
 8006924:	690c      	ldr	r4, [r1, #16]
 8006926:	42a3      	cmp	r3, r4
 8006928:	4607      	mov	r7, r0
 800692a:	db7e      	blt.n	8006a2a <quorem+0x10c>
 800692c:	3c01      	subs	r4, #1
 800692e:	f101 0814 	add.w	r8, r1, #20
 8006932:	f100 0514 	add.w	r5, r0, #20
 8006936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006944:	3301      	adds	r3, #1
 8006946:	429a      	cmp	r2, r3
 8006948:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800694c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006950:	fbb2 f6f3 	udiv	r6, r2, r3
 8006954:	d331      	bcc.n	80069ba <quorem+0x9c>
 8006956:	f04f 0e00 	mov.w	lr, #0
 800695a:	4640      	mov	r0, r8
 800695c:	46ac      	mov	ip, r5
 800695e:	46f2      	mov	sl, lr
 8006960:	f850 2b04 	ldr.w	r2, [r0], #4
 8006964:	b293      	uxth	r3, r2
 8006966:	fb06 e303 	mla	r3, r6, r3, lr
 800696a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800696e:	0c1a      	lsrs	r2, r3, #16
 8006970:	b29b      	uxth	r3, r3
 8006972:	ebaa 0303 	sub.w	r3, sl, r3
 8006976:	f8dc a000 	ldr.w	sl, [ip]
 800697a:	fa13 f38a 	uxtah	r3, r3, sl
 800697e:	fb06 220e 	mla	r2, r6, lr, r2
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	9b00      	ldr	r3, [sp, #0]
 8006986:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800698a:	b292      	uxth	r2, r2
 800698c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006994:	f8bd 3000 	ldrh.w	r3, [sp]
 8006998:	4581      	cmp	r9, r0
 800699a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800699e:	f84c 3b04 	str.w	r3, [ip], #4
 80069a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069a6:	d2db      	bcs.n	8006960 <quorem+0x42>
 80069a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80069ac:	b92b      	cbnz	r3, 80069ba <quorem+0x9c>
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	429d      	cmp	r5, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	d32c      	bcc.n	8006a12 <quorem+0xf4>
 80069b8:	613c      	str	r4, [r7, #16]
 80069ba:	4638      	mov	r0, r7
 80069bc:	f001 f9a6 	bl	8007d0c <__mcmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	db22      	blt.n	8006a0a <quorem+0xec>
 80069c4:	3601      	adds	r6, #1
 80069c6:	4629      	mov	r1, r5
 80069c8:	2000      	movs	r0, #0
 80069ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80069ce:	f8d1 c000 	ldr.w	ip, [r1]
 80069d2:	b293      	uxth	r3, r2
 80069d4:	1ac3      	subs	r3, r0, r3
 80069d6:	0c12      	lsrs	r2, r2, #16
 80069d8:	fa13 f38c 	uxtah	r3, r3, ip
 80069dc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ea:	45c1      	cmp	r9, r8
 80069ec:	f841 3b04 	str.w	r3, [r1], #4
 80069f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069f4:	d2e9      	bcs.n	80069ca <quorem+0xac>
 80069f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069fe:	b922      	cbnz	r2, 8006a0a <quorem+0xec>
 8006a00:	3b04      	subs	r3, #4
 8006a02:	429d      	cmp	r5, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	d30a      	bcc.n	8006a1e <quorem+0x100>
 8006a08:	613c      	str	r4, [r7, #16]
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	b003      	add	sp, #12
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	3b04      	subs	r3, #4
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d1ce      	bne.n	80069b8 <quorem+0x9a>
 8006a1a:	3c01      	subs	r4, #1
 8006a1c:	e7c9      	b.n	80069b2 <quorem+0x94>
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	3b04      	subs	r3, #4
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	d1f0      	bne.n	8006a08 <quorem+0xea>
 8006a26:	3c01      	subs	r4, #1
 8006a28:	e7eb      	b.n	8006a02 <quorem+0xe4>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e7ee      	b.n	8006a0c <quorem+0xee>
	...

08006a30 <_dtoa_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	ed2d 8b04 	vpush	{d8-d9}
 8006a38:	69c5      	ldr	r5, [r0, #28]
 8006a3a:	b093      	sub	sp, #76	; 0x4c
 8006a3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a40:	ec57 6b10 	vmov	r6, r7, d0
 8006a44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a48:	9107      	str	r1, [sp, #28]
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006a50:	b975      	cbnz	r5, 8006a70 <_dtoa_r+0x40>
 8006a52:	2010      	movs	r0, #16
 8006a54:	f000 fe2a 	bl	80076ac <malloc>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	61e0      	str	r0, [r4, #28]
 8006a5c:	b920      	cbnz	r0, 8006a68 <_dtoa_r+0x38>
 8006a5e:	4bae      	ldr	r3, [pc, #696]	; (8006d18 <_dtoa_r+0x2e8>)
 8006a60:	21ef      	movs	r1, #239	; 0xef
 8006a62:	48ae      	ldr	r0, [pc, #696]	; (8006d1c <_dtoa_r+0x2ec>)
 8006a64:	f001 fb1e 	bl	80080a4 <__assert_func>
 8006a68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a6c:	6005      	str	r5, [r0, #0]
 8006a6e:	60c5      	str	r5, [r0, #12]
 8006a70:	69e3      	ldr	r3, [r4, #28]
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	b151      	cbz	r1, 8006a8c <_dtoa_r+0x5c>
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	604a      	str	r2, [r1, #4]
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4093      	lsls	r3, r2
 8006a7e:	608b      	str	r3, [r1, #8]
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 ff07 	bl	8007894 <_Bfree>
 8006a86:	69e3      	ldr	r3, [r4, #28]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	1e3b      	subs	r3, r7, #0
 8006a8e:	bfbb      	ittet	lt
 8006a90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a94:	9303      	strlt	r3, [sp, #12]
 8006a96:	2300      	movge	r3, #0
 8006a98:	2201      	movlt	r2, #1
 8006a9a:	bfac      	ite	ge
 8006a9c:	f8c8 3000 	strge.w	r3, [r8]
 8006aa0:	f8c8 2000 	strlt.w	r2, [r8]
 8006aa4:	4b9e      	ldr	r3, [pc, #632]	; (8006d20 <_dtoa_r+0x2f0>)
 8006aa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006aaa:	ea33 0308 	bics.w	r3, r3, r8
 8006aae:	d11b      	bne.n	8006ae8 <_dtoa_r+0xb8>
 8006ab0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ab2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006abc:	4333      	orrs	r3, r6
 8006abe:	f000 8593 	beq.w	80075e8 <_dtoa_r+0xbb8>
 8006ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ac4:	b963      	cbnz	r3, 8006ae0 <_dtoa_r+0xb0>
 8006ac6:	4b97      	ldr	r3, [pc, #604]	; (8006d24 <_dtoa_r+0x2f4>)
 8006ac8:	e027      	b.n	8006b1a <_dtoa_r+0xea>
 8006aca:	4b97      	ldr	r3, [pc, #604]	; (8006d28 <_dtoa_r+0x2f8>)
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	3308      	adds	r3, #8
 8006ad0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	9800      	ldr	r0, [sp, #0]
 8006ad6:	b013      	add	sp, #76	; 0x4c
 8006ad8:	ecbd 8b04 	vpop	{d8-d9}
 8006adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae0:	4b90      	ldr	r3, [pc, #576]	; (8006d24 <_dtoa_r+0x2f4>)
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	3303      	adds	r3, #3
 8006ae6:	e7f3      	b.n	8006ad0 <_dtoa_r+0xa0>
 8006ae8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006aec:	2200      	movs	r2, #0
 8006aee:	ec51 0b17 	vmov	r0, r1, d7
 8006af2:	eeb0 8a47 	vmov.f32	s16, s14
 8006af6:	eef0 8a67 	vmov.f32	s17, s15
 8006afa:	2300      	movs	r3, #0
 8006afc:	f7f9 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b00:	4681      	mov	r9, r0
 8006b02:	b160      	cbz	r0, 8006b1e <_dtoa_r+0xee>
 8006b04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b06:	2301      	movs	r3, #1
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8568 	beq.w	80075e2 <_dtoa_r+0xbb2>
 8006b12:	4b86      	ldr	r3, [pc, #536]	; (8006d2c <_dtoa_r+0x2fc>)
 8006b14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	e7da      	b.n	8006ad4 <_dtoa_r+0xa4>
 8006b1e:	aa10      	add	r2, sp, #64	; 0x40
 8006b20:	a911      	add	r1, sp, #68	; 0x44
 8006b22:	4620      	mov	r0, r4
 8006b24:	eeb0 0a48 	vmov.f32	s0, s16
 8006b28:	eef0 0a68 	vmov.f32	s1, s17
 8006b2c:	f001 f994 	bl	8007e58 <__d2b>
 8006b30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b34:	4682      	mov	sl, r0
 8006b36:	2d00      	cmp	r5, #0
 8006b38:	d07f      	beq.n	8006c3a <_dtoa_r+0x20a>
 8006b3a:	ee18 3a90 	vmov	r3, s17
 8006b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b46:	ec51 0b18 	vmov	r0, r1, d8
 8006b4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b56:	4619      	mov	r1, r3
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4b75      	ldr	r3, [pc, #468]	; (8006d30 <_dtoa_r+0x300>)
 8006b5c:	f7f9 fb94 	bl	8000288 <__aeabi_dsub>
 8006b60:	a367      	add	r3, pc, #412	; (adr r3, 8006d00 <_dtoa_r+0x2d0>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f7f9 fd47 	bl	80005f8 <__aeabi_dmul>
 8006b6a:	a367      	add	r3, pc, #412	; (adr r3, 8006d08 <_dtoa_r+0x2d8>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f7f9 fb8c 	bl	800028c <__adddf3>
 8006b74:	4606      	mov	r6, r0
 8006b76:	4628      	mov	r0, r5
 8006b78:	460f      	mov	r7, r1
 8006b7a:	f7f9 fcd3 	bl	8000524 <__aeabi_i2d>
 8006b7e:	a364      	add	r3, pc, #400	; (adr r3, 8006d10 <_dtoa_r+0x2e0>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fd38 	bl	80005f8 <__aeabi_dmul>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	4639      	mov	r1, r7
 8006b90:	f7f9 fb7c 	bl	800028c <__adddf3>
 8006b94:	4606      	mov	r6, r0
 8006b96:	460f      	mov	r7, r1
 8006b98:	f7f9 ffde 	bl	8000b58 <__aeabi_d2iz>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4683      	mov	fp, r0
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	f7f9 ff99 	bl	8000adc <__aeabi_dcmplt>
 8006baa:	b148      	cbz	r0, 8006bc0 <_dtoa_r+0x190>
 8006bac:	4658      	mov	r0, fp
 8006bae:	f7f9 fcb9 	bl	8000524 <__aeabi_i2d>
 8006bb2:	4632      	mov	r2, r6
 8006bb4:	463b      	mov	r3, r7
 8006bb6:	f7f9 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bba:	b908      	cbnz	r0, 8006bc0 <_dtoa_r+0x190>
 8006bbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bc0:	f1bb 0f16 	cmp.w	fp, #22
 8006bc4:	d857      	bhi.n	8006c76 <_dtoa_r+0x246>
 8006bc6:	4b5b      	ldr	r3, [pc, #364]	; (8006d34 <_dtoa_r+0x304>)
 8006bc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	ec51 0b18 	vmov	r0, r1, d8
 8006bd4:	f7f9 ff82 	bl	8000adc <__aeabi_dcmplt>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d04e      	beq.n	8006c7a <_dtoa_r+0x24a>
 8006bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006be0:	2300      	movs	r3, #0
 8006be2:	930c      	str	r3, [sp, #48]	; 0x30
 8006be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006be6:	1b5b      	subs	r3, r3, r5
 8006be8:	1e5a      	subs	r2, r3, #1
 8006bea:	bf45      	ittet	mi
 8006bec:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bf0:	9305      	strmi	r3, [sp, #20]
 8006bf2:	2300      	movpl	r3, #0
 8006bf4:	2300      	movmi	r3, #0
 8006bf6:	9206      	str	r2, [sp, #24]
 8006bf8:	bf54      	ite	pl
 8006bfa:	9305      	strpl	r3, [sp, #20]
 8006bfc:	9306      	strmi	r3, [sp, #24]
 8006bfe:	f1bb 0f00 	cmp.w	fp, #0
 8006c02:	db3c      	blt.n	8006c7e <_dtoa_r+0x24e>
 8006c04:	9b06      	ldr	r3, [sp, #24]
 8006c06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006c0a:	445b      	add	r3, fp
 8006c0c:	9306      	str	r3, [sp, #24]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9308      	str	r3, [sp, #32]
 8006c12:	9b07      	ldr	r3, [sp, #28]
 8006c14:	2b09      	cmp	r3, #9
 8006c16:	d868      	bhi.n	8006cea <_dtoa_r+0x2ba>
 8006c18:	2b05      	cmp	r3, #5
 8006c1a:	bfc4      	itt	gt
 8006c1c:	3b04      	subgt	r3, #4
 8006c1e:	9307      	strgt	r3, [sp, #28]
 8006c20:	9b07      	ldr	r3, [sp, #28]
 8006c22:	f1a3 0302 	sub.w	r3, r3, #2
 8006c26:	bfcc      	ite	gt
 8006c28:	2500      	movgt	r5, #0
 8006c2a:	2501      	movle	r5, #1
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	f200 8085 	bhi.w	8006d3c <_dtoa_r+0x30c>
 8006c32:	e8df f003 	tbb	[pc, r3]
 8006c36:	3b2e      	.short	0x3b2e
 8006c38:	5839      	.short	0x5839
 8006c3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c3e:	441d      	add	r5, r3
 8006c40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	bfc1      	itttt	gt
 8006c48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c54:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c58:	bfd6      	itet	le
 8006c5a:	f1c3 0320 	rsble	r3, r3, #32
 8006c5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c62:	fa06 f003 	lslle.w	r0, r6, r3
 8006c66:	f7f9 fc4d 	bl	8000504 <__aeabi_ui2d>
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c70:	3d01      	subs	r5, #1
 8006c72:	920e      	str	r2, [sp, #56]	; 0x38
 8006c74:	e76f      	b.n	8006b56 <_dtoa_r+0x126>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e7b3      	b.n	8006be2 <_dtoa_r+0x1b2>
 8006c7a:	900c      	str	r0, [sp, #48]	; 0x30
 8006c7c:	e7b2      	b.n	8006be4 <_dtoa_r+0x1b4>
 8006c7e:	9b05      	ldr	r3, [sp, #20]
 8006c80:	eba3 030b 	sub.w	r3, r3, fp
 8006c84:	9305      	str	r3, [sp, #20]
 8006c86:	f1cb 0300 	rsb	r3, fp, #0
 8006c8a:	9308      	str	r3, [sp, #32]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c90:	e7bf      	b.n	8006c12 <_dtoa_r+0x1e2>
 8006c92:	2300      	movs	r3, #0
 8006c94:	9309      	str	r3, [sp, #36]	; 0x24
 8006c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	dc52      	bgt.n	8006d42 <_dtoa_r+0x312>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	920a      	str	r2, [sp, #40]	; 0x28
 8006ca6:	e00b      	b.n	8006cc0 <_dtoa_r+0x290>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e7f3      	b.n	8006c94 <_dtoa_r+0x264>
 8006cac:	2300      	movs	r3, #0
 8006cae:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb2:	445b      	add	r3, fp
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	bfb8      	it	lt
 8006cbe:	2301      	movlt	r3, #1
 8006cc0:	69e0      	ldr	r0, [r4, #28]
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	f102 0614 	add.w	r6, r2, #20
 8006cca:	429e      	cmp	r6, r3
 8006ccc:	d93d      	bls.n	8006d4a <_dtoa_r+0x31a>
 8006cce:	6041      	str	r1, [r0, #4]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 fd9f 	bl	8007814 <_Balloc>
 8006cd6:	9000      	str	r0, [sp, #0]
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d139      	bne.n	8006d50 <_dtoa_r+0x320>
 8006cdc:	4b16      	ldr	r3, [pc, #88]	; (8006d38 <_dtoa_r+0x308>)
 8006cde:	4602      	mov	r2, r0
 8006ce0:	f240 11af 	movw	r1, #431	; 0x1af
 8006ce4:	e6bd      	b.n	8006a62 <_dtoa_r+0x32>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e7e1      	b.n	8006cae <_dtoa_r+0x27e>
 8006cea:	2501      	movs	r5, #1
 8006cec:	2300      	movs	r3, #0
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	9509      	str	r5, [sp, #36]	; 0x24
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2312      	movs	r3, #18
 8006cfe:	e7d1      	b.n	8006ca4 <_dtoa_r+0x274>
 8006d00:	636f4361 	.word	0x636f4361
 8006d04:	3fd287a7 	.word	0x3fd287a7
 8006d08:	8b60c8b3 	.word	0x8b60c8b3
 8006d0c:	3fc68a28 	.word	0x3fc68a28
 8006d10:	509f79fb 	.word	0x509f79fb
 8006d14:	3fd34413 	.word	0x3fd34413
 8006d18:	08008751 	.word	0x08008751
 8006d1c:	08008768 	.word	0x08008768
 8006d20:	7ff00000 	.word	0x7ff00000
 8006d24:	0800874d 	.word	0x0800874d
 8006d28:	08008744 	.word	0x08008744
 8006d2c:	08008721 	.word	0x08008721
 8006d30:	3ff80000 	.word	0x3ff80000
 8006d34:	08008858 	.word	0x08008858
 8006d38:	080087c0 	.word	0x080087c0
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d40:	e7d7      	b.n	8006cf2 <_dtoa_r+0x2c2>
 8006d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	e7ba      	b.n	8006cc0 <_dtoa_r+0x290>
 8006d4a:	3101      	adds	r1, #1
 8006d4c:	0052      	lsls	r2, r2, #1
 8006d4e:	e7ba      	b.n	8006cc6 <_dtoa_r+0x296>
 8006d50:	69e3      	ldr	r3, [r4, #28]
 8006d52:	9a00      	ldr	r2, [sp, #0]
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	9b04      	ldr	r3, [sp, #16]
 8006d58:	2b0e      	cmp	r3, #14
 8006d5a:	f200 80a8 	bhi.w	8006eae <_dtoa_r+0x47e>
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	f000 80a5 	beq.w	8006eae <_dtoa_r+0x47e>
 8006d64:	f1bb 0f00 	cmp.w	fp, #0
 8006d68:	dd38      	ble.n	8006ddc <_dtoa_r+0x3ac>
 8006d6a:	4bc0      	ldr	r3, [pc, #768]	; (800706c <_dtoa_r+0x63c>)
 8006d6c:	f00b 020f 	and.w	r2, fp, #15
 8006d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d78:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d80:	d019      	beq.n	8006db6 <_dtoa_r+0x386>
 8006d82:	4bbb      	ldr	r3, [pc, #748]	; (8007070 <_dtoa_r+0x640>)
 8006d84:	ec51 0b18 	vmov	r0, r1, d8
 8006d88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d8c:	f7f9 fd5e 	bl	800084c <__aeabi_ddiv>
 8006d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d94:	f008 080f 	and.w	r8, r8, #15
 8006d98:	2503      	movs	r5, #3
 8006d9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007070 <_dtoa_r+0x640>
 8006d9e:	f1b8 0f00 	cmp.w	r8, #0
 8006da2:	d10a      	bne.n	8006dba <_dtoa_r+0x38a>
 8006da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006da8:	4632      	mov	r2, r6
 8006daa:	463b      	mov	r3, r7
 8006dac:	f7f9 fd4e 	bl	800084c <__aeabi_ddiv>
 8006db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006db4:	e02b      	b.n	8006e0e <_dtoa_r+0x3de>
 8006db6:	2502      	movs	r5, #2
 8006db8:	e7ef      	b.n	8006d9a <_dtoa_r+0x36a>
 8006dba:	f018 0f01 	tst.w	r8, #1
 8006dbe:	d008      	beq.n	8006dd2 <_dtoa_r+0x3a2>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006dc8:	f7f9 fc16 	bl	80005f8 <__aeabi_dmul>
 8006dcc:	3501      	adds	r5, #1
 8006dce:	4606      	mov	r6, r0
 8006dd0:	460f      	mov	r7, r1
 8006dd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dd6:	f109 0908 	add.w	r9, r9, #8
 8006dda:	e7e0      	b.n	8006d9e <_dtoa_r+0x36e>
 8006ddc:	f000 809f 	beq.w	8006f1e <_dtoa_r+0x4ee>
 8006de0:	f1cb 0600 	rsb	r6, fp, #0
 8006de4:	4ba1      	ldr	r3, [pc, #644]	; (800706c <_dtoa_r+0x63c>)
 8006de6:	4fa2      	ldr	r7, [pc, #648]	; (8007070 <_dtoa_r+0x640>)
 8006de8:	f006 020f 	and.w	r2, r6, #15
 8006dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	ec51 0b18 	vmov	r0, r1, d8
 8006df8:	f7f9 fbfe 	bl	80005f8 <__aeabi_dmul>
 8006dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e00:	1136      	asrs	r6, r6, #4
 8006e02:	2300      	movs	r3, #0
 8006e04:	2502      	movs	r5, #2
 8006e06:	2e00      	cmp	r6, #0
 8006e08:	d17e      	bne.n	8006f08 <_dtoa_r+0x4d8>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1d0      	bne.n	8006db0 <_dtoa_r+0x380>
 8006e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8084 	beq.w	8006f22 <_dtoa_r+0x4f2>
 8006e1a:	4b96      	ldr	r3, [pc, #600]	; (8007074 <_dtoa_r+0x644>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4640      	mov	r0, r8
 8006e20:	4649      	mov	r1, r9
 8006e22:	f7f9 fe5b 	bl	8000adc <__aeabi_dcmplt>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d07b      	beq.n	8006f22 <_dtoa_r+0x4f2>
 8006e2a:	9b04      	ldr	r3, [sp, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d078      	beq.n	8006f22 <_dtoa_r+0x4f2>
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dd39      	ble.n	8006eaa <_dtoa_r+0x47a>
 8006e36:	4b90      	ldr	r3, [pc, #576]	; (8007078 <_dtoa_r+0x648>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fbdb 	bl	80005f8 <__aeabi_dmul>
 8006e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e46:	9e01      	ldr	r6, [sp, #4]
 8006e48:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e52:	4628      	mov	r0, r5
 8006e54:	f7f9 fb66 	bl	8000524 <__aeabi_i2d>
 8006e58:	4642      	mov	r2, r8
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	f7f9 fbcc 	bl	80005f8 <__aeabi_dmul>
 8006e60:	4b86      	ldr	r3, [pc, #536]	; (800707c <_dtoa_r+0x64c>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	f7f9 fa12 	bl	800028c <__adddf3>
 8006e68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e70:	9303      	str	r3, [sp, #12]
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	d158      	bne.n	8006f28 <_dtoa_r+0x4f8>
 8006e76:	4b82      	ldr	r3, [pc, #520]	; (8007080 <_dtoa_r+0x650>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	f7f9 fa03 	bl	8000288 <__aeabi_dsub>
 8006e82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e86:	4680      	mov	r8, r0
 8006e88:	4689      	mov	r9, r1
 8006e8a:	f7f9 fe45 	bl	8000b18 <__aeabi_dcmpgt>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	f040 8296 	bne.w	80073c0 <_dtoa_r+0x990>
 8006e94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e98:	4640      	mov	r0, r8
 8006e9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	f7f9 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f040 8289 	bne.w	80073bc <_dtoa_r+0x98c>
 8006eaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006eae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f2c0 814e 	blt.w	8007152 <_dtoa_r+0x722>
 8006eb6:	f1bb 0f0e 	cmp.w	fp, #14
 8006eba:	f300 814a 	bgt.w	8007152 <_dtoa_r+0x722>
 8006ebe:	4b6b      	ldr	r3, [pc, #428]	; (800706c <_dtoa_r+0x63c>)
 8006ec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f280 80dc 	bge.w	8007088 <_dtoa_r+0x658>
 8006ed0:	9b04      	ldr	r3, [sp, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f300 80d8 	bgt.w	8007088 <_dtoa_r+0x658>
 8006ed8:	f040 826f 	bne.w	80073ba <_dtoa_r+0x98a>
 8006edc:	4b68      	ldr	r3, [pc, #416]	; (8007080 <_dtoa_r+0x650>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	f7f9 fb88 	bl	80005f8 <__aeabi_dmul>
 8006ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eec:	f7f9 fe0a 	bl	8000b04 <__aeabi_dcmpge>
 8006ef0:	9e04      	ldr	r6, [sp, #16]
 8006ef2:	4637      	mov	r7, r6
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f040 8245 	bne.w	8007384 <_dtoa_r+0x954>
 8006efa:	9d00      	ldr	r5, [sp, #0]
 8006efc:	2331      	movs	r3, #49	; 0x31
 8006efe:	f805 3b01 	strb.w	r3, [r5], #1
 8006f02:	f10b 0b01 	add.w	fp, fp, #1
 8006f06:	e241      	b.n	800738c <_dtoa_r+0x95c>
 8006f08:	07f2      	lsls	r2, r6, #31
 8006f0a:	d505      	bpl.n	8006f18 <_dtoa_r+0x4e8>
 8006f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	3501      	adds	r5, #1
 8006f16:	2301      	movs	r3, #1
 8006f18:	1076      	asrs	r6, r6, #1
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	e773      	b.n	8006e06 <_dtoa_r+0x3d6>
 8006f1e:	2502      	movs	r5, #2
 8006f20:	e775      	b.n	8006e0e <_dtoa_r+0x3de>
 8006f22:	9e04      	ldr	r6, [sp, #16]
 8006f24:	465f      	mov	r7, fp
 8006f26:	e792      	b.n	8006e4e <_dtoa_r+0x41e>
 8006f28:	9900      	ldr	r1, [sp, #0]
 8006f2a:	4b50      	ldr	r3, [pc, #320]	; (800706c <_dtoa_r+0x63c>)
 8006f2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f30:	4431      	add	r1, r6
 8006f32:	9102      	str	r1, [sp, #8]
 8006f34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f36:	eeb0 9a47 	vmov.f32	s18, s14
 8006f3a:	eef0 9a67 	vmov.f32	s19, s15
 8006f3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f46:	2900      	cmp	r1, #0
 8006f48:	d044      	beq.n	8006fd4 <_dtoa_r+0x5a4>
 8006f4a:	494e      	ldr	r1, [pc, #312]	; (8007084 <_dtoa_r+0x654>)
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	f7f9 fc7d 	bl	800084c <__aeabi_ddiv>
 8006f52:	ec53 2b19 	vmov	r2, r3, d9
 8006f56:	f7f9 f997 	bl	8000288 <__aeabi_dsub>
 8006f5a:	9d00      	ldr	r5, [sp, #0]
 8006f5c:	ec41 0b19 	vmov	d9, r0, r1
 8006f60:	4649      	mov	r1, r9
 8006f62:	4640      	mov	r0, r8
 8006f64:	f7f9 fdf8 	bl	8000b58 <__aeabi_d2iz>
 8006f68:	4606      	mov	r6, r0
 8006f6a:	f7f9 fadb 	bl	8000524 <__aeabi_i2d>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 f987 	bl	8000288 <__aeabi_dsub>
 8006f7a:	3630      	adds	r6, #48	; 0x30
 8006f7c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f80:	ec53 2b19 	vmov	r2, r3, d9
 8006f84:	4680      	mov	r8, r0
 8006f86:	4689      	mov	r9, r1
 8006f88:	f7f9 fda8 	bl	8000adc <__aeabi_dcmplt>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d164      	bne.n	800705a <_dtoa_r+0x62a>
 8006f90:	4642      	mov	r2, r8
 8006f92:	464b      	mov	r3, r9
 8006f94:	4937      	ldr	r1, [pc, #220]	; (8007074 <_dtoa_r+0x644>)
 8006f96:	2000      	movs	r0, #0
 8006f98:	f7f9 f976 	bl	8000288 <__aeabi_dsub>
 8006f9c:	ec53 2b19 	vmov	r2, r3, d9
 8006fa0:	f7f9 fd9c 	bl	8000adc <__aeabi_dcmplt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f040 80b6 	bne.w	8007116 <_dtoa_r+0x6e6>
 8006faa:	9b02      	ldr	r3, [sp, #8]
 8006fac:	429d      	cmp	r5, r3
 8006fae:	f43f af7c 	beq.w	8006eaa <_dtoa_r+0x47a>
 8006fb2:	4b31      	ldr	r3, [pc, #196]	; (8007078 <_dtoa_r+0x648>)
 8006fb4:	ec51 0b19 	vmov	r0, r1, d9
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f7f9 fb1d 	bl	80005f8 <__aeabi_dmul>
 8006fbe:	4b2e      	ldr	r3, [pc, #184]	; (8007078 <_dtoa_r+0x648>)
 8006fc0:	ec41 0b19 	vmov	d9, r0, r1
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	4649      	mov	r1, r9
 8006fca:	f7f9 fb15 	bl	80005f8 <__aeabi_dmul>
 8006fce:	4680      	mov	r8, r0
 8006fd0:	4689      	mov	r9, r1
 8006fd2:	e7c5      	b.n	8006f60 <_dtoa_r+0x530>
 8006fd4:	ec51 0b17 	vmov	r0, r1, d7
 8006fd8:	f7f9 fb0e 	bl	80005f8 <__aeabi_dmul>
 8006fdc:	9b02      	ldr	r3, [sp, #8]
 8006fde:	9d00      	ldr	r5, [sp, #0]
 8006fe0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe2:	ec41 0b19 	vmov	d9, r0, r1
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4640      	mov	r0, r8
 8006fea:	f7f9 fdb5 	bl	8000b58 <__aeabi_d2iz>
 8006fee:	4606      	mov	r6, r0
 8006ff0:	f7f9 fa98 	bl	8000524 <__aeabi_i2d>
 8006ff4:	3630      	adds	r6, #48	; 0x30
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	f7f9 f943 	bl	8000288 <__aeabi_dsub>
 8007002:	f805 6b01 	strb.w	r6, [r5], #1
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	429d      	cmp	r5, r3
 800700a:	4680      	mov	r8, r0
 800700c:	4689      	mov	r9, r1
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	d124      	bne.n	800705e <_dtoa_r+0x62e>
 8007014:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <_dtoa_r+0x654>)
 8007016:	ec51 0b19 	vmov	r0, r1, d9
 800701a:	f7f9 f937 	bl	800028c <__adddf3>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4640      	mov	r0, r8
 8007024:	4649      	mov	r1, r9
 8007026:	f7f9 fd77 	bl	8000b18 <__aeabi_dcmpgt>
 800702a:	2800      	cmp	r0, #0
 800702c:	d173      	bne.n	8007116 <_dtoa_r+0x6e6>
 800702e:	ec53 2b19 	vmov	r2, r3, d9
 8007032:	4914      	ldr	r1, [pc, #80]	; (8007084 <_dtoa_r+0x654>)
 8007034:	2000      	movs	r0, #0
 8007036:	f7f9 f927 	bl	8000288 <__aeabi_dsub>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4640      	mov	r0, r8
 8007040:	4649      	mov	r1, r9
 8007042:	f7f9 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f af2f 	beq.w	8006eaa <_dtoa_r+0x47a>
 800704c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800704e:	1e6b      	subs	r3, r5, #1
 8007050:	930f      	str	r3, [sp, #60]	; 0x3c
 8007052:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007056:	2b30      	cmp	r3, #48	; 0x30
 8007058:	d0f8      	beq.n	800704c <_dtoa_r+0x61c>
 800705a:	46bb      	mov	fp, r7
 800705c:	e04a      	b.n	80070f4 <_dtoa_r+0x6c4>
 800705e:	4b06      	ldr	r3, [pc, #24]	; (8007078 <_dtoa_r+0x648>)
 8007060:	f7f9 faca 	bl	80005f8 <__aeabi_dmul>
 8007064:	4680      	mov	r8, r0
 8007066:	4689      	mov	r9, r1
 8007068:	e7bd      	b.n	8006fe6 <_dtoa_r+0x5b6>
 800706a:	bf00      	nop
 800706c:	08008858 	.word	0x08008858
 8007070:	08008830 	.word	0x08008830
 8007074:	3ff00000 	.word	0x3ff00000
 8007078:	40240000 	.word	0x40240000
 800707c:	401c0000 	.word	0x401c0000
 8007080:	40140000 	.word	0x40140000
 8007084:	3fe00000 	.word	0x3fe00000
 8007088:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800708c:	9d00      	ldr	r5, [sp, #0]
 800708e:	4642      	mov	r2, r8
 8007090:	464b      	mov	r3, r9
 8007092:	4630      	mov	r0, r6
 8007094:	4639      	mov	r1, r7
 8007096:	f7f9 fbd9 	bl	800084c <__aeabi_ddiv>
 800709a:	f7f9 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800709e:	9001      	str	r0, [sp, #4]
 80070a0:	f7f9 fa40 	bl	8000524 <__aeabi_i2d>
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	f7f9 faa6 	bl	80005f8 <__aeabi_dmul>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4630      	mov	r0, r6
 80070b2:	4639      	mov	r1, r7
 80070b4:	f7f9 f8e8 	bl	8000288 <__aeabi_dsub>
 80070b8:	9e01      	ldr	r6, [sp, #4]
 80070ba:	9f04      	ldr	r7, [sp, #16]
 80070bc:	3630      	adds	r6, #48	; 0x30
 80070be:	f805 6b01 	strb.w	r6, [r5], #1
 80070c2:	9e00      	ldr	r6, [sp, #0]
 80070c4:	1bae      	subs	r6, r5, r6
 80070c6:	42b7      	cmp	r7, r6
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	d134      	bne.n	8007138 <_dtoa_r+0x708>
 80070ce:	f7f9 f8dd 	bl	800028c <__adddf3>
 80070d2:	4642      	mov	r2, r8
 80070d4:	464b      	mov	r3, r9
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
 80070da:	f7f9 fd1d 	bl	8000b18 <__aeabi_dcmpgt>
 80070de:	b9c8      	cbnz	r0, 8007114 <_dtoa_r+0x6e4>
 80070e0:	4642      	mov	r2, r8
 80070e2:	464b      	mov	r3, r9
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7f9 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ec:	b110      	cbz	r0, 80070f4 <_dtoa_r+0x6c4>
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	07db      	lsls	r3, r3, #31
 80070f2:	d40f      	bmi.n	8007114 <_dtoa_r+0x6e4>
 80070f4:	4651      	mov	r1, sl
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 fbcc 	bl	8007894 <_Bfree>
 80070fc:	2300      	movs	r3, #0
 80070fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007100:	702b      	strb	r3, [r5, #0]
 8007102:	f10b 0301 	add.w	r3, fp, #1
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800710a:	2b00      	cmp	r3, #0
 800710c:	f43f ace2 	beq.w	8006ad4 <_dtoa_r+0xa4>
 8007110:	601d      	str	r5, [r3, #0]
 8007112:	e4df      	b.n	8006ad4 <_dtoa_r+0xa4>
 8007114:	465f      	mov	r7, fp
 8007116:	462b      	mov	r3, r5
 8007118:	461d      	mov	r5, r3
 800711a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800711e:	2a39      	cmp	r2, #57	; 0x39
 8007120:	d106      	bne.n	8007130 <_dtoa_r+0x700>
 8007122:	9a00      	ldr	r2, [sp, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d1f7      	bne.n	8007118 <_dtoa_r+0x6e8>
 8007128:	9900      	ldr	r1, [sp, #0]
 800712a:	2230      	movs	r2, #48	; 0x30
 800712c:	3701      	adds	r7, #1
 800712e:	700a      	strb	r2, [r1, #0]
 8007130:	781a      	ldrb	r2, [r3, #0]
 8007132:	3201      	adds	r2, #1
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	e790      	b.n	800705a <_dtoa_r+0x62a>
 8007138:	4ba3      	ldr	r3, [pc, #652]	; (80073c8 <_dtoa_r+0x998>)
 800713a:	2200      	movs	r2, #0
 800713c:	f7f9 fa5c 	bl	80005f8 <__aeabi_dmul>
 8007140:	2200      	movs	r2, #0
 8007142:	2300      	movs	r3, #0
 8007144:	4606      	mov	r6, r0
 8007146:	460f      	mov	r7, r1
 8007148:	f7f9 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800714c:	2800      	cmp	r0, #0
 800714e:	d09e      	beq.n	800708e <_dtoa_r+0x65e>
 8007150:	e7d0      	b.n	80070f4 <_dtoa_r+0x6c4>
 8007152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007154:	2a00      	cmp	r2, #0
 8007156:	f000 80ca 	beq.w	80072ee <_dtoa_r+0x8be>
 800715a:	9a07      	ldr	r2, [sp, #28]
 800715c:	2a01      	cmp	r2, #1
 800715e:	f300 80ad 	bgt.w	80072bc <_dtoa_r+0x88c>
 8007162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007164:	2a00      	cmp	r2, #0
 8007166:	f000 80a5 	beq.w	80072b4 <_dtoa_r+0x884>
 800716a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800716e:	9e08      	ldr	r6, [sp, #32]
 8007170:	9d05      	ldr	r5, [sp, #20]
 8007172:	9a05      	ldr	r2, [sp, #20]
 8007174:	441a      	add	r2, r3
 8007176:	9205      	str	r2, [sp, #20]
 8007178:	9a06      	ldr	r2, [sp, #24]
 800717a:	2101      	movs	r1, #1
 800717c:	441a      	add	r2, r3
 800717e:	4620      	mov	r0, r4
 8007180:	9206      	str	r2, [sp, #24]
 8007182:	f000 fc3d 	bl	8007a00 <__i2b>
 8007186:	4607      	mov	r7, r0
 8007188:	b165      	cbz	r5, 80071a4 <_dtoa_r+0x774>
 800718a:	9b06      	ldr	r3, [sp, #24]
 800718c:	2b00      	cmp	r3, #0
 800718e:	dd09      	ble.n	80071a4 <_dtoa_r+0x774>
 8007190:	42ab      	cmp	r3, r5
 8007192:	9a05      	ldr	r2, [sp, #20]
 8007194:	bfa8      	it	ge
 8007196:	462b      	movge	r3, r5
 8007198:	1ad2      	subs	r2, r2, r3
 800719a:	9205      	str	r2, [sp, #20]
 800719c:	9a06      	ldr	r2, [sp, #24]
 800719e:	1aed      	subs	r5, r5, r3
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	9306      	str	r3, [sp, #24]
 80071a4:	9b08      	ldr	r3, [sp, #32]
 80071a6:	b1f3      	cbz	r3, 80071e6 <_dtoa_r+0x7b6>
 80071a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80a3 	beq.w	80072f6 <_dtoa_r+0x8c6>
 80071b0:	2e00      	cmp	r6, #0
 80071b2:	dd10      	ble.n	80071d6 <_dtoa_r+0x7a6>
 80071b4:	4639      	mov	r1, r7
 80071b6:	4632      	mov	r2, r6
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fce1 	bl	8007b80 <__pow5mult>
 80071be:	4652      	mov	r2, sl
 80071c0:	4601      	mov	r1, r0
 80071c2:	4607      	mov	r7, r0
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 fc31 	bl	8007a2c <__multiply>
 80071ca:	4651      	mov	r1, sl
 80071cc:	4680      	mov	r8, r0
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fb60 	bl	8007894 <_Bfree>
 80071d4:	46c2      	mov	sl, r8
 80071d6:	9b08      	ldr	r3, [sp, #32]
 80071d8:	1b9a      	subs	r2, r3, r6
 80071da:	d004      	beq.n	80071e6 <_dtoa_r+0x7b6>
 80071dc:	4651      	mov	r1, sl
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 fcce 	bl	8007b80 <__pow5mult>
 80071e4:	4682      	mov	sl, r0
 80071e6:	2101      	movs	r1, #1
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 fc09 	bl	8007a00 <__i2b>
 80071ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	4606      	mov	r6, r0
 80071f4:	f340 8081 	ble.w	80072fa <_dtoa_r+0x8ca>
 80071f8:	461a      	mov	r2, r3
 80071fa:	4601      	mov	r1, r0
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 fcbf 	bl	8007b80 <__pow5mult>
 8007202:	9b07      	ldr	r3, [sp, #28]
 8007204:	2b01      	cmp	r3, #1
 8007206:	4606      	mov	r6, r0
 8007208:	dd7a      	ble.n	8007300 <_dtoa_r+0x8d0>
 800720a:	f04f 0800 	mov.w	r8, #0
 800720e:	6933      	ldr	r3, [r6, #16]
 8007210:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007214:	6918      	ldr	r0, [r3, #16]
 8007216:	f000 fba5 	bl	8007964 <__hi0bits>
 800721a:	f1c0 0020 	rsb	r0, r0, #32
 800721e:	9b06      	ldr	r3, [sp, #24]
 8007220:	4418      	add	r0, r3
 8007222:	f010 001f 	ands.w	r0, r0, #31
 8007226:	f000 8094 	beq.w	8007352 <_dtoa_r+0x922>
 800722a:	f1c0 0320 	rsb	r3, r0, #32
 800722e:	2b04      	cmp	r3, #4
 8007230:	f340 8085 	ble.w	800733e <_dtoa_r+0x90e>
 8007234:	9b05      	ldr	r3, [sp, #20]
 8007236:	f1c0 001c 	rsb	r0, r0, #28
 800723a:	4403      	add	r3, r0
 800723c:	9305      	str	r3, [sp, #20]
 800723e:	9b06      	ldr	r3, [sp, #24]
 8007240:	4403      	add	r3, r0
 8007242:	4405      	add	r5, r0
 8007244:	9306      	str	r3, [sp, #24]
 8007246:	9b05      	ldr	r3, [sp, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	dd05      	ble.n	8007258 <_dtoa_r+0x828>
 800724c:	4651      	mov	r1, sl
 800724e:	461a      	mov	r2, r3
 8007250:	4620      	mov	r0, r4
 8007252:	f000 fcef 	bl	8007c34 <__lshift>
 8007256:	4682      	mov	sl, r0
 8007258:	9b06      	ldr	r3, [sp, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dd05      	ble.n	800726a <_dtoa_r+0x83a>
 800725e:	4631      	mov	r1, r6
 8007260:	461a      	mov	r2, r3
 8007262:	4620      	mov	r0, r4
 8007264:	f000 fce6 	bl	8007c34 <__lshift>
 8007268:	4606      	mov	r6, r0
 800726a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800726c:	2b00      	cmp	r3, #0
 800726e:	d072      	beq.n	8007356 <_dtoa_r+0x926>
 8007270:	4631      	mov	r1, r6
 8007272:	4650      	mov	r0, sl
 8007274:	f000 fd4a 	bl	8007d0c <__mcmp>
 8007278:	2800      	cmp	r0, #0
 800727a:	da6c      	bge.n	8007356 <_dtoa_r+0x926>
 800727c:	2300      	movs	r3, #0
 800727e:	4651      	mov	r1, sl
 8007280:	220a      	movs	r2, #10
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fb28 	bl	80078d8 <__multadd>
 8007288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800728e:	4682      	mov	sl, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 81b0 	beq.w	80075f6 <_dtoa_r+0xbc6>
 8007296:	2300      	movs	r3, #0
 8007298:	4639      	mov	r1, r7
 800729a:	220a      	movs	r2, #10
 800729c:	4620      	mov	r0, r4
 800729e:	f000 fb1b 	bl	80078d8 <__multadd>
 80072a2:	9b01      	ldr	r3, [sp, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	4607      	mov	r7, r0
 80072a8:	f300 8096 	bgt.w	80073d8 <_dtoa_r+0x9a8>
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	dc59      	bgt.n	8007366 <_dtoa_r+0x936>
 80072b2:	e091      	b.n	80073d8 <_dtoa_r+0x9a8>
 80072b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072ba:	e758      	b.n	800716e <_dtoa_r+0x73e>
 80072bc:	9b04      	ldr	r3, [sp, #16]
 80072be:	1e5e      	subs	r6, r3, #1
 80072c0:	9b08      	ldr	r3, [sp, #32]
 80072c2:	42b3      	cmp	r3, r6
 80072c4:	bfbf      	itttt	lt
 80072c6:	9b08      	ldrlt	r3, [sp, #32]
 80072c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80072ca:	9608      	strlt	r6, [sp, #32]
 80072cc:	1af3      	sublt	r3, r6, r3
 80072ce:	bfb4      	ite	lt
 80072d0:	18d2      	addlt	r2, r2, r3
 80072d2:	1b9e      	subge	r6, r3, r6
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	bfbc      	itt	lt
 80072d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072da:	2600      	movlt	r6, #0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bfb7      	itett	lt
 80072e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80072e8:	1a9d      	sublt	r5, r3, r2
 80072ea:	2300      	movlt	r3, #0
 80072ec:	e741      	b.n	8007172 <_dtoa_r+0x742>
 80072ee:	9e08      	ldr	r6, [sp, #32]
 80072f0:	9d05      	ldr	r5, [sp, #20]
 80072f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072f4:	e748      	b.n	8007188 <_dtoa_r+0x758>
 80072f6:	9a08      	ldr	r2, [sp, #32]
 80072f8:	e770      	b.n	80071dc <_dtoa_r+0x7ac>
 80072fa:	9b07      	ldr	r3, [sp, #28]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	dc19      	bgt.n	8007334 <_dtoa_r+0x904>
 8007300:	9b02      	ldr	r3, [sp, #8]
 8007302:	b9bb      	cbnz	r3, 8007334 <_dtoa_r+0x904>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800730a:	b99b      	cbnz	r3, 8007334 <_dtoa_r+0x904>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007312:	0d1b      	lsrs	r3, r3, #20
 8007314:	051b      	lsls	r3, r3, #20
 8007316:	b183      	cbz	r3, 800733a <_dtoa_r+0x90a>
 8007318:	9b05      	ldr	r3, [sp, #20]
 800731a:	3301      	adds	r3, #1
 800731c:	9305      	str	r3, [sp, #20]
 800731e:	9b06      	ldr	r3, [sp, #24]
 8007320:	3301      	adds	r3, #1
 8007322:	9306      	str	r3, [sp, #24]
 8007324:	f04f 0801 	mov.w	r8, #1
 8007328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800732a:	2b00      	cmp	r3, #0
 800732c:	f47f af6f 	bne.w	800720e <_dtoa_r+0x7de>
 8007330:	2001      	movs	r0, #1
 8007332:	e774      	b.n	800721e <_dtoa_r+0x7ee>
 8007334:	f04f 0800 	mov.w	r8, #0
 8007338:	e7f6      	b.n	8007328 <_dtoa_r+0x8f8>
 800733a:	4698      	mov	r8, r3
 800733c:	e7f4      	b.n	8007328 <_dtoa_r+0x8f8>
 800733e:	d082      	beq.n	8007246 <_dtoa_r+0x816>
 8007340:	9a05      	ldr	r2, [sp, #20]
 8007342:	331c      	adds	r3, #28
 8007344:	441a      	add	r2, r3
 8007346:	9205      	str	r2, [sp, #20]
 8007348:	9a06      	ldr	r2, [sp, #24]
 800734a:	441a      	add	r2, r3
 800734c:	441d      	add	r5, r3
 800734e:	9206      	str	r2, [sp, #24]
 8007350:	e779      	b.n	8007246 <_dtoa_r+0x816>
 8007352:	4603      	mov	r3, r0
 8007354:	e7f4      	b.n	8007340 <_dtoa_r+0x910>
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	dc37      	bgt.n	80073cc <_dtoa_r+0x99c>
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	2b02      	cmp	r3, #2
 8007360:	dd34      	ble.n	80073cc <_dtoa_r+0x99c>
 8007362:	9b04      	ldr	r3, [sp, #16]
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	b963      	cbnz	r3, 8007384 <_dtoa_r+0x954>
 800736a:	4631      	mov	r1, r6
 800736c:	2205      	movs	r2, #5
 800736e:	4620      	mov	r0, r4
 8007370:	f000 fab2 	bl	80078d8 <__multadd>
 8007374:	4601      	mov	r1, r0
 8007376:	4606      	mov	r6, r0
 8007378:	4650      	mov	r0, sl
 800737a:	f000 fcc7 	bl	8007d0c <__mcmp>
 800737e:	2800      	cmp	r0, #0
 8007380:	f73f adbb 	bgt.w	8006efa <_dtoa_r+0x4ca>
 8007384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007386:	9d00      	ldr	r5, [sp, #0]
 8007388:	ea6f 0b03 	mvn.w	fp, r3
 800738c:	f04f 0800 	mov.w	r8, #0
 8007390:	4631      	mov	r1, r6
 8007392:	4620      	mov	r0, r4
 8007394:	f000 fa7e 	bl	8007894 <_Bfree>
 8007398:	2f00      	cmp	r7, #0
 800739a:	f43f aeab 	beq.w	80070f4 <_dtoa_r+0x6c4>
 800739e:	f1b8 0f00 	cmp.w	r8, #0
 80073a2:	d005      	beq.n	80073b0 <_dtoa_r+0x980>
 80073a4:	45b8      	cmp	r8, r7
 80073a6:	d003      	beq.n	80073b0 <_dtoa_r+0x980>
 80073a8:	4641      	mov	r1, r8
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fa72 	bl	8007894 <_Bfree>
 80073b0:	4639      	mov	r1, r7
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fa6e 	bl	8007894 <_Bfree>
 80073b8:	e69c      	b.n	80070f4 <_dtoa_r+0x6c4>
 80073ba:	2600      	movs	r6, #0
 80073bc:	4637      	mov	r7, r6
 80073be:	e7e1      	b.n	8007384 <_dtoa_r+0x954>
 80073c0:	46bb      	mov	fp, r7
 80073c2:	4637      	mov	r7, r6
 80073c4:	e599      	b.n	8006efa <_dtoa_r+0x4ca>
 80073c6:	bf00      	nop
 80073c8:	40240000 	.word	0x40240000
 80073cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80c8 	beq.w	8007564 <_dtoa_r+0xb34>
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	2d00      	cmp	r5, #0
 80073da:	dd05      	ble.n	80073e8 <_dtoa_r+0x9b8>
 80073dc:	4639      	mov	r1, r7
 80073de:	462a      	mov	r2, r5
 80073e0:	4620      	mov	r0, r4
 80073e2:	f000 fc27 	bl	8007c34 <__lshift>
 80073e6:	4607      	mov	r7, r0
 80073e8:	f1b8 0f00 	cmp.w	r8, #0
 80073ec:	d05b      	beq.n	80074a6 <_dtoa_r+0xa76>
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 fa0f 	bl	8007814 <_Balloc>
 80073f6:	4605      	mov	r5, r0
 80073f8:	b928      	cbnz	r0, 8007406 <_dtoa_r+0x9d6>
 80073fa:	4b83      	ldr	r3, [pc, #524]	; (8007608 <_dtoa_r+0xbd8>)
 80073fc:	4602      	mov	r2, r0
 80073fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007402:	f7ff bb2e 	b.w	8006a62 <_dtoa_r+0x32>
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	3202      	adds	r2, #2
 800740a:	0092      	lsls	r2, r2, #2
 800740c:	f107 010c 	add.w	r1, r7, #12
 8007410:	300c      	adds	r0, #12
 8007412:	f000 fe39 	bl	8008088 <memcpy>
 8007416:	2201      	movs	r2, #1
 8007418:	4629      	mov	r1, r5
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fc0a 	bl	8007c34 <__lshift>
 8007420:	9b00      	ldr	r3, [sp, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	9304      	str	r3, [sp, #16]
 8007426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800742a:	4413      	add	r3, r2
 800742c:	9308      	str	r3, [sp, #32]
 800742e:	9b02      	ldr	r3, [sp, #8]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	46b8      	mov	r8, r7
 8007436:	9306      	str	r3, [sp, #24]
 8007438:	4607      	mov	r7, r0
 800743a:	9b04      	ldr	r3, [sp, #16]
 800743c:	4631      	mov	r1, r6
 800743e:	3b01      	subs	r3, #1
 8007440:	4650      	mov	r0, sl
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	f7ff fa6b 	bl	800691e <quorem>
 8007448:	4641      	mov	r1, r8
 800744a:	9002      	str	r0, [sp, #8]
 800744c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007450:	4650      	mov	r0, sl
 8007452:	f000 fc5b 	bl	8007d0c <__mcmp>
 8007456:	463a      	mov	r2, r7
 8007458:	9005      	str	r0, [sp, #20]
 800745a:	4631      	mov	r1, r6
 800745c:	4620      	mov	r0, r4
 800745e:	f000 fc71 	bl	8007d44 <__mdiff>
 8007462:	68c2      	ldr	r2, [r0, #12]
 8007464:	4605      	mov	r5, r0
 8007466:	bb02      	cbnz	r2, 80074aa <_dtoa_r+0xa7a>
 8007468:	4601      	mov	r1, r0
 800746a:	4650      	mov	r0, sl
 800746c:	f000 fc4e 	bl	8007d0c <__mcmp>
 8007470:	4602      	mov	r2, r0
 8007472:	4629      	mov	r1, r5
 8007474:	4620      	mov	r0, r4
 8007476:	9209      	str	r2, [sp, #36]	; 0x24
 8007478:	f000 fa0c 	bl	8007894 <_Bfree>
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007480:	9d04      	ldr	r5, [sp, #16]
 8007482:	ea43 0102 	orr.w	r1, r3, r2
 8007486:	9b06      	ldr	r3, [sp, #24]
 8007488:	4319      	orrs	r1, r3
 800748a:	d110      	bne.n	80074ae <_dtoa_r+0xa7e>
 800748c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007490:	d029      	beq.n	80074e6 <_dtoa_r+0xab6>
 8007492:	9b05      	ldr	r3, [sp, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	dd02      	ble.n	800749e <_dtoa_r+0xa6e>
 8007498:	9b02      	ldr	r3, [sp, #8]
 800749a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	f883 9000 	strb.w	r9, [r3]
 80074a4:	e774      	b.n	8007390 <_dtoa_r+0x960>
 80074a6:	4638      	mov	r0, r7
 80074a8:	e7ba      	b.n	8007420 <_dtoa_r+0x9f0>
 80074aa:	2201      	movs	r2, #1
 80074ac:	e7e1      	b.n	8007472 <_dtoa_r+0xa42>
 80074ae:	9b05      	ldr	r3, [sp, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	db04      	blt.n	80074be <_dtoa_r+0xa8e>
 80074b4:	9907      	ldr	r1, [sp, #28]
 80074b6:	430b      	orrs	r3, r1
 80074b8:	9906      	ldr	r1, [sp, #24]
 80074ba:	430b      	orrs	r3, r1
 80074bc:	d120      	bne.n	8007500 <_dtoa_r+0xad0>
 80074be:	2a00      	cmp	r2, #0
 80074c0:	dded      	ble.n	800749e <_dtoa_r+0xa6e>
 80074c2:	4651      	mov	r1, sl
 80074c4:	2201      	movs	r2, #1
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 fbb4 	bl	8007c34 <__lshift>
 80074cc:	4631      	mov	r1, r6
 80074ce:	4682      	mov	sl, r0
 80074d0:	f000 fc1c 	bl	8007d0c <__mcmp>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	dc03      	bgt.n	80074e0 <_dtoa_r+0xab0>
 80074d8:	d1e1      	bne.n	800749e <_dtoa_r+0xa6e>
 80074da:	f019 0f01 	tst.w	r9, #1
 80074de:	d0de      	beq.n	800749e <_dtoa_r+0xa6e>
 80074e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074e4:	d1d8      	bne.n	8007498 <_dtoa_r+0xa68>
 80074e6:	9a01      	ldr	r2, [sp, #4]
 80074e8:	2339      	movs	r3, #57	; 0x39
 80074ea:	7013      	strb	r3, [r2, #0]
 80074ec:	462b      	mov	r3, r5
 80074ee:	461d      	mov	r5, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074f6:	2a39      	cmp	r2, #57	; 0x39
 80074f8:	d06c      	beq.n	80075d4 <_dtoa_r+0xba4>
 80074fa:	3201      	adds	r2, #1
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	e747      	b.n	8007390 <_dtoa_r+0x960>
 8007500:	2a00      	cmp	r2, #0
 8007502:	dd07      	ble.n	8007514 <_dtoa_r+0xae4>
 8007504:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007508:	d0ed      	beq.n	80074e6 <_dtoa_r+0xab6>
 800750a:	9a01      	ldr	r2, [sp, #4]
 800750c:	f109 0301 	add.w	r3, r9, #1
 8007510:	7013      	strb	r3, [r2, #0]
 8007512:	e73d      	b.n	8007390 <_dtoa_r+0x960>
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	9a08      	ldr	r2, [sp, #32]
 8007518:	f803 9c01 	strb.w	r9, [r3, #-1]
 800751c:	4293      	cmp	r3, r2
 800751e:	d043      	beq.n	80075a8 <_dtoa_r+0xb78>
 8007520:	4651      	mov	r1, sl
 8007522:	2300      	movs	r3, #0
 8007524:	220a      	movs	r2, #10
 8007526:	4620      	mov	r0, r4
 8007528:	f000 f9d6 	bl	80078d8 <__multadd>
 800752c:	45b8      	cmp	r8, r7
 800752e:	4682      	mov	sl, r0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	f04f 020a 	mov.w	r2, #10
 8007538:	4641      	mov	r1, r8
 800753a:	4620      	mov	r0, r4
 800753c:	d107      	bne.n	800754e <_dtoa_r+0xb1e>
 800753e:	f000 f9cb 	bl	80078d8 <__multadd>
 8007542:	4680      	mov	r8, r0
 8007544:	4607      	mov	r7, r0
 8007546:	9b04      	ldr	r3, [sp, #16]
 8007548:	3301      	adds	r3, #1
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	e775      	b.n	800743a <_dtoa_r+0xa0a>
 800754e:	f000 f9c3 	bl	80078d8 <__multadd>
 8007552:	4639      	mov	r1, r7
 8007554:	4680      	mov	r8, r0
 8007556:	2300      	movs	r3, #0
 8007558:	220a      	movs	r2, #10
 800755a:	4620      	mov	r0, r4
 800755c:	f000 f9bc 	bl	80078d8 <__multadd>
 8007560:	4607      	mov	r7, r0
 8007562:	e7f0      	b.n	8007546 <_dtoa_r+0xb16>
 8007564:	9b04      	ldr	r3, [sp, #16]
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	9d00      	ldr	r5, [sp, #0]
 800756a:	4631      	mov	r1, r6
 800756c:	4650      	mov	r0, sl
 800756e:	f7ff f9d6 	bl	800691e <quorem>
 8007572:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	f805 9b01 	strb.w	r9, [r5], #1
 800757c:	1aea      	subs	r2, r5, r3
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	4293      	cmp	r3, r2
 8007582:	dd07      	ble.n	8007594 <_dtoa_r+0xb64>
 8007584:	4651      	mov	r1, sl
 8007586:	2300      	movs	r3, #0
 8007588:	220a      	movs	r2, #10
 800758a:	4620      	mov	r0, r4
 800758c:	f000 f9a4 	bl	80078d8 <__multadd>
 8007590:	4682      	mov	sl, r0
 8007592:	e7ea      	b.n	800756a <_dtoa_r+0xb3a>
 8007594:	9b01      	ldr	r3, [sp, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfc8      	it	gt
 800759a:	461d      	movgt	r5, r3
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	bfd8      	it	le
 80075a0:	2501      	movle	r5, #1
 80075a2:	441d      	add	r5, r3
 80075a4:	f04f 0800 	mov.w	r8, #0
 80075a8:	4651      	mov	r1, sl
 80075aa:	2201      	movs	r2, #1
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 fb41 	bl	8007c34 <__lshift>
 80075b2:	4631      	mov	r1, r6
 80075b4:	4682      	mov	sl, r0
 80075b6:	f000 fba9 	bl	8007d0c <__mcmp>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	dc96      	bgt.n	80074ec <_dtoa_r+0xabc>
 80075be:	d102      	bne.n	80075c6 <_dtoa_r+0xb96>
 80075c0:	f019 0f01 	tst.w	r9, #1
 80075c4:	d192      	bne.n	80074ec <_dtoa_r+0xabc>
 80075c6:	462b      	mov	r3, r5
 80075c8:	461d      	mov	r5, r3
 80075ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075ce:	2a30      	cmp	r2, #48	; 0x30
 80075d0:	d0fa      	beq.n	80075c8 <_dtoa_r+0xb98>
 80075d2:	e6dd      	b.n	8007390 <_dtoa_r+0x960>
 80075d4:	9a00      	ldr	r2, [sp, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d189      	bne.n	80074ee <_dtoa_r+0xabe>
 80075da:	f10b 0b01 	add.w	fp, fp, #1
 80075de:	2331      	movs	r3, #49	; 0x31
 80075e0:	e796      	b.n	8007510 <_dtoa_r+0xae0>
 80075e2:	4b0a      	ldr	r3, [pc, #40]	; (800760c <_dtoa_r+0xbdc>)
 80075e4:	f7ff ba99 	b.w	8006b1a <_dtoa_r+0xea>
 80075e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f47f aa6d 	bne.w	8006aca <_dtoa_r+0x9a>
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <_dtoa_r+0xbe0>)
 80075f2:	f7ff ba92 	b.w	8006b1a <_dtoa_r+0xea>
 80075f6:	9b01      	ldr	r3, [sp, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	dcb5      	bgt.n	8007568 <_dtoa_r+0xb38>
 80075fc:	9b07      	ldr	r3, [sp, #28]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	f73f aeb1 	bgt.w	8007366 <_dtoa_r+0x936>
 8007604:	e7b0      	b.n	8007568 <_dtoa_r+0xb38>
 8007606:	bf00      	nop
 8007608:	080087c0 	.word	0x080087c0
 800760c:	08008720 	.word	0x08008720
 8007610:	08008744 	.word	0x08008744

08007614 <_free_r>:
 8007614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007616:	2900      	cmp	r1, #0
 8007618:	d044      	beq.n	80076a4 <_free_r+0x90>
 800761a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800761e:	9001      	str	r0, [sp, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f1a1 0404 	sub.w	r4, r1, #4
 8007626:	bfb8      	it	lt
 8007628:	18e4      	addlt	r4, r4, r3
 800762a:	f000 f8e7 	bl	80077fc <__malloc_lock>
 800762e:	4a1e      	ldr	r2, [pc, #120]	; (80076a8 <_free_r+0x94>)
 8007630:	9801      	ldr	r0, [sp, #4]
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	b933      	cbnz	r3, 8007644 <_free_r+0x30>
 8007636:	6063      	str	r3, [r4, #4]
 8007638:	6014      	str	r4, [r2, #0]
 800763a:	b003      	add	sp, #12
 800763c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007640:	f000 b8e2 	b.w	8007808 <__malloc_unlock>
 8007644:	42a3      	cmp	r3, r4
 8007646:	d908      	bls.n	800765a <_free_r+0x46>
 8007648:	6825      	ldr	r5, [r4, #0]
 800764a:	1961      	adds	r1, r4, r5
 800764c:	428b      	cmp	r3, r1
 800764e:	bf01      	itttt	eq
 8007650:	6819      	ldreq	r1, [r3, #0]
 8007652:	685b      	ldreq	r3, [r3, #4]
 8007654:	1949      	addeq	r1, r1, r5
 8007656:	6021      	streq	r1, [r4, #0]
 8007658:	e7ed      	b.n	8007636 <_free_r+0x22>
 800765a:	461a      	mov	r2, r3
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	b10b      	cbz	r3, 8007664 <_free_r+0x50>
 8007660:	42a3      	cmp	r3, r4
 8007662:	d9fa      	bls.n	800765a <_free_r+0x46>
 8007664:	6811      	ldr	r1, [r2, #0]
 8007666:	1855      	adds	r5, r2, r1
 8007668:	42a5      	cmp	r5, r4
 800766a:	d10b      	bne.n	8007684 <_free_r+0x70>
 800766c:	6824      	ldr	r4, [r4, #0]
 800766e:	4421      	add	r1, r4
 8007670:	1854      	adds	r4, r2, r1
 8007672:	42a3      	cmp	r3, r4
 8007674:	6011      	str	r1, [r2, #0]
 8007676:	d1e0      	bne.n	800763a <_free_r+0x26>
 8007678:	681c      	ldr	r4, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	6053      	str	r3, [r2, #4]
 800767e:	440c      	add	r4, r1
 8007680:	6014      	str	r4, [r2, #0]
 8007682:	e7da      	b.n	800763a <_free_r+0x26>
 8007684:	d902      	bls.n	800768c <_free_r+0x78>
 8007686:	230c      	movs	r3, #12
 8007688:	6003      	str	r3, [r0, #0]
 800768a:	e7d6      	b.n	800763a <_free_r+0x26>
 800768c:	6825      	ldr	r5, [r4, #0]
 800768e:	1961      	adds	r1, r4, r5
 8007690:	428b      	cmp	r3, r1
 8007692:	bf04      	itt	eq
 8007694:	6819      	ldreq	r1, [r3, #0]
 8007696:	685b      	ldreq	r3, [r3, #4]
 8007698:	6063      	str	r3, [r4, #4]
 800769a:	bf04      	itt	eq
 800769c:	1949      	addeq	r1, r1, r5
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	6054      	str	r4, [r2, #4]
 80076a2:	e7ca      	b.n	800763a <_free_r+0x26>
 80076a4:	b003      	add	sp, #12
 80076a6:	bd30      	pop	{r4, r5, pc}
 80076a8:	20000474 	.word	0x20000474

080076ac <malloc>:
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <malloc+0xc>)
 80076ae:	4601      	mov	r1, r0
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	f000 b823 	b.w	80076fc <_malloc_r>
 80076b6:	bf00      	nop
 80076b8:	20000064 	.word	0x20000064

080076bc <sbrk_aligned>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	4e0e      	ldr	r6, [pc, #56]	; (80076f8 <sbrk_aligned+0x3c>)
 80076c0:	460c      	mov	r4, r1
 80076c2:	6831      	ldr	r1, [r6, #0]
 80076c4:	4605      	mov	r5, r0
 80076c6:	b911      	cbnz	r1, 80076ce <sbrk_aligned+0x12>
 80076c8:	f000 fcce 	bl	8008068 <_sbrk_r>
 80076cc:	6030      	str	r0, [r6, #0]
 80076ce:	4621      	mov	r1, r4
 80076d0:	4628      	mov	r0, r5
 80076d2:	f000 fcc9 	bl	8008068 <_sbrk_r>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d00a      	beq.n	80076f0 <sbrk_aligned+0x34>
 80076da:	1cc4      	adds	r4, r0, #3
 80076dc:	f024 0403 	bic.w	r4, r4, #3
 80076e0:	42a0      	cmp	r0, r4
 80076e2:	d007      	beq.n	80076f4 <sbrk_aligned+0x38>
 80076e4:	1a21      	subs	r1, r4, r0
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 fcbe 	bl	8008068 <_sbrk_r>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d101      	bne.n	80076f4 <sbrk_aligned+0x38>
 80076f0:	f04f 34ff 	mov.w	r4, #4294967295
 80076f4:	4620      	mov	r0, r4
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	20000478 	.word	0x20000478

080076fc <_malloc_r>:
 80076fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007700:	1ccd      	adds	r5, r1, #3
 8007702:	f025 0503 	bic.w	r5, r5, #3
 8007706:	3508      	adds	r5, #8
 8007708:	2d0c      	cmp	r5, #12
 800770a:	bf38      	it	cc
 800770c:	250c      	movcc	r5, #12
 800770e:	2d00      	cmp	r5, #0
 8007710:	4607      	mov	r7, r0
 8007712:	db01      	blt.n	8007718 <_malloc_r+0x1c>
 8007714:	42a9      	cmp	r1, r5
 8007716:	d905      	bls.n	8007724 <_malloc_r+0x28>
 8007718:	230c      	movs	r3, #12
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	2600      	movs	r6, #0
 800771e:	4630      	mov	r0, r6
 8007720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007724:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077f8 <_malloc_r+0xfc>
 8007728:	f000 f868 	bl	80077fc <__malloc_lock>
 800772c:	f8d8 3000 	ldr.w	r3, [r8]
 8007730:	461c      	mov	r4, r3
 8007732:	bb5c      	cbnz	r4, 800778c <_malloc_r+0x90>
 8007734:	4629      	mov	r1, r5
 8007736:	4638      	mov	r0, r7
 8007738:	f7ff ffc0 	bl	80076bc <sbrk_aligned>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	4604      	mov	r4, r0
 8007740:	d155      	bne.n	80077ee <_malloc_r+0xf2>
 8007742:	f8d8 4000 	ldr.w	r4, [r8]
 8007746:	4626      	mov	r6, r4
 8007748:	2e00      	cmp	r6, #0
 800774a:	d145      	bne.n	80077d8 <_malloc_r+0xdc>
 800774c:	2c00      	cmp	r4, #0
 800774e:	d048      	beq.n	80077e2 <_malloc_r+0xe6>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	4631      	mov	r1, r6
 8007754:	4638      	mov	r0, r7
 8007756:	eb04 0903 	add.w	r9, r4, r3
 800775a:	f000 fc85 	bl	8008068 <_sbrk_r>
 800775e:	4581      	cmp	r9, r0
 8007760:	d13f      	bne.n	80077e2 <_malloc_r+0xe6>
 8007762:	6821      	ldr	r1, [r4, #0]
 8007764:	1a6d      	subs	r5, r5, r1
 8007766:	4629      	mov	r1, r5
 8007768:	4638      	mov	r0, r7
 800776a:	f7ff ffa7 	bl	80076bc <sbrk_aligned>
 800776e:	3001      	adds	r0, #1
 8007770:	d037      	beq.n	80077e2 <_malloc_r+0xe6>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	442b      	add	r3, r5
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	f8d8 3000 	ldr.w	r3, [r8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d038      	beq.n	80077f2 <_malloc_r+0xf6>
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	42a2      	cmp	r2, r4
 8007784:	d12b      	bne.n	80077de <_malloc_r+0xe2>
 8007786:	2200      	movs	r2, #0
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	e00f      	b.n	80077ac <_malloc_r+0xb0>
 800778c:	6822      	ldr	r2, [r4, #0]
 800778e:	1b52      	subs	r2, r2, r5
 8007790:	d41f      	bmi.n	80077d2 <_malloc_r+0xd6>
 8007792:	2a0b      	cmp	r2, #11
 8007794:	d917      	bls.n	80077c6 <_malloc_r+0xca>
 8007796:	1961      	adds	r1, r4, r5
 8007798:	42a3      	cmp	r3, r4
 800779a:	6025      	str	r5, [r4, #0]
 800779c:	bf18      	it	ne
 800779e:	6059      	strne	r1, [r3, #4]
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	bf08      	it	eq
 80077a4:	f8c8 1000 	streq.w	r1, [r8]
 80077a8:	5162      	str	r2, [r4, r5]
 80077aa:	604b      	str	r3, [r1, #4]
 80077ac:	4638      	mov	r0, r7
 80077ae:	f104 060b 	add.w	r6, r4, #11
 80077b2:	f000 f829 	bl	8007808 <__malloc_unlock>
 80077b6:	f026 0607 	bic.w	r6, r6, #7
 80077ba:	1d23      	adds	r3, r4, #4
 80077bc:	1af2      	subs	r2, r6, r3
 80077be:	d0ae      	beq.n	800771e <_malloc_r+0x22>
 80077c0:	1b9b      	subs	r3, r3, r6
 80077c2:	50a3      	str	r3, [r4, r2]
 80077c4:	e7ab      	b.n	800771e <_malloc_r+0x22>
 80077c6:	42a3      	cmp	r3, r4
 80077c8:	6862      	ldr	r2, [r4, #4]
 80077ca:	d1dd      	bne.n	8007788 <_malloc_r+0x8c>
 80077cc:	f8c8 2000 	str.w	r2, [r8]
 80077d0:	e7ec      	b.n	80077ac <_malloc_r+0xb0>
 80077d2:	4623      	mov	r3, r4
 80077d4:	6864      	ldr	r4, [r4, #4]
 80077d6:	e7ac      	b.n	8007732 <_malloc_r+0x36>
 80077d8:	4634      	mov	r4, r6
 80077da:	6876      	ldr	r6, [r6, #4]
 80077dc:	e7b4      	b.n	8007748 <_malloc_r+0x4c>
 80077de:	4613      	mov	r3, r2
 80077e0:	e7cc      	b.n	800777c <_malloc_r+0x80>
 80077e2:	230c      	movs	r3, #12
 80077e4:	603b      	str	r3, [r7, #0]
 80077e6:	4638      	mov	r0, r7
 80077e8:	f000 f80e 	bl	8007808 <__malloc_unlock>
 80077ec:	e797      	b.n	800771e <_malloc_r+0x22>
 80077ee:	6025      	str	r5, [r4, #0]
 80077f0:	e7dc      	b.n	80077ac <_malloc_r+0xb0>
 80077f2:	605b      	str	r3, [r3, #4]
 80077f4:	deff      	udf	#255	; 0xff
 80077f6:	bf00      	nop
 80077f8:	20000474 	.word	0x20000474

080077fc <__malloc_lock>:
 80077fc:	4801      	ldr	r0, [pc, #4]	; (8007804 <__malloc_lock+0x8>)
 80077fe:	f7ff b88c 	b.w	800691a <__retarget_lock_acquire_recursive>
 8007802:	bf00      	nop
 8007804:	20000470 	.word	0x20000470

08007808 <__malloc_unlock>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__malloc_unlock+0x8>)
 800780a:	f7ff b887 	b.w	800691c <__retarget_lock_release_recursive>
 800780e:	bf00      	nop
 8007810:	20000470 	.word	0x20000470

08007814 <_Balloc>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	69c6      	ldr	r6, [r0, #28]
 8007818:	4604      	mov	r4, r0
 800781a:	460d      	mov	r5, r1
 800781c:	b976      	cbnz	r6, 800783c <_Balloc+0x28>
 800781e:	2010      	movs	r0, #16
 8007820:	f7ff ff44 	bl	80076ac <malloc>
 8007824:	4602      	mov	r2, r0
 8007826:	61e0      	str	r0, [r4, #28]
 8007828:	b920      	cbnz	r0, 8007834 <_Balloc+0x20>
 800782a:	4b18      	ldr	r3, [pc, #96]	; (800788c <_Balloc+0x78>)
 800782c:	4818      	ldr	r0, [pc, #96]	; (8007890 <_Balloc+0x7c>)
 800782e:	216b      	movs	r1, #107	; 0x6b
 8007830:	f000 fc38 	bl	80080a4 <__assert_func>
 8007834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007838:	6006      	str	r6, [r0, #0]
 800783a:	60c6      	str	r6, [r0, #12]
 800783c:	69e6      	ldr	r6, [r4, #28]
 800783e:	68f3      	ldr	r3, [r6, #12]
 8007840:	b183      	cbz	r3, 8007864 <_Balloc+0x50>
 8007842:	69e3      	ldr	r3, [r4, #28]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800784a:	b9b8      	cbnz	r0, 800787c <_Balloc+0x68>
 800784c:	2101      	movs	r1, #1
 800784e:	fa01 f605 	lsl.w	r6, r1, r5
 8007852:	1d72      	adds	r2, r6, #5
 8007854:	0092      	lsls	r2, r2, #2
 8007856:	4620      	mov	r0, r4
 8007858:	f000 fc42 	bl	80080e0 <_calloc_r>
 800785c:	b160      	cbz	r0, 8007878 <_Balloc+0x64>
 800785e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007862:	e00e      	b.n	8007882 <_Balloc+0x6e>
 8007864:	2221      	movs	r2, #33	; 0x21
 8007866:	2104      	movs	r1, #4
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fc39 	bl	80080e0 <_calloc_r>
 800786e:	69e3      	ldr	r3, [r4, #28]
 8007870:	60f0      	str	r0, [r6, #12]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e4      	bne.n	8007842 <_Balloc+0x2e>
 8007878:	2000      	movs	r0, #0
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	6802      	ldr	r2, [r0, #0]
 800787e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007882:	2300      	movs	r3, #0
 8007884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007888:	e7f7      	b.n	800787a <_Balloc+0x66>
 800788a:	bf00      	nop
 800788c:	08008751 	.word	0x08008751
 8007890:	080087d1 	.word	0x080087d1

08007894 <_Bfree>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	69c6      	ldr	r6, [r0, #28]
 8007898:	4605      	mov	r5, r0
 800789a:	460c      	mov	r4, r1
 800789c:	b976      	cbnz	r6, 80078bc <_Bfree+0x28>
 800789e:	2010      	movs	r0, #16
 80078a0:	f7ff ff04 	bl	80076ac <malloc>
 80078a4:	4602      	mov	r2, r0
 80078a6:	61e8      	str	r0, [r5, #28]
 80078a8:	b920      	cbnz	r0, 80078b4 <_Bfree+0x20>
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <_Bfree+0x3c>)
 80078ac:	4809      	ldr	r0, [pc, #36]	; (80078d4 <_Bfree+0x40>)
 80078ae:	218f      	movs	r1, #143	; 0x8f
 80078b0:	f000 fbf8 	bl	80080a4 <__assert_func>
 80078b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078b8:	6006      	str	r6, [r0, #0]
 80078ba:	60c6      	str	r6, [r0, #12]
 80078bc:	b13c      	cbz	r4, 80078ce <_Bfree+0x3a>
 80078be:	69eb      	ldr	r3, [r5, #28]
 80078c0:	6862      	ldr	r2, [r4, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078c8:	6021      	str	r1, [r4, #0]
 80078ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	08008751 	.word	0x08008751
 80078d4:	080087d1 	.word	0x080087d1

080078d8 <__multadd>:
 80078d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078dc:	690d      	ldr	r5, [r1, #16]
 80078de:	4607      	mov	r7, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	461e      	mov	r6, r3
 80078e4:	f101 0c14 	add.w	ip, r1, #20
 80078e8:	2000      	movs	r0, #0
 80078ea:	f8dc 3000 	ldr.w	r3, [ip]
 80078ee:	b299      	uxth	r1, r3
 80078f0:	fb02 6101 	mla	r1, r2, r1, r6
 80078f4:	0c1e      	lsrs	r6, r3, #16
 80078f6:	0c0b      	lsrs	r3, r1, #16
 80078f8:	fb02 3306 	mla	r3, r2, r6, r3
 80078fc:	b289      	uxth	r1, r1
 80078fe:	3001      	adds	r0, #1
 8007900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007904:	4285      	cmp	r5, r0
 8007906:	f84c 1b04 	str.w	r1, [ip], #4
 800790a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800790e:	dcec      	bgt.n	80078ea <__multadd+0x12>
 8007910:	b30e      	cbz	r6, 8007956 <__multadd+0x7e>
 8007912:	68a3      	ldr	r3, [r4, #8]
 8007914:	42ab      	cmp	r3, r5
 8007916:	dc19      	bgt.n	800794c <__multadd+0x74>
 8007918:	6861      	ldr	r1, [r4, #4]
 800791a:	4638      	mov	r0, r7
 800791c:	3101      	adds	r1, #1
 800791e:	f7ff ff79 	bl	8007814 <_Balloc>
 8007922:	4680      	mov	r8, r0
 8007924:	b928      	cbnz	r0, 8007932 <__multadd+0x5a>
 8007926:	4602      	mov	r2, r0
 8007928:	4b0c      	ldr	r3, [pc, #48]	; (800795c <__multadd+0x84>)
 800792a:	480d      	ldr	r0, [pc, #52]	; (8007960 <__multadd+0x88>)
 800792c:	21ba      	movs	r1, #186	; 0xba
 800792e:	f000 fbb9 	bl	80080a4 <__assert_func>
 8007932:	6922      	ldr	r2, [r4, #16]
 8007934:	3202      	adds	r2, #2
 8007936:	f104 010c 	add.w	r1, r4, #12
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	300c      	adds	r0, #12
 800793e:	f000 fba3 	bl	8008088 <memcpy>
 8007942:	4621      	mov	r1, r4
 8007944:	4638      	mov	r0, r7
 8007946:	f7ff ffa5 	bl	8007894 <_Bfree>
 800794a:	4644      	mov	r4, r8
 800794c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007950:	3501      	adds	r5, #1
 8007952:	615e      	str	r6, [r3, #20]
 8007954:	6125      	str	r5, [r4, #16]
 8007956:	4620      	mov	r0, r4
 8007958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795c:	080087c0 	.word	0x080087c0
 8007960:	080087d1 	.word	0x080087d1

08007964 <__hi0bits>:
 8007964:	0c03      	lsrs	r3, r0, #16
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	b9d3      	cbnz	r3, 80079a0 <__hi0bits+0x3c>
 800796a:	0400      	lsls	r0, r0, #16
 800796c:	2310      	movs	r3, #16
 800796e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007972:	bf04      	itt	eq
 8007974:	0200      	lsleq	r0, r0, #8
 8007976:	3308      	addeq	r3, #8
 8007978:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800797c:	bf04      	itt	eq
 800797e:	0100      	lsleq	r0, r0, #4
 8007980:	3304      	addeq	r3, #4
 8007982:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007986:	bf04      	itt	eq
 8007988:	0080      	lsleq	r0, r0, #2
 800798a:	3302      	addeq	r3, #2
 800798c:	2800      	cmp	r0, #0
 800798e:	db05      	blt.n	800799c <__hi0bits+0x38>
 8007990:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007994:	f103 0301 	add.w	r3, r3, #1
 8007998:	bf08      	it	eq
 800799a:	2320      	moveq	r3, #32
 800799c:	4618      	mov	r0, r3
 800799e:	4770      	bx	lr
 80079a0:	2300      	movs	r3, #0
 80079a2:	e7e4      	b.n	800796e <__hi0bits+0xa>

080079a4 <__lo0bits>:
 80079a4:	6803      	ldr	r3, [r0, #0]
 80079a6:	f013 0207 	ands.w	r2, r3, #7
 80079aa:	d00c      	beq.n	80079c6 <__lo0bits+0x22>
 80079ac:	07d9      	lsls	r1, r3, #31
 80079ae:	d422      	bmi.n	80079f6 <__lo0bits+0x52>
 80079b0:	079a      	lsls	r2, r3, #30
 80079b2:	bf49      	itett	mi
 80079b4:	085b      	lsrmi	r3, r3, #1
 80079b6:	089b      	lsrpl	r3, r3, #2
 80079b8:	6003      	strmi	r3, [r0, #0]
 80079ba:	2201      	movmi	r2, #1
 80079bc:	bf5c      	itt	pl
 80079be:	6003      	strpl	r3, [r0, #0]
 80079c0:	2202      	movpl	r2, #2
 80079c2:	4610      	mov	r0, r2
 80079c4:	4770      	bx	lr
 80079c6:	b299      	uxth	r1, r3
 80079c8:	b909      	cbnz	r1, 80079ce <__lo0bits+0x2a>
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	2210      	movs	r2, #16
 80079ce:	b2d9      	uxtb	r1, r3
 80079d0:	b909      	cbnz	r1, 80079d6 <__lo0bits+0x32>
 80079d2:	3208      	adds	r2, #8
 80079d4:	0a1b      	lsrs	r3, r3, #8
 80079d6:	0719      	lsls	r1, r3, #28
 80079d8:	bf04      	itt	eq
 80079da:	091b      	lsreq	r3, r3, #4
 80079dc:	3204      	addeq	r2, #4
 80079de:	0799      	lsls	r1, r3, #30
 80079e0:	bf04      	itt	eq
 80079e2:	089b      	lsreq	r3, r3, #2
 80079e4:	3202      	addeq	r2, #2
 80079e6:	07d9      	lsls	r1, r3, #31
 80079e8:	d403      	bmi.n	80079f2 <__lo0bits+0x4e>
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	f102 0201 	add.w	r2, r2, #1
 80079f0:	d003      	beq.n	80079fa <__lo0bits+0x56>
 80079f2:	6003      	str	r3, [r0, #0]
 80079f4:	e7e5      	b.n	80079c2 <__lo0bits+0x1e>
 80079f6:	2200      	movs	r2, #0
 80079f8:	e7e3      	b.n	80079c2 <__lo0bits+0x1e>
 80079fa:	2220      	movs	r2, #32
 80079fc:	e7e1      	b.n	80079c2 <__lo0bits+0x1e>
	...

08007a00 <__i2b>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	460c      	mov	r4, r1
 8007a04:	2101      	movs	r1, #1
 8007a06:	f7ff ff05 	bl	8007814 <_Balloc>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	b928      	cbnz	r0, 8007a1a <__i2b+0x1a>
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <__i2b+0x24>)
 8007a10:	4805      	ldr	r0, [pc, #20]	; (8007a28 <__i2b+0x28>)
 8007a12:	f240 1145 	movw	r1, #325	; 0x145
 8007a16:	f000 fb45 	bl	80080a4 <__assert_func>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	6144      	str	r4, [r0, #20]
 8007a1e:	6103      	str	r3, [r0, #16]
 8007a20:	bd10      	pop	{r4, pc}
 8007a22:	bf00      	nop
 8007a24:	080087c0 	.word	0x080087c0
 8007a28:	080087d1 	.word	0x080087d1

08007a2c <__multiply>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	4691      	mov	r9, r2
 8007a32:	690a      	ldr	r2, [r1, #16]
 8007a34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	bfb8      	it	lt
 8007a3c:	460b      	movlt	r3, r1
 8007a3e:	460c      	mov	r4, r1
 8007a40:	bfbc      	itt	lt
 8007a42:	464c      	movlt	r4, r9
 8007a44:	4699      	movlt	r9, r3
 8007a46:	6927      	ldr	r7, [r4, #16]
 8007a48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a4c:	68a3      	ldr	r3, [r4, #8]
 8007a4e:	6861      	ldr	r1, [r4, #4]
 8007a50:	eb07 060a 	add.w	r6, r7, sl
 8007a54:	42b3      	cmp	r3, r6
 8007a56:	b085      	sub	sp, #20
 8007a58:	bfb8      	it	lt
 8007a5a:	3101      	addlt	r1, #1
 8007a5c:	f7ff feda 	bl	8007814 <_Balloc>
 8007a60:	b930      	cbnz	r0, 8007a70 <__multiply+0x44>
 8007a62:	4602      	mov	r2, r0
 8007a64:	4b44      	ldr	r3, [pc, #272]	; (8007b78 <__multiply+0x14c>)
 8007a66:	4845      	ldr	r0, [pc, #276]	; (8007b7c <__multiply+0x150>)
 8007a68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a6c:	f000 fb1a 	bl	80080a4 <__assert_func>
 8007a70:	f100 0514 	add.w	r5, r0, #20
 8007a74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a78:	462b      	mov	r3, r5
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	4543      	cmp	r3, r8
 8007a7e:	d321      	bcc.n	8007ac4 <__multiply+0x98>
 8007a80:	f104 0314 	add.w	r3, r4, #20
 8007a84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a88:	f109 0314 	add.w	r3, r9, #20
 8007a8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a90:	9202      	str	r2, [sp, #8]
 8007a92:	1b3a      	subs	r2, r7, r4
 8007a94:	3a15      	subs	r2, #21
 8007a96:	f022 0203 	bic.w	r2, r2, #3
 8007a9a:	3204      	adds	r2, #4
 8007a9c:	f104 0115 	add.w	r1, r4, #21
 8007aa0:	428f      	cmp	r7, r1
 8007aa2:	bf38      	it	cc
 8007aa4:	2204      	movcc	r2, #4
 8007aa6:	9201      	str	r2, [sp, #4]
 8007aa8:	9a02      	ldr	r2, [sp, #8]
 8007aaa:	9303      	str	r3, [sp, #12]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d80c      	bhi.n	8007aca <__multiply+0x9e>
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	dd03      	ble.n	8007abc <__multiply+0x90>
 8007ab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d05b      	beq.n	8007b74 <__multiply+0x148>
 8007abc:	6106      	str	r6, [r0, #16]
 8007abe:	b005      	add	sp, #20
 8007ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac4:	f843 2b04 	str.w	r2, [r3], #4
 8007ac8:	e7d8      	b.n	8007a7c <__multiply+0x50>
 8007aca:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ace:	f1ba 0f00 	cmp.w	sl, #0
 8007ad2:	d024      	beq.n	8007b1e <__multiply+0xf2>
 8007ad4:	f104 0e14 	add.w	lr, r4, #20
 8007ad8:	46a9      	mov	r9, r5
 8007ada:	f04f 0c00 	mov.w	ip, #0
 8007ade:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ae2:	f8d9 1000 	ldr.w	r1, [r9]
 8007ae6:	fa1f fb82 	uxth.w	fp, r2
 8007aea:	b289      	uxth	r1, r1
 8007aec:	fb0a 110b 	mla	r1, sl, fp, r1
 8007af0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007af4:	f8d9 2000 	ldr.w	r2, [r9]
 8007af8:	4461      	add	r1, ip
 8007afa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007afe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b06:	b289      	uxth	r1, r1
 8007b08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b0c:	4577      	cmp	r7, lr
 8007b0e:	f849 1b04 	str.w	r1, [r9], #4
 8007b12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b16:	d8e2      	bhi.n	8007ade <__multiply+0xb2>
 8007b18:	9a01      	ldr	r2, [sp, #4]
 8007b1a:	f845 c002 	str.w	ip, [r5, r2]
 8007b1e:	9a03      	ldr	r2, [sp, #12]
 8007b20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b24:	3304      	adds	r3, #4
 8007b26:	f1b9 0f00 	cmp.w	r9, #0
 8007b2a:	d021      	beq.n	8007b70 <__multiply+0x144>
 8007b2c:	6829      	ldr	r1, [r5, #0]
 8007b2e:	f104 0c14 	add.w	ip, r4, #20
 8007b32:	46ae      	mov	lr, r5
 8007b34:	f04f 0a00 	mov.w	sl, #0
 8007b38:	f8bc b000 	ldrh.w	fp, [ip]
 8007b3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b40:	fb09 220b 	mla	r2, r9, fp, r2
 8007b44:	4452      	add	r2, sl
 8007b46:	b289      	uxth	r1, r1
 8007b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b4c:	f84e 1b04 	str.w	r1, [lr], #4
 8007b50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b58:	f8be 1000 	ldrh.w	r1, [lr]
 8007b5c:	fb09 110a 	mla	r1, r9, sl, r1
 8007b60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b64:	4567      	cmp	r7, ip
 8007b66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b6a:	d8e5      	bhi.n	8007b38 <__multiply+0x10c>
 8007b6c:	9a01      	ldr	r2, [sp, #4]
 8007b6e:	50a9      	str	r1, [r5, r2]
 8007b70:	3504      	adds	r5, #4
 8007b72:	e799      	b.n	8007aa8 <__multiply+0x7c>
 8007b74:	3e01      	subs	r6, #1
 8007b76:	e79b      	b.n	8007ab0 <__multiply+0x84>
 8007b78:	080087c0 	.word	0x080087c0
 8007b7c:	080087d1 	.word	0x080087d1

08007b80 <__pow5mult>:
 8007b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	4615      	mov	r5, r2
 8007b86:	f012 0203 	ands.w	r2, r2, #3
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	d007      	beq.n	8007ba0 <__pow5mult+0x20>
 8007b90:	4c25      	ldr	r4, [pc, #148]	; (8007c28 <__pow5mult+0xa8>)
 8007b92:	3a01      	subs	r2, #1
 8007b94:	2300      	movs	r3, #0
 8007b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b9a:	f7ff fe9d 	bl	80078d8 <__multadd>
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	10ad      	asrs	r5, r5, #2
 8007ba2:	d03d      	beq.n	8007c20 <__pow5mult+0xa0>
 8007ba4:	69f4      	ldr	r4, [r6, #28]
 8007ba6:	b97c      	cbnz	r4, 8007bc8 <__pow5mult+0x48>
 8007ba8:	2010      	movs	r0, #16
 8007baa:	f7ff fd7f 	bl	80076ac <malloc>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	61f0      	str	r0, [r6, #28]
 8007bb2:	b928      	cbnz	r0, 8007bc0 <__pow5mult+0x40>
 8007bb4:	4b1d      	ldr	r3, [pc, #116]	; (8007c2c <__pow5mult+0xac>)
 8007bb6:	481e      	ldr	r0, [pc, #120]	; (8007c30 <__pow5mult+0xb0>)
 8007bb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007bbc:	f000 fa72 	bl	80080a4 <__assert_func>
 8007bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bc4:	6004      	str	r4, [r0, #0]
 8007bc6:	60c4      	str	r4, [r0, #12]
 8007bc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bd0:	b94c      	cbnz	r4, 8007be6 <__pow5mult+0x66>
 8007bd2:	f240 2171 	movw	r1, #625	; 0x271
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff ff12 	bl	8007a00 <__i2b>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8007be2:	4604      	mov	r4, r0
 8007be4:	6003      	str	r3, [r0, #0]
 8007be6:	f04f 0900 	mov.w	r9, #0
 8007bea:	07eb      	lsls	r3, r5, #31
 8007bec:	d50a      	bpl.n	8007c04 <__pow5mult+0x84>
 8007bee:	4639      	mov	r1, r7
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ff1a 	bl	8007a2c <__multiply>
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff fe49 	bl	8007894 <_Bfree>
 8007c02:	4647      	mov	r7, r8
 8007c04:	106d      	asrs	r5, r5, #1
 8007c06:	d00b      	beq.n	8007c20 <__pow5mult+0xa0>
 8007c08:	6820      	ldr	r0, [r4, #0]
 8007c0a:	b938      	cbnz	r0, 8007c1c <__pow5mult+0x9c>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff ff0b 	bl	8007a2c <__multiply>
 8007c16:	6020      	str	r0, [r4, #0]
 8007c18:	f8c0 9000 	str.w	r9, [r0]
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	e7e4      	b.n	8007bea <__pow5mult+0x6a>
 8007c20:	4638      	mov	r0, r7
 8007c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c26:	bf00      	nop
 8007c28:	08008920 	.word	0x08008920
 8007c2c:	08008751 	.word	0x08008751
 8007c30:	080087d1 	.word	0x080087d1

08007c34 <__lshift>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	460c      	mov	r4, r1
 8007c3a:	6849      	ldr	r1, [r1, #4]
 8007c3c:	6923      	ldr	r3, [r4, #16]
 8007c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c42:	68a3      	ldr	r3, [r4, #8]
 8007c44:	4607      	mov	r7, r0
 8007c46:	4691      	mov	r9, r2
 8007c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c4c:	f108 0601 	add.w	r6, r8, #1
 8007c50:	42b3      	cmp	r3, r6
 8007c52:	db0b      	blt.n	8007c6c <__lshift+0x38>
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff fddd 	bl	8007814 <_Balloc>
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	b948      	cbnz	r0, 8007c72 <__lshift+0x3e>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <__lshift+0xd0>)
 8007c62:	4829      	ldr	r0, [pc, #164]	; (8007d08 <__lshift+0xd4>)
 8007c64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c68:	f000 fa1c 	bl	80080a4 <__assert_func>
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	e7ee      	b.n	8007c50 <__lshift+0x1c>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f100 0114 	add.w	r1, r0, #20
 8007c78:	f100 0210 	add.w	r2, r0, #16
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	4553      	cmp	r3, sl
 8007c80:	db33      	blt.n	8007cea <__lshift+0xb6>
 8007c82:	6920      	ldr	r0, [r4, #16]
 8007c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c88:	f104 0314 	add.w	r3, r4, #20
 8007c8c:	f019 091f 	ands.w	r9, r9, #31
 8007c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c98:	d02b      	beq.n	8007cf2 <__lshift+0xbe>
 8007c9a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c9e:	468a      	mov	sl, r1
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ca8:	4310      	orrs	r0, r2
 8007caa:	f84a 0b04 	str.w	r0, [sl], #4
 8007cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb2:	459c      	cmp	ip, r3
 8007cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cb8:	d8f3      	bhi.n	8007ca2 <__lshift+0x6e>
 8007cba:	ebac 0304 	sub.w	r3, ip, r4
 8007cbe:	3b15      	subs	r3, #21
 8007cc0:	f023 0303 	bic.w	r3, r3, #3
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	f104 0015 	add.w	r0, r4, #21
 8007cca:	4584      	cmp	ip, r0
 8007ccc:	bf38      	it	cc
 8007cce:	2304      	movcc	r3, #4
 8007cd0:	50ca      	str	r2, [r1, r3]
 8007cd2:	b10a      	cbz	r2, 8007cd8 <__lshift+0xa4>
 8007cd4:	f108 0602 	add.w	r6, r8, #2
 8007cd8:	3e01      	subs	r6, #1
 8007cda:	4638      	mov	r0, r7
 8007cdc:	612e      	str	r6, [r5, #16]
 8007cde:	4621      	mov	r1, r4
 8007ce0:	f7ff fdd8 	bl	8007894 <_Bfree>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cee:	3301      	adds	r3, #1
 8007cf0:	e7c5      	b.n	8007c7e <__lshift+0x4a>
 8007cf2:	3904      	subs	r1, #4
 8007cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cfc:	459c      	cmp	ip, r3
 8007cfe:	d8f9      	bhi.n	8007cf4 <__lshift+0xc0>
 8007d00:	e7ea      	b.n	8007cd8 <__lshift+0xa4>
 8007d02:	bf00      	nop
 8007d04:	080087c0 	.word	0x080087c0
 8007d08:	080087d1 	.word	0x080087d1

08007d0c <__mcmp>:
 8007d0c:	b530      	push	{r4, r5, lr}
 8007d0e:	6902      	ldr	r2, [r0, #16]
 8007d10:	690c      	ldr	r4, [r1, #16]
 8007d12:	1b12      	subs	r2, r2, r4
 8007d14:	d10e      	bne.n	8007d34 <__mcmp+0x28>
 8007d16:	f100 0314 	add.w	r3, r0, #20
 8007d1a:	3114      	adds	r1, #20
 8007d1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d2c:	42a5      	cmp	r5, r4
 8007d2e:	d003      	beq.n	8007d38 <__mcmp+0x2c>
 8007d30:	d305      	bcc.n	8007d3e <__mcmp+0x32>
 8007d32:	2201      	movs	r2, #1
 8007d34:	4610      	mov	r0, r2
 8007d36:	bd30      	pop	{r4, r5, pc}
 8007d38:	4283      	cmp	r3, r0
 8007d3a:	d3f3      	bcc.n	8007d24 <__mcmp+0x18>
 8007d3c:	e7fa      	b.n	8007d34 <__mcmp+0x28>
 8007d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d42:	e7f7      	b.n	8007d34 <__mcmp+0x28>

08007d44 <__mdiff>:
 8007d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	460c      	mov	r4, r1
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4690      	mov	r8, r2
 8007d52:	f7ff ffdb 	bl	8007d0c <__mcmp>
 8007d56:	1e05      	subs	r5, r0, #0
 8007d58:	d110      	bne.n	8007d7c <__mdiff+0x38>
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fd59 	bl	8007814 <_Balloc>
 8007d62:	b930      	cbnz	r0, 8007d72 <__mdiff+0x2e>
 8007d64:	4b3a      	ldr	r3, [pc, #232]	; (8007e50 <__mdiff+0x10c>)
 8007d66:	4602      	mov	r2, r0
 8007d68:	f240 2137 	movw	r1, #567	; 0x237
 8007d6c:	4839      	ldr	r0, [pc, #228]	; (8007e54 <__mdiff+0x110>)
 8007d6e:	f000 f999 	bl	80080a4 <__assert_func>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	bfa4      	itt	ge
 8007d7e:	4643      	movge	r3, r8
 8007d80:	46a0      	movge	r8, r4
 8007d82:	4630      	mov	r0, r6
 8007d84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d88:	bfa6      	itte	ge
 8007d8a:	461c      	movge	r4, r3
 8007d8c:	2500      	movge	r5, #0
 8007d8e:	2501      	movlt	r5, #1
 8007d90:	f7ff fd40 	bl	8007814 <_Balloc>
 8007d94:	b920      	cbnz	r0, 8007da0 <__mdiff+0x5c>
 8007d96:	4b2e      	ldr	r3, [pc, #184]	; (8007e50 <__mdiff+0x10c>)
 8007d98:	4602      	mov	r2, r0
 8007d9a:	f240 2145 	movw	r1, #581	; 0x245
 8007d9e:	e7e5      	b.n	8007d6c <__mdiff+0x28>
 8007da0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007da4:	6926      	ldr	r6, [r4, #16]
 8007da6:	60c5      	str	r5, [r0, #12]
 8007da8:	f104 0914 	add.w	r9, r4, #20
 8007dac:	f108 0514 	add.w	r5, r8, #20
 8007db0:	f100 0e14 	add.w	lr, r0, #20
 8007db4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007db8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007dbc:	f108 0210 	add.w	r2, r8, #16
 8007dc0:	46f2      	mov	sl, lr
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007dcc:	fa11 f88b 	uxtah	r8, r1, fp
 8007dd0:	b299      	uxth	r1, r3
 8007dd2:	0c1b      	lsrs	r3, r3, #16
 8007dd4:	eba8 0801 	sub.w	r8, r8, r1
 8007dd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ddc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007de0:	fa1f f888 	uxth.w	r8, r8
 8007de4:	1419      	asrs	r1, r3, #16
 8007de6:	454e      	cmp	r6, r9
 8007de8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007dec:	f84a 3b04 	str.w	r3, [sl], #4
 8007df0:	d8e8      	bhi.n	8007dc4 <__mdiff+0x80>
 8007df2:	1b33      	subs	r3, r6, r4
 8007df4:	3b15      	subs	r3, #21
 8007df6:	f023 0303 	bic.w	r3, r3, #3
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	3415      	adds	r4, #21
 8007dfe:	42a6      	cmp	r6, r4
 8007e00:	bf38      	it	cc
 8007e02:	2304      	movcc	r3, #4
 8007e04:	441d      	add	r5, r3
 8007e06:	4473      	add	r3, lr
 8007e08:	469e      	mov	lr, r3
 8007e0a:	462e      	mov	r6, r5
 8007e0c:	4566      	cmp	r6, ip
 8007e0e:	d30e      	bcc.n	8007e2e <__mdiff+0xea>
 8007e10:	f10c 0203 	add.w	r2, ip, #3
 8007e14:	1b52      	subs	r2, r2, r5
 8007e16:	f022 0203 	bic.w	r2, r2, #3
 8007e1a:	3d03      	subs	r5, #3
 8007e1c:	45ac      	cmp	ip, r5
 8007e1e:	bf38      	it	cc
 8007e20:	2200      	movcc	r2, #0
 8007e22:	4413      	add	r3, r2
 8007e24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e28:	b17a      	cbz	r2, 8007e4a <__mdiff+0x106>
 8007e2a:	6107      	str	r7, [r0, #16]
 8007e2c:	e7a4      	b.n	8007d78 <__mdiff+0x34>
 8007e2e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e32:	fa11 f288 	uxtah	r2, r1, r8
 8007e36:	1414      	asrs	r4, r2, #16
 8007e38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e3c:	b292      	uxth	r2, r2
 8007e3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e42:	f84e 2b04 	str.w	r2, [lr], #4
 8007e46:	1421      	asrs	r1, r4, #16
 8007e48:	e7e0      	b.n	8007e0c <__mdiff+0xc8>
 8007e4a:	3f01      	subs	r7, #1
 8007e4c:	e7ea      	b.n	8007e24 <__mdiff+0xe0>
 8007e4e:	bf00      	nop
 8007e50:	080087c0 	.word	0x080087c0
 8007e54:	080087d1 	.word	0x080087d1

08007e58 <__d2b>:
 8007e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	2101      	movs	r1, #1
 8007e60:	ec59 8b10 	vmov	r8, r9, d0
 8007e64:	4616      	mov	r6, r2
 8007e66:	f7ff fcd5 	bl	8007814 <_Balloc>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	b930      	cbnz	r0, 8007e7c <__d2b+0x24>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	4b24      	ldr	r3, [pc, #144]	; (8007f04 <__d2b+0xac>)
 8007e72:	4825      	ldr	r0, [pc, #148]	; (8007f08 <__d2b+0xb0>)
 8007e74:	f240 310f 	movw	r1, #783	; 0x30f
 8007e78:	f000 f914 	bl	80080a4 <__assert_func>
 8007e7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e84:	bb2d      	cbnz	r5, 8007ed2 <__d2b+0x7a>
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	f1b8 0300 	subs.w	r3, r8, #0
 8007e8c:	d026      	beq.n	8007edc <__d2b+0x84>
 8007e8e:	4668      	mov	r0, sp
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	f7ff fd87 	bl	80079a4 <__lo0bits>
 8007e96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e9a:	b1e8      	cbz	r0, 8007ed8 <__d2b+0x80>
 8007e9c:	f1c0 0320 	rsb	r3, r0, #32
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	40c2      	lsrs	r2, r0
 8007ea8:	6163      	str	r3, [r4, #20]
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	61a3      	str	r3, [r4, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bf14      	ite	ne
 8007eb4:	2202      	movne	r2, #2
 8007eb6:	2201      	moveq	r2, #1
 8007eb8:	6122      	str	r2, [r4, #16]
 8007eba:	b1bd      	cbz	r5, 8007eec <__d2b+0x94>
 8007ebc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ec0:	4405      	add	r5, r0
 8007ec2:	603d      	str	r5, [r7, #0]
 8007ec4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	b003      	add	sp, #12
 8007ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ed6:	e7d6      	b.n	8007e86 <__d2b+0x2e>
 8007ed8:	6161      	str	r1, [r4, #20]
 8007eda:	e7e7      	b.n	8007eac <__d2b+0x54>
 8007edc:	a801      	add	r0, sp, #4
 8007ede:	f7ff fd61 	bl	80079a4 <__lo0bits>
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	6163      	str	r3, [r4, #20]
 8007ee6:	3020      	adds	r0, #32
 8007ee8:	2201      	movs	r2, #1
 8007eea:	e7e5      	b.n	8007eb8 <__d2b+0x60>
 8007eec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ef4:	6038      	str	r0, [r7, #0]
 8007ef6:	6918      	ldr	r0, [r3, #16]
 8007ef8:	f7ff fd34 	bl	8007964 <__hi0bits>
 8007efc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f00:	e7e2      	b.n	8007ec8 <__d2b+0x70>
 8007f02:	bf00      	nop
 8007f04:	080087c0 	.word	0x080087c0
 8007f08:	080087d1 	.word	0x080087d1

08007f0c <__sflush_r>:
 8007f0c:	898a      	ldrh	r2, [r1, #12]
 8007f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f12:	4605      	mov	r5, r0
 8007f14:	0710      	lsls	r0, r2, #28
 8007f16:	460c      	mov	r4, r1
 8007f18:	d458      	bmi.n	8007fcc <__sflush_r+0xc0>
 8007f1a:	684b      	ldr	r3, [r1, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dc05      	bgt.n	8007f2c <__sflush_r+0x20>
 8007f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dc02      	bgt.n	8007f2c <__sflush_r+0x20>
 8007f26:	2000      	movs	r0, #0
 8007f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	d0f9      	beq.n	8007f26 <__sflush_r+0x1a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f38:	682f      	ldr	r7, [r5, #0]
 8007f3a:	6a21      	ldr	r1, [r4, #32]
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	d032      	beq.n	8007fa6 <__sflush_r+0x9a>
 8007f40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	075a      	lsls	r2, r3, #29
 8007f46:	d505      	bpl.n	8007f54 <__sflush_r+0x48>
 8007f48:	6863      	ldr	r3, [r4, #4]
 8007f4a:	1ac0      	subs	r0, r0, r3
 8007f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f4e:	b10b      	cbz	r3, 8007f54 <__sflush_r+0x48>
 8007f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f52:	1ac0      	subs	r0, r0, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	4602      	mov	r2, r0
 8007f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5a:	6a21      	ldr	r1, [r4, #32]
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b0      	blx	r6
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	d106      	bne.n	8007f74 <__sflush_r+0x68>
 8007f66:	6829      	ldr	r1, [r5, #0]
 8007f68:	291d      	cmp	r1, #29
 8007f6a:	d82b      	bhi.n	8007fc4 <__sflush_r+0xb8>
 8007f6c:	4a29      	ldr	r2, [pc, #164]	; (8008014 <__sflush_r+0x108>)
 8007f6e:	410a      	asrs	r2, r1
 8007f70:	07d6      	lsls	r6, r2, #31
 8007f72:	d427      	bmi.n	8007fc4 <__sflush_r+0xb8>
 8007f74:	2200      	movs	r2, #0
 8007f76:	6062      	str	r2, [r4, #4]
 8007f78:	04d9      	lsls	r1, r3, #19
 8007f7a:	6922      	ldr	r2, [r4, #16]
 8007f7c:	6022      	str	r2, [r4, #0]
 8007f7e:	d504      	bpl.n	8007f8a <__sflush_r+0x7e>
 8007f80:	1c42      	adds	r2, r0, #1
 8007f82:	d101      	bne.n	8007f88 <__sflush_r+0x7c>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b903      	cbnz	r3, 8007f8a <__sflush_r+0x7e>
 8007f88:	6560      	str	r0, [r4, #84]	; 0x54
 8007f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f8c:	602f      	str	r7, [r5, #0]
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d0c9      	beq.n	8007f26 <__sflush_r+0x1a>
 8007f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f96:	4299      	cmp	r1, r3
 8007f98:	d002      	beq.n	8007fa0 <__sflush_r+0x94>
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7ff fb3a 	bl	8007614 <_free_r>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	6360      	str	r0, [r4, #52]	; 0x34
 8007fa4:	e7c0      	b.n	8007f28 <__sflush_r+0x1c>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b0      	blx	r6
 8007fac:	1c41      	adds	r1, r0, #1
 8007fae:	d1c8      	bne.n	8007f42 <__sflush_r+0x36>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0c5      	beq.n	8007f42 <__sflush_r+0x36>
 8007fb6:	2b1d      	cmp	r3, #29
 8007fb8:	d001      	beq.n	8007fbe <__sflush_r+0xb2>
 8007fba:	2b16      	cmp	r3, #22
 8007fbc:	d101      	bne.n	8007fc2 <__sflush_r+0xb6>
 8007fbe:	602f      	str	r7, [r5, #0]
 8007fc0:	e7b1      	b.n	8007f26 <__sflush_r+0x1a>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	e7ad      	b.n	8007f28 <__sflush_r+0x1c>
 8007fcc:	690f      	ldr	r7, [r1, #16]
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	d0a9      	beq.n	8007f26 <__sflush_r+0x1a>
 8007fd2:	0793      	lsls	r3, r2, #30
 8007fd4:	680e      	ldr	r6, [r1, #0]
 8007fd6:	bf08      	it	eq
 8007fd8:	694b      	ldreq	r3, [r1, #20]
 8007fda:	600f      	str	r7, [r1, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	2300      	movne	r3, #0
 8007fe0:	eba6 0807 	sub.w	r8, r6, r7
 8007fe4:	608b      	str	r3, [r1, #8]
 8007fe6:	f1b8 0f00 	cmp.w	r8, #0
 8007fea:	dd9c      	ble.n	8007f26 <__sflush_r+0x1a>
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff0:	4643      	mov	r3, r8
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b0      	blx	r6
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	dc06      	bgt.n	800800a <__sflush_r+0xfe>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	e78e      	b.n	8007f28 <__sflush_r+0x1c>
 800800a:	4407      	add	r7, r0
 800800c:	eba8 0800 	sub.w	r8, r8, r0
 8008010:	e7e9      	b.n	8007fe6 <__sflush_r+0xda>
 8008012:	bf00      	nop
 8008014:	dfbffffe 	.word	0xdfbffffe

08008018 <_fflush_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	690b      	ldr	r3, [r1, #16]
 800801c:	4605      	mov	r5, r0
 800801e:	460c      	mov	r4, r1
 8008020:	b913      	cbnz	r3, 8008028 <_fflush_r+0x10>
 8008022:	2500      	movs	r5, #0
 8008024:	4628      	mov	r0, r5
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	b118      	cbz	r0, 8008032 <_fflush_r+0x1a>
 800802a:	6a03      	ldr	r3, [r0, #32]
 800802c:	b90b      	cbnz	r3, 8008032 <_fflush_r+0x1a>
 800802e:	f7fe fb7d 	bl	800672c <__sinit>
 8008032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f3      	beq.n	8008022 <_fflush_r+0xa>
 800803a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800803c:	07d0      	lsls	r0, r2, #31
 800803e:	d404      	bmi.n	800804a <_fflush_r+0x32>
 8008040:	0599      	lsls	r1, r3, #22
 8008042:	d402      	bmi.n	800804a <_fflush_r+0x32>
 8008044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008046:	f7fe fc68 	bl	800691a <__retarget_lock_acquire_recursive>
 800804a:	4628      	mov	r0, r5
 800804c:	4621      	mov	r1, r4
 800804e:	f7ff ff5d 	bl	8007f0c <__sflush_r>
 8008052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008054:	07da      	lsls	r2, r3, #31
 8008056:	4605      	mov	r5, r0
 8008058:	d4e4      	bmi.n	8008024 <_fflush_r+0xc>
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	059b      	lsls	r3, r3, #22
 800805e:	d4e1      	bmi.n	8008024 <_fflush_r+0xc>
 8008060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008062:	f7fe fc5b 	bl	800691c <__retarget_lock_release_recursive>
 8008066:	e7dd      	b.n	8008024 <_fflush_r+0xc>

08008068 <_sbrk_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d06      	ldr	r5, [pc, #24]	; (8008084 <_sbrk_r+0x1c>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	f7f9 f9c4 	bl	8001400 <_sbrk>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_sbrk_r+0x1a>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_sbrk_r+0x1a>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	2000046c 	.word	0x2000046c

08008088 <memcpy>:
 8008088:	440a      	add	r2, r1
 800808a:	4291      	cmp	r1, r2
 800808c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008090:	d100      	bne.n	8008094 <memcpy+0xc>
 8008092:	4770      	bx	lr
 8008094:	b510      	push	{r4, lr}
 8008096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800809a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800809e:	4291      	cmp	r1, r2
 80080a0:	d1f9      	bne.n	8008096 <memcpy+0xe>
 80080a2:	bd10      	pop	{r4, pc}

080080a4 <__assert_func>:
 80080a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080a6:	4614      	mov	r4, r2
 80080a8:	461a      	mov	r2, r3
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <__assert_func+0x2c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4605      	mov	r5, r0
 80080b0:	68d8      	ldr	r0, [r3, #12]
 80080b2:	b14c      	cbz	r4, 80080c8 <__assert_func+0x24>
 80080b4:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <__assert_func+0x30>)
 80080b6:	9100      	str	r1, [sp, #0]
 80080b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080bc:	4906      	ldr	r1, [pc, #24]	; (80080d8 <__assert_func+0x34>)
 80080be:	462b      	mov	r3, r5
 80080c0:	f000 f844 	bl	800814c <fiprintf>
 80080c4:	f000 f854 	bl	8008170 <abort>
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <__assert_func+0x38>)
 80080ca:	461c      	mov	r4, r3
 80080cc:	e7f3      	b.n	80080b6 <__assert_func+0x12>
 80080ce:	bf00      	nop
 80080d0:	20000064 	.word	0x20000064
 80080d4:	08008936 	.word	0x08008936
 80080d8:	08008943 	.word	0x08008943
 80080dc:	08008971 	.word	0x08008971

080080e0 <_calloc_r>:
 80080e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080e2:	fba1 2402 	umull	r2, r4, r1, r2
 80080e6:	b94c      	cbnz	r4, 80080fc <_calloc_r+0x1c>
 80080e8:	4611      	mov	r1, r2
 80080ea:	9201      	str	r2, [sp, #4]
 80080ec:	f7ff fb06 	bl	80076fc <_malloc_r>
 80080f0:	9a01      	ldr	r2, [sp, #4]
 80080f2:	4605      	mov	r5, r0
 80080f4:	b930      	cbnz	r0, 8008104 <_calloc_r+0x24>
 80080f6:	4628      	mov	r0, r5
 80080f8:	b003      	add	sp, #12
 80080fa:	bd30      	pop	{r4, r5, pc}
 80080fc:	220c      	movs	r2, #12
 80080fe:	6002      	str	r2, [r0, #0]
 8008100:	2500      	movs	r5, #0
 8008102:	e7f8      	b.n	80080f6 <_calloc_r+0x16>
 8008104:	4621      	mov	r1, r4
 8008106:	f7fe fb8a 	bl	800681e <memset>
 800810a:	e7f4      	b.n	80080f6 <_calloc_r+0x16>

0800810c <__ascii_mbtowc>:
 800810c:	b082      	sub	sp, #8
 800810e:	b901      	cbnz	r1, 8008112 <__ascii_mbtowc+0x6>
 8008110:	a901      	add	r1, sp, #4
 8008112:	b142      	cbz	r2, 8008126 <__ascii_mbtowc+0x1a>
 8008114:	b14b      	cbz	r3, 800812a <__ascii_mbtowc+0x1e>
 8008116:	7813      	ldrb	r3, [r2, #0]
 8008118:	600b      	str	r3, [r1, #0]
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	1e10      	subs	r0, r2, #0
 800811e:	bf18      	it	ne
 8008120:	2001      	movne	r0, #1
 8008122:	b002      	add	sp, #8
 8008124:	4770      	bx	lr
 8008126:	4610      	mov	r0, r2
 8008128:	e7fb      	b.n	8008122 <__ascii_mbtowc+0x16>
 800812a:	f06f 0001 	mvn.w	r0, #1
 800812e:	e7f8      	b.n	8008122 <__ascii_mbtowc+0x16>

08008130 <__ascii_wctomb>:
 8008130:	b149      	cbz	r1, 8008146 <__ascii_wctomb+0x16>
 8008132:	2aff      	cmp	r2, #255	; 0xff
 8008134:	bf85      	ittet	hi
 8008136:	238a      	movhi	r3, #138	; 0x8a
 8008138:	6003      	strhi	r3, [r0, #0]
 800813a:	700a      	strbls	r2, [r1, #0]
 800813c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008140:	bf98      	it	ls
 8008142:	2001      	movls	r0, #1
 8008144:	4770      	bx	lr
 8008146:	4608      	mov	r0, r1
 8008148:	4770      	bx	lr
	...

0800814c <fiprintf>:
 800814c:	b40e      	push	{r1, r2, r3}
 800814e:	b503      	push	{r0, r1, lr}
 8008150:	4601      	mov	r1, r0
 8008152:	ab03      	add	r3, sp, #12
 8008154:	4805      	ldr	r0, [pc, #20]	; (800816c <fiprintf+0x20>)
 8008156:	f853 2b04 	ldr.w	r2, [r3], #4
 800815a:	6800      	ldr	r0, [r0, #0]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	f000 f837 	bl	80081d0 <_vfiprintf_r>
 8008162:	b002      	add	sp, #8
 8008164:	f85d eb04 	ldr.w	lr, [sp], #4
 8008168:	b003      	add	sp, #12
 800816a:	4770      	bx	lr
 800816c:	20000064 	.word	0x20000064

08008170 <abort>:
 8008170:	b508      	push	{r3, lr}
 8008172:	2006      	movs	r0, #6
 8008174:	f000 fa04 	bl	8008580 <raise>
 8008178:	2001      	movs	r0, #1
 800817a:	f7f9 f8c9 	bl	8001310 <_exit>

0800817e <__sfputc_r>:
 800817e:	6893      	ldr	r3, [r2, #8]
 8008180:	3b01      	subs	r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	b410      	push	{r4}
 8008186:	6093      	str	r3, [r2, #8]
 8008188:	da08      	bge.n	800819c <__sfputc_r+0x1e>
 800818a:	6994      	ldr	r4, [r2, #24]
 800818c:	42a3      	cmp	r3, r4
 800818e:	db01      	blt.n	8008194 <__sfputc_r+0x16>
 8008190:	290a      	cmp	r1, #10
 8008192:	d103      	bne.n	800819c <__sfputc_r+0x1e>
 8008194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008198:	f000 b934 	b.w	8008404 <__swbuf_r>
 800819c:	6813      	ldr	r3, [r2, #0]
 800819e:	1c58      	adds	r0, r3, #1
 80081a0:	6010      	str	r0, [r2, #0]
 80081a2:	7019      	strb	r1, [r3, #0]
 80081a4:	4608      	mov	r0, r1
 80081a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <__sfputs_r>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	4614      	mov	r4, r2
 80081b4:	18d5      	adds	r5, r2, r3
 80081b6:	42ac      	cmp	r4, r5
 80081b8:	d101      	bne.n	80081be <__sfputs_r+0x12>
 80081ba:	2000      	movs	r0, #0
 80081bc:	e007      	b.n	80081ce <__sfputs_r+0x22>
 80081be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c2:	463a      	mov	r2, r7
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff ffda 	bl	800817e <__sfputc_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d1f3      	bne.n	80081b6 <__sfputs_r+0xa>
 80081ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081d0 <_vfiprintf_r>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	460d      	mov	r5, r1
 80081d6:	b09d      	sub	sp, #116	; 0x74
 80081d8:	4614      	mov	r4, r2
 80081da:	4698      	mov	r8, r3
 80081dc:	4606      	mov	r6, r0
 80081de:	b118      	cbz	r0, 80081e8 <_vfiprintf_r+0x18>
 80081e0:	6a03      	ldr	r3, [r0, #32]
 80081e2:	b90b      	cbnz	r3, 80081e8 <_vfiprintf_r+0x18>
 80081e4:	f7fe faa2 	bl	800672c <__sinit>
 80081e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081ea:	07d9      	lsls	r1, r3, #31
 80081ec:	d405      	bmi.n	80081fa <_vfiprintf_r+0x2a>
 80081ee:	89ab      	ldrh	r3, [r5, #12]
 80081f0:	059a      	lsls	r2, r3, #22
 80081f2:	d402      	bmi.n	80081fa <_vfiprintf_r+0x2a>
 80081f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081f6:	f7fe fb90 	bl	800691a <__retarget_lock_acquire_recursive>
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	071b      	lsls	r3, r3, #28
 80081fe:	d501      	bpl.n	8008204 <_vfiprintf_r+0x34>
 8008200:	692b      	ldr	r3, [r5, #16]
 8008202:	b99b      	cbnz	r3, 800822c <_vfiprintf_r+0x5c>
 8008204:	4629      	mov	r1, r5
 8008206:	4630      	mov	r0, r6
 8008208:	f000 f93a 	bl	8008480 <__swsetup_r>
 800820c:	b170      	cbz	r0, 800822c <_vfiprintf_r+0x5c>
 800820e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008210:	07dc      	lsls	r4, r3, #31
 8008212:	d504      	bpl.n	800821e <_vfiprintf_r+0x4e>
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	b01d      	add	sp, #116	; 0x74
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	0598      	lsls	r0, r3, #22
 8008222:	d4f7      	bmi.n	8008214 <_vfiprintf_r+0x44>
 8008224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008226:	f7fe fb79 	bl	800691c <__retarget_lock_release_recursive>
 800822a:	e7f3      	b.n	8008214 <_vfiprintf_r+0x44>
 800822c:	2300      	movs	r3, #0
 800822e:	9309      	str	r3, [sp, #36]	; 0x24
 8008230:	2320      	movs	r3, #32
 8008232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008236:	f8cd 800c 	str.w	r8, [sp, #12]
 800823a:	2330      	movs	r3, #48	; 0x30
 800823c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80083f0 <_vfiprintf_r+0x220>
 8008240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008244:	f04f 0901 	mov.w	r9, #1
 8008248:	4623      	mov	r3, r4
 800824a:	469a      	mov	sl, r3
 800824c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008250:	b10a      	cbz	r2, 8008256 <_vfiprintf_r+0x86>
 8008252:	2a25      	cmp	r2, #37	; 0x25
 8008254:	d1f9      	bne.n	800824a <_vfiprintf_r+0x7a>
 8008256:	ebba 0b04 	subs.w	fp, sl, r4
 800825a:	d00b      	beq.n	8008274 <_vfiprintf_r+0xa4>
 800825c:	465b      	mov	r3, fp
 800825e:	4622      	mov	r2, r4
 8008260:	4629      	mov	r1, r5
 8008262:	4630      	mov	r0, r6
 8008264:	f7ff ffa2 	bl	80081ac <__sfputs_r>
 8008268:	3001      	adds	r0, #1
 800826a:	f000 80a9 	beq.w	80083c0 <_vfiprintf_r+0x1f0>
 800826e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008270:	445a      	add	r2, fp
 8008272:	9209      	str	r2, [sp, #36]	; 0x24
 8008274:	f89a 3000 	ldrb.w	r3, [sl]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80a1 	beq.w	80083c0 <_vfiprintf_r+0x1f0>
 800827e:	2300      	movs	r3, #0
 8008280:	f04f 32ff 	mov.w	r2, #4294967295
 8008284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008288:	f10a 0a01 	add.w	sl, sl, #1
 800828c:	9304      	str	r3, [sp, #16]
 800828e:	9307      	str	r3, [sp, #28]
 8008290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008294:	931a      	str	r3, [sp, #104]	; 0x68
 8008296:	4654      	mov	r4, sl
 8008298:	2205      	movs	r2, #5
 800829a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829e:	4854      	ldr	r0, [pc, #336]	; (80083f0 <_vfiprintf_r+0x220>)
 80082a0:	f7f7 ff96 	bl	80001d0 <memchr>
 80082a4:	9a04      	ldr	r2, [sp, #16]
 80082a6:	b9d8      	cbnz	r0, 80082e0 <_vfiprintf_r+0x110>
 80082a8:	06d1      	lsls	r1, r2, #27
 80082aa:	bf44      	itt	mi
 80082ac:	2320      	movmi	r3, #32
 80082ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082b2:	0713      	lsls	r3, r2, #28
 80082b4:	bf44      	itt	mi
 80082b6:	232b      	movmi	r3, #43	; 0x2b
 80082b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082bc:	f89a 3000 	ldrb.w	r3, [sl]
 80082c0:	2b2a      	cmp	r3, #42	; 0x2a
 80082c2:	d015      	beq.n	80082f0 <_vfiprintf_r+0x120>
 80082c4:	9a07      	ldr	r2, [sp, #28]
 80082c6:	4654      	mov	r4, sl
 80082c8:	2000      	movs	r0, #0
 80082ca:	f04f 0c0a 	mov.w	ip, #10
 80082ce:	4621      	mov	r1, r4
 80082d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d4:	3b30      	subs	r3, #48	; 0x30
 80082d6:	2b09      	cmp	r3, #9
 80082d8:	d94d      	bls.n	8008376 <_vfiprintf_r+0x1a6>
 80082da:	b1b0      	cbz	r0, 800830a <_vfiprintf_r+0x13a>
 80082dc:	9207      	str	r2, [sp, #28]
 80082de:	e014      	b.n	800830a <_vfiprintf_r+0x13a>
 80082e0:	eba0 0308 	sub.w	r3, r0, r8
 80082e4:	fa09 f303 	lsl.w	r3, r9, r3
 80082e8:	4313      	orrs	r3, r2
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	46a2      	mov	sl, r4
 80082ee:	e7d2      	b.n	8008296 <_vfiprintf_r+0xc6>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	1d19      	adds	r1, r3, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	9103      	str	r1, [sp, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bfbb      	ittet	lt
 80082fc:	425b      	neglt	r3, r3
 80082fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008302:	9307      	strge	r3, [sp, #28]
 8008304:	9307      	strlt	r3, [sp, #28]
 8008306:	bfb8      	it	lt
 8008308:	9204      	strlt	r2, [sp, #16]
 800830a:	7823      	ldrb	r3, [r4, #0]
 800830c:	2b2e      	cmp	r3, #46	; 0x2e
 800830e:	d10c      	bne.n	800832a <_vfiprintf_r+0x15a>
 8008310:	7863      	ldrb	r3, [r4, #1]
 8008312:	2b2a      	cmp	r3, #42	; 0x2a
 8008314:	d134      	bne.n	8008380 <_vfiprintf_r+0x1b0>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	1d1a      	adds	r2, r3, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	9203      	str	r2, [sp, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	bfb8      	it	lt
 8008322:	f04f 33ff 	movlt.w	r3, #4294967295
 8008326:	3402      	adds	r4, #2
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008400 <_vfiprintf_r+0x230>
 800832e:	7821      	ldrb	r1, [r4, #0]
 8008330:	2203      	movs	r2, #3
 8008332:	4650      	mov	r0, sl
 8008334:	f7f7 ff4c 	bl	80001d0 <memchr>
 8008338:	b138      	cbz	r0, 800834a <_vfiprintf_r+0x17a>
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	eba0 000a 	sub.w	r0, r0, sl
 8008340:	2240      	movs	r2, #64	; 0x40
 8008342:	4082      	lsls	r2, r0
 8008344:	4313      	orrs	r3, r2
 8008346:	3401      	adds	r4, #1
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834e:	4829      	ldr	r0, [pc, #164]	; (80083f4 <_vfiprintf_r+0x224>)
 8008350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008354:	2206      	movs	r2, #6
 8008356:	f7f7 ff3b 	bl	80001d0 <memchr>
 800835a:	2800      	cmp	r0, #0
 800835c:	d03f      	beq.n	80083de <_vfiprintf_r+0x20e>
 800835e:	4b26      	ldr	r3, [pc, #152]	; (80083f8 <_vfiprintf_r+0x228>)
 8008360:	bb1b      	cbnz	r3, 80083aa <_vfiprintf_r+0x1da>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	3307      	adds	r3, #7
 8008366:	f023 0307 	bic.w	r3, r3, #7
 800836a:	3308      	adds	r3, #8
 800836c:	9303      	str	r3, [sp, #12]
 800836e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008370:	443b      	add	r3, r7
 8008372:	9309      	str	r3, [sp, #36]	; 0x24
 8008374:	e768      	b.n	8008248 <_vfiprintf_r+0x78>
 8008376:	fb0c 3202 	mla	r2, ip, r2, r3
 800837a:	460c      	mov	r4, r1
 800837c:	2001      	movs	r0, #1
 800837e:	e7a6      	b.n	80082ce <_vfiprintf_r+0xfe>
 8008380:	2300      	movs	r3, #0
 8008382:	3401      	adds	r4, #1
 8008384:	9305      	str	r3, [sp, #20]
 8008386:	4619      	mov	r1, r3
 8008388:	f04f 0c0a 	mov.w	ip, #10
 800838c:	4620      	mov	r0, r4
 800838e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008392:	3a30      	subs	r2, #48	; 0x30
 8008394:	2a09      	cmp	r2, #9
 8008396:	d903      	bls.n	80083a0 <_vfiprintf_r+0x1d0>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0c6      	beq.n	800832a <_vfiprintf_r+0x15a>
 800839c:	9105      	str	r1, [sp, #20]
 800839e:	e7c4      	b.n	800832a <_vfiprintf_r+0x15a>
 80083a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083a4:	4604      	mov	r4, r0
 80083a6:	2301      	movs	r3, #1
 80083a8:	e7f0      	b.n	800838c <_vfiprintf_r+0x1bc>
 80083aa:	ab03      	add	r3, sp, #12
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	462a      	mov	r2, r5
 80083b0:	4b12      	ldr	r3, [pc, #72]	; (80083fc <_vfiprintf_r+0x22c>)
 80083b2:	a904      	add	r1, sp, #16
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7fd fd67 	bl	8005e88 <_printf_float>
 80083ba:	4607      	mov	r7, r0
 80083bc:	1c78      	adds	r0, r7, #1
 80083be:	d1d6      	bne.n	800836e <_vfiprintf_r+0x19e>
 80083c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083c2:	07d9      	lsls	r1, r3, #31
 80083c4:	d405      	bmi.n	80083d2 <_vfiprintf_r+0x202>
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	059a      	lsls	r2, r3, #22
 80083ca:	d402      	bmi.n	80083d2 <_vfiprintf_r+0x202>
 80083cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ce:	f7fe faa5 	bl	800691c <__retarget_lock_release_recursive>
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	065b      	lsls	r3, r3, #25
 80083d6:	f53f af1d 	bmi.w	8008214 <_vfiprintf_r+0x44>
 80083da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083dc:	e71c      	b.n	8008218 <_vfiprintf_r+0x48>
 80083de:	ab03      	add	r3, sp, #12
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	462a      	mov	r2, r5
 80083e4:	4b05      	ldr	r3, [pc, #20]	; (80083fc <_vfiprintf_r+0x22c>)
 80083e6:	a904      	add	r1, sp, #16
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7fd fff1 	bl	80063d0 <_printf_i>
 80083ee:	e7e4      	b.n	80083ba <_vfiprintf_r+0x1ea>
 80083f0:	08008a73 	.word	0x08008a73
 80083f4:	08008a7d 	.word	0x08008a7d
 80083f8:	08005e89 	.word	0x08005e89
 80083fc:	080081ad 	.word	0x080081ad
 8008400:	08008a79 	.word	0x08008a79

08008404 <__swbuf_r>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	460e      	mov	r6, r1
 8008408:	4614      	mov	r4, r2
 800840a:	4605      	mov	r5, r0
 800840c:	b118      	cbz	r0, 8008416 <__swbuf_r+0x12>
 800840e:	6a03      	ldr	r3, [r0, #32]
 8008410:	b90b      	cbnz	r3, 8008416 <__swbuf_r+0x12>
 8008412:	f7fe f98b 	bl	800672c <__sinit>
 8008416:	69a3      	ldr	r3, [r4, #24]
 8008418:	60a3      	str	r3, [r4, #8]
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	071a      	lsls	r2, r3, #28
 800841e:	d525      	bpl.n	800846c <__swbuf_r+0x68>
 8008420:	6923      	ldr	r3, [r4, #16]
 8008422:	b31b      	cbz	r3, 800846c <__swbuf_r+0x68>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	6922      	ldr	r2, [r4, #16]
 8008428:	1a98      	subs	r0, r3, r2
 800842a:	6963      	ldr	r3, [r4, #20]
 800842c:	b2f6      	uxtb	r6, r6
 800842e:	4283      	cmp	r3, r0
 8008430:	4637      	mov	r7, r6
 8008432:	dc04      	bgt.n	800843e <__swbuf_r+0x3a>
 8008434:	4621      	mov	r1, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f7ff fdee 	bl	8008018 <_fflush_r>
 800843c:	b9e0      	cbnz	r0, 8008478 <__swbuf_r+0x74>
 800843e:	68a3      	ldr	r3, [r4, #8]
 8008440:	3b01      	subs	r3, #1
 8008442:	60a3      	str	r3, [r4, #8]
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	6022      	str	r2, [r4, #0]
 800844a:	701e      	strb	r6, [r3, #0]
 800844c:	6962      	ldr	r2, [r4, #20]
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	429a      	cmp	r2, r3
 8008452:	d004      	beq.n	800845e <__swbuf_r+0x5a>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	07db      	lsls	r3, r3, #31
 8008458:	d506      	bpl.n	8008468 <__swbuf_r+0x64>
 800845a:	2e0a      	cmp	r6, #10
 800845c:	d104      	bne.n	8008468 <__swbuf_r+0x64>
 800845e:	4621      	mov	r1, r4
 8008460:	4628      	mov	r0, r5
 8008462:	f7ff fdd9 	bl	8008018 <_fflush_r>
 8008466:	b938      	cbnz	r0, 8008478 <__swbuf_r+0x74>
 8008468:	4638      	mov	r0, r7
 800846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f806 	bl	8008480 <__swsetup_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	d0d5      	beq.n	8008424 <__swbuf_r+0x20>
 8008478:	f04f 37ff 	mov.w	r7, #4294967295
 800847c:	e7f4      	b.n	8008468 <__swbuf_r+0x64>
	...

08008480 <__swsetup_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4b2a      	ldr	r3, [pc, #168]	; (800852c <__swsetup_r+0xac>)
 8008484:	4605      	mov	r5, r0
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	460c      	mov	r4, r1
 800848a:	b118      	cbz	r0, 8008494 <__swsetup_r+0x14>
 800848c:	6a03      	ldr	r3, [r0, #32]
 800848e:	b90b      	cbnz	r3, 8008494 <__swsetup_r+0x14>
 8008490:	f7fe f94c 	bl	800672c <__sinit>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800849a:	0718      	lsls	r0, r3, #28
 800849c:	d422      	bmi.n	80084e4 <__swsetup_r+0x64>
 800849e:	06d9      	lsls	r1, r3, #27
 80084a0:	d407      	bmi.n	80084b2 <__swsetup_r+0x32>
 80084a2:	2309      	movs	r3, #9
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	e034      	b.n	800851c <__swsetup_r+0x9c>
 80084b2:	0758      	lsls	r0, r3, #29
 80084b4:	d512      	bpl.n	80084dc <__swsetup_r+0x5c>
 80084b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084b8:	b141      	cbz	r1, 80084cc <__swsetup_r+0x4c>
 80084ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084be:	4299      	cmp	r1, r3
 80084c0:	d002      	beq.n	80084c8 <__swsetup_r+0x48>
 80084c2:	4628      	mov	r0, r5
 80084c4:	f7ff f8a6 	bl	8007614 <_free_r>
 80084c8:	2300      	movs	r3, #0
 80084ca:	6363      	str	r3, [r4, #52]	; 0x34
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084d2:	81a3      	strh	r3, [r4, #12]
 80084d4:	2300      	movs	r3, #0
 80084d6:	6063      	str	r3, [r4, #4]
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	6023      	str	r3, [r4, #0]
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f043 0308 	orr.w	r3, r3, #8
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	b94b      	cbnz	r3, 80084fc <__swsetup_r+0x7c>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f2:	d003      	beq.n	80084fc <__swsetup_r+0x7c>
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 f884 	bl	8008604 <__smakebuf_r>
 80084fc:	89a0      	ldrh	r0, [r4, #12]
 80084fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008502:	f010 0301 	ands.w	r3, r0, #1
 8008506:	d00a      	beq.n	800851e <__swsetup_r+0x9e>
 8008508:	2300      	movs	r3, #0
 800850a:	60a3      	str	r3, [r4, #8]
 800850c:	6963      	ldr	r3, [r4, #20]
 800850e:	425b      	negs	r3, r3
 8008510:	61a3      	str	r3, [r4, #24]
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	b943      	cbnz	r3, 8008528 <__swsetup_r+0xa8>
 8008516:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800851a:	d1c4      	bne.n	80084a6 <__swsetup_r+0x26>
 800851c:	bd38      	pop	{r3, r4, r5, pc}
 800851e:	0781      	lsls	r1, r0, #30
 8008520:	bf58      	it	pl
 8008522:	6963      	ldrpl	r3, [r4, #20]
 8008524:	60a3      	str	r3, [r4, #8]
 8008526:	e7f4      	b.n	8008512 <__swsetup_r+0x92>
 8008528:	2000      	movs	r0, #0
 800852a:	e7f7      	b.n	800851c <__swsetup_r+0x9c>
 800852c:	20000064 	.word	0x20000064

08008530 <_raise_r>:
 8008530:	291f      	cmp	r1, #31
 8008532:	b538      	push	{r3, r4, r5, lr}
 8008534:	4604      	mov	r4, r0
 8008536:	460d      	mov	r5, r1
 8008538:	d904      	bls.n	8008544 <_raise_r+0x14>
 800853a:	2316      	movs	r3, #22
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	f04f 30ff 	mov.w	r0, #4294967295
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008546:	b112      	cbz	r2, 800854e <_raise_r+0x1e>
 8008548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800854c:	b94b      	cbnz	r3, 8008562 <_raise_r+0x32>
 800854e:	4620      	mov	r0, r4
 8008550:	f000 f830 	bl	80085b4 <_getpid_r>
 8008554:	462a      	mov	r2, r5
 8008556:	4601      	mov	r1, r0
 8008558:	4620      	mov	r0, r4
 800855a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855e:	f000 b817 	b.w	8008590 <_kill_r>
 8008562:	2b01      	cmp	r3, #1
 8008564:	d00a      	beq.n	800857c <_raise_r+0x4c>
 8008566:	1c59      	adds	r1, r3, #1
 8008568:	d103      	bne.n	8008572 <_raise_r+0x42>
 800856a:	2316      	movs	r3, #22
 800856c:	6003      	str	r3, [r0, #0]
 800856e:	2001      	movs	r0, #1
 8008570:	e7e7      	b.n	8008542 <_raise_r+0x12>
 8008572:	2400      	movs	r4, #0
 8008574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008578:	4628      	mov	r0, r5
 800857a:	4798      	blx	r3
 800857c:	2000      	movs	r0, #0
 800857e:	e7e0      	b.n	8008542 <_raise_r+0x12>

08008580 <raise>:
 8008580:	4b02      	ldr	r3, [pc, #8]	; (800858c <raise+0xc>)
 8008582:	4601      	mov	r1, r0
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f7ff bfd3 	b.w	8008530 <_raise_r>
 800858a:	bf00      	nop
 800858c:	20000064 	.word	0x20000064

08008590 <_kill_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d07      	ldr	r5, [pc, #28]	; (80085b0 <_kill_r+0x20>)
 8008594:	2300      	movs	r3, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	4611      	mov	r1, r2
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	f7f8 fea7 	bl	80012f0 <_kill>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d102      	bne.n	80085ac <_kill_r+0x1c>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	b103      	cbz	r3, 80085ac <_kill_r+0x1c>
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	bd38      	pop	{r3, r4, r5, pc}
 80085ae:	bf00      	nop
 80085b0:	2000046c 	.word	0x2000046c

080085b4 <_getpid_r>:
 80085b4:	f7f8 be94 	b.w	80012e0 <_getpid>

080085b8 <__swhatbuf_r>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	460c      	mov	r4, r1
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	2900      	cmp	r1, #0
 80085c2:	b096      	sub	sp, #88	; 0x58
 80085c4:	4615      	mov	r5, r2
 80085c6:	461e      	mov	r6, r3
 80085c8:	da0d      	bge.n	80085e6 <__swhatbuf_r+0x2e>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80085d0:	f04f 0100 	mov.w	r1, #0
 80085d4:	bf0c      	ite	eq
 80085d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80085da:	2340      	movne	r3, #64	; 0x40
 80085dc:	2000      	movs	r0, #0
 80085de:	6031      	str	r1, [r6, #0]
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	b016      	add	sp, #88	; 0x58
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
 80085e6:	466a      	mov	r2, sp
 80085e8:	f000 f848 	bl	800867c <_fstat_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	dbec      	blt.n	80085ca <__swhatbuf_r+0x12>
 80085f0:	9901      	ldr	r1, [sp, #4]
 80085f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80085f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80085fa:	4259      	negs	r1, r3
 80085fc:	4159      	adcs	r1, r3
 80085fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008602:	e7eb      	b.n	80085dc <__swhatbuf_r+0x24>

08008604 <__smakebuf_r>:
 8008604:	898b      	ldrh	r3, [r1, #12]
 8008606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008608:	079d      	lsls	r5, r3, #30
 800860a:	4606      	mov	r6, r0
 800860c:	460c      	mov	r4, r1
 800860e:	d507      	bpl.n	8008620 <__smakebuf_r+0x1c>
 8008610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	2301      	movs	r3, #1
 800861a:	6163      	str	r3, [r4, #20]
 800861c:	b002      	add	sp, #8
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	ab01      	add	r3, sp, #4
 8008622:	466a      	mov	r2, sp
 8008624:	f7ff ffc8 	bl	80085b8 <__swhatbuf_r>
 8008628:	9900      	ldr	r1, [sp, #0]
 800862a:	4605      	mov	r5, r0
 800862c:	4630      	mov	r0, r6
 800862e:	f7ff f865 	bl	80076fc <_malloc_r>
 8008632:	b948      	cbnz	r0, 8008648 <__smakebuf_r+0x44>
 8008634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008638:	059a      	lsls	r2, r3, #22
 800863a:	d4ef      	bmi.n	800861c <__smakebuf_r+0x18>
 800863c:	f023 0303 	bic.w	r3, r3, #3
 8008640:	f043 0302 	orr.w	r3, r3, #2
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	e7e3      	b.n	8008610 <__smakebuf_r+0xc>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	6020      	str	r0, [r4, #0]
 800864c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	9b00      	ldr	r3, [sp, #0]
 8008654:	6163      	str	r3, [r4, #20]
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	6120      	str	r0, [r4, #16]
 800865a:	b15b      	cbz	r3, 8008674 <__smakebuf_r+0x70>
 800865c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008660:	4630      	mov	r0, r6
 8008662:	f000 f81d 	bl	80086a0 <_isatty_r>
 8008666:	b128      	cbz	r0, 8008674 <__smakebuf_r+0x70>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f023 0303 	bic.w	r3, r3, #3
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	431d      	orrs	r5, r3
 8008678:	81a5      	strh	r5, [r4, #12]
 800867a:	e7cf      	b.n	800861c <__smakebuf_r+0x18>

0800867c <_fstat_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	; (800869c <_fstat_r+0x20>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	4611      	mov	r1, r2
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	f7f8 fe90 	bl	80013ae <_fstat>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d102      	bne.n	8008698 <_fstat_r+0x1c>
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	b103      	cbz	r3, 8008698 <_fstat_r+0x1c>
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	bd38      	pop	{r3, r4, r5, pc}
 800869a:	bf00      	nop
 800869c:	2000046c 	.word	0x2000046c

080086a0 <_isatty_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d06      	ldr	r5, [pc, #24]	; (80086bc <_isatty_r+0x1c>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7f8 fe8f 	bl	80013ce <_isatty>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_isatty_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_isatty_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	2000046c 	.word	0x2000046c

080086c0 <_init>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr

080086cc <_fini>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	bf00      	nop
 80086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	469e      	mov	lr, r3
 80086d6:	4770      	bx	lr
