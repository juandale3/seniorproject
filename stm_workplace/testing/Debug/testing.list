
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08008e50  08008e50  00018e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091fc  080091fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080091fc  080091fc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091fc  080091fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091fc  080091fc  000191fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000002b0  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000490  20000490  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012c45  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000297e  00000000  00000000  00032e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001090  00000000  00000000  00035818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ce7  00000000  00000000  000368a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d91c  00000000  00000000  0003758f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015056  00000000  00000000  00054eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000af7cc  00000000  00000000  00069f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005588  00000000  00000000  001196d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  0011ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e38 	.word	0x08008e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008e38 	.word	0x08008e38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fca8 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f81a 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f9b4 	bl	8000f20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb8:	f000 f982 	bl	8000ec0 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000bbc:	f000 f8dc 	bl	8000d78 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000bc0:	f000 f86a 	bl	8000c98 <MX_ADC1_Init>
  MX_TIM17_Init();
 8000bc4:	f000 f902 	bl	8000dcc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <main+0x34>)
 8000bcc:	f003 fa52 	bl	8004074 <HAL_TIM_PWM_Start_IT>
//  HAL_TIM_PWM_PulseFinishedCallback(&htim17);
//  HAL_TIM_Base_Start_IT(&htim17);
  HAL_UART_Receive_IT(&huart2, (uint8_t *)msg, 5);
 8000bd0:	2205      	movs	r2, #5
 8000bd2:	4903      	ldr	r1, [pc, #12]	; (8000be0 <main+0x38>)
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <main+0x3c>)
 8000bd6:	f004 fa69 	bl	80050ac <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <main+0x32>
 8000bdc:	20000260 	.word	0x20000260
 8000be0:	20000334 	.word	0x20000334
 8000be4:	200002ac 	.word	0x200002ac

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b096      	sub	sp, #88	; 0x58
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf2:	2228      	movs	r2, #40	; 0x28
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f006 f9cd 	bl	8006f96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	2310      	movs	r3, #16
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fdc8 	bl	80027d0 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c46:	f000 f9cf 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fdf1 	bl	800384c <HAL_RCC_ClockConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c70:	f000 f9ba 	bl	8000fe8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 f819 	bl	8003cb8 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c8c:	f000 f9ac 	bl	8000fe8 <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3758      	adds	r7, #88	; 0x58
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cda:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000d04:	2204      	movs	r2, #4
 8000d06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d14:	4817      	ldr	r0, [pc, #92]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000d16:	f000 fc59 	bl	80015cc <HAL_ADC_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f000 f962 	bl	8000fe8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000d30:	f001 f89c 	bl	8001e6c <HAL_ADCEx_MultiModeConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d3a:	f000 f955 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_ADC1_Init+0xdc>)
 8000d5c:	f000 fdc8 	bl	80018f0 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d66:	f000 f93f 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200001fc 	.word	0x200001fc

08000d78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_DAC1_Init+0x4c>)
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <MX_DAC1_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_DAC1_Init+0x4c>)
 8000d90:	f001 faa9 	bl	80022e6 <HAL_DAC_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000d9a:	f000 f925 	bl	8000fe8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_DAC1_Init+0x4c>)
 8000dae:	f001 fabd 	bl	800232c <HAL_DAC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000db8:	f000 f916 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000024c 	.word	0x2000024c
 8000dc8:	40007400 	.word	0x40007400

08000dcc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b092      	sub	sp, #72	; 0x48
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	615a      	str	r2, [r3, #20]
 8000de4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	222c      	movs	r2, #44	; 0x2c
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f006 f8d2 	bl	8006f96 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <MX_TIM17_Init+0xf0>)
 8000df6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 256 - 1;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e06:	22ff      	movs	r2, #255	; 0xff
 8000e08:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e1c:	4826      	ldr	r0, [pc, #152]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e1e:	f003 f871 	bl	8003f04 <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000e28:	f000 f8de 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e2c:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e2e:	f003 f8c0 	bl	8003fb2 <HAL_TIM_PWM_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000e38:	f000 f8d6 	bl	8000fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3c:	2360      	movs	r3, #96	; 0x60
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 10000 - 1;
 8000e40:	f242 730f 	movw	r3, #9999	; 0x270f
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e64:	f003 fb60 	bl	8004528 <HAL_TIM_PWM_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000e6e:	f000 f8bb 	bl	8000fe8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000e9a:	f003 ffc5 	bl	8004e28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000ea4:	f000 f8a0 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <MX_TIM17_Init+0xec>)
 8000eaa:	f000 f967 	bl	800117c <HAL_TIM_MspPostInit>

}
 8000eae:	bf00      	nop
 8000eb0:	3748      	adds	r7, #72	; 0x48
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000260 	.word	0x20000260
 8000ebc:	40014800 	.word	0x40014800

08000ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <MX_USART2_UART_Init+0x5c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ecc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000f04:	f004 f826 	bl	8004f54 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f000 f86b 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200002ac 	.word	0x200002ac
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f40:	6153      	str	r3, [r2, #20]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_GPIO_Init+0x68>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8000f66:	232a      	movs	r3, #42	; 0x2a
 8000f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f001 fab6 	bl	80024ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	if(htim == &htim17){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d103      	bne.n	8000fa4 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000fa0:	f003 f868 	bl	8004074 <HAL_TIM_PWM_Start_IT>
	}

}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000260 	.word	0x20000260

08000fb0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    if (huart == &huart2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_UART_RxCpltCallback+0x2c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d109      	bne.n	8000fd4 <HAL_UART_RxCpltCallback+0x24>
    {
        // Echo received data back
        HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, 20);
 8000fc0:	2214      	movs	r2, #20
 8000fc2:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <HAL_UART_RxCpltCallback+0x30>)
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_UART_RxCpltCallback+0x2c>)
 8000fc6:	f004 f813 	bl	8004ff0 <HAL_UART_Transmit_IT>

        // Start a new receive operation
        HAL_UART_Receive_IT(&huart2, (uint8_t*)msg, 5);
 8000fca:	2205      	movs	r2, #5
 8000fcc:	4905      	ldr	r1, [pc, #20]	; (8000fe4 <HAL_UART_RxCpltCallback+0x34>)
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <HAL_UART_RxCpltCallback+0x2c>)
 8000fd0:	f004 f86c 	bl	80050ac <HAL_UART_Receive_IT>
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200002ac 	.word	0x200002ac
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000334 	.word	0x20000334

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x44>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_MspInit+0x44>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x44>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x44>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800105c:	d124      	bne.n	80010a8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	6153      	str	r3, [r2, #20]
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f001 fa22 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_DAC_MspInit+0x74>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d124      	bne.n	8001120 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_DAC_MspInit+0x78>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001106:	2310      	movs	r3, #16
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f001 f9e6 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40007400 	.word	0x40007400
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_TIM_Base_MspInit+0x44>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d113      	bne.n	800116a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6193      	str	r3, [r2, #24]
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_TIM_Base_MspInit+0x48>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	201a      	movs	r0, #26
 8001160:	f001 f88b 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001164:	201a      	movs	r0, #26
 8001166:	f001 f8a4 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40014800 	.word	0x40014800
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_TIM_MspPostInit+0x64>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d11c      	bne.n	80011d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_TIM_MspPostInit+0x68>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_TIM_MspPostInit+0x68>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_TIM_MspPostInit+0x68>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f001 f98a 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40014800 	.word	0x40014800
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <HAL_UART_MspInit+0x90>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d131      	bne.n	800126e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <HAL_UART_MspInit+0x94>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_UART_MspInit+0x94>)
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_UART_MspInit+0x94>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_UART_MspInit+0x94>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <HAL_UART_MspInit+0x94>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	6153      	str	r3, [r2, #20]
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_UART_MspInit+0x94>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800123a:	f248 0304 	movw	r3, #32772	; 0x8004
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124c:	2307      	movs	r3, #7
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f001 f947 	bl	80024ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2026      	movs	r0, #38	; 0x26
 8001264:	f001 f809 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001268:	2026      	movs	r0, #38	; 0x26
 800126a:	f001 f822 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40004400 	.word	0x40004400
 800127c:	40021000 	.word	0x40021000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f95e 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012da:	f003 f805 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000260 	.word	0x20000260

080012e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <USART2_IRQHandler+0x10>)
 80012ee:	f003 ff21 	bl	8005134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002ac 	.word	0x200002ac

080012fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_kill>:

int _kill(int pid, int sig)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001316:	f005 fe91 	bl	800703c <__errno>
 800131a:	4603      	mov	r3, r0
 800131c:	2216      	movs	r2, #22
 800131e:	601a      	str	r2, [r3, #0]
  return -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_exit>:

void _exit (int status)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffe7 	bl	800130c <_kill>
  while (1) {}    /* Make sure we hang here */
 800133e:	e7fe      	b.n	800133e <_exit+0x12>

08001340 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	4601      	mov	r1, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf0      	blt.n	8001352 <_read+0x12>
  }

  return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e009      	b.n	80013a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf1      	blt.n	800138c <_write+0x12>
  }
  return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_close>:

int _close(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013da:	605a      	str	r2, [r3, #4]
  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_isatty>:

int _isatty(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f005 fdf6 	bl	800703c <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20003000 	.word	0x20003000
 800147c:	00000400 	.word	0x00000400
 8001480:	2000033c 	.word	0x2000033c
 8001484:	20000490 	.word	0x20000490

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopForever+0x2>
 80014b0:	f7ff ffea 	bl	8001488 <SystemInit>
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <LoopForever+0x6>)
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <LoopForever+0xa>)
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <LoopForever+0xe>)
 80014ba:	2300      	movs	r3, #0
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:
 80014be:	58d4      	ldr	r4, [r2, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:
 80014c4:	18c4      	adds	r4, r0, r3
 80014c6:	428c      	cmp	r4, r1
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <LoopForever+0x12>)
 80014cc:	4c0a      	ldr	r4, [pc, #40]	; (80014f8 <LoopForever+0x16>)
 80014ce:	2300      	movs	r3, #0
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:
 80014d6:	42a2      	cmp	r2, r4
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>
 80014da:	f005 fdb5 	bl	8007048 <__libc_init_array>
 80014de:	f7ff fb63 	bl	8000ba8 <main>

080014e2 <LoopForever>:
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
 80014e4:	20003000 	.word	0x20003000
 80014e8:	20000000 	.word	0x20000000
 80014ec:	200001e0 	.word	0x200001e0
 80014f0:	08009204 	.word	0x08009204
 80014f4:	200001e0 	.word	0x200001e0
 80014f8:	20000490 	.word	0x20000490

080014fc <ADC1_2_IRQHandler>:
 80014fc:	e7fe      	b.n	80014fc <ADC1_2_IRQHandler>
	...

08001500 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_Init+0x28>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <HAL_Init+0x28>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 fea7 	bl	8002264 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	2000      	movs	r0, #0
 8001518:	f000 f808 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fd6a 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 febf 	bl	80022ce <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 fe87 	bl	800227a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	; (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000000c 	.word	0x2000000c
 8001584:	20000014 	.word	0x20000014
 8001588:	20000010 	.word	0x20000010

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000014 	.word	0x20000014
 80015b0:	20000340 	.word	0x20000340

080015b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000340 	.word	0x20000340

080015cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b09a      	sub	sp, #104	; 0x68
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e172      	b.n	80018d2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d176      	bne.n	80016ec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d152      	bne.n	80016ac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fd0b 	bl	800103c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d13b      	bne.n	80016ac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fcdf 	bl	8001ff8 <ADC_Disable>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d12f      	bne.n	80016ac <HAL_ADC_Init+0xe0>
 800164c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001650:	2b00      	cmp	r3, #0
 8001652:	d12b      	bne.n	80016ac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800165c:	f023 0302 	bic.w	r3, r3, #2
 8001660:	f043 0202 	orr.w	r2, r3, #2
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001676:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001686:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001688:	4b94      	ldr	r3, [pc, #592]	; (80018dc <HAL_ADC_Init+0x310>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a94      	ldr	r2, [pc, #592]	; (80018e0 <HAL_ADC_Init+0x314>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9a      	lsrs	r2, r3, #18
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800169e:	e002      	b.n	80016a6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f9      	bne.n	80016a0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016c8:	d110      	bne.n	80016ec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f023 0312 	bic.w	r3, r3, #18
 80016d2:	f043 0210 	orr.w	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f040 80df 	bne.w	80018b8 <HAL_ADC_Init+0x2ec>
 80016fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 80da 	bne.w	80018b8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 80d2 	bne.w	80018b8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800171c:	f043 0202 	orr.w	r2, r3, #2
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001724:	4b6f      	ldr	r3, [pc, #444]	; (80018e4 <HAL_ADC_Init+0x318>)
 8001726:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001730:	d102      	bne.n	8001738 <HAL_ADC_Init+0x16c>
 8001732:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <HAL_ADC_Init+0x31c>)
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e002      	b.n	800173e <HAL_ADC_Init+0x172>
 8001738:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800173c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d108      	bne.n	800175e <HAL_ADC_Init+0x192>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_ADC_Init+0x192>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_ADC_Init+0x194>
 800175e:	2300      	movs	r3, #0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11c      	bne.n	800179e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001764:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_ADC_Init+0x1ba>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Init+0x1ba>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_ADC_Init+0x1bc>
 8001786:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001788:	2b00      	cmp	r3, #0
 800178a:	d108      	bne.n	800179e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800178c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	431a      	orrs	r2, r3
 800179a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7e5b      	ldrb	r3, [r3, #25]
 80017a2:	035b      	lsls	r3, r3, #13
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017a8:	2a01      	cmp	r2, #1
 80017aa:	d002      	beq.n	80017b2 <HAL_ADC_Init+0x1e6>
 80017ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b0:	e000      	b.n	80017b4 <HAL_ADC_Init+0x1e8>
 80017b2:	2200      	movs	r2, #0
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c4:	4313      	orrs	r3, r2
 80017c6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d11b      	bne.n	800180a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7e5b      	ldrb	r3, [r3, #25]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	3b01      	subs	r3, #1
 80017e0:	045a      	lsls	r2, r3, #17
 80017e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017e4:	4313      	orrs	r3, r2
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ea:	663b      	str	r3, [r7, #96]	; 0x60
 80017ec:	e00d      	b.n	800180a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017f6:	f043 0220 	orr.w	r2, r3, #32
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	2b01      	cmp	r3, #1
 8001810:	d007      	beq.n	8001822 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	4313      	orrs	r3, r2
 800181c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800181e:	4313      	orrs	r3, r2
 8001820:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b00      	cmp	r3, #0
 800182e:	d114      	bne.n	800185a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800183e:	f023 0302 	bic.w	r3, r3, #2
 8001842:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7e1b      	ldrb	r3, [r3, #24]
 8001848:	039a      	lsls	r2, r3, #14
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4313      	orrs	r3, r2
 8001854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001856:	4313      	orrs	r3, r2
 8001858:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_ADC_Init+0x320>)
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800186a:	430b      	orrs	r3, r1
 800186c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10c      	bne.n	8001890 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f023 010f 	bic.w	r1, r3, #15
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
 800188e:	e007      	b.n	80018a0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 020f 	bic.w	r2, r2, #15
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	f043 0201 	orr.w	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
 80018b6:	e00a      	b.n	80018ce <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f023 0312 	bic.w	r3, r3, #18
 80018c0:	f043 0210 	orr.w	r2, r3, #16
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80018ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3768      	adds	r7, #104	; 0x68
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	50000300 	.word	0x50000300
 80018e8:	50000100 	.word	0x50000100
 80018ec:	fff0c007 	.word	0xfff0c007

080018f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b09b      	sub	sp, #108	; 0x6c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x22>
 800190e:	2302      	movs	r3, #2
 8001910:	e2a1      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x566>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 8285 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d81c      	bhi.n	800196c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	461a      	mov	r2, r3
 8001946:	231f      	movs	r3, #31
 8001948:	4093      	lsls	r3, r2
 800194a:	43db      	mvns	r3, r3
 800194c:	4019      	ands	r1, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa00 f203 	lsl.w	r2, r0, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
 800196a:	e063      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d81e      	bhi.n	80019b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	3b1e      	subs	r3, #30
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	4019      	ands	r1, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	3b1e      	subs	r3, #30
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
 80019b0:	e040      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b0e      	cmp	r3, #14
 80019b8:	d81e      	bhi.n	80019f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	3b3c      	subs	r3, #60	; 0x3c
 80019ce:	221f      	movs	r2, #31
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4019      	ands	r1, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	3b3c      	subs	r3, #60	; 0x3c
 80019ea:	fa00 f203 	lsl.w	r2, r0, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
 80019f6:	e01d      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	3b5a      	subs	r3, #90	; 0x5a
 8001a0c:	221f      	movs	r2, #31
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4019      	ands	r1, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	3b5a      	subs	r3, #90	; 0x5a
 8001a28:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 80e5 	bne.w	8001c0e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b09      	cmp	r3, #9
 8001a4a:	d91c      	bls.n	8001a86 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6999      	ldr	r1, [r3, #24]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b1e      	subs	r3, #30
 8001a5e:	2207      	movs	r2, #7
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4019      	ands	r1, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6898      	ldr	r0, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	3b1e      	subs	r3, #30
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	619a      	str	r2, [r3, #24]
 8001a84:	e019      	b.n	8001aba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6959      	ldr	r1, [r3, #20]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	2207      	movs	r2, #7
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4019      	ands	r1, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6898      	ldr	r0, [r3, #8]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d84f      	bhi.n	8001b7c <HAL_ADC_ConfigChannel+0x28c>
 8001adc:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001b17 	.word	0x08001b17
 8001aec:	08001b39 	.word	0x08001b39
 8001af0:	08001b5b 	.word	0x08001b5b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001afa:	4b9c      	ldr	r3, [pc, #624]	; (8001d6c <HAL_ADC_ConfigChannel+0x47c>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	0691      	lsls	r1, r2, #26
 8001b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b06:	430a      	orrs	r2, r1
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b12:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b14:	e07b      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b1c:	4b93      	ldr	r3, [pc, #588]	; (8001d6c <HAL_ADC_ConfigChannel+0x47c>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	0691      	lsls	r1, r2, #26
 8001b26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b34:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b36:	e06a      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b3e:	4b8b      	ldr	r3, [pc, #556]	; (8001d6c <HAL_ADC_ConfigChannel+0x47c>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	0691      	lsls	r1, r2, #26
 8001b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b56:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b58:	e059      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b60:	4b82      	ldr	r3, [pc, #520]	; (8001d6c <HAL_ADC_ConfigChannel+0x47c>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	0691      	lsls	r1, r2, #26
 8001b6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b78:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b7a:	e048      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	069b      	lsls	r3, r3, #26
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b9e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	069b      	lsls	r3, r3, #26
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d107      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bc2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	069b      	lsls	r3, r3, #26
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001be6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	069b      	lsls	r3, r3, #26
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d107      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c0a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001c0c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d108      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x33e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x33e>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x340>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 810a 	bne.w	8001e4a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d00f      	beq.n	8001c5e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43da      	mvns	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	400a      	ands	r2, r1
 8001c58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001c5c:	e049      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	d91c      	bls.n	8001cba <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6999      	ldr	r1, [r3, #24]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b1b      	subs	r3, #27
 8001c92:	2207      	movs	r2, #7
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4019      	ands	r1, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6898      	ldr	r0, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b1b      	subs	r3, #27
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	619a      	str	r2, [r3, #24]
 8001cb8:	e01b      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6959      	ldr	r1, [r3, #20]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	2207      	movs	r2, #7
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4019      	ands	r1, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6898      	ldr	r0, [r3, #8]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_ADC_ConfigChannel+0x480>)
 8001cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d105      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d015      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d105      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	f040 8091 	bne.w	8001e4a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 808a 	bne.w	8001e4a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3e:	d102      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x456>
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_ADC_ConfigChannel+0x484>)
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x45c>
 8001d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d4a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10e      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x488>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x488>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e006      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x48a>
 8001d6c:	83fff000 	.word	0x83fff000
 8001d70:	50000300 	.word	0x50000300
 8001d74:	50000100 	.word	0x50000100
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d150      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x4b0>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x4b0>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x4b2>
 8001da0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d13c      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d11d      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x4fa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db6:	d118      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_ADC_ConfigChannel+0x574>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <HAL_ADC_ConfigChannel+0x578>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9a      	lsrs	r2, r3, #18
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001de8:	e02e      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b11      	cmp	r3, #17
 8001df0:	d10b      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x51a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dfa:	d106      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e06:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e08:	e01e      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d11a      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e1c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e1e:	e013      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e32:	e00a      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f043 0220 	orr.w	r2, r3, #32
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e46:	e000      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e48:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	376c      	adds	r7, #108	; 0x6c
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b099      	sub	sp, #100	; 0x64
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e84:	d102      	bne.n	8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e86:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	e002      	b.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e90:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0a2      	b.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e09b      	b.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d17f      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d179      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ecc:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001ece:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d040      	beq.n	8001f5a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eea:	035b      	lsls	r3, r3, #13
 8001eec:	430b      	orrs	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001f14:	2300      	movs	r3, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d15c      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001f36:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d14b      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f44:	f023 030f 	bic.w	r3, r3, #15
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	6811      	ldr	r1, [r2, #0]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	6892      	ldr	r2, [r2, #8]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	431a      	orrs	r2, r3
 8001f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f56:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f58:	e03c      	b.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f64:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f86:	2300      	movs	r3, #0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d123      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001fa8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d112      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fb6:	f023 030f 	bic.w	r3, r3, #15
 8001fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fbc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fbe:	e009      	b.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001fd2:	e000      	b.n	8001fd6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fd4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3764      	adds	r7, #100	; 0x64
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	50000100 	.word	0x50000100
 8001ff4:	50000300 	.word	0x50000300

08001ff8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d108      	bne.n	8002024 <ADC_Disable+0x2c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <ADC_Disable+0x2c>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <ADC_Disable+0x2e>
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d047      	beq.n	80020ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030d 	and.w	r3, r3, #13
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10f      	bne.n	8002058 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0202 	orr.w	r2, r2, #2
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2203      	movs	r2, #3
 800204e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002050:	f7ff fab0 	bl	80015b4 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002056:	e029      	b.n	80020ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f043 0210 	orr.w	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e023      	b.n	80020bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002074:	f7ff fa9e 	bl	80015b4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d914      	bls.n	80020ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d10d      	bne.n	80020ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f043 0210 	orr.w	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e007      	b.n	80020bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d0dc      	beq.n	8002074 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	; (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002230:	d301      	bcc.n	8002236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002232:	2301      	movs	r3, #1
 8002234:	e00f      	b.n	8002256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <SysTick_Config+0x40>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223e:	210f      	movs	r1, #15
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f7ff ff8e 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <SysTick_Config+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <SysTick_Config+0x40>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000e010 	.word	0xe000e010

08002264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff29 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800228c:	f7ff ff3e 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f7ff ff8e 	bl	80021b8 <NVIC_EncodePriority>
 800229c:	4602      	mov	r2, r0
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff5d 	bl	8002164 <__NVIC_SetPriority>
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff31 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffa2 	bl	8002220 <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e014      	b.n	8002322 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	791b      	ldrb	r3, [r3, #4]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7fe fed3 	bl	80010b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	795b      	ldrb	r3, [r3, #5]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_DAC_ConfigChannel+0x20>
 8002348:	2302      	movs	r3, #2
 800234a:	e04e      	b.n	80023ea <HAL_DAC_ConfigChannel+0xbe>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2202      	movs	r2, #2
 8002356:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <HAL_DAC_ConfigChannel+0xcc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d112      	bne.n	8002390 <HAL_DAC_ConfigChannel+0x64>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10f      	bne.n	8002390 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002370:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4013      	ands	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	e00e      	b.n	80023ae <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002390:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4013      	ands	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	22c0      	movs	r2, #192	; 0xc0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40007400 	.word	0x40007400

080023fc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800240a:	2b02      	cmp	r3, #2
 800240c:	d008      	beq.n	8002420 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e020      	b.n	8002462 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 020e 	bic.w	r2, r2, #14
 800242e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002480:	2b02      	cmp	r3, #2
 8002482:	d005      	beq.n	8002490 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e027      	b.n	80024e0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 020e 	bic.w	r2, r2, #14
 800249e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
    } 
  }
  return status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e14e      	b.n	800279a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8140 	beq.w	8002794 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <HAL_GPIO_Init+0x40>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d130      	bne.n	800258e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002562:	2201      	movs	r2, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0201 	and.w	r2, r3, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b03      	cmp	r3, #3
 8002598:	d017      	beq.n	80025ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d123      	bne.n	800261e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	6939      	ldr	r1, [r7, #16]
 800261a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0203 	and.w	r2, r3, #3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 809a 	beq.w	8002794 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4b55      	ldr	r3, [pc, #340]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a54      	ldr	r2, [pc, #336]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026a2:	d013      	beq.n	80026cc <HAL_GPIO_Init+0x1e0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <HAL_GPIO_Init+0x2d4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00d      	beq.n	80026c8 <HAL_GPIO_Init+0x1dc>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a45      	ldr	r2, [pc, #276]	; (80027c4 <HAL_GPIO_Init+0x2d8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d007      	beq.n	80026c4 <HAL_GPIO_Init+0x1d8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a44      	ldr	r2, [pc, #272]	; (80027c8 <HAL_GPIO_Init+0x2dc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_GPIO_Init+0x1d4>
 80026bc:	2303      	movs	r3, #3
 80026be:	e006      	b.n	80026ce <HAL_GPIO_Init+0x1e2>
 80026c0:	2305      	movs	r3, #5
 80026c2:	e004      	b.n	80026ce <HAL_GPIO_Init+0x1e2>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e002      	b.n	80026ce <HAL_GPIO_Init+0x1e2>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_GPIO_Init+0x1e2>
 80026cc:	2300      	movs	r3, #0
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	f002 0203 	and.w	r2, r2, #3
 80026d4:	0092      	lsls	r2, r2, #2
 80026d6:	4093      	lsls	r3, r2
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026de:	4937      	ldr	r1, [pc, #220]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_GPIO_Init+0x2e0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002710:	4a2e      	ldr	r2, [pc, #184]	; (80027cc <HAL_GPIO_Init+0x2e0>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002716:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_GPIO_Init+0x2e0>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800273a:	4a24      	ldr	r2, [pc, #144]	; (80027cc <HAL_GPIO_Init+0x2e0>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_GPIO_Init+0x2e0>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_GPIO_Init+0x2e0>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_GPIO_Init+0x2e0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800278e:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HAL_GPIO_Init+0x2e0>)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3301      	adds	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f47f aea9 	bne.w	80024fc <HAL_GPIO_Init+0x10>
  }
}
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010000 	.word	0x40010000
 80027c0:	48000400 	.word	0x48000400
 80027c4:	48000800 	.word	0x48000800
 80027c8:	48000c00 	.word	0x48000c00
 80027cc:	40010400 	.word	0x40010400

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f001 b823 	b.w	800383c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 817d 	beq.w	8002b06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800280c:	4bbc      	ldr	r3, [pc, #752]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00c      	beq.n	8002832 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002818:	4bb9      	ldr	r3, [pc, #740]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d15c      	bne.n	80028de <HAL_RCC_OscConfig+0x10e>
 8002824:	4bb6      	ldr	r3, [pc, #728]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d155      	bne.n	80028de <HAL_RCC_OscConfig+0x10e>
 8002832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002836:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002846:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_RCC_OscConfig+0x94>
 800285e:	4ba8      	ldr	r3, [pc, #672]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e015      	b.n	8002890 <HAL_RCC_OscConfig+0xc0>
 8002864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002868:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002880:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800288c:	4b9c      	ldr	r3, [pc, #624]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002894:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002898:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800289c:	fa92 f2a2 	rbit	r2, r2
 80028a0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80028a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80028a8:	fab2 f282 	clz	r2, r2
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f002 021f 	and.w	r2, r2, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 811f 	beq.w	8002b04 <HAL_RCC_OscConfig+0x334>
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8116 	bne.w	8002b04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f000 bfaf 	b.w	800383c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ee:	d106      	bne.n	80028fe <HAL_RCC_OscConfig+0x12e>
 80028f0:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a82      	ldr	r2, [pc, #520]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e036      	b.n	800296c <HAL_RCC_OscConfig+0x19c>
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x158>
 800290e:	4b7c      	ldr	r3, [pc, #496]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7b      	ldr	r2, [pc, #492]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b79      	ldr	r3, [pc, #484]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a78      	ldr	r2, [pc, #480]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e021      	b.n	800296c <HAL_RCC_OscConfig+0x19c>
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x184>
 800293a:	4b71      	ldr	r3, [pc, #452]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a70      	ldr	r2, [pc, #448]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b6e      	ldr	r3, [pc, #440]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6d      	ldr	r2, [pc, #436]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0x19c>
 8002954:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a69      	ldr	r2, [pc, #420]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b67      	ldr	r3, [pc, #412]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a66      	ldr	r2, [pc, #408]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800296c:	4b64      	ldr	r3, [pc, #400]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	f023 020f 	bic.w	r2, r3, #15
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	495f      	ldr	r1, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002982:	4313      	orrs	r3, r2
 8002984:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d059      	beq.n	8002a4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fe0d 	bl	80015b4 <HAL_GetTick>
 800299a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe fe08 	bl	80015b4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	; 0x64
 80029ae:	d902      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f000 bf43 	b.w	800383c <HAL_RCC_OscConfig+0x106c>
 80029b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80029ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d102      	bne.n	80029e8 <HAL_RCC_OscConfig+0x218>
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e015      	b.n	8002a14 <HAL_RCC_OscConfig+0x244>
 80029e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a10:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f002 021f 	and.w	r2, r2, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ab      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1d0>
 8002a48:	e05d      	b.n	8002b06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fdb3 	bl	80015b4 <HAL_GetTick>
 8002a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fdae 	bl	80015b4 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	; 0x64
 8002a62:	d902      	bls.n	8002a6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	f000 bee9 	b.w	800383c <HAL_RCC_OscConfig+0x106c>
 8002a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d102      	bne.n	8002a9c <HAL_RCC_OscConfig+0x2cc>
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e015      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2f8>
 8002a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ab8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <HAL_RCC_OscConfig+0x330>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002acc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ad0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ad4:	fa92 f2a2 	rbit	r2, r2
 8002ad8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002adc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f002 021f 	and.w	r2, r2, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1ab      	bne.n	8002a54 <HAL_RCC_OscConfig+0x284>
 8002afc:	e003      	b.n	8002b06 <HAL_RCC_OscConfig+0x336>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 817d 	beq.w	8002e16 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b1c:	4ba6      	ldr	r3, [pc, #664]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b28:	4ba3      	ldr	r3, [pc, #652]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d172      	bne.n	8002c1a <HAL_RCC_OscConfig+0x44a>
 8002b34:	4ba0      	ldr	r3, [pc, #640]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d16c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x44a>
 8002b40:	2302      	movs	r3, #2
 8002b42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_OscConfig+0x3a0>
 8002b6a:	4b93      	ldr	r3, [pc, #588]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	e013      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c8>
 8002b70:	2302      	movs	r3, #2
 8002b72:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b82:	2302      	movs	r3, #2
 8002b84:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b94:	4b88      	ldr	r3, [pc, #544]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ba2:	fa92 f2a2 	rbit	r2, r2
 8002ba6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002baa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002bae:	fab2 f282 	clz	r2, r2
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f042 0220 	orr.w	r2, r2, #32
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f002 021f 	and.w	r2, r2, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCC_OscConfig+0x410>
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d002      	beq.n	8002be0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f000 be2e 	b.w	800383c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b75      	ldr	r3, [pc, #468]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	21f8      	movs	r1, #248	; 0xf8
 8002bf6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002bfe:	fa91 f1a1 	rbit	r1, r1
 8002c02:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c06:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c0a:	fab1 f181 	clz	r1, r1
 8002c0e:	b2c9      	uxtb	r1, r1
 8002c10:	408b      	lsls	r3, r1
 8002c12:	4969      	ldr	r1, [pc, #420]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c18:	e0fd      	b.n	8002e16 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8088 	beq.w	8002d3c <HAL_RCC_OscConfig+0x56c>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	461a      	mov	r2, r3
 8002c54:	2301      	movs	r3, #1
 8002c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fcac 	bl	80015b4 <HAL_GetTick>
 8002c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe fca7 	bl	80015b4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d902      	bls.n	8002c78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	f000 bde2 	b.w	800383c <HAL_RCC_OscConfig+0x106c>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d102      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x4d8>
 8002ca2:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	e013      	b.n	8002cd0 <HAL_RCC_OscConfig+0x500>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002cc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002cd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002cda:	fa92 f2a2 	rbit	r2, r2
 8002cde:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ce2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ce6:	fab2 f282 	clz	r2, r2
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f042 0220 	orr.w	r2, r2, #32
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	f002 021f 	and.w	r2, r2, #31
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0af      	beq.n	8002c62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	21f8      	movs	r1, #248	; 0xf8
 8002d18:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d20:	fa91 f1a1 	rbit	r1, r1
 8002d24:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d28:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d2c:	fab1 f181 	clz	r1, r1
 8002d30:	b2c9      	uxtb	r1, r1
 8002d32:	408b      	lsls	r3, r1
 8002d34:	4920      	ldr	r1, [pc, #128]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
 8002d3a:	e06c      	b.n	8002e16 <HAL_RCC_OscConfig+0x646>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	461a      	mov	r2, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe fc24 	bl	80015b4 <HAL_GetTick>
 8002d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe fc1f 	bl	80015b4 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d902      	bls.n	8002d88 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	f000 bd5a 	b.w	800383c <HAL_RCC_OscConfig+0x106c>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d104      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5ec>
 8002db2:	4b01      	ldr	r3, [pc, #4]	; (8002db8 <HAL_RCC_OscConfig+0x5e8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	e015      	b.n	8002de4 <HAL_RCC_OscConfig+0x614>
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002de0:	4bc8      	ldr	r3, [pc, #800]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2202      	movs	r2, #2
 8002de6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002dea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002df6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002dfa:	fab2 f282 	clz	r2, r2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f042 0220 	orr.w	r2, r2, #32
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f002 021f 	and.w	r2, r2, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ad      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8110 	beq.w	800304c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d079      	beq.n	8002f30 <HAL_RCC_OscConfig+0x760>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4bab      	ldr	r3, [pc, #684]	; (8003108 <HAL_RCC_OscConfig+0x938>)
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	461a      	mov	r2, r3
 8002e62:	2301      	movs	r3, #1
 8002e64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7fe fba5 	bl	80015b4 <HAL_GetTick>
 8002e6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe fba0 	bl	80015b4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d902      	bls.n	8002e86 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f000 bcdb 	b.w	800383c <HAL_RCC_OscConfig+0x106c>
 8002e86:	2302      	movs	r3, #2
 8002e88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fa93 f2a3 	rbit	r2, r3
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ede:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee0:	4b88      	ldr	r3, [pc, #544]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 8002ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002eec:	2102      	movs	r1, #2
 8002eee:	6019      	str	r1, [r3, #0]
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f1a3 	rbit	r1, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f06:	6019      	str	r1, [r3, #0]
  return result;
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0a0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x6a0>
 8002f2e:	e08d      	b.n	800304c <HAL_RCC_OscConfig+0x87c>
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f52:	601a      	str	r2, [r3, #0]
  return result;
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_OscConfig+0x938>)
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2300      	movs	r3, #0
 8002f70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fe fb1f 	bl	80015b4 <HAL_GetTick>
 8002f76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7fe fb1a 	bl	80015b4 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d902      	bls.n	8002f92 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	f000 bc55 	b.w	800383c <HAL_RCC_OscConfig+0x106c>
 8002f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	fa93 f2a3 	rbit	r2, r3
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ffc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffe:	4b41      	ldr	r3, [pc, #260]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 8003000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800300a:	2102      	movs	r1, #2
 800300c:	6019      	str	r1, [r3, #0]
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f1a3 	rbit	r1, r3
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003024:	6019      	str	r1, [r3, #0]
  return result;
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d197      	bne.n	8002f7c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 81a1 	beq.w	80033a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d116      	bne.n	80030a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4a22      	ldr	r2, [pc, #136]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 800307a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307e:	61d3      	str	r3, [r2, #28]
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800309a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_RCC_OscConfig+0x93c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11a      	bne.n	80030e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_RCC_OscConfig+0x93c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_RCC_OscConfig+0x93c>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fa7b 	bl	80015b4 <HAL_GetTick>
 80030be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c2:	e009      	b.n	80030d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c4:	f7fe fa76 	bl	80015b4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e3b1      	b.n	800383c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCC_OscConfig+0x93c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ef      	beq.n	80030c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10d      	bne.n	8003110 <HAL_RCC_OscConfig+0x940>
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a02      	ldr	r2, [pc, #8]	; (8003104 <HAL_RCC_OscConfig+0x934>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6213      	str	r3, [r2, #32]
 8003100:	e03c      	b.n	800317c <HAL_RCC_OscConfig+0x9ac>
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	10908120 	.word	0x10908120
 800310c:	40007000 	.word	0x40007000
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10c      	bne.n	800313a <HAL_RCC_OscConfig+0x96a>
 8003120:	4bc1      	ldr	r3, [pc, #772]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4ac0      	ldr	r2, [pc, #768]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	4bbe      	ldr	r3, [pc, #760]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4abd      	ldr	r2, [pc, #756]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	e020      	b.n	800317c <HAL_RCC_OscConfig+0x9ac>
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x994>
 800314a:	4bb7      	ldr	r3, [pc, #732]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4ab6      	ldr	r2, [pc, #728]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6213      	str	r3, [r2, #32]
 8003156:	4bb4      	ldr	r3, [pc, #720]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4ab3      	ldr	r2, [pc, #716]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6213      	str	r3, [r2, #32]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x9ac>
 8003164:	4bb0      	ldr	r3, [pc, #704]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4aaf      	ldr	r2, [pc, #700]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	4bad      	ldr	r3, [pc, #692]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4aac      	ldr	r2, [pc, #688]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8081 	beq.w	8003290 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fe fa11 	bl	80015b4 <HAL_GetTick>
 8003192:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7fe fa0c 	bl	80015b4 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e345      	b.n	800383c <HAL_RCC_OscConfig+0x106c>
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031b8:	2202      	movs	r2, #2
 80031ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	fa93 f2a3 	rbit	r2, r3
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031dc:	2202      	movs	r2, #2
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	fa93 f2a3 	rbit	r2, r3
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031f6:	601a      	str	r2, [r3, #0]
  return result;
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003200:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d102      	bne.n	800321c <HAL_RCC_OscConfig+0xa4c>
 8003216:	4b84      	ldr	r3, [pc, #528]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	e013      	b.n	8003244 <HAL_RCC_OscConfig+0xa74>
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003224:	2202      	movs	r2, #2
 8003226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	4b79      	ldr	r3, [pc, #484]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003248:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800324c:	2102      	movs	r1, #2
 800324e:	6011      	str	r1, [r2, #0]
 8003250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003254:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	fa92 f1a2 	rbit	r1, r2
 800325e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003262:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003266:	6011      	str	r1, [r2, #0]
  return result;
 8003268:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d084      	beq.n	8003198 <HAL_RCC_OscConfig+0x9c8>
 800328e:	e07f      	b.n	8003390 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fe f990 	bl	80015b4 <HAL_GetTick>
 8003294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	e00b      	b.n	80032b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe f98b 	bl	80015b4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e2c4      	b.n	800383c <HAL_RCC_OscConfig+0x106c>
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032ba:	2202      	movs	r2, #2
 80032bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa93 f2a3 	rbit	r2, r3
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032de:	2202      	movs	r2, #2
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032f8:	601a      	str	r2, [r3, #0]
  return result;
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003302:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d102      	bne.n	800331e <HAL_RCC_OscConfig+0xb4e>
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	e013      	b.n	8003346 <HAL_RCC_OscConfig+0xb76>
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	4b39      	ldr	r3, [pc, #228]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800334a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800334e:	2102      	movs	r1, #2
 8003350:	6011      	str	r1, [r2, #0]
 8003352:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003356:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	fa92 f1a2 	rbit	r1, r2
 8003360:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003364:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003368:	6011      	str	r1, [r2, #0]
  return result;
 800336a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800336e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	fab2 f282 	clz	r2, r2
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f002 021f 	and.w	r2, r2, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f202 	lsl.w	r2, r1, r2
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d184      	bne.n	800329a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003390:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	4a22      	ldr	r2, [pc, #136]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8242 	beq.w	800383a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <HAL_RCC_OscConfig+0xc58>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	f000 8213 	beq.w	80037ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f040 8162 	bne.w	800369a <HAL_RCC_OscConfig+0xeca>
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033fa:	601a      	str	r2, [r3, #0]
  return result;
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003404:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003410:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	461a      	mov	r2, r3
 8003418:	2300      	movs	r3, #0
 800341a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe f8ca 	bl	80015b4 <HAL_GetTick>
 8003420:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003424:	e00c      	b.n	8003440 <HAL_RCC_OscConfig+0xc70>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe f8c2 	bl	80015b4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1fd      	b.n	800383c <HAL_RCC_OscConfig+0x106c>
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800344c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003464:	601a      	str	r2, [r3, #0]
  return result;
 8003466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800346e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d102      	bne.n	800348a <HAL_RCC_OscConfig+0xcba>
 8003484:	4bb0      	ldr	r3, [pc, #704]	; (8003748 <HAL_RCC_OscConfig+0xf78>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	e027      	b.n	80034da <HAL_RCC_OscConfig+0xd0a>
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fa93 f2a3 	rbit	r2, r3
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	fa93 f2a3 	rbit	r2, r3
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	4b9c      	ldr	r3, [pc, #624]	; (8003748 <HAL_RCC_OscConfig+0xf78>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034de:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034e6:	6011      	str	r1, [r2, #0]
 80034e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	fa92 f1a2 	rbit	r1, r2
 80034f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034fe:	6011      	str	r1, [r2, #0]
  return result;
 8003500:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003504:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	fab2 f282 	clz	r2, r2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f042 0220 	orr.w	r2, r2, #32
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f002 021f 	and.w	r2, r2, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d182      	bne.n	800342c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0xf78>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	430b      	orrs	r3, r1
 8003548:	497f      	ldr	r1, [pc, #508]	; (8003748 <HAL_RCC_OscConfig+0xf78>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003556:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800355a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003572:	601a      	str	r2, [r3, #0]
  return result;
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800357c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003588:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	461a      	mov	r2, r3
 8003590:	2301      	movs	r3, #1
 8003592:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe f80e 	bl	80015b4 <HAL_GetTick>
 8003598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359c:	e009      	b.n	80035b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359e:	f7fe f809 	bl	80015b4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e144      	b.n	800383c <HAL_RCC_OscConfig+0x106c>
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	fa93 f2a3 	rbit	r2, r3
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035d6:	601a      	str	r2, [r3, #0]
  return result;
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_OscConfig+0xe2c>
 80035f6:	4b54      	ldr	r3, [pc, #336]	; (8003748 <HAL_RCC_OscConfig+0xf78>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	e027      	b.n	800364c <HAL_RCC_OscConfig+0xe7c>
 80035fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003600:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003604:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	fa93 f2a3 	rbit	r2, r3
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800362a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <HAL_RCC_OscConfig+0xf78>)
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003650:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003654:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003658:	6011      	str	r1, [r2, #0]
 800365a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800365e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	fa92 f1a2 	rbit	r1, r2
 8003668:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800366c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003670:	6011      	str	r1, [r2, #0]
  return result;
 8003672:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003676:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	fab2 f282 	clz	r2, r2
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	f042 0220 	orr.w	r2, r2, #32
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	f002 021f 	and.w	r2, r2, #31
 800368c:	2101      	movs	r1, #1
 800368e:	fa01 f202 	lsl.w	r2, r1, r2
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d082      	beq.n	800359e <HAL_RCC_OscConfig+0xdce>
 8003698:	e0cf      	b.n	800383a <HAL_RCC_OscConfig+0x106a>
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f2a3 	rbit	r2, r3
 80036b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036be:	601a      	str	r2, [r3, #0]
  return result;
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	461a      	mov	r2, r3
 80036dc:	2300      	movs	r3, #0
 80036de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fd ff68 	bl	80015b4 <HAL_GetTick>
 80036e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e8:	e009      	b.n	80036fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fd ff63 	bl	80015b4 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e09e      	b.n	800383c <HAL_RCC_OscConfig+0x106c>
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003722:	601a      	str	r2, [r3, #0]
  return result;
 8003724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003728:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800372c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d104      	bne.n	800374c <HAL_RCC_OscConfig+0xf7c>
 8003742:	4b01      	ldr	r3, [pc, #4]	; (8003748 <HAL_RCC_OscConfig+0xf78>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	e029      	b.n	800379c <HAL_RCC_OscConfig+0xfcc>
 8003748:	40021000 	.word	0x40021000
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800377a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	fa93 f2a3 	rbit	r2, r3
 800378e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003792:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_OscConfig+0x1078>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	fa92 f1a2 	rbit	r1, r2
 80037b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037c0:	6011      	str	r1, [r2, #0]
  return result;
 80037c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f042 0220 	orr.w	r2, r2, #32
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f002 021f 	and.w	r2, r2, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d180      	bne.n	80036ea <HAL_RCC_OscConfig+0xf1a>
 80037e8:	e027      	b.n	800383a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e01e      	b.n	800383c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x1078>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003806:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800380a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	429a      	cmp	r2, r3
 800381c:	d10b      	bne.n	8003836 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800381e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000

0800384c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b09e      	sub	sp, #120	; 0x78
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e162      	b.n	8003b2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b90      	ldr	r3, [pc, #576]	; (8003aa8 <HAL_RCC_ClockConfig+0x25c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b8d      	ldr	r3, [pc, #564]	; (8003aa8 <HAL_RCC_ClockConfig+0x25c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	498b      	ldr	r1, [pc, #556]	; (8003aa8 <HAL_RCC_ClockConfig+0x25c>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b89      	ldr	r3, [pc, #548]	; (8003aa8 <HAL_RCC_ClockConfig+0x25c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e14a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b82      	ldr	r3, [pc, #520]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	497f      	ldr	r1, [pc, #508]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80dc 	beq.w	8003a78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d13c      	bne.n	8003942 <HAL_RCC_ClockConfig+0xf6>
 80038c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xa6>
 80038ec:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	e00f      	b.n	8003912 <HAL_RCC_ClockConfig+0xc6>
 80038f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003904:	663b      	str	r3, [r7, #96]	; 0x60
 8003906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800390e:	4b67      	ldr	r3, [pc, #412]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003916:	65ba      	str	r2, [r7, #88]	; 0x58
 8003918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800391a:	fa92 f2a2 	rbit	r2, r2
 800391e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003922:	fab2 f282 	clz	r2, r2
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f042 0220 	orr.w	r2, r2, #32
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	f002 021f 	and.w	r2, r2, #31
 8003932:	2101      	movs	r1, #1
 8003934:	fa01 f202 	lsl.w	r2, r1, r2
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d17b      	bne.n	8003a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0f3      	b.n	8003b2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d13c      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x178>
 800394a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_RCC_ClockConfig+0x128>
 800396e:	4b4f      	ldr	r3, [pc, #316]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	e00f      	b.n	8003994 <HAL_RCC_ClockConfig+0x148>
 8003974:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003978:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	647b      	str	r3, [r7, #68]	; 0x44
 8003982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003986:	643b      	str	r3, [r7, #64]	; 0x40
 8003988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003998:	63ba      	str	r2, [r7, #56]	; 0x38
 800399a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800399c:	fa92 f2a2 	rbit	r2, r2
 80039a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80039a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f042 0220 	orr.w	r2, r2, #32
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f002 021f 	and.w	r2, r2, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13a      	bne.n	8003a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b2      	b.n	8003b2a <HAL_RCC_ClockConfig+0x2de>
 80039c4:	2302      	movs	r3, #2
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d102      	bne.n	80039ec <HAL_RCC_ClockConfig+0x1a0>
 80039e6:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	e00d      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1bc>
 80039ec:	2302      	movs	r3, #2
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	2302      	movs	r3, #2
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2202      	movs	r2, #2
 8003a0a:	61ba      	str	r2, [r7, #24]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	fa92 f2a2 	rbit	r2, r2
 8003a12:	617a      	str	r2, [r7, #20]
  return result;
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	fab2 f282 	clz	r2, r2
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	f042 0220 	orr.w	r2, r2, #32
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f002 021f 	and.w	r2, r2, #31
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e079      	b.n	8003b2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f023 0203 	bic.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	491a      	ldr	r1, [pc, #104]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fdb4 	bl	80015b4 <HAL_GetTick>
 8003a4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fd fdb0 	bl	80015b4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e061      	b.n	8003b2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 020c 	and.w	r2, r3, #12
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1eb      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_ClockConfig+0x25c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d214      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_RCC_ClockConfig+0x25c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 0207 	bic.w	r2, r3, #7
 8003a8e:	4906      	ldr	r1, [pc, #24]	; (8003aa8 <HAL_RCC_ClockConfig+0x25c>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <HAL_RCC_ClockConfig+0x25c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e040      	b.n	8003b2a <HAL_RCC_ClockConfig+0x2de>
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abc:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_RCC_ClockConfig+0x2e8>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	491a      	ldr	r1, [pc, #104]	; (8003b34 <HAL_RCC_ClockConfig+0x2e8>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <HAL_RCC_ClockConfig+0x2e8>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4912      	ldr	r1, [pc, #72]	; (8003b34 <HAL_RCC_ClockConfig+0x2e8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003aee:	f000 f829 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003af2:	4601      	mov	r1, r0
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <HAL_RCC_ClockConfig+0x2e8>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afc:	22f0      	movs	r2, #240	; 0xf0
 8003afe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	fa92 f2a2 	rbit	r2, r2
 8003b06:	60fa      	str	r2, [r7, #12]
  return result;
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	fab2 f282 	clz	r2, r2
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	40d3      	lsrs	r3, r2
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x2ec>)
 8003b14:	5cd3      	ldrb	r3, [r2, r3]
 8003b16:	fa21 f303 	lsr.w	r3, r1, r3
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <HAL_RCC_ClockConfig+0x2f0>)
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <HAL_RCC_ClockConfig+0x2f4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd fd02 	bl	800152c <HAL_InitTick>
  
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3778      	adds	r7, #120	; 0x78
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	08008e50 	.word	0x08008e50
 8003b3c:	2000000c 	.word	0x2000000c
 8003b40:	20000010 	.word	0x20000010

08003b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b08b      	sub	sp, #44	; 0x2c
 8003b48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b5e:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d002      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x30>
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x36>
 8003b72:	e03c      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b74:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b76:	623b      	str	r3, [r7, #32]
      break;
 8003b78:	e03c      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	fa92 f2a2 	rbit	r2, r2
 8003b8c:	607a      	str	r2, [r7, #4]
  return result;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	fab2 f282 	clz	r2, r2
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	40d3      	lsrs	r3, r2
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b9e:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	220f      	movs	r2, #15
 8003ba8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	fa92 f2a2 	rbit	r2, r2
 8003bb0:	60fa      	str	r2, [r7, #12]
  return result;
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	fab2 f282 	clz	r2, r2
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	40d3      	lsrs	r3, r2
 8003bbc:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
 8003bdc:	e004      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	4a0c      	ldr	r2, [pc, #48]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	623b      	str	r3, [r7, #32]
      break;
 8003bec:	e002      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bf0:	623b      	str	r3, [r7, #32]
      break;
 8003bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	372c      	adds	r7, #44	; 0x2c
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	007a1200 	.word	0x007a1200
 8003c0c:	08008e68 	.word	0x08008e68
 8003c10:	08008e78 	.word	0x08008e78
 8003c14:	003d0900 	.word	0x003d0900

08003c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	2000000c 	.word	0x2000000c

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c36:	f7ff ffef 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c3a:	4601      	mov	r1, r0
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c44:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	fa92 f2a2 	rbit	r2, r2
 8003c50:	603a      	str	r2, [r7, #0]
  return result;
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	fab2 f282 	clz	r2, r2
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	40d3      	lsrs	r3, r2
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c5e:	5cd3      	ldrb	r3, [r2, r3]
 8003c60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	08008e60 	.word	0x08008e60

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c7a:	f7ff ffcd 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	fa92 f2a2 	rbit	r2, r2
 8003c94:	603a      	str	r2, [r7, #0]
  return result;
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	fab2 f282 	clz	r2, r2
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	40d3      	lsrs	r3, r2
 8003ca0:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ca2:	5cd3      	ldrb	r3, [r2, r3]
 8003ca4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	08008e60 	.word	0x08008e60

08003cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b092      	sub	sp, #72	; 0x48
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80cd 	beq.w	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cdc:	4b86      	ldr	r3, [pc, #536]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10e      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce8:	4b83      	ldr	r3, [pc, #524]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4a82      	ldr	r2, [pc, #520]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	61d3      	str	r3, [r2, #28]
 8003cf4:	4b80      	ldr	r3, [pc, #512]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b7d      	ldr	r3, [pc, #500]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d118      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d12:	4b7a      	ldr	r3, [pc, #488]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a79      	ldr	r2, [pc, #484]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1e:	f7fd fc49 	bl	80015b4 <HAL_GetTick>
 8003d22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	e008      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fd fc45 	bl	80015b4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b64      	cmp	r3, #100	; 0x64
 8003d32:	d901      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0db      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b70      	ldr	r3, [pc, #448]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d44:	4b6c      	ldr	r3, [pc, #432]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d07d      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d076      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d62:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003da0:	fab3 f383 	clz	r3, r3
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b55      	ldr	r3, [pc, #340]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	461a      	mov	r2, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003db4:	4a50      	ldr	r2, [pc, #320]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d045      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fbf6 	bl	80015b4 <HAL_GetTick>
 8003dc8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fd fbf2 	bl	80015b4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e086      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003de2:	2302      	movs	r3, #2
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	2302      	movs	r3, #2
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	fa93 f3a3 	rbit	r3, r3
 8003df8:	61fb      	str	r3, [r7, #28]
  return result;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0302 	orr.w	r3, r3, #2
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	e007      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2202      	movs	r2, #2
 8003e28:	613a      	str	r2, [r7, #16]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	fa92 f2a2 	rbit	r2, r2
 8003e30:	60fa      	str	r2, [r7, #12]
  return result;
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	fab2 f282 	clz	r2, r2
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	f002 021f 	and.w	r2, r2, #31
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0bd      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e50:	4b29      	ldr	r3, [pc, #164]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4926      	ldr	r1, [pc, #152]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	491a      	ldr	r1, [pc, #104]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f023 0210 	bic.w	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4912      	ldr	r1, [pc, #72]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	490b      	ldr	r1, [pc, #44]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3748      	adds	r7, #72	; 0x48
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
 8003f00:	10908100 	.word	0x10908100

08003f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e049      	b.n	8003faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd f900 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fc2c 	bl	80047a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e049      	b.n	8004058 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f841 	bl	8004060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f000 fbd5 	bl	80047a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_TIM_PWM_Start_IT+0x28>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e03c      	b.n	8004116 <HAL_TIM_PWM_Start_IT+0xa2>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d109      	bne.n	80040b6 <HAL_TIM_PWM_Start_IT+0x42>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	e02f      	b.n	8004116 <HAL_TIM_PWM_Start_IT+0xa2>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d109      	bne.n	80040d0 <HAL_TIM_PWM_Start_IT+0x5c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e022      	b.n	8004116 <HAL_TIM_PWM_Start_IT+0xa2>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d109      	bne.n	80040ea <HAL_TIM_PWM_Start_IT+0x76>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e015      	b.n	8004116 <HAL_TIM_PWM_Start_IT+0xa2>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d109      	bne.n	8004104 <HAL_TIM_PWM_Start_IT+0x90>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e008      	b.n	8004116 <HAL_TIM_PWM_Start_IT+0xa2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0d3      	b.n	80042c6 <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start_IT+0xba>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800412c:	e023      	b.n	8004176 <HAL_TIM_PWM_Start_IT+0x102>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d104      	bne.n	800413e <HAL_TIM_PWM_Start_IT+0xca>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800413c:	e01b      	b.n	8004176 <HAL_TIM_PWM_Start_IT+0x102>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b08      	cmp	r3, #8
 8004142:	d104      	bne.n	800414e <HAL_TIM_PWM_Start_IT+0xda>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414c:	e013      	b.n	8004176 <HAL_TIM_PWM_Start_IT+0x102>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d104      	bne.n	800415e <HAL_TIM_PWM_Start_IT+0xea>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800415c:	e00b      	b.n	8004176 <HAL_TIM_PWM_Start_IT+0x102>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b10      	cmp	r3, #16
 8004162:	d104      	bne.n	800416e <HAL_TIM_PWM_Start_IT+0xfa>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	e003      	b.n	8004176 <HAL_TIM_PWM_Start_IT+0x102>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d841      	bhi.n	8004200 <HAL_TIM_PWM_Start_IT+0x18c>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_TIM_PWM_Start_IT+0x110>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	080041b9 	.word	0x080041b9
 8004188:	08004201 	.word	0x08004201
 800418c:	08004201 	.word	0x08004201
 8004190:	08004201 	.word	0x08004201
 8004194:	080041cb 	.word	0x080041cb
 8004198:	08004201 	.word	0x08004201
 800419c:	08004201 	.word	0x08004201
 80041a0:	08004201 	.word	0x08004201
 80041a4:	080041dd 	.word	0x080041dd
 80041a8:	08004201 	.word	0x08004201
 80041ac:	08004201 	.word	0x08004201
 80041b0:	08004201 	.word	0x08004201
 80041b4:	080041ef 	.word	0x080041ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0202 	orr.w	r2, r2, #2
 80041c6:	60da      	str	r2, [r3, #12]
      break;
 80041c8:	e01d      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0204 	orr.w	r2, r2, #4
 80041d8:	60da      	str	r2, [r3, #12]
      break;
 80041da:	e014      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0208 	orr.w	r2, r2, #8
 80041ea:	60da      	str	r2, [r3, #12]
      break;
 80041ec:	e00b      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0210 	orr.w	r2, r2, #16
 80041fc:	60da      	str	r2, [r3, #12]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      break;
 8004204:	bf00      	nop
  }

  if (status == HAL_OK)
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d15b      	bne.n	80042c4 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fde1 	bl	8004ddc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <HAL_TIM_PWM_Start_IT+0x25c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00e      	beq.n	8004242 <HAL_TIM_PWM_Start_IT+0x1ce>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <HAL_TIM_PWM_Start_IT+0x260>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d009      	beq.n	8004242 <HAL_TIM_PWM_Start_IT+0x1ce>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <HAL_TIM_PWM_Start_IT+0x264>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <HAL_TIM_PWM_Start_IT+0x1ce>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a27      	ldr	r2, [pc, #156]	; (80042dc <HAL_TIM_PWM_Start_IT+0x268>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_TIM_PWM_Start_IT+0x1d2>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <HAL_TIM_PWM_Start_IT+0x1d4>
 8004246:	2300      	movs	r3, #0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <HAL_TIM_PWM_Start_IT+0x25c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_TIM_PWM_Start_IT+0x210>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d009      	beq.n	8004284 <HAL_TIM_PWM_Start_IT+0x210>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_TIM_PWM_Start_IT+0x26c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_TIM_PWM_Start_IT+0x210>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <HAL_TIM_PWM_Start_IT+0x260>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d115      	bne.n	80042b0 <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_TIM_PWM_Start_IT+0x270>)
 800428c:	4013      	ands	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b06      	cmp	r3, #6
 8004294:	d015      	beq.n	80042c2 <HAL_TIM_PWM_Start_IT+0x24e>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d011      	beq.n	80042c2 <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	e008      	b.n	80042c2 <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e000      	b.n	80042c4 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40014800 	.word	0x40014800
 80042e0:	40000400 	.word	0x40000400
 80042e4:	00010007 	.word	0x00010007

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0202 	mvn.w	r2, #2
 8004314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa24 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa16 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fc fe27 	bl	8000f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f9fa 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f9ec 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fc fdfd 	bl	8000f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9d0 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9c2 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fc fdd3 	bl	8000f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0210 	mvn.w	r2, #16
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2208      	movs	r2, #8
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f9a6 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f998 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fc fda9 	bl	8000f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f972 	bl	8004750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fd4a 	bl	8004f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a6:	d10e      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fd3d 	bl	8004f40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f94d 	bl	800478c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d10e      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d107      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0220 	mvn.w	r2, #32
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fcfd 	bl	8004f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004542:	2302      	movs	r3, #2
 8004544:	e0ff      	b.n	8004746 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b14      	cmp	r3, #20
 8004552:	f200 80f0 	bhi.w	8004736 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	080045b1 	.word	0x080045b1
 8004560:	08004737 	.word	0x08004737
 8004564:	08004737 	.word	0x08004737
 8004568:	08004737 	.word	0x08004737
 800456c:	080045f1 	.word	0x080045f1
 8004570:	08004737 	.word	0x08004737
 8004574:	08004737 	.word	0x08004737
 8004578:	08004737 	.word	0x08004737
 800457c:	08004633 	.word	0x08004633
 8004580:	08004737 	.word	0x08004737
 8004584:	08004737 	.word	0x08004737
 8004588:	08004737 	.word	0x08004737
 800458c:	08004673 	.word	0x08004673
 8004590:	08004737 	.word	0x08004737
 8004594:	08004737 	.word	0x08004737
 8004598:	08004737 	.word	0x08004737
 800459c:	080046b5 	.word	0x080046b5
 80045a0:	08004737 	.word	0x08004737
 80045a4:	08004737 	.word	0x08004737
 80045a8:	08004737 	.word	0x08004737
 80045ac:	080046f5 	.word	0x080046f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f96a 	bl	8004890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0204 	bic.w	r2, r2, #4
 80045da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6999      	ldr	r1, [r3, #24]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	619a      	str	r2, [r3, #24]
      break;
 80045ee:	e0a5      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f9d0 	bl	800499c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6999      	ldr	r1, [r3, #24]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	021a      	lsls	r2, r3, #8
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	619a      	str	r2, [r3, #24]
      break;
 8004630:	e084      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fa2f 	bl	8004a9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0208 	orr.w	r2, r2, #8
 800464c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0204 	bic.w	r2, r2, #4
 800465c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69d9      	ldr	r1, [r3, #28]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	61da      	str	r2, [r3, #28]
      break;
 8004670:	e064      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fa8d 	bl	8004b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69d9      	ldr	r1, [r3, #28]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	021a      	lsls	r2, r3, #8
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	61da      	str	r2, [r3, #28]
      break;
 80046b2:	e043      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fad0 	bl	8004c60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0208 	orr.w	r2, r2, #8
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046f2:	e023      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fb0e 	bl	8004d1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004734:	e002      	b.n	800473c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
      break;
 800473a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop

08004750 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a32      	ldr	r2, [pc, #200]	; (800487c <TIM_Base_SetConfig+0xdc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_Base_SetConfig+0x28>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047be:	d003      	beq.n	80047c8 <TIM_Base_SetConfig+0x28>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2f      	ldr	r2, [pc, #188]	; (8004880 <TIM_Base_SetConfig+0xe0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d108      	bne.n	80047da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a27      	ldr	r2, [pc, #156]	; (800487c <TIM_Base_SetConfig+0xdc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <TIM_Base_SetConfig+0x6a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e8:	d00f      	beq.n	800480a <TIM_Base_SetConfig+0x6a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <TIM_Base_SetConfig+0xe0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_Base_SetConfig+0x6a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a23      	ldr	r2, [pc, #140]	; (8004884 <TIM_Base_SetConfig+0xe4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <TIM_Base_SetConfig+0x6a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <TIM_Base_SetConfig+0xe8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_Base_SetConfig+0x6a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a21      	ldr	r2, [pc, #132]	; (800488c <TIM_Base_SetConfig+0xec>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a0e      	ldr	r2, [pc, #56]	; (800487c <TIM_Base_SetConfig+0xdc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00b      	beq.n	8004860 <TIM_Base_SetConfig+0xc0>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a0e      	ldr	r2, [pc, #56]	; (8004884 <TIM_Base_SetConfig+0xe4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <TIM_Base_SetConfig+0xc0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a0d      	ldr	r2, [pc, #52]	; (8004888 <TIM_Base_SetConfig+0xe8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_Base_SetConfig+0xc0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0c      	ldr	r2, [pc, #48]	; (800488c <TIM_Base_SetConfig+0xec>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	615a      	str	r2, [r3, #20]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40000400 	.word	0x40000400
 8004884:	40014000 	.word	0x40014000
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800

08004890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 0302 	bic.w	r3, r3, #2
 80048dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a28      	ldr	r2, [pc, #160]	; (800498c <TIM_OC1_SetConfig+0xfc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_OC1_SetConfig+0x78>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a27      	ldr	r2, [pc, #156]	; (8004990 <TIM_OC1_SetConfig+0x100>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_OC1_SetConfig+0x78>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a26      	ldr	r2, [pc, #152]	; (8004994 <TIM_OC1_SetConfig+0x104>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC1_SetConfig+0x78>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a25      	ldr	r2, [pc, #148]	; (8004998 <TIM_OC1_SetConfig+0x108>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d10c      	bne.n	8004922 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0308 	bic.w	r3, r3, #8
 800490e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <TIM_OC1_SetConfig+0xfc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_OC1_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a18      	ldr	r2, [pc, #96]	; (8004990 <TIM_OC1_SetConfig+0x100>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_OC1_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <TIM_OC1_SetConfig+0x104>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_OC1_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a16      	ldr	r2, [pc, #88]	; (8004998 <TIM_OC1_SetConfig+0x108>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d111      	bne.n	8004966 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	621a      	str	r2, [r3, #32]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0210 	bic.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0320 	bic.w	r3, r3, #32
 80049ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <TIM_OC2_SetConfig+0xf0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10d      	bne.n	8004a1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <TIM_OC2_SetConfig+0xf0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_OC2_SetConfig+0xa0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <TIM_OC2_SetConfig+0xf4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_OC2_SetConfig+0xa0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <TIM_OC2_SetConfig+0xf8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_OC2_SetConfig+0xa0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <TIM_OC2_SetConfig+0xfc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d113      	bne.n	8004a64 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a42:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a4a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40012c00 	.word	0x40012c00
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40014400 	.word	0x40014400
 8004a98:	40014800 	.word	0x40014800

08004a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0303 	bic.w	r3, r3, #3
 8004ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <TIM_OC3_SetConfig+0xec>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10d      	bne.n	8004b1a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b18:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <TIM_OC3_SetConfig+0xec>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <TIM_OC3_SetConfig+0x9e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <TIM_OC3_SetConfig+0xf0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <TIM_OC3_SetConfig+0x9e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <TIM_OC3_SetConfig+0xf4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <TIM_OC3_SetConfig+0x9e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <TIM_OC3_SetConfig+0xf8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d113      	bne.n	8004b62 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	031b      	lsls	r3, r3, #12
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a16      	ldr	r2, [pc, #88]	; (8004c50 <TIM_OC4_SetConfig+0xb8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_OC4_SetConfig+0x7c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <TIM_OC4_SetConfig+0xbc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_OC4_SetConfig+0x7c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <TIM_OC4_SetConfig+0xc0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC4_SetConfig+0x7c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <TIM_OC4_SetConfig+0xc4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d109      	bne.n	8004c28 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	019b      	lsls	r3, r3, #6
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800

08004c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <TIM_OC5_SetConfig+0xac>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_OC5_SetConfig+0x72>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <TIM_OC5_SetConfig+0xb0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_OC5_SetConfig+0x72>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <TIM_OC5_SetConfig+0xb4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_OC5_SetConfig+0x72>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <TIM_OC5_SetConfig+0xb8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d109      	bne.n	8004ce6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	621a      	str	r2, [r3, #32]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	051b      	lsls	r3, r3, #20
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <TIM_OC6_SetConfig+0xb0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_OC6_SetConfig+0x74>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <TIM_OC6_SetConfig+0xb4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_OC6_SetConfig+0x74>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <TIM_OC6_SetConfig+0xb8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC6_SetConfig+0x74>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <TIM_OC6_SetConfig+0xbc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800

08004ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2201      	movs	r2, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	401a      	ands	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	fa01 f303 	lsl.w	r3, r1, r3
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e060      	b.n	8004f06 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	041b      	lsls	r3, r3, #16
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d115      	bne.n	8004ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	051b      	lsls	r3, r3, #20
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40012c00 	.word	0x40012c00

08004f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e040      	b.n	8004fe8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc f936 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	; 0x24
 8004f80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fbd4 	bl	8005740 <UART_SetConfig>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e022      	b.n	8004fe8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fcfe 	bl	80059ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fd85 	bl	8005af0 <UART_CheckIdleState>
 8004fe6:	4603      	mov	r3, r0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b08b      	sub	sp, #44	; 0x2c
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005002:	2b20      	cmp	r3, #32
 8005004:	d147      	bne.n	8005096 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_UART_Transmit_IT+0x22>
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e040      	b.n	8005098 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2221      	movs	r2, #33	; 0x21
 800503e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005048:	d107      	bne.n	800505a <HAL_UART_Transmit_IT+0x6a>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_UART_Transmit_IT+0xb4>)
 8005056:	66da      	str	r2, [r3, #108]	; 0x6c
 8005058:	e002      	b.n	8005060 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <HAL_UART_Transmit_IT+0xb8>)
 800505e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	613b      	str	r3, [r7, #16]
   return(result);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	623b      	str	r3, [r7, #32]
 8005080:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	69f9      	ldr	r1, [r7, #28]
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	61bb      	str	r3, [r7, #24]
   return(result);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e6      	bne.n	8005060 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
  }
}
 8005098:	4618      	mov	r0, r3
 800509a:	372c      	adds	r7, #44	; 0x2c
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	08006049 	.word	0x08006049
 80050a8:	08005f91 	.word	0x08005f91

080050ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d132      	bne.n	800512a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_UART_Receive_IT+0x24>
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e02b      	b.n	800512c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d018      	beq.n	800511a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	613b      	str	r3, [r7, #16]
   return(result);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	623b      	str	r3, [r7, #32]
 8005108:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	69f9      	ldr	r1, [r7, #28]
 800510c:	6a3a      	ldr	r2, [r7, #32]
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	61bb      	str	r3, [r7, #24]
   return(result);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	461a      	mov	r2, r3
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fdf5 	bl	8005d10 <UART_Start_Receive_IT>
 8005126:	4603      	mov	r3, r0
 8005128:	e000      	b.n	800512c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800512a:	2302      	movs	r3, #2
  }
}
 800512c:	4618      	mov	r0, r3
 800512e:	3728      	adds	r7, #40	; 0x28
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b0ba      	sub	sp, #232	; 0xe8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800515a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800515e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005162:	4013      	ands	r3, r2
 8005164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d115      	bne.n	800519c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00f      	beq.n	800519c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800517c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 82ab 	beq.w	80056e8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
      }
      return;
 800519a:	e2a5      	b.n	80056e8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800519c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8117 	beq.w	80053d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051b6:	4b85      	ldr	r3, [pc, #532]	; (80053cc <HAL_UART_IRQHandler+0x298>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 810a 	beq.w	80053d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d011      	beq.n	80051f0 <HAL_UART_IRQHandler+0xbc>
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2201      	movs	r2, #1
 80051de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d011      	beq.n	8005220 <HAL_UART_IRQHandler+0xec>
 80051fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00b      	beq.n	8005220 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2202      	movs	r2, #2
 800520e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d011      	beq.n	8005250 <HAL_UART_IRQHandler+0x11c>
 800522c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00b      	beq.n	8005250 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2204      	movs	r2, #4
 800523e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005246:	f043 0202 	orr.w	r2, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d017      	beq.n	800528c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800526c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2208      	movs	r2, #8
 800527a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005282:	f043 0208 	orr.w	r2, r3, #8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005294:	2b00      	cmp	r3, #0
 8005296:	d012      	beq.n	80052be <HAL_UART_IRQHandler+0x18a>
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8211 	beq.w	80056ec <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00d      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d005      	beq.n	8005316 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800530a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800530e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04f      	beq.n	80053b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fdc0 	bl	8005e9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d141      	bne.n	80053ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3308      	adds	r3, #8
 8005330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800535a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800536e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1d9      	bne.n	800532a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537a:	2b00      	cmp	r3, #0
 800537c:	d013      	beq.n	80053a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005382:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <HAL_UART_IRQHandler+0x29c>)
 8005384:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538a:	4618      	mov	r0, r3
 800538c:	f7fd f86f 	bl	800246e <HAL_DMA_Abort_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d017      	beq.n	80053c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e00f      	b.n	80053c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9b4 	bl	8005714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	e00b      	b.n	80053c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f9b0 	bl	8005714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	e007      	b.n	80053c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f9ac 	bl	8005714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80053c4:	e192      	b.n	80056ec <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c6:	bf00      	nop
    return;
 80053c8:	e190      	b.n	80056ec <HAL_UART_IRQHandler+0x5b8>
 80053ca:	bf00      	nop
 80053cc:	04000120 	.word	0x04000120
 80053d0:	08005f65 	.word	0x08005f65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d8:	2b01      	cmp	r3, #1
 80053da:	f040 814b 	bne.w	8005674 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8144 	beq.w	8005674 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 813d 	beq.w	8005674 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2210      	movs	r2, #16
 8005400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	f040 80b5 	bne.w	800557c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800541e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8164 	beq.w	80056f0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800542e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005432:	429a      	cmp	r2, r3
 8005434:	f080 815c 	bcs.w	80056f0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800543e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b20      	cmp	r3, #32
 800544a:	f000 8086 	beq.w	800555a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800546a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800547c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005484:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1da      	bne.n	800544e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e1      	bne.n	8005498 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3308      	adds	r3, #8
 80054f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e3      	bne.n	80054d4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552a:	f023 0310 	bic.w	r3, r3, #16
 800552e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800553c:	65bb      	str	r3, [r7, #88]	; 0x58
 800553e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800554a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e4      	bne.n	800551a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005554:	4618      	mov	r0, r3
 8005556:	f7fc ff51 	bl	80023fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800556c:	b29b      	uxth	r3, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	b29b      	uxth	r3, r3
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f8d7 	bl	8005728 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800557a:	e0b9      	b.n	80056f0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005588:	b29b      	uxth	r3, r3
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80ab 	beq.w	80056f4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800559e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80a6 	beq.w	80056f4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ca:	647b      	str	r3, [r7, #68]	; 0x44
 80055cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e4      	bne.n	80055a8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3308      	adds	r3, #8
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	623b      	str	r3, [r7, #32]
   return(result);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3308      	adds	r3, #8
 80055fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005602:	633a      	str	r2, [r7, #48]	; 0x30
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e3      	bne.n	80055de <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	60fb      	str	r3, [r7, #12]
   return(result);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0310 	bic.w	r3, r3, #16
 800563e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	69b9      	ldr	r1, [r7, #24]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	617b      	str	r3, [r7, #20]
   return(result);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e4      	bne.n	800562a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f85b 	bl	8005728 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005672:	e03f      	b.n	80056f4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <HAL_UART_IRQHandler+0x56a>
 8005680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 ff08 	bl	80064ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800569c:	e02d      	b.n	80056fa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800569e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00e      	beq.n	80056c8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01c      	beq.n	80056f8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4798      	blx	r3
    }
    return;
 80056c6:	e017      	b.n	80056f8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d012      	beq.n	80056fa <HAL_UART_IRQHandler+0x5c6>
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00c      	beq.n	80056fa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fd11 	bl	8006108 <UART_EndTransmit_IT>
    return;
 80056e6:	e008      	b.n	80056fa <HAL_UART_IRQHandler+0x5c6>
      return;
 80056e8:	bf00      	nop
 80056ea:	e006      	b.n	80056fa <HAL_UART_IRQHandler+0x5c6>
    return;
 80056ec:	bf00      	nop
 80056ee:	e004      	b.n	80056fa <HAL_UART_IRQHandler+0x5c6>
      return;
 80056f0:	bf00      	nop
 80056f2:	e002      	b.n	80056fa <HAL_UART_IRQHandler+0x5c6>
      return;
 80056f4:	bf00      	nop
 80056f6:	e000      	b.n	80056fa <HAL_UART_IRQHandler+0x5c6>
    return;
 80056f8:	bf00      	nop
  }

}
 80056fa:	37e8      	adds	r7, #232	; 0xe8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b8a      	ldr	r3, [pc, #552]	; (8005994 <UART_SetConfig+0x254>)
 800576c:	4013      	ands	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	6979      	ldr	r1, [r7, #20]
 8005774:	430b      	orrs	r3, r1
 8005776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a78      	ldr	r2, [pc, #480]	; (8005998 <UART_SetConfig+0x258>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d120      	bne.n	80057fe <UART_SetConfig+0xbe>
 80057bc:	4b77      	ldr	r3, [pc, #476]	; (800599c <UART_SetConfig+0x25c>)
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d817      	bhi.n	80057f8 <UART_SetConfig+0xb8>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0x90>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057f3 	.word	0x080057f3
 80057dc:	080057e7 	.word	0x080057e7
 80057e0:	2300      	movs	r3, #0
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e01d      	b.n	8005822 <UART_SetConfig+0xe2>
 80057e6:	2302      	movs	r3, #2
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e01a      	b.n	8005822 <UART_SetConfig+0xe2>
 80057ec:	2304      	movs	r3, #4
 80057ee:	77fb      	strb	r3, [r7, #31]
 80057f0:	e017      	b.n	8005822 <UART_SetConfig+0xe2>
 80057f2:	2308      	movs	r3, #8
 80057f4:	77fb      	strb	r3, [r7, #31]
 80057f6:	e014      	b.n	8005822 <UART_SetConfig+0xe2>
 80057f8:	2310      	movs	r3, #16
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e011      	b.n	8005822 <UART_SetConfig+0xe2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a67      	ldr	r2, [pc, #412]	; (80059a0 <UART_SetConfig+0x260>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d102      	bne.n	800580e <UART_SetConfig+0xce>
 8005808:	2300      	movs	r3, #0
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e009      	b.n	8005822 <UART_SetConfig+0xe2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a64      	ldr	r2, [pc, #400]	; (80059a4 <UART_SetConfig+0x264>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d102      	bne.n	800581e <UART_SetConfig+0xde>
 8005818:	2300      	movs	r3, #0
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e001      	b.n	8005822 <UART_SetConfig+0xe2>
 800581e:	2310      	movs	r3, #16
 8005820:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582a:	d15a      	bne.n	80058e2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800582c:	7ffb      	ldrb	r3, [r7, #31]
 800582e:	2b08      	cmp	r3, #8
 8005830:	d827      	bhi.n	8005882 <UART_SetConfig+0x142>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0xf8>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	0800585d 	.word	0x0800585d
 800583c:	08005865 	.word	0x08005865
 8005840:	0800586d 	.word	0x0800586d
 8005844:	08005883 	.word	0x08005883
 8005848:	08005873 	.word	0x08005873
 800584c:	08005883 	.word	0x08005883
 8005850:	08005883 	.word	0x08005883
 8005854:	08005883 	.word	0x08005883
 8005858:	0800587b 	.word	0x0800587b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800585c:	f7fe f9e8 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8005860:	61b8      	str	r0, [r7, #24]
        break;
 8005862:	e013      	b.n	800588c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005864:	f7fe fa06 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 8005868:	61b8      	str	r0, [r7, #24]
        break;
 800586a:	e00f      	b.n	800588c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800586c:	4b4e      	ldr	r3, [pc, #312]	; (80059a8 <UART_SetConfig+0x268>)
 800586e:	61bb      	str	r3, [r7, #24]
        break;
 8005870:	e00c      	b.n	800588c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005872:	f7fe f967 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8005876:	61b8      	str	r0, [r7, #24]
        break;
 8005878:	e008      	b.n	800588c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800587a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587e:	61bb      	str	r3, [r7, #24]
        break;
 8005880:	e004      	b.n	800588c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	77bb      	strb	r3, [r7, #30]
        break;
 800588a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d074      	beq.n	800597c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	005a      	lsls	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	441a      	add	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b0f      	cmp	r3, #15
 80058ac:	d916      	bls.n	80058dc <UART_SetConfig+0x19c>
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b4:	d212      	bcs.n	80058dc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f023 030f 	bic.w	r3, r3, #15
 80058be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	89fb      	ldrh	r3, [r7, #14]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	89fa      	ldrh	r2, [r7, #14]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	e04f      	b.n	800597c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	77bb      	strb	r3, [r7, #30]
 80058e0:	e04c      	b.n	800597c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e2:	7ffb      	ldrb	r3, [r7, #31]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d828      	bhi.n	800593a <UART_SetConfig+0x1fa>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x1b0>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800593b 	.word	0x0800593b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7fe f98c 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8005918:	61b8      	str	r0, [r7, #24]
        break;
 800591a:	e013      	b.n	8005944 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591c:	f7fe f9aa 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 8005920:	61b8      	str	r0, [r7, #24]
        break;
 8005922:	e00f      	b.n	8005944 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <UART_SetConfig+0x268>)
 8005926:	61bb      	str	r3, [r7, #24]
        break;
 8005928:	e00c      	b.n	8005944 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fe f90b 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 800592e:	61b8      	str	r0, [r7, #24]
        break;
 8005930:	e008      	b.n	8005944 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	61bb      	str	r3, [r7, #24]
        break;
 8005938:	e004      	b.n	8005944 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	77bb      	strb	r3, [r7, #30]
        break;
 8005942:	bf00      	nop
    }

    if (pclk != 0U)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	085a      	lsrs	r2, r3, #1
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b0f      	cmp	r3, #15
 8005962:	d909      	bls.n	8005978 <UART_SetConfig+0x238>
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596a:	d205      	bcs.n	8005978 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	e001      	b.n	800597c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005988:	7fbb      	ldrb	r3, [r7, #30]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	efff69f3 	.word	0xefff69f3
 8005998:	40013800 	.word	0x40013800
 800599c:	40021000 	.word	0x40021000
 80059a0:	40004400 	.word	0x40004400
 80059a4:	40004800 	.word	0x40004800
 80059a8:	007a1200 	.word	0x007a1200

080059ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01a      	beq.n	8005ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aaa:	d10a      	bne.n	8005ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	605a      	str	r2, [r3, #4]
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b098      	sub	sp, #96	; 0x60
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b00:	f7fb fd58 	bl	80015b4 <HAL_GetTick>
 8005b04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d12e      	bne.n	8005b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f88c 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d021      	beq.n	8005b72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b42:	653b      	str	r3, [r7, #80]	; 0x50
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e6      	bne.n	8005b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e062      	b.n	8005c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d149      	bne.n	8005c14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f856 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d03c      	beq.n	8005c14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bec:	61fa      	str	r2, [r7, #28]
 8005bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e5      	bne.n	8005bcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e011      	b.n	8005c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3758      	adds	r7, #88	; 0x58
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c50:	e049      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d045      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5a:	f7fb fcab 	bl	80015b4 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d302      	bcc.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e048      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d031      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d110      	bne.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2208      	movs	r2, #8
 8005c96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f8ff 	bl	8005e9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e029      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc0:	d111      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f8e5 	bl	8005e9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e00f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	bf0c      	ite	eq
 8005cf6:	2301      	moveq	r3, #1
 8005cf8:	2300      	movne	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d0a6      	beq.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b097      	sub	sp, #92	; 0x5c
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	88fa      	ldrh	r2, [r7, #6]
 8005d30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d42:	d10e      	bne.n	8005d62 <UART_Start_Receive_IT+0x52>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <UART_Start_Receive_IT+0x48>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d56:	e02d      	b.n	8005db4 <UART_Start_Receive_IT+0xa4>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	22ff      	movs	r2, #255	; 0xff
 8005d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d60:	e028      	b.n	8005db4 <UART_Start_Receive_IT+0xa4>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10d      	bne.n	8005d86 <UART_Start_Receive_IT+0x76>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <UART_Start_Receive_IT+0x6c>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	22ff      	movs	r2, #255	; 0xff
 8005d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d7a:	e01b      	b.n	8005db4 <UART_Start_Receive_IT+0xa4>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	227f      	movs	r2, #127	; 0x7f
 8005d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d84:	e016      	b.n	8005db4 <UART_Start_Receive_IT+0xa4>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d8e:	d10d      	bne.n	8005dac <UART_Start_Receive_IT+0x9c>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <UART_Start_Receive_IT+0x92>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	227f      	movs	r2, #127	; 0x7f
 8005d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005da0:	e008      	b.n	8005db4 <UART_Start_Receive_IT+0xa4>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	223f      	movs	r2, #63	; 0x3f
 8005da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005daa:	e003      	b.n	8005db4 <UART_Start_Receive_IT+0xa4>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2222      	movs	r2, #34	; 0x22
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	657b      	str	r3, [r7, #84]	; 0x54
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005de4:	64ba      	str	r2, [r7, #72]	; 0x48
 8005de6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e00:	d107      	bne.n	8005e12 <UART_Start_Receive_IT+0x102>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <UART_Start_Receive_IT+0x184>)
 8005e0e:	669a      	str	r2, [r3, #104]	; 0x68
 8005e10:	e002      	b.n	8005e18 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a20      	ldr	r2, [pc, #128]	; (8005e98 <UART_Start_Receive_IT+0x188>)
 8005e16:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d019      	beq.n	8005e54 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e6      	bne.n	8005e20 <UART_Start_Receive_IT+0x110>
 8005e52:	e018      	b.n	8005e86 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	613b      	str	r3, [r7, #16]
   return(result);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f043 0320 	orr.w	r3, r3, #32
 8005e68:	653b      	str	r3, [r7, #80]	; 0x50
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	69f9      	ldr	r1, [r7, #28]
 8005e78:	6a3a      	ldr	r2, [r7, #32]
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e6      	bne.n	8005e54 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	375c      	adds	r7, #92	; 0x5c
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	08006305 	.word	0x08006305
 8005e98:	0800615d 	.word	0x0800615d

08005e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b095      	sub	sp, #84	; 0x54
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e6      	bne.n	8005ea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3308      	adds	r3, #8
 8005edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e5      	bne.n	8005ed6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d118      	bne.n	8005f44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6979      	ldr	r1, [r7, #20]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e6      	bne.n	8005f12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f58:	bf00      	nop
 8005f5a:	3754      	adds	r7, #84	; 0x54
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fbc6 	bl	8005714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b08f      	sub	sp, #60	; 0x3c
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f9c:	2b21      	cmp	r3, #33	; 0x21
 8005f9e:	d14d      	bne.n	800603c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d132      	bne.n	8006012 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fcc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e6      	bne.n	8005fac <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6979      	ldr	r1, [r7, #20]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	613b      	str	r3, [r7, #16]
   return(result);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e6      	bne.n	8005fde <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006010:	e014      	b.n	800603c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006016:	781a      	ldrb	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	b292      	uxth	r2, r2
 800601e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800603c:	bf00      	nop
 800603e:	373c      	adds	r7, #60	; 0x3c
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b091      	sub	sp, #68	; 0x44
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006054:	2b21      	cmp	r3, #33	; 0x21
 8006056:	d151      	bne.n	80060fc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d132      	bne.n	80060ca <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	623b      	str	r3, [r7, #32]
   return(result);
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	633b      	str	r3, [r7, #48]	; 0x30
 8006084:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e6      	bne.n	8006064 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	69b9      	ldr	r1, [r7, #24]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	617b      	str	r3, [r7, #20]
   return(result);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e6      	bne.n	8006096 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80060c8:	e018      	b.n	80060fc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80060d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d2:	881a      	ldrh	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060dc:	b292      	uxth	r2, r2
 80060de:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e4:	1c9a      	adds	r2, r3, #2
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80060fc:	bf00      	nop
 80060fe:	3744      	adds	r7, #68	; 0x44
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	60bb      	str	r3, [r7, #8]
   return(result);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	613b      	str	r3, [r7, #16]
   return(result);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e6      	bne.n	8006110 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fad6 	bl	8005700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006154:	bf00      	nop
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b09c      	sub	sp, #112	; 0x70
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800616a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006174:	2b22      	cmp	r3, #34	; 0x22
 8006176:	f040 80b9 	bne.w	80062ec <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006180:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006184:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006188:	b2d9      	uxtb	r1, r3
 800618a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800618e:	b2da      	uxtb	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006194:	400a      	ands	r2, r1
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 809c 	bne.w	80062fc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80061e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e6      	bne.n	80061c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3308      	adds	r3, #8
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	667b      	str	r3, [r7, #100]	; 0x64
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3308      	adds	r3, #8
 8006214:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006216:	647a      	str	r2, [r7, #68]	; 0x44
 8006218:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800621c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e5      	bne.n	80061f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d018      	beq.n	800627e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	623b      	str	r3, [r7, #32]
   return(result);
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006260:	663b      	str	r3, [r7, #96]	; 0x60
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800626a:	633b      	str	r3, [r7, #48]	; 0x30
 800626c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e6      	bne.n	800624c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006282:	2b01      	cmp	r3, #1
 8006284:	d12e      	bne.n	80062e4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	60fb      	str	r3, [r7, #12]
   return(result);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f023 0310 	bic.w	r3, r3, #16
 80062a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	69b9      	ldr	r1, [r7, #24]
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	617b      	str	r3, [r7, #20]
   return(result);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e6      	bne.n	800628c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d103      	bne.n	80062d4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2210      	movs	r2, #16
 80062d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff fa23 	bl	8005728 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062e2:	e00b      	b.n	80062fc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7fa fe63 	bl	8000fb0 <HAL_UART_RxCpltCallback>
}
 80062ea:	e007      	b.n	80062fc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0208 	orr.w	r2, r2, #8
 80062fa:	619a      	str	r2, [r3, #24]
}
 80062fc:	bf00      	nop
 80062fe:	3770      	adds	r7, #112	; 0x70
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b09c      	sub	sp, #112	; 0x70
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006312:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800631c:	2b22      	cmp	r3, #34	; 0x22
 800631e:	f040 80b9 	bne.w	8006494 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006328:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006330:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006332:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006336:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800633a:	4013      	ands	r3, r2
 800633c:	b29a      	uxth	r2, r3
 800633e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006340:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	f040 809c 	bne.w	80064a4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800637a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800637c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006380:	667b      	str	r3, [r7, #100]	; 0x64
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800638a:	657b      	str	r3, [r7, #84]	; 0x54
 800638c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e6      	bne.n	800636c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	663b      	str	r3, [r7, #96]	; 0x60
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063be:	643a      	str	r2, [r7, #64]	; 0x40
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e5      	bne.n	800639e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d018      	beq.n	8006426 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	61fb      	str	r3, [r7, #28]
   return(result);
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006414:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e6      	bne.n	80063f4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	2b01      	cmp	r3, #1
 800642c:	d12e      	bne.n	800648c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	60bb      	str	r3, [r7, #8]
   return(result);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f023 0310 	bic.w	r3, r3, #16
 8006448:	65bb      	str	r3, [r7, #88]	; 0x58
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6979      	ldr	r1, [r7, #20]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	613b      	str	r3, [r7, #16]
   return(result);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e6      	bne.n	8006434 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b10      	cmp	r3, #16
 8006472:	d103      	bne.n	800647c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2210      	movs	r2, #16
 800647a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff f94f 	bl	8005728 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800648a:	e00b      	b.n	80064a4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fa fd8f 	bl	8000fb0 <HAL_UART_RxCpltCallback>
}
 8006492:	e007      	b.n	80064a4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0208 	orr.w	r2, r2, #8
 80064a2:	619a      	str	r2, [r3, #24]
}
 80064a4:	bf00      	nop
 80064a6:	3770      	adds	r7, #112	; 0x70
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <__cvt>:
 80064c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c4:	ec55 4b10 	vmov	r4, r5, d0
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	460e      	mov	r6, r1
 80064cc:	4619      	mov	r1, r3
 80064ce:	462b      	mov	r3, r5
 80064d0:	bfbb      	ittet	lt
 80064d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064d6:	461d      	movlt	r5, r3
 80064d8:	2300      	movge	r3, #0
 80064da:	232d      	movlt	r3, #45	; 0x2d
 80064dc:	700b      	strb	r3, [r1, #0]
 80064de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064e4:	4691      	mov	r9, r2
 80064e6:	f023 0820 	bic.w	r8, r3, #32
 80064ea:	bfbc      	itt	lt
 80064ec:	4622      	movlt	r2, r4
 80064ee:	4614      	movlt	r4, r2
 80064f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064f4:	d005      	beq.n	8006502 <__cvt+0x42>
 80064f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064fa:	d100      	bne.n	80064fe <__cvt+0x3e>
 80064fc:	3601      	adds	r6, #1
 80064fe:	2102      	movs	r1, #2
 8006500:	e000      	b.n	8006504 <__cvt+0x44>
 8006502:	2103      	movs	r1, #3
 8006504:	ab03      	add	r3, sp, #12
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	ab02      	add	r3, sp, #8
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	ec45 4b10 	vmov	d0, r4, r5
 8006510:	4653      	mov	r3, sl
 8006512:	4632      	mov	r2, r6
 8006514:	f000 fe48 	bl	80071a8 <_dtoa_r>
 8006518:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800651c:	4607      	mov	r7, r0
 800651e:	d102      	bne.n	8006526 <__cvt+0x66>
 8006520:	f019 0f01 	tst.w	r9, #1
 8006524:	d022      	beq.n	800656c <__cvt+0xac>
 8006526:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800652a:	eb07 0906 	add.w	r9, r7, r6
 800652e:	d110      	bne.n	8006552 <__cvt+0x92>
 8006530:	783b      	ldrb	r3, [r7, #0]
 8006532:	2b30      	cmp	r3, #48	; 0x30
 8006534:	d10a      	bne.n	800654c <__cvt+0x8c>
 8006536:	2200      	movs	r2, #0
 8006538:	2300      	movs	r3, #0
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f7fa fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006542:	b918      	cbnz	r0, 800654c <__cvt+0x8c>
 8006544:	f1c6 0601 	rsb	r6, r6, #1
 8006548:	f8ca 6000 	str.w	r6, [sl]
 800654c:	f8da 3000 	ldr.w	r3, [sl]
 8006550:	4499      	add	r9, r3
 8006552:	2200      	movs	r2, #0
 8006554:	2300      	movs	r3, #0
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	f7fa fab5 	bl	8000ac8 <__aeabi_dcmpeq>
 800655e:	b108      	cbz	r0, 8006564 <__cvt+0xa4>
 8006560:	f8cd 900c 	str.w	r9, [sp, #12]
 8006564:	2230      	movs	r2, #48	; 0x30
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	454b      	cmp	r3, r9
 800656a:	d307      	bcc.n	800657c <__cvt+0xbc>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006570:	1bdb      	subs	r3, r3, r7
 8006572:	4638      	mov	r0, r7
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	b004      	add	sp, #16
 8006578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657c:	1c59      	adds	r1, r3, #1
 800657e:	9103      	str	r1, [sp, #12]
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e7f0      	b.n	8006566 <__cvt+0xa6>

08006584 <__exponent>:
 8006584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006586:	4603      	mov	r3, r0
 8006588:	2900      	cmp	r1, #0
 800658a:	bfb8      	it	lt
 800658c:	4249      	neglt	r1, r1
 800658e:	f803 2b02 	strb.w	r2, [r3], #2
 8006592:	bfb4      	ite	lt
 8006594:	222d      	movlt	r2, #45	; 0x2d
 8006596:	222b      	movge	r2, #43	; 0x2b
 8006598:	2909      	cmp	r1, #9
 800659a:	7042      	strb	r2, [r0, #1]
 800659c:	dd2a      	ble.n	80065f4 <__exponent+0x70>
 800659e:	f10d 0207 	add.w	r2, sp, #7
 80065a2:	4617      	mov	r7, r2
 80065a4:	260a      	movs	r6, #10
 80065a6:	4694      	mov	ip, r2
 80065a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80065ac:	fb06 1415 	mls	r4, r6, r5, r1
 80065b0:	3430      	adds	r4, #48	; 0x30
 80065b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80065b6:	460c      	mov	r4, r1
 80065b8:	2c63      	cmp	r4, #99	; 0x63
 80065ba:	f102 32ff 	add.w	r2, r2, #4294967295
 80065be:	4629      	mov	r1, r5
 80065c0:	dcf1      	bgt.n	80065a6 <__exponent+0x22>
 80065c2:	3130      	adds	r1, #48	; 0x30
 80065c4:	f1ac 0402 	sub.w	r4, ip, #2
 80065c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065cc:	1c41      	adds	r1, r0, #1
 80065ce:	4622      	mov	r2, r4
 80065d0:	42ba      	cmp	r2, r7
 80065d2:	d30a      	bcc.n	80065ea <__exponent+0x66>
 80065d4:	f10d 0209 	add.w	r2, sp, #9
 80065d8:	eba2 020c 	sub.w	r2, r2, ip
 80065dc:	42bc      	cmp	r4, r7
 80065de:	bf88      	it	hi
 80065e0:	2200      	movhi	r2, #0
 80065e2:	4413      	add	r3, r2
 80065e4:	1a18      	subs	r0, r3, r0
 80065e6:	b003      	add	sp, #12
 80065e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80065ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80065f2:	e7ed      	b.n	80065d0 <__exponent+0x4c>
 80065f4:	2330      	movs	r3, #48	; 0x30
 80065f6:	3130      	adds	r1, #48	; 0x30
 80065f8:	7083      	strb	r3, [r0, #2]
 80065fa:	70c1      	strb	r1, [r0, #3]
 80065fc:	1d03      	adds	r3, r0, #4
 80065fe:	e7f1      	b.n	80065e4 <__exponent+0x60>

08006600 <_printf_float>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	ed2d 8b02 	vpush	{d8}
 8006608:	b08d      	sub	sp, #52	; 0x34
 800660a:	460c      	mov	r4, r1
 800660c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006610:	4616      	mov	r6, r2
 8006612:	461f      	mov	r7, r3
 8006614:	4605      	mov	r5, r0
 8006616:	f000 fcc7 	bl	8006fa8 <_localeconv_r>
 800661a:	f8d0 a000 	ldr.w	sl, [r0]
 800661e:	4650      	mov	r0, sl
 8006620:	f7f9 fe26 	bl	8000270 <strlen>
 8006624:	2300      	movs	r3, #0
 8006626:	930a      	str	r3, [sp, #40]	; 0x28
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	9305      	str	r3, [sp, #20]
 800662c:	f8d8 3000 	ldr.w	r3, [r8]
 8006630:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006634:	3307      	adds	r3, #7
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	f103 0208 	add.w	r2, r3, #8
 800663e:	f8c8 2000 	str.w	r2, [r8]
 8006642:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800664a:	9307      	str	r3, [sp, #28]
 800664c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006650:	ee08 0a10 	vmov	s16, r0
 8006654:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800665c:	4b9e      	ldr	r3, [pc, #632]	; (80068d8 <_printf_float+0x2d8>)
 800665e:	f04f 32ff 	mov.w	r2, #4294967295
 8006662:	f7fa fa63 	bl	8000b2c <__aeabi_dcmpun>
 8006666:	bb88      	cbnz	r0, 80066cc <_printf_float+0xcc>
 8006668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800666c:	4b9a      	ldr	r3, [pc, #616]	; (80068d8 <_printf_float+0x2d8>)
 800666e:	f04f 32ff 	mov.w	r2, #4294967295
 8006672:	f7fa fa3d 	bl	8000af0 <__aeabi_dcmple>
 8006676:	bb48      	cbnz	r0, 80066cc <_printf_float+0xcc>
 8006678:	2200      	movs	r2, #0
 800667a:	2300      	movs	r3, #0
 800667c:	4640      	mov	r0, r8
 800667e:	4649      	mov	r1, r9
 8006680:	f7fa fa2c 	bl	8000adc <__aeabi_dcmplt>
 8006684:	b110      	cbz	r0, 800668c <_printf_float+0x8c>
 8006686:	232d      	movs	r3, #45	; 0x2d
 8006688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800668c:	4a93      	ldr	r2, [pc, #588]	; (80068dc <_printf_float+0x2dc>)
 800668e:	4b94      	ldr	r3, [pc, #592]	; (80068e0 <_printf_float+0x2e0>)
 8006690:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006694:	bf94      	ite	ls
 8006696:	4690      	movls	r8, r2
 8006698:	4698      	movhi	r8, r3
 800669a:	2303      	movs	r3, #3
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	9b05      	ldr	r3, [sp, #20]
 80066a0:	f023 0304 	bic.w	r3, r3, #4
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	f04f 0900 	mov.w	r9, #0
 80066aa:	9700      	str	r7, [sp, #0]
 80066ac:	4633      	mov	r3, r6
 80066ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f9da 	bl	8006a6c <_printf_common>
 80066b8:	3001      	adds	r0, #1
 80066ba:	f040 8090 	bne.w	80067de <_printf_float+0x1de>
 80066be:	f04f 30ff 	mov.w	r0, #4294967295
 80066c2:	b00d      	add	sp, #52	; 0x34
 80066c4:	ecbd 8b02 	vpop	{d8}
 80066c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	4640      	mov	r0, r8
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7fa fa2a 	bl	8000b2c <__aeabi_dcmpun>
 80066d8:	b140      	cbz	r0, 80066ec <_printf_float+0xec>
 80066da:	464b      	mov	r3, r9
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bfbc      	itt	lt
 80066e0:	232d      	movlt	r3, #45	; 0x2d
 80066e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066e6:	4a7f      	ldr	r2, [pc, #508]	; (80068e4 <_printf_float+0x2e4>)
 80066e8:	4b7f      	ldr	r3, [pc, #508]	; (80068e8 <_printf_float+0x2e8>)
 80066ea:	e7d1      	b.n	8006690 <_printf_float+0x90>
 80066ec:	6863      	ldr	r3, [r4, #4]
 80066ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066f2:	9206      	str	r2, [sp, #24]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	d13f      	bne.n	8006778 <_printf_float+0x178>
 80066f8:	2306      	movs	r3, #6
 80066fa:	6063      	str	r3, [r4, #4]
 80066fc:	9b05      	ldr	r3, [sp, #20]
 80066fe:	6861      	ldr	r1, [r4, #4]
 8006700:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006704:	2300      	movs	r3, #0
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	ab0a      	add	r3, sp, #40	; 0x28
 800670a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800670e:	ab09      	add	r3, sp, #36	; 0x24
 8006710:	ec49 8b10 	vmov	d0, r8, r9
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800671c:	4628      	mov	r0, r5
 800671e:	f7ff fecf 	bl	80064c0 <__cvt>
 8006722:	9b06      	ldr	r3, [sp, #24]
 8006724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006726:	2b47      	cmp	r3, #71	; 0x47
 8006728:	4680      	mov	r8, r0
 800672a:	d108      	bne.n	800673e <_printf_float+0x13e>
 800672c:	1cc8      	adds	r0, r1, #3
 800672e:	db02      	blt.n	8006736 <_printf_float+0x136>
 8006730:	6863      	ldr	r3, [r4, #4]
 8006732:	4299      	cmp	r1, r3
 8006734:	dd41      	ble.n	80067ba <_printf_float+0x1ba>
 8006736:	f1ab 0302 	sub.w	r3, fp, #2
 800673a:	fa5f fb83 	uxtb.w	fp, r3
 800673e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006742:	d820      	bhi.n	8006786 <_printf_float+0x186>
 8006744:	3901      	subs	r1, #1
 8006746:	465a      	mov	r2, fp
 8006748:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800674c:	9109      	str	r1, [sp, #36]	; 0x24
 800674e:	f7ff ff19 	bl	8006584 <__exponent>
 8006752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006754:	1813      	adds	r3, r2, r0
 8006756:	2a01      	cmp	r2, #1
 8006758:	4681      	mov	r9, r0
 800675a:	6123      	str	r3, [r4, #16]
 800675c:	dc02      	bgt.n	8006764 <_printf_float+0x164>
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	07d2      	lsls	r2, r2, #31
 8006762:	d501      	bpl.n	8006768 <_printf_float+0x168>
 8006764:	3301      	adds	r3, #1
 8006766:	6123      	str	r3, [r4, #16]
 8006768:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800676c:	2b00      	cmp	r3, #0
 800676e:	d09c      	beq.n	80066aa <_printf_float+0xaa>
 8006770:	232d      	movs	r3, #45	; 0x2d
 8006772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006776:	e798      	b.n	80066aa <_printf_float+0xaa>
 8006778:	9a06      	ldr	r2, [sp, #24]
 800677a:	2a47      	cmp	r2, #71	; 0x47
 800677c:	d1be      	bne.n	80066fc <_printf_float+0xfc>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1bc      	bne.n	80066fc <_printf_float+0xfc>
 8006782:	2301      	movs	r3, #1
 8006784:	e7b9      	b.n	80066fa <_printf_float+0xfa>
 8006786:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800678a:	d118      	bne.n	80067be <_printf_float+0x1be>
 800678c:	2900      	cmp	r1, #0
 800678e:	6863      	ldr	r3, [r4, #4]
 8006790:	dd0b      	ble.n	80067aa <_printf_float+0x1aa>
 8006792:	6121      	str	r1, [r4, #16]
 8006794:	b913      	cbnz	r3, 800679c <_printf_float+0x19c>
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	07d0      	lsls	r0, r2, #31
 800679a:	d502      	bpl.n	80067a2 <_printf_float+0x1a2>
 800679c:	3301      	adds	r3, #1
 800679e:	440b      	add	r3, r1
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80067a4:	f04f 0900 	mov.w	r9, #0
 80067a8:	e7de      	b.n	8006768 <_printf_float+0x168>
 80067aa:	b913      	cbnz	r3, 80067b2 <_printf_float+0x1b2>
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	07d2      	lsls	r2, r2, #31
 80067b0:	d501      	bpl.n	80067b6 <_printf_float+0x1b6>
 80067b2:	3302      	adds	r3, #2
 80067b4:	e7f4      	b.n	80067a0 <_printf_float+0x1a0>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e7f2      	b.n	80067a0 <_printf_float+0x1a0>
 80067ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c0:	4299      	cmp	r1, r3
 80067c2:	db05      	blt.n	80067d0 <_printf_float+0x1d0>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	6121      	str	r1, [r4, #16]
 80067c8:	07d8      	lsls	r0, r3, #31
 80067ca:	d5ea      	bpl.n	80067a2 <_printf_float+0x1a2>
 80067cc:	1c4b      	adds	r3, r1, #1
 80067ce:	e7e7      	b.n	80067a0 <_printf_float+0x1a0>
 80067d0:	2900      	cmp	r1, #0
 80067d2:	bfd4      	ite	le
 80067d4:	f1c1 0202 	rsble	r2, r1, #2
 80067d8:	2201      	movgt	r2, #1
 80067da:	4413      	add	r3, r2
 80067dc:	e7e0      	b.n	80067a0 <_printf_float+0x1a0>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	055a      	lsls	r2, r3, #21
 80067e2:	d407      	bmi.n	80067f4 <_printf_float+0x1f4>
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	4642      	mov	r2, r8
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	d12c      	bne.n	800684c <_printf_float+0x24c>
 80067f2:	e764      	b.n	80066be <_printf_float+0xbe>
 80067f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067f8:	f240 80e0 	bls.w	80069bc <_printf_float+0x3bc>
 80067fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006800:	2200      	movs	r2, #0
 8006802:	2300      	movs	r3, #0
 8006804:	f7fa f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8006808:	2800      	cmp	r0, #0
 800680a:	d034      	beq.n	8006876 <_printf_float+0x276>
 800680c:	4a37      	ldr	r2, [pc, #220]	; (80068ec <_printf_float+0x2ec>)
 800680e:	2301      	movs	r3, #1
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f af51 	beq.w	80066be <_printf_float+0xbe>
 800681c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006820:	429a      	cmp	r2, r3
 8006822:	db02      	blt.n	800682a <_printf_float+0x22a>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07d8      	lsls	r0, r3, #31
 8006828:	d510      	bpl.n	800684c <_printf_float+0x24c>
 800682a:	ee18 3a10 	vmov	r3, s16
 800682e:	4652      	mov	r2, sl
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f af41 	beq.w	80066be <_printf_float+0xbe>
 800683c:	f04f 0800 	mov.w	r8, #0
 8006840:	f104 091a 	add.w	r9, r4, #26
 8006844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006846:	3b01      	subs	r3, #1
 8006848:	4543      	cmp	r3, r8
 800684a:	dc09      	bgt.n	8006860 <_printf_float+0x260>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	f100 8107 	bmi.w	8006a62 <_printf_float+0x462>
 8006854:	68e0      	ldr	r0, [r4, #12]
 8006856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006858:	4298      	cmp	r0, r3
 800685a:	bfb8      	it	lt
 800685c:	4618      	movlt	r0, r3
 800685e:	e730      	b.n	80066c2 <_printf_float+0xc2>
 8006860:	2301      	movs	r3, #1
 8006862:	464a      	mov	r2, r9
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f af27 	beq.w	80066be <_printf_float+0xbe>
 8006870:	f108 0801 	add.w	r8, r8, #1
 8006874:	e7e6      	b.n	8006844 <_printf_float+0x244>
 8006876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006878:	2b00      	cmp	r3, #0
 800687a:	dc39      	bgt.n	80068f0 <_printf_float+0x2f0>
 800687c:	4a1b      	ldr	r2, [pc, #108]	; (80068ec <_printf_float+0x2ec>)
 800687e:	2301      	movs	r3, #1
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f af19 	beq.w	80066be <_printf_float+0xbe>
 800688c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006890:	4313      	orrs	r3, r2
 8006892:	d102      	bne.n	800689a <_printf_float+0x29a>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	07d9      	lsls	r1, r3, #31
 8006898:	d5d8      	bpl.n	800684c <_printf_float+0x24c>
 800689a:	ee18 3a10 	vmov	r3, s16
 800689e:	4652      	mov	r2, sl
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f af09 	beq.w	80066be <_printf_float+0xbe>
 80068ac:	f04f 0900 	mov.w	r9, #0
 80068b0:	f104 0a1a 	add.w	sl, r4, #26
 80068b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b6:	425b      	negs	r3, r3
 80068b8:	454b      	cmp	r3, r9
 80068ba:	dc01      	bgt.n	80068c0 <_printf_float+0x2c0>
 80068bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068be:	e792      	b.n	80067e6 <_printf_float+0x1e6>
 80068c0:	2301      	movs	r3, #1
 80068c2:	4652      	mov	r2, sl
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f aef7 	beq.w	80066be <_printf_float+0xbe>
 80068d0:	f109 0901 	add.w	r9, r9, #1
 80068d4:	e7ee      	b.n	80068b4 <_printf_float+0x2b4>
 80068d6:	bf00      	nop
 80068d8:	7fefffff 	.word	0x7fefffff
 80068dc:	08008e88 	.word	0x08008e88
 80068e0:	08008e8c 	.word	0x08008e8c
 80068e4:	08008e90 	.word	0x08008e90
 80068e8:	08008e94 	.word	0x08008e94
 80068ec:	08008e98 	.word	0x08008e98
 80068f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068f4:	429a      	cmp	r2, r3
 80068f6:	bfa8      	it	ge
 80068f8:	461a      	movge	r2, r3
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	4691      	mov	r9, r2
 80068fe:	dc37      	bgt.n	8006970 <_printf_float+0x370>
 8006900:	f04f 0b00 	mov.w	fp, #0
 8006904:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006908:	f104 021a 	add.w	r2, r4, #26
 800690c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800690e:	9305      	str	r3, [sp, #20]
 8006910:	eba3 0309 	sub.w	r3, r3, r9
 8006914:	455b      	cmp	r3, fp
 8006916:	dc33      	bgt.n	8006980 <_printf_float+0x380>
 8006918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800691c:	429a      	cmp	r2, r3
 800691e:	db3b      	blt.n	8006998 <_printf_float+0x398>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	07da      	lsls	r2, r3, #31
 8006924:	d438      	bmi.n	8006998 <_printf_float+0x398>
 8006926:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800692a:	eba2 0903 	sub.w	r9, r2, r3
 800692e:	9b05      	ldr	r3, [sp, #20]
 8006930:	1ad2      	subs	r2, r2, r3
 8006932:	4591      	cmp	r9, r2
 8006934:	bfa8      	it	ge
 8006936:	4691      	movge	r9, r2
 8006938:	f1b9 0f00 	cmp.w	r9, #0
 800693c:	dc35      	bgt.n	80069aa <_printf_float+0x3aa>
 800693e:	f04f 0800 	mov.w	r8, #0
 8006942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006946:	f104 0a1a 	add.w	sl, r4, #26
 800694a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	eba3 0309 	sub.w	r3, r3, r9
 8006954:	4543      	cmp	r3, r8
 8006956:	f77f af79 	ble.w	800684c <_printf_float+0x24c>
 800695a:	2301      	movs	r3, #1
 800695c:	4652      	mov	r2, sl
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f aeaa 	beq.w	80066be <_printf_float+0xbe>
 800696a:	f108 0801 	add.w	r8, r8, #1
 800696e:	e7ec      	b.n	800694a <_printf_float+0x34a>
 8006970:	4613      	mov	r3, r2
 8006972:	4631      	mov	r1, r6
 8006974:	4642      	mov	r2, r8
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	d1c0      	bne.n	8006900 <_printf_float+0x300>
 800697e:	e69e      	b.n	80066be <_printf_float+0xbe>
 8006980:	2301      	movs	r3, #1
 8006982:	4631      	mov	r1, r6
 8006984:	4628      	mov	r0, r5
 8006986:	9205      	str	r2, [sp, #20]
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f ae97 	beq.w	80066be <_printf_float+0xbe>
 8006990:	9a05      	ldr	r2, [sp, #20]
 8006992:	f10b 0b01 	add.w	fp, fp, #1
 8006996:	e7b9      	b.n	800690c <_printf_float+0x30c>
 8006998:	ee18 3a10 	vmov	r3, s16
 800699c:	4652      	mov	r2, sl
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	d1be      	bne.n	8006926 <_printf_float+0x326>
 80069a8:	e689      	b.n	80066be <_printf_float+0xbe>
 80069aa:	9a05      	ldr	r2, [sp, #20]
 80069ac:	464b      	mov	r3, r9
 80069ae:	4442      	add	r2, r8
 80069b0:	4631      	mov	r1, r6
 80069b2:	4628      	mov	r0, r5
 80069b4:	47b8      	blx	r7
 80069b6:	3001      	adds	r0, #1
 80069b8:	d1c1      	bne.n	800693e <_printf_float+0x33e>
 80069ba:	e680      	b.n	80066be <_printf_float+0xbe>
 80069bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069be:	2a01      	cmp	r2, #1
 80069c0:	dc01      	bgt.n	80069c6 <_printf_float+0x3c6>
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	d53a      	bpl.n	8006a3c <_printf_float+0x43c>
 80069c6:	2301      	movs	r3, #1
 80069c8:	4642      	mov	r2, r8
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	f43f ae74 	beq.w	80066be <_printf_float+0xbe>
 80069d6:	ee18 3a10 	vmov	r3, s16
 80069da:	4652      	mov	r2, sl
 80069dc:	4631      	mov	r1, r6
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	f43f ae6b 	beq.w	80066be <_printf_float+0xbe>
 80069e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069ec:	2200      	movs	r2, #0
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80069f4:	f7fa f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80069f8:	b9d8      	cbnz	r0, 8006a32 <_printf_float+0x432>
 80069fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80069fe:	f108 0201 	add.w	r2, r8, #1
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d10e      	bne.n	8006a2a <_printf_float+0x42a>
 8006a0c:	e657      	b.n	80066be <_printf_float+0xbe>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4652      	mov	r2, sl
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f ae50 	beq.w	80066be <_printf_float+0xbe>
 8006a1e:	f108 0801 	add.w	r8, r8, #1
 8006a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a24:	3b01      	subs	r3, #1
 8006a26:	4543      	cmp	r3, r8
 8006a28:	dcf1      	bgt.n	8006a0e <_printf_float+0x40e>
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a30:	e6da      	b.n	80067e8 <_printf_float+0x1e8>
 8006a32:	f04f 0800 	mov.w	r8, #0
 8006a36:	f104 0a1a 	add.w	sl, r4, #26
 8006a3a:	e7f2      	b.n	8006a22 <_printf_float+0x422>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4642      	mov	r2, r8
 8006a40:	e7df      	b.n	8006a02 <_printf_float+0x402>
 8006a42:	2301      	movs	r3, #1
 8006a44:	464a      	mov	r2, r9
 8006a46:	4631      	mov	r1, r6
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f43f ae36 	beq.w	80066be <_printf_float+0xbe>
 8006a52:	f108 0801 	add.w	r8, r8, #1
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a5a:	1a5b      	subs	r3, r3, r1
 8006a5c:	4543      	cmp	r3, r8
 8006a5e:	dcf0      	bgt.n	8006a42 <_printf_float+0x442>
 8006a60:	e6f8      	b.n	8006854 <_printf_float+0x254>
 8006a62:	f04f 0800 	mov.w	r8, #0
 8006a66:	f104 0919 	add.w	r9, r4, #25
 8006a6a:	e7f4      	b.n	8006a56 <_printf_float+0x456>

08006a6c <_printf_common>:
 8006a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a70:	4616      	mov	r6, r2
 8006a72:	4699      	mov	r9, r3
 8006a74:	688a      	ldr	r2, [r1, #8]
 8006a76:	690b      	ldr	r3, [r1, #16]
 8006a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	bfb8      	it	lt
 8006a80:	4613      	movlt	r3, r2
 8006a82:	6033      	str	r3, [r6, #0]
 8006a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a88:	4607      	mov	r7, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	b10a      	cbz	r2, 8006a92 <_printf_common+0x26>
 8006a8e:	3301      	adds	r3, #1
 8006a90:	6033      	str	r3, [r6, #0]
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	0699      	lsls	r1, r3, #26
 8006a96:	bf42      	ittt	mi
 8006a98:	6833      	ldrmi	r3, [r6, #0]
 8006a9a:	3302      	addmi	r3, #2
 8006a9c:	6033      	strmi	r3, [r6, #0]
 8006a9e:	6825      	ldr	r5, [r4, #0]
 8006aa0:	f015 0506 	ands.w	r5, r5, #6
 8006aa4:	d106      	bne.n	8006ab4 <_printf_common+0x48>
 8006aa6:	f104 0a19 	add.w	sl, r4, #25
 8006aaa:	68e3      	ldr	r3, [r4, #12]
 8006aac:	6832      	ldr	r2, [r6, #0]
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	42ab      	cmp	r3, r5
 8006ab2:	dc26      	bgt.n	8006b02 <_printf_common+0x96>
 8006ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ab8:	1e13      	subs	r3, r2, #0
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	bf18      	it	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	0692      	lsls	r2, r2, #26
 8006ac2:	d42b      	bmi.n	8006b1c <_printf_common+0xb0>
 8006ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ac8:	4649      	mov	r1, r9
 8006aca:	4638      	mov	r0, r7
 8006acc:	47c0      	blx	r8
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d01e      	beq.n	8006b10 <_printf_common+0xa4>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	6922      	ldr	r2, [r4, #16]
 8006ad6:	f003 0306 	and.w	r3, r3, #6
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	bf02      	ittt	eq
 8006ade:	68e5      	ldreq	r5, [r4, #12]
 8006ae0:	6833      	ldreq	r3, [r6, #0]
 8006ae2:	1aed      	subeq	r5, r5, r3
 8006ae4:	68a3      	ldr	r3, [r4, #8]
 8006ae6:	bf0c      	ite	eq
 8006ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aec:	2500      	movne	r5, #0
 8006aee:	4293      	cmp	r3, r2
 8006af0:	bfc4      	itt	gt
 8006af2:	1a9b      	subgt	r3, r3, r2
 8006af4:	18ed      	addgt	r5, r5, r3
 8006af6:	2600      	movs	r6, #0
 8006af8:	341a      	adds	r4, #26
 8006afa:	42b5      	cmp	r5, r6
 8006afc:	d11a      	bne.n	8006b34 <_printf_common+0xc8>
 8006afe:	2000      	movs	r0, #0
 8006b00:	e008      	b.n	8006b14 <_printf_common+0xa8>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4652      	mov	r2, sl
 8006b06:	4649      	mov	r1, r9
 8006b08:	4638      	mov	r0, r7
 8006b0a:	47c0      	blx	r8
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d103      	bne.n	8006b18 <_printf_common+0xac>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	3501      	adds	r5, #1
 8006b1a:	e7c6      	b.n	8006aaa <_printf_common+0x3e>
 8006b1c:	18e1      	adds	r1, r4, r3
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	2030      	movs	r0, #48	; 0x30
 8006b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b26:	4422      	add	r2, r4
 8006b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b30:	3302      	adds	r3, #2
 8006b32:	e7c7      	b.n	8006ac4 <_printf_common+0x58>
 8006b34:	2301      	movs	r3, #1
 8006b36:	4622      	mov	r2, r4
 8006b38:	4649      	mov	r1, r9
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	47c0      	blx	r8
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d0e6      	beq.n	8006b10 <_printf_common+0xa4>
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7d9      	b.n	8006afa <_printf_common+0x8e>
	...

08006b48 <_printf_i>:
 8006b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4c:	7e0f      	ldrb	r7, [r1, #24]
 8006b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b50:	2f78      	cmp	r7, #120	; 0x78
 8006b52:	4691      	mov	r9, r2
 8006b54:	4680      	mov	r8, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	469a      	mov	sl, r3
 8006b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b5e:	d807      	bhi.n	8006b70 <_printf_i+0x28>
 8006b60:	2f62      	cmp	r7, #98	; 0x62
 8006b62:	d80a      	bhi.n	8006b7a <_printf_i+0x32>
 8006b64:	2f00      	cmp	r7, #0
 8006b66:	f000 80d4 	beq.w	8006d12 <_printf_i+0x1ca>
 8006b6a:	2f58      	cmp	r7, #88	; 0x58
 8006b6c:	f000 80c0 	beq.w	8006cf0 <_printf_i+0x1a8>
 8006b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b78:	e03a      	b.n	8006bf0 <_printf_i+0xa8>
 8006b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b7e:	2b15      	cmp	r3, #21
 8006b80:	d8f6      	bhi.n	8006b70 <_printf_i+0x28>
 8006b82:	a101      	add	r1, pc, #4	; (adr r1, 8006b88 <_printf_i+0x40>)
 8006b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b88:	08006be1 	.word	0x08006be1
 8006b8c:	08006bf5 	.word	0x08006bf5
 8006b90:	08006b71 	.word	0x08006b71
 8006b94:	08006b71 	.word	0x08006b71
 8006b98:	08006b71 	.word	0x08006b71
 8006b9c:	08006b71 	.word	0x08006b71
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006b71 	.word	0x08006b71
 8006ba8:	08006b71 	.word	0x08006b71
 8006bac:	08006b71 	.word	0x08006b71
 8006bb0:	08006b71 	.word	0x08006b71
 8006bb4:	08006cf9 	.word	0x08006cf9
 8006bb8:	08006c21 	.word	0x08006c21
 8006bbc:	08006cb3 	.word	0x08006cb3
 8006bc0:	08006b71 	.word	0x08006b71
 8006bc4:	08006b71 	.word	0x08006b71
 8006bc8:	08006d1b 	.word	0x08006d1b
 8006bcc:	08006b71 	.word	0x08006b71
 8006bd0:	08006c21 	.word	0x08006c21
 8006bd4:	08006b71 	.word	0x08006b71
 8006bd8:	08006b71 	.word	0x08006b71
 8006bdc:	08006cbb 	.word	0x08006cbb
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	1d1a      	adds	r2, r3, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	602a      	str	r2, [r5, #0]
 8006be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e09f      	b.n	8006d34 <_printf_i+0x1ec>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	682b      	ldr	r3, [r5, #0]
 8006bf8:	0607      	lsls	r7, r0, #24
 8006bfa:	f103 0104 	add.w	r1, r3, #4
 8006bfe:	6029      	str	r1, [r5, #0]
 8006c00:	d501      	bpl.n	8006c06 <_printf_i+0xbe>
 8006c02:	681e      	ldr	r6, [r3, #0]
 8006c04:	e003      	b.n	8006c0e <_printf_i+0xc6>
 8006c06:	0646      	lsls	r6, r0, #25
 8006c08:	d5fb      	bpl.n	8006c02 <_printf_i+0xba>
 8006c0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c0e:	2e00      	cmp	r6, #0
 8006c10:	da03      	bge.n	8006c1a <_printf_i+0xd2>
 8006c12:	232d      	movs	r3, #45	; 0x2d
 8006c14:	4276      	negs	r6, r6
 8006c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1a:	485a      	ldr	r0, [pc, #360]	; (8006d84 <_printf_i+0x23c>)
 8006c1c:	230a      	movs	r3, #10
 8006c1e:	e012      	b.n	8006c46 <_printf_i+0xfe>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	6820      	ldr	r0, [r4, #0]
 8006c24:	1d19      	adds	r1, r3, #4
 8006c26:	6029      	str	r1, [r5, #0]
 8006c28:	0605      	lsls	r5, r0, #24
 8006c2a:	d501      	bpl.n	8006c30 <_printf_i+0xe8>
 8006c2c:	681e      	ldr	r6, [r3, #0]
 8006c2e:	e002      	b.n	8006c36 <_printf_i+0xee>
 8006c30:	0641      	lsls	r1, r0, #25
 8006c32:	d5fb      	bpl.n	8006c2c <_printf_i+0xe4>
 8006c34:	881e      	ldrh	r6, [r3, #0]
 8006c36:	4853      	ldr	r0, [pc, #332]	; (8006d84 <_printf_i+0x23c>)
 8006c38:	2f6f      	cmp	r7, #111	; 0x6f
 8006c3a:	bf0c      	ite	eq
 8006c3c:	2308      	moveq	r3, #8
 8006c3e:	230a      	movne	r3, #10
 8006c40:	2100      	movs	r1, #0
 8006c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c46:	6865      	ldr	r5, [r4, #4]
 8006c48:	60a5      	str	r5, [r4, #8]
 8006c4a:	2d00      	cmp	r5, #0
 8006c4c:	bfa2      	ittt	ge
 8006c4e:	6821      	ldrge	r1, [r4, #0]
 8006c50:	f021 0104 	bicge.w	r1, r1, #4
 8006c54:	6021      	strge	r1, [r4, #0]
 8006c56:	b90e      	cbnz	r6, 8006c5c <_printf_i+0x114>
 8006c58:	2d00      	cmp	r5, #0
 8006c5a:	d04b      	beq.n	8006cf4 <_printf_i+0x1ac>
 8006c5c:	4615      	mov	r5, r2
 8006c5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c62:	fb03 6711 	mls	r7, r3, r1, r6
 8006c66:	5dc7      	ldrb	r7, [r0, r7]
 8006c68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c6c:	4637      	mov	r7, r6
 8006c6e:	42bb      	cmp	r3, r7
 8006c70:	460e      	mov	r6, r1
 8006c72:	d9f4      	bls.n	8006c5e <_printf_i+0x116>
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d10b      	bne.n	8006c90 <_printf_i+0x148>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	07de      	lsls	r6, r3, #31
 8006c7c:	d508      	bpl.n	8006c90 <_printf_i+0x148>
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	6861      	ldr	r1, [r4, #4]
 8006c82:	4299      	cmp	r1, r3
 8006c84:	bfde      	ittt	le
 8006c86:	2330      	movle	r3, #48	; 0x30
 8006c88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c90:	1b52      	subs	r2, r2, r5
 8006c92:	6122      	str	r2, [r4, #16]
 8006c94:	f8cd a000 	str.w	sl, [sp]
 8006c98:	464b      	mov	r3, r9
 8006c9a:	aa03      	add	r2, sp, #12
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	f7ff fee4 	bl	8006a6c <_printf_common>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d14a      	bne.n	8006d3e <_printf_i+0x1f6>
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	b004      	add	sp, #16
 8006cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	f043 0320 	orr.w	r3, r3, #32
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	4833      	ldr	r0, [pc, #204]	; (8006d88 <_printf_i+0x240>)
 8006cbc:	2778      	movs	r7, #120	; 0x78
 8006cbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	6829      	ldr	r1, [r5, #0]
 8006cc6:	061f      	lsls	r7, r3, #24
 8006cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ccc:	d402      	bmi.n	8006cd4 <_printf_i+0x18c>
 8006cce:	065f      	lsls	r7, r3, #25
 8006cd0:	bf48      	it	mi
 8006cd2:	b2b6      	uxthmi	r6, r6
 8006cd4:	07df      	lsls	r7, r3, #31
 8006cd6:	bf48      	it	mi
 8006cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cdc:	6029      	str	r1, [r5, #0]
 8006cde:	bf48      	it	mi
 8006ce0:	6023      	strmi	r3, [r4, #0]
 8006ce2:	b91e      	cbnz	r6, 8006cec <_printf_i+0x1a4>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	f023 0320 	bic.w	r3, r3, #32
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	2310      	movs	r3, #16
 8006cee:	e7a7      	b.n	8006c40 <_printf_i+0xf8>
 8006cf0:	4824      	ldr	r0, [pc, #144]	; (8006d84 <_printf_i+0x23c>)
 8006cf2:	e7e4      	b.n	8006cbe <_printf_i+0x176>
 8006cf4:	4615      	mov	r5, r2
 8006cf6:	e7bd      	b.n	8006c74 <_printf_i+0x12c>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	6826      	ldr	r6, [r4, #0]
 8006cfc:	6961      	ldr	r1, [r4, #20]
 8006cfe:	1d18      	adds	r0, r3, #4
 8006d00:	6028      	str	r0, [r5, #0]
 8006d02:	0635      	lsls	r5, r6, #24
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	d501      	bpl.n	8006d0c <_printf_i+0x1c4>
 8006d08:	6019      	str	r1, [r3, #0]
 8006d0a:	e002      	b.n	8006d12 <_printf_i+0x1ca>
 8006d0c:	0670      	lsls	r0, r6, #25
 8006d0e:	d5fb      	bpl.n	8006d08 <_printf_i+0x1c0>
 8006d10:	8019      	strh	r1, [r3, #0]
 8006d12:	2300      	movs	r3, #0
 8006d14:	6123      	str	r3, [r4, #16]
 8006d16:	4615      	mov	r5, r2
 8006d18:	e7bc      	b.n	8006c94 <_printf_i+0x14c>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	1d1a      	adds	r2, r3, #4
 8006d1e:	602a      	str	r2, [r5, #0]
 8006d20:	681d      	ldr	r5, [r3, #0]
 8006d22:	6862      	ldr	r2, [r4, #4]
 8006d24:	2100      	movs	r1, #0
 8006d26:	4628      	mov	r0, r5
 8006d28:	f7f9 fa52 	bl	80001d0 <memchr>
 8006d2c:	b108      	cbz	r0, 8006d32 <_printf_i+0x1ea>
 8006d2e:	1b40      	subs	r0, r0, r5
 8006d30:	6060      	str	r0, [r4, #4]
 8006d32:	6863      	ldr	r3, [r4, #4]
 8006d34:	6123      	str	r3, [r4, #16]
 8006d36:	2300      	movs	r3, #0
 8006d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d3c:	e7aa      	b.n	8006c94 <_printf_i+0x14c>
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	462a      	mov	r2, r5
 8006d42:	4649      	mov	r1, r9
 8006d44:	4640      	mov	r0, r8
 8006d46:	47d0      	blx	sl
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d0ad      	beq.n	8006ca8 <_printf_i+0x160>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	079b      	lsls	r3, r3, #30
 8006d50:	d413      	bmi.n	8006d7a <_printf_i+0x232>
 8006d52:	68e0      	ldr	r0, [r4, #12]
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	4298      	cmp	r0, r3
 8006d58:	bfb8      	it	lt
 8006d5a:	4618      	movlt	r0, r3
 8006d5c:	e7a6      	b.n	8006cac <_printf_i+0x164>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4632      	mov	r2, r6
 8006d62:	4649      	mov	r1, r9
 8006d64:	4640      	mov	r0, r8
 8006d66:	47d0      	blx	sl
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d09d      	beq.n	8006ca8 <_printf_i+0x160>
 8006d6c:	3501      	adds	r5, #1
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	9903      	ldr	r1, [sp, #12]
 8006d72:	1a5b      	subs	r3, r3, r1
 8006d74:	42ab      	cmp	r3, r5
 8006d76:	dcf2      	bgt.n	8006d5e <_printf_i+0x216>
 8006d78:	e7eb      	b.n	8006d52 <_printf_i+0x20a>
 8006d7a:	2500      	movs	r5, #0
 8006d7c:	f104 0619 	add.w	r6, r4, #25
 8006d80:	e7f5      	b.n	8006d6e <_printf_i+0x226>
 8006d82:	bf00      	nop
 8006d84:	08008e9a 	.word	0x08008e9a
 8006d88:	08008eab 	.word	0x08008eab

08006d8c <std>:
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	4604      	mov	r4, r0
 8006d92:	e9c0 3300 	strd	r3, r3, [r0]
 8006d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d9a:	6083      	str	r3, [r0, #8]
 8006d9c:	8181      	strh	r1, [r0, #12]
 8006d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8006da0:	81c2      	strh	r2, [r0, #14]
 8006da2:	6183      	str	r3, [r0, #24]
 8006da4:	4619      	mov	r1, r3
 8006da6:	2208      	movs	r2, #8
 8006da8:	305c      	adds	r0, #92	; 0x5c
 8006daa:	f000 f8f4 	bl	8006f96 <memset>
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <std+0x58>)
 8006db0:	6263      	str	r3, [r4, #36]	; 0x24
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <std+0x5c>)
 8006db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <std+0x60>)
 8006db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <std+0x64>)
 8006dbc:	6323      	str	r3, [r4, #48]	; 0x30
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <std+0x68>)
 8006dc0:	6224      	str	r4, [r4, #32]
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	d006      	beq.n	8006dd4 <std+0x48>
 8006dc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006dca:	4294      	cmp	r4, r2
 8006dcc:	d002      	beq.n	8006dd4 <std+0x48>
 8006dce:	33d0      	adds	r3, #208	; 0xd0
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	d105      	bne.n	8006de0 <std+0x54>
 8006dd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ddc:	f000 b958 	b.w	8007090 <__retarget_lock_init_recursive>
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	bf00      	nop
 8006de4:	08006f11 	.word	0x08006f11
 8006de8:	08006f33 	.word	0x08006f33
 8006dec:	08006f6b 	.word	0x08006f6b
 8006df0:	08006f8f 	.word	0x08006f8f
 8006df4:	20000344 	.word	0x20000344

08006df8 <stdio_exit_handler>:
 8006df8:	4a02      	ldr	r2, [pc, #8]	; (8006e04 <stdio_exit_handler+0xc>)
 8006dfa:	4903      	ldr	r1, [pc, #12]	; (8006e08 <stdio_exit_handler+0x10>)
 8006dfc:	4803      	ldr	r0, [pc, #12]	; (8006e0c <stdio_exit_handler+0x14>)
 8006dfe:	f000 b869 	b.w	8006ed4 <_fwalk_sglue>
 8006e02:	bf00      	nop
 8006e04:	20000018 	.word	0x20000018
 8006e08:	08008791 	.word	0x08008791
 8006e0c:	20000024 	.word	0x20000024

08006e10 <cleanup_stdio>:
 8006e10:	6841      	ldr	r1, [r0, #4]
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <cleanup_stdio+0x34>)
 8006e14:	4299      	cmp	r1, r3
 8006e16:	b510      	push	{r4, lr}
 8006e18:	4604      	mov	r4, r0
 8006e1a:	d001      	beq.n	8006e20 <cleanup_stdio+0x10>
 8006e1c:	f001 fcb8 	bl	8008790 <_fflush_r>
 8006e20:	68a1      	ldr	r1, [r4, #8]
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <cleanup_stdio+0x38>)
 8006e24:	4299      	cmp	r1, r3
 8006e26:	d002      	beq.n	8006e2e <cleanup_stdio+0x1e>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f001 fcb1 	bl	8008790 <_fflush_r>
 8006e2e:	68e1      	ldr	r1, [r4, #12]
 8006e30:	4b06      	ldr	r3, [pc, #24]	; (8006e4c <cleanup_stdio+0x3c>)
 8006e32:	4299      	cmp	r1, r3
 8006e34:	d004      	beq.n	8006e40 <cleanup_stdio+0x30>
 8006e36:	4620      	mov	r0, r4
 8006e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e3c:	f001 bca8 	b.w	8008790 <_fflush_r>
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	bf00      	nop
 8006e44:	20000344 	.word	0x20000344
 8006e48:	200003ac 	.word	0x200003ac
 8006e4c:	20000414 	.word	0x20000414

08006e50 <global_stdio_init.part.0>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <global_stdio_init.part.0+0x30>)
 8006e54:	4c0b      	ldr	r4, [pc, #44]	; (8006e84 <global_stdio_init.part.0+0x34>)
 8006e56:	4a0c      	ldr	r2, [pc, #48]	; (8006e88 <global_stdio_init.part.0+0x38>)
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2104      	movs	r1, #4
 8006e60:	f7ff ff94 	bl	8006d8c <std>
 8006e64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e68:	2201      	movs	r2, #1
 8006e6a:	2109      	movs	r1, #9
 8006e6c:	f7ff ff8e 	bl	8006d8c <std>
 8006e70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e74:	2202      	movs	r2, #2
 8006e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e7a:	2112      	movs	r1, #18
 8006e7c:	f7ff bf86 	b.w	8006d8c <std>
 8006e80:	2000047c 	.word	0x2000047c
 8006e84:	20000344 	.word	0x20000344
 8006e88:	08006df9 	.word	0x08006df9

08006e8c <__sfp_lock_acquire>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	; (8006e94 <__sfp_lock_acquire+0x8>)
 8006e8e:	f000 b900 	b.w	8007092 <__retarget_lock_acquire_recursive>
 8006e92:	bf00      	nop
 8006e94:	20000485 	.word	0x20000485

08006e98 <__sfp_lock_release>:
 8006e98:	4801      	ldr	r0, [pc, #4]	; (8006ea0 <__sfp_lock_release+0x8>)
 8006e9a:	f000 b8fb 	b.w	8007094 <__retarget_lock_release_recursive>
 8006e9e:	bf00      	nop
 8006ea0:	20000485 	.word	0x20000485

08006ea4 <__sinit>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	f7ff fff0 	bl	8006e8c <__sfp_lock_acquire>
 8006eac:	6a23      	ldr	r3, [r4, #32]
 8006eae:	b11b      	cbz	r3, 8006eb8 <__sinit+0x14>
 8006eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb4:	f7ff bff0 	b.w	8006e98 <__sfp_lock_release>
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <__sinit+0x28>)
 8006eba:	6223      	str	r3, [r4, #32]
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <__sinit+0x2c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1f5      	bne.n	8006eb0 <__sinit+0xc>
 8006ec4:	f7ff ffc4 	bl	8006e50 <global_stdio_init.part.0>
 8006ec8:	e7f2      	b.n	8006eb0 <__sinit+0xc>
 8006eca:	bf00      	nop
 8006ecc:	08006e11 	.word	0x08006e11
 8006ed0:	2000047c 	.word	0x2000047c

08006ed4 <_fwalk_sglue>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	4607      	mov	r7, r0
 8006eda:	4688      	mov	r8, r1
 8006edc:	4614      	mov	r4, r2
 8006ede:	2600      	movs	r6, #0
 8006ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ee8:	d505      	bpl.n	8006ef6 <_fwalk_sglue+0x22>
 8006eea:	6824      	ldr	r4, [r4, #0]
 8006eec:	2c00      	cmp	r4, #0
 8006eee:	d1f7      	bne.n	8006ee0 <_fwalk_sglue+0xc>
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d907      	bls.n	8006f0c <_fwalk_sglue+0x38>
 8006efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f00:	3301      	adds	r3, #1
 8006f02:	d003      	beq.n	8006f0c <_fwalk_sglue+0x38>
 8006f04:	4629      	mov	r1, r5
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c0      	blx	r8
 8006f0a:	4306      	orrs	r6, r0
 8006f0c:	3568      	adds	r5, #104	; 0x68
 8006f0e:	e7e9      	b.n	8006ee4 <_fwalk_sglue+0x10>

08006f10 <__sread>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	460c      	mov	r4, r1
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	f000 f86c 	bl	8006ff4 <_read_r>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	bfab      	itete	ge
 8006f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f22:	89a3      	ldrhlt	r3, [r4, #12]
 8006f24:	181b      	addge	r3, r3, r0
 8006f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f2a:	bfac      	ite	ge
 8006f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f2e:	81a3      	strhlt	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__swrite>:
 8006f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	461f      	mov	r7, r3
 8006f38:	898b      	ldrh	r3, [r1, #12]
 8006f3a:	05db      	lsls	r3, r3, #23
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	4616      	mov	r6, r2
 8006f42:	d505      	bpl.n	8006f50 <__swrite+0x1e>
 8006f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f48:	2302      	movs	r3, #2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f000 f840 	bl	8006fd0 <_lseek_r>
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	4632      	mov	r2, r6
 8006f5e:	463b      	mov	r3, r7
 8006f60:	4628      	mov	r0, r5
 8006f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f66:	f000 b857 	b.w	8007018 <_write_r>

08006f6a <__sseek>:
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f72:	f000 f82d 	bl	8006fd0 <_lseek_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	bf15      	itete	ne
 8006f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f86:	81a3      	strheq	r3, [r4, #12]
 8006f88:	bf18      	it	ne
 8006f8a:	81a3      	strhne	r3, [r4, #12]
 8006f8c:	bd10      	pop	{r4, pc}

08006f8e <__sclose>:
 8006f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f92:	f000 b80d 	b.w	8006fb0 <_close_r>

08006f96 <memset>:
 8006f96:	4402      	add	r2, r0
 8006f98:	4603      	mov	r3, r0
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d100      	bne.n	8006fa0 <memset+0xa>
 8006f9e:	4770      	bx	lr
 8006fa0:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa4:	e7f9      	b.n	8006f9a <memset+0x4>
	...

08006fa8 <_localeconv_r>:
 8006fa8:	4800      	ldr	r0, [pc, #0]	; (8006fac <_localeconv_r+0x4>)
 8006faa:	4770      	bx	lr
 8006fac:	20000164 	.word	0x20000164

08006fb0 <_close_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d06      	ldr	r5, [pc, #24]	; (8006fcc <_close_r+0x1c>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7fa f9f9 	bl	80013b2 <_close>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_close_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_close_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20000480 	.word	0x20000480

08006fd0 <_lseek_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d07      	ldr	r5, [pc, #28]	; (8006ff0 <_lseek_r+0x20>)
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	4608      	mov	r0, r1
 8006fd8:	4611      	mov	r1, r2
 8006fda:	2200      	movs	r2, #0
 8006fdc:	602a      	str	r2, [r5, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f7fa fa0e 	bl	8001400 <_lseek>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_lseek_r+0x1e>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_lseek_r+0x1e>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	20000480 	.word	0x20000480

08006ff4 <_read_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d07      	ldr	r5, [pc, #28]	; (8007014 <_read_r+0x20>)
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	602a      	str	r2, [r5, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f7fa f99c 	bl	8001340 <_read>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_read_r+0x1e>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_read_r+0x1e>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20000480 	.word	0x20000480

08007018 <_write_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	; (8007038 <_write_r+0x20>)
 800701c:	4604      	mov	r4, r0
 800701e:	4608      	mov	r0, r1
 8007020:	4611      	mov	r1, r2
 8007022:	2200      	movs	r2, #0
 8007024:	602a      	str	r2, [r5, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	f7fa f9a7 	bl	800137a <_write>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_write_r+0x1e>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_write_r+0x1e>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	20000480 	.word	0x20000480

0800703c <__errno>:
 800703c:	4b01      	ldr	r3, [pc, #4]	; (8007044 <__errno+0x8>)
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000070 	.word	0x20000070

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	; (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	; (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	; (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	; (800708c <__libc_init_array+0x44>)
 800705c:	f001 feec 	bl	8008e38 <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	080091fc 	.word	0x080091fc
 8007084:	080091fc 	.word	0x080091fc
 8007088:	080091fc 	.word	0x080091fc
 800708c:	08009200 	.word	0x08009200

08007090 <__retarget_lock_init_recursive>:
 8007090:	4770      	bx	lr

08007092 <__retarget_lock_acquire_recursive>:
 8007092:	4770      	bx	lr

08007094 <__retarget_lock_release_recursive>:
 8007094:	4770      	bx	lr

08007096 <quorem>:
 8007096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709a:	6903      	ldr	r3, [r0, #16]
 800709c:	690c      	ldr	r4, [r1, #16]
 800709e:	42a3      	cmp	r3, r4
 80070a0:	4607      	mov	r7, r0
 80070a2:	db7e      	blt.n	80071a2 <quorem+0x10c>
 80070a4:	3c01      	subs	r4, #1
 80070a6:	f101 0814 	add.w	r8, r1, #20
 80070aa:	f100 0514 	add.w	r5, r0, #20
 80070ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070bc:	3301      	adds	r3, #1
 80070be:	429a      	cmp	r2, r3
 80070c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80070cc:	d331      	bcc.n	8007132 <quorem+0x9c>
 80070ce:	f04f 0e00 	mov.w	lr, #0
 80070d2:	4640      	mov	r0, r8
 80070d4:	46ac      	mov	ip, r5
 80070d6:	46f2      	mov	sl, lr
 80070d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80070dc:	b293      	uxth	r3, r2
 80070de:	fb06 e303 	mla	r3, r6, r3, lr
 80070e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070e6:	0c1a      	lsrs	r2, r3, #16
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	ebaa 0303 	sub.w	r3, sl, r3
 80070ee:	f8dc a000 	ldr.w	sl, [ip]
 80070f2:	fa13 f38a 	uxtah	r3, r3, sl
 80070f6:	fb06 220e 	mla	r2, r6, lr, r2
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	9b00      	ldr	r3, [sp, #0]
 80070fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007102:	b292      	uxth	r2, r2
 8007104:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800710c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007110:	4581      	cmp	r9, r0
 8007112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007116:	f84c 3b04 	str.w	r3, [ip], #4
 800711a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800711e:	d2db      	bcs.n	80070d8 <quorem+0x42>
 8007120:	f855 300b 	ldr.w	r3, [r5, fp]
 8007124:	b92b      	cbnz	r3, 8007132 <quorem+0x9c>
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	3b04      	subs	r3, #4
 800712a:	429d      	cmp	r5, r3
 800712c:	461a      	mov	r2, r3
 800712e:	d32c      	bcc.n	800718a <quorem+0xf4>
 8007130:	613c      	str	r4, [r7, #16]
 8007132:	4638      	mov	r0, r7
 8007134:	f001 f9a6 	bl	8008484 <__mcmp>
 8007138:	2800      	cmp	r0, #0
 800713a:	db22      	blt.n	8007182 <quorem+0xec>
 800713c:	3601      	adds	r6, #1
 800713e:	4629      	mov	r1, r5
 8007140:	2000      	movs	r0, #0
 8007142:	f858 2b04 	ldr.w	r2, [r8], #4
 8007146:	f8d1 c000 	ldr.w	ip, [r1]
 800714a:	b293      	uxth	r3, r2
 800714c:	1ac3      	subs	r3, r0, r3
 800714e:	0c12      	lsrs	r2, r2, #16
 8007150:	fa13 f38c 	uxtah	r3, r3, ip
 8007154:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800715c:	b29b      	uxth	r3, r3
 800715e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007162:	45c1      	cmp	r9, r8
 8007164:	f841 3b04 	str.w	r3, [r1], #4
 8007168:	ea4f 4022 	mov.w	r0, r2, asr #16
 800716c:	d2e9      	bcs.n	8007142 <quorem+0xac>
 800716e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007176:	b922      	cbnz	r2, 8007182 <quorem+0xec>
 8007178:	3b04      	subs	r3, #4
 800717a:	429d      	cmp	r5, r3
 800717c:	461a      	mov	r2, r3
 800717e:	d30a      	bcc.n	8007196 <quorem+0x100>
 8007180:	613c      	str	r4, [r7, #16]
 8007182:	4630      	mov	r0, r6
 8007184:	b003      	add	sp, #12
 8007186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	3b04      	subs	r3, #4
 800718e:	2a00      	cmp	r2, #0
 8007190:	d1ce      	bne.n	8007130 <quorem+0x9a>
 8007192:	3c01      	subs	r4, #1
 8007194:	e7c9      	b.n	800712a <quorem+0x94>
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	3b04      	subs	r3, #4
 800719a:	2a00      	cmp	r2, #0
 800719c:	d1f0      	bne.n	8007180 <quorem+0xea>
 800719e:	3c01      	subs	r4, #1
 80071a0:	e7eb      	b.n	800717a <quorem+0xe4>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e7ee      	b.n	8007184 <quorem+0xee>
	...

080071a8 <_dtoa_r>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	ed2d 8b04 	vpush	{d8-d9}
 80071b0:	69c5      	ldr	r5, [r0, #28]
 80071b2:	b093      	sub	sp, #76	; 0x4c
 80071b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071b8:	ec57 6b10 	vmov	r6, r7, d0
 80071bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071c0:	9107      	str	r1, [sp, #28]
 80071c2:	4604      	mov	r4, r0
 80071c4:	920a      	str	r2, [sp, #40]	; 0x28
 80071c6:	930d      	str	r3, [sp, #52]	; 0x34
 80071c8:	b975      	cbnz	r5, 80071e8 <_dtoa_r+0x40>
 80071ca:	2010      	movs	r0, #16
 80071cc:	f000 fe2a 	bl	8007e24 <malloc>
 80071d0:	4602      	mov	r2, r0
 80071d2:	61e0      	str	r0, [r4, #28]
 80071d4:	b920      	cbnz	r0, 80071e0 <_dtoa_r+0x38>
 80071d6:	4bae      	ldr	r3, [pc, #696]	; (8007490 <_dtoa_r+0x2e8>)
 80071d8:	21ef      	movs	r1, #239	; 0xef
 80071da:	48ae      	ldr	r0, [pc, #696]	; (8007494 <_dtoa_r+0x2ec>)
 80071dc:	f001 fb1e 	bl	800881c <__assert_func>
 80071e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071e4:	6005      	str	r5, [r0, #0]
 80071e6:	60c5      	str	r5, [r0, #12]
 80071e8:	69e3      	ldr	r3, [r4, #28]
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	b151      	cbz	r1, 8007204 <_dtoa_r+0x5c>
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	604a      	str	r2, [r1, #4]
 80071f2:	2301      	movs	r3, #1
 80071f4:	4093      	lsls	r3, r2
 80071f6:	608b      	str	r3, [r1, #8]
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 ff07 	bl	800800c <_Bfree>
 80071fe:	69e3      	ldr	r3, [r4, #28]
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	1e3b      	subs	r3, r7, #0
 8007206:	bfbb      	ittet	lt
 8007208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800720c:	9303      	strlt	r3, [sp, #12]
 800720e:	2300      	movge	r3, #0
 8007210:	2201      	movlt	r2, #1
 8007212:	bfac      	ite	ge
 8007214:	f8c8 3000 	strge.w	r3, [r8]
 8007218:	f8c8 2000 	strlt.w	r2, [r8]
 800721c:	4b9e      	ldr	r3, [pc, #632]	; (8007498 <_dtoa_r+0x2f0>)
 800721e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007222:	ea33 0308 	bics.w	r3, r3, r8
 8007226:	d11b      	bne.n	8007260 <_dtoa_r+0xb8>
 8007228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800722a:	f242 730f 	movw	r3, #9999	; 0x270f
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007234:	4333      	orrs	r3, r6
 8007236:	f000 8593 	beq.w	8007d60 <_dtoa_r+0xbb8>
 800723a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800723c:	b963      	cbnz	r3, 8007258 <_dtoa_r+0xb0>
 800723e:	4b97      	ldr	r3, [pc, #604]	; (800749c <_dtoa_r+0x2f4>)
 8007240:	e027      	b.n	8007292 <_dtoa_r+0xea>
 8007242:	4b97      	ldr	r3, [pc, #604]	; (80074a0 <_dtoa_r+0x2f8>)
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9800      	ldr	r0, [sp, #0]
 800724e:	b013      	add	sp, #76	; 0x4c
 8007250:	ecbd 8b04 	vpop	{d8-d9}
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	4b90      	ldr	r3, [pc, #576]	; (800749c <_dtoa_r+0x2f4>)
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	3303      	adds	r3, #3
 800725e:	e7f3      	b.n	8007248 <_dtoa_r+0xa0>
 8007260:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	ec51 0b17 	vmov	r0, r1, d7
 800726a:	eeb0 8a47 	vmov.f32	s16, s14
 800726e:	eef0 8a67 	vmov.f32	s17, s15
 8007272:	2300      	movs	r3, #0
 8007274:	f7f9 fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007278:	4681      	mov	r9, r0
 800727a:	b160      	cbz	r0, 8007296 <_dtoa_r+0xee>
 800727c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800727e:	2301      	movs	r3, #1
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8568 	beq.w	8007d5a <_dtoa_r+0xbb2>
 800728a:	4b86      	ldr	r3, [pc, #536]	; (80074a4 <_dtoa_r+0x2fc>)
 800728c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	3b01      	subs	r3, #1
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	e7da      	b.n	800724c <_dtoa_r+0xa4>
 8007296:	aa10      	add	r2, sp, #64	; 0x40
 8007298:	a911      	add	r1, sp, #68	; 0x44
 800729a:	4620      	mov	r0, r4
 800729c:	eeb0 0a48 	vmov.f32	s0, s16
 80072a0:	eef0 0a68 	vmov.f32	s1, s17
 80072a4:	f001 f994 	bl	80085d0 <__d2b>
 80072a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80072ac:	4682      	mov	sl, r0
 80072ae:	2d00      	cmp	r5, #0
 80072b0:	d07f      	beq.n	80073b2 <_dtoa_r+0x20a>
 80072b2:	ee18 3a90 	vmov	r3, s17
 80072b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80072be:	ec51 0b18 	vmov	r0, r1, d8
 80072c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80072ce:	4619      	mov	r1, r3
 80072d0:	2200      	movs	r2, #0
 80072d2:	4b75      	ldr	r3, [pc, #468]	; (80074a8 <_dtoa_r+0x300>)
 80072d4:	f7f8 ffd8 	bl	8000288 <__aeabi_dsub>
 80072d8:	a367      	add	r3, pc, #412	; (adr r3, 8007478 <_dtoa_r+0x2d0>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f7f9 f98b 	bl	80005f8 <__aeabi_dmul>
 80072e2:	a367      	add	r3, pc, #412	; (adr r3, 8007480 <_dtoa_r+0x2d8>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f7f8 ffd0 	bl	800028c <__adddf3>
 80072ec:	4606      	mov	r6, r0
 80072ee:	4628      	mov	r0, r5
 80072f0:	460f      	mov	r7, r1
 80072f2:	f7f9 f917 	bl	8000524 <__aeabi_i2d>
 80072f6:	a364      	add	r3, pc, #400	; (adr r3, 8007488 <_dtoa_r+0x2e0>)
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f7f9 f97c 	bl	80005f8 <__aeabi_dmul>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4630      	mov	r0, r6
 8007306:	4639      	mov	r1, r7
 8007308:	f7f8 ffc0 	bl	800028c <__adddf3>
 800730c:	4606      	mov	r6, r0
 800730e:	460f      	mov	r7, r1
 8007310:	f7f9 fc22 	bl	8000b58 <__aeabi_d2iz>
 8007314:	2200      	movs	r2, #0
 8007316:	4683      	mov	fp, r0
 8007318:	2300      	movs	r3, #0
 800731a:	4630      	mov	r0, r6
 800731c:	4639      	mov	r1, r7
 800731e:	f7f9 fbdd 	bl	8000adc <__aeabi_dcmplt>
 8007322:	b148      	cbz	r0, 8007338 <_dtoa_r+0x190>
 8007324:	4658      	mov	r0, fp
 8007326:	f7f9 f8fd 	bl	8000524 <__aeabi_i2d>
 800732a:	4632      	mov	r2, r6
 800732c:	463b      	mov	r3, r7
 800732e:	f7f9 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007332:	b908      	cbnz	r0, 8007338 <_dtoa_r+0x190>
 8007334:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007338:	f1bb 0f16 	cmp.w	fp, #22
 800733c:	d857      	bhi.n	80073ee <_dtoa_r+0x246>
 800733e:	4b5b      	ldr	r3, [pc, #364]	; (80074ac <_dtoa_r+0x304>)
 8007340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	ec51 0b18 	vmov	r0, r1, d8
 800734c:	f7f9 fbc6 	bl	8000adc <__aeabi_dcmplt>
 8007350:	2800      	cmp	r0, #0
 8007352:	d04e      	beq.n	80073f2 <_dtoa_r+0x24a>
 8007354:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007358:	2300      	movs	r3, #0
 800735a:	930c      	str	r3, [sp, #48]	; 0x30
 800735c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800735e:	1b5b      	subs	r3, r3, r5
 8007360:	1e5a      	subs	r2, r3, #1
 8007362:	bf45      	ittet	mi
 8007364:	f1c3 0301 	rsbmi	r3, r3, #1
 8007368:	9305      	strmi	r3, [sp, #20]
 800736a:	2300      	movpl	r3, #0
 800736c:	2300      	movmi	r3, #0
 800736e:	9206      	str	r2, [sp, #24]
 8007370:	bf54      	ite	pl
 8007372:	9305      	strpl	r3, [sp, #20]
 8007374:	9306      	strmi	r3, [sp, #24]
 8007376:	f1bb 0f00 	cmp.w	fp, #0
 800737a:	db3c      	blt.n	80073f6 <_dtoa_r+0x24e>
 800737c:	9b06      	ldr	r3, [sp, #24]
 800737e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007382:	445b      	add	r3, fp
 8007384:	9306      	str	r3, [sp, #24]
 8007386:	2300      	movs	r3, #0
 8007388:	9308      	str	r3, [sp, #32]
 800738a:	9b07      	ldr	r3, [sp, #28]
 800738c:	2b09      	cmp	r3, #9
 800738e:	d868      	bhi.n	8007462 <_dtoa_r+0x2ba>
 8007390:	2b05      	cmp	r3, #5
 8007392:	bfc4      	itt	gt
 8007394:	3b04      	subgt	r3, #4
 8007396:	9307      	strgt	r3, [sp, #28]
 8007398:	9b07      	ldr	r3, [sp, #28]
 800739a:	f1a3 0302 	sub.w	r3, r3, #2
 800739e:	bfcc      	ite	gt
 80073a0:	2500      	movgt	r5, #0
 80073a2:	2501      	movle	r5, #1
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	f200 8085 	bhi.w	80074b4 <_dtoa_r+0x30c>
 80073aa:	e8df f003 	tbb	[pc, r3]
 80073ae:	3b2e      	.short	0x3b2e
 80073b0:	5839      	.short	0x5839
 80073b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80073b6:	441d      	add	r5, r3
 80073b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073bc:	2b20      	cmp	r3, #32
 80073be:	bfc1      	itttt	gt
 80073c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80073c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80073cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80073d0:	bfd6      	itet	le
 80073d2:	f1c3 0320 	rsble	r3, r3, #32
 80073d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80073da:	fa06 f003 	lslle.w	r0, r6, r3
 80073de:	f7f9 f891 	bl	8000504 <__aeabi_ui2d>
 80073e2:	2201      	movs	r2, #1
 80073e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80073e8:	3d01      	subs	r5, #1
 80073ea:	920e      	str	r2, [sp, #56]	; 0x38
 80073ec:	e76f      	b.n	80072ce <_dtoa_r+0x126>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e7b3      	b.n	800735a <_dtoa_r+0x1b2>
 80073f2:	900c      	str	r0, [sp, #48]	; 0x30
 80073f4:	e7b2      	b.n	800735c <_dtoa_r+0x1b4>
 80073f6:	9b05      	ldr	r3, [sp, #20]
 80073f8:	eba3 030b 	sub.w	r3, r3, fp
 80073fc:	9305      	str	r3, [sp, #20]
 80073fe:	f1cb 0300 	rsb	r3, fp, #0
 8007402:	9308      	str	r3, [sp, #32]
 8007404:	2300      	movs	r3, #0
 8007406:	930b      	str	r3, [sp, #44]	; 0x2c
 8007408:	e7bf      	b.n	800738a <_dtoa_r+0x1e2>
 800740a:	2300      	movs	r3, #0
 800740c:	9309      	str	r3, [sp, #36]	; 0x24
 800740e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007410:	2b00      	cmp	r3, #0
 8007412:	dc52      	bgt.n	80074ba <_dtoa_r+0x312>
 8007414:	2301      	movs	r3, #1
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	461a      	mov	r2, r3
 800741c:	920a      	str	r2, [sp, #40]	; 0x28
 800741e:	e00b      	b.n	8007438 <_dtoa_r+0x290>
 8007420:	2301      	movs	r3, #1
 8007422:	e7f3      	b.n	800740c <_dtoa_r+0x264>
 8007424:	2300      	movs	r3, #0
 8007426:	9309      	str	r3, [sp, #36]	; 0x24
 8007428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742a:	445b      	add	r3, fp
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	3301      	adds	r3, #1
 8007430:	2b01      	cmp	r3, #1
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	bfb8      	it	lt
 8007436:	2301      	movlt	r3, #1
 8007438:	69e0      	ldr	r0, [r4, #28]
 800743a:	2100      	movs	r1, #0
 800743c:	2204      	movs	r2, #4
 800743e:	f102 0614 	add.w	r6, r2, #20
 8007442:	429e      	cmp	r6, r3
 8007444:	d93d      	bls.n	80074c2 <_dtoa_r+0x31a>
 8007446:	6041      	str	r1, [r0, #4]
 8007448:	4620      	mov	r0, r4
 800744a:	f000 fd9f 	bl	8007f8c <_Balloc>
 800744e:	9000      	str	r0, [sp, #0]
 8007450:	2800      	cmp	r0, #0
 8007452:	d139      	bne.n	80074c8 <_dtoa_r+0x320>
 8007454:	4b16      	ldr	r3, [pc, #88]	; (80074b0 <_dtoa_r+0x308>)
 8007456:	4602      	mov	r2, r0
 8007458:	f240 11af 	movw	r1, #431	; 0x1af
 800745c:	e6bd      	b.n	80071da <_dtoa_r+0x32>
 800745e:	2301      	movs	r3, #1
 8007460:	e7e1      	b.n	8007426 <_dtoa_r+0x27e>
 8007462:	2501      	movs	r5, #1
 8007464:	2300      	movs	r3, #0
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	9509      	str	r5, [sp, #36]	; 0x24
 800746a:	f04f 33ff 	mov.w	r3, #4294967295
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	2200      	movs	r2, #0
 8007474:	2312      	movs	r3, #18
 8007476:	e7d1      	b.n	800741c <_dtoa_r+0x274>
 8007478:	636f4361 	.word	0x636f4361
 800747c:	3fd287a7 	.word	0x3fd287a7
 8007480:	8b60c8b3 	.word	0x8b60c8b3
 8007484:	3fc68a28 	.word	0x3fc68a28
 8007488:	509f79fb 	.word	0x509f79fb
 800748c:	3fd34413 	.word	0x3fd34413
 8007490:	08008ec9 	.word	0x08008ec9
 8007494:	08008ee0 	.word	0x08008ee0
 8007498:	7ff00000 	.word	0x7ff00000
 800749c:	08008ec5 	.word	0x08008ec5
 80074a0:	08008ebc 	.word	0x08008ebc
 80074a4:	08008e99 	.word	0x08008e99
 80074a8:	3ff80000 	.word	0x3ff80000
 80074ac:	08008fd0 	.word	0x08008fd0
 80074b0:	08008f38 	.word	0x08008f38
 80074b4:	2301      	movs	r3, #1
 80074b6:	9309      	str	r3, [sp, #36]	; 0x24
 80074b8:	e7d7      	b.n	800746a <_dtoa_r+0x2c2>
 80074ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	e7ba      	b.n	8007438 <_dtoa_r+0x290>
 80074c2:	3101      	adds	r1, #1
 80074c4:	0052      	lsls	r2, r2, #1
 80074c6:	e7ba      	b.n	800743e <_dtoa_r+0x296>
 80074c8:	69e3      	ldr	r3, [r4, #28]
 80074ca:	9a00      	ldr	r2, [sp, #0]
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	9b04      	ldr	r3, [sp, #16]
 80074d0:	2b0e      	cmp	r3, #14
 80074d2:	f200 80a8 	bhi.w	8007626 <_dtoa_r+0x47e>
 80074d6:	2d00      	cmp	r5, #0
 80074d8:	f000 80a5 	beq.w	8007626 <_dtoa_r+0x47e>
 80074dc:	f1bb 0f00 	cmp.w	fp, #0
 80074e0:	dd38      	ble.n	8007554 <_dtoa_r+0x3ac>
 80074e2:	4bc0      	ldr	r3, [pc, #768]	; (80077e4 <_dtoa_r+0x63c>)
 80074e4:	f00b 020f 	and.w	r2, fp, #15
 80074e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80074f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80074f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80074f8:	d019      	beq.n	800752e <_dtoa_r+0x386>
 80074fa:	4bbb      	ldr	r3, [pc, #748]	; (80077e8 <_dtoa_r+0x640>)
 80074fc:	ec51 0b18 	vmov	r0, r1, d8
 8007500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007504:	f7f9 f9a2 	bl	800084c <__aeabi_ddiv>
 8007508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800750c:	f008 080f 	and.w	r8, r8, #15
 8007510:	2503      	movs	r5, #3
 8007512:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80077e8 <_dtoa_r+0x640>
 8007516:	f1b8 0f00 	cmp.w	r8, #0
 800751a:	d10a      	bne.n	8007532 <_dtoa_r+0x38a>
 800751c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007520:	4632      	mov	r2, r6
 8007522:	463b      	mov	r3, r7
 8007524:	f7f9 f992 	bl	800084c <__aeabi_ddiv>
 8007528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800752c:	e02b      	b.n	8007586 <_dtoa_r+0x3de>
 800752e:	2502      	movs	r5, #2
 8007530:	e7ef      	b.n	8007512 <_dtoa_r+0x36a>
 8007532:	f018 0f01 	tst.w	r8, #1
 8007536:	d008      	beq.n	800754a <_dtoa_r+0x3a2>
 8007538:	4630      	mov	r0, r6
 800753a:	4639      	mov	r1, r7
 800753c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007540:	f7f9 f85a 	bl	80005f8 <__aeabi_dmul>
 8007544:	3501      	adds	r5, #1
 8007546:	4606      	mov	r6, r0
 8007548:	460f      	mov	r7, r1
 800754a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800754e:	f109 0908 	add.w	r9, r9, #8
 8007552:	e7e0      	b.n	8007516 <_dtoa_r+0x36e>
 8007554:	f000 809f 	beq.w	8007696 <_dtoa_r+0x4ee>
 8007558:	f1cb 0600 	rsb	r6, fp, #0
 800755c:	4ba1      	ldr	r3, [pc, #644]	; (80077e4 <_dtoa_r+0x63c>)
 800755e:	4fa2      	ldr	r7, [pc, #648]	; (80077e8 <_dtoa_r+0x640>)
 8007560:	f006 020f 	and.w	r2, r6, #15
 8007564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	ec51 0b18 	vmov	r0, r1, d8
 8007570:	f7f9 f842 	bl	80005f8 <__aeabi_dmul>
 8007574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007578:	1136      	asrs	r6, r6, #4
 800757a:	2300      	movs	r3, #0
 800757c:	2502      	movs	r5, #2
 800757e:	2e00      	cmp	r6, #0
 8007580:	d17e      	bne.n	8007680 <_dtoa_r+0x4d8>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d0      	bne.n	8007528 <_dtoa_r+0x380>
 8007586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007588:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8084 	beq.w	800769a <_dtoa_r+0x4f2>
 8007592:	4b96      	ldr	r3, [pc, #600]	; (80077ec <_dtoa_r+0x644>)
 8007594:	2200      	movs	r2, #0
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	f7f9 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d07b      	beq.n	800769a <_dtoa_r+0x4f2>
 80075a2:	9b04      	ldr	r3, [sp, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d078      	beq.n	800769a <_dtoa_r+0x4f2>
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dd39      	ble.n	8007622 <_dtoa_r+0x47a>
 80075ae:	4b90      	ldr	r3, [pc, #576]	; (80077f0 <_dtoa_r+0x648>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	f7f9 f81f 	bl	80005f8 <__aeabi_dmul>
 80075ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075be:	9e01      	ldr	r6, [sp, #4]
 80075c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80075c4:	3501      	adds	r5, #1
 80075c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7f8 ffaa 	bl	8000524 <__aeabi_i2d>
 80075d0:	4642      	mov	r2, r8
 80075d2:	464b      	mov	r3, r9
 80075d4:	f7f9 f810 	bl	80005f8 <__aeabi_dmul>
 80075d8:	4b86      	ldr	r3, [pc, #536]	; (80077f4 <_dtoa_r+0x64c>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f8 fe56 	bl	800028c <__adddf3>
 80075e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e8:	9303      	str	r3, [sp, #12]
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	d158      	bne.n	80076a0 <_dtoa_r+0x4f8>
 80075ee:	4b82      	ldr	r3, [pc, #520]	; (80077f8 <_dtoa_r+0x650>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	4640      	mov	r0, r8
 80075f4:	4649      	mov	r1, r9
 80075f6:	f7f8 fe47 	bl	8000288 <__aeabi_dsub>
 80075fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075fe:	4680      	mov	r8, r0
 8007600:	4689      	mov	r9, r1
 8007602:	f7f9 fa89 	bl	8000b18 <__aeabi_dcmpgt>
 8007606:	2800      	cmp	r0, #0
 8007608:	f040 8296 	bne.w	8007b38 <_dtoa_r+0x990>
 800760c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007610:	4640      	mov	r0, r8
 8007612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007616:	4649      	mov	r1, r9
 8007618:	f7f9 fa60 	bl	8000adc <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f040 8289 	bne.w	8007b34 <_dtoa_r+0x98c>
 8007622:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007628:	2b00      	cmp	r3, #0
 800762a:	f2c0 814e 	blt.w	80078ca <_dtoa_r+0x722>
 800762e:	f1bb 0f0e 	cmp.w	fp, #14
 8007632:	f300 814a 	bgt.w	80078ca <_dtoa_r+0x722>
 8007636:	4b6b      	ldr	r3, [pc, #428]	; (80077e4 <_dtoa_r+0x63c>)
 8007638:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800763c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	f280 80dc 	bge.w	8007800 <_dtoa_r+0x658>
 8007648:	9b04      	ldr	r3, [sp, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f300 80d8 	bgt.w	8007800 <_dtoa_r+0x658>
 8007650:	f040 826f 	bne.w	8007b32 <_dtoa_r+0x98a>
 8007654:	4b68      	ldr	r3, [pc, #416]	; (80077f8 <_dtoa_r+0x650>)
 8007656:	2200      	movs	r2, #0
 8007658:	4640      	mov	r0, r8
 800765a:	4649      	mov	r1, r9
 800765c:	f7f8 ffcc 	bl	80005f8 <__aeabi_dmul>
 8007660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007664:	f7f9 fa4e 	bl	8000b04 <__aeabi_dcmpge>
 8007668:	9e04      	ldr	r6, [sp, #16]
 800766a:	4637      	mov	r7, r6
 800766c:	2800      	cmp	r0, #0
 800766e:	f040 8245 	bne.w	8007afc <_dtoa_r+0x954>
 8007672:	9d00      	ldr	r5, [sp, #0]
 8007674:	2331      	movs	r3, #49	; 0x31
 8007676:	f805 3b01 	strb.w	r3, [r5], #1
 800767a:	f10b 0b01 	add.w	fp, fp, #1
 800767e:	e241      	b.n	8007b04 <_dtoa_r+0x95c>
 8007680:	07f2      	lsls	r2, r6, #31
 8007682:	d505      	bpl.n	8007690 <_dtoa_r+0x4e8>
 8007684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007688:	f7f8 ffb6 	bl	80005f8 <__aeabi_dmul>
 800768c:	3501      	adds	r5, #1
 800768e:	2301      	movs	r3, #1
 8007690:	1076      	asrs	r6, r6, #1
 8007692:	3708      	adds	r7, #8
 8007694:	e773      	b.n	800757e <_dtoa_r+0x3d6>
 8007696:	2502      	movs	r5, #2
 8007698:	e775      	b.n	8007586 <_dtoa_r+0x3de>
 800769a:	9e04      	ldr	r6, [sp, #16]
 800769c:	465f      	mov	r7, fp
 800769e:	e792      	b.n	80075c6 <_dtoa_r+0x41e>
 80076a0:	9900      	ldr	r1, [sp, #0]
 80076a2:	4b50      	ldr	r3, [pc, #320]	; (80077e4 <_dtoa_r+0x63c>)
 80076a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076a8:	4431      	add	r1, r6
 80076aa:	9102      	str	r1, [sp, #8]
 80076ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ae:	eeb0 9a47 	vmov.f32	s18, s14
 80076b2:	eef0 9a67 	vmov.f32	s19, s15
 80076b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076be:	2900      	cmp	r1, #0
 80076c0:	d044      	beq.n	800774c <_dtoa_r+0x5a4>
 80076c2:	494e      	ldr	r1, [pc, #312]	; (80077fc <_dtoa_r+0x654>)
 80076c4:	2000      	movs	r0, #0
 80076c6:	f7f9 f8c1 	bl	800084c <__aeabi_ddiv>
 80076ca:	ec53 2b19 	vmov	r2, r3, d9
 80076ce:	f7f8 fddb 	bl	8000288 <__aeabi_dsub>
 80076d2:	9d00      	ldr	r5, [sp, #0]
 80076d4:	ec41 0b19 	vmov	d9, r0, r1
 80076d8:	4649      	mov	r1, r9
 80076da:	4640      	mov	r0, r8
 80076dc:	f7f9 fa3c 	bl	8000b58 <__aeabi_d2iz>
 80076e0:	4606      	mov	r6, r0
 80076e2:	f7f8 ff1f 	bl	8000524 <__aeabi_i2d>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4640      	mov	r0, r8
 80076ec:	4649      	mov	r1, r9
 80076ee:	f7f8 fdcb 	bl	8000288 <__aeabi_dsub>
 80076f2:	3630      	adds	r6, #48	; 0x30
 80076f4:	f805 6b01 	strb.w	r6, [r5], #1
 80076f8:	ec53 2b19 	vmov	r2, r3, d9
 80076fc:	4680      	mov	r8, r0
 80076fe:	4689      	mov	r9, r1
 8007700:	f7f9 f9ec 	bl	8000adc <__aeabi_dcmplt>
 8007704:	2800      	cmp	r0, #0
 8007706:	d164      	bne.n	80077d2 <_dtoa_r+0x62a>
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	4937      	ldr	r1, [pc, #220]	; (80077ec <_dtoa_r+0x644>)
 800770e:	2000      	movs	r0, #0
 8007710:	f7f8 fdba 	bl	8000288 <__aeabi_dsub>
 8007714:	ec53 2b19 	vmov	r2, r3, d9
 8007718:	f7f9 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800771c:	2800      	cmp	r0, #0
 800771e:	f040 80b6 	bne.w	800788e <_dtoa_r+0x6e6>
 8007722:	9b02      	ldr	r3, [sp, #8]
 8007724:	429d      	cmp	r5, r3
 8007726:	f43f af7c 	beq.w	8007622 <_dtoa_r+0x47a>
 800772a:	4b31      	ldr	r3, [pc, #196]	; (80077f0 <_dtoa_r+0x648>)
 800772c:	ec51 0b19 	vmov	r0, r1, d9
 8007730:	2200      	movs	r2, #0
 8007732:	f7f8 ff61 	bl	80005f8 <__aeabi_dmul>
 8007736:	4b2e      	ldr	r3, [pc, #184]	; (80077f0 <_dtoa_r+0x648>)
 8007738:	ec41 0b19 	vmov	d9, r0, r1
 800773c:	2200      	movs	r2, #0
 800773e:	4640      	mov	r0, r8
 8007740:	4649      	mov	r1, r9
 8007742:	f7f8 ff59 	bl	80005f8 <__aeabi_dmul>
 8007746:	4680      	mov	r8, r0
 8007748:	4689      	mov	r9, r1
 800774a:	e7c5      	b.n	80076d8 <_dtoa_r+0x530>
 800774c:	ec51 0b17 	vmov	r0, r1, d7
 8007750:	f7f8 ff52 	bl	80005f8 <__aeabi_dmul>
 8007754:	9b02      	ldr	r3, [sp, #8]
 8007756:	9d00      	ldr	r5, [sp, #0]
 8007758:	930f      	str	r3, [sp, #60]	; 0x3c
 800775a:	ec41 0b19 	vmov	d9, r0, r1
 800775e:	4649      	mov	r1, r9
 8007760:	4640      	mov	r0, r8
 8007762:	f7f9 f9f9 	bl	8000b58 <__aeabi_d2iz>
 8007766:	4606      	mov	r6, r0
 8007768:	f7f8 fedc 	bl	8000524 <__aeabi_i2d>
 800776c:	3630      	adds	r6, #48	; 0x30
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	4640      	mov	r0, r8
 8007774:	4649      	mov	r1, r9
 8007776:	f7f8 fd87 	bl	8000288 <__aeabi_dsub>
 800777a:	f805 6b01 	strb.w	r6, [r5], #1
 800777e:	9b02      	ldr	r3, [sp, #8]
 8007780:	429d      	cmp	r5, r3
 8007782:	4680      	mov	r8, r0
 8007784:	4689      	mov	r9, r1
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	d124      	bne.n	80077d6 <_dtoa_r+0x62e>
 800778c:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <_dtoa_r+0x654>)
 800778e:	ec51 0b19 	vmov	r0, r1, d9
 8007792:	f7f8 fd7b 	bl	800028c <__adddf3>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4640      	mov	r0, r8
 800779c:	4649      	mov	r1, r9
 800779e:	f7f9 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d173      	bne.n	800788e <_dtoa_r+0x6e6>
 80077a6:	ec53 2b19 	vmov	r2, r3, d9
 80077aa:	4914      	ldr	r1, [pc, #80]	; (80077fc <_dtoa_r+0x654>)
 80077ac:	2000      	movs	r0, #0
 80077ae:	f7f8 fd6b 	bl	8000288 <__aeabi_dsub>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4640      	mov	r0, r8
 80077b8:	4649      	mov	r1, r9
 80077ba:	f7f9 f98f 	bl	8000adc <__aeabi_dcmplt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f43f af2f 	beq.w	8007622 <_dtoa_r+0x47a>
 80077c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077c6:	1e6b      	subs	r3, r5, #1
 80077c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077ce:	2b30      	cmp	r3, #48	; 0x30
 80077d0:	d0f8      	beq.n	80077c4 <_dtoa_r+0x61c>
 80077d2:	46bb      	mov	fp, r7
 80077d4:	e04a      	b.n	800786c <_dtoa_r+0x6c4>
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <_dtoa_r+0x648>)
 80077d8:	f7f8 ff0e 	bl	80005f8 <__aeabi_dmul>
 80077dc:	4680      	mov	r8, r0
 80077de:	4689      	mov	r9, r1
 80077e0:	e7bd      	b.n	800775e <_dtoa_r+0x5b6>
 80077e2:	bf00      	nop
 80077e4:	08008fd0 	.word	0x08008fd0
 80077e8:	08008fa8 	.word	0x08008fa8
 80077ec:	3ff00000 	.word	0x3ff00000
 80077f0:	40240000 	.word	0x40240000
 80077f4:	401c0000 	.word	0x401c0000
 80077f8:	40140000 	.word	0x40140000
 80077fc:	3fe00000 	.word	0x3fe00000
 8007800:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007804:	9d00      	ldr	r5, [sp, #0]
 8007806:	4642      	mov	r2, r8
 8007808:	464b      	mov	r3, r9
 800780a:	4630      	mov	r0, r6
 800780c:	4639      	mov	r1, r7
 800780e:	f7f9 f81d 	bl	800084c <__aeabi_ddiv>
 8007812:	f7f9 f9a1 	bl	8000b58 <__aeabi_d2iz>
 8007816:	9001      	str	r0, [sp, #4]
 8007818:	f7f8 fe84 	bl	8000524 <__aeabi_i2d>
 800781c:	4642      	mov	r2, r8
 800781e:	464b      	mov	r3, r9
 8007820:	f7f8 feea 	bl	80005f8 <__aeabi_dmul>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f8 fd2c 	bl	8000288 <__aeabi_dsub>
 8007830:	9e01      	ldr	r6, [sp, #4]
 8007832:	9f04      	ldr	r7, [sp, #16]
 8007834:	3630      	adds	r6, #48	; 0x30
 8007836:	f805 6b01 	strb.w	r6, [r5], #1
 800783a:	9e00      	ldr	r6, [sp, #0]
 800783c:	1bae      	subs	r6, r5, r6
 800783e:	42b7      	cmp	r7, r6
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	d134      	bne.n	80078b0 <_dtoa_r+0x708>
 8007846:	f7f8 fd21 	bl	800028c <__adddf3>
 800784a:	4642      	mov	r2, r8
 800784c:	464b      	mov	r3, r9
 800784e:	4606      	mov	r6, r0
 8007850:	460f      	mov	r7, r1
 8007852:	f7f9 f961 	bl	8000b18 <__aeabi_dcmpgt>
 8007856:	b9c8      	cbnz	r0, 800788c <_dtoa_r+0x6e4>
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f9 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8007864:	b110      	cbz	r0, 800786c <_dtoa_r+0x6c4>
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	07db      	lsls	r3, r3, #31
 800786a:	d40f      	bmi.n	800788c <_dtoa_r+0x6e4>
 800786c:	4651      	mov	r1, sl
 800786e:	4620      	mov	r0, r4
 8007870:	f000 fbcc 	bl	800800c <_Bfree>
 8007874:	2300      	movs	r3, #0
 8007876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007878:	702b      	strb	r3, [r5, #0]
 800787a:	f10b 0301 	add.w	r3, fp, #1
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007882:	2b00      	cmp	r3, #0
 8007884:	f43f ace2 	beq.w	800724c <_dtoa_r+0xa4>
 8007888:	601d      	str	r5, [r3, #0]
 800788a:	e4df      	b.n	800724c <_dtoa_r+0xa4>
 800788c:	465f      	mov	r7, fp
 800788e:	462b      	mov	r3, r5
 8007890:	461d      	mov	r5, r3
 8007892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007896:	2a39      	cmp	r2, #57	; 0x39
 8007898:	d106      	bne.n	80078a8 <_dtoa_r+0x700>
 800789a:	9a00      	ldr	r2, [sp, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d1f7      	bne.n	8007890 <_dtoa_r+0x6e8>
 80078a0:	9900      	ldr	r1, [sp, #0]
 80078a2:	2230      	movs	r2, #48	; 0x30
 80078a4:	3701      	adds	r7, #1
 80078a6:	700a      	strb	r2, [r1, #0]
 80078a8:	781a      	ldrb	r2, [r3, #0]
 80078aa:	3201      	adds	r2, #1
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e790      	b.n	80077d2 <_dtoa_r+0x62a>
 80078b0:	4ba3      	ldr	r3, [pc, #652]	; (8007b40 <_dtoa_r+0x998>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	f7f8 fea0 	bl	80005f8 <__aeabi_dmul>
 80078b8:	2200      	movs	r2, #0
 80078ba:	2300      	movs	r3, #0
 80078bc:	4606      	mov	r6, r0
 80078be:	460f      	mov	r7, r1
 80078c0:	f7f9 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d09e      	beq.n	8007806 <_dtoa_r+0x65e>
 80078c8:	e7d0      	b.n	800786c <_dtoa_r+0x6c4>
 80078ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	f000 80ca 	beq.w	8007a66 <_dtoa_r+0x8be>
 80078d2:	9a07      	ldr	r2, [sp, #28]
 80078d4:	2a01      	cmp	r2, #1
 80078d6:	f300 80ad 	bgt.w	8007a34 <_dtoa_r+0x88c>
 80078da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078dc:	2a00      	cmp	r2, #0
 80078de:	f000 80a5 	beq.w	8007a2c <_dtoa_r+0x884>
 80078e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078e6:	9e08      	ldr	r6, [sp, #32]
 80078e8:	9d05      	ldr	r5, [sp, #20]
 80078ea:	9a05      	ldr	r2, [sp, #20]
 80078ec:	441a      	add	r2, r3
 80078ee:	9205      	str	r2, [sp, #20]
 80078f0:	9a06      	ldr	r2, [sp, #24]
 80078f2:	2101      	movs	r1, #1
 80078f4:	441a      	add	r2, r3
 80078f6:	4620      	mov	r0, r4
 80078f8:	9206      	str	r2, [sp, #24]
 80078fa:	f000 fc3d 	bl	8008178 <__i2b>
 80078fe:	4607      	mov	r7, r0
 8007900:	b165      	cbz	r5, 800791c <_dtoa_r+0x774>
 8007902:	9b06      	ldr	r3, [sp, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd09      	ble.n	800791c <_dtoa_r+0x774>
 8007908:	42ab      	cmp	r3, r5
 800790a:	9a05      	ldr	r2, [sp, #20]
 800790c:	bfa8      	it	ge
 800790e:	462b      	movge	r3, r5
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	9205      	str	r2, [sp, #20]
 8007914:	9a06      	ldr	r2, [sp, #24]
 8007916:	1aed      	subs	r5, r5, r3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	9306      	str	r3, [sp, #24]
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	b1f3      	cbz	r3, 800795e <_dtoa_r+0x7b6>
 8007920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 80a3 	beq.w	8007a6e <_dtoa_r+0x8c6>
 8007928:	2e00      	cmp	r6, #0
 800792a:	dd10      	ble.n	800794e <_dtoa_r+0x7a6>
 800792c:	4639      	mov	r1, r7
 800792e:	4632      	mov	r2, r6
 8007930:	4620      	mov	r0, r4
 8007932:	f000 fce1 	bl	80082f8 <__pow5mult>
 8007936:	4652      	mov	r2, sl
 8007938:	4601      	mov	r1, r0
 800793a:	4607      	mov	r7, r0
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fc31 	bl	80081a4 <__multiply>
 8007942:	4651      	mov	r1, sl
 8007944:	4680      	mov	r8, r0
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fb60 	bl	800800c <_Bfree>
 800794c:	46c2      	mov	sl, r8
 800794e:	9b08      	ldr	r3, [sp, #32]
 8007950:	1b9a      	subs	r2, r3, r6
 8007952:	d004      	beq.n	800795e <_dtoa_r+0x7b6>
 8007954:	4651      	mov	r1, sl
 8007956:	4620      	mov	r0, r4
 8007958:	f000 fcce 	bl	80082f8 <__pow5mult>
 800795c:	4682      	mov	sl, r0
 800795e:	2101      	movs	r1, #1
 8007960:	4620      	mov	r0, r4
 8007962:	f000 fc09 	bl	8008178 <__i2b>
 8007966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007968:	2b00      	cmp	r3, #0
 800796a:	4606      	mov	r6, r0
 800796c:	f340 8081 	ble.w	8007a72 <_dtoa_r+0x8ca>
 8007970:	461a      	mov	r2, r3
 8007972:	4601      	mov	r1, r0
 8007974:	4620      	mov	r0, r4
 8007976:	f000 fcbf 	bl	80082f8 <__pow5mult>
 800797a:	9b07      	ldr	r3, [sp, #28]
 800797c:	2b01      	cmp	r3, #1
 800797e:	4606      	mov	r6, r0
 8007980:	dd7a      	ble.n	8007a78 <_dtoa_r+0x8d0>
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	6933      	ldr	r3, [r6, #16]
 8007988:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800798c:	6918      	ldr	r0, [r3, #16]
 800798e:	f000 fba5 	bl	80080dc <__hi0bits>
 8007992:	f1c0 0020 	rsb	r0, r0, #32
 8007996:	9b06      	ldr	r3, [sp, #24]
 8007998:	4418      	add	r0, r3
 800799a:	f010 001f 	ands.w	r0, r0, #31
 800799e:	f000 8094 	beq.w	8007aca <_dtoa_r+0x922>
 80079a2:	f1c0 0320 	rsb	r3, r0, #32
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	f340 8085 	ble.w	8007ab6 <_dtoa_r+0x90e>
 80079ac:	9b05      	ldr	r3, [sp, #20]
 80079ae:	f1c0 001c 	rsb	r0, r0, #28
 80079b2:	4403      	add	r3, r0
 80079b4:	9305      	str	r3, [sp, #20]
 80079b6:	9b06      	ldr	r3, [sp, #24]
 80079b8:	4403      	add	r3, r0
 80079ba:	4405      	add	r5, r0
 80079bc:	9306      	str	r3, [sp, #24]
 80079be:	9b05      	ldr	r3, [sp, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dd05      	ble.n	80079d0 <_dtoa_r+0x828>
 80079c4:	4651      	mov	r1, sl
 80079c6:	461a      	mov	r2, r3
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fcef 	bl	80083ac <__lshift>
 80079ce:	4682      	mov	sl, r0
 80079d0:	9b06      	ldr	r3, [sp, #24]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dd05      	ble.n	80079e2 <_dtoa_r+0x83a>
 80079d6:	4631      	mov	r1, r6
 80079d8:	461a      	mov	r2, r3
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fce6 	bl	80083ac <__lshift>
 80079e0:	4606      	mov	r6, r0
 80079e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d072      	beq.n	8007ace <_dtoa_r+0x926>
 80079e8:	4631      	mov	r1, r6
 80079ea:	4650      	mov	r0, sl
 80079ec:	f000 fd4a 	bl	8008484 <__mcmp>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	da6c      	bge.n	8007ace <_dtoa_r+0x926>
 80079f4:	2300      	movs	r3, #0
 80079f6:	4651      	mov	r1, sl
 80079f8:	220a      	movs	r2, #10
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fb28 	bl	8008050 <__multadd>
 8007a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a06:	4682      	mov	sl, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 81b0 	beq.w	8007d6e <_dtoa_r+0xbc6>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4639      	mov	r1, r7
 8007a12:	220a      	movs	r2, #10
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fb1b 	bl	8008050 <__multadd>
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	4607      	mov	r7, r0
 8007a20:	f300 8096 	bgt.w	8007b50 <_dtoa_r+0x9a8>
 8007a24:	9b07      	ldr	r3, [sp, #28]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	dc59      	bgt.n	8007ade <_dtoa_r+0x936>
 8007a2a:	e091      	b.n	8007b50 <_dtoa_r+0x9a8>
 8007a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a32:	e758      	b.n	80078e6 <_dtoa_r+0x73e>
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	1e5e      	subs	r6, r3, #1
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	42b3      	cmp	r3, r6
 8007a3c:	bfbf      	itttt	lt
 8007a3e:	9b08      	ldrlt	r3, [sp, #32]
 8007a40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007a42:	9608      	strlt	r6, [sp, #32]
 8007a44:	1af3      	sublt	r3, r6, r3
 8007a46:	bfb4      	ite	lt
 8007a48:	18d2      	addlt	r2, r2, r3
 8007a4a:	1b9e      	subge	r6, r3, r6
 8007a4c:	9b04      	ldr	r3, [sp, #16]
 8007a4e:	bfbc      	itt	lt
 8007a50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007a52:	2600      	movlt	r6, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfb7      	itett	lt
 8007a58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007a5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007a60:	1a9d      	sublt	r5, r3, r2
 8007a62:	2300      	movlt	r3, #0
 8007a64:	e741      	b.n	80078ea <_dtoa_r+0x742>
 8007a66:	9e08      	ldr	r6, [sp, #32]
 8007a68:	9d05      	ldr	r5, [sp, #20]
 8007a6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a6c:	e748      	b.n	8007900 <_dtoa_r+0x758>
 8007a6e:	9a08      	ldr	r2, [sp, #32]
 8007a70:	e770      	b.n	8007954 <_dtoa_r+0x7ac>
 8007a72:	9b07      	ldr	r3, [sp, #28]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	dc19      	bgt.n	8007aac <_dtoa_r+0x904>
 8007a78:	9b02      	ldr	r3, [sp, #8]
 8007a7a:	b9bb      	cbnz	r3, 8007aac <_dtoa_r+0x904>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a82:	b99b      	cbnz	r3, 8007aac <_dtoa_r+0x904>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a8a:	0d1b      	lsrs	r3, r3, #20
 8007a8c:	051b      	lsls	r3, r3, #20
 8007a8e:	b183      	cbz	r3, 8007ab2 <_dtoa_r+0x90a>
 8007a90:	9b05      	ldr	r3, [sp, #20]
 8007a92:	3301      	adds	r3, #1
 8007a94:	9305      	str	r3, [sp, #20]
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	9306      	str	r3, [sp, #24]
 8007a9c:	f04f 0801 	mov.w	r8, #1
 8007aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f47f af6f 	bne.w	8007986 <_dtoa_r+0x7de>
 8007aa8:	2001      	movs	r0, #1
 8007aaa:	e774      	b.n	8007996 <_dtoa_r+0x7ee>
 8007aac:	f04f 0800 	mov.w	r8, #0
 8007ab0:	e7f6      	b.n	8007aa0 <_dtoa_r+0x8f8>
 8007ab2:	4698      	mov	r8, r3
 8007ab4:	e7f4      	b.n	8007aa0 <_dtoa_r+0x8f8>
 8007ab6:	d082      	beq.n	80079be <_dtoa_r+0x816>
 8007ab8:	9a05      	ldr	r2, [sp, #20]
 8007aba:	331c      	adds	r3, #28
 8007abc:	441a      	add	r2, r3
 8007abe:	9205      	str	r2, [sp, #20]
 8007ac0:	9a06      	ldr	r2, [sp, #24]
 8007ac2:	441a      	add	r2, r3
 8007ac4:	441d      	add	r5, r3
 8007ac6:	9206      	str	r2, [sp, #24]
 8007ac8:	e779      	b.n	80079be <_dtoa_r+0x816>
 8007aca:	4603      	mov	r3, r0
 8007acc:	e7f4      	b.n	8007ab8 <_dtoa_r+0x910>
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dc37      	bgt.n	8007b44 <_dtoa_r+0x99c>
 8007ad4:	9b07      	ldr	r3, [sp, #28]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	dd34      	ble.n	8007b44 <_dtoa_r+0x99c>
 8007ada:	9b04      	ldr	r3, [sp, #16]
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	b963      	cbnz	r3, 8007afc <_dtoa_r+0x954>
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 fab2 	bl	8008050 <__multadd>
 8007aec:	4601      	mov	r1, r0
 8007aee:	4606      	mov	r6, r0
 8007af0:	4650      	mov	r0, sl
 8007af2:	f000 fcc7 	bl	8008484 <__mcmp>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f73f adbb 	bgt.w	8007672 <_dtoa_r+0x4ca>
 8007afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afe:	9d00      	ldr	r5, [sp, #0]
 8007b00:	ea6f 0b03 	mvn.w	fp, r3
 8007b04:	f04f 0800 	mov.w	r8, #0
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fa7e 	bl	800800c <_Bfree>
 8007b10:	2f00      	cmp	r7, #0
 8007b12:	f43f aeab 	beq.w	800786c <_dtoa_r+0x6c4>
 8007b16:	f1b8 0f00 	cmp.w	r8, #0
 8007b1a:	d005      	beq.n	8007b28 <_dtoa_r+0x980>
 8007b1c:	45b8      	cmp	r8, r7
 8007b1e:	d003      	beq.n	8007b28 <_dtoa_r+0x980>
 8007b20:	4641      	mov	r1, r8
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fa72 	bl	800800c <_Bfree>
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fa6e 	bl	800800c <_Bfree>
 8007b30:	e69c      	b.n	800786c <_dtoa_r+0x6c4>
 8007b32:	2600      	movs	r6, #0
 8007b34:	4637      	mov	r7, r6
 8007b36:	e7e1      	b.n	8007afc <_dtoa_r+0x954>
 8007b38:	46bb      	mov	fp, r7
 8007b3a:	4637      	mov	r7, r6
 8007b3c:	e599      	b.n	8007672 <_dtoa_r+0x4ca>
 8007b3e:	bf00      	nop
 8007b40:	40240000 	.word	0x40240000
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 80c8 	beq.w	8007cdc <_dtoa_r+0xb34>
 8007b4c:	9b04      	ldr	r3, [sp, #16]
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	2d00      	cmp	r5, #0
 8007b52:	dd05      	ble.n	8007b60 <_dtoa_r+0x9b8>
 8007b54:	4639      	mov	r1, r7
 8007b56:	462a      	mov	r2, r5
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fc27 	bl	80083ac <__lshift>
 8007b5e:	4607      	mov	r7, r0
 8007b60:	f1b8 0f00 	cmp.w	r8, #0
 8007b64:	d05b      	beq.n	8007c1e <_dtoa_r+0xa76>
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fa0f 	bl	8007f8c <_Balloc>
 8007b6e:	4605      	mov	r5, r0
 8007b70:	b928      	cbnz	r0, 8007b7e <_dtoa_r+0x9d6>
 8007b72:	4b83      	ldr	r3, [pc, #524]	; (8007d80 <_dtoa_r+0xbd8>)
 8007b74:	4602      	mov	r2, r0
 8007b76:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b7a:	f7ff bb2e 	b.w	80071da <_dtoa_r+0x32>
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	3202      	adds	r2, #2
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	f107 010c 	add.w	r1, r7, #12
 8007b88:	300c      	adds	r0, #12
 8007b8a:	f000 fe39 	bl	8008800 <memcpy>
 8007b8e:	2201      	movs	r2, #1
 8007b90:	4629      	mov	r1, r5
 8007b92:	4620      	mov	r0, r4
 8007b94:	f000 fc0a 	bl	80083ac <__lshift>
 8007b98:	9b00      	ldr	r3, [sp, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	9308      	str	r3, [sp, #32]
 8007ba6:	9b02      	ldr	r3, [sp, #8]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	46b8      	mov	r8, r7
 8007bae:	9306      	str	r3, [sp, #24]
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	4650      	mov	r0, sl
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	f7ff fa6b 	bl	8007096 <quorem>
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	9002      	str	r0, [sp, #8]
 8007bc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bc8:	4650      	mov	r0, sl
 8007bca:	f000 fc5b 	bl	8008484 <__mcmp>
 8007bce:	463a      	mov	r2, r7
 8007bd0:	9005      	str	r0, [sp, #20]
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 fc71 	bl	80084bc <__mdiff>
 8007bda:	68c2      	ldr	r2, [r0, #12]
 8007bdc:	4605      	mov	r5, r0
 8007bde:	bb02      	cbnz	r2, 8007c22 <_dtoa_r+0xa7a>
 8007be0:	4601      	mov	r1, r0
 8007be2:	4650      	mov	r0, sl
 8007be4:	f000 fc4e 	bl	8008484 <__mcmp>
 8007be8:	4602      	mov	r2, r0
 8007bea:	4629      	mov	r1, r5
 8007bec:	4620      	mov	r0, r4
 8007bee:	9209      	str	r2, [sp, #36]	; 0x24
 8007bf0:	f000 fa0c 	bl	800800c <_Bfree>
 8007bf4:	9b07      	ldr	r3, [sp, #28]
 8007bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bf8:	9d04      	ldr	r5, [sp, #16]
 8007bfa:	ea43 0102 	orr.w	r1, r3, r2
 8007bfe:	9b06      	ldr	r3, [sp, #24]
 8007c00:	4319      	orrs	r1, r3
 8007c02:	d110      	bne.n	8007c26 <_dtoa_r+0xa7e>
 8007c04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c08:	d029      	beq.n	8007c5e <_dtoa_r+0xab6>
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	dd02      	ble.n	8007c16 <_dtoa_r+0xa6e>
 8007c10:	9b02      	ldr	r3, [sp, #8]
 8007c12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	f883 9000 	strb.w	r9, [r3]
 8007c1c:	e774      	b.n	8007b08 <_dtoa_r+0x960>
 8007c1e:	4638      	mov	r0, r7
 8007c20:	e7ba      	b.n	8007b98 <_dtoa_r+0x9f0>
 8007c22:	2201      	movs	r2, #1
 8007c24:	e7e1      	b.n	8007bea <_dtoa_r+0xa42>
 8007c26:	9b05      	ldr	r3, [sp, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	db04      	blt.n	8007c36 <_dtoa_r+0xa8e>
 8007c2c:	9907      	ldr	r1, [sp, #28]
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	9906      	ldr	r1, [sp, #24]
 8007c32:	430b      	orrs	r3, r1
 8007c34:	d120      	bne.n	8007c78 <_dtoa_r+0xad0>
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	dded      	ble.n	8007c16 <_dtoa_r+0xa6e>
 8007c3a:	4651      	mov	r1, sl
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 fbb4 	bl	80083ac <__lshift>
 8007c44:	4631      	mov	r1, r6
 8007c46:	4682      	mov	sl, r0
 8007c48:	f000 fc1c 	bl	8008484 <__mcmp>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	dc03      	bgt.n	8007c58 <_dtoa_r+0xab0>
 8007c50:	d1e1      	bne.n	8007c16 <_dtoa_r+0xa6e>
 8007c52:	f019 0f01 	tst.w	r9, #1
 8007c56:	d0de      	beq.n	8007c16 <_dtoa_r+0xa6e>
 8007c58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c5c:	d1d8      	bne.n	8007c10 <_dtoa_r+0xa68>
 8007c5e:	9a01      	ldr	r2, [sp, #4]
 8007c60:	2339      	movs	r3, #57	; 0x39
 8007c62:	7013      	strb	r3, [r2, #0]
 8007c64:	462b      	mov	r3, r5
 8007c66:	461d      	mov	r5, r3
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c6e:	2a39      	cmp	r2, #57	; 0x39
 8007c70:	d06c      	beq.n	8007d4c <_dtoa_r+0xba4>
 8007c72:	3201      	adds	r2, #1
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	e747      	b.n	8007b08 <_dtoa_r+0x960>
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	dd07      	ble.n	8007c8c <_dtoa_r+0xae4>
 8007c7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c80:	d0ed      	beq.n	8007c5e <_dtoa_r+0xab6>
 8007c82:	9a01      	ldr	r2, [sp, #4]
 8007c84:	f109 0301 	add.w	r3, r9, #1
 8007c88:	7013      	strb	r3, [r2, #0]
 8007c8a:	e73d      	b.n	8007b08 <_dtoa_r+0x960>
 8007c8c:	9b04      	ldr	r3, [sp, #16]
 8007c8e:	9a08      	ldr	r2, [sp, #32]
 8007c90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d043      	beq.n	8007d20 <_dtoa_r+0xb78>
 8007c98:	4651      	mov	r1, sl
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f000 f9d6 	bl	8008050 <__multadd>
 8007ca4:	45b8      	cmp	r8, r7
 8007ca6:	4682      	mov	sl, r0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	f04f 020a 	mov.w	r2, #10
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	d107      	bne.n	8007cc6 <_dtoa_r+0xb1e>
 8007cb6:	f000 f9cb 	bl	8008050 <__multadd>
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	e775      	b.n	8007bb2 <_dtoa_r+0xa0a>
 8007cc6:	f000 f9c3 	bl	8008050 <__multadd>
 8007cca:	4639      	mov	r1, r7
 8007ccc:	4680      	mov	r8, r0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	220a      	movs	r2, #10
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 f9bc 	bl	8008050 <__multadd>
 8007cd8:	4607      	mov	r7, r0
 8007cda:	e7f0      	b.n	8007cbe <_dtoa_r+0xb16>
 8007cdc:	9b04      	ldr	r3, [sp, #16]
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	9d00      	ldr	r5, [sp, #0]
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	f7ff f9d6 	bl	8007096 <quorem>
 8007cea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cee:	9b00      	ldr	r3, [sp, #0]
 8007cf0:	f805 9b01 	strb.w	r9, [r5], #1
 8007cf4:	1aea      	subs	r2, r5, r3
 8007cf6:	9b01      	ldr	r3, [sp, #4]
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	dd07      	ble.n	8007d0c <_dtoa_r+0xb64>
 8007cfc:	4651      	mov	r1, sl
 8007cfe:	2300      	movs	r3, #0
 8007d00:	220a      	movs	r2, #10
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 f9a4 	bl	8008050 <__multadd>
 8007d08:	4682      	mov	sl, r0
 8007d0a:	e7ea      	b.n	8007ce2 <_dtoa_r+0xb3a>
 8007d0c:	9b01      	ldr	r3, [sp, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bfc8      	it	gt
 8007d12:	461d      	movgt	r5, r3
 8007d14:	9b00      	ldr	r3, [sp, #0]
 8007d16:	bfd8      	it	le
 8007d18:	2501      	movle	r5, #1
 8007d1a:	441d      	add	r5, r3
 8007d1c:	f04f 0800 	mov.w	r8, #0
 8007d20:	4651      	mov	r1, sl
 8007d22:	2201      	movs	r2, #1
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 fb41 	bl	80083ac <__lshift>
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4682      	mov	sl, r0
 8007d2e:	f000 fba9 	bl	8008484 <__mcmp>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	dc96      	bgt.n	8007c64 <_dtoa_r+0xabc>
 8007d36:	d102      	bne.n	8007d3e <_dtoa_r+0xb96>
 8007d38:	f019 0f01 	tst.w	r9, #1
 8007d3c:	d192      	bne.n	8007c64 <_dtoa_r+0xabc>
 8007d3e:	462b      	mov	r3, r5
 8007d40:	461d      	mov	r5, r3
 8007d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d46:	2a30      	cmp	r2, #48	; 0x30
 8007d48:	d0fa      	beq.n	8007d40 <_dtoa_r+0xb98>
 8007d4a:	e6dd      	b.n	8007b08 <_dtoa_r+0x960>
 8007d4c:	9a00      	ldr	r2, [sp, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d189      	bne.n	8007c66 <_dtoa_r+0xabe>
 8007d52:	f10b 0b01 	add.w	fp, fp, #1
 8007d56:	2331      	movs	r3, #49	; 0x31
 8007d58:	e796      	b.n	8007c88 <_dtoa_r+0xae0>
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <_dtoa_r+0xbdc>)
 8007d5c:	f7ff ba99 	b.w	8007292 <_dtoa_r+0xea>
 8007d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f47f aa6d 	bne.w	8007242 <_dtoa_r+0x9a>
 8007d68:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <_dtoa_r+0xbe0>)
 8007d6a:	f7ff ba92 	b.w	8007292 <_dtoa_r+0xea>
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dcb5      	bgt.n	8007ce0 <_dtoa_r+0xb38>
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	f73f aeb1 	bgt.w	8007ade <_dtoa_r+0x936>
 8007d7c:	e7b0      	b.n	8007ce0 <_dtoa_r+0xb38>
 8007d7e:	bf00      	nop
 8007d80:	08008f38 	.word	0x08008f38
 8007d84:	08008e98 	.word	0x08008e98
 8007d88:	08008ebc 	.word	0x08008ebc

08007d8c <_free_r>:
 8007d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d8e:	2900      	cmp	r1, #0
 8007d90:	d044      	beq.n	8007e1c <_free_r+0x90>
 8007d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d96:	9001      	str	r0, [sp, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d9e:	bfb8      	it	lt
 8007da0:	18e4      	addlt	r4, r4, r3
 8007da2:	f000 f8e7 	bl	8007f74 <__malloc_lock>
 8007da6:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <_free_r+0x94>)
 8007da8:	9801      	ldr	r0, [sp, #4]
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	b933      	cbnz	r3, 8007dbc <_free_r+0x30>
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	6014      	str	r4, [r2, #0]
 8007db2:	b003      	add	sp, #12
 8007db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007db8:	f000 b8e2 	b.w	8007f80 <__malloc_unlock>
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	d908      	bls.n	8007dd2 <_free_r+0x46>
 8007dc0:	6825      	ldr	r5, [r4, #0]
 8007dc2:	1961      	adds	r1, r4, r5
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf01      	itttt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	1949      	addeq	r1, r1, r5
 8007dce:	6021      	streq	r1, [r4, #0]
 8007dd0:	e7ed      	b.n	8007dae <_free_r+0x22>
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	b10b      	cbz	r3, 8007ddc <_free_r+0x50>
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d9fa      	bls.n	8007dd2 <_free_r+0x46>
 8007ddc:	6811      	ldr	r1, [r2, #0]
 8007dde:	1855      	adds	r5, r2, r1
 8007de0:	42a5      	cmp	r5, r4
 8007de2:	d10b      	bne.n	8007dfc <_free_r+0x70>
 8007de4:	6824      	ldr	r4, [r4, #0]
 8007de6:	4421      	add	r1, r4
 8007de8:	1854      	adds	r4, r2, r1
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	d1e0      	bne.n	8007db2 <_free_r+0x26>
 8007df0:	681c      	ldr	r4, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	6053      	str	r3, [r2, #4]
 8007df6:	440c      	add	r4, r1
 8007df8:	6014      	str	r4, [r2, #0]
 8007dfa:	e7da      	b.n	8007db2 <_free_r+0x26>
 8007dfc:	d902      	bls.n	8007e04 <_free_r+0x78>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	6003      	str	r3, [r0, #0]
 8007e02:	e7d6      	b.n	8007db2 <_free_r+0x26>
 8007e04:	6825      	ldr	r5, [r4, #0]
 8007e06:	1961      	adds	r1, r4, r5
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	bf04      	itt	eq
 8007e0c:	6819      	ldreq	r1, [r3, #0]
 8007e0e:	685b      	ldreq	r3, [r3, #4]
 8007e10:	6063      	str	r3, [r4, #4]
 8007e12:	bf04      	itt	eq
 8007e14:	1949      	addeq	r1, r1, r5
 8007e16:	6021      	streq	r1, [r4, #0]
 8007e18:	6054      	str	r4, [r2, #4]
 8007e1a:	e7ca      	b.n	8007db2 <_free_r+0x26>
 8007e1c:	b003      	add	sp, #12
 8007e1e:	bd30      	pop	{r4, r5, pc}
 8007e20:	20000488 	.word	0x20000488

08007e24 <malloc>:
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <malloc+0xc>)
 8007e26:	4601      	mov	r1, r0
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	f000 b823 	b.w	8007e74 <_malloc_r>
 8007e2e:	bf00      	nop
 8007e30:	20000070 	.word	0x20000070

08007e34 <sbrk_aligned>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	4e0e      	ldr	r6, [pc, #56]	; (8007e70 <sbrk_aligned+0x3c>)
 8007e38:	460c      	mov	r4, r1
 8007e3a:	6831      	ldr	r1, [r6, #0]
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	b911      	cbnz	r1, 8007e46 <sbrk_aligned+0x12>
 8007e40:	f000 fcce 	bl	80087e0 <_sbrk_r>
 8007e44:	6030      	str	r0, [r6, #0]
 8007e46:	4621      	mov	r1, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f000 fcc9 	bl	80087e0 <_sbrk_r>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	d00a      	beq.n	8007e68 <sbrk_aligned+0x34>
 8007e52:	1cc4      	adds	r4, r0, #3
 8007e54:	f024 0403 	bic.w	r4, r4, #3
 8007e58:	42a0      	cmp	r0, r4
 8007e5a:	d007      	beq.n	8007e6c <sbrk_aligned+0x38>
 8007e5c:	1a21      	subs	r1, r4, r0
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f000 fcbe 	bl	80087e0 <_sbrk_r>
 8007e64:	3001      	adds	r0, #1
 8007e66:	d101      	bne.n	8007e6c <sbrk_aligned+0x38>
 8007e68:	f04f 34ff 	mov.w	r4, #4294967295
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	2000048c 	.word	0x2000048c

08007e74 <_malloc_r>:
 8007e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e78:	1ccd      	adds	r5, r1, #3
 8007e7a:	f025 0503 	bic.w	r5, r5, #3
 8007e7e:	3508      	adds	r5, #8
 8007e80:	2d0c      	cmp	r5, #12
 8007e82:	bf38      	it	cc
 8007e84:	250c      	movcc	r5, #12
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	4607      	mov	r7, r0
 8007e8a:	db01      	blt.n	8007e90 <_malloc_r+0x1c>
 8007e8c:	42a9      	cmp	r1, r5
 8007e8e:	d905      	bls.n	8007e9c <_malloc_r+0x28>
 8007e90:	230c      	movs	r3, #12
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	2600      	movs	r6, #0
 8007e96:	4630      	mov	r0, r6
 8007e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f70 <_malloc_r+0xfc>
 8007ea0:	f000 f868 	bl	8007f74 <__malloc_lock>
 8007ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea8:	461c      	mov	r4, r3
 8007eaa:	bb5c      	cbnz	r4, 8007f04 <_malloc_r+0x90>
 8007eac:	4629      	mov	r1, r5
 8007eae:	4638      	mov	r0, r7
 8007eb0:	f7ff ffc0 	bl	8007e34 <sbrk_aligned>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	d155      	bne.n	8007f66 <_malloc_r+0xf2>
 8007eba:	f8d8 4000 	ldr.w	r4, [r8]
 8007ebe:	4626      	mov	r6, r4
 8007ec0:	2e00      	cmp	r6, #0
 8007ec2:	d145      	bne.n	8007f50 <_malloc_r+0xdc>
 8007ec4:	2c00      	cmp	r4, #0
 8007ec6:	d048      	beq.n	8007f5a <_malloc_r+0xe6>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4638      	mov	r0, r7
 8007ece:	eb04 0903 	add.w	r9, r4, r3
 8007ed2:	f000 fc85 	bl	80087e0 <_sbrk_r>
 8007ed6:	4581      	cmp	r9, r0
 8007ed8:	d13f      	bne.n	8007f5a <_malloc_r+0xe6>
 8007eda:	6821      	ldr	r1, [r4, #0]
 8007edc:	1a6d      	subs	r5, r5, r1
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ffa7 	bl	8007e34 <sbrk_aligned>
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d037      	beq.n	8007f5a <_malloc_r+0xe6>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	442b      	add	r3, r5
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d038      	beq.n	8007f6a <_malloc_r+0xf6>
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	42a2      	cmp	r2, r4
 8007efc:	d12b      	bne.n	8007f56 <_malloc_r+0xe2>
 8007efe:	2200      	movs	r2, #0
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	e00f      	b.n	8007f24 <_malloc_r+0xb0>
 8007f04:	6822      	ldr	r2, [r4, #0]
 8007f06:	1b52      	subs	r2, r2, r5
 8007f08:	d41f      	bmi.n	8007f4a <_malloc_r+0xd6>
 8007f0a:	2a0b      	cmp	r2, #11
 8007f0c:	d917      	bls.n	8007f3e <_malloc_r+0xca>
 8007f0e:	1961      	adds	r1, r4, r5
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	6025      	str	r5, [r4, #0]
 8007f14:	bf18      	it	ne
 8007f16:	6059      	strne	r1, [r3, #4]
 8007f18:	6863      	ldr	r3, [r4, #4]
 8007f1a:	bf08      	it	eq
 8007f1c:	f8c8 1000 	streq.w	r1, [r8]
 8007f20:	5162      	str	r2, [r4, r5]
 8007f22:	604b      	str	r3, [r1, #4]
 8007f24:	4638      	mov	r0, r7
 8007f26:	f104 060b 	add.w	r6, r4, #11
 8007f2a:	f000 f829 	bl	8007f80 <__malloc_unlock>
 8007f2e:	f026 0607 	bic.w	r6, r6, #7
 8007f32:	1d23      	adds	r3, r4, #4
 8007f34:	1af2      	subs	r2, r6, r3
 8007f36:	d0ae      	beq.n	8007e96 <_malloc_r+0x22>
 8007f38:	1b9b      	subs	r3, r3, r6
 8007f3a:	50a3      	str	r3, [r4, r2]
 8007f3c:	e7ab      	b.n	8007e96 <_malloc_r+0x22>
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	6862      	ldr	r2, [r4, #4]
 8007f42:	d1dd      	bne.n	8007f00 <_malloc_r+0x8c>
 8007f44:	f8c8 2000 	str.w	r2, [r8]
 8007f48:	e7ec      	b.n	8007f24 <_malloc_r+0xb0>
 8007f4a:	4623      	mov	r3, r4
 8007f4c:	6864      	ldr	r4, [r4, #4]
 8007f4e:	e7ac      	b.n	8007eaa <_malloc_r+0x36>
 8007f50:	4634      	mov	r4, r6
 8007f52:	6876      	ldr	r6, [r6, #4]
 8007f54:	e7b4      	b.n	8007ec0 <_malloc_r+0x4c>
 8007f56:	4613      	mov	r3, r2
 8007f58:	e7cc      	b.n	8007ef4 <_malloc_r+0x80>
 8007f5a:	230c      	movs	r3, #12
 8007f5c:	603b      	str	r3, [r7, #0]
 8007f5e:	4638      	mov	r0, r7
 8007f60:	f000 f80e 	bl	8007f80 <__malloc_unlock>
 8007f64:	e797      	b.n	8007e96 <_malloc_r+0x22>
 8007f66:	6025      	str	r5, [r4, #0]
 8007f68:	e7dc      	b.n	8007f24 <_malloc_r+0xb0>
 8007f6a:	605b      	str	r3, [r3, #4]
 8007f6c:	deff      	udf	#255	; 0xff
 8007f6e:	bf00      	nop
 8007f70:	20000488 	.word	0x20000488

08007f74 <__malloc_lock>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__malloc_lock+0x8>)
 8007f76:	f7ff b88c 	b.w	8007092 <__retarget_lock_acquire_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	20000484 	.word	0x20000484

08007f80 <__malloc_unlock>:
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <__malloc_unlock+0x8>)
 8007f82:	f7ff b887 	b.w	8007094 <__retarget_lock_release_recursive>
 8007f86:	bf00      	nop
 8007f88:	20000484 	.word	0x20000484

08007f8c <_Balloc>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	69c6      	ldr	r6, [r0, #28]
 8007f90:	4604      	mov	r4, r0
 8007f92:	460d      	mov	r5, r1
 8007f94:	b976      	cbnz	r6, 8007fb4 <_Balloc+0x28>
 8007f96:	2010      	movs	r0, #16
 8007f98:	f7ff ff44 	bl	8007e24 <malloc>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	61e0      	str	r0, [r4, #28]
 8007fa0:	b920      	cbnz	r0, 8007fac <_Balloc+0x20>
 8007fa2:	4b18      	ldr	r3, [pc, #96]	; (8008004 <_Balloc+0x78>)
 8007fa4:	4818      	ldr	r0, [pc, #96]	; (8008008 <_Balloc+0x7c>)
 8007fa6:	216b      	movs	r1, #107	; 0x6b
 8007fa8:	f000 fc38 	bl	800881c <__assert_func>
 8007fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fb0:	6006      	str	r6, [r0, #0]
 8007fb2:	60c6      	str	r6, [r0, #12]
 8007fb4:	69e6      	ldr	r6, [r4, #28]
 8007fb6:	68f3      	ldr	r3, [r6, #12]
 8007fb8:	b183      	cbz	r3, 8007fdc <_Balloc+0x50>
 8007fba:	69e3      	ldr	r3, [r4, #28]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fc2:	b9b8      	cbnz	r0, 8007ff4 <_Balloc+0x68>
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	fa01 f605 	lsl.w	r6, r1, r5
 8007fca:	1d72      	adds	r2, r6, #5
 8007fcc:	0092      	lsls	r2, r2, #2
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 fc42 	bl	8008858 <_calloc_r>
 8007fd4:	b160      	cbz	r0, 8007ff0 <_Balloc+0x64>
 8007fd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fda:	e00e      	b.n	8007ffa <_Balloc+0x6e>
 8007fdc:	2221      	movs	r2, #33	; 0x21
 8007fde:	2104      	movs	r1, #4
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 fc39 	bl	8008858 <_calloc_r>
 8007fe6:	69e3      	ldr	r3, [r4, #28]
 8007fe8:	60f0      	str	r0, [r6, #12]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e4      	bne.n	8007fba <_Balloc+0x2e>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	6802      	ldr	r2, [r0, #0]
 8007ff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008000:	e7f7      	b.n	8007ff2 <_Balloc+0x66>
 8008002:	bf00      	nop
 8008004:	08008ec9 	.word	0x08008ec9
 8008008:	08008f49 	.word	0x08008f49

0800800c <_Bfree>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	69c6      	ldr	r6, [r0, #28]
 8008010:	4605      	mov	r5, r0
 8008012:	460c      	mov	r4, r1
 8008014:	b976      	cbnz	r6, 8008034 <_Bfree+0x28>
 8008016:	2010      	movs	r0, #16
 8008018:	f7ff ff04 	bl	8007e24 <malloc>
 800801c:	4602      	mov	r2, r0
 800801e:	61e8      	str	r0, [r5, #28]
 8008020:	b920      	cbnz	r0, 800802c <_Bfree+0x20>
 8008022:	4b09      	ldr	r3, [pc, #36]	; (8008048 <_Bfree+0x3c>)
 8008024:	4809      	ldr	r0, [pc, #36]	; (800804c <_Bfree+0x40>)
 8008026:	218f      	movs	r1, #143	; 0x8f
 8008028:	f000 fbf8 	bl	800881c <__assert_func>
 800802c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008030:	6006      	str	r6, [r0, #0]
 8008032:	60c6      	str	r6, [r0, #12]
 8008034:	b13c      	cbz	r4, 8008046 <_Bfree+0x3a>
 8008036:	69eb      	ldr	r3, [r5, #28]
 8008038:	6862      	ldr	r2, [r4, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008040:	6021      	str	r1, [r4, #0]
 8008042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	08008ec9 	.word	0x08008ec9
 800804c:	08008f49 	.word	0x08008f49

08008050 <__multadd>:
 8008050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008054:	690d      	ldr	r5, [r1, #16]
 8008056:	4607      	mov	r7, r0
 8008058:	460c      	mov	r4, r1
 800805a:	461e      	mov	r6, r3
 800805c:	f101 0c14 	add.w	ip, r1, #20
 8008060:	2000      	movs	r0, #0
 8008062:	f8dc 3000 	ldr.w	r3, [ip]
 8008066:	b299      	uxth	r1, r3
 8008068:	fb02 6101 	mla	r1, r2, r1, r6
 800806c:	0c1e      	lsrs	r6, r3, #16
 800806e:	0c0b      	lsrs	r3, r1, #16
 8008070:	fb02 3306 	mla	r3, r2, r6, r3
 8008074:	b289      	uxth	r1, r1
 8008076:	3001      	adds	r0, #1
 8008078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800807c:	4285      	cmp	r5, r0
 800807e:	f84c 1b04 	str.w	r1, [ip], #4
 8008082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008086:	dcec      	bgt.n	8008062 <__multadd+0x12>
 8008088:	b30e      	cbz	r6, 80080ce <__multadd+0x7e>
 800808a:	68a3      	ldr	r3, [r4, #8]
 800808c:	42ab      	cmp	r3, r5
 800808e:	dc19      	bgt.n	80080c4 <__multadd+0x74>
 8008090:	6861      	ldr	r1, [r4, #4]
 8008092:	4638      	mov	r0, r7
 8008094:	3101      	adds	r1, #1
 8008096:	f7ff ff79 	bl	8007f8c <_Balloc>
 800809a:	4680      	mov	r8, r0
 800809c:	b928      	cbnz	r0, 80080aa <__multadd+0x5a>
 800809e:	4602      	mov	r2, r0
 80080a0:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <__multadd+0x84>)
 80080a2:	480d      	ldr	r0, [pc, #52]	; (80080d8 <__multadd+0x88>)
 80080a4:	21ba      	movs	r1, #186	; 0xba
 80080a6:	f000 fbb9 	bl	800881c <__assert_func>
 80080aa:	6922      	ldr	r2, [r4, #16]
 80080ac:	3202      	adds	r2, #2
 80080ae:	f104 010c 	add.w	r1, r4, #12
 80080b2:	0092      	lsls	r2, r2, #2
 80080b4:	300c      	adds	r0, #12
 80080b6:	f000 fba3 	bl	8008800 <memcpy>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4638      	mov	r0, r7
 80080be:	f7ff ffa5 	bl	800800c <_Bfree>
 80080c2:	4644      	mov	r4, r8
 80080c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080c8:	3501      	adds	r5, #1
 80080ca:	615e      	str	r6, [r3, #20]
 80080cc:	6125      	str	r5, [r4, #16]
 80080ce:	4620      	mov	r0, r4
 80080d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d4:	08008f38 	.word	0x08008f38
 80080d8:	08008f49 	.word	0x08008f49

080080dc <__hi0bits>:
 80080dc:	0c03      	lsrs	r3, r0, #16
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	b9d3      	cbnz	r3, 8008118 <__hi0bits+0x3c>
 80080e2:	0400      	lsls	r0, r0, #16
 80080e4:	2310      	movs	r3, #16
 80080e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080ea:	bf04      	itt	eq
 80080ec:	0200      	lsleq	r0, r0, #8
 80080ee:	3308      	addeq	r3, #8
 80080f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080f4:	bf04      	itt	eq
 80080f6:	0100      	lsleq	r0, r0, #4
 80080f8:	3304      	addeq	r3, #4
 80080fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080fe:	bf04      	itt	eq
 8008100:	0080      	lsleq	r0, r0, #2
 8008102:	3302      	addeq	r3, #2
 8008104:	2800      	cmp	r0, #0
 8008106:	db05      	blt.n	8008114 <__hi0bits+0x38>
 8008108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800810c:	f103 0301 	add.w	r3, r3, #1
 8008110:	bf08      	it	eq
 8008112:	2320      	moveq	r3, #32
 8008114:	4618      	mov	r0, r3
 8008116:	4770      	bx	lr
 8008118:	2300      	movs	r3, #0
 800811a:	e7e4      	b.n	80080e6 <__hi0bits+0xa>

0800811c <__lo0bits>:
 800811c:	6803      	ldr	r3, [r0, #0]
 800811e:	f013 0207 	ands.w	r2, r3, #7
 8008122:	d00c      	beq.n	800813e <__lo0bits+0x22>
 8008124:	07d9      	lsls	r1, r3, #31
 8008126:	d422      	bmi.n	800816e <__lo0bits+0x52>
 8008128:	079a      	lsls	r2, r3, #30
 800812a:	bf49      	itett	mi
 800812c:	085b      	lsrmi	r3, r3, #1
 800812e:	089b      	lsrpl	r3, r3, #2
 8008130:	6003      	strmi	r3, [r0, #0]
 8008132:	2201      	movmi	r2, #1
 8008134:	bf5c      	itt	pl
 8008136:	6003      	strpl	r3, [r0, #0]
 8008138:	2202      	movpl	r2, #2
 800813a:	4610      	mov	r0, r2
 800813c:	4770      	bx	lr
 800813e:	b299      	uxth	r1, r3
 8008140:	b909      	cbnz	r1, 8008146 <__lo0bits+0x2a>
 8008142:	0c1b      	lsrs	r3, r3, #16
 8008144:	2210      	movs	r2, #16
 8008146:	b2d9      	uxtb	r1, r3
 8008148:	b909      	cbnz	r1, 800814e <__lo0bits+0x32>
 800814a:	3208      	adds	r2, #8
 800814c:	0a1b      	lsrs	r3, r3, #8
 800814e:	0719      	lsls	r1, r3, #28
 8008150:	bf04      	itt	eq
 8008152:	091b      	lsreq	r3, r3, #4
 8008154:	3204      	addeq	r2, #4
 8008156:	0799      	lsls	r1, r3, #30
 8008158:	bf04      	itt	eq
 800815a:	089b      	lsreq	r3, r3, #2
 800815c:	3202      	addeq	r2, #2
 800815e:	07d9      	lsls	r1, r3, #31
 8008160:	d403      	bmi.n	800816a <__lo0bits+0x4e>
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	f102 0201 	add.w	r2, r2, #1
 8008168:	d003      	beq.n	8008172 <__lo0bits+0x56>
 800816a:	6003      	str	r3, [r0, #0]
 800816c:	e7e5      	b.n	800813a <__lo0bits+0x1e>
 800816e:	2200      	movs	r2, #0
 8008170:	e7e3      	b.n	800813a <__lo0bits+0x1e>
 8008172:	2220      	movs	r2, #32
 8008174:	e7e1      	b.n	800813a <__lo0bits+0x1e>
	...

08008178 <__i2b>:
 8008178:	b510      	push	{r4, lr}
 800817a:	460c      	mov	r4, r1
 800817c:	2101      	movs	r1, #1
 800817e:	f7ff ff05 	bl	8007f8c <_Balloc>
 8008182:	4602      	mov	r2, r0
 8008184:	b928      	cbnz	r0, 8008192 <__i2b+0x1a>
 8008186:	4b05      	ldr	r3, [pc, #20]	; (800819c <__i2b+0x24>)
 8008188:	4805      	ldr	r0, [pc, #20]	; (80081a0 <__i2b+0x28>)
 800818a:	f240 1145 	movw	r1, #325	; 0x145
 800818e:	f000 fb45 	bl	800881c <__assert_func>
 8008192:	2301      	movs	r3, #1
 8008194:	6144      	str	r4, [r0, #20]
 8008196:	6103      	str	r3, [r0, #16]
 8008198:	bd10      	pop	{r4, pc}
 800819a:	bf00      	nop
 800819c:	08008f38 	.word	0x08008f38
 80081a0:	08008f49 	.word	0x08008f49

080081a4 <__multiply>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	4691      	mov	r9, r2
 80081aa:	690a      	ldr	r2, [r1, #16]
 80081ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	bfb8      	it	lt
 80081b4:	460b      	movlt	r3, r1
 80081b6:	460c      	mov	r4, r1
 80081b8:	bfbc      	itt	lt
 80081ba:	464c      	movlt	r4, r9
 80081bc:	4699      	movlt	r9, r3
 80081be:	6927      	ldr	r7, [r4, #16]
 80081c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	6861      	ldr	r1, [r4, #4]
 80081c8:	eb07 060a 	add.w	r6, r7, sl
 80081cc:	42b3      	cmp	r3, r6
 80081ce:	b085      	sub	sp, #20
 80081d0:	bfb8      	it	lt
 80081d2:	3101      	addlt	r1, #1
 80081d4:	f7ff feda 	bl	8007f8c <_Balloc>
 80081d8:	b930      	cbnz	r0, 80081e8 <__multiply+0x44>
 80081da:	4602      	mov	r2, r0
 80081dc:	4b44      	ldr	r3, [pc, #272]	; (80082f0 <__multiply+0x14c>)
 80081de:	4845      	ldr	r0, [pc, #276]	; (80082f4 <__multiply+0x150>)
 80081e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80081e4:	f000 fb1a 	bl	800881c <__assert_func>
 80081e8:	f100 0514 	add.w	r5, r0, #20
 80081ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081f0:	462b      	mov	r3, r5
 80081f2:	2200      	movs	r2, #0
 80081f4:	4543      	cmp	r3, r8
 80081f6:	d321      	bcc.n	800823c <__multiply+0x98>
 80081f8:	f104 0314 	add.w	r3, r4, #20
 80081fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008200:	f109 0314 	add.w	r3, r9, #20
 8008204:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008208:	9202      	str	r2, [sp, #8]
 800820a:	1b3a      	subs	r2, r7, r4
 800820c:	3a15      	subs	r2, #21
 800820e:	f022 0203 	bic.w	r2, r2, #3
 8008212:	3204      	adds	r2, #4
 8008214:	f104 0115 	add.w	r1, r4, #21
 8008218:	428f      	cmp	r7, r1
 800821a:	bf38      	it	cc
 800821c:	2204      	movcc	r2, #4
 800821e:	9201      	str	r2, [sp, #4]
 8008220:	9a02      	ldr	r2, [sp, #8]
 8008222:	9303      	str	r3, [sp, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d80c      	bhi.n	8008242 <__multiply+0x9e>
 8008228:	2e00      	cmp	r6, #0
 800822a:	dd03      	ble.n	8008234 <__multiply+0x90>
 800822c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008230:	2b00      	cmp	r3, #0
 8008232:	d05b      	beq.n	80082ec <__multiply+0x148>
 8008234:	6106      	str	r6, [r0, #16]
 8008236:	b005      	add	sp, #20
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	f843 2b04 	str.w	r2, [r3], #4
 8008240:	e7d8      	b.n	80081f4 <__multiply+0x50>
 8008242:	f8b3 a000 	ldrh.w	sl, [r3]
 8008246:	f1ba 0f00 	cmp.w	sl, #0
 800824a:	d024      	beq.n	8008296 <__multiply+0xf2>
 800824c:	f104 0e14 	add.w	lr, r4, #20
 8008250:	46a9      	mov	r9, r5
 8008252:	f04f 0c00 	mov.w	ip, #0
 8008256:	f85e 2b04 	ldr.w	r2, [lr], #4
 800825a:	f8d9 1000 	ldr.w	r1, [r9]
 800825e:	fa1f fb82 	uxth.w	fp, r2
 8008262:	b289      	uxth	r1, r1
 8008264:	fb0a 110b 	mla	r1, sl, fp, r1
 8008268:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800826c:	f8d9 2000 	ldr.w	r2, [r9]
 8008270:	4461      	add	r1, ip
 8008272:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008276:	fb0a c20b 	mla	r2, sl, fp, ip
 800827a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800827e:	b289      	uxth	r1, r1
 8008280:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008284:	4577      	cmp	r7, lr
 8008286:	f849 1b04 	str.w	r1, [r9], #4
 800828a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800828e:	d8e2      	bhi.n	8008256 <__multiply+0xb2>
 8008290:	9a01      	ldr	r2, [sp, #4]
 8008292:	f845 c002 	str.w	ip, [r5, r2]
 8008296:	9a03      	ldr	r2, [sp, #12]
 8008298:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800829c:	3304      	adds	r3, #4
 800829e:	f1b9 0f00 	cmp.w	r9, #0
 80082a2:	d021      	beq.n	80082e8 <__multiply+0x144>
 80082a4:	6829      	ldr	r1, [r5, #0]
 80082a6:	f104 0c14 	add.w	ip, r4, #20
 80082aa:	46ae      	mov	lr, r5
 80082ac:	f04f 0a00 	mov.w	sl, #0
 80082b0:	f8bc b000 	ldrh.w	fp, [ip]
 80082b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082b8:	fb09 220b 	mla	r2, r9, fp, r2
 80082bc:	4452      	add	r2, sl
 80082be:	b289      	uxth	r1, r1
 80082c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082c4:	f84e 1b04 	str.w	r1, [lr], #4
 80082c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80082cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082d0:	f8be 1000 	ldrh.w	r1, [lr]
 80082d4:	fb09 110a 	mla	r1, r9, sl, r1
 80082d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80082dc:	4567      	cmp	r7, ip
 80082de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082e2:	d8e5      	bhi.n	80082b0 <__multiply+0x10c>
 80082e4:	9a01      	ldr	r2, [sp, #4]
 80082e6:	50a9      	str	r1, [r5, r2]
 80082e8:	3504      	adds	r5, #4
 80082ea:	e799      	b.n	8008220 <__multiply+0x7c>
 80082ec:	3e01      	subs	r6, #1
 80082ee:	e79b      	b.n	8008228 <__multiply+0x84>
 80082f0:	08008f38 	.word	0x08008f38
 80082f4:	08008f49 	.word	0x08008f49

080082f8 <__pow5mult>:
 80082f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082fc:	4615      	mov	r5, r2
 80082fe:	f012 0203 	ands.w	r2, r2, #3
 8008302:	4606      	mov	r6, r0
 8008304:	460f      	mov	r7, r1
 8008306:	d007      	beq.n	8008318 <__pow5mult+0x20>
 8008308:	4c25      	ldr	r4, [pc, #148]	; (80083a0 <__pow5mult+0xa8>)
 800830a:	3a01      	subs	r2, #1
 800830c:	2300      	movs	r3, #0
 800830e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008312:	f7ff fe9d 	bl	8008050 <__multadd>
 8008316:	4607      	mov	r7, r0
 8008318:	10ad      	asrs	r5, r5, #2
 800831a:	d03d      	beq.n	8008398 <__pow5mult+0xa0>
 800831c:	69f4      	ldr	r4, [r6, #28]
 800831e:	b97c      	cbnz	r4, 8008340 <__pow5mult+0x48>
 8008320:	2010      	movs	r0, #16
 8008322:	f7ff fd7f 	bl	8007e24 <malloc>
 8008326:	4602      	mov	r2, r0
 8008328:	61f0      	str	r0, [r6, #28]
 800832a:	b928      	cbnz	r0, 8008338 <__pow5mult+0x40>
 800832c:	4b1d      	ldr	r3, [pc, #116]	; (80083a4 <__pow5mult+0xac>)
 800832e:	481e      	ldr	r0, [pc, #120]	; (80083a8 <__pow5mult+0xb0>)
 8008330:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008334:	f000 fa72 	bl	800881c <__assert_func>
 8008338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800833c:	6004      	str	r4, [r0, #0]
 800833e:	60c4      	str	r4, [r0, #12]
 8008340:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008348:	b94c      	cbnz	r4, 800835e <__pow5mult+0x66>
 800834a:	f240 2171 	movw	r1, #625	; 0x271
 800834e:	4630      	mov	r0, r6
 8008350:	f7ff ff12 	bl	8008178 <__i2b>
 8008354:	2300      	movs	r3, #0
 8008356:	f8c8 0008 	str.w	r0, [r8, #8]
 800835a:	4604      	mov	r4, r0
 800835c:	6003      	str	r3, [r0, #0]
 800835e:	f04f 0900 	mov.w	r9, #0
 8008362:	07eb      	lsls	r3, r5, #31
 8008364:	d50a      	bpl.n	800837c <__pow5mult+0x84>
 8008366:	4639      	mov	r1, r7
 8008368:	4622      	mov	r2, r4
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ff1a 	bl	80081a4 <__multiply>
 8008370:	4639      	mov	r1, r7
 8008372:	4680      	mov	r8, r0
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff fe49 	bl	800800c <_Bfree>
 800837a:	4647      	mov	r7, r8
 800837c:	106d      	asrs	r5, r5, #1
 800837e:	d00b      	beq.n	8008398 <__pow5mult+0xa0>
 8008380:	6820      	ldr	r0, [r4, #0]
 8008382:	b938      	cbnz	r0, 8008394 <__pow5mult+0x9c>
 8008384:	4622      	mov	r2, r4
 8008386:	4621      	mov	r1, r4
 8008388:	4630      	mov	r0, r6
 800838a:	f7ff ff0b 	bl	80081a4 <__multiply>
 800838e:	6020      	str	r0, [r4, #0]
 8008390:	f8c0 9000 	str.w	r9, [r0]
 8008394:	4604      	mov	r4, r0
 8008396:	e7e4      	b.n	8008362 <__pow5mult+0x6a>
 8008398:	4638      	mov	r0, r7
 800839a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800839e:	bf00      	nop
 80083a0:	08009098 	.word	0x08009098
 80083a4:	08008ec9 	.word	0x08008ec9
 80083a8:	08008f49 	.word	0x08008f49

080083ac <__lshift>:
 80083ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b0:	460c      	mov	r4, r1
 80083b2:	6849      	ldr	r1, [r1, #4]
 80083b4:	6923      	ldr	r3, [r4, #16]
 80083b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	4607      	mov	r7, r0
 80083be:	4691      	mov	r9, r2
 80083c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083c4:	f108 0601 	add.w	r6, r8, #1
 80083c8:	42b3      	cmp	r3, r6
 80083ca:	db0b      	blt.n	80083e4 <__lshift+0x38>
 80083cc:	4638      	mov	r0, r7
 80083ce:	f7ff fddd 	bl	8007f8c <_Balloc>
 80083d2:	4605      	mov	r5, r0
 80083d4:	b948      	cbnz	r0, 80083ea <__lshift+0x3e>
 80083d6:	4602      	mov	r2, r0
 80083d8:	4b28      	ldr	r3, [pc, #160]	; (800847c <__lshift+0xd0>)
 80083da:	4829      	ldr	r0, [pc, #164]	; (8008480 <__lshift+0xd4>)
 80083dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80083e0:	f000 fa1c 	bl	800881c <__assert_func>
 80083e4:	3101      	adds	r1, #1
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	e7ee      	b.n	80083c8 <__lshift+0x1c>
 80083ea:	2300      	movs	r3, #0
 80083ec:	f100 0114 	add.w	r1, r0, #20
 80083f0:	f100 0210 	add.w	r2, r0, #16
 80083f4:	4618      	mov	r0, r3
 80083f6:	4553      	cmp	r3, sl
 80083f8:	db33      	blt.n	8008462 <__lshift+0xb6>
 80083fa:	6920      	ldr	r0, [r4, #16]
 80083fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008400:	f104 0314 	add.w	r3, r4, #20
 8008404:	f019 091f 	ands.w	r9, r9, #31
 8008408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800840c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008410:	d02b      	beq.n	800846a <__lshift+0xbe>
 8008412:	f1c9 0e20 	rsb	lr, r9, #32
 8008416:	468a      	mov	sl, r1
 8008418:	2200      	movs	r2, #0
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	fa00 f009 	lsl.w	r0, r0, r9
 8008420:	4310      	orrs	r0, r2
 8008422:	f84a 0b04 	str.w	r0, [sl], #4
 8008426:	f853 2b04 	ldr.w	r2, [r3], #4
 800842a:	459c      	cmp	ip, r3
 800842c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008430:	d8f3      	bhi.n	800841a <__lshift+0x6e>
 8008432:	ebac 0304 	sub.w	r3, ip, r4
 8008436:	3b15      	subs	r3, #21
 8008438:	f023 0303 	bic.w	r3, r3, #3
 800843c:	3304      	adds	r3, #4
 800843e:	f104 0015 	add.w	r0, r4, #21
 8008442:	4584      	cmp	ip, r0
 8008444:	bf38      	it	cc
 8008446:	2304      	movcc	r3, #4
 8008448:	50ca      	str	r2, [r1, r3]
 800844a:	b10a      	cbz	r2, 8008450 <__lshift+0xa4>
 800844c:	f108 0602 	add.w	r6, r8, #2
 8008450:	3e01      	subs	r6, #1
 8008452:	4638      	mov	r0, r7
 8008454:	612e      	str	r6, [r5, #16]
 8008456:	4621      	mov	r1, r4
 8008458:	f7ff fdd8 	bl	800800c <_Bfree>
 800845c:	4628      	mov	r0, r5
 800845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008462:	f842 0f04 	str.w	r0, [r2, #4]!
 8008466:	3301      	adds	r3, #1
 8008468:	e7c5      	b.n	80083f6 <__lshift+0x4a>
 800846a:	3904      	subs	r1, #4
 800846c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008470:	f841 2f04 	str.w	r2, [r1, #4]!
 8008474:	459c      	cmp	ip, r3
 8008476:	d8f9      	bhi.n	800846c <__lshift+0xc0>
 8008478:	e7ea      	b.n	8008450 <__lshift+0xa4>
 800847a:	bf00      	nop
 800847c:	08008f38 	.word	0x08008f38
 8008480:	08008f49 	.word	0x08008f49

08008484 <__mcmp>:
 8008484:	b530      	push	{r4, r5, lr}
 8008486:	6902      	ldr	r2, [r0, #16]
 8008488:	690c      	ldr	r4, [r1, #16]
 800848a:	1b12      	subs	r2, r2, r4
 800848c:	d10e      	bne.n	80084ac <__mcmp+0x28>
 800848e:	f100 0314 	add.w	r3, r0, #20
 8008492:	3114      	adds	r1, #20
 8008494:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008498:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800849c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084a4:	42a5      	cmp	r5, r4
 80084a6:	d003      	beq.n	80084b0 <__mcmp+0x2c>
 80084a8:	d305      	bcc.n	80084b6 <__mcmp+0x32>
 80084aa:	2201      	movs	r2, #1
 80084ac:	4610      	mov	r0, r2
 80084ae:	bd30      	pop	{r4, r5, pc}
 80084b0:	4283      	cmp	r3, r0
 80084b2:	d3f3      	bcc.n	800849c <__mcmp+0x18>
 80084b4:	e7fa      	b.n	80084ac <__mcmp+0x28>
 80084b6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ba:	e7f7      	b.n	80084ac <__mcmp+0x28>

080084bc <__mdiff>:
 80084bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	460c      	mov	r4, r1
 80084c2:	4606      	mov	r6, r0
 80084c4:	4611      	mov	r1, r2
 80084c6:	4620      	mov	r0, r4
 80084c8:	4690      	mov	r8, r2
 80084ca:	f7ff ffdb 	bl	8008484 <__mcmp>
 80084ce:	1e05      	subs	r5, r0, #0
 80084d0:	d110      	bne.n	80084f4 <__mdiff+0x38>
 80084d2:	4629      	mov	r1, r5
 80084d4:	4630      	mov	r0, r6
 80084d6:	f7ff fd59 	bl	8007f8c <_Balloc>
 80084da:	b930      	cbnz	r0, 80084ea <__mdiff+0x2e>
 80084dc:	4b3a      	ldr	r3, [pc, #232]	; (80085c8 <__mdiff+0x10c>)
 80084de:	4602      	mov	r2, r0
 80084e0:	f240 2137 	movw	r1, #567	; 0x237
 80084e4:	4839      	ldr	r0, [pc, #228]	; (80085cc <__mdiff+0x110>)
 80084e6:	f000 f999 	bl	800881c <__assert_func>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	bfa4      	itt	ge
 80084f6:	4643      	movge	r3, r8
 80084f8:	46a0      	movge	r8, r4
 80084fa:	4630      	mov	r0, r6
 80084fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008500:	bfa6      	itte	ge
 8008502:	461c      	movge	r4, r3
 8008504:	2500      	movge	r5, #0
 8008506:	2501      	movlt	r5, #1
 8008508:	f7ff fd40 	bl	8007f8c <_Balloc>
 800850c:	b920      	cbnz	r0, 8008518 <__mdiff+0x5c>
 800850e:	4b2e      	ldr	r3, [pc, #184]	; (80085c8 <__mdiff+0x10c>)
 8008510:	4602      	mov	r2, r0
 8008512:	f240 2145 	movw	r1, #581	; 0x245
 8008516:	e7e5      	b.n	80084e4 <__mdiff+0x28>
 8008518:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800851c:	6926      	ldr	r6, [r4, #16]
 800851e:	60c5      	str	r5, [r0, #12]
 8008520:	f104 0914 	add.w	r9, r4, #20
 8008524:	f108 0514 	add.w	r5, r8, #20
 8008528:	f100 0e14 	add.w	lr, r0, #20
 800852c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008530:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008534:	f108 0210 	add.w	r2, r8, #16
 8008538:	46f2      	mov	sl, lr
 800853a:	2100      	movs	r1, #0
 800853c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008540:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008544:	fa11 f88b 	uxtah	r8, r1, fp
 8008548:	b299      	uxth	r1, r3
 800854a:	0c1b      	lsrs	r3, r3, #16
 800854c:	eba8 0801 	sub.w	r8, r8, r1
 8008550:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008554:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008558:	fa1f f888 	uxth.w	r8, r8
 800855c:	1419      	asrs	r1, r3, #16
 800855e:	454e      	cmp	r6, r9
 8008560:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008564:	f84a 3b04 	str.w	r3, [sl], #4
 8008568:	d8e8      	bhi.n	800853c <__mdiff+0x80>
 800856a:	1b33      	subs	r3, r6, r4
 800856c:	3b15      	subs	r3, #21
 800856e:	f023 0303 	bic.w	r3, r3, #3
 8008572:	3304      	adds	r3, #4
 8008574:	3415      	adds	r4, #21
 8008576:	42a6      	cmp	r6, r4
 8008578:	bf38      	it	cc
 800857a:	2304      	movcc	r3, #4
 800857c:	441d      	add	r5, r3
 800857e:	4473      	add	r3, lr
 8008580:	469e      	mov	lr, r3
 8008582:	462e      	mov	r6, r5
 8008584:	4566      	cmp	r6, ip
 8008586:	d30e      	bcc.n	80085a6 <__mdiff+0xea>
 8008588:	f10c 0203 	add.w	r2, ip, #3
 800858c:	1b52      	subs	r2, r2, r5
 800858e:	f022 0203 	bic.w	r2, r2, #3
 8008592:	3d03      	subs	r5, #3
 8008594:	45ac      	cmp	ip, r5
 8008596:	bf38      	it	cc
 8008598:	2200      	movcc	r2, #0
 800859a:	4413      	add	r3, r2
 800859c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085a0:	b17a      	cbz	r2, 80085c2 <__mdiff+0x106>
 80085a2:	6107      	str	r7, [r0, #16]
 80085a4:	e7a4      	b.n	80084f0 <__mdiff+0x34>
 80085a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80085aa:	fa11 f288 	uxtah	r2, r1, r8
 80085ae:	1414      	asrs	r4, r2, #16
 80085b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085b4:	b292      	uxth	r2, r2
 80085b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085ba:	f84e 2b04 	str.w	r2, [lr], #4
 80085be:	1421      	asrs	r1, r4, #16
 80085c0:	e7e0      	b.n	8008584 <__mdiff+0xc8>
 80085c2:	3f01      	subs	r7, #1
 80085c4:	e7ea      	b.n	800859c <__mdiff+0xe0>
 80085c6:	bf00      	nop
 80085c8:	08008f38 	.word	0x08008f38
 80085cc:	08008f49 	.word	0x08008f49

080085d0 <__d2b>:
 80085d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085d4:	460f      	mov	r7, r1
 80085d6:	2101      	movs	r1, #1
 80085d8:	ec59 8b10 	vmov	r8, r9, d0
 80085dc:	4616      	mov	r6, r2
 80085de:	f7ff fcd5 	bl	8007f8c <_Balloc>
 80085e2:	4604      	mov	r4, r0
 80085e4:	b930      	cbnz	r0, 80085f4 <__d2b+0x24>
 80085e6:	4602      	mov	r2, r0
 80085e8:	4b24      	ldr	r3, [pc, #144]	; (800867c <__d2b+0xac>)
 80085ea:	4825      	ldr	r0, [pc, #148]	; (8008680 <__d2b+0xb0>)
 80085ec:	f240 310f 	movw	r1, #783	; 0x30f
 80085f0:	f000 f914 	bl	800881c <__assert_func>
 80085f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085fc:	bb2d      	cbnz	r5, 800864a <__d2b+0x7a>
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	f1b8 0300 	subs.w	r3, r8, #0
 8008604:	d026      	beq.n	8008654 <__d2b+0x84>
 8008606:	4668      	mov	r0, sp
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	f7ff fd87 	bl	800811c <__lo0bits>
 800860e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008612:	b1e8      	cbz	r0, 8008650 <__d2b+0x80>
 8008614:	f1c0 0320 	rsb	r3, r0, #32
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	430b      	orrs	r3, r1
 800861e:	40c2      	lsrs	r2, r0
 8008620:	6163      	str	r3, [r4, #20]
 8008622:	9201      	str	r2, [sp, #4]
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	61a3      	str	r3, [r4, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	bf14      	ite	ne
 800862c:	2202      	movne	r2, #2
 800862e:	2201      	moveq	r2, #1
 8008630:	6122      	str	r2, [r4, #16]
 8008632:	b1bd      	cbz	r5, 8008664 <__d2b+0x94>
 8008634:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008638:	4405      	add	r5, r0
 800863a:	603d      	str	r5, [r7, #0]
 800863c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008640:	6030      	str	r0, [r6, #0]
 8008642:	4620      	mov	r0, r4
 8008644:	b003      	add	sp, #12
 8008646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800864a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800864e:	e7d6      	b.n	80085fe <__d2b+0x2e>
 8008650:	6161      	str	r1, [r4, #20]
 8008652:	e7e7      	b.n	8008624 <__d2b+0x54>
 8008654:	a801      	add	r0, sp, #4
 8008656:	f7ff fd61 	bl	800811c <__lo0bits>
 800865a:	9b01      	ldr	r3, [sp, #4]
 800865c:	6163      	str	r3, [r4, #20]
 800865e:	3020      	adds	r0, #32
 8008660:	2201      	movs	r2, #1
 8008662:	e7e5      	b.n	8008630 <__d2b+0x60>
 8008664:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008668:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800866c:	6038      	str	r0, [r7, #0]
 800866e:	6918      	ldr	r0, [r3, #16]
 8008670:	f7ff fd34 	bl	80080dc <__hi0bits>
 8008674:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008678:	e7e2      	b.n	8008640 <__d2b+0x70>
 800867a:	bf00      	nop
 800867c:	08008f38 	.word	0x08008f38
 8008680:	08008f49 	.word	0x08008f49

08008684 <__sflush_r>:
 8008684:	898a      	ldrh	r2, [r1, #12]
 8008686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868a:	4605      	mov	r5, r0
 800868c:	0710      	lsls	r0, r2, #28
 800868e:	460c      	mov	r4, r1
 8008690:	d458      	bmi.n	8008744 <__sflush_r+0xc0>
 8008692:	684b      	ldr	r3, [r1, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	dc05      	bgt.n	80086a4 <__sflush_r+0x20>
 8008698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	dc02      	bgt.n	80086a4 <__sflush_r+0x20>
 800869e:	2000      	movs	r0, #0
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d0f9      	beq.n	800869e <__sflush_r+0x1a>
 80086aa:	2300      	movs	r3, #0
 80086ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086b0:	682f      	ldr	r7, [r5, #0]
 80086b2:	6a21      	ldr	r1, [r4, #32]
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	d032      	beq.n	800871e <__sflush_r+0x9a>
 80086b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	075a      	lsls	r2, r3, #29
 80086be:	d505      	bpl.n	80086cc <__sflush_r+0x48>
 80086c0:	6863      	ldr	r3, [r4, #4]
 80086c2:	1ac0      	subs	r0, r0, r3
 80086c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086c6:	b10b      	cbz	r3, 80086cc <__sflush_r+0x48>
 80086c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086ca:	1ac0      	subs	r0, r0, r3
 80086cc:	2300      	movs	r3, #0
 80086ce:	4602      	mov	r2, r0
 80086d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086d2:	6a21      	ldr	r1, [r4, #32]
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b0      	blx	r6
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	d106      	bne.n	80086ec <__sflush_r+0x68>
 80086de:	6829      	ldr	r1, [r5, #0]
 80086e0:	291d      	cmp	r1, #29
 80086e2:	d82b      	bhi.n	800873c <__sflush_r+0xb8>
 80086e4:	4a29      	ldr	r2, [pc, #164]	; (800878c <__sflush_r+0x108>)
 80086e6:	410a      	asrs	r2, r1
 80086e8:	07d6      	lsls	r6, r2, #31
 80086ea:	d427      	bmi.n	800873c <__sflush_r+0xb8>
 80086ec:	2200      	movs	r2, #0
 80086ee:	6062      	str	r2, [r4, #4]
 80086f0:	04d9      	lsls	r1, r3, #19
 80086f2:	6922      	ldr	r2, [r4, #16]
 80086f4:	6022      	str	r2, [r4, #0]
 80086f6:	d504      	bpl.n	8008702 <__sflush_r+0x7e>
 80086f8:	1c42      	adds	r2, r0, #1
 80086fa:	d101      	bne.n	8008700 <__sflush_r+0x7c>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b903      	cbnz	r3, 8008702 <__sflush_r+0x7e>
 8008700:	6560      	str	r0, [r4, #84]	; 0x54
 8008702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008704:	602f      	str	r7, [r5, #0]
 8008706:	2900      	cmp	r1, #0
 8008708:	d0c9      	beq.n	800869e <__sflush_r+0x1a>
 800870a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800870e:	4299      	cmp	r1, r3
 8008710:	d002      	beq.n	8008718 <__sflush_r+0x94>
 8008712:	4628      	mov	r0, r5
 8008714:	f7ff fb3a 	bl	8007d8c <_free_r>
 8008718:	2000      	movs	r0, #0
 800871a:	6360      	str	r0, [r4, #52]	; 0x34
 800871c:	e7c0      	b.n	80086a0 <__sflush_r+0x1c>
 800871e:	2301      	movs	r3, #1
 8008720:	4628      	mov	r0, r5
 8008722:	47b0      	blx	r6
 8008724:	1c41      	adds	r1, r0, #1
 8008726:	d1c8      	bne.n	80086ba <__sflush_r+0x36>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0c5      	beq.n	80086ba <__sflush_r+0x36>
 800872e:	2b1d      	cmp	r3, #29
 8008730:	d001      	beq.n	8008736 <__sflush_r+0xb2>
 8008732:	2b16      	cmp	r3, #22
 8008734:	d101      	bne.n	800873a <__sflush_r+0xb6>
 8008736:	602f      	str	r7, [r5, #0]
 8008738:	e7b1      	b.n	800869e <__sflush_r+0x1a>
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	e7ad      	b.n	80086a0 <__sflush_r+0x1c>
 8008744:	690f      	ldr	r7, [r1, #16]
 8008746:	2f00      	cmp	r7, #0
 8008748:	d0a9      	beq.n	800869e <__sflush_r+0x1a>
 800874a:	0793      	lsls	r3, r2, #30
 800874c:	680e      	ldr	r6, [r1, #0]
 800874e:	bf08      	it	eq
 8008750:	694b      	ldreq	r3, [r1, #20]
 8008752:	600f      	str	r7, [r1, #0]
 8008754:	bf18      	it	ne
 8008756:	2300      	movne	r3, #0
 8008758:	eba6 0807 	sub.w	r8, r6, r7
 800875c:	608b      	str	r3, [r1, #8]
 800875e:	f1b8 0f00 	cmp.w	r8, #0
 8008762:	dd9c      	ble.n	800869e <__sflush_r+0x1a>
 8008764:	6a21      	ldr	r1, [r4, #32]
 8008766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008768:	4643      	mov	r3, r8
 800876a:	463a      	mov	r2, r7
 800876c:	4628      	mov	r0, r5
 800876e:	47b0      	blx	r6
 8008770:	2800      	cmp	r0, #0
 8008772:	dc06      	bgt.n	8008782 <__sflush_r+0xfe>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e78e      	b.n	80086a0 <__sflush_r+0x1c>
 8008782:	4407      	add	r7, r0
 8008784:	eba8 0800 	sub.w	r8, r8, r0
 8008788:	e7e9      	b.n	800875e <__sflush_r+0xda>
 800878a:	bf00      	nop
 800878c:	dfbffffe 	.word	0xdfbffffe

08008790 <_fflush_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	690b      	ldr	r3, [r1, #16]
 8008794:	4605      	mov	r5, r0
 8008796:	460c      	mov	r4, r1
 8008798:	b913      	cbnz	r3, 80087a0 <_fflush_r+0x10>
 800879a:	2500      	movs	r5, #0
 800879c:	4628      	mov	r0, r5
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	b118      	cbz	r0, 80087aa <_fflush_r+0x1a>
 80087a2:	6a03      	ldr	r3, [r0, #32]
 80087a4:	b90b      	cbnz	r3, 80087aa <_fflush_r+0x1a>
 80087a6:	f7fe fb7d 	bl	8006ea4 <__sinit>
 80087aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0f3      	beq.n	800879a <_fflush_r+0xa>
 80087b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087b4:	07d0      	lsls	r0, r2, #31
 80087b6:	d404      	bmi.n	80087c2 <_fflush_r+0x32>
 80087b8:	0599      	lsls	r1, r3, #22
 80087ba:	d402      	bmi.n	80087c2 <_fflush_r+0x32>
 80087bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087be:	f7fe fc68 	bl	8007092 <__retarget_lock_acquire_recursive>
 80087c2:	4628      	mov	r0, r5
 80087c4:	4621      	mov	r1, r4
 80087c6:	f7ff ff5d 	bl	8008684 <__sflush_r>
 80087ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087cc:	07da      	lsls	r2, r3, #31
 80087ce:	4605      	mov	r5, r0
 80087d0:	d4e4      	bmi.n	800879c <_fflush_r+0xc>
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	059b      	lsls	r3, r3, #22
 80087d6:	d4e1      	bmi.n	800879c <_fflush_r+0xc>
 80087d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087da:	f7fe fc5b 	bl	8007094 <__retarget_lock_release_recursive>
 80087de:	e7dd      	b.n	800879c <_fflush_r+0xc>

080087e0 <_sbrk_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d06      	ldr	r5, [pc, #24]	; (80087fc <_sbrk_r+0x1c>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f8 fe16 	bl	800141c <_sbrk>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_sbrk_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_sbrk_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	20000480 	.word	0x20000480

08008800 <memcpy>:
 8008800:	440a      	add	r2, r1
 8008802:	4291      	cmp	r1, r2
 8008804:	f100 33ff 	add.w	r3, r0, #4294967295
 8008808:	d100      	bne.n	800880c <memcpy+0xc>
 800880a:	4770      	bx	lr
 800880c:	b510      	push	{r4, lr}
 800880e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008816:	4291      	cmp	r1, r2
 8008818:	d1f9      	bne.n	800880e <memcpy+0xe>
 800881a:	bd10      	pop	{r4, pc}

0800881c <__assert_func>:
 800881c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800881e:	4614      	mov	r4, r2
 8008820:	461a      	mov	r2, r3
 8008822:	4b09      	ldr	r3, [pc, #36]	; (8008848 <__assert_func+0x2c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4605      	mov	r5, r0
 8008828:	68d8      	ldr	r0, [r3, #12]
 800882a:	b14c      	cbz	r4, 8008840 <__assert_func+0x24>
 800882c:	4b07      	ldr	r3, [pc, #28]	; (800884c <__assert_func+0x30>)
 800882e:	9100      	str	r1, [sp, #0]
 8008830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008834:	4906      	ldr	r1, [pc, #24]	; (8008850 <__assert_func+0x34>)
 8008836:	462b      	mov	r3, r5
 8008838:	f000 f844 	bl	80088c4 <fiprintf>
 800883c:	f000 f854 	bl	80088e8 <abort>
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <__assert_func+0x38>)
 8008842:	461c      	mov	r4, r3
 8008844:	e7f3      	b.n	800882e <__assert_func+0x12>
 8008846:	bf00      	nop
 8008848:	20000070 	.word	0x20000070
 800884c:	080090ae 	.word	0x080090ae
 8008850:	080090bb 	.word	0x080090bb
 8008854:	080090e9 	.word	0x080090e9

08008858 <_calloc_r>:
 8008858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800885a:	fba1 2402 	umull	r2, r4, r1, r2
 800885e:	b94c      	cbnz	r4, 8008874 <_calloc_r+0x1c>
 8008860:	4611      	mov	r1, r2
 8008862:	9201      	str	r2, [sp, #4]
 8008864:	f7ff fb06 	bl	8007e74 <_malloc_r>
 8008868:	9a01      	ldr	r2, [sp, #4]
 800886a:	4605      	mov	r5, r0
 800886c:	b930      	cbnz	r0, 800887c <_calloc_r+0x24>
 800886e:	4628      	mov	r0, r5
 8008870:	b003      	add	sp, #12
 8008872:	bd30      	pop	{r4, r5, pc}
 8008874:	220c      	movs	r2, #12
 8008876:	6002      	str	r2, [r0, #0]
 8008878:	2500      	movs	r5, #0
 800887a:	e7f8      	b.n	800886e <_calloc_r+0x16>
 800887c:	4621      	mov	r1, r4
 800887e:	f7fe fb8a 	bl	8006f96 <memset>
 8008882:	e7f4      	b.n	800886e <_calloc_r+0x16>

08008884 <__ascii_mbtowc>:
 8008884:	b082      	sub	sp, #8
 8008886:	b901      	cbnz	r1, 800888a <__ascii_mbtowc+0x6>
 8008888:	a901      	add	r1, sp, #4
 800888a:	b142      	cbz	r2, 800889e <__ascii_mbtowc+0x1a>
 800888c:	b14b      	cbz	r3, 80088a2 <__ascii_mbtowc+0x1e>
 800888e:	7813      	ldrb	r3, [r2, #0]
 8008890:	600b      	str	r3, [r1, #0]
 8008892:	7812      	ldrb	r2, [r2, #0]
 8008894:	1e10      	subs	r0, r2, #0
 8008896:	bf18      	it	ne
 8008898:	2001      	movne	r0, #1
 800889a:	b002      	add	sp, #8
 800889c:	4770      	bx	lr
 800889e:	4610      	mov	r0, r2
 80088a0:	e7fb      	b.n	800889a <__ascii_mbtowc+0x16>
 80088a2:	f06f 0001 	mvn.w	r0, #1
 80088a6:	e7f8      	b.n	800889a <__ascii_mbtowc+0x16>

080088a8 <__ascii_wctomb>:
 80088a8:	b149      	cbz	r1, 80088be <__ascii_wctomb+0x16>
 80088aa:	2aff      	cmp	r2, #255	; 0xff
 80088ac:	bf85      	ittet	hi
 80088ae:	238a      	movhi	r3, #138	; 0x8a
 80088b0:	6003      	strhi	r3, [r0, #0]
 80088b2:	700a      	strbls	r2, [r1, #0]
 80088b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80088b8:	bf98      	it	ls
 80088ba:	2001      	movls	r0, #1
 80088bc:	4770      	bx	lr
 80088be:	4608      	mov	r0, r1
 80088c0:	4770      	bx	lr
	...

080088c4 <fiprintf>:
 80088c4:	b40e      	push	{r1, r2, r3}
 80088c6:	b503      	push	{r0, r1, lr}
 80088c8:	4601      	mov	r1, r0
 80088ca:	ab03      	add	r3, sp, #12
 80088cc:	4805      	ldr	r0, [pc, #20]	; (80088e4 <fiprintf+0x20>)
 80088ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d2:	6800      	ldr	r0, [r0, #0]
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	f000 f837 	bl	8008948 <_vfiprintf_r>
 80088da:	b002      	add	sp, #8
 80088dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e0:	b003      	add	sp, #12
 80088e2:	4770      	bx	lr
 80088e4:	20000070 	.word	0x20000070

080088e8 <abort>:
 80088e8:	b508      	push	{r3, lr}
 80088ea:	2006      	movs	r0, #6
 80088ec:	f000 fa04 	bl	8008cf8 <raise>
 80088f0:	2001      	movs	r0, #1
 80088f2:	f7f8 fd1b 	bl	800132c <_exit>

080088f6 <__sfputc_r>:
 80088f6:	6893      	ldr	r3, [r2, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	b410      	push	{r4}
 80088fe:	6093      	str	r3, [r2, #8]
 8008900:	da08      	bge.n	8008914 <__sfputc_r+0x1e>
 8008902:	6994      	ldr	r4, [r2, #24]
 8008904:	42a3      	cmp	r3, r4
 8008906:	db01      	blt.n	800890c <__sfputc_r+0x16>
 8008908:	290a      	cmp	r1, #10
 800890a:	d103      	bne.n	8008914 <__sfputc_r+0x1e>
 800890c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008910:	f000 b934 	b.w	8008b7c <__swbuf_r>
 8008914:	6813      	ldr	r3, [r2, #0]
 8008916:	1c58      	adds	r0, r3, #1
 8008918:	6010      	str	r0, [r2, #0]
 800891a:	7019      	strb	r1, [r3, #0]
 800891c:	4608      	mov	r0, r1
 800891e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008922:	4770      	bx	lr

08008924 <__sfputs_r>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	4606      	mov	r6, r0
 8008928:	460f      	mov	r7, r1
 800892a:	4614      	mov	r4, r2
 800892c:	18d5      	adds	r5, r2, r3
 800892e:	42ac      	cmp	r4, r5
 8008930:	d101      	bne.n	8008936 <__sfputs_r+0x12>
 8008932:	2000      	movs	r0, #0
 8008934:	e007      	b.n	8008946 <__sfputs_r+0x22>
 8008936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800893a:	463a      	mov	r2, r7
 800893c:	4630      	mov	r0, r6
 800893e:	f7ff ffda 	bl	80088f6 <__sfputc_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d1f3      	bne.n	800892e <__sfputs_r+0xa>
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008948 <_vfiprintf_r>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	460d      	mov	r5, r1
 800894e:	b09d      	sub	sp, #116	; 0x74
 8008950:	4614      	mov	r4, r2
 8008952:	4698      	mov	r8, r3
 8008954:	4606      	mov	r6, r0
 8008956:	b118      	cbz	r0, 8008960 <_vfiprintf_r+0x18>
 8008958:	6a03      	ldr	r3, [r0, #32]
 800895a:	b90b      	cbnz	r3, 8008960 <_vfiprintf_r+0x18>
 800895c:	f7fe faa2 	bl	8006ea4 <__sinit>
 8008960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008962:	07d9      	lsls	r1, r3, #31
 8008964:	d405      	bmi.n	8008972 <_vfiprintf_r+0x2a>
 8008966:	89ab      	ldrh	r3, [r5, #12]
 8008968:	059a      	lsls	r2, r3, #22
 800896a:	d402      	bmi.n	8008972 <_vfiprintf_r+0x2a>
 800896c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800896e:	f7fe fb90 	bl	8007092 <__retarget_lock_acquire_recursive>
 8008972:	89ab      	ldrh	r3, [r5, #12]
 8008974:	071b      	lsls	r3, r3, #28
 8008976:	d501      	bpl.n	800897c <_vfiprintf_r+0x34>
 8008978:	692b      	ldr	r3, [r5, #16]
 800897a:	b99b      	cbnz	r3, 80089a4 <_vfiprintf_r+0x5c>
 800897c:	4629      	mov	r1, r5
 800897e:	4630      	mov	r0, r6
 8008980:	f000 f93a 	bl	8008bf8 <__swsetup_r>
 8008984:	b170      	cbz	r0, 80089a4 <_vfiprintf_r+0x5c>
 8008986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008988:	07dc      	lsls	r4, r3, #31
 800898a:	d504      	bpl.n	8008996 <_vfiprintf_r+0x4e>
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	b01d      	add	sp, #116	; 0x74
 8008992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	0598      	lsls	r0, r3, #22
 800899a:	d4f7      	bmi.n	800898c <_vfiprintf_r+0x44>
 800899c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800899e:	f7fe fb79 	bl	8007094 <__retarget_lock_release_recursive>
 80089a2:	e7f3      	b.n	800898c <_vfiprintf_r+0x44>
 80089a4:	2300      	movs	r3, #0
 80089a6:	9309      	str	r3, [sp, #36]	; 0x24
 80089a8:	2320      	movs	r3, #32
 80089aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80089b2:	2330      	movs	r3, #48	; 0x30
 80089b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008b68 <_vfiprintf_r+0x220>
 80089b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089bc:	f04f 0901 	mov.w	r9, #1
 80089c0:	4623      	mov	r3, r4
 80089c2:	469a      	mov	sl, r3
 80089c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089c8:	b10a      	cbz	r2, 80089ce <_vfiprintf_r+0x86>
 80089ca:	2a25      	cmp	r2, #37	; 0x25
 80089cc:	d1f9      	bne.n	80089c2 <_vfiprintf_r+0x7a>
 80089ce:	ebba 0b04 	subs.w	fp, sl, r4
 80089d2:	d00b      	beq.n	80089ec <_vfiprintf_r+0xa4>
 80089d4:	465b      	mov	r3, fp
 80089d6:	4622      	mov	r2, r4
 80089d8:	4629      	mov	r1, r5
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ffa2 	bl	8008924 <__sfputs_r>
 80089e0:	3001      	adds	r0, #1
 80089e2:	f000 80a9 	beq.w	8008b38 <_vfiprintf_r+0x1f0>
 80089e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089e8:	445a      	add	r2, fp
 80089ea:	9209      	str	r2, [sp, #36]	; 0x24
 80089ec:	f89a 3000 	ldrb.w	r3, [sl]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 80a1 	beq.w	8008b38 <_vfiprintf_r+0x1f0>
 80089f6:	2300      	movs	r3, #0
 80089f8:	f04f 32ff 	mov.w	r2, #4294967295
 80089fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a00:	f10a 0a01 	add.w	sl, sl, #1
 8008a04:	9304      	str	r3, [sp, #16]
 8008a06:	9307      	str	r3, [sp, #28]
 8008a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a0e:	4654      	mov	r4, sl
 8008a10:	2205      	movs	r2, #5
 8008a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a16:	4854      	ldr	r0, [pc, #336]	; (8008b68 <_vfiprintf_r+0x220>)
 8008a18:	f7f7 fbda 	bl	80001d0 <memchr>
 8008a1c:	9a04      	ldr	r2, [sp, #16]
 8008a1e:	b9d8      	cbnz	r0, 8008a58 <_vfiprintf_r+0x110>
 8008a20:	06d1      	lsls	r1, r2, #27
 8008a22:	bf44      	itt	mi
 8008a24:	2320      	movmi	r3, #32
 8008a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a2a:	0713      	lsls	r3, r2, #28
 8008a2c:	bf44      	itt	mi
 8008a2e:	232b      	movmi	r3, #43	; 0x2b
 8008a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a34:	f89a 3000 	ldrb.w	r3, [sl]
 8008a38:	2b2a      	cmp	r3, #42	; 0x2a
 8008a3a:	d015      	beq.n	8008a68 <_vfiprintf_r+0x120>
 8008a3c:	9a07      	ldr	r2, [sp, #28]
 8008a3e:	4654      	mov	r4, sl
 8008a40:	2000      	movs	r0, #0
 8008a42:	f04f 0c0a 	mov.w	ip, #10
 8008a46:	4621      	mov	r1, r4
 8008a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a4c:	3b30      	subs	r3, #48	; 0x30
 8008a4e:	2b09      	cmp	r3, #9
 8008a50:	d94d      	bls.n	8008aee <_vfiprintf_r+0x1a6>
 8008a52:	b1b0      	cbz	r0, 8008a82 <_vfiprintf_r+0x13a>
 8008a54:	9207      	str	r2, [sp, #28]
 8008a56:	e014      	b.n	8008a82 <_vfiprintf_r+0x13a>
 8008a58:	eba0 0308 	sub.w	r3, r0, r8
 8008a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a60:	4313      	orrs	r3, r2
 8008a62:	9304      	str	r3, [sp, #16]
 8008a64:	46a2      	mov	sl, r4
 8008a66:	e7d2      	b.n	8008a0e <_vfiprintf_r+0xc6>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	1d19      	adds	r1, r3, #4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	9103      	str	r1, [sp, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfbb      	ittet	lt
 8008a74:	425b      	neglt	r3, r3
 8008a76:	f042 0202 	orrlt.w	r2, r2, #2
 8008a7a:	9307      	strge	r3, [sp, #28]
 8008a7c:	9307      	strlt	r3, [sp, #28]
 8008a7e:	bfb8      	it	lt
 8008a80:	9204      	strlt	r2, [sp, #16]
 8008a82:	7823      	ldrb	r3, [r4, #0]
 8008a84:	2b2e      	cmp	r3, #46	; 0x2e
 8008a86:	d10c      	bne.n	8008aa2 <_vfiprintf_r+0x15a>
 8008a88:	7863      	ldrb	r3, [r4, #1]
 8008a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a8c:	d134      	bne.n	8008af8 <_vfiprintf_r+0x1b0>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	1d1a      	adds	r2, r3, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	9203      	str	r2, [sp, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfb8      	it	lt
 8008a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a9e:	3402      	adds	r4, #2
 8008aa0:	9305      	str	r3, [sp, #20]
 8008aa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008b78 <_vfiprintf_r+0x230>
 8008aa6:	7821      	ldrb	r1, [r4, #0]
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	4650      	mov	r0, sl
 8008aac:	f7f7 fb90 	bl	80001d0 <memchr>
 8008ab0:	b138      	cbz	r0, 8008ac2 <_vfiprintf_r+0x17a>
 8008ab2:	9b04      	ldr	r3, [sp, #16]
 8008ab4:	eba0 000a 	sub.w	r0, r0, sl
 8008ab8:	2240      	movs	r2, #64	; 0x40
 8008aba:	4082      	lsls	r2, r0
 8008abc:	4313      	orrs	r3, r2
 8008abe:	3401      	adds	r4, #1
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac6:	4829      	ldr	r0, [pc, #164]	; (8008b6c <_vfiprintf_r+0x224>)
 8008ac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008acc:	2206      	movs	r2, #6
 8008ace:	f7f7 fb7f 	bl	80001d0 <memchr>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d03f      	beq.n	8008b56 <_vfiprintf_r+0x20e>
 8008ad6:	4b26      	ldr	r3, [pc, #152]	; (8008b70 <_vfiprintf_r+0x228>)
 8008ad8:	bb1b      	cbnz	r3, 8008b22 <_vfiprintf_r+0x1da>
 8008ada:	9b03      	ldr	r3, [sp, #12]
 8008adc:	3307      	adds	r3, #7
 8008ade:	f023 0307 	bic.w	r3, r3, #7
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	9303      	str	r3, [sp, #12]
 8008ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae8:	443b      	add	r3, r7
 8008aea:	9309      	str	r3, [sp, #36]	; 0x24
 8008aec:	e768      	b.n	80089c0 <_vfiprintf_r+0x78>
 8008aee:	fb0c 3202 	mla	r2, ip, r2, r3
 8008af2:	460c      	mov	r4, r1
 8008af4:	2001      	movs	r0, #1
 8008af6:	e7a6      	b.n	8008a46 <_vfiprintf_r+0xfe>
 8008af8:	2300      	movs	r3, #0
 8008afa:	3401      	adds	r4, #1
 8008afc:	9305      	str	r3, [sp, #20]
 8008afe:	4619      	mov	r1, r3
 8008b00:	f04f 0c0a 	mov.w	ip, #10
 8008b04:	4620      	mov	r0, r4
 8008b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b0a:	3a30      	subs	r2, #48	; 0x30
 8008b0c:	2a09      	cmp	r2, #9
 8008b0e:	d903      	bls.n	8008b18 <_vfiprintf_r+0x1d0>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0c6      	beq.n	8008aa2 <_vfiprintf_r+0x15a>
 8008b14:	9105      	str	r1, [sp, #20]
 8008b16:	e7c4      	b.n	8008aa2 <_vfiprintf_r+0x15a>
 8008b18:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e7f0      	b.n	8008b04 <_vfiprintf_r+0x1bc>
 8008b22:	ab03      	add	r3, sp, #12
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	462a      	mov	r2, r5
 8008b28:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <_vfiprintf_r+0x22c>)
 8008b2a:	a904      	add	r1, sp, #16
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7fd fd67 	bl	8006600 <_printf_float>
 8008b32:	4607      	mov	r7, r0
 8008b34:	1c78      	adds	r0, r7, #1
 8008b36:	d1d6      	bne.n	8008ae6 <_vfiprintf_r+0x19e>
 8008b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b3a:	07d9      	lsls	r1, r3, #31
 8008b3c:	d405      	bmi.n	8008b4a <_vfiprintf_r+0x202>
 8008b3e:	89ab      	ldrh	r3, [r5, #12]
 8008b40:	059a      	lsls	r2, r3, #22
 8008b42:	d402      	bmi.n	8008b4a <_vfiprintf_r+0x202>
 8008b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b46:	f7fe faa5 	bl	8007094 <__retarget_lock_release_recursive>
 8008b4a:	89ab      	ldrh	r3, [r5, #12]
 8008b4c:	065b      	lsls	r3, r3, #25
 8008b4e:	f53f af1d 	bmi.w	800898c <_vfiprintf_r+0x44>
 8008b52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b54:	e71c      	b.n	8008990 <_vfiprintf_r+0x48>
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <_vfiprintf_r+0x22c>)
 8008b5e:	a904      	add	r1, sp, #16
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7fd fff1 	bl	8006b48 <_printf_i>
 8008b66:	e7e4      	b.n	8008b32 <_vfiprintf_r+0x1ea>
 8008b68:	080091eb 	.word	0x080091eb
 8008b6c:	080091f5 	.word	0x080091f5
 8008b70:	08006601 	.word	0x08006601
 8008b74:	08008925 	.word	0x08008925
 8008b78:	080091f1 	.word	0x080091f1

08008b7c <__swbuf_r>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	460e      	mov	r6, r1
 8008b80:	4614      	mov	r4, r2
 8008b82:	4605      	mov	r5, r0
 8008b84:	b118      	cbz	r0, 8008b8e <__swbuf_r+0x12>
 8008b86:	6a03      	ldr	r3, [r0, #32]
 8008b88:	b90b      	cbnz	r3, 8008b8e <__swbuf_r+0x12>
 8008b8a:	f7fe f98b 	bl	8006ea4 <__sinit>
 8008b8e:	69a3      	ldr	r3, [r4, #24]
 8008b90:	60a3      	str	r3, [r4, #8]
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	071a      	lsls	r2, r3, #28
 8008b96:	d525      	bpl.n	8008be4 <__swbuf_r+0x68>
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	b31b      	cbz	r3, 8008be4 <__swbuf_r+0x68>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	6922      	ldr	r2, [r4, #16]
 8008ba0:	1a98      	subs	r0, r3, r2
 8008ba2:	6963      	ldr	r3, [r4, #20]
 8008ba4:	b2f6      	uxtb	r6, r6
 8008ba6:	4283      	cmp	r3, r0
 8008ba8:	4637      	mov	r7, r6
 8008baa:	dc04      	bgt.n	8008bb6 <__swbuf_r+0x3a>
 8008bac:	4621      	mov	r1, r4
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f7ff fdee 	bl	8008790 <_fflush_r>
 8008bb4:	b9e0      	cbnz	r0, 8008bf0 <__swbuf_r+0x74>
 8008bb6:	68a3      	ldr	r3, [r4, #8]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	60a3      	str	r3, [r4, #8]
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	701e      	strb	r6, [r3, #0]
 8008bc4:	6962      	ldr	r2, [r4, #20]
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d004      	beq.n	8008bd6 <__swbuf_r+0x5a>
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	07db      	lsls	r3, r3, #31
 8008bd0:	d506      	bpl.n	8008be0 <__swbuf_r+0x64>
 8008bd2:	2e0a      	cmp	r6, #10
 8008bd4:	d104      	bne.n	8008be0 <__swbuf_r+0x64>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f7ff fdd9 	bl	8008790 <_fflush_r>
 8008bde:	b938      	cbnz	r0, 8008bf0 <__swbuf_r+0x74>
 8008be0:	4638      	mov	r0, r7
 8008be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be4:	4621      	mov	r1, r4
 8008be6:	4628      	mov	r0, r5
 8008be8:	f000 f806 	bl	8008bf8 <__swsetup_r>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d0d5      	beq.n	8008b9c <__swbuf_r+0x20>
 8008bf0:	f04f 37ff 	mov.w	r7, #4294967295
 8008bf4:	e7f4      	b.n	8008be0 <__swbuf_r+0x64>
	...

08008bf8 <__swsetup_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4b2a      	ldr	r3, [pc, #168]	; (8008ca4 <__swsetup_r+0xac>)
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	460c      	mov	r4, r1
 8008c02:	b118      	cbz	r0, 8008c0c <__swsetup_r+0x14>
 8008c04:	6a03      	ldr	r3, [r0, #32]
 8008c06:	b90b      	cbnz	r3, 8008c0c <__swsetup_r+0x14>
 8008c08:	f7fe f94c 	bl	8006ea4 <__sinit>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c12:	0718      	lsls	r0, r3, #28
 8008c14:	d422      	bmi.n	8008c5c <__swsetup_r+0x64>
 8008c16:	06d9      	lsls	r1, r3, #27
 8008c18:	d407      	bmi.n	8008c2a <__swsetup_r+0x32>
 8008c1a:	2309      	movs	r3, #9
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	e034      	b.n	8008c94 <__swsetup_r+0x9c>
 8008c2a:	0758      	lsls	r0, r3, #29
 8008c2c:	d512      	bpl.n	8008c54 <__swsetup_r+0x5c>
 8008c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c30:	b141      	cbz	r1, 8008c44 <__swsetup_r+0x4c>
 8008c32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c36:	4299      	cmp	r1, r3
 8008c38:	d002      	beq.n	8008c40 <__swsetup_r+0x48>
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f7ff f8a6 	bl	8007d8c <_free_r>
 8008c40:	2300      	movs	r3, #0
 8008c42:	6363      	str	r3, [r4, #52]	; 0x34
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	6063      	str	r3, [r4, #4]
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	6023      	str	r3, [r4, #0]
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f043 0308 	orr.w	r3, r3, #8
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	6923      	ldr	r3, [r4, #16]
 8008c5e:	b94b      	cbnz	r3, 8008c74 <__swsetup_r+0x7c>
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c6a:	d003      	beq.n	8008c74 <__swsetup_r+0x7c>
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f000 f884 	bl	8008d7c <__smakebuf_r>
 8008c74:	89a0      	ldrh	r0, [r4, #12]
 8008c76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c7a:	f010 0301 	ands.w	r3, r0, #1
 8008c7e:	d00a      	beq.n	8008c96 <__swsetup_r+0x9e>
 8008c80:	2300      	movs	r3, #0
 8008c82:	60a3      	str	r3, [r4, #8]
 8008c84:	6963      	ldr	r3, [r4, #20]
 8008c86:	425b      	negs	r3, r3
 8008c88:	61a3      	str	r3, [r4, #24]
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	b943      	cbnz	r3, 8008ca0 <__swsetup_r+0xa8>
 8008c8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c92:	d1c4      	bne.n	8008c1e <__swsetup_r+0x26>
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	0781      	lsls	r1, r0, #30
 8008c98:	bf58      	it	pl
 8008c9a:	6963      	ldrpl	r3, [r4, #20]
 8008c9c:	60a3      	str	r3, [r4, #8]
 8008c9e:	e7f4      	b.n	8008c8a <__swsetup_r+0x92>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e7f7      	b.n	8008c94 <__swsetup_r+0x9c>
 8008ca4:	20000070 	.word	0x20000070

08008ca8 <_raise_r>:
 8008ca8:	291f      	cmp	r1, #31
 8008caa:	b538      	push	{r3, r4, r5, lr}
 8008cac:	4604      	mov	r4, r0
 8008cae:	460d      	mov	r5, r1
 8008cb0:	d904      	bls.n	8008cbc <_raise_r+0x14>
 8008cb2:	2316      	movs	r3, #22
 8008cb4:	6003      	str	r3, [r0, #0]
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008cbe:	b112      	cbz	r2, 8008cc6 <_raise_r+0x1e>
 8008cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cc4:	b94b      	cbnz	r3, 8008cda <_raise_r+0x32>
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 f830 	bl	8008d2c <_getpid_r>
 8008ccc:	462a      	mov	r2, r5
 8008cce:	4601      	mov	r1, r0
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cd6:	f000 b817 	b.w	8008d08 <_kill_r>
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d00a      	beq.n	8008cf4 <_raise_r+0x4c>
 8008cde:	1c59      	adds	r1, r3, #1
 8008ce0:	d103      	bne.n	8008cea <_raise_r+0x42>
 8008ce2:	2316      	movs	r3, #22
 8008ce4:	6003      	str	r3, [r0, #0]
 8008ce6:	2001      	movs	r0, #1
 8008ce8:	e7e7      	b.n	8008cba <_raise_r+0x12>
 8008cea:	2400      	movs	r4, #0
 8008cec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	4798      	blx	r3
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e7e0      	b.n	8008cba <_raise_r+0x12>

08008cf8 <raise>:
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <raise+0xc>)
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	f7ff bfd3 	b.w	8008ca8 <_raise_r>
 8008d02:	bf00      	nop
 8008d04:	20000070 	.word	0x20000070

08008d08 <_kill_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d07      	ldr	r5, [pc, #28]	; (8008d28 <_kill_r+0x20>)
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4604      	mov	r4, r0
 8008d10:	4608      	mov	r0, r1
 8008d12:	4611      	mov	r1, r2
 8008d14:	602b      	str	r3, [r5, #0]
 8008d16:	f7f8 faf9 	bl	800130c <_kill>
 8008d1a:	1c43      	adds	r3, r0, #1
 8008d1c:	d102      	bne.n	8008d24 <_kill_r+0x1c>
 8008d1e:	682b      	ldr	r3, [r5, #0]
 8008d20:	b103      	cbz	r3, 8008d24 <_kill_r+0x1c>
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
 8008d26:	bf00      	nop
 8008d28:	20000480 	.word	0x20000480

08008d2c <_getpid_r>:
 8008d2c:	f7f8 bae6 	b.w	80012fc <_getpid>

08008d30 <__swhatbuf_r>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	460c      	mov	r4, r1
 8008d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d38:	2900      	cmp	r1, #0
 8008d3a:	b096      	sub	sp, #88	; 0x58
 8008d3c:	4615      	mov	r5, r2
 8008d3e:	461e      	mov	r6, r3
 8008d40:	da0d      	bge.n	8008d5e <__swhatbuf_r+0x2e>
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d48:	f04f 0100 	mov.w	r1, #0
 8008d4c:	bf0c      	ite	eq
 8008d4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008d52:	2340      	movne	r3, #64	; 0x40
 8008d54:	2000      	movs	r0, #0
 8008d56:	6031      	str	r1, [r6, #0]
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	b016      	add	sp, #88	; 0x58
 8008d5c:	bd70      	pop	{r4, r5, r6, pc}
 8008d5e:	466a      	mov	r2, sp
 8008d60:	f000 f848 	bl	8008df4 <_fstat_r>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	dbec      	blt.n	8008d42 <__swhatbuf_r+0x12>
 8008d68:	9901      	ldr	r1, [sp, #4]
 8008d6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d72:	4259      	negs	r1, r3
 8008d74:	4159      	adcs	r1, r3
 8008d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d7a:	e7eb      	b.n	8008d54 <__swhatbuf_r+0x24>

08008d7c <__smakebuf_r>:
 8008d7c:	898b      	ldrh	r3, [r1, #12]
 8008d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d80:	079d      	lsls	r5, r3, #30
 8008d82:	4606      	mov	r6, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	d507      	bpl.n	8008d98 <__smakebuf_r+0x1c>
 8008d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	2301      	movs	r3, #1
 8008d92:	6163      	str	r3, [r4, #20]
 8008d94:	b002      	add	sp, #8
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	ab01      	add	r3, sp, #4
 8008d9a:	466a      	mov	r2, sp
 8008d9c:	f7ff ffc8 	bl	8008d30 <__swhatbuf_r>
 8008da0:	9900      	ldr	r1, [sp, #0]
 8008da2:	4605      	mov	r5, r0
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7ff f865 	bl	8007e74 <_malloc_r>
 8008daa:	b948      	cbnz	r0, 8008dc0 <__smakebuf_r+0x44>
 8008dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db0:	059a      	lsls	r2, r3, #22
 8008db2:	d4ef      	bmi.n	8008d94 <__smakebuf_r+0x18>
 8008db4:	f023 0303 	bic.w	r3, r3, #3
 8008db8:	f043 0302 	orr.w	r3, r3, #2
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	e7e3      	b.n	8008d88 <__smakebuf_r+0xc>
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	6020      	str	r0, [r4, #0]
 8008dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	6163      	str	r3, [r4, #20]
 8008dce:	9b01      	ldr	r3, [sp, #4]
 8008dd0:	6120      	str	r0, [r4, #16]
 8008dd2:	b15b      	cbz	r3, 8008dec <__smakebuf_r+0x70>
 8008dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f000 f81d 	bl	8008e18 <_isatty_r>
 8008dde:	b128      	cbz	r0, 8008dec <__smakebuf_r+0x70>
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	431d      	orrs	r5, r3
 8008df0:	81a5      	strh	r5, [r4, #12]
 8008df2:	e7cf      	b.n	8008d94 <__smakebuf_r+0x18>

08008df4 <_fstat_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	4d07      	ldr	r5, [pc, #28]	; (8008e14 <_fstat_r+0x20>)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	4611      	mov	r1, r2
 8008e00:	602b      	str	r3, [r5, #0]
 8008e02:	f7f8 fae2 	bl	80013ca <_fstat>
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	d102      	bne.n	8008e10 <_fstat_r+0x1c>
 8008e0a:	682b      	ldr	r3, [r5, #0]
 8008e0c:	b103      	cbz	r3, 8008e10 <_fstat_r+0x1c>
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	bd38      	pop	{r3, r4, r5, pc}
 8008e12:	bf00      	nop
 8008e14:	20000480 	.word	0x20000480

08008e18 <_isatty_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_isatty_r+0x1c>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	602b      	str	r3, [r5, #0]
 8008e24:	f7f8 fae1 	bl	80013ea <_isatty>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_isatty_r+0x1a>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_isatty_r+0x1a>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	20000480 	.word	0x20000480

08008e38 <_init>:
 8008e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3a:	bf00      	nop
 8008e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3e:	bc08      	pop	{r3}
 8008e40:	469e      	mov	lr, r3
 8008e42:	4770      	bx	lr

08008e44 <_fini>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr
