
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004640  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800484c  0800484c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800484c  0800484c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800484c  0800484c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000138  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c43b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b80  00000000  00000000  0002c4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0002e060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0002e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000028d0  00000000  00000000  0002f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbac  00000000  00000000  00031b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3eee  00000000  00000000  0003e6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e25c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002960  00000000  00000000  000e2614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047b8 	.word	0x080047b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080047b8 	.word	0x080047b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fb10 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f844 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f964 	bl	8000558 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f932 	bl	80004f8 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000294:	f000 f906 	bl	80004a4 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000298:	f000 f894 	bl	80003c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800029c:	2100      	movs	r1, #0
 800029e:	4815      	ldr	r0, [pc, #84]	; (80002f4 <main+0x74>)
 80002a0:	f001 fc07 	bl	8001ab2 <HAL_DAC_Start>
  value_dac = 0.3;
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <main+0x78>)
 80002a6:	4a15      	ldr	r2, [pc, #84]	; (80002fc <main+0x7c>)
 80002a8:	601a      	str	r2, [r3, #0]
  /* testing range
	var= (var+1)%4096;
	HAL_Delay(1);
   */
  HAL_ADC_Start(&hadc1);
 80002aa:	4815      	ldr	r0, [pc, #84]	; (8000300 <main+0x80>)
 80002ac:	f000 fd18 	bl	8000ce0 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_PollForConversion(&hadc1, 20);
 80002b0:	2114      	movs	r1, #20
 80002b2:	4813      	ldr	r0, [pc, #76]	; (8000300 <main+0x80>)
 80002b4:	f000 fdca 	bl	8000e4c <HAL_ADC_PollForConversion>
	  lux = HAL_ADC_GetValue(&hadc1);
 80002b8:	4811      	ldr	r0, [pc, #68]	; (8000300 <main+0x80>)
 80002ba:	f000 fe95 	bl	8000fe8 <HAL_ADC_GetValue>
 80002be:	4603      	mov	r3, r0
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <main+0x84>)
 80002c4:	801a      	strh	r2, [r3, #0]
	  sprintf(msg, "Light: %hu \r\n", lux);
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <main+0x84>)
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	490e      	ldr	r1, [pc, #56]	; (8000308 <main+0x88>)
 80002ce:	480f      	ldr	r0, [pc, #60]	; (800030c <main+0x8c>)
 80002d0:	f003 fe04 	bl	8003edc <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <main+0x8c>)
 80002d6:	f7ff ff7b 	bl	80001d0 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	490a      	ldr	r1, [pc, #40]	; (800030c <main+0x8c>)
 80002e4:	480a      	ldr	r0, [pc, #40]	; (8000310 <main+0x90>)
 80002e6:	f003 f9f1 	bl	80036cc <HAL_UART_Transmit>
	  HAL_Delay(500);
 80002ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ee:	f000 fb41 	bl	8000974 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 80002f2:	e7dd      	b.n	80002b0 <main+0x30>
 80002f4:	200000e0 	.word	0x200000e0
 80002f8:	20000000 	.word	0x20000000
 80002fc:	3e99999a 	.word	0x3e99999a
 8000300:	20000090 	.word	0x20000090
 8000304:	2000017c 	.word	0x2000017c
 8000308:	080047d0 	.word	0x080047d0
 800030c:	20000180 	.word	0x20000180
 8000310:	200000f4 	.word	0x200000f4

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b096      	sub	sp, #88	; 0x58
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fdd2 	bl	8003ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	f107 031c 	add.w	r3, r7, #28
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
 8000346:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000348:	2302      	movs	r3, #2
 800034a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	2310      	movs	r3, #16
 8000352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	2302      	movs	r3, #2
 8000356:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000358:	2300      	movs	r3, #0
 800035a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800035c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000360:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fdc8 	bl	8001efc <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000372:	f000 f915 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800037a:	2300      	movs	r3, #0
 800037c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800038a:	f107 031c 	add.w	r3, r7, #28
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f002 fdf1 	bl	8002f78 <HAL_RCC_ClockConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800039c:	f000 f900 	bl	80005a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 f819 	bl	80033e4 <HAL_RCCEx_PeriphCLKConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80003b8:	f000 f8f2 	bl	80005a0 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3758      	adds	r7, #88	; 0x58
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003ca:	f107 031c 	add.w	r3, r7, #28
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
 80003e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e6:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <MX_ADC1_Init+0xdc>)
 80003e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ee:	4b2c      	ldr	r3, [pc, #176]	; (80004a0 <MX_ADC1_Init+0xdc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003f4:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <MX_ADC1_Init+0xdc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003fa:	4b29      	ldr	r3, [pc, #164]	; (80004a0 <MX_ADC1_Init+0xdc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000400:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000402:	2200      	movs	r2, #0
 8000404:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000406:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000408:	2200      	movs	r2, #0
 800040a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040e:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000410:	2200      	movs	r2, #0
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000414:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000416:	2201      	movs	r2, #1
 8000418:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000422:	2201      	movs	r2, #1
 8000424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000426:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000428:	2200      	movs	r2, #0
 800042a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000430:	2204      	movs	r2, #4
 8000432:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000436:	2200      	movs	r2, #0
 8000438:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <MX_ADC1_Init+0xdc>)
 800043c:	2200      	movs	r2, #0
 800043e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000440:	4817      	ldr	r0, [pc, #92]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000442:	f000 fabb 	bl	80009bc <HAL_ADC_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800044c:	f000 f8a8 	bl	80005a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000454:	f107 031c 	add.w	r3, r7, #28
 8000458:	4619      	mov	r1, r3
 800045a:	4811      	ldr	r0, [pc, #68]	; (80004a0 <MX_ADC1_Init+0xdc>)
 800045c:	f001 f892 	bl	8001584 <HAL_ADCEx_MultiModeConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000466:	f000 f89b 	bl	80005a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800046a:	2301      	movs	r3, #1
 800046c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046e:	2301      	movs	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <MX_ADC1_Init+0xdc>)
 8000488:	f000 fdbc 	bl	8001004 <HAL_ADC_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000492:	f000 f885 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000090 	.word	0x20000090

080004a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_DAC1_Init+0x4c>)
 80004b6:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <MX_DAC1_Init+0x50>)
 80004b8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004ba:	480d      	ldr	r0, [pc, #52]	; (80004f0 <MX_DAC1_Init+0x4c>)
 80004bc:	f001 fad7 	bl	8001a6e <HAL_DAC_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80004c6:	f000 f86b 	bl	80005a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	4619      	mov	r1, r3
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_DAC1_Init+0x4c>)
 80004da:	f001 fb35 	bl	8001b48 <HAL_DAC_ConfigChannel>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80004e4:	f000 f85c 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000e0 	.word	0x200000e0
 80004f4:	40007400 	.word	0x40007400

080004f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_USART2_UART_Init+0x58>)
 80004fe:	4a15      	ldr	r2, [pc, #84]	; (8000554 <MX_USART2_UART_Init+0x5c>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000504:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800053c:	f003 f878 	bl	8003630 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000546:	f000 f82b 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000f4 	.word	0x200000f4
 8000554:	40004400 	.word	0x40004400

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_GPIO_Init+0x44>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <MX_GPIO_Init+0x44>)
 8000564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_GPIO_Init+0x44>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_GPIO_Init+0x44>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <MX_GPIO_Init+0x44>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_GPIO_Init+0x44>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x44>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_MspInit+0x44>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_MspInit+0x44>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_MspInit+0x44>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <HAL_MspInit+0x44>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_MspInit+0x44>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000614:	d124      	bne.n	8000660 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_ADC_MspInit+0x74>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <HAL_ADC_MspInit+0x74>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <HAL_ADC_MspInit+0x74>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_ADC_MspInit+0x74>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <HAL_ADC_MspInit+0x74>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <HAL_ADC_MspInit+0x74>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000646:	2301      	movs	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064a:	2303      	movs	r3, #3
 800064c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f001 fadc 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <HAL_DAC_MspInit+0x74>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d124      	bne.n	80006d8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_DAC_MspInit+0x78>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <HAL_DAC_MspInit+0x78>)
 8000694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_DAC_MspInit+0x78>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_DAC_MspInit+0x78>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_DAC_MspInit+0x78>)
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_DAC_MspInit+0x78>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006be:	2310      	movs	r3, #16
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	2303      	movs	r3, #3
 80006c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f001 faa0 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40007400 	.word	0x40007400
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a18      	ldr	r2, [pc, #96]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d129      	bne.n	800075e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_UART_MspInit+0x84>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_UART_MspInit+0x84>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_UART_MspInit+0x84>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_UART_MspInit+0x84>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <HAL_UART_MspInit+0x84>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_UART_MspInit+0x84>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800073a:	f248 0304 	movw	r3, #32772	; 0x8004
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800074c:	2307      	movs	r3, #7
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f001 fa5d 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40004400 	.word	0x40004400
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 f8ba 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f003 fb40 	bl	8003e78 <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20003000 	.word	0x20003000
 8000824:	00000400 	.word	0x00000400
 8000828:	20000194 	.word	0x20000194
 800082c:	200001b0 	.word	0x200001b0

08000830 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800088c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000858:	f7ff ffea 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <LoopForever+0x6>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <LoopForever+0xe>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	; (80008a0 <LoopForever+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000882:	f003 faff 	bl	8003e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000886:	f7ff fcfb 	bl	8000280 <main>

0800088a <LoopForever>:

LoopForever:
    b LoopForever
 800088a:	e7fe      	b.n	800088a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800088c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000898:	08004854 	.word	0x08004854
  ldr r2, =_sbss
 800089c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008a0:	200001ac 	.word	0x200001ac

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x28>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x28>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f001 f8a5 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff fe72 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f8af 	bl	8001a56 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f001 f885 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000004 	.word	0x20000004
 800092c:	2000000c 	.word	0x2000000c
 8000930:	20000008 	.word	0x20000008

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2000000c 	.word	0x2000000c
 8000958:	20000198 	.word	0x20000198

0800095c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000198 	.word	0x20000198

08000974 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000000c 	.word	0x2000000c

080009bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09a      	sub	sp, #104	; 0x68
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009ca:	2300      	movs	r3, #0
 80009cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e172      	b.n	8000cc2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d176      	bne.n	8000adc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d152      	bne.n	8000a9c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fdef 	bl	80005f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d13b      	bne.n	8000a9c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 fed7 	bl	80017d8 <ADC_Disable>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12f      	bne.n	8000a9c <HAL_ADC_Init+0xe0>
 8000a3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d12b      	bne.n	8000a9c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a4c:	f023 0302 	bic.w	r3, r3, #2
 8000a50:	f043 0202 	orr.w	r2, r3, #2
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a66:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a76:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a78:	4b94      	ldr	r3, [pc, #592]	; (8000ccc <HAL_ADC_Init+0x310>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a94      	ldr	r2, [pc, #592]	; (8000cd0 <HAL_ADC_Init+0x314>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9a      	lsrs	r2, r3, #18
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a8e:	e002      	b.n	8000a96 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f9      	bne.n	8000a90 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab8:	d110      	bne.n	8000adc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f023 0312 	bic.w	r3, r3, #18
 8000ac2:	f043 0210 	orr.w	r2, r3, #16
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f043 0201 	orr.w	r2, r3, #1
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f040 80df 	bne.w	8000ca8 <HAL_ADC_Init+0x2ec>
 8000aea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 80da 	bne.w	8000ca8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 80d2 	bne.w	8000ca8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b0c:	f043 0202 	orr.w	r2, r3, #2
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b14:	4b6f      	ldr	r3, [pc, #444]	; (8000cd4 <HAL_ADC_Init+0x318>)
 8000b16:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b20:	d102      	bne.n	8000b28 <HAL_ADC_Init+0x16c>
 8000b22:	4b6d      	ldr	r3, [pc, #436]	; (8000cd8 <HAL_ADC_Init+0x31c>)
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e002      	b.n	8000b2e <HAL_ADC_Init+0x172>
 8000b28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b2c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d108      	bne.n	8000b4e <HAL_ADC_Init+0x192>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <HAL_ADC_Init+0x192>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <HAL_ADC_Init+0x194>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d11c      	bne.n	8000b8e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b54:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d010      	beq.n	8000b7c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d107      	bne.n	8000b76 <HAL_ADC_Init+0x1ba>
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <HAL_ADC_Init+0x1ba>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <HAL_ADC_Init+0x1bc>
 8000b76:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d108      	bne.n	8000b8e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b8c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7e5b      	ldrb	r3, [r3, #25]
 8000b92:	035b      	lsls	r3, r3, #13
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b98:	2a01      	cmp	r2, #1
 8000b9a:	d002      	beq.n	8000ba2 <HAL_ADC_Init+0x1e6>
 8000b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba0:	e000      	b.n	8000ba4 <HAL_ADC_Init+0x1e8>
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	431a      	orrs	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d11b      	bne.n	8000bfa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7e5b      	ldrb	r3, [r3, #25]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d109      	bne.n	8000bde <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	045a      	lsls	r2, r3, #17
 8000bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bda:	663b      	str	r3, [r7, #96]	; 0x60
 8000bdc:	e00d      	b.n	8000bfa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000be6:	f043 0220 	orr.w	r2, r3, #32
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f043 0201 	orr.w	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d007      	beq.n	8000c12 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d114      	bne.n	8000c4a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c2e:	f023 0302 	bic.w	r3, r3, #2
 8000c32:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7e1b      	ldrb	r3, [r3, #24]
 8000c38:	039a      	lsls	r2, r3, #14
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4313      	orrs	r3, r2
 8000c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c46:	4313      	orrs	r3, r2
 8000c48:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <HAL_ADC_Init+0x320>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d10c      	bne.n	8000c80 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f023 010f 	bic.w	r1, r3, #15
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c7e:	e007      	b.n	8000c90 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 020f 	bic.w	r2, r2, #15
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca6:	e00a      	b.n	8000cbe <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f023 0312 	bic.w	r3, r3, #18
 8000cb0:	f043 0210 	orr.w	r2, r3, #16
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000cbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3768      	adds	r7, #104	; 0x68
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000004 	.word	0x20000004
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	50000300 	.word	0x50000300
 8000cd8:	50000100 	.word	0x50000100
 8000cdc:	fff0c007 	.word	0xfff0c007

08000ce0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 809c 	bne.w	8000e34 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Start+0x2a>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e097      	b.n	8000e3a <HAL_ADC_Start+0x15a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 fcfc 	bl	8001710 <ADC_Enable>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8083 	bne.w	8000e2a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d38:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <HAL_ADC_Start+0x164>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 031f 	and.w	r3, r3, #31
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d004      	beq.n	8000d4e <HAL_ADC_Start+0x6e>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d4c:	d115      	bne.n	8000d7a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d027      	beq.n	8000db8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d78:	e01e      	b.n	8000db8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d8e:	d004      	beq.n	8000d9a <HAL_ADC_Start+0xba>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a2c      	ldr	r2, [pc, #176]	; (8000e48 <HAL_ADC_Start+0x168>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10e      	bne.n	8000db8 <HAL_ADC_Start+0xd8>
 8000d9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dc4:	d106      	bne.n	8000dd4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f023 0206 	bic.w	r2, r3, #6
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8000dd2:	e002      	b.n	8000dda <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	221c      	movs	r2, #28
 8000de8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_ADC_Start+0x164>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d010      	beq.n	8000e18 <HAL_ADC_Start+0x138>
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_ADC_Start+0x164>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d00a      	beq.n	8000e18 <HAL_ADC_Start+0x138>
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_ADC_Start+0x164>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 031f 	and.w	r3, r3, #31
 8000e0a:	2b09      	cmp	r3, #9
 8000e0c:	d004      	beq.n	8000e18 <HAL_ADC_Start+0x138>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e16:	d10f      	bne.n	8000e38 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0204 	orr.w	r2, r2, #4
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	e006      	b.n	8000e38 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e32:	e001      	b.n	8000e38 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e34:	2302      	movs	r3, #2
 8000e36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	50000300 	.word	0x50000300
 8000e48:	50000100 	.word	0x50000100

08000e4c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d102      	bne.n	8000e68 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e62:	2308      	movs	r3, #8
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e02e      	b.n	8000ec6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e68:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <HAL_ADC_PollForConversion+0x198>)
 8000e6a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d112      	bne.n	8000e9e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d11d      	bne.n	8000ec2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f043 0220 	orr.w	r2, r3, #32
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e09d      	b.n	8000fda <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f043 0220 	orr.w	r2, r3, #32
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e08b      	b.n	8000fda <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ec6:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <HAL_ADC_PollForConversion+0x198>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <HAL_ADC_PollForConversion+0x90>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eda:	d104      	bne.n	8000ee6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	e003      	b.n	8000eee <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000ee6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000eee:	f7ff fd35 	bl	800095c <HAL_GetTick>
 8000ef2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ef4:	e021      	b.n	8000f3a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d01d      	beq.n	8000f3a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d007      	beq.n	8000f14 <HAL_ADC_PollForConversion+0xc8>
 8000f04:	f7ff fd2a 	bl	800095c <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d212      	bcs.n	8000f3a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10b      	bne.n	8000f3a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f043 0204 	orr.w	r2, r3, #4
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e04f      	b.n	8000fda <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0d6      	beq.n	8000ef6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d131      	bne.n	8000fc6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d12c      	bne.n	8000fc6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d125      	bne.n	8000fc6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d112      	bne.n	8000fae <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d112      	bne.n	8000fc6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f043 0201 	orr.w	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
 8000fac:	e00b      	b.n	8000fc6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f043 0220 	orr.w	r2, r3, #32
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	50000300 	.word	0x50000300

08000fe8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001004:	b480      	push	{r7}
 8001006:	b09b      	sub	sp, #108	; 0x6c
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADC_ConfigChannel+0x22>
 8001022:	2302      	movs	r3, #2
 8001024:	e2a4      	b.n	8001570 <HAL_ADC_ConfigChannel+0x56c>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 8288 	bne.w	800154e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d81c      	bhi.n	8001080 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	461a      	mov	r2, r3
 800105a:	231f      	movs	r3, #31
 800105c:	4093      	lsls	r3, r2
 800105e:	43db      	mvns	r3, r3
 8001060:	4019      	ands	r1, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa00 f203 	lsl.w	r2, r0, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
 800107e:	e063      	b.n	8001148 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b09      	cmp	r3, #9
 8001086:	d81e      	bhi.n	80010c6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	3b1e      	subs	r3, #30
 800109c:	221f      	movs	r2, #31
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	4019      	ands	r1, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	3b1e      	subs	r3, #30
 80010b8:	fa00 f203 	lsl.w	r2, r0, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
 80010c4:	e040      	b.n	8001148 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b0e      	cmp	r3, #14
 80010cc:	d81e      	bhi.n	800110c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	3b3c      	subs	r3, #60	; 0x3c
 80010e2:	221f      	movs	r2, #31
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4019      	ands	r1, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	3b3c      	subs	r3, #60	; 0x3c
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	639a      	str	r2, [r3, #56]	; 0x38
 800110a:	e01d      	b.n	8001148 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3b5a      	subs	r3, #90	; 0x5a
 8001120:	221f      	movs	r2, #31
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	4019      	ands	r1, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	3b5a      	subs	r3, #90	; 0x5a
 800113c:	fa00 f203 	lsl.w	r2, r0, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 80e5 	bne.w	8001322 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d91c      	bls.n	800119a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6999      	ldr	r1, [r3, #24]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	3b1e      	subs	r3, #30
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6898      	ldr	r0, [r3, #8]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	3b1e      	subs	r3, #30
 800118c:	fa00 f203 	lsl.w	r2, r0, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	619a      	str	r2, [r3, #24]
 8001198:	e019      	b.n	80011ce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6959      	ldr	r1, [r3, #20]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	2207      	movs	r2, #7
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4019      	ands	r1, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6898      	ldr	r0, [r3, #8]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	fa00 f203 	lsl.w	r2, r0, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d84f      	bhi.n	8001290 <HAL_ADC_ConfigChannel+0x28c>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <HAL_ADC_ConfigChannel+0x1f4>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001209 	.word	0x08001209
 80011fc:	0800122b 	.word	0x0800122b
 8001200:	0800124d 	.word	0x0800124d
 8001204:	0800126f 	.word	0x0800126f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800120e:	4b94      	ldr	r3, [pc, #592]	; (8001460 <HAL_ADC_ConfigChannel+0x45c>)
 8001210:	4013      	ands	r3, r2
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	0691      	lsls	r1, r2, #26
 8001218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800121a:	430a      	orrs	r2, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001226:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001228:	e07e      	b.n	8001328 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001230:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <HAL_ADC_ConfigChannel+0x45c>)
 8001232:	4013      	ands	r3, r2
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	0691      	lsls	r1, r2, #26
 800123a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800123c:	430a      	orrs	r2, r1
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001248:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800124a:	e06d      	b.n	8001328 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001252:	4b83      	ldr	r3, [pc, #524]	; (8001460 <HAL_ADC_ConfigChannel+0x45c>)
 8001254:	4013      	ands	r3, r2
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	0691      	lsls	r1, r2, #26
 800125c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800125e:	430a      	orrs	r2, r1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800126a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800126c:	e05c      	b.n	8001328 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001274:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <HAL_ADC_ConfigChannel+0x45c>)
 8001276:	4013      	ands	r3, r2
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	0691      	lsls	r1, r2, #26
 800127e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001280:	430a      	orrs	r2, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800128c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800128e:	e04b      	b.n	8001328 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	069b      	lsls	r3, r3, #26
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d107      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012b2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80012ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	069b      	lsls	r3, r3, #26
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d107      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012d6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	069b      	lsls	r3, r3, #26
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d107      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012fa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	069b      	lsls	r3, r3, #26
 800130c:	429a      	cmp	r2, r3
 800130e:	d10a      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800131e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001320:	e001      	b.n	8001326 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001326:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x344>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x344>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_ADC_ConfigChannel+0x346>
 8001348:	2300      	movs	r3, #0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 810a 	bne.w	8001564 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d00f      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	400a      	ands	r2, r1
 8001372:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001376:	e049      	b.n	800140c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	409a      	lsls	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b09      	cmp	r3, #9
 8001398:	d91c      	bls.n	80013d4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6999      	ldr	r1, [r3, #24]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	3b1b      	subs	r3, #27
 80013ac:	2207      	movs	r2, #7
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4019      	ands	r1, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	6898      	ldr	r0, [r3, #8]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	3b1b      	subs	r3, #27
 80013c6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	e01b      	b.n	800140c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6959      	ldr	r1, [r3, #20]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	2207      	movs	r2, #7
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4019      	ands	r1, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6898      	ldr	r0, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	fa00 f203 	lsl.w	r2, r0, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_ADC_ConfigChannel+0x460>)
 800140e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b10      	cmp	r3, #16
 8001416:	d105      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001420:	2b00      	cmp	r3, #0
 8001422:	d015      	beq.n	8001450 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001428:	2b11      	cmp	r3, #17
 800142a:	d105      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800142c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00b      	beq.n	8001450 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800143c:	2b12      	cmp	r3, #18
 800143e:	f040 8091 	bne.w	8001564 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 808a 	bne.w	8001564 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001458:	d108      	bne.n	800146c <HAL_ADC_ConfigChannel+0x468>
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_ADC_ConfigChannel+0x464>)
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e008      	b.n	8001472 <HAL_ADC_ConfigChannel+0x46e>
 8001460:	83fff000 	.word	0x83fff000
 8001464:	50000300 	.word	0x50000300
 8001468:	50000100 	.word	0x50000100
 800146c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001470:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d108      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x48e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x48e>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_ADC_ConfigChannel+0x490>
 8001492:	2300      	movs	r3, #0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d150      	bne.n	800153a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001498:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800149a:	2b00      	cmp	r3, #0
 800149c:	d010      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x4b6>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x4b6>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_ADC_ConfigChannel+0x4b8>
 80014ba:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d13c      	bne.n	800153a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d11d      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x500>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d0:	d118      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014dc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_ADC_ConfigChannel+0x578>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_ADC_ConfigChannel+0x57c>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	0c9a      	lsrs	r2, r3, #18
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f4:	e002      	b.n	80014fc <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f9      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001502:	e02e      	b.n	8001562 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b11      	cmp	r3, #17
 800150a:	d10b      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x520>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001514:	d106      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800151e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001520:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001522:	e01e      	b.n	8001562 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b12      	cmp	r3, #18
 800152a:	d11a      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800152c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001536:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001538:	e013      	b.n	8001562 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f043 0220 	orr.w	r2, r3, #32
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800154c:	e00a      	b.n	8001564 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f043 0220 	orr.w	r2, r3, #32
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001560:	e000      	b.n	8001564 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001562:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800156c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001570:	4618      	mov	r0, r3
 8001572:	376c      	adds	r7, #108	; 0x6c
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	20000004 	.word	0x20000004
 8001580:	431bde83 	.word	0x431bde83

08001584 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001584:	b480      	push	{r7}
 8001586:	b099      	sub	sp, #100	; 0x64
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800159c:	d102      	bne.n	80015a4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	e002      	b.n	80015aa <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80015a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015a8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0a2      	b.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80015be:	2302      	movs	r3, #2
 80015c0:	e09b      	b.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d17f      	bne.n	80016d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d179      	bne.n	80016d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80015e6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d040      	beq.n	8001672 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001602:	035b      	lsls	r3, r3, #13
 8001604:	430b      	orrs	r3, r1
 8001606:	431a      	orrs	r2, r3
 8001608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800160a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d108      	bne.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800162c:	2300      	movs	r3, #0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d15c      	bne.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800164e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001650:	2b00      	cmp	r3, #0
 8001652:	d14b      	bne.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800165c:	f023 030f 	bic.w	r3, r3, #15
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	6811      	ldr	r1, [r2, #0]
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	6892      	ldr	r2, [r2, #8]
 8001668:	430a      	orrs	r2, r1
 800166a:	431a      	orrs	r2, r3
 800166c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001670:	e03c      	b.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800167a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800167c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800169e:	2300      	movs	r3, #0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d123      	bne.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80016c0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d112      	bne.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80016c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80016ce:	f023 030f 	bic.w	r3, r3, #15
 80016d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016d4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016d6:	e009      	b.n	80016ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f043 0220 	orr.w	r2, r3, #32
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80016ea:	e000      	b.n	80016ee <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016ec:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80016fa:	4618      	mov	r0, r3
 80016fc:	3764      	adds	r7, #100	; 0x64
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	50000100 	.word	0x50000100
 800170c:	50000300 	.word	0x50000300

08001710 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <ADC_Enable+0x2c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <ADC_Enable+0x2c>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <ADC_Enable+0x2e>
 800173c:	2300      	movs	r3, #0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d143      	bne.n	80017ca <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <ADC_Enable+0xc4>)
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f043 0210 	orr.w	r2, r3, #16
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e02f      	b.n	80017cc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800177c:	f7ff f8ee 	bl	800095c <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001782:	e01b      	b.n	80017bc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001784:	f7ff f8ea 	bl	800095c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d914      	bls.n	80017bc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b01      	cmp	r3, #1
 800179e:	d00d      	beq.n	80017bc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f043 0210 	orr.w	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e007      	b.n	80017cc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d1dc      	bne.n	8001784 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	8000003f 	.word	0x8000003f

080017d8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <ADC_Disable+0x2c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <ADC_Disable+0x2c>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <ADC_Disable+0x2e>
 8001804:	2300      	movs	r3, #0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d047      	beq.n	800189a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030d 	and.w	r3, r3, #13
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10f      	bne.n	8001838 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0202 	orr.w	r2, r2, #2
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2203      	movs	r2, #3
 800182e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001830:	f7ff f894 	bl	800095c <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001836:	e029      	b.n	800188c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f043 0210 	orr.w	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e023      	b.n	800189c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001854:	f7ff f882 	bl	800095c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d914      	bls.n	800188c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d10d      	bne.n	800188c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f043 0210 	orr.w	r2, r3, #16
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e007      	b.n	800189c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b01      	cmp	r3, #1
 8001898:	d0dc      	beq.n	8001854 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff47 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff5c 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffb0 	bl	80019c4 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e014      	b.n	8001aaa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d105      	bne.n	8001a96 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7fe fdeb 	bl	800066c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	795b      	ldrb	r3, [r3, #5]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DAC_Start+0x16>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e039      	b.n	8001b3c <HAL_DAC_Start+0x8a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10f      	bne.n	8001b0e <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001af8:	2b3c      	cmp	r3, #60	; 0x3c
 8001afa:	d118      	bne.n	8001b2e <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	e00f      	b.n	8001b2e <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b18:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8001b1c:	d107      	bne.n	8001b2e <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0202 	orr.w	r2, r2, #2
 8001b2c:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	795b      	ldrb	r3, [r3, #5]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_DAC_ConfigChannel+0x20>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e04e      	b.n	8001c06 <HAL_DAC_ConfigChannel+0xbe>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2202      	movs	r2, #2
 8001b72:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <HAL_DAC_ConfigChannel+0xcc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d112      	bne.n	8001bac <HAL_DAC_ConfigChannel+0x64>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10f      	bne.n	8001bac <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001b8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e00e      	b.n	8001bca <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001bac:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	22c0      	movs	r2, #192	; 0xc0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40007400 	.word	0x40007400

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	e14e      	b.n	8001ec6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8140 	beq.w	8001ec0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d005      	beq.n	8001c58 <HAL_GPIO_Init+0x40>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 0201 	and.w	r2, r3, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d017      	beq.n	8001cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d123      	bne.n	8001d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	6939      	ldr	r1, [r7, #16]
 8001d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0203 	and.w	r2, r3, #3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 809a 	beq.w	8001ec0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_GPIO_Init+0x2cc>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a54      	ldr	r2, [pc, #336]	; (8001ee4 <HAL_GPIO_Init+0x2cc>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <HAL_GPIO_Init+0x2cc>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001da4:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dce:	d013      	beq.n	8001df8 <HAL_GPIO_Init+0x1e0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a46      	ldr	r2, [pc, #280]	; (8001eec <HAL_GPIO_Init+0x2d4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <HAL_GPIO_Init+0x1dc>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <HAL_GPIO_Init+0x2d8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d007      	beq.n	8001df0 <HAL_GPIO_Init+0x1d8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a44      	ldr	r2, [pc, #272]	; (8001ef4 <HAL_GPIO_Init+0x2dc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_GPIO_Init+0x1d4>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e006      	b.n	8001dfa <HAL_GPIO_Init+0x1e2>
 8001dec:	2305      	movs	r3, #5
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1e2>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1e2>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1e2>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0a:	4937      	ldr	r1, [pc, #220]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e18:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e3c:	4a2e      	ldr	r2, [pc, #184]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e66:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eba:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f47f aea9 	bne.w	8001c28 <HAL_GPIO_Init+0x10>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	48000c00 	.word	0x48000c00
 8001ef8:	40010400 	.word	0x40010400

08001efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f001 b823 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 817d 	beq.w	8002232 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f38:	4bbc      	ldr	r3, [pc, #752]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f44:	4bb9      	ldr	r3, [pc, #740]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d15c      	bne.n	800200a <HAL_RCC_OscConfig+0x10e>
 8001f50:	4bb6      	ldr	r3, [pc, #728]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d155      	bne.n	800200a <HAL_RCC_OscConfig+0x10e>
 8001f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f62:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_OscConfig+0x94>
 8001f8a:	4ba8      	ldr	r3, [pc, #672]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e015      	b.n	8001fbc <HAL_RCC_OscConfig+0xc0>
 8001f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001fb8:	4b9c      	ldr	r3, [pc, #624]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001fc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fc8:	fa92 f2a2 	rbit	r2, r2
 8001fcc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001fd0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001fd4:	fab2 f282 	clz	r2, r2
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f042 0220 	orr.w	r2, r2, #32
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f002 021f 	and.w	r2, r2, #31
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 811f 	beq.w	8002230 <HAL_RCC_OscConfig+0x334>
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 8116 	bne.w	8002230 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f000 bfaf 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x12e>
 800201c:	4b83      	ldr	r3, [pc, #524]	; (800222c <HAL_RCC_OscConfig+0x330>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a82      	ldr	r2, [pc, #520]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e036      	b.n	8002098 <HAL_RCC_OscConfig+0x19c>
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x158>
 800203a:	4b7c      	ldr	r3, [pc, #496]	; (800222c <HAL_RCC_OscConfig+0x330>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a7b      	ldr	r2, [pc, #492]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b79      	ldr	r3, [pc, #484]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a78      	ldr	r2, [pc, #480]	; (800222c <HAL_RCC_OscConfig+0x330>)
 800204c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e021      	b.n	8002098 <HAL_RCC_OscConfig+0x19c>
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x184>
 8002066:	4b71      	ldr	r3, [pc, #452]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a70      	ldr	r2, [pc, #448]	; (800222c <HAL_RCC_OscConfig+0x330>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b6e      	ldr	r3, [pc, #440]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6d      	ldr	r2, [pc, #436]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0x19c>
 8002080:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a69      	ldr	r2, [pc, #420]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_OscConfig+0x330>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a66      	ldr	r2, [pc, #408]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <HAL_RCC_OscConfig+0x330>)
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	f023 020f 	bic.w	r2, r3, #15
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	495f      	ldr	r1, [pc, #380]	; (800222c <HAL_RCC_OscConfig+0x330>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d059      	beq.n	8002176 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7fe fc4b 	bl	800095c <HAL_GetTick>
 80020c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe fc46 	bl	800095c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b64      	cmp	r3, #100	; 0x64
 80020da:	d902      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	f000 bf43 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>
 80020e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80020f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_RCC_OscConfig+0x218>
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	e015      	b.n	8002140 <HAL_RCC_OscConfig+0x244>
 8002114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002118:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002130:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCC_OscConfig+0x330>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002144:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002148:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002154:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f042 0220 	orr.w	r2, r2, #32
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	f002 021f 	and.w	r2, r2, #31
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f202 	lsl.w	r2, r1, r2
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ab      	beq.n	80020cc <HAL_RCC_OscConfig+0x1d0>
 8002174:	e05d      	b.n	8002232 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7fe fbf1 	bl	800095c <HAL_GetTick>
 800217a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe fbec 	bl	800095c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d902      	bls.n	8002196 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	f000 bee9 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>
 8002196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800219a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80021aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2cc>
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_RCC_OscConfig+0x330>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e015      	b.n	80021f4 <HAL_RCC_OscConfig+0x2f8>
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_RCC_OscConfig+0x330>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021f8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80021fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002200:	fa92 f2a2 	rbit	r2, r2
 8002204:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002208:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f042 0220 	orr.w	r2, r2, #32
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f002 021f 	and.w	r2, r2, #31
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f202 	lsl.w	r2, r1, r2
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ab      	bne.n	8002180 <HAL_RCC_OscConfig+0x284>
 8002228:	e003      	b.n	8002232 <HAL_RCC_OscConfig+0x336>
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 817d 	beq.w	8002542 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002248:	4ba6      	ldr	r3, [pc, #664]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00b      	beq.n	800226c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002254:	4ba3      	ldr	r3, [pc, #652]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d172      	bne.n	8002346 <HAL_RCC_OscConfig+0x44a>
 8002260:	4ba0      	ldr	r3, [pc, #640]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d16c      	bne.n	8002346 <HAL_RCC_OscConfig+0x44a>
 800226c:	2302      	movs	r3, #2
 800226e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800227e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d102      	bne.n	800229c <HAL_RCC_OscConfig+0x3a0>
 8002296:	4b93      	ldr	r3, [pc, #588]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	e013      	b.n	80022c4 <HAL_RCC_OscConfig+0x3c8>
 800229c:	2302      	movs	r3, #2
 800229e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022ae:	2302      	movs	r3, #2
 80022b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80022c0:	4b88      	ldr	r3, [pc, #544]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	2202      	movs	r2, #2
 80022c6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80022ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022ce:	fa92 f2a2 	rbit	r2, r2
 80022d2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80022d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCC_OscConfig+0x410>
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d002      	beq.n	800230c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f000 be2e 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	21f8      	movs	r1, #248	; 0xf8
 8002322:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800232a:	fa91 f1a1 	rbit	r1, r1
 800232e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002332:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002336:	fab1 f181 	clz	r1, r1
 800233a:	b2c9      	uxtb	r1, r1
 800233c:	408b      	lsls	r3, r1
 800233e:	4969      	ldr	r1, [pc, #420]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002344:	e0fd      	b.n	8002542 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8088 	beq.w	8002468 <HAL_RCC_OscConfig+0x56c>
 8002358:	2301      	movs	r3, #1
 800235a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800236a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	461a      	mov	r2, r3
 8002380:	2301      	movs	r3, #1
 8002382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe faea 	bl	800095c <HAL_GetTick>
 8002388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238e:	f7fe fae5 	bl	800095c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d902      	bls.n	80023a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	f000 bde2 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>
 80023a4:	2302      	movs	r3, #2
 80023a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80023b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4d8>
 80023ce:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e013      	b.n	80023fc <HAL_RCC_OscConfig+0x500>
 80023d4:	2302      	movs	r3, #2
 80023d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023f8:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2202      	movs	r2, #2
 80023fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002402:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002406:	fa92 f2a2 	rbit	r2, r2
 800240a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800240e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002412:	fab2 f282 	clz	r2, r2
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f042 0220 	orr.w	r2, r2, #32
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f002 021f 	and.w	r2, r2, #31
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f202 	lsl.w	r2, r1, r2
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0af      	beq.n	800238e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	21f8      	movs	r1, #248	; 0xf8
 8002444:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800244c:	fa91 f1a1 	rbit	r1, r1
 8002450:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002454:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002458:	fab1 f181 	clz	r1, r1
 800245c:	b2c9      	uxtb	r1, r1
 800245e:	408b      	lsls	r3, r1
 8002460:	4920      	ldr	r1, [pc, #128]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
 8002466:	e06c      	b.n	8002542 <HAL_RCC_OscConfig+0x646>
 8002468:	2301      	movs	r3, #1
 800246a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800247a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002488:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	461a      	mov	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fa62 	bl	800095c <HAL_GetTick>
 8002498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe fa5d 	bl	800095c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d902      	bls.n	80024b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f000 bd5a 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>
 80024b4:	2302      	movs	r3, #2
 80024b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80024c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d104      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5ec>
 80024de:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <HAL_RCC_OscConfig+0x5e8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e015      	b.n	8002510 <HAL_RCC_OscConfig+0x614>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002500:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800250c:	4bc8      	ldr	r3, [pc, #800]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2202      	movs	r2, #2
 8002512:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002516:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002522:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ad      	bne.n	800249e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8110 	beq.w	8002778 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d079      	beq.n	800265c <HAL_RCC_OscConfig+0x760>
 8002568:	2301      	movs	r3, #1
 800256a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800257a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	4bab      	ldr	r3, [pc, #684]	; (8002834 <HAL_RCC_OscConfig+0x938>)
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7fe f9e3 	bl	800095c <HAL_GetTick>
 8002596:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe f9de 	bl	800095c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	f000 bcdb 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025cc:	2202      	movs	r2, #2
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025f0:	2202      	movs	r2, #2
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800260a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260c:	4b88      	ldr	r3, [pc, #544]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 800260e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002618:	2102      	movs	r1, #2
 800261a:	6019      	str	r1, [r3, #0]
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f1a3 	rbit	r1, r3
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002632:	6019      	str	r1, [r3, #0]
  return result;
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0a0      	beq.n	800259c <HAL_RCC_OscConfig+0x6a0>
 800265a:	e08d      	b.n	8002778 <HAL_RCC_OscConfig+0x87c>
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800267e:	601a      	str	r2, [r3, #0]
  return result;
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002688:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4b68      	ldr	r3, [pc, #416]	; (8002834 <HAL_RCC_OscConfig+0x938>)
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	461a      	mov	r2, r3
 800269a:	2300      	movs	r3, #0
 800269c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7fe f95d 	bl	800095c <HAL_GetTick>
 80026a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe f958 	bl	800095c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d902      	bls.n	80026be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f000 bc55 	b.w	8002f68 <HAL_RCC_OscConfig+0x106c>
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026c6:	2202      	movs	r2, #2
 80026c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	fa93 f2a3 	rbit	r2, r3
 80026d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026ea:	2202      	movs	r2, #2
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	fa93 f2a3 	rbit	r2, r3
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800270e:	2202      	movs	r2, #2
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002728:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 800272c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002736:	2102      	movs	r1, #2
 8002738:	6019      	str	r1, [r3, #0]
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f1a3 	rbit	r1, r3
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002750:	6019      	str	r1, [r3, #0]
  return result;
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d197      	bne.n	80026a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 81a1 	beq.w	8002ad0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002794:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d116      	bne.n	80027ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 80027a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027aa:	61d3      	str	r3, [r2, #28]
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80027c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCC_OscConfig+0x93c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11a      	bne.n	8002810 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_RCC_OscConfig+0x93c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a16      	ldr	r2, [pc, #88]	; (8002838 <HAL_RCC_OscConfig+0x93c>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7fe f8b9 	bl	800095c <HAL_GetTick>
 80027ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	e009      	b.n	8002804 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe f8b4 	bl	800095c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b64      	cmp	r3, #100	; 0x64
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e3b1      	b.n	8002f68 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_RCC_OscConfig+0x93c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ef      	beq.n	80027f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10d      	bne.n	800283c <HAL_RCC_OscConfig+0x940>
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a02      	ldr	r2, [pc, #8]	; (8002830 <HAL_RCC_OscConfig+0x934>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	e03c      	b.n	80028a8 <HAL_RCC_OscConfig+0x9ac>
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	10908120 	.word	0x10908120
 8002838:	40007000 	.word	0x40007000
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10c      	bne.n	8002866 <HAL_RCC_OscConfig+0x96a>
 800284c:	4bc1      	ldr	r3, [pc, #772]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4ac0      	ldr	r2, [pc, #768]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	4bbe      	ldr	r3, [pc, #760]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4abd      	ldr	r2, [pc, #756]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 800285e:	f023 0304 	bic.w	r3, r3, #4
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	e020      	b.n	80028a8 <HAL_RCC_OscConfig+0x9ac>
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x994>
 8002876:	4bb7      	ldr	r3, [pc, #732]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4ab6      	ldr	r2, [pc, #728]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6213      	str	r3, [r2, #32]
 8002882:	4bb4      	ldr	r3, [pc, #720]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4ab3      	ldr	r2, [pc, #716]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0x9ac>
 8002890:	4bb0      	ldr	r3, [pc, #704]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4aaf      	ldr	r2, [pc, #700]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	4bad      	ldr	r3, [pc, #692]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4aac      	ldr	r2, [pc, #688]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8081 	beq.w	80029bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7fe f84f 	bl	800095c <HAL_GetTick>
 80028be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe f84a 	bl	800095c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e345      	b.n	8002f68 <HAL_RCC_OscConfig+0x106c>
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028e4:	2202      	movs	r2, #2
 80028e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	fa93 f2a3 	rbit	r2, r3
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002908:	2202      	movs	r2, #2
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fa93 f2a3 	rbit	r2, r3
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002922:	601a      	str	r2, [r3, #0]
  return result;
 8002924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002928:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800292c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d102      	bne.n	8002948 <HAL_RCC_OscConfig+0xa4c>
 8002942:	4b84      	ldr	r3, [pc, #528]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	e013      	b.n	8002970 <HAL_RCC_OscConfig+0xa74>
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002950:	2202      	movs	r2, #2
 8002952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002966:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4b79      	ldr	r3, [pc, #484]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002974:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002978:	2102      	movs	r1, #2
 800297a:	6011      	str	r1, [r2, #0]
 800297c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002980:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	fa92 f1a2 	rbit	r1, r2
 800298a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800298e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002992:	6011      	str	r1, [r2, #0]
  return result;
 8002994:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002998:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f002 021f 	and.w	r2, r2, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d084      	beq.n	80028c4 <HAL_RCC_OscConfig+0x9c8>
 80029ba:	e07f      	b.n	8002abc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029bc:	f7fd ffce 	bl	800095c <HAL_GetTick>
 80029c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fd ffc9 	bl	800095c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e2c4      	b.n	8002f68 <HAL_RCC_OscConfig+0x106c>
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029e6:	2202      	movs	r2, #2
 80029e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f2a3 	rbit	r2, r3
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a24:	601a      	str	r2, [r3, #0]
  return result;
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_OscConfig+0xb4e>
 8002a44:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	e013      	b.n	8002a72 <HAL_RCC_OscConfig+0xb76>
 8002a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a52:	2202      	movs	r2, #2
 8002a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	6011      	str	r1, [r2, #0]
 8002a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fa92 f1a2 	rbit	r1, r2
 8002a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a94:	6011      	str	r1, [r2, #0]
  return result;
 8002a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f002 021f 	and.w	r2, r2, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d184      	bne.n	80029c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002abc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8242 	beq.w	8002f66 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_RCC_OscConfig+0xc58>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	f000 8213 	beq.w	8002f16 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	f040 8162 	bne.w	8002dc6 <HAL_RCC_OscConfig+0xeca>
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b26:	601a      	str	r2, [r3, #0]
  return result;
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	461a      	mov	r2, r3
 8002b44:	2300      	movs	r3, #0
 8002b46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fd ff08 	bl	800095c <HAL_GetTick>
 8002b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b50:	e00c      	b.n	8002b6c <HAL_RCC_OscConfig+0xc70>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fd ff00 	bl	800095c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e1fd      	b.n	8002f68 <HAL_RCC_OscConfig+0x106c>
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b90:	601a      	str	r2, [r3, #0]
  return result;
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d102      	bne.n	8002bb6 <HAL_RCC_OscConfig+0xcba>
 8002bb0:	4bb0      	ldr	r3, [pc, #704]	; (8002e74 <HAL_RCC_OscConfig+0xf78>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	e027      	b.n	8002c06 <HAL_RCC_OscConfig+0xd0a>
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	fa93 f2a3 	rbit	r2, r3
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	4b9c      	ldr	r3, [pc, #624]	; (8002e74 <HAL_RCC_OscConfig+0xf78>)
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c0e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c12:	6011      	str	r1, [r2, #0]
 8002c14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c18:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	fa92 f1a2 	rbit	r1, r2
 8002c22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c26:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c2a:	6011      	str	r1, [r2, #0]
  return result;
 8002c2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c30:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	fab2 f282 	clz	r2, r2
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f042 0220 	orr.w	r2, r2, #32
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f002 021f 	and.w	r2, r2, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d182      	bne.n	8002b58 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c52:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0xf78>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	430b      	orrs	r3, r1
 8002c74:	497f      	ldr	r1, [pc, #508]	; (8002e74 <HAL_RCC_OscConfig+0xf78>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	fa93 f2a3 	rbit	r2, r3
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ca8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fd fe4c 	bl	800095c <HAL_GetTick>
 8002cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc8:	e009      	b.n	8002cde <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fd fe47 	bl	800095c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e144      	b.n	8002f68 <HAL_RCC_OscConfig+0x106c>
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d02:	601a      	str	r2, [r3, #0]
  return result;
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_OscConfig+0xe2c>
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <HAL_RCC_OscConfig+0xf78>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e027      	b.n	8002d78 <HAL_RCC_OscConfig+0xe7c>
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_RCC_OscConfig+0xf78>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d7c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d8a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	fa92 f1a2 	rbit	r1, r2
 8002d94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d98:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d9c:	6011      	str	r1, [r2, #0]
  return result;
 8002d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002da2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	fab2 f282 	clz	r2, r2
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f042 0220 	orr.w	r2, r2, #32
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f002 021f 	and.w	r2, r2, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d082      	beq.n	8002cca <HAL_RCC_OscConfig+0xdce>
 8002dc4:	e0cf      	b.n	8002f66 <HAL_RCC_OscConfig+0x106a>
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002dce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	fa93 f2a3 	rbit	r2, r3
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dea:	601a      	str	r2, [r3, #0]
  return result;
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002df4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	461a      	mov	r2, r3
 8002e08:	2300      	movs	r3, #0
 8002e0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fd fda6 	bl	800095c <HAL_GetTick>
 8002e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	e009      	b.n	8002e2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fd fda1 	bl	800095c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e09e      	b.n	8002f68 <HAL_RCC_OscConfig+0x106c>
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	fa93 f2a3 	rbit	r2, r3
 8002e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e4e:	601a      	str	r2, [r3, #0]
  return result;
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d104      	bne.n	8002e78 <HAL_RCC_OscConfig+0xf7c>
 8002e6e:	4b01      	ldr	r3, [pc, #4]	; (8002e74 <HAL_RCC_OscConfig+0xf78>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e029      	b.n	8002ec8 <HAL_RCC_OscConfig+0xfcc>
 8002e74:	40021000 	.word	0x40021000
 8002e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_RCC_OscConfig+0x1078>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ecc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ed0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ed4:	6011      	str	r1, [r2, #0]
 8002ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eda:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	fa92 f1a2 	rbit	r1, r2
 8002ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002eec:	6011      	str	r1, [r2, #0]
  return result;
 8002eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f002 021f 	and.w	r2, r2, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d180      	bne.n	8002e16 <HAL_RCC_OscConfig+0xf1a>
 8002f14:	e027      	b.n	8002f66 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e01e      	b.n	8002f68 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_OscConfig+0x1078>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f36:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b09e      	sub	sp, #120	; 0x78
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e162      	b.n	8003256 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f90:	4b90      	ldr	r3, [pc, #576]	; (80031d4 <HAL_RCC_ClockConfig+0x25c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d910      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b8d      	ldr	r3, [pc, #564]	; (80031d4 <HAL_RCC_ClockConfig+0x25c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 0207 	bic.w	r2, r3, #7
 8002fa6:	498b      	ldr	r1, [pc, #556]	; (80031d4 <HAL_RCC_ClockConfig+0x25c>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_RCC_ClockConfig+0x25c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e14a      	b.n	8003256 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b82      	ldr	r3, [pc, #520]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	497f      	ldr	r1, [pc, #508]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80dc 	beq.w	80031a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d13c      	bne.n	800306e <HAL_RCC_ClockConfig+0xf6>
 8002ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <HAL_RCC_ClockConfig+0xa6>
 8003018:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	e00f      	b.n	800303e <HAL_RCC_ClockConfig+0xc6>
 800301e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003022:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	667b      	str	r3, [r7, #100]	; 0x64
 800302c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003030:	663b      	str	r3, [r7, #96]	; 0x60
 8003032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800303a:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003042:	65ba      	str	r2, [r7, #88]	; 0x58
 8003044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003046:	fa92 f2a2 	rbit	r2, r2
 800304a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800304c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800304e:	fab2 f282 	clz	r2, r2
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	f042 0220 	orr.w	r2, r2, #32
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f002 021f 	and.w	r2, r2, #31
 800305e:	2101      	movs	r1, #1
 8003060:	fa01 f202 	lsl.w	r2, r1, r2
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d17b      	bne.n	8003162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0f3      	b.n	8003256 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d13c      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x178>
 8003076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x128>
 800309a:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	e00f      	b.n	80030c0 <HAL_RCC_ClockConfig+0x148>
 80030a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	647b      	str	r3, [r7, #68]	; 0x44
 80030ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030b2:	643b      	str	r3, [r7, #64]	; 0x40
 80030b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030bc:	4b46      	ldr	r3, [pc, #280]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80030c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c8:	fa92 f2a2 	rbit	r2, r2
 80030cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80030ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d0:	fab2 f282 	clz	r2, r2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	f042 0220 	orr.w	r2, r2, #32
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	f002 021f 	and.w	r2, r2, #31
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f202 	lsl.w	r2, r1, r2
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d13a      	bne.n	8003162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b2      	b.n	8003256 <HAL_RCC_ClockConfig+0x2de>
 80030f0:	2302      	movs	r3, #2
 80030f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d102      	bne.n	8003118 <HAL_RCC_ClockConfig+0x1a0>
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	e00d      	b.n	8003134 <HAL_RCC_ClockConfig+0x1bc>
 8003118:	2302      	movs	r3, #2
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
 8003124:	2302      	movs	r3, #2
 8003126:	623b      	str	r3, [r7, #32]
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2202      	movs	r2, #2
 8003136:	61ba      	str	r2, [r7, #24]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	fa92 f2a2 	rbit	r2, r2
 800313e:	617a      	str	r2, [r7, #20]
  return result;
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	fab2 f282 	clz	r2, r2
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	f042 0220 	orr.w	r2, r2, #32
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	f002 021f 	and.w	r2, r2, #31
 8003152:	2101      	movs	r1, #1
 8003154:	fa01 f202 	lsl.w	r2, r1, r2
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e079      	b.n	8003256 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	491a      	ldr	r1, [pc, #104]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fd fbf2 	bl	800095c <HAL_GetTick>
 8003178:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fd fbee 	bl	800095c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e061      	b.n	8003256 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCC_ClockConfig+0x260>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_ClockConfig+0x25c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d214      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_RCC_ClockConfig+0x25c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4906      	ldr	r1, [pc, #24]	; (80031d4 <HAL_RCC_ClockConfig+0x25c>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_RCC_ClockConfig+0x25c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e040      	b.n	8003256 <HAL_RCC_ClockConfig+0x2de>
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCC_ClockConfig+0x2e8>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	491a      	ldr	r1, [pc, #104]	; (8003260 <HAL_RCC_ClockConfig+0x2e8>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x2e8>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4912      	ldr	r1, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x2e8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800321a:	f000 f829 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800321e:	4601      	mov	r1, r0
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_RCC_ClockConfig+0x2e8>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003228:	22f0      	movs	r2, #240	; 0xf0
 800322a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	fa92 f2a2 	rbit	r2, r2
 8003232:	60fa      	str	r2, [r7, #12]
  return result;
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	40d3      	lsrs	r3, r2
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x2ec>)
 8003240:	5cd3      	ldrb	r3, [r2, r3]
 8003242:	fa21 f303 	lsr.w	r3, r1, r3
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_RCC_ClockConfig+0x2f0>)
 8003248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_RCC_ClockConfig+0x2f4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd fb40 	bl	80008d4 <HAL_InitTick>
  
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3778      	adds	r7, #120	; 0x78
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	080047e0 	.word	0x080047e0
 8003268:	20000004 	.word	0x20000004
 800326c:	20000008 	.word	0x20000008

08003270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b08b      	sub	sp, #44	; 0x2c
 8003274:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800328a:	4b29      	ldr	r3, [pc, #164]	; (8003330 <HAL_RCC_GetSysClockFreq+0xc0>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x30>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x36>
 800329e:	e03c      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032a2:	623b      	str	r3, [r7, #32]
      break;
 80032a4:	e03c      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	fa92 f2a2 	rbit	r2, r2
 80032b8:	607a      	str	r2, [r7, #4]
  return result;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	fab2 f282 	clz	r2, r2
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	40d3      	lsrs	r3, r2
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	220f      	movs	r2, #15
 80032d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	fa92 f2a2 	rbit	r2, r2
 80032dc:	60fa      	str	r2, [r7, #12]
  return result;
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	fab2 f282 	clz	r2, r2
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	40d3      	lsrs	r3, r2
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <HAL_RCC_GetSysClockFreq+0xcc>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
 8003308:	e004      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <HAL_RCC_GetSysClockFreq+0xd0>)
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	623b      	str	r3, [r7, #32]
      break;
 8003318:	e002      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_GetSysClockFreq+0xc4>)
 800331c:	623b      	str	r3, [r7, #32]
      break;
 800331e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003320:	6a3b      	ldr	r3, [r7, #32]
}
 8003322:	4618      	mov	r0, r3
 8003324:	372c      	adds	r7, #44	; 0x2c
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	007a1200 	.word	0x007a1200
 8003338:	080047f8 	.word	0x080047f8
 800333c:	08004808 	.word	0x08004808
 8003340:	003d0900 	.word	0x003d0900

08003344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <HAL_RCC_GetHCLKFreq+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003362:	f7ff ffef 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003366:	4601      	mov	r1, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003370:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003374:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	fa92 f2a2 	rbit	r2, r2
 800337c:	603a      	str	r2, [r7, #0]
  return result;
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	fab2 f282 	clz	r2, r2
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	40d3      	lsrs	r3, r2
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <HAL_RCC_GetPCLK1Freq+0x40>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	080047f0 	.word	0x080047f0

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80033a6:	f7ff ffcd 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 80033aa:	4601      	mov	r1, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80033b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	fa92 f2a2 	rbit	r2, r2
 80033c0:	603a      	str	r2, [r7, #0]
  return result;
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	fab2 f282 	clz	r2, r2
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	40d3      	lsrs	r3, r2
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	080047f0 	.word	0x080047f0

080033e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b092      	sub	sp, #72	; 0x48
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80cd 	beq.w	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003408:	4b86      	ldr	r3, [pc, #536]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10e      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b83      	ldr	r3, [pc, #524]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	4a82      	ldr	r2, [pc, #520]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	61d3      	str	r3, [r2, #28]
 8003420:	4b80      	ldr	r3, [pc, #512]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b7d      	ldr	r3, [pc, #500]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d118      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343e:	4b7a      	ldr	r3, [pc, #488]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a79      	ldr	r2, [pc, #484]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003448:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7fd fa87 	bl	800095c <HAL_GetTick>
 800344e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	e008      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003452:	f7fd fa83 	bl	800095c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b64      	cmp	r3, #100	; 0x64
 800345e:	d901      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0db      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003470:	4b6c      	ldr	r3, [pc, #432]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d07d      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800348a:	429a      	cmp	r2, r3
 800348c:	d076      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800348e:	4b65      	ldr	r3, [pc, #404]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b5e      	ldr	r3, [pc, #376]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	461a      	mov	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b55      	ldr	r3, [pc, #340]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	461a      	mov	r2, r3
 80034dc:	2300      	movs	r3, #0
 80034de:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034e0:	4a50      	ldr	r2, [pc, #320]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d045      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fd fa34 	bl	800095c <HAL_GetTick>
 80034f4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fd fa30 	bl	800095c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e086      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800350e:	2302      	movs	r3, #2
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
 800351a:	2302      	movs	r3, #2
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	61fb      	str	r3, [r7, #28]
  return result;
 8003526:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f043 0302 	orr.w	r3, r3, #2
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d102      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	e007      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003542:	2302      	movs	r3, #2
 8003544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	2202      	movs	r2, #2
 8003554:	613a      	str	r2, [r7, #16]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	fa92 f2a2 	rbit	r2, r2
 800355c:	60fa      	str	r2, [r7, #12]
  return result;
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	fab2 f282 	clz	r2, r2
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f002 021f 	and.w	r2, r2, #31
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0bd      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4926      	ldr	r1, [pc, #152]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800358a:	4313      	orrs	r3, r2
 800358c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800358e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003592:	2b01      	cmp	r3, #1
 8003594:	d105      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4a22      	ldr	r2, [pc, #136]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800359c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	491a      	ldr	r1, [pc, #104]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035cc:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f023 0210 	bic.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4912      	ldr	r1, [pc, #72]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	490b      	ldr	r1, [pc, #44]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	4903      	ldr	r1, [pc, #12]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003616:	4313      	orrs	r3, r2
 8003618:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3748      	adds	r7, #72	; 0x48
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	40007000 	.word	0x40007000
 800362c:	10908100 	.word	0x10908100

08003630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e040      	b.n	80036c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd f848 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8b6 	bl	80037e0 <UART_SetConfig>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e022      	b.n	80036c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f9e0 	bl	8003a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800369a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fa67 	bl	8003b90 <UART_CheckIdleState>
 80036c2:	4603      	mov	r3, r0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d178      	bne.n	80037d6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_UART_Transmit+0x24>
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e071      	b.n	80037d8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003702:	f7fd f92b 	bl	800095c <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003720:	d108      	bne.n	8003734 <HAL_UART_Transmit+0x68>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e003      	b.n	800373c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800373c:	e030      	b.n	80037a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2200      	movs	r2, #0
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fac9 	bl	8003ce0 <UART_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e03c      	b.n	80037d8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003770:	b292      	uxth	r2, r2
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	3302      	adds	r3, #2
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e008      	b.n	800378e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	b292      	uxth	r2, r2
 8003786:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3301      	adds	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1c8      	bne.n	800373e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2200      	movs	r2, #0
 80037b4:	2140      	movs	r1, #64	; 0x40
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fa92 	bl	8003ce0 <UART_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e005      	b.n	80037d8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b8a      	ldr	r3, [pc, #552]	; (8003a34 <UART_SetConfig+0x254>)
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	430b      	orrs	r3, r1
 8003816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	430a      	orrs	r2, r1
 8003850:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a78      	ldr	r2, [pc, #480]	; (8003a38 <UART_SetConfig+0x258>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d120      	bne.n	800389e <UART_SetConfig+0xbe>
 800385c:	4b77      	ldr	r3, [pc, #476]	; (8003a3c <UART_SetConfig+0x25c>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b03      	cmp	r3, #3
 8003866:	d817      	bhi.n	8003898 <UART_SetConfig+0xb8>
 8003868:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <UART_SetConfig+0x90>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003881 	.word	0x08003881
 8003874:	0800388d 	.word	0x0800388d
 8003878:	08003893 	.word	0x08003893
 800387c:	08003887 	.word	0x08003887
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e01d      	b.n	80038c2 <UART_SetConfig+0xe2>
 8003886:	2302      	movs	r3, #2
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e01a      	b.n	80038c2 <UART_SetConfig+0xe2>
 800388c:	2304      	movs	r3, #4
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e017      	b.n	80038c2 <UART_SetConfig+0xe2>
 8003892:	2308      	movs	r3, #8
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e014      	b.n	80038c2 <UART_SetConfig+0xe2>
 8003898:	2310      	movs	r3, #16
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e011      	b.n	80038c2 <UART_SetConfig+0xe2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a67      	ldr	r2, [pc, #412]	; (8003a40 <UART_SetConfig+0x260>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d102      	bne.n	80038ae <UART_SetConfig+0xce>
 80038a8:	2300      	movs	r3, #0
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e009      	b.n	80038c2 <UART_SetConfig+0xe2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a64      	ldr	r2, [pc, #400]	; (8003a44 <UART_SetConfig+0x264>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d102      	bne.n	80038be <UART_SetConfig+0xde>
 80038b8:	2300      	movs	r3, #0
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e001      	b.n	80038c2 <UART_SetConfig+0xe2>
 80038be:	2310      	movs	r3, #16
 80038c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ca:	d15a      	bne.n	8003982 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80038cc:	7ffb      	ldrb	r3, [r7, #31]
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d827      	bhi.n	8003922 <UART_SetConfig+0x142>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <UART_SetConfig+0xf8>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	08003905 	.word	0x08003905
 80038e0:	0800390d 	.word	0x0800390d
 80038e4:	08003923 	.word	0x08003923
 80038e8:	08003913 	.word	0x08003913
 80038ec:	08003923 	.word	0x08003923
 80038f0:	08003923 	.word	0x08003923
 80038f4:	08003923 	.word	0x08003923
 80038f8:	0800391b 	.word	0x0800391b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038fc:	f7ff fd2e 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 8003900:	61b8      	str	r0, [r7, #24]
        break;
 8003902:	e013      	b.n	800392c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003904:	f7ff fd4c 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8003908:	61b8      	str	r0, [r7, #24]
        break;
 800390a:	e00f      	b.n	800392c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800390c:	4b4e      	ldr	r3, [pc, #312]	; (8003a48 <UART_SetConfig+0x268>)
 800390e:	61bb      	str	r3, [r7, #24]
        break;
 8003910:	e00c      	b.n	800392c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003912:	f7ff fcad 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8003916:	61b8      	str	r0, [r7, #24]
        break;
 8003918:	e008      	b.n	800392c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391e:	61bb      	str	r3, [r7, #24]
        break;
 8003920:	e004      	b.n	800392c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	77bb      	strb	r3, [r7, #30]
        break;
 800392a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d074      	beq.n	8003a1c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	005a      	lsls	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	441a      	add	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b0f      	cmp	r3, #15
 800394c:	d916      	bls.n	800397c <UART_SetConfig+0x19c>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d212      	bcs.n	800397c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f023 030f 	bic.w	r3, r3, #15
 800395e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	b29b      	uxth	r3, r3
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	b29a      	uxth	r2, r3
 800396c:	89fb      	ldrh	r3, [r7, #14]
 800396e:	4313      	orrs	r3, r2
 8003970:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	89fa      	ldrh	r2, [r7, #14]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	e04f      	b.n	8003a1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	77bb      	strb	r3, [r7, #30]
 8003980:	e04c      	b.n	8003a1c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003982:	7ffb      	ldrb	r3, [r7, #31]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d828      	bhi.n	80039da <UART_SetConfig+0x1fa>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0x1b0>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039b5 	.word	0x080039b5
 8003994:	080039bd 	.word	0x080039bd
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039db 	.word	0x080039db
 80039a0:	080039cb 	.word	0x080039cb
 80039a4:	080039db 	.word	0x080039db
 80039a8:	080039db 	.word	0x080039db
 80039ac:	080039db 	.word	0x080039db
 80039b0:	080039d3 	.word	0x080039d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7ff fcd2 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 80039b8:	61b8      	str	r0, [r7, #24]
        break;
 80039ba:	e013      	b.n	80039e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039bc:	f7ff fcf0 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 80039c0:	61b8      	str	r0, [r7, #24]
        break;
 80039c2:	e00f      	b.n	80039e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <UART_SetConfig+0x268>)
 80039c6:	61bb      	str	r3, [r7, #24]
        break;
 80039c8:	e00c      	b.n	80039e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ca:	f7ff fc51 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 80039ce:	61b8      	str	r0, [r7, #24]
        break;
 80039d0:	e008      	b.n	80039e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d6:	61bb      	str	r3, [r7, #24]
        break;
 80039d8:	e004      	b.n	80039e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	77bb      	strb	r3, [r7, #30]
        break;
 80039e2:	bf00      	nop
    }

    if (pclk != 0U)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	085a      	lsrs	r2, r3, #1
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	441a      	add	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d909      	bls.n	8003a18 <UART_SetConfig+0x238>
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0a:	d205      	bcs.n	8003a18 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	e001      	b.n	8003a1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a28:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	efff69f3 	.word	0xefff69f3
 8003a38:	40013800 	.word	0x40013800
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40004400 	.word	0x40004400
 8003a44:	40004800 	.word	0x40004800
 8003a48:	007a1200 	.word	0x007a1200

08003a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01a      	beq.n	8003b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4a:	d10a      	bne.n	8003b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b098      	sub	sp, #96	; 0x60
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba0:	f7fc fedc 	bl	800095c <HAL_GetTick>
 8003ba4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d12e      	bne.n	8003c12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f88c 	bl	8003ce0 <UART_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d021      	beq.n	8003c12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be2:	653b      	str	r3, [r7, #80]	; 0x50
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bec:	647b      	str	r3, [r7, #68]	; 0x44
 8003bee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e6      	bne.n	8003bce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e062      	b.n	8003cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d149      	bne.n	8003cb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f856 	bl	8003ce0 <UART_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d03c      	beq.n	8003cb4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	623b      	str	r3, [r7, #32]
   return(result);
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30
 8003c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e6      	bne.n	8003c3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c8c:	61fa      	str	r2, [r7, #28]
 8003c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	69b9      	ldr	r1, [r7, #24]
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	617b      	str	r3, [r7, #20]
   return(result);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e011      	b.n	8003cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3758      	adds	r7, #88	; 0x58
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf0:	e049      	b.n	8003d86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d045      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fc fe2f 	bl	800095c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e048      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d031      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d110      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2208      	movs	r2, #8
 8003d36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f838 	bl	8003dae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2208      	movs	r2, #8
 8003d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e029      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d60:	d111      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f81e 	bl	8003dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e00f      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d0a6      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b095      	sub	sp, #84	; 0x54
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e6      	bne.n	8003db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d118      	bne.n	8003e56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e6      	bne.n	8003e24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e6a:	bf00      	nop
 8003e6c:	3754      	adds	r7, #84	; 0x54
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <__errno>:
 8003e78:	4b01      	ldr	r3, [pc, #4]	; (8003e80 <__errno+0x8>)
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000010 	.word	0x20000010

08003e84 <__libc_init_array>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	4d0d      	ldr	r5, [pc, #52]	; (8003ebc <__libc_init_array+0x38>)
 8003e88:	4c0d      	ldr	r4, [pc, #52]	; (8003ec0 <__libc_init_array+0x3c>)
 8003e8a:	1b64      	subs	r4, r4, r5
 8003e8c:	10a4      	asrs	r4, r4, #2
 8003e8e:	2600      	movs	r6, #0
 8003e90:	42a6      	cmp	r6, r4
 8003e92:	d109      	bne.n	8003ea8 <__libc_init_array+0x24>
 8003e94:	4d0b      	ldr	r5, [pc, #44]	; (8003ec4 <__libc_init_array+0x40>)
 8003e96:	4c0c      	ldr	r4, [pc, #48]	; (8003ec8 <__libc_init_array+0x44>)
 8003e98:	f000 fc8e 	bl	80047b8 <_init>
 8003e9c:	1b64      	subs	r4, r4, r5
 8003e9e:	10a4      	asrs	r4, r4, #2
 8003ea0:	2600      	movs	r6, #0
 8003ea2:	42a6      	cmp	r6, r4
 8003ea4:	d105      	bne.n	8003eb2 <__libc_init_array+0x2e>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eac:	4798      	blx	r3
 8003eae:	3601      	adds	r6, #1
 8003eb0:	e7ee      	b.n	8003e90 <__libc_init_array+0xc>
 8003eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb6:	4798      	blx	r3
 8003eb8:	3601      	adds	r6, #1
 8003eba:	e7f2      	b.n	8003ea2 <__libc_init_array+0x1e>
 8003ebc:	0800484c 	.word	0x0800484c
 8003ec0:	0800484c 	.word	0x0800484c
 8003ec4:	0800484c 	.word	0x0800484c
 8003ec8:	08004850 	.word	0x08004850

08003ecc <memset>:
 8003ecc:	4402      	add	r2, r0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <memset+0xa>
 8003ed4:	4770      	bx	lr
 8003ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eda:	e7f9      	b.n	8003ed0 <memset+0x4>

08003edc <siprintf>:
 8003edc:	b40e      	push	{r1, r2, r3}
 8003ede:	b500      	push	{lr}
 8003ee0:	b09c      	sub	sp, #112	; 0x70
 8003ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ee4:	9002      	str	r0, [sp, #8]
 8003ee6:	9006      	str	r0, [sp, #24]
 8003ee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003eec:	4809      	ldr	r0, [pc, #36]	; (8003f14 <siprintf+0x38>)
 8003eee:	9107      	str	r1, [sp, #28]
 8003ef0:	9104      	str	r1, [sp, #16]
 8003ef2:	4909      	ldr	r1, [pc, #36]	; (8003f18 <siprintf+0x3c>)
 8003ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ef8:	9105      	str	r1, [sp, #20]
 8003efa:	6800      	ldr	r0, [r0, #0]
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	a902      	add	r1, sp, #8
 8003f00:	f000 f868 	bl	8003fd4 <_svfiprintf_r>
 8003f04:	9b02      	ldr	r3, [sp, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	b01c      	add	sp, #112	; 0x70
 8003f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f10:	b003      	add	sp, #12
 8003f12:	4770      	bx	lr
 8003f14:	20000010 	.word	0x20000010
 8003f18:	ffff0208 	.word	0xffff0208

08003f1c <__ssputs_r>:
 8003f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	688e      	ldr	r6, [r1, #8]
 8003f22:	429e      	cmp	r6, r3
 8003f24:	4682      	mov	sl, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	4690      	mov	r8, r2
 8003f2a:	461f      	mov	r7, r3
 8003f2c:	d838      	bhi.n	8003fa0 <__ssputs_r+0x84>
 8003f2e:	898a      	ldrh	r2, [r1, #12]
 8003f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f34:	d032      	beq.n	8003f9c <__ssputs_r+0x80>
 8003f36:	6825      	ldr	r5, [r4, #0]
 8003f38:	6909      	ldr	r1, [r1, #16]
 8003f3a:	eba5 0901 	sub.w	r9, r5, r1
 8003f3e:	6965      	ldr	r5, [r4, #20]
 8003f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f48:	3301      	adds	r3, #1
 8003f4a:	444b      	add	r3, r9
 8003f4c:	106d      	asrs	r5, r5, #1
 8003f4e:	429d      	cmp	r5, r3
 8003f50:	bf38      	it	cc
 8003f52:	461d      	movcc	r5, r3
 8003f54:	0553      	lsls	r3, r2, #21
 8003f56:	d531      	bpl.n	8003fbc <__ssputs_r+0xa0>
 8003f58:	4629      	mov	r1, r5
 8003f5a:	f000 fb63 	bl	8004624 <_malloc_r>
 8003f5e:	4606      	mov	r6, r0
 8003f60:	b950      	cbnz	r0, 8003f78 <__ssputs_r+0x5c>
 8003f62:	230c      	movs	r3, #12
 8003f64:	f8ca 3000 	str.w	r3, [sl]
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f6e:	81a3      	strh	r3, [r4, #12]
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f78:	6921      	ldr	r1, [r4, #16]
 8003f7a:	464a      	mov	r2, r9
 8003f7c:	f000 fabe 	bl	80044fc <memcpy>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	6126      	str	r6, [r4, #16]
 8003f8e:	6165      	str	r5, [r4, #20]
 8003f90:	444e      	add	r6, r9
 8003f92:	eba5 0509 	sub.w	r5, r5, r9
 8003f96:	6026      	str	r6, [r4, #0]
 8003f98:	60a5      	str	r5, [r4, #8]
 8003f9a:	463e      	mov	r6, r7
 8003f9c:	42be      	cmp	r6, r7
 8003f9e:	d900      	bls.n	8003fa2 <__ssputs_r+0x86>
 8003fa0:	463e      	mov	r6, r7
 8003fa2:	6820      	ldr	r0, [r4, #0]
 8003fa4:	4632      	mov	r2, r6
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	f000 fab6 	bl	8004518 <memmove>
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	1b9b      	subs	r3, r3, r6
 8003fb0:	60a3      	str	r3, [r4, #8]
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	4433      	add	r3, r6
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	2000      	movs	r0, #0
 8003fba:	e7db      	b.n	8003f74 <__ssputs_r+0x58>
 8003fbc:	462a      	mov	r2, r5
 8003fbe:	f000 fba5 	bl	800470c <_realloc_r>
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d1e1      	bne.n	8003f8c <__ssputs_r+0x70>
 8003fc8:	6921      	ldr	r1, [r4, #16]
 8003fca:	4650      	mov	r0, sl
 8003fcc:	f000 fabe 	bl	800454c <_free_r>
 8003fd0:	e7c7      	b.n	8003f62 <__ssputs_r+0x46>
	...

08003fd4 <_svfiprintf_r>:
 8003fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd8:	4698      	mov	r8, r3
 8003fda:	898b      	ldrh	r3, [r1, #12]
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	b09d      	sub	sp, #116	; 0x74
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	460d      	mov	r5, r1
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	d50e      	bpl.n	8004006 <_svfiprintf_r+0x32>
 8003fe8:	690b      	ldr	r3, [r1, #16]
 8003fea:	b963      	cbnz	r3, 8004006 <_svfiprintf_r+0x32>
 8003fec:	2140      	movs	r1, #64	; 0x40
 8003fee:	f000 fb19 	bl	8004624 <_malloc_r>
 8003ff2:	6028      	str	r0, [r5, #0]
 8003ff4:	6128      	str	r0, [r5, #16]
 8003ff6:	b920      	cbnz	r0, 8004002 <_svfiprintf_r+0x2e>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	e0d1      	b.n	80041a6 <_svfiprintf_r+0x1d2>
 8004002:	2340      	movs	r3, #64	; 0x40
 8004004:	616b      	str	r3, [r5, #20]
 8004006:	2300      	movs	r3, #0
 8004008:	9309      	str	r3, [sp, #36]	; 0x24
 800400a:	2320      	movs	r3, #32
 800400c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004010:	f8cd 800c 	str.w	r8, [sp, #12]
 8004014:	2330      	movs	r3, #48	; 0x30
 8004016:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041c0 <_svfiprintf_r+0x1ec>
 800401a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800401e:	f04f 0901 	mov.w	r9, #1
 8004022:	4623      	mov	r3, r4
 8004024:	469a      	mov	sl, r3
 8004026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800402a:	b10a      	cbz	r2, 8004030 <_svfiprintf_r+0x5c>
 800402c:	2a25      	cmp	r2, #37	; 0x25
 800402e:	d1f9      	bne.n	8004024 <_svfiprintf_r+0x50>
 8004030:	ebba 0b04 	subs.w	fp, sl, r4
 8004034:	d00b      	beq.n	800404e <_svfiprintf_r+0x7a>
 8004036:	465b      	mov	r3, fp
 8004038:	4622      	mov	r2, r4
 800403a:	4629      	mov	r1, r5
 800403c:	4638      	mov	r0, r7
 800403e:	f7ff ff6d 	bl	8003f1c <__ssputs_r>
 8004042:	3001      	adds	r0, #1
 8004044:	f000 80aa 	beq.w	800419c <_svfiprintf_r+0x1c8>
 8004048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800404a:	445a      	add	r2, fp
 800404c:	9209      	str	r2, [sp, #36]	; 0x24
 800404e:	f89a 3000 	ldrb.w	r3, [sl]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80a2 	beq.w	800419c <_svfiprintf_r+0x1c8>
 8004058:	2300      	movs	r3, #0
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004062:	f10a 0a01 	add.w	sl, sl, #1
 8004066:	9304      	str	r3, [sp, #16]
 8004068:	9307      	str	r3, [sp, #28]
 800406a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800406e:	931a      	str	r3, [sp, #104]	; 0x68
 8004070:	4654      	mov	r4, sl
 8004072:	2205      	movs	r2, #5
 8004074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004078:	4851      	ldr	r0, [pc, #324]	; (80041c0 <_svfiprintf_r+0x1ec>)
 800407a:	f7fc f8b1 	bl	80001e0 <memchr>
 800407e:	9a04      	ldr	r2, [sp, #16]
 8004080:	b9d8      	cbnz	r0, 80040ba <_svfiprintf_r+0xe6>
 8004082:	06d0      	lsls	r0, r2, #27
 8004084:	bf44      	itt	mi
 8004086:	2320      	movmi	r3, #32
 8004088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800408c:	0711      	lsls	r1, r2, #28
 800408e:	bf44      	itt	mi
 8004090:	232b      	movmi	r3, #43	; 0x2b
 8004092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004096:	f89a 3000 	ldrb.w	r3, [sl]
 800409a:	2b2a      	cmp	r3, #42	; 0x2a
 800409c:	d015      	beq.n	80040ca <_svfiprintf_r+0xf6>
 800409e:	9a07      	ldr	r2, [sp, #28]
 80040a0:	4654      	mov	r4, sl
 80040a2:	2000      	movs	r0, #0
 80040a4:	f04f 0c0a 	mov.w	ip, #10
 80040a8:	4621      	mov	r1, r4
 80040aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ae:	3b30      	subs	r3, #48	; 0x30
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d94e      	bls.n	8004152 <_svfiprintf_r+0x17e>
 80040b4:	b1b0      	cbz	r0, 80040e4 <_svfiprintf_r+0x110>
 80040b6:	9207      	str	r2, [sp, #28]
 80040b8:	e014      	b.n	80040e4 <_svfiprintf_r+0x110>
 80040ba:	eba0 0308 	sub.w	r3, r0, r8
 80040be:	fa09 f303 	lsl.w	r3, r9, r3
 80040c2:	4313      	orrs	r3, r2
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	46a2      	mov	sl, r4
 80040c8:	e7d2      	b.n	8004070 <_svfiprintf_r+0x9c>
 80040ca:	9b03      	ldr	r3, [sp, #12]
 80040cc:	1d19      	adds	r1, r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	9103      	str	r1, [sp, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bfbb      	ittet	lt
 80040d6:	425b      	neglt	r3, r3
 80040d8:	f042 0202 	orrlt.w	r2, r2, #2
 80040dc:	9307      	strge	r3, [sp, #28]
 80040de:	9307      	strlt	r3, [sp, #28]
 80040e0:	bfb8      	it	lt
 80040e2:	9204      	strlt	r2, [sp, #16]
 80040e4:	7823      	ldrb	r3, [r4, #0]
 80040e6:	2b2e      	cmp	r3, #46	; 0x2e
 80040e8:	d10c      	bne.n	8004104 <_svfiprintf_r+0x130>
 80040ea:	7863      	ldrb	r3, [r4, #1]
 80040ec:	2b2a      	cmp	r3, #42	; 0x2a
 80040ee:	d135      	bne.n	800415c <_svfiprintf_r+0x188>
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	9203      	str	r2, [sp, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bfb8      	it	lt
 80040fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004100:	3402      	adds	r4, #2
 8004102:	9305      	str	r3, [sp, #20]
 8004104:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041d0 <_svfiprintf_r+0x1fc>
 8004108:	7821      	ldrb	r1, [r4, #0]
 800410a:	2203      	movs	r2, #3
 800410c:	4650      	mov	r0, sl
 800410e:	f7fc f867 	bl	80001e0 <memchr>
 8004112:	b140      	cbz	r0, 8004126 <_svfiprintf_r+0x152>
 8004114:	2340      	movs	r3, #64	; 0x40
 8004116:	eba0 000a 	sub.w	r0, r0, sl
 800411a:	fa03 f000 	lsl.w	r0, r3, r0
 800411e:	9b04      	ldr	r3, [sp, #16]
 8004120:	4303      	orrs	r3, r0
 8004122:	3401      	adds	r4, #1
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800412a:	4826      	ldr	r0, [pc, #152]	; (80041c4 <_svfiprintf_r+0x1f0>)
 800412c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004130:	2206      	movs	r2, #6
 8004132:	f7fc f855 	bl	80001e0 <memchr>
 8004136:	2800      	cmp	r0, #0
 8004138:	d038      	beq.n	80041ac <_svfiprintf_r+0x1d8>
 800413a:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <_svfiprintf_r+0x1f4>)
 800413c:	bb1b      	cbnz	r3, 8004186 <_svfiprintf_r+0x1b2>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	3307      	adds	r3, #7
 8004142:	f023 0307 	bic.w	r3, r3, #7
 8004146:	3308      	adds	r3, #8
 8004148:	9303      	str	r3, [sp, #12]
 800414a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800414c:	4433      	add	r3, r6
 800414e:	9309      	str	r3, [sp, #36]	; 0x24
 8004150:	e767      	b.n	8004022 <_svfiprintf_r+0x4e>
 8004152:	fb0c 3202 	mla	r2, ip, r2, r3
 8004156:	460c      	mov	r4, r1
 8004158:	2001      	movs	r0, #1
 800415a:	e7a5      	b.n	80040a8 <_svfiprintf_r+0xd4>
 800415c:	2300      	movs	r3, #0
 800415e:	3401      	adds	r4, #1
 8004160:	9305      	str	r3, [sp, #20]
 8004162:	4619      	mov	r1, r3
 8004164:	f04f 0c0a 	mov.w	ip, #10
 8004168:	4620      	mov	r0, r4
 800416a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800416e:	3a30      	subs	r2, #48	; 0x30
 8004170:	2a09      	cmp	r2, #9
 8004172:	d903      	bls.n	800417c <_svfiprintf_r+0x1a8>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0c5      	beq.n	8004104 <_svfiprintf_r+0x130>
 8004178:	9105      	str	r1, [sp, #20]
 800417a:	e7c3      	b.n	8004104 <_svfiprintf_r+0x130>
 800417c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004180:	4604      	mov	r4, r0
 8004182:	2301      	movs	r3, #1
 8004184:	e7f0      	b.n	8004168 <_svfiprintf_r+0x194>
 8004186:	ab03      	add	r3, sp, #12
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	462a      	mov	r2, r5
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <_svfiprintf_r+0x1f8>)
 800418e:	a904      	add	r1, sp, #16
 8004190:	4638      	mov	r0, r7
 8004192:	f3af 8000 	nop.w
 8004196:	1c42      	adds	r2, r0, #1
 8004198:	4606      	mov	r6, r0
 800419a:	d1d6      	bne.n	800414a <_svfiprintf_r+0x176>
 800419c:	89ab      	ldrh	r3, [r5, #12]
 800419e:	065b      	lsls	r3, r3, #25
 80041a0:	f53f af2c 	bmi.w	8003ffc <_svfiprintf_r+0x28>
 80041a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041a6:	b01d      	add	sp, #116	; 0x74
 80041a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ac:	ab03      	add	r3, sp, #12
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	462a      	mov	r2, r5
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <_svfiprintf_r+0x1f8>)
 80041b4:	a904      	add	r1, sp, #16
 80041b6:	4638      	mov	r0, r7
 80041b8:	f000 f87a 	bl	80042b0 <_printf_i>
 80041bc:	e7eb      	b.n	8004196 <_svfiprintf_r+0x1c2>
 80041be:	bf00      	nop
 80041c0:	08004818 	.word	0x08004818
 80041c4:	08004822 	.word	0x08004822
 80041c8:	00000000 	.word	0x00000000
 80041cc:	08003f1d 	.word	0x08003f1d
 80041d0:	0800481e 	.word	0x0800481e

080041d4 <_printf_common>:
 80041d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d8:	4616      	mov	r6, r2
 80041da:	4699      	mov	r9, r3
 80041dc:	688a      	ldr	r2, [r1, #8]
 80041de:	690b      	ldr	r3, [r1, #16]
 80041e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041e4:	4293      	cmp	r3, r2
 80041e6:	bfb8      	it	lt
 80041e8:	4613      	movlt	r3, r2
 80041ea:	6033      	str	r3, [r6, #0]
 80041ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041f0:	4607      	mov	r7, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	b10a      	cbz	r2, 80041fa <_printf_common+0x26>
 80041f6:	3301      	adds	r3, #1
 80041f8:	6033      	str	r3, [r6, #0]
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	0699      	lsls	r1, r3, #26
 80041fe:	bf42      	ittt	mi
 8004200:	6833      	ldrmi	r3, [r6, #0]
 8004202:	3302      	addmi	r3, #2
 8004204:	6033      	strmi	r3, [r6, #0]
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	f015 0506 	ands.w	r5, r5, #6
 800420c:	d106      	bne.n	800421c <_printf_common+0x48>
 800420e:	f104 0a19 	add.w	sl, r4, #25
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	6832      	ldr	r2, [r6, #0]
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	42ab      	cmp	r3, r5
 800421a:	dc26      	bgt.n	800426a <_printf_common+0x96>
 800421c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004220:	1e13      	subs	r3, r2, #0
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	bf18      	it	ne
 8004226:	2301      	movne	r3, #1
 8004228:	0692      	lsls	r2, r2, #26
 800422a:	d42b      	bmi.n	8004284 <_printf_common+0xb0>
 800422c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004230:	4649      	mov	r1, r9
 8004232:	4638      	mov	r0, r7
 8004234:	47c0      	blx	r8
 8004236:	3001      	adds	r0, #1
 8004238:	d01e      	beq.n	8004278 <_printf_common+0xa4>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	68e5      	ldr	r5, [r4, #12]
 800423e:	6832      	ldr	r2, [r6, #0]
 8004240:	f003 0306 	and.w	r3, r3, #6
 8004244:	2b04      	cmp	r3, #4
 8004246:	bf08      	it	eq
 8004248:	1aad      	subeq	r5, r5, r2
 800424a:	68a3      	ldr	r3, [r4, #8]
 800424c:	6922      	ldr	r2, [r4, #16]
 800424e:	bf0c      	ite	eq
 8004250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004254:	2500      	movne	r5, #0
 8004256:	4293      	cmp	r3, r2
 8004258:	bfc4      	itt	gt
 800425a:	1a9b      	subgt	r3, r3, r2
 800425c:	18ed      	addgt	r5, r5, r3
 800425e:	2600      	movs	r6, #0
 8004260:	341a      	adds	r4, #26
 8004262:	42b5      	cmp	r5, r6
 8004264:	d11a      	bne.n	800429c <_printf_common+0xc8>
 8004266:	2000      	movs	r0, #0
 8004268:	e008      	b.n	800427c <_printf_common+0xa8>
 800426a:	2301      	movs	r3, #1
 800426c:	4652      	mov	r2, sl
 800426e:	4649      	mov	r1, r9
 8004270:	4638      	mov	r0, r7
 8004272:	47c0      	blx	r8
 8004274:	3001      	adds	r0, #1
 8004276:	d103      	bne.n	8004280 <_printf_common+0xac>
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004280:	3501      	adds	r5, #1
 8004282:	e7c6      	b.n	8004212 <_printf_common+0x3e>
 8004284:	18e1      	adds	r1, r4, r3
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	2030      	movs	r0, #48	; 0x30
 800428a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800428e:	4422      	add	r2, r4
 8004290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004298:	3302      	adds	r3, #2
 800429a:	e7c7      	b.n	800422c <_printf_common+0x58>
 800429c:	2301      	movs	r3, #1
 800429e:	4622      	mov	r2, r4
 80042a0:	4649      	mov	r1, r9
 80042a2:	4638      	mov	r0, r7
 80042a4:	47c0      	blx	r8
 80042a6:	3001      	adds	r0, #1
 80042a8:	d0e6      	beq.n	8004278 <_printf_common+0xa4>
 80042aa:	3601      	adds	r6, #1
 80042ac:	e7d9      	b.n	8004262 <_printf_common+0x8e>
	...

080042b0 <_printf_i>:
 80042b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	7e0f      	ldrb	r7, [r1, #24]
 80042b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042b8:	2f78      	cmp	r7, #120	; 0x78
 80042ba:	4691      	mov	r9, r2
 80042bc:	4680      	mov	r8, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	469a      	mov	sl, r3
 80042c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042c6:	d807      	bhi.n	80042d8 <_printf_i+0x28>
 80042c8:	2f62      	cmp	r7, #98	; 0x62
 80042ca:	d80a      	bhi.n	80042e2 <_printf_i+0x32>
 80042cc:	2f00      	cmp	r7, #0
 80042ce:	f000 80d8 	beq.w	8004482 <_printf_i+0x1d2>
 80042d2:	2f58      	cmp	r7, #88	; 0x58
 80042d4:	f000 80a3 	beq.w	800441e <_printf_i+0x16e>
 80042d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042e0:	e03a      	b.n	8004358 <_printf_i+0xa8>
 80042e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042e6:	2b15      	cmp	r3, #21
 80042e8:	d8f6      	bhi.n	80042d8 <_printf_i+0x28>
 80042ea:	a101      	add	r1, pc, #4	; (adr r1, 80042f0 <_printf_i+0x40>)
 80042ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042f0:	08004349 	.word	0x08004349
 80042f4:	0800435d 	.word	0x0800435d
 80042f8:	080042d9 	.word	0x080042d9
 80042fc:	080042d9 	.word	0x080042d9
 8004300:	080042d9 	.word	0x080042d9
 8004304:	080042d9 	.word	0x080042d9
 8004308:	0800435d 	.word	0x0800435d
 800430c:	080042d9 	.word	0x080042d9
 8004310:	080042d9 	.word	0x080042d9
 8004314:	080042d9 	.word	0x080042d9
 8004318:	080042d9 	.word	0x080042d9
 800431c:	08004469 	.word	0x08004469
 8004320:	0800438d 	.word	0x0800438d
 8004324:	0800444b 	.word	0x0800444b
 8004328:	080042d9 	.word	0x080042d9
 800432c:	080042d9 	.word	0x080042d9
 8004330:	0800448b 	.word	0x0800448b
 8004334:	080042d9 	.word	0x080042d9
 8004338:	0800438d 	.word	0x0800438d
 800433c:	080042d9 	.word	0x080042d9
 8004340:	080042d9 	.word	0x080042d9
 8004344:	08004453 	.word	0x08004453
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	1d1a      	adds	r2, r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	602a      	str	r2, [r5, #0]
 8004350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004358:	2301      	movs	r3, #1
 800435a:	e0a3      	b.n	80044a4 <_printf_i+0x1f4>
 800435c:	6820      	ldr	r0, [r4, #0]
 800435e:	6829      	ldr	r1, [r5, #0]
 8004360:	0606      	lsls	r6, r0, #24
 8004362:	f101 0304 	add.w	r3, r1, #4
 8004366:	d50a      	bpl.n	800437e <_printf_i+0xce>
 8004368:	680e      	ldr	r6, [r1, #0]
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	2e00      	cmp	r6, #0
 800436e:	da03      	bge.n	8004378 <_printf_i+0xc8>
 8004370:	232d      	movs	r3, #45	; 0x2d
 8004372:	4276      	negs	r6, r6
 8004374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004378:	485e      	ldr	r0, [pc, #376]	; (80044f4 <_printf_i+0x244>)
 800437a:	230a      	movs	r3, #10
 800437c:	e019      	b.n	80043b2 <_printf_i+0x102>
 800437e:	680e      	ldr	r6, [r1, #0]
 8004380:	602b      	str	r3, [r5, #0]
 8004382:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004386:	bf18      	it	ne
 8004388:	b236      	sxthne	r6, r6
 800438a:	e7ef      	b.n	800436c <_printf_i+0xbc>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	6820      	ldr	r0, [r4, #0]
 8004390:	1d19      	adds	r1, r3, #4
 8004392:	6029      	str	r1, [r5, #0]
 8004394:	0601      	lsls	r1, r0, #24
 8004396:	d501      	bpl.n	800439c <_printf_i+0xec>
 8004398:	681e      	ldr	r6, [r3, #0]
 800439a:	e002      	b.n	80043a2 <_printf_i+0xf2>
 800439c:	0646      	lsls	r6, r0, #25
 800439e:	d5fb      	bpl.n	8004398 <_printf_i+0xe8>
 80043a0:	881e      	ldrh	r6, [r3, #0]
 80043a2:	4854      	ldr	r0, [pc, #336]	; (80044f4 <_printf_i+0x244>)
 80043a4:	2f6f      	cmp	r7, #111	; 0x6f
 80043a6:	bf0c      	ite	eq
 80043a8:	2308      	moveq	r3, #8
 80043aa:	230a      	movne	r3, #10
 80043ac:	2100      	movs	r1, #0
 80043ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043b2:	6865      	ldr	r5, [r4, #4]
 80043b4:	60a5      	str	r5, [r4, #8]
 80043b6:	2d00      	cmp	r5, #0
 80043b8:	bfa2      	ittt	ge
 80043ba:	6821      	ldrge	r1, [r4, #0]
 80043bc:	f021 0104 	bicge.w	r1, r1, #4
 80043c0:	6021      	strge	r1, [r4, #0]
 80043c2:	b90e      	cbnz	r6, 80043c8 <_printf_i+0x118>
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	d04d      	beq.n	8004464 <_printf_i+0x1b4>
 80043c8:	4615      	mov	r5, r2
 80043ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ce:	fb03 6711 	mls	r7, r3, r1, r6
 80043d2:	5dc7      	ldrb	r7, [r0, r7]
 80043d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043d8:	4637      	mov	r7, r6
 80043da:	42bb      	cmp	r3, r7
 80043dc:	460e      	mov	r6, r1
 80043de:	d9f4      	bls.n	80043ca <_printf_i+0x11a>
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d10b      	bne.n	80043fc <_printf_i+0x14c>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	07de      	lsls	r6, r3, #31
 80043e8:	d508      	bpl.n	80043fc <_printf_i+0x14c>
 80043ea:	6923      	ldr	r3, [r4, #16]
 80043ec:	6861      	ldr	r1, [r4, #4]
 80043ee:	4299      	cmp	r1, r3
 80043f0:	bfde      	ittt	le
 80043f2:	2330      	movle	r3, #48	; 0x30
 80043f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043fc:	1b52      	subs	r2, r2, r5
 80043fe:	6122      	str	r2, [r4, #16]
 8004400:	f8cd a000 	str.w	sl, [sp]
 8004404:	464b      	mov	r3, r9
 8004406:	aa03      	add	r2, sp, #12
 8004408:	4621      	mov	r1, r4
 800440a:	4640      	mov	r0, r8
 800440c:	f7ff fee2 	bl	80041d4 <_printf_common>
 8004410:	3001      	adds	r0, #1
 8004412:	d14c      	bne.n	80044ae <_printf_i+0x1fe>
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	b004      	add	sp, #16
 800441a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441e:	4835      	ldr	r0, [pc, #212]	; (80044f4 <_printf_i+0x244>)
 8004420:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004424:	6829      	ldr	r1, [r5, #0]
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f851 6b04 	ldr.w	r6, [r1], #4
 800442c:	6029      	str	r1, [r5, #0]
 800442e:	061d      	lsls	r5, r3, #24
 8004430:	d514      	bpl.n	800445c <_printf_i+0x1ac>
 8004432:	07df      	lsls	r7, r3, #31
 8004434:	bf44      	itt	mi
 8004436:	f043 0320 	orrmi.w	r3, r3, #32
 800443a:	6023      	strmi	r3, [r4, #0]
 800443c:	b91e      	cbnz	r6, 8004446 <_printf_i+0x196>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	f023 0320 	bic.w	r3, r3, #32
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	2310      	movs	r3, #16
 8004448:	e7b0      	b.n	80043ac <_printf_i+0xfc>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	f043 0320 	orr.w	r3, r3, #32
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	2378      	movs	r3, #120	; 0x78
 8004454:	4828      	ldr	r0, [pc, #160]	; (80044f8 <_printf_i+0x248>)
 8004456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800445a:	e7e3      	b.n	8004424 <_printf_i+0x174>
 800445c:	0659      	lsls	r1, r3, #25
 800445e:	bf48      	it	mi
 8004460:	b2b6      	uxthmi	r6, r6
 8004462:	e7e6      	b.n	8004432 <_printf_i+0x182>
 8004464:	4615      	mov	r5, r2
 8004466:	e7bb      	b.n	80043e0 <_printf_i+0x130>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	6826      	ldr	r6, [r4, #0]
 800446c:	6961      	ldr	r1, [r4, #20]
 800446e:	1d18      	adds	r0, r3, #4
 8004470:	6028      	str	r0, [r5, #0]
 8004472:	0635      	lsls	r5, r6, #24
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	d501      	bpl.n	800447c <_printf_i+0x1cc>
 8004478:	6019      	str	r1, [r3, #0]
 800447a:	e002      	b.n	8004482 <_printf_i+0x1d2>
 800447c:	0670      	lsls	r0, r6, #25
 800447e:	d5fb      	bpl.n	8004478 <_printf_i+0x1c8>
 8004480:	8019      	strh	r1, [r3, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	6123      	str	r3, [r4, #16]
 8004486:	4615      	mov	r5, r2
 8004488:	e7ba      	b.n	8004400 <_printf_i+0x150>
 800448a:	682b      	ldr	r3, [r5, #0]
 800448c:	1d1a      	adds	r2, r3, #4
 800448e:	602a      	str	r2, [r5, #0]
 8004490:	681d      	ldr	r5, [r3, #0]
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	2100      	movs	r1, #0
 8004496:	4628      	mov	r0, r5
 8004498:	f7fb fea2 	bl	80001e0 <memchr>
 800449c:	b108      	cbz	r0, 80044a2 <_printf_i+0x1f2>
 800449e:	1b40      	subs	r0, r0, r5
 80044a0:	6060      	str	r0, [r4, #4]
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	6123      	str	r3, [r4, #16]
 80044a6:	2300      	movs	r3, #0
 80044a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ac:	e7a8      	b.n	8004400 <_printf_i+0x150>
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	462a      	mov	r2, r5
 80044b2:	4649      	mov	r1, r9
 80044b4:	4640      	mov	r0, r8
 80044b6:	47d0      	blx	sl
 80044b8:	3001      	adds	r0, #1
 80044ba:	d0ab      	beq.n	8004414 <_printf_i+0x164>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	079b      	lsls	r3, r3, #30
 80044c0:	d413      	bmi.n	80044ea <_printf_i+0x23a>
 80044c2:	68e0      	ldr	r0, [r4, #12]
 80044c4:	9b03      	ldr	r3, [sp, #12]
 80044c6:	4298      	cmp	r0, r3
 80044c8:	bfb8      	it	lt
 80044ca:	4618      	movlt	r0, r3
 80044cc:	e7a4      	b.n	8004418 <_printf_i+0x168>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4632      	mov	r2, r6
 80044d2:	4649      	mov	r1, r9
 80044d4:	4640      	mov	r0, r8
 80044d6:	47d0      	blx	sl
 80044d8:	3001      	adds	r0, #1
 80044da:	d09b      	beq.n	8004414 <_printf_i+0x164>
 80044dc:	3501      	adds	r5, #1
 80044de:	68e3      	ldr	r3, [r4, #12]
 80044e0:	9903      	ldr	r1, [sp, #12]
 80044e2:	1a5b      	subs	r3, r3, r1
 80044e4:	42ab      	cmp	r3, r5
 80044e6:	dcf2      	bgt.n	80044ce <_printf_i+0x21e>
 80044e8:	e7eb      	b.n	80044c2 <_printf_i+0x212>
 80044ea:	2500      	movs	r5, #0
 80044ec:	f104 0619 	add.w	r6, r4, #25
 80044f0:	e7f5      	b.n	80044de <_printf_i+0x22e>
 80044f2:	bf00      	nop
 80044f4:	08004829 	.word	0x08004829
 80044f8:	0800483a 	.word	0x0800483a

080044fc <memcpy>:
 80044fc:	440a      	add	r2, r1
 80044fe:	4291      	cmp	r1, r2
 8004500:	f100 33ff 	add.w	r3, r0, #4294967295
 8004504:	d100      	bne.n	8004508 <memcpy+0xc>
 8004506:	4770      	bx	lr
 8004508:	b510      	push	{r4, lr}
 800450a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800450e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004512:	4291      	cmp	r1, r2
 8004514:	d1f9      	bne.n	800450a <memcpy+0xe>
 8004516:	bd10      	pop	{r4, pc}

08004518 <memmove>:
 8004518:	4288      	cmp	r0, r1
 800451a:	b510      	push	{r4, lr}
 800451c:	eb01 0402 	add.w	r4, r1, r2
 8004520:	d902      	bls.n	8004528 <memmove+0x10>
 8004522:	4284      	cmp	r4, r0
 8004524:	4623      	mov	r3, r4
 8004526:	d807      	bhi.n	8004538 <memmove+0x20>
 8004528:	1e43      	subs	r3, r0, #1
 800452a:	42a1      	cmp	r1, r4
 800452c:	d008      	beq.n	8004540 <memmove+0x28>
 800452e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004532:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004536:	e7f8      	b.n	800452a <memmove+0x12>
 8004538:	4402      	add	r2, r0
 800453a:	4601      	mov	r1, r0
 800453c:	428a      	cmp	r2, r1
 800453e:	d100      	bne.n	8004542 <memmove+0x2a>
 8004540:	bd10      	pop	{r4, pc}
 8004542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004546:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800454a:	e7f7      	b.n	800453c <memmove+0x24>

0800454c <_free_r>:
 800454c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800454e:	2900      	cmp	r1, #0
 8004550:	d044      	beq.n	80045dc <_free_r+0x90>
 8004552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004556:	9001      	str	r0, [sp, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f1a1 0404 	sub.w	r4, r1, #4
 800455e:	bfb8      	it	lt
 8004560:	18e4      	addlt	r4, r4, r3
 8004562:	f000 f913 	bl	800478c <__malloc_lock>
 8004566:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <_free_r+0x94>)
 8004568:	9801      	ldr	r0, [sp, #4]
 800456a:	6813      	ldr	r3, [r2, #0]
 800456c:	b933      	cbnz	r3, 800457c <_free_r+0x30>
 800456e:	6063      	str	r3, [r4, #4]
 8004570:	6014      	str	r4, [r2, #0]
 8004572:	b003      	add	sp, #12
 8004574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004578:	f000 b90e 	b.w	8004798 <__malloc_unlock>
 800457c:	42a3      	cmp	r3, r4
 800457e:	d908      	bls.n	8004592 <_free_r+0x46>
 8004580:	6825      	ldr	r5, [r4, #0]
 8004582:	1961      	adds	r1, r4, r5
 8004584:	428b      	cmp	r3, r1
 8004586:	bf01      	itttt	eq
 8004588:	6819      	ldreq	r1, [r3, #0]
 800458a:	685b      	ldreq	r3, [r3, #4]
 800458c:	1949      	addeq	r1, r1, r5
 800458e:	6021      	streq	r1, [r4, #0]
 8004590:	e7ed      	b.n	800456e <_free_r+0x22>
 8004592:	461a      	mov	r2, r3
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b10b      	cbz	r3, 800459c <_free_r+0x50>
 8004598:	42a3      	cmp	r3, r4
 800459a:	d9fa      	bls.n	8004592 <_free_r+0x46>
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	1855      	adds	r5, r2, r1
 80045a0:	42a5      	cmp	r5, r4
 80045a2:	d10b      	bne.n	80045bc <_free_r+0x70>
 80045a4:	6824      	ldr	r4, [r4, #0]
 80045a6:	4421      	add	r1, r4
 80045a8:	1854      	adds	r4, r2, r1
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	6011      	str	r1, [r2, #0]
 80045ae:	d1e0      	bne.n	8004572 <_free_r+0x26>
 80045b0:	681c      	ldr	r4, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	6053      	str	r3, [r2, #4]
 80045b6:	4421      	add	r1, r4
 80045b8:	6011      	str	r1, [r2, #0]
 80045ba:	e7da      	b.n	8004572 <_free_r+0x26>
 80045bc:	d902      	bls.n	80045c4 <_free_r+0x78>
 80045be:	230c      	movs	r3, #12
 80045c0:	6003      	str	r3, [r0, #0]
 80045c2:	e7d6      	b.n	8004572 <_free_r+0x26>
 80045c4:	6825      	ldr	r5, [r4, #0]
 80045c6:	1961      	adds	r1, r4, r5
 80045c8:	428b      	cmp	r3, r1
 80045ca:	bf04      	itt	eq
 80045cc:	6819      	ldreq	r1, [r3, #0]
 80045ce:	685b      	ldreq	r3, [r3, #4]
 80045d0:	6063      	str	r3, [r4, #4]
 80045d2:	bf04      	itt	eq
 80045d4:	1949      	addeq	r1, r1, r5
 80045d6:	6021      	streq	r1, [r4, #0]
 80045d8:	6054      	str	r4, [r2, #4]
 80045da:	e7ca      	b.n	8004572 <_free_r+0x26>
 80045dc:	b003      	add	sp, #12
 80045de:	bd30      	pop	{r4, r5, pc}
 80045e0:	2000019c 	.word	0x2000019c

080045e4 <sbrk_aligned>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	4e0e      	ldr	r6, [pc, #56]	; (8004620 <sbrk_aligned+0x3c>)
 80045e8:	460c      	mov	r4, r1
 80045ea:	6831      	ldr	r1, [r6, #0]
 80045ec:	4605      	mov	r5, r0
 80045ee:	b911      	cbnz	r1, 80045f6 <sbrk_aligned+0x12>
 80045f0:	f000 f8bc 	bl	800476c <_sbrk_r>
 80045f4:	6030      	str	r0, [r6, #0]
 80045f6:	4621      	mov	r1, r4
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 f8b7 	bl	800476c <_sbrk_r>
 80045fe:	1c43      	adds	r3, r0, #1
 8004600:	d00a      	beq.n	8004618 <sbrk_aligned+0x34>
 8004602:	1cc4      	adds	r4, r0, #3
 8004604:	f024 0403 	bic.w	r4, r4, #3
 8004608:	42a0      	cmp	r0, r4
 800460a:	d007      	beq.n	800461c <sbrk_aligned+0x38>
 800460c:	1a21      	subs	r1, r4, r0
 800460e:	4628      	mov	r0, r5
 8004610:	f000 f8ac 	bl	800476c <_sbrk_r>
 8004614:	3001      	adds	r0, #1
 8004616:	d101      	bne.n	800461c <sbrk_aligned+0x38>
 8004618:	f04f 34ff 	mov.w	r4, #4294967295
 800461c:	4620      	mov	r0, r4
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	200001a0 	.word	0x200001a0

08004624 <_malloc_r>:
 8004624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004628:	1ccd      	adds	r5, r1, #3
 800462a:	f025 0503 	bic.w	r5, r5, #3
 800462e:	3508      	adds	r5, #8
 8004630:	2d0c      	cmp	r5, #12
 8004632:	bf38      	it	cc
 8004634:	250c      	movcc	r5, #12
 8004636:	2d00      	cmp	r5, #0
 8004638:	4607      	mov	r7, r0
 800463a:	db01      	blt.n	8004640 <_malloc_r+0x1c>
 800463c:	42a9      	cmp	r1, r5
 800463e:	d905      	bls.n	800464c <_malloc_r+0x28>
 8004640:	230c      	movs	r3, #12
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	2600      	movs	r6, #0
 8004646:	4630      	mov	r0, r6
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800464c:	4e2e      	ldr	r6, [pc, #184]	; (8004708 <_malloc_r+0xe4>)
 800464e:	f000 f89d 	bl	800478c <__malloc_lock>
 8004652:	6833      	ldr	r3, [r6, #0]
 8004654:	461c      	mov	r4, r3
 8004656:	bb34      	cbnz	r4, 80046a6 <_malloc_r+0x82>
 8004658:	4629      	mov	r1, r5
 800465a:	4638      	mov	r0, r7
 800465c:	f7ff ffc2 	bl	80045e4 <sbrk_aligned>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	4604      	mov	r4, r0
 8004664:	d14d      	bne.n	8004702 <_malloc_r+0xde>
 8004666:	6834      	ldr	r4, [r6, #0]
 8004668:	4626      	mov	r6, r4
 800466a:	2e00      	cmp	r6, #0
 800466c:	d140      	bne.n	80046f0 <_malloc_r+0xcc>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	4631      	mov	r1, r6
 8004672:	4638      	mov	r0, r7
 8004674:	eb04 0803 	add.w	r8, r4, r3
 8004678:	f000 f878 	bl	800476c <_sbrk_r>
 800467c:	4580      	cmp	r8, r0
 800467e:	d13a      	bne.n	80046f6 <_malloc_r+0xd2>
 8004680:	6821      	ldr	r1, [r4, #0]
 8004682:	3503      	adds	r5, #3
 8004684:	1a6d      	subs	r5, r5, r1
 8004686:	f025 0503 	bic.w	r5, r5, #3
 800468a:	3508      	adds	r5, #8
 800468c:	2d0c      	cmp	r5, #12
 800468e:	bf38      	it	cc
 8004690:	250c      	movcc	r5, #12
 8004692:	4629      	mov	r1, r5
 8004694:	4638      	mov	r0, r7
 8004696:	f7ff ffa5 	bl	80045e4 <sbrk_aligned>
 800469a:	3001      	adds	r0, #1
 800469c:	d02b      	beq.n	80046f6 <_malloc_r+0xd2>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	442b      	add	r3, r5
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	e00e      	b.n	80046c4 <_malloc_r+0xa0>
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	1b52      	subs	r2, r2, r5
 80046aa:	d41e      	bmi.n	80046ea <_malloc_r+0xc6>
 80046ac:	2a0b      	cmp	r2, #11
 80046ae:	d916      	bls.n	80046de <_malloc_r+0xba>
 80046b0:	1961      	adds	r1, r4, r5
 80046b2:	42a3      	cmp	r3, r4
 80046b4:	6025      	str	r5, [r4, #0]
 80046b6:	bf18      	it	ne
 80046b8:	6059      	strne	r1, [r3, #4]
 80046ba:	6863      	ldr	r3, [r4, #4]
 80046bc:	bf08      	it	eq
 80046be:	6031      	streq	r1, [r6, #0]
 80046c0:	5162      	str	r2, [r4, r5]
 80046c2:	604b      	str	r3, [r1, #4]
 80046c4:	4638      	mov	r0, r7
 80046c6:	f104 060b 	add.w	r6, r4, #11
 80046ca:	f000 f865 	bl	8004798 <__malloc_unlock>
 80046ce:	f026 0607 	bic.w	r6, r6, #7
 80046d2:	1d23      	adds	r3, r4, #4
 80046d4:	1af2      	subs	r2, r6, r3
 80046d6:	d0b6      	beq.n	8004646 <_malloc_r+0x22>
 80046d8:	1b9b      	subs	r3, r3, r6
 80046da:	50a3      	str	r3, [r4, r2]
 80046dc:	e7b3      	b.n	8004646 <_malloc_r+0x22>
 80046de:	6862      	ldr	r2, [r4, #4]
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	bf0c      	ite	eq
 80046e4:	6032      	streq	r2, [r6, #0]
 80046e6:	605a      	strne	r2, [r3, #4]
 80046e8:	e7ec      	b.n	80046c4 <_malloc_r+0xa0>
 80046ea:	4623      	mov	r3, r4
 80046ec:	6864      	ldr	r4, [r4, #4]
 80046ee:	e7b2      	b.n	8004656 <_malloc_r+0x32>
 80046f0:	4634      	mov	r4, r6
 80046f2:	6876      	ldr	r6, [r6, #4]
 80046f4:	e7b9      	b.n	800466a <_malloc_r+0x46>
 80046f6:	230c      	movs	r3, #12
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	4638      	mov	r0, r7
 80046fc:	f000 f84c 	bl	8004798 <__malloc_unlock>
 8004700:	e7a1      	b.n	8004646 <_malloc_r+0x22>
 8004702:	6025      	str	r5, [r4, #0]
 8004704:	e7de      	b.n	80046c4 <_malloc_r+0xa0>
 8004706:	bf00      	nop
 8004708:	2000019c 	.word	0x2000019c

0800470c <_realloc_r>:
 800470c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004710:	4680      	mov	r8, r0
 8004712:	4614      	mov	r4, r2
 8004714:	460e      	mov	r6, r1
 8004716:	b921      	cbnz	r1, 8004722 <_realloc_r+0x16>
 8004718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800471c:	4611      	mov	r1, r2
 800471e:	f7ff bf81 	b.w	8004624 <_malloc_r>
 8004722:	b92a      	cbnz	r2, 8004730 <_realloc_r+0x24>
 8004724:	f7ff ff12 	bl	800454c <_free_r>
 8004728:	4625      	mov	r5, r4
 800472a:	4628      	mov	r0, r5
 800472c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004730:	f000 f838 	bl	80047a4 <_malloc_usable_size_r>
 8004734:	4284      	cmp	r4, r0
 8004736:	4607      	mov	r7, r0
 8004738:	d802      	bhi.n	8004740 <_realloc_r+0x34>
 800473a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800473e:	d812      	bhi.n	8004766 <_realloc_r+0x5a>
 8004740:	4621      	mov	r1, r4
 8004742:	4640      	mov	r0, r8
 8004744:	f7ff ff6e 	bl	8004624 <_malloc_r>
 8004748:	4605      	mov	r5, r0
 800474a:	2800      	cmp	r0, #0
 800474c:	d0ed      	beq.n	800472a <_realloc_r+0x1e>
 800474e:	42bc      	cmp	r4, r7
 8004750:	4622      	mov	r2, r4
 8004752:	4631      	mov	r1, r6
 8004754:	bf28      	it	cs
 8004756:	463a      	movcs	r2, r7
 8004758:	f7ff fed0 	bl	80044fc <memcpy>
 800475c:	4631      	mov	r1, r6
 800475e:	4640      	mov	r0, r8
 8004760:	f7ff fef4 	bl	800454c <_free_r>
 8004764:	e7e1      	b.n	800472a <_realloc_r+0x1e>
 8004766:	4635      	mov	r5, r6
 8004768:	e7df      	b.n	800472a <_realloc_r+0x1e>
	...

0800476c <_sbrk_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4d06      	ldr	r5, [pc, #24]	; (8004788 <_sbrk_r+0x1c>)
 8004770:	2300      	movs	r3, #0
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	f7fc f824 	bl	80007c4 <_sbrk>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_sbrk_r+0x1a>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_sbrk_r+0x1a>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	200001a4 	.word	0x200001a4

0800478c <__malloc_lock>:
 800478c:	4801      	ldr	r0, [pc, #4]	; (8004794 <__malloc_lock+0x8>)
 800478e:	f000 b811 	b.w	80047b4 <__retarget_lock_acquire_recursive>
 8004792:	bf00      	nop
 8004794:	200001a8 	.word	0x200001a8

08004798 <__malloc_unlock>:
 8004798:	4801      	ldr	r0, [pc, #4]	; (80047a0 <__malloc_unlock+0x8>)
 800479a:	f000 b80c 	b.w	80047b6 <__retarget_lock_release_recursive>
 800479e:	bf00      	nop
 80047a0:	200001a8 	.word	0x200001a8

080047a4 <_malloc_usable_size_r>:
 80047a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047a8:	1f18      	subs	r0, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bfbc      	itt	lt
 80047ae:	580b      	ldrlt	r3, [r1, r0]
 80047b0:	18c0      	addlt	r0, r0, r3
 80047b2:	4770      	bx	lr

080047b4 <__retarget_lock_acquire_recursive>:
 80047b4:	4770      	bx	lr

080047b6 <__retarget_lock_release_recursive>:
 80047b6:	4770      	bx	lr

080047b8 <_init>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr

080047c4 <_fini>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr
