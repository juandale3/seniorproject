
F303k8_watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007e38  08007e38  00017e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008244  08008244  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008244  08008244  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008244  08008244  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008248  08008248  00018248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800824c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000334  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001331a  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000264e  00000000  00000000  00033565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001228  00000000  00000000  00035bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e49  00000000  00000000  00036de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cdf7  00000000  00000000  00037c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001687c  00000000  00000000  00054a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a9882  00000000  00000000  0006b29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005eec  00000000  00000000  00114b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0011aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e20 	.word	0x08007e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007e20 	.word	0x08007e20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fdb3 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f863 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f999 	bl	8000eec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f967 	bl	8000e8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bbe:	f000 f8af 	bl	8000d20 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bc2:	f000 f8ed 	bl	8000da0 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000bc6:	f000 f929 	bl	8000e1c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8000bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bce:	f000 fe09 	bl	80017e4 <HAL_Delay>
  sprintf(message,"Starts\r\n");
 8000bd2:	4922      	ldr	r1, [pc, #136]	; (8000c5c <main+0xb4>)
 8000bd4:	4822      	ldr	r0, [pc, #136]	; (8000c60 <main+0xb8>)
 8000bd6:	f004 ffc5 	bl	8005b64 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) message, 9, HAL_MAX_DELAY);
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	2209      	movs	r2, #9
 8000be0:	491f      	ldr	r1, [pc, #124]	; (8000c60 <main+0xb8>)
 8000be2:	4820      	ldr	r0, [pc, #128]	; (8000c64 <main+0xbc>)
 8000be4:	f003 fec0 	bl	8004968 <HAL_UART_Transmit>

  getTime();
 8000be8:	f000 faee 	bl	80011c8 <getTime>
  sprintf(buffer, "Date:\t%02d:%02d:%02d\r\n\n", time.month, time.dayOfMonth, time.year);
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <main+0xc0>)
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <main+0xc0>)
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <main+0xc0>)
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	491a      	ldr	r1, [pc, #104]	; (8000c6c <main+0xc4>)
 8000c02:	481b      	ldr	r0, [pc, #108]	; (8000c70 <main+0xc8>)
 8000c04:	f004 ffae 	bl	8005b64 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) buffer, 30, HAL_MAX_DELAY);
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	221e      	movs	r2, #30
 8000c0e:	4918      	ldr	r1, [pc, #96]	; (8000c70 <main+0xc8>)
 8000c10:	4814      	ldr	r0, [pc, #80]	; (8000c64 <main+0xbc>)
 8000c12:	f003 fea9 	bl	8004968 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(powerMode == 0){
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <main+0xcc>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <main+0x7a>
		  sleepMode();
 8000c1e:	f000 fa1f 	bl	8001060 <sleepMode>
	  }
	  getTime();
 8000c22:	f000 fad1 	bl	80011c8 <getTime>
	  sprintf(buffer, "Time:\t%02d:%02d:%02d\r\n", time.hour, time.minutes, time.seconds);
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <main+0xc0>)
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <main+0xc0>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <main+0xc0>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	490f      	ldr	r1, [pc, #60]	; (8000c78 <main+0xd0>)
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <main+0xc8>)
 8000c3e:	f004 ff91 	bl	8005b64 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) buffer, 30, HAL_MAX_DELAY);
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	221e      	movs	r2, #30
 8000c48:	4909      	ldr	r1, [pc, #36]	; (8000c70 <main+0xc8>)
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <main+0xbc>)
 8000c4c:	f003 fe8c 	bl	8004968 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f000 fdc6 	bl	80017e4 <HAL_Delay>
	  if(powerMode == 0){
 8000c58:	e7dd      	b.n	8000c16 <main+0x6e>
 8000c5a:	bf00      	nop
 8000c5c:	08007e38 	.word	0x08007e38
 8000c60:	20000380 	.word	0x20000380
 8000c64:	200002f8 	.word	0x200002f8
 8000c68:	200003b0 	.word	0x200003b0
 8000c6c:	08007e44 	.word	0x08007e44
 8000c70:	20000390 	.word	0x20000390
 8000c74:	20000000 	.word	0x20000000
 8000c78:	08007e5c 	.word	0x08007e5c

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b096      	sub	sp, #88	; 0x58
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c86:	2228      	movs	r2, #40	; 0x28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f004 ffcd 	bl	8005c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 fe97 	bl	80029f8 <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cd0:	f000 faca 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fec0 	bl	8003a74 <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cfa:	f000 fab5 	bl	8001268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 f8e9 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d14:	f000 faa8 	bl	8001268 <Error_Handler>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3758      	adds	r7, #88	; 0x58
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <MX_I2C1_Init+0x78>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <MX_I2C1_Init+0x7c>)
 8000d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d5c:	f001 f822 	bl	8001da4 <HAL_I2C_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d66:	f000 fa7f 	bl	8001268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d6e:	f001 fd8f 	bl	8002890 <HAL_I2CEx_ConfigAnalogFilter>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d78:	f000 fa76 	bl	8001268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_I2C1_Init+0x74>)
 8000d80:	f001 fdd1 	bl	8002926 <HAL_I2CEx_ConfigDigitalFilter>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d8a:	f000 fa6d 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001f4 	.word	0x200001f4
 8000d98:	40005400 	.word	0x40005400
 8000d9c:	2000090e 	.word	0x2000090e

08000da0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <MX_SPI1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dee:	2207      	movs	r2, #7
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000e00:	f003 f994 	bl	800412c <HAL_SPI_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 fa2d 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000248 	.word	0x20000248
 8000e18:	40013000 	.word	0x40013000

08000e1c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_TIM6_Init+0x68>)
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <MX_TIM6_Init+0x6c>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000 - 1;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_TIM6_Init+0x68>)
 8000e34:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000e38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_TIM6_Init+0x68>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM_6_PERIOD;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_TIM6_Init+0x68>)
 8000e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_TIM6_Init+0x68>)
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e4e:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_TIM6_Init+0x68>)
 8000e50:	f003 fa0f 	bl	8004272 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e5a:	f000 fa05 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_TIM6_Init+0x68>)
 8000e6c:	f003 fca2 	bl	80047b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000e76:	f000 f9f7 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200002ac 	.word	0x200002ac
 8000e88:	40001000 	.word	0x40001000

08000e8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <MX_USART2_UART_Init+0x5c>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000e98:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART2_UART_Init+0x58>)
 8000ed0:	f003 fcfc 	bl	80048cc <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 f9c5 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200002f8 	.word	0x200002f8
 8000ee8:	40004400 	.word	0x40004400

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	6153      	str	r3, [r2, #20]
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_GPIO_Init+0x94>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f54:	2302      	movs	r3, #2
 8000f56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f000 fd95 	bl	8001a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f000 fd59 	bl	8001a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f70:	2006      	movs	r0, #6
 8000f72:	f000 fd72 	bl	8001a5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d13e      	bne.n	8001012 <HAL_GPIO_EXTI_Callback+0x8e>
		if(powerMode == 0){	// Sleep Mode
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <HAL_GPIO_EXTI_Callback+0x98>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d117      	bne.n	8000fcc <HAL_GPIO_EXTI_Callback+0x48>
			HAL_ResumeTick();
 8000f9c:	f000 fc56 	bl	800184c <HAL_ResumeTick>
			powerMode = 1;	// Turn On
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HAL_GPIO_EXTI_Callback+0x98>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]

			sprintf(message,"Awaken!\r\n");
 8000fa6:	491e      	ldr	r1, [pc, #120]	; (8001020 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000fa8:	481e      	ldr	r0, [pc, #120]	; (8001024 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000faa:	f004 fddb 	bl	8005b64 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *) message, 9, HAL_MAX_DELAY);
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	2209      	movs	r2, #9
 8000fb4:	491b      	ldr	r1, [pc, #108]	; (8001024 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fb6:	481c      	ldr	r0, [pc, #112]	; (8001028 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fb8:	f003 fcd6 	bl	8004968 <HAL_UART_Transmit>

			__HAL_TIM_SET_COUNTER(&htim6, 0);	// Resets Timer
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);	// Timer counts down to sleep again
 8000fc4:	4819      	ldr	r0, [pc, #100]	; (800102c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000fc6:	f003 f9ab 	bl	8004320 <HAL_TIM_Base_Start_IT>
			sprintf(message,"Time Set\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t *) message, 10, HAL_MAX_DELAY);
		}

	}
}
 8000fca:	e022      	b.n	8001012 <HAL_GPIO_EXTI_Callback+0x8e>
		}else if(powerMode == 1 ){
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_GPIO_EXTI_Callback+0x98>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d103      	bne.n	8000fdc <HAL_GPIO_EXTI_Callback+0x58>
			powerMode = 0;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_GPIO_EXTI_Callback+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
}
 8000fda:	e01a      	b.n	8001012 <HAL_GPIO_EXTI_Callback+0x8e>
		}else if(powerMode == 3){
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_GPIO_EXTI_Callback+0x98>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d116      	bne.n	8001012 <HAL_GPIO_EXTI_Callback+0x8e>
			setTime(0, 10, 18, 7, 17, 2, 24);
 8000fe4:	2318      	movs	r3, #24
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	2311      	movs	r3, #17
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	2212      	movs	r2, #18
 8000ff4:	210a      	movs	r1, #10
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f896 	bl	8001128 <setTime>
			sprintf(message,"Time Set\r\n");
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <HAL_GPIO_EXTI_Callback+0xac>)
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001000:	f004 fdb0 	bl	8005b64 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *) message, 10, HAL_MAX_DELAY);
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	220a      	movs	r2, #10
 800100a:	4906      	ldr	r1, [pc, #24]	; (8001024 <HAL_GPIO_EXTI_Callback+0xa0>)
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <HAL_GPIO_EXTI_Callback+0xa4>)
 800100e:	f003 fcab 	bl	8004968 <HAL_UART_Transmit>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000000 	.word	0x20000000
 8001020:	08007e74 	.word	0x08007e74
 8001024:	20000380 	.word	0x20000380
 8001028:	200002f8 	.word	0x200002f8
 800102c:	200002ac 	.word	0x200002ac
 8001030:	08007e80 	.word	0x08007e80

08001034 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d102      	bne.n	800104a <HAL_TIM_PeriodElapsedCallback+0x16>
		powerMode = 0;	// Sleeps
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
//		sprintf(message,"Timer Sleep!\r\n");
//		HAL_UART_Transmit(&huart2, (uint8_t *) message, 14, HAL_MAX_DELAY);

	}
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200002ac 	.word	0x200002ac
 800105c:	20000000 	.word	0x20000000

08001060 <sleepMode>:
void sleepMode(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	powerMode = 0;	// Sleeps
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <sleepMode+0x38>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
	//HAL_TIM_Base_Stop_IT(&htim6);	// Stops Sleep Timer

	sprintf(message,"Sleep!\r\n");
 800106a:	490c      	ldr	r1, [pc, #48]	; (800109c <sleepMode+0x3c>)
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <sleepMode+0x40>)
 800106e:	f004 fd79 	bl	8005b64 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) message, 9, HAL_MAX_DELAY);
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2209      	movs	r2, #9
 8001078:	4909      	ldr	r1, [pc, #36]	; (80010a0 <sleepMode+0x40>)
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <sleepMode+0x44>)
 800107c:	f003 fc74 	bl	8004968 <HAL_UART_Transmit>

	HAL_TIM_Base_Stop_IT(&htim6);
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <sleepMode+0x48>)
 8001082:	f003 f9a9 	bl	80043d8 <HAL_TIM_Base_Stop_IT>

	HAL_SuspendTick();
 8001086:	f000 fbd1 	bl	800182c <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800108a:	2101      	movs	r1, #1
 800108c:	2000      	movs	r0, #0
 800108e:	f001 fc97 	bl	80029c0 <HAL_PWR_EnterSLEEPMode>

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000000 	.word	0x20000000
 800109c:	08007e8c 	.word	0x08007e8c
 80010a0:	20000380 	.word	0x20000380
 80010a4:	200002f8 	.word	0x200002f8
 80010a8:	200002ac 	.word	0x200002ac

080010ac <decToBcd>:
uint8_t decToBcd(int val){
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <decToBcd+0x48>)
 80010b8:	fb82 1203 	smull	r1, r2, r2, r3
 80010bc:	1092      	asrs	r2, r2, #2
 80010be:	17db      	asrs	r3, r3, #31
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	b2d8      	uxtb	r0, r3
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <decToBcd+0x48>)
 80010cc:	fb83 1302 	smull	r1, r3, r3, r2
 80010d0:	1099      	asrs	r1, r3, #2
 80010d2:	17d3      	asrs	r3, r2, #31
 80010d4:	1ac9      	subs	r1, r1, r3
 80010d6:	460b      	mov	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	1ad1      	subs	r1, r2, r3
 80010e0:	b2cb      	uxtb	r3, r1
 80010e2:	4403      	add	r3, r0
 80010e4:	b2db      	uxtb	r3, r3
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	66666667 	.word	0x66666667

080010f8 <bcdToDec>:
int bcdToDec(uint8_t val){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10) + (val%16));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	461a      	mov	r2, r3
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	4413      	add	r3, r2
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <setTime>:
void setTime(uint8_t seconds, uint8_t minutes, uint8_t hour, uint8_t dayOfWeek, uint8_t dayOfMonth, uint8_t month, uint8_t year){
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af04      	add	r7, sp, #16
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4623      	mov	r3, r4
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	4603      	mov	r3, r0
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	460b      	mov	r3, r1
 8001140:	717b      	strb	r3, [r7, #5]
 8001142:	4613      	mov	r3, r2
 8001144:	713b      	strb	r3, [r7, #4]
	uint8_t timeArr[7];
	timeArr[0] = decToBcd(seconds);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffaf 	bl	80010ac <decToBcd>
 800114e:	4603      	mov	r3, r0
 8001150:	723b      	strb	r3, [r7, #8]
	timeArr[1] = decToBcd(minutes);
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffa9 	bl	80010ac <decToBcd>
 800115a:	4603      	mov	r3, r0
 800115c:	727b      	strb	r3, [r7, #9]
	timeArr[2] = decToBcd(hour);
 800115e:	797b      	ldrb	r3, [r7, #5]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffa3 	bl	80010ac <decToBcd>
 8001166:	4603      	mov	r3, r0
 8001168:	72bb      	strb	r3, [r7, #10]
	timeArr[3] = decToBcd(dayOfWeek);
 800116a:	793b      	ldrb	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff9d 	bl	80010ac <decToBcd>
 8001172:	4603      	mov	r3, r0
 8001174:	72fb      	strb	r3, [r7, #11]
	timeArr[4] = decToBcd(dayOfMonth);
 8001176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff96 	bl	80010ac <decToBcd>
 8001180:	4603      	mov	r3, r0
 8001182:	733b      	strb	r3, [r7, #12]
	timeArr[5] = decToBcd(month);
 8001184:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff8f 	bl	80010ac <decToBcd>
 800118e:	4603      	mov	r3, r0
 8001190:	737b      	strb	r3, [r7, #13]
	timeArr[6] = decToBcd(year);
 8001192:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff88 	bl	80010ac <decToBcd>
 800119c:	4603      	mov	r3, r0
 800119e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, timeArr, 7, HAL_MAX_DELAY);
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2307      	movs	r3, #7
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	2200      	movs	r2, #0
 80011b4:	21d0      	movs	r1, #208	; 0xd0
 80011b6:	4803      	ldr	r0, [pc, #12]	; (80011c4 <setTime+0x9c>)
 80011b8:	f000 fe84 	bl	8001ec4 <HAL_I2C_Mem_Write>
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	200001f4 	.word	0x200001f4

080011c8 <getTime>:
void getTime(void){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af04      	add	r7, sp, #16
	uint8_t timeArr[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, timeArr, 7, HAL_MAX_DELAY);
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2307      	movs	r3, #7
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	463b      	mov	r3, r7
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	2200      	movs	r2, #0
 80011e0:	21d0      	movs	r1, #208	; 0xd0
 80011e2:	481f      	ldr	r0, [pc, #124]	; (8001260 <getTime+0x98>)
 80011e4:	f000 ff82 	bl	80020ec <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(timeArr[0]);
 80011e8:	783b      	ldrb	r3, [r7, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff84 	bl	80010f8 <bcdToDec>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <getTime+0x9c>)
 80011f6:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(timeArr[1]);
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff7c 	bl	80010f8 <bcdToDec>
 8001200:	4603      	mov	r3, r0
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <getTime+0x9c>)
 8001206:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(timeArr[2]);
 8001208:	78bb      	ldrb	r3, [r7, #2]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff74 	bl	80010f8 <bcdToDec>
 8001210:	4603      	mov	r3, r0
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <getTime+0x9c>)
 8001216:	709a      	strb	r2, [r3, #2]
	time.dayOfWeek = bcdToDec(timeArr[3]);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff6c 	bl	80010f8 <bcdToDec>
 8001220:	4603      	mov	r3, r0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <getTime+0x9c>)
 8001226:	70da      	strb	r2, [r3, #3]
	time.dayOfMonth = bcdToDec(timeArr[4]);
 8001228:	793b      	ldrb	r3, [r7, #4]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff64 	bl	80010f8 <bcdToDec>
 8001230:	4603      	mov	r3, r0
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <getTime+0x9c>)
 8001236:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(timeArr[5]);
 8001238:	797b      	ldrb	r3, [r7, #5]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff5c 	bl	80010f8 <bcdToDec>
 8001240:	4603      	mov	r3, r0
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <getTime+0x9c>)
 8001246:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(timeArr[6]);
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff54 	bl	80010f8 <bcdToDec>
 8001250:	4603      	mov	r3, r0
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <getTime+0x9c>)
 8001256:	719a      	strb	r2, [r3, #6]
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200001f4 	.word	0x200001f4
 8001264:	200003b0 	.word	0x200003b0

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x44>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_MspInit+0x44>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x44>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x44>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x44>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_I2C_MspInit+0x7c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d127      	bne.n	800132e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_I2C_MspInit+0x80>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <HAL_I2C_MspInit+0x80>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6153      	str	r3, [r2, #20]
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_I2C_MspInit+0x80>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012f6:	23c0      	movs	r3, #192	; 0xc0
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fa:	2312      	movs	r3, #18
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001306:	2304      	movs	r3, #4
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_I2C_MspInit+0x84>)
 8001312:	f000 fbbd 	bl	8001a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_I2C_MspInit+0x80>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_I2C_MspInit+0x80>)
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_I2C_MspInit+0x80>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40005400 	.word	0x40005400
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400

08001344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_SPI_MspInit+0x7c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d128      	bne.n	80013b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_SPI_MspInit+0x80>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_SPI_MspInit+0x80>)
 800136c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_SPI_MspInit+0x80>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_SPI_MspInit+0x80>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_SPI_MspInit+0x80>)
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	6153      	str	r3, [r2, #20]
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_SPI_MspInit+0x80>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001396:	23a0      	movs	r3, #160	; 0xa0
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a6:	2305      	movs	r3, #5
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f000 fb6c 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40013000 	.word	0x40013000
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <HAL_TIM_Base_MspInit+0x44>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d113      	bne.n	8001402 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_TIM_Base_MspInit+0x48>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_TIM_Base_MspInit+0x48>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_TIM_Base_MspInit+0x48>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2036      	movs	r0, #54	; 0x36
 80013f8:	f000 fb13 	bl	8001a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80013fc:	2036      	movs	r0, #54	; 0x36
 80013fe:	f000 fb2c 	bl	8001a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40001000 	.word	0x40001000
 8001410:	40021000 	.word	0x40021000

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_UART_MspInit+0x80>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d129      	bne.n	800148a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_UART_MspInit+0x84>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_UART_MspInit+0x84>)
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_UART_MspInit+0x84>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_UART_MspInit+0x84>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_UART_MspInit+0x84>)
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	6153      	str	r3, [r2, #20]
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_UART_MspInit+0x84>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001466:	f248 0304 	movw	r3, #32772	; 0x8004
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001478:	2307      	movs	r3, #7
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f000 fb03 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40004400 	.word	0x40004400
 8001498:	40021000 	.word	0x40021000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f000 f95c 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f000 fc3d 	bl	8001d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM6_DAC1_IRQHandler+0x10>)
 8001506:	f002 ff96 	bl	8004436 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002ac 	.word	0x200002ac

08001514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_kill>:

int _kill(int pid, int sig)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800152e:	f004 fbcf 	bl	8005cd0 <__errno>
 8001532:	4603      	mov	r3, r0
 8001534:	2216      	movs	r2, #22
 8001536:	601a      	str	r2, [r3, #0]
  return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_exit>:

void _exit (int status)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffe7 	bl	8001524 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001556:	e7fe      	b.n	8001556 <_exit+0x12>

08001558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e00a      	b.n	8001580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156a:	f3af 8000 	nop.w
 800156e:	4601      	mov	r1, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	b2ca      	uxtb	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf0      	blt.n	800156a <_read+0x12>
  }

  return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e009      	b.n	80015b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf1      	blt.n	80015a4 <_write+0x12>
  }
  return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_close>:

int _close(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f2:	605a      	str	r2, [r3, #4]
  return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_isatty>:

int _isatty(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f004 fb34 	bl	8005cd0 <__errno>
 8001668:	4603      	mov	r3, r0
 800166a:	220c      	movs	r2, #12
 800166c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20003000 	.word	0x20003000
 8001694:	00000400 	.word	0x00000400
 8001698:	200003b8 	.word	0x200003b8
 800169c:	20000510 	.word	0x20000510

080016a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c8:	f7ff ffea 	bl	80016a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	; (8001704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <LoopForever+0xe>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	; (8001710 <LoopForever+0x16>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f004 faf3 	bl	8005cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016f6:	f7ff fa57 	bl	8000ba8 <main>

080016fa <LoopForever>:

LoopForever:
    b LoopForever
 80016fa:	e7fe      	b.n	80016fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016fc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001708:	0800824c 	.word	0x0800824c
  ldr r2, =_sbss
 800170c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001710:	2000050c 	.word	0x2000050c

08001714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC1_2_IRQHandler>
	...

08001718 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_Init+0x28>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_Init+0x28>)
 8001722:	f043 0310 	orr.w	r3, r3, #16
 8001726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 f96f 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f808 	bl	8001744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001734:	f7ff fd9e 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40022000 	.word	0x40022000

08001744 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x54>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x58>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f987 	bl	8001a76 <HAL_SYSTICK_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00e      	b.n	8001790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80a      	bhi.n	800178e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f000 f94f 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_InitTick+0x5c>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000004 	.word	0x20000004
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	200003bc 	.word	0x200003bc

080017cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200003bc 	.word	0x200003bc

080017e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff ffee 	bl	80017cc <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffde 	bl	80017cc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000000c 	.word	0x2000000c

0800182c <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_SuspendTick+0x1c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_SuspendTick+0x1c>)
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	6013      	str	r3, [r2, #0]
                                                   
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_ResumeTick+0x1c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_ResumeTick+0x1c>)
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	6013      	str	r3, [r2, #0]
  
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <__NVIC_EnableIRQ+0x38>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff8e 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff29 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff3e 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff8e 	bl	8001960 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5d 	bl	800190c <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff31 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffa2 	bl	80019c8 <SysTick_Config>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9e:	e14e      	b.n	8001d3e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8140 	beq.w	8001d38 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d005      	beq.n	8001ad0 <HAL_GPIO_Init+0x40>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d130      	bne.n	8001b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b06:	2201      	movs	r2, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	f003 0201 	and.w	r2, r3, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d017      	beq.n	8001b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d123      	bne.n	8001bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	6939      	ldr	r1, [r7, #16]
 8001bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0203 	and.w	r2, r3, #3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 809a 	beq.w	8001d38 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c04:	4b55      	ldr	r3, [pc, #340]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a54      	ldr	r2, [pc, #336]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c1c:	4a50      	ldr	r2, [pc, #320]	; (8001d60 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c46:	d013      	beq.n	8001c70 <HAL_GPIO_Init+0x1e0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <HAL_GPIO_Init+0x2d4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00d      	beq.n	8001c6c <HAL_GPIO_Init+0x1dc>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a45      	ldr	r2, [pc, #276]	; (8001d68 <HAL_GPIO_Init+0x2d8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_Init+0x1d8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <HAL_GPIO_Init+0x2dc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_GPIO_Init+0x1d4>
 8001c60:	2303      	movs	r3, #3
 8001c62:	e006      	b.n	8001c72 <HAL_GPIO_Init+0x1e2>
 8001c64:	2305      	movs	r3, #5
 8001c66:	e004      	b.n	8001c72 <HAL_GPIO_Init+0x1e2>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e002      	b.n	8001c72 <HAL_GPIO_Init+0x1e2>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_GPIO_Init+0x1e2>
 8001c70:	2300      	movs	r3, #0
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	f002 0203 	and.w	r2, r2, #3
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	4093      	lsls	r3, r2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c82:	4937      	ldr	r1, [pc, #220]	; (8001d60 <HAL_GPIO_Init+0x2d0>)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cb4:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cde:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d32:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f47f aea9 	bne.w	8001aa0 <HAL_GPIO_Init+0x10>
  }
}
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010000 	.word	0x40010000
 8001d64:	48000400 	.word	0x48000400
 8001d68:	48000800 	.word	0x48000800
 8001d6c:	48000c00 	.word	0x48000c00
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f8f6 	bl	8000f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40010400 	.word	0x40010400

08001da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e081      	b.n	8001eba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fa76 	bl	80012bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e006      	b.n	8001e2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d104      	bne.n	8001e3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69d9      	ldr	r1, [r3, #28]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	f040 80f9 	bne.w	80020de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_I2C_Mem_Write+0x34>
 8001ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0ed      	b.n	80020e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Mem_Write+0x4e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e0e6      	b.n	80020e0 <HAL_I2C_Mem_Write+0x21c>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1a:	f7ff fc57 	bl	80017cc <HAL_GetTick>
 8001f1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2319      	movs	r3, #25
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fac3 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d1      	b.n	80020e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2221      	movs	r2, #33	; 0x21
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f64:	88f8      	ldrh	r0, [r7, #6]
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4603      	mov	r3, r0
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f9d3 	bl	8002320 <I2C_RequestMemoryWrite>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0a9      	b.n	80020e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	d90e      	bls.n	8001fb4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 fc3d 	bl	800282c <I2C_TransferConfig>
 8001fb2:	e00f      	b.n	8001fd4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	8979      	ldrh	r1, [r7, #10]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fc2c 	bl	800282c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fabc 	bl	8002556 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e07b      	b.n	80020e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d034      	beq.n	800208c <HAL_I2C_Mem_Write+0x1c8>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b00      	cmp	r3, #0
 8002028:	d130      	bne.n	800208c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	2200      	movs	r2, #0
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fa3f 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e04d      	b.n	80020e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	2bff      	cmp	r3, #255	; 0xff
 800204c:	d90e      	bls.n	800206c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	22ff      	movs	r2, #255	; 0xff
 8002052:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	b2da      	uxtb	r2, r3
 800205a:	8979      	ldrh	r1, [r7, #10]
 800205c:	2300      	movs	r3, #0
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 fbe1 	bl	800282c <I2C_TransferConfig>
 800206a:	e00f      	b.n	800208c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	b2da      	uxtb	r2, r3
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	2300      	movs	r3, #0
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fbd0 	bl	800282c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d19e      	bne.n	8001fd4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 faa2 	bl	80025e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e01a      	b.n	80020e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2220      	movs	r2, #32
 80020b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_I2C_Mem_Write+0x224>)
 80020be:	400b      	ands	r3, r1
 80020c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	fe00e800 	.word	0xfe00e800

080020ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	4608      	mov	r0, r1
 80020f6:	4611      	mov	r1, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	817b      	strh	r3, [r7, #10]
 80020fe:	460b      	mov	r3, r1
 8002100:	813b      	strh	r3, [r7, #8]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	f040 80fd 	bne.w	800230e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_I2C_Mem_Read+0x34>
 800211a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002126:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0f1      	b.n	8002310 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_I2C_Mem_Read+0x4e>
 8002136:	2302      	movs	r3, #2
 8002138:	e0ea      	b.n	8002310 <HAL_I2C_Mem_Read+0x224>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002142:	f7ff fb43 	bl	80017cc <HAL_GetTick>
 8002146:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2319      	movs	r3, #25
 800214e:	2201      	movs	r2, #1
 8002150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f9af 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0d5      	b.n	8002310 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2222      	movs	r2, #34	; 0x22
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a3a      	ldr	r2, [r7, #32]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800218c:	88f8      	ldrh	r0, [r7, #6]
 800218e:	893a      	ldrh	r2, [r7, #8]
 8002190:	8979      	ldrh	r1, [r7, #10]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4603      	mov	r3, r0
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f913 	bl	80023c8 <I2C_RequestMemoryRead>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0ad      	b.n	8002310 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2bff      	cmp	r3, #255	; 0xff
 80021bc:	d90e      	bls.n	80021dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	22ff      	movs	r2, #255	; 0xff
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	8979      	ldrh	r1, [r7, #10]
 80021cc:	4b52      	ldr	r3, [pc, #328]	; (8002318 <HAL_I2C_Mem_Read+0x22c>)
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fb29 	bl	800282c <I2C_TransferConfig>
 80021da:	e00f      	b.n	80021fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	8979      	ldrh	r1, [r7, #10]
 80021ee:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_I2C_Mem_Read+0x22c>)
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fb18 	bl	800282c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	2200      	movs	r2, #0
 8002204:	2104      	movs	r1, #4
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f956 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e07c      	b.n	8002310 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d034      	beq.n	80022bc <HAL_I2C_Mem_Read+0x1d0>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	d130      	bne.n	80022bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	2200      	movs	r2, #0
 8002262:	2180      	movs	r1, #128	; 0x80
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f927 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e04d      	b.n	8002310 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	2bff      	cmp	r3, #255	; 0xff
 800227c:	d90e      	bls.n	800229c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	22ff      	movs	r2, #255	; 0xff
 8002282:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	b2da      	uxtb	r2, r3
 800228a:	8979      	ldrh	r1, [r7, #10]
 800228c:	2300      	movs	r3, #0
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fac9 	bl	800282c <I2C_TransferConfig>
 800229a:	e00f      	b.n	80022bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	8979      	ldrh	r1, [r7, #10]
 80022ae:	2300      	movs	r3, #0
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fab8 	bl	800282c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d19a      	bne.n	80021fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f98a 	bl	80025e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e01a      	b.n	8002310 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2220      	movs	r2, #32
 80022e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_I2C_Mem_Read+0x230>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
  }
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	80002400 	.word	0x80002400
 800231c:	fe00e800 	.word	0xfe00e800

08002320 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	817b      	strh	r3, [r7, #10]
 8002332:	460b      	mov	r3, r1
 8002334:	813b      	strh	r3, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	8979      	ldrh	r1, [r7, #10]
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <I2C_RequestMemoryWrite+0xa4>)
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fa6f 	bl	800282c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	69b9      	ldr	r1, [r7, #24]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f8ff 	bl	8002556 <I2C_WaitOnTXISFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e02c      	b.n	80023bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002368:	893b      	ldrh	r3, [r7, #8]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
 8002372:	e015      	b.n	80023a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002374:	893b      	ldrh	r3, [r7, #8]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	b29b      	uxth	r3, r3
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	69b9      	ldr	r1, [r7, #24]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f8e5 	bl	8002556 <I2C_WaitOnTXISFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e012      	b.n	80023bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002396:	893b      	ldrh	r3, [r7, #8]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f884 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	80002000 	.word	0x80002000

080023c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	4608      	mov	r0, r1
 80023d2:	4611      	mov	r1, r2
 80023d4:	461a      	mov	r2, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	817b      	strh	r3, [r7, #10]
 80023da:	460b      	mov	r3, r1
 80023dc:	813b      	strh	r3, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	8979      	ldrh	r1, [r7, #10]
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <I2C_RequestMemoryRead+0xa4>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2300      	movs	r3, #0
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fa1c 	bl	800282c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f8ac 	bl	8002556 <I2C_WaitOnTXISFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e02c      	b.n	8002462 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800240e:	893b      	ldrh	r3, [r7, #8]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
 8002418:	e015      	b.n	8002446 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800241a:	893b      	ldrh	r3, [r7, #8]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	b29b      	uxth	r3, r3
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f892 	bl	8002556 <I2C_WaitOnTXISFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e012      	b.n	8002462 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800243c:	893b      	ldrh	r3, [r7, #8]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2200      	movs	r2, #0
 800244e:	2140      	movs	r1, #64	; 0x40
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f831 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	80002000 	.word	0x80002000

08002470 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d103      	bne.n	800248e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d007      	beq.n	80024ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	619a      	str	r2, [r3, #24]
  }
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c8:	e031      	b.n	800252e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d02d      	beq.n	800252e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7ff f97b 	bl	80017cc <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d122      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	429a      	cmp	r2, r3
 8002504:	d113      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f043 0220 	orr.w	r2, r3, #32
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	429a      	cmp	r2, r3
 800254a:	d0be      	beq.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002562:	e033      	b.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f87f 	bl	800266c <I2C_IsErrorOccurred>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e031      	b.n	80025dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d025      	beq.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002580:	f7ff f924 	bl	80017cc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	d302      	bcc.n	8002596 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11a      	bne.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d013      	beq.n	80025cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e007      	b.n	80025dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d1c4      	bne.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f0:	e02f      	b.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f838 	bl	800266c <I2C_IsErrorOccurred>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e02d      	b.n	8002662 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7ff f8e1 	bl	80017cc <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d11a      	bne.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d013      	beq.n	8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e007      	b.n	8002662 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b20      	cmp	r3, #32
 800265e:	d1c8      	bne.n	80025f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d068      	beq.n	800276a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026a0:	e049      	b.n	8002736 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d045      	beq.n	8002736 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026aa:	f7ff f88f 	bl	80017cc <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <I2C_IsErrorOccurred+0x54>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d13a      	bne.n	8002736 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	d121      	bne.n	8002728 <I2C_IsErrorOccurred+0xbc>
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ea:	d01d      	beq.n	8002728 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d01a      	beq.n	8002728 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002700:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002702:	f7ff f863 	bl	80017cc <HAL_GetTick>
 8002706:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002708:	e00e      	b.n	8002728 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800270a:	f7ff f85f 	bl	80017cc <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b19      	cmp	r3, #25
 8002716:	d907      	bls.n	8002728 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f043 0320 	orr.w	r3, r3, #32
 800271e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002726:	e006      	b.n	8002736 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b20      	cmp	r3, #32
 8002734:	d1e9      	bne.n	800270a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b20      	cmp	r3, #32
 8002742:	d003      	beq.n	800274c <I2C_IsErrorOccurred+0xe0>
 8002744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0aa      	beq.n	80026a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800274c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2220      	movs	r2, #32
 800275a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800278c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00b      	beq.n	80027d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01c      	beq.n	800281a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff fe45 	bl	8002470 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <I2C_IsErrorOccurred+0x1bc>)
 80027f2:	400b      	ands	r3, r1
 80027f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800281a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800281e:	4618      	mov	r0, r3
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	fe00e800 	.word	0xfe00e800

0800282c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	817b      	strh	r3, [r7, #10]
 800283a:	4613      	mov	r3, r2
 800283c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002844:	7a7b      	ldrb	r3, [r7, #9]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800284c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	4313      	orrs	r3, r2
 8002856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800285a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	0d5b      	lsrs	r3, r3, #21
 8002866:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <I2C_TransferConfig+0x60>)
 800286c:	430b      	orrs	r3, r1
 800286e:	43db      	mvns	r3, r3
 8002870:	ea02 0103 	and.w	r1, r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	03ff63ff 	.word	0x03ff63ff

08002890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d138      	bne.n	8002918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e032      	b.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2224      	movs	r2, #36	; 0x24
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b20      	cmp	r3, #32
 800293a:	d139      	bne.n	80029b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002946:	2302      	movs	r3, #2
 8002948:	e033      	b.n	80029b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002978:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_PWR_EnterSLEEPMode+0x34>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_PWR_EnterSLEEPMode+0x34>)
 80029d2:	f023 0304 	bic.w	r3, r3, #4
 80029d6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80029de:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80029e0:	e002      	b.n	80029e8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80029e2:	bf40      	sev
    __WFE();
 80029e4:	bf20      	wfe
    __WFE();
 80029e6:	bf20      	wfe
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a08:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f001 b823 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 817d 	beq.w	8002d2e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a34:	4bbc      	ldr	r3, [pc, #752]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a40:	4bb9      	ldr	r3, [pc, #740]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d15c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x10e>
 8002a4c:	4bb6      	ldr	r3, [pc, #728]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d155      	bne.n	8002b06 <HAL_RCC_OscConfig+0x10e>
 8002a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HAL_RCC_OscConfig+0x94>
 8002a86:	4ba8      	ldr	r3, [pc, #672]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	e015      	b.n	8002ab8 <HAL_RCC_OscConfig+0xc0>
 8002a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a90:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002aa8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ab4:	4b9c      	ldr	r3, [pc, #624]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002abc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ac0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ac4:	fa92 f2a2 	rbit	r2, r2
 8002ac8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002acc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f042 0220 	orr.w	r2, r2, #32
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f002 021f 	and.w	r2, r2, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 811f 	beq.w	8002d2c <HAL_RCC_OscConfig+0x334>
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 8116 	bne.w	8002d2c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f000 bfaf 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x12e>
 8002b18:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a82      	ldr	r2, [pc, #520]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e036      	b.n	8002b94 <HAL_RCC_OscConfig+0x19c>
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x158>
 8002b36:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a7b      	ldr	r2, [pc, #492]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a78      	ldr	r2, [pc, #480]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e021      	b.n	8002b94 <HAL_RCC_OscConfig+0x19c>
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x184>
 8002b62:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a70      	ldr	r2, [pc, #448]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b6e      	ldr	r3, [pc, #440]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6d      	ldr	r2, [pc, #436]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0x19c>
 8002b7c:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a66      	ldr	r2, [pc, #408]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b94:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f023 020f 	bic.w	r2, r3, #15
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	495f      	ldr	r1, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d059      	beq.n	8002c72 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fe05 	bl	80017cc <HAL_GetTick>
 8002bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fe00 	bl	80017cc <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b64      	cmp	r3, #100	; 0x64
 8002bd6:	d902      	bls.n	8002bde <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	f000 bf43 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 8002bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bf2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d102      	bne.n	8002c10 <HAL_RCC_OscConfig+0x218>
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	e015      	b.n	8002c3c <HAL_RCC_OscConfig+0x244>
 8002c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c14:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c28:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c40:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c48:	fa92 f2a2 	rbit	r2, r2
 8002c4c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c50:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c54:	fab2 f282 	clz	r2, r2
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	f042 0220 	orr.w	r2, r2, #32
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f002 021f 	and.w	r2, r2, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ab      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1d0>
 8002c70:	e05d      	b.n	8002d2e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fdab 	bl	80017cc <HAL_GetTick>
 8002c76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fda6 	bl	80017cc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b64      	cmp	r3, #100	; 0x64
 8002c8a:	d902      	bls.n	8002c92 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	f000 bee9 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 8002c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c96:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ca6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2cc>
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e015      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2f8>
 8002cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cdc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ce0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_RCC_OscConfig+0x330>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cf4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cf8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d04:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d08:	fab2 f282 	clz	r2, r2
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f002 021f 	and.w	r2, r2, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ab      	bne.n	8002c7c <HAL_RCC_OscConfig+0x284>
 8002d24:	e003      	b.n	8002d2e <HAL_RCC_OscConfig+0x336>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 817d 	beq.w	800303e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d44:	4ba6      	ldr	r3, [pc, #664]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d50:	4ba3      	ldr	r3, [pc, #652]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d172      	bne.n	8002e42 <HAL_RCC_OscConfig+0x44a>
 8002d5c:	4ba0      	ldr	r3, [pc, #640]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d16c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x44a>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_OscConfig+0x3a0>
 8002d92:	4b93      	ldr	r3, [pc, #588]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e013      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c8>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002daa:	2302      	movs	r3, #2
 8002dac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002db0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002dbc:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002dc6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002dca:	fa92 f2a2 	rbit	r2, r2
 8002dce:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002dd2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002dd6:	fab2 f282 	clz	r2, r2
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	f042 0220 	orr.w	r2, r2, #32
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	f002 021f 	and.w	r2, r2, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x410>
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d002      	beq.n	8002e08 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f000 be2e 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	21f8      	movs	r1, #248	; 0xf8
 8002e1e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e26:	fa91 f1a1 	rbit	r1, r1
 8002e2a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e2e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e32:	fab1 f181 	clz	r1, r1
 8002e36:	b2c9      	uxtb	r1, r1
 8002e38:	408b      	lsls	r3, r1
 8002e3a:	4969      	ldr	r1, [pc, #420]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e40:	e0fd      	b.n	800303e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8088 	beq.w	8002f64 <HAL_RCC_OscConfig+0x56c>
 8002e54:	2301      	movs	r3, #1
 8002e56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fca4 	bl	80017cc <HAL_GetTick>
 8002e84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fc9f 	bl	80017cc <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d902      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	f000 bde2 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002eb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d102      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4d8>
 8002eca:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	e013      	b.n	8002ef8 <HAL_RCC_OscConfig+0x500>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ee8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002efe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f02:	fa92 f2a2 	rbit	r2, r2
 8002f06:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f0e:	fab2 f282 	clz	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f042 0220 	orr.w	r2, r2, #32
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f002 021f 	and.w	r2, r2, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0af      	beq.n	8002e8a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	21f8      	movs	r1, #248	; 0xf8
 8002f40:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f48:	fa91 f1a1 	rbit	r1, r1
 8002f4c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f50:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f54:	fab1 f181 	clz	r1, r1
 8002f58:	b2c9      	uxtb	r1, r1
 8002f5a:	408b      	lsls	r3, r1
 8002f5c:	4920      	ldr	r1, [pc, #128]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
 8002f62:	e06c      	b.n	800303e <HAL_RCC_OscConfig+0x646>
 8002f64:	2301      	movs	r3, #1
 8002f66:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fc1c 	bl	80017cc <HAL_GetTick>
 8002f94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fc17 	bl	80017cc <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	f000 bd5a 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d104      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5ec>
 8002fda:	4b01      	ldr	r3, [pc, #4]	; (8002fe0 <HAL_RCC_OscConfig+0x5e8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	e015      	b.n	800300c <HAL_RCC_OscConfig+0x614>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ffc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003008:	4bc8      	ldr	r3, [pc, #800]	; (800332c <HAL_RCC_OscConfig+0x934>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2202      	movs	r2, #2
 800300e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003012:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003016:	fa92 f2a2 	rbit	r2, r2
 800301a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800301e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003022:	fab2 f282 	clz	r2, r2
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f042 0220 	orr.w	r2, r2, #32
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f002 021f 	and.w	r2, r2, #31
 8003032:	2101      	movs	r1, #1
 8003034:	fa01 f202 	lsl.w	r2, r1, r2
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ad      	bne.n	8002f9a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8110 	beq.w	8003274 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d079      	beq.n	8003158 <HAL_RCC_OscConfig+0x760>
 8003064:	2301      	movs	r3, #1
 8003066:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4bab      	ldr	r3, [pc, #684]	; (8003330 <HAL_RCC_OscConfig+0x938>)
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	2301      	movs	r3, #1
 800308c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fe fb9d 	bl	80017cc <HAL_GetTick>
 8003092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe fb98 	bl	80017cc <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d902      	bls.n	80030ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	f000 bcdb 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 80030ae:	2302      	movs	r3, #2
 80030b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030ec:	2202      	movs	r2, #2
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003106:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003108:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x934>)
 800310a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003114:	2102      	movs	r1, #2
 8003116:	6019      	str	r1, [r3, #0]
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f1a3 	rbit	r1, r3
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800312e:	6019      	str	r1, [r3, #0]
  return result;
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0a0      	beq.n	8003098 <HAL_RCC_OscConfig+0x6a0>
 8003156:	e08d      	b.n	8003274 <HAL_RCC_OscConfig+0x87c>
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800317a:	601a      	str	r2, [r3, #0]
  return result;
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003184:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCC_OscConfig+0x938>)
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	461a      	mov	r2, r3
 8003196:	2300      	movs	r3, #0
 8003198:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fe fb17 	bl	80017cc <HAL_GetTick>
 800319e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe fb12 	bl	80017cc <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d902      	bls.n	80031ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	f000 bc55 	b.w	8003a64 <HAL_RCC_OscConfig+0x106c>
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031c2:	2202      	movs	r2, #2
 80031c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031e6:	2202      	movs	r2, #2
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	fa93 f2a3 	rbit	r2, r3
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800320a:	2202      	movs	r2, #2
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003224:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x934>)
 8003228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003232:	2102      	movs	r1, #2
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f1a3 	rbit	r1, r3
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800324c:	6019      	str	r1, [r3, #0]
  return result;
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d197      	bne.n	80031a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 81a1 	beq.w	80035cc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003290:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_RCC_OscConfig+0x934>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d116      	bne.n	80032ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCC_OscConfig+0x934>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4a22      	ldr	r2, [pc, #136]	; (800332c <HAL_RCC_OscConfig+0x934>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a6:	61d3      	str	r3, [r2, #28]
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_RCC_OscConfig+0x934>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCC_OscConfig+0x93c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11a      	bne.n	800330c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x93c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_RCC_OscConfig+0x93c>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fe fa73 	bl	80017cc <HAL_GetTick>
 80032e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	e009      	b.n	8003300 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fe fa6e 	bl	80017cc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b64      	cmp	r3, #100	; 0x64
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e3b1      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_OscConfig+0x93c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ef      	beq.n	80032ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10d      	bne.n	8003338 <HAL_RCC_OscConfig+0x940>
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_OscConfig+0x934>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4a02      	ldr	r2, [pc, #8]	; (800332c <HAL_RCC_OscConfig+0x934>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6213      	str	r3, [r2, #32]
 8003328:	e03c      	b.n	80033a4 <HAL_RCC_OscConfig+0x9ac>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	10908120 	.word	0x10908120
 8003334:	40007000 	.word	0x40007000
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10c      	bne.n	8003362 <HAL_RCC_OscConfig+0x96a>
 8003348:	4bc1      	ldr	r3, [pc, #772]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4ac0      	ldr	r2, [pc, #768]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	4bbe      	ldr	r3, [pc, #760]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4abd      	ldr	r2, [pc, #756]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800335a:	f023 0304 	bic.w	r3, r3, #4
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	e020      	b.n	80033a4 <HAL_RCC_OscConfig+0x9ac>
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x994>
 8003372:	4bb7      	ldr	r3, [pc, #732]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4ab6      	ldr	r2, [pc, #728]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6213      	str	r3, [r2, #32]
 800337e:	4bb4      	ldr	r3, [pc, #720]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4ab3      	ldr	r2, [pc, #716]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x9ac>
 800338c:	4bb0      	ldr	r3, [pc, #704]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4aaf      	ldr	r2, [pc, #700]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	6213      	str	r3, [r2, #32]
 8003398:	4bad      	ldr	r3, [pc, #692]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4aac      	ldr	r2, [pc, #688]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8081 	beq.w	80034b8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fa09 	bl	80017cc <HAL_GetTick>
 80033ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe fa04 	bl	80017cc <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e345      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033e0:	2202      	movs	r2, #2
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003424:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003428:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d102      	bne.n	8003444 <HAL_RCC_OscConfig+0xa4c>
 800343e:	4b84      	ldr	r3, [pc, #528]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	e013      	b.n	800346c <HAL_RCC_OscConfig+0xa74>
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800344c:	2202      	movs	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	4b79      	ldr	r3, [pc, #484]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003470:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003474:	2102      	movs	r1, #2
 8003476:	6011      	str	r1, [r2, #0]
 8003478:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	fa92 f1a2 	rbit	r1, r2
 8003486:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800348a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800348e:	6011      	str	r1, [r2, #0]
  return result;
 8003490:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003494:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	fab2 f282 	clz	r2, r2
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	f002 021f 	and.w	r2, r2, #31
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d084      	beq.n	80033c0 <HAL_RCC_OscConfig+0x9c8>
 80034b6:	e07f      	b.n	80035b8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fe f988 	bl	80017cc <HAL_GetTick>
 80034bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c0:	e00b      	b.n	80034da <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe f983 	bl	80017cc <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e2c4      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034e2:	2202      	movs	r2, #2
 80034e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	fa93 f2a3 	rbit	r2, r3
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003506:	2202      	movs	r2, #2
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003520:	601a      	str	r2, [r3, #0]
  return result;
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800352a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d102      	bne.n	8003546 <HAL_RCC_OscConfig+0xb4e>
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	e013      	b.n	800356e <HAL_RCC_OscConfig+0xb76>
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800354e:	2202      	movs	r2, #2
 8003550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	4b39      	ldr	r3, [pc, #228]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003572:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003576:	2102      	movs	r1, #2
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800357e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	fa92 f1a2 	rbit	r1, r2
 8003588:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003590:	6011      	str	r1, [r2, #0]
  return result;
 8003592:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003596:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	fab2 f282 	clz	r2, r2
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	f002 021f 	and.w	r2, r2, #31
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f202 	lsl.w	r2, r1, r2
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d184      	bne.n	80034c2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 80035c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8242 	beq.w	8003a62 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035de:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <HAL_RCC_OscConfig+0xc58>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	f000 8213 	beq.w	8003a12 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	f040 8162 	bne.w	80038c2 <HAL_RCC_OscConfig+0xeca>
 80035fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003602:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003606:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800360a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003610:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	fa93 f2a3 	rbit	r2, r3
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003622:	601a      	str	r2, [r3, #0]
  return result;
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800362c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003638:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	2300      	movs	r3, #0
 8003642:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe f8c2 	bl	80017cc <HAL_GetTick>
 8003648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	e00c      	b.n	8003668 <HAL_RCC_OscConfig+0xc70>
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe f8ba 	bl	80017cc <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1fd      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	fa93 f2a3 	rbit	r2, r3
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800368c:	601a      	str	r2, [r3, #0]
  return result;
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003696:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d102      	bne.n	80036b2 <HAL_RCC_OscConfig+0xcba>
 80036ac:	4bb0      	ldr	r3, [pc, #704]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	e027      	b.n	8003702 <HAL_RCC_OscConfig+0xd0a>
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	fa93 f2a3 	rbit	r2, r3
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	4b9c      	ldr	r3, [pc, #624]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003706:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800370a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800370e:	6011      	str	r1, [r2, #0]
 8003710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003714:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	fa92 f1a2 	rbit	r1, r2
 800371e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003722:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003726:	6011      	str	r1, [r2, #0]
  return result;
 8003728:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800372c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f042 0220 	orr.w	r2, r2, #32
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f002 021f 	and.w	r2, r2, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d182      	bne.n	8003654 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374e:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	430b      	orrs	r3, r1
 8003770:	497f      	ldr	r1, [pc, #508]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800377e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	fa93 f2a3 	rbit	r2, r3
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800379a:	601a      	str	r2, [r3, #0]
  return result;
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80037a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	461a      	mov	r2, r3
 80037b8:	2301      	movs	r3, #1
 80037ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe f806 	bl	80017cc <HAL_GetTick>
 80037c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	e009      	b.n	80037da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe f801 	bl	80017cc <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e144      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 80037da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037de:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037fe:	601a      	str	r2, [r3, #0]
  return result;
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003808:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_RCC_OscConfig+0xe2c>
 800381e:	4b54      	ldr	r3, [pc, #336]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	e027      	b.n	8003874 <HAL_RCC_OscConfig+0xe7c>
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800382c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	fa93 f2a3 	rbit	r2, r3
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003878:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800387c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003880:	6011      	str	r1, [r2, #0]
 8003882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003886:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	fa92 f1a2 	rbit	r1, r2
 8003890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003894:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003898:	6011      	str	r1, [r2, #0]
  return result;
 800389a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800389e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	fab2 f282 	clz	r2, r2
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f042 0220 	orr.w	r2, r2, #32
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f002 021f 	and.w	r2, r2, #31
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d082      	beq.n	80037c6 <HAL_RCC_OscConfig+0xdce>
 80038c0:	e0cf      	b.n	8003a62 <HAL_RCC_OscConfig+0x106a>
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038e6:	601a      	str	r2, [r3, #0]
  return result;
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	461a      	mov	r2, r3
 8003904:	2300      	movs	r3, #0
 8003906:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd ff60 	bl	80017cc <HAL_GetTick>
 800390c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003910:	e009      	b.n	8003926 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003912:	f7fd ff5b 	bl	80017cc <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e09e      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800392e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800394a:	601a      	str	r2, [r3, #0]
  return result;
 800394c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003950:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003954:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d104      	bne.n	8003974 <HAL_RCC_OscConfig+0xf7c>
 800396a:	4b01      	ldr	r3, [pc, #4]	; (8003970 <HAL_RCC_OscConfig+0xf78>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	e029      	b.n	80039c4 <HAL_RCC_OscConfig+0xfcc>
 8003970:	40021000 	.word	0x40021000
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800397c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	fa93 f2a3 	rbit	r2, r3
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fa93 f2a3 	rbit	r2, r3
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x1078>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039d0:	6011      	str	r1, [r2, #0]
 80039d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	fa92 f1a2 	rbit	r1, r2
 80039e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039e8:	6011      	str	r1, [r2, #0]
  return result;
 80039ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	fab2 f282 	clz	r2, r2
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	f042 0220 	orr.w	r2, r2, #32
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	f002 021f 	and.w	r2, r2, #31
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d180      	bne.n	8003912 <HAL_RCC_OscConfig+0xf1a>
 8003a10:	e027      	b.n	8003a62 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e01e      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_RCC_OscConfig+0x1078>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a32:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d10b      	bne.n	8003a5e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b09e      	sub	sp, #120	; 0x78
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e162      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b90      	ldr	r3, [pc, #576]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d910      	bls.n	8003abc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b8d      	ldr	r3, [pc, #564]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 0207 	bic.w	r2, r3, #7
 8003aa2:	498b      	ldr	r1, [pc, #556]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b89      	ldr	r3, [pc, #548]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e14a      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	497f      	ldr	r1, [pc, #508]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80dc 	beq.w	8003ca0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d13c      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xf6>
 8003af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d102      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xa6>
 8003b14:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	e00f      	b.n	8003b3a <HAL_RCC_ClockConfig+0xc6>
 8003b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	667b      	str	r3, [r7, #100]	; 0x64
 8003b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b42:	fa92 f2a2 	rbit	r2, r2
 8003b46:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b4a:	fab2 f282 	clz	r2, r2
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f042 0220 	orr.w	r2, r2, #32
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f002 021f 	and.w	r2, r2, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d17b      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0f3      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d13c      	bne.n	8003bec <HAL_RCC_ClockConfig+0x178>
 8003b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x128>
 8003b96:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	e00f      	b.n	8003bbc <HAL_RCC_ClockConfig+0x148>
 8003b9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8003baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb8:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc4:	fa92 f2a2 	rbit	r2, r2
 8003bc8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bcc:	fab2 f282 	clz	r2, r2
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	f042 0220 	orr.w	r2, r2, #32
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f002 021f 	and.w	r2, r2, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d13a      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b2      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
 8003bec:	2302      	movs	r3, #2
 8003bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x1a0>
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	e00d      	b.n	8003c30 <HAL_RCC_ClockConfig+0x1bc>
 8003c14:	2302      	movs	r3, #2
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	2302      	movs	r3, #2
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	2202      	movs	r2, #2
 8003c32:	61ba      	str	r2, [r7, #24]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	fa92 f2a2 	rbit	r2, r2
 8003c3a:	617a      	str	r2, [r7, #20]
  return result;
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f002 021f 	and.w	r2, r2, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e079      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	491a      	ldr	r1, [pc, #104]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fd fdac 	bl	80017cc <HAL_GetTick>
 8003c74:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fd fda8 	bl	80017cc <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e061      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d214      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <HAL_RCC_ClockConfig+0x25c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e040      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2de>
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	491a      	ldr	r1, [pc, #104]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4912      	ldr	r1, [pc, #72]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d16:	f000 f829 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_RCC_ClockConfig+0x2e8>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d24:	22f0      	movs	r2, #240	; 0xf0
 8003d26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	fa92 f2a2 	rbit	r2, r2
 8003d2e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	40d3      	lsrs	r3, r2
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x2ec>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
 8003d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <HAL_RCC_ClockConfig+0x2f0>)
 8003d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_RCC_ClockConfig+0x2f4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fcfa 	bl	8001744 <HAL_InitTick>
  
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3778      	adds	r7, #120	; 0x78
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08007e98 	.word	0x08007e98
 8003d64:	20000004 	.word	0x20000004
 8003d68:	20000008 	.word	0x20000008

08003d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b08b      	sub	sp, #44	; 0x2c
 8003d70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d002      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x30>
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x36>
 8003d9a:	e03c      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d9e:	623b      	str	r3, [r7, #32]
      break;
 8003da0:	e03c      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003da8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003dac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	fa92 f2a2 	rbit	r2, r2
 8003db4:	607a      	str	r2, [r7, #4]
  return result;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	40d3      	lsrs	r3, r2
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	220f      	movs	r2, #15
 8003dd0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	fa92 f2a2 	rbit	r2, r2
 8003dd8:	60fa      	str	r2, [r7, #12]
  return result;
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	fab2 f282 	clz	r2, r2
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	40d3      	lsrs	r3, r2
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003df4:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	e004      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	623b      	str	r3, [r7, #32]
      break;
 8003e14:	e002      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e18:	623b      	str	r3, [r7, #32]
      break;
 8003e1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	372c      	adds	r7, #44	; 0x2c
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	007a1200 	.word	0x007a1200
 8003e34:	08007eb0 	.word	0x08007eb0
 8003e38:	08007ec0 	.word	0x08007ec0
 8003e3c:	003d0900 	.word	0x003d0900

08003e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000004 	.word	0x20000004

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e5e:	f7ff ffef 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e62:	4601      	mov	r1, r0
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e6c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	fa92 f2a2 	rbit	r2, r2
 8003e78:	603a      	str	r2, [r7, #0]
  return result;
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	fab2 f282 	clz	r2, r2
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	40d3      	lsrs	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08007ea8 	.word	0x08007ea8

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ea2:	f7ff ffcd 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003eb0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003eb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	fa92 f2a2 	rbit	r2, r2
 8003ebc:	603a      	str	r2, [r7, #0]
  return result;
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	fab2 f282 	clz	r2, r2
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	40d3      	lsrs	r3, r2
 8003ec8:	4a04      	ldr	r2, [pc, #16]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	08007ea8 	.word	0x08007ea8

08003ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b092      	sub	sp, #72	; 0x48
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80cd 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f04:	4b86      	ldr	r3, [pc, #536]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f10:	4b83      	ldr	r3, [pc, #524]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4a82      	ldr	r2, [pc, #520]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	61d3      	str	r3, [r2, #28]
 8003f1c:	4b80      	ldr	r3, [pc, #512]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d118      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b7a      	ldr	r3, [pc, #488]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a79      	ldr	r2, [pc, #484]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f46:	f7fd fc41 	bl	80017cc <HAL_GetTick>
 8003f4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	e008      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4e:	f7fd fc3d 	bl	80017cc <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b64      	cmp	r3, #100	; 0x64
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0db      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	4b70      	ldr	r3, [pc, #448]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d07d      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d076      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b5e      	ldr	r3, [pc, #376]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b55      	ldr	r3, [pc, #340]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fdc:	4a50      	ldr	r2, [pc, #320]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d045      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd fbee 	bl	80017cc <HAL_GetTick>
 8003ff0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd fbea 	bl	80017cc <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e086      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800400a:	2302      	movs	r3, #2
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	2302      	movs	r3, #2
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	61fb      	str	r3, [r7, #28]
  return result;
 8004022:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d102      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	e007      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800403e:	2302      	movs	r3, #2
 8004040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	4b35      	ldr	r3, [pc, #212]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2202      	movs	r2, #2
 8004050:	613a      	str	r2, [r7, #16]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	fa92 f2a2 	rbit	r2, r2
 8004058:	60fa      	str	r2, [r7, #12]
  return result;
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f002 021f 	and.w	r2, r2, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0bd      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4926      	ldr	r1, [pc, #152]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004086:	4313      	orrs	r3, r2
 8004088:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800408a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	491a      	ldr	r1, [pc, #104]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4912      	ldr	r1, [pc, #72]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	490b      	ldr	r1, [pc, #44]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4903      	ldr	r1, [pc, #12]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004112:	4313      	orrs	r3, r2
 8004114:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3748      	adds	r7, #72	; 0x48
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
 8004128:	10908100 	.word	0x10908100

0800412c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e095      	b.n	800426a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d108      	bne.n	8004158 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414e:	d009      	beq.n	8004164 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	61da      	str	r2, [r3, #28]
 8004156:	e005      	b.n	8004164 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd f8e0 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a4:	d902      	bls.n	80041ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e002      	b.n	80041b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041ba:	d007      	beq.n	80041cc <HAL_SPI_Init+0xa0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c4:	d002      	beq.n	80041cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	ea42 0103 	orr.w	r1, r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	f003 0204 	and.w	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004248:	ea42 0103 	orr.w	r1, r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e049      	b.n	8004318 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fd f895 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f000 fa07 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d001      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e040      	b.n	80043ba <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <HAL_TIM_Base_Start_IT+0xa8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x58>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d009      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x58>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a18      	ldr	r2, [pc, #96]	; (80043cc <HAL_TIM_Base_Start_IT+0xac>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x58>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d115      	bne.n	80043a4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b06      	cmp	r3, #6
 8004388:	d015      	beq.n	80043b6 <HAL_TIM_Base_Start_IT+0x96>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d011      	beq.n	80043b6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a2:	e008      	b.n	80043b6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e000      	b.n	80043b8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40014000 	.word	0x40014000
 80043d4:	00010007 	.word	0x00010007

080043d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6a1a      	ldr	r2, [r3, #32]
 80043f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10f      	bne.n	8004420 <HAL_TIM_Base_Stop_IT+0x48>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a1a      	ldr	r2, [r3, #32]
 8004406:	f240 4344 	movw	r3, #1092	; 0x444
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_TIM_Base_Stop_IT+0x48>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b02      	cmp	r3, #2
 800444a:	d122      	bne.n	8004492 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d11b      	bne.n	8004492 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0202 	mvn.w	r2, #2
 8004462:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f905 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 800447e:	e005      	b.n	800448c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8f7 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f908 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d122      	bne.n	80044e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d11b      	bne.n	80044e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f06f 0204 	mvn.w	r2, #4
 80044b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f8db 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 80044d2:	e005      	b.n	80044e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f8cd 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8de 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d122      	bne.n	800453a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d11b      	bne.n	800453a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f06f 0208 	mvn.w	r2, #8
 800450a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2204      	movs	r2, #4
 8004510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8b1 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 8004526:	e005      	b.n	8004534 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8a3 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f8b4 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b10      	cmp	r3, #16
 8004546:	d122      	bne.n	800458e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b10      	cmp	r3, #16
 8004554:	d11b      	bne.n	800458e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0210 	mvn.w	r2, #16
 800455e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2208      	movs	r2, #8
 8004564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f887 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 800457a:	e005      	b.n	8004588 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f879 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f88a 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10e      	bne.n	80045ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0201 	mvn.w	r2, #1
 80045b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fc fd3d 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d10e      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d107      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f95f 	bl	80048a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b80      	cmp	r3, #128	; 0x80
 8004602:	d107      	bne.n	8004614 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f952 	bl	80048b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d10e      	bne.n	8004640 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d107      	bne.n	8004640 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f838 	bl	80046b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b20      	cmp	r3, #32
 800464c:	d10e      	bne.n	800466c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b20      	cmp	r3, #32
 800465a:	d107      	bne.n	800466c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0220 	mvn.w	r2, #32
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f912 	bl	8004890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <TIM_Base_SetConfig+0xdc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_Base_SetConfig+0x28>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0x28>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <TIM_Base_SetConfig+0xe0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d108      	bne.n	80046fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <TIM_Base_SetConfig+0xdc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <TIM_Base_SetConfig+0x6a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d00f      	beq.n	800472e <TIM_Base_SetConfig+0x6a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <TIM_Base_SetConfig+0xe0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_Base_SetConfig+0x6a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a23      	ldr	r2, [pc, #140]	; (80047a8 <TIM_Base_SetConfig+0xe4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_Base_SetConfig+0x6a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a22      	ldr	r2, [pc, #136]	; (80047ac <TIM_Base_SetConfig+0xe8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_Base_SetConfig+0x6a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <TIM_Base_SetConfig+0xec>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <TIM_Base_SetConfig+0xdc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_Base_SetConfig+0xc0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <TIM_Base_SetConfig+0xe4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_Base_SetConfig+0xc0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <TIM_Base_SetConfig+0xe8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_Base_SetConfig+0xc0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <TIM_Base_SetConfig+0xec>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d103      	bne.n	800478c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	615a      	str	r2, [r3, #20]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40014400 	.word	0x40014400
 80047b0:	40014800 	.word	0x40014800

080047b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e054      	b.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a24      	ldr	r2, [pc, #144]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a17      	ldr	r2, [pc, #92]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004834:	d009      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a13      	ldr	r2, [pc, #76]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a11      	ldr	r2, [pc, #68]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d10c      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40000400 	.word	0x40000400
 800488c:	40014000 	.word	0x40014000

08004890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e040      	b.n	8004960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc fd90 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2224      	movs	r2, #36	; 0x24
 80048f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8b6 	bl	8004a7c <UART_SetConfig>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e022      	b.n	8004960 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9e0 	bl	8004ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa67 	bl	8004e2c <UART_CheckIdleState>
 800495e:	4603      	mov	r3, r0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497c:	2b20      	cmp	r3, #32
 800497e:	d178      	bne.n	8004a72 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_UART_Transmit+0x24>
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e071      	b.n	8004a74 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2221      	movs	r2, #33	; 0x21
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499e:	f7fc ff15 	bl	80017cc <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d108      	bne.n	80049d0 <HAL_UART_Transmit+0x68>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	e003      	b.n	80049d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049d8:	e030      	b.n	8004a3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2180      	movs	r1, #128	; 0x80
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fac9 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e03c      	b.n	8004a74 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10b      	bne.n	8004a18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0c:	b292      	uxth	r2, r2
 8004a0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	3302      	adds	r3, #2
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e008      	b.n	8004a2a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	b292      	uxth	r2, r2
 8004a22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	3301      	adds	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1c8      	bne.n	80049da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fa92 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e005      	b.n	8004a74 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b8a      	ldr	r3, [pc, #552]	; (8004cd0 <UART_SetConfig+0x254>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	6979      	ldr	r1, [r7, #20]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a78      	ldr	r2, [pc, #480]	; (8004cd4 <UART_SetConfig+0x258>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d120      	bne.n	8004b3a <UART_SetConfig+0xbe>
 8004af8:	4b77      	ldr	r3, [pc, #476]	; (8004cd8 <UART_SetConfig+0x25c>)
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d817      	bhi.n	8004b34 <UART_SetConfig+0xb8>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x90>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b29 	.word	0x08004b29
 8004b14:	08004b2f 	.word	0x08004b2f
 8004b18:	08004b23 	.word	0x08004b23
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e01d      	b.n	8004b5e <UART_SetConfig+0xe2>
 8004b22:	2302      	movs	r3, #2
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e01a      	b.n	8004b5e <UART_SetConfig+0xe2>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e017      	b.n	8004b5e <UART_SetConfig+0xe2>
 8004b2e:	2308      	movs	r3, #8
 8004b30:	77fb      	strb	r3, [r7, #31]
 8004b32:	e014      	b.n	8004b5e <UART_SetConfig+0xe2>
 8004b34:	2310      	movs	r3, #16
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e011      	b.n	8004b5e <UART_SetConfig+0xe2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a67      	ldr	r2, [pc, #412]	; (8004cdc <UART_SetConfig+0x260>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d102      	bne.n	8004b4a <UART_SetConfig+0xce>
 8004b44:	2300      	movs	r3, #0
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e009      	b.n	8004b5e <UART_SetConfig+0xe2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a64      	ldr	r2, [pc, #400]	; (8004ce0 <UART_SetConfig+0x264>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d102      	bne.n	8004b5a <UART_SetConfig+0xde>
 8004b54:	2300      	movs	r3, #0
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e001      	b.n	8004b5e <UART_SetConfig+0xe2>
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b66:	d15a      	bne.n	8004c1e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004b68:	7ffb      	ldrb	r3, [r7, #31]
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d827      	bhi.n	8004bbe <UART_SetConfig+0x142>
 8004b6e:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <UART_SetConfig+0xf8>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004ba1 	.word	0x08004ba1
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004bbf 	.word	0x08004bbf
 8004b84:	08004baf 	.word	0x08004baf
 8004b88:	08004bbf 	.word	0x08004bbf
 8004b8c:	08004bbf 	.word	0x08004bbf
 8004b90:	08004bbf 	.word	0x08004bbf
 8004b94:	08004bb7 	.word	0x08004bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b98:	f7ff f95e 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8004b9c:	61b8      	str	r0, [r7, #24]
        break;
 8004b9e:	e013      	b.n	8004bc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba0:	f7ff f97c 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8004ba4:	61b8      	str	r0, [r7, #24]
        break;
 8004ba6:	e00f      	b.n	8004bc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba8:	4b4e      	ldr	r3, [pc, #312]	; (8004ce4 <UART_SetConfig+0x268>)
 8004baa:	61bb      	str	r3, [r7, #24]
        break;
 8004bac:	e00c      	b.n	8004bc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bae:	f7ff f8dd 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8004bb2:	61b8      	str	r0, [r7, #24]
        break;
 8004bb4:	e008      	b.n	8004bc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bba:	61bb      	str	r3, [r7, #24]
        break;
 8004bbc:	e004      	b.n	8004bc8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	77bb      	strb	r3, [r7, #30]
        break;
 8004bc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d074      	beq.n	8004cb8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	005a      	lsls	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	441a      	add	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b0f      	cmp	r3, #15
 8004be8:	d916      	bls.n	8004c18 <UART_SetConfig+0x19c>
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d212      	bcs.n	8004c18 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f023 030f 	bic.w	r3, r3, #15
 8004bfa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	89fa      	ldrh	r2, [r7, #14]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	e04f      	b.n	8004cb8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	77bb      	strb	r3, [r7, #30]
 8004c1c:	e04c      	b.n	8004cb8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c1e:	7ffb      	ldrb	r3, [r7, #31]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d828      	bhi.n	8004c76 <UART_SetConfig+0x1fa>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0x1b0>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c67 	.word	0x08004c67
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c77 	.word	0x08004c77
 8004c48:	08004c77 	.word	0x08004c77
 8004c4c:	08004c6f 	.word	0x08004c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c50:	f7ff f902 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8004c54:	61b8      	str	r0, [r7, #24]
        break;
 8004c56:	e013      	b.n	8004c80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c58:	f7ff f920 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8004c5c:	61b8      	str	r0, [r7, #24]
        break;
 8004c5e:	e00f      	b.n	8004c80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c60:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <UART_SetConfig+0x268>)
 8004c62:	61bb      	str	r3, [r7, #24]
        break;
 8004c64:	e00c      	b.n	8004c80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7ff f881 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8004c6a:	61b8      	str	r0, [r7, #24]
        break;
 8004c6c:	e008      	b.n	8004c80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c72:	61bb      	str	r3, [r7, #24]
        break;
 8004c74:	e004      	b.n	8004c80 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c7e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d018      	beq.n	8004cb8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	085a      	lsrs	r2, r3, #1
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	441a      	add	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b0f      	cmp	r3, #15
 8004c9e:	d909      	bls.n	8004cb4 <UART_SetConfig+0x238>
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca6:	d205      	bcs.n	8004cb4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	e001      	b.n	8004cb8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004cc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	efff69f3 	.word	0xefff69f3
 8004cd4:	40013800 	.word	0x40013800
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40004400 	.word	0x40004400
 8004ce0:	40004800 	.word	0x40004800
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01a      	beq.n	8004dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de6:	d10a      	bne.n	8004dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	605a      	str	r2, [r3, #4]
  }
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b098      	sub	sp, #96	; 0x60
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e3c:	f7fc fcc6 	bl	80017cc <HAL_GetTick>
 8004e40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d12e      	bne.n	8004eae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f88c 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d021      	beq.n	8004eae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e6      	bne.n	8004e6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e062      	b.n	8004f74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d149      	bne.n	8004f50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f856 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d03c      	beq.n	8004f50 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e6      	bne.n	8004ed6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f28:	61fa      	str	r2, [r7, #28]
 8004f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	69b9      	ldr	r1, [r7, #24]
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	617b      	str	r3, [r7, #20]
   return(result);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e011      	b.n	8004f74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3758      	adds	r7, #88	; 0x58
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	e049      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d045      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fc fc19 	bl	80017cc <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e048      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d031      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d110      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f838 	bl	800504a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e029      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffc:	d111      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f81e 	bl	800504a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e00f      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	429a      	cmp	r2, r3
 800503e:	d0a6      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800504a:	b480      	push	{r7}
 800504c:	b095      	sub	sp, #84	; 0x54
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	643b      	str	r3, [r7, #64]	; 0x40
 8005072:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3308      	adds	r3, #8
 800508a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	61fb      	str	r3, [r7, #28]
   return(result);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	64bb      	str	r3, [r7, #72]	; 0x48
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d118      	bne.n	80050f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f023 0310 	bic.w	r3, r3, #16
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	613b      	str	r3, [r7, #16]
   return(result);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e6      	bne.n	80050c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005106:	bf00      	nop
 8005108:	3754      	adds	r7, #84	; 0x54
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <__cvt>:
 8005112:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005116:	ec55 4b10 	vmov	r4, r5, d0
 800511a:	2d00      	cmp	r5, #0
 800511c:	460e      	mov	r6, r1
 800511e:	4619      	mov	r1, r3
 8005120:	462b      	mov	r3, r5
 8005122:	bfbb      	ittet	lt
 8005124:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005128:	461d      	movlt	r5, r3
 800512a:	2300      	movge	r3, #0
 800512c:	232d      	movlt	r3, #45	; 0x2d
 800512e:	700b      	strb	r3, [r1, #0]
 8005130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005132:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005136:	4691      	mov	r9, r2
 8005138:	f023 0820 	bic.w	r8, r3, #32
 800513c:	bfbc      	itt	lt
 800513e:	4622      	movlt	r2, r4
 8005140:	4614      	movlt	r4, r2
 8005142:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005146:	d005      	beq.n	8005154 <__cvt+0x42>
 8005148:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800514c:	d100      	bne.n	8005150 <__cvt+0x3e>
 800514e:	3601      	adds	r6, #1
 8005150:	2102      	movs	r1, #2
 8005152:	e000      	b.n	8005156 <__cvt+0x44>
 8005154:	2103      	movs	r1, #3
 8005156:	ab03      	add	r3, sp, #12
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	ab02      	add	r3, sp, #8
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	ec45 4b10 	vmov	d0, r4, r5
 8005162:	4653      	mov	r3, sl
 8005164:	4632      	mov	r2, r6
 8005166:	f000 fe6b 	bl	8005e40 <_dtoa_r>
 800516a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800516e:	4607      	mov	r7, r0
 8005170:	d102      	bne.n	8005178 <__cvt+0x66>
 8005172:	f019 0f01 	tst.w	r9, #1
 8005176:	d022      	beq.n	80051be <__cvt+0xac>
 8005178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800517c:	eb07 0906 	add.w	r9, r7, r6
 8005180:	d110      	bne.n	80051a4 <__cvt+0x92>
 8005182:	783b      	ldrb	r3, [r7, #0]
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d10a      	bne.n	800519e <__cvt+0x8c>
 8005188:	2200      	movs	r2, #0
 800518a:	2300      	movs	r3, #0
 800518c:	4620      	mov	r0, r4
 800518e:	4629      	mov	r1, r5
 8005190:	f7fb fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005194:	b918      	cbnz	r0, 800519e <__cvt+0x8c>
 8005196:	f1c6 0601 	rsb	r6, r6, #1
 800519a:	f8ca 6000 	str.w	r6, [sl]
 800519e:	f8da 3000 	ldr.w	r3, [sl]
 80051a2:	4499      	add	r9, r3
 80051a4:	2200      	movs	r2, #0
 80051a6:	2300      	movs	r3, #0
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80051b0:	b108      	cbz	r0, 80051b6 <__cvt+0xa4>
 80051b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80051b6:	2230      	movs	r2, #48	; 0x30
 80051b8:	9b03      	ldr	r3, [sp, #12]
 80051ba:	454b      	cmp	r3, r9
 80051bc:	d307      	bcc.n	80051ce <__cvt+0xbc>
 80051be:	9b03      	ldr	r3, [sp, #12]
 80051c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051c2:	1bdb      	subs	r3, r3, r7
 80051c4:	4638      	mov	r0, r7
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	b004      	add	sp, #16
 80051ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	9103      	str	r1, [sp, #12]
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e7f0      	b.n	80051b8 <__cvt+0xa6>

080051d6 <__exponent>:
 80051d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051d8:	4603      	mov	r3, r0
 80051da:	2900      	cmp	r1, #0
 80051dc:	bfb8      	it	lt
 80051de:	4249      	neglt	r1, r1
 80051e0:	f803 2b02 	strb.w	r2, [r3], #2
 80051e4:	bfb4      	ite	lt
 80051e6:	222d      	movlt	r2, #45	; 0x2d
 80051e8:	222b      	movge	r2, #43	; 0x2b
 80051ea:	2909      	cmp	r1, #9
 80051ec:	7042      	strb	r2, [r0, #1]
 80051ee:	dd2a      	ble.n	8005246 <__exponent+0x70>
 80051f0:	f10d 0207 	add.w	r2, sp, #7
 80051f4:	4617      	mov	r7, r2
 80051f6:	260a      	movs	r6, #10
 80051f8:	4694      	mov	ip, r2
 80051fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80051fe:	fb06 1415 	mls	r4, r6, r5, r1
 8005202:	3430      	adds	r4, #48	; 0x30
 8005204:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005208:	460c      	mov	r4, r1
 800520a:	2c63      	cmp	r4, #99	; 0x63
 800520c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005210:	4629      	mov	r1, r5
 8005212:	dcf1      	bgt.n	80051f8 <__exponent+0x22>
 8005214:	3130      	adds	r1, #48	; 0x30
 8005216:	f1ac 0402 	sub.w	r4, ip, #2
 800521a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800521e:	1c41      	adds	r1, r0, #1
 8005220:	4622      	mov	r2, r4
 8005222:	42ba      	cmp	r2, r7
 8005224:	d30a      	bcc.n	800523c <__exponent+0x66>
 8005226:	f10d 0209 	add.w	r2, sp, #9
 800522a:	eba2 020c 	sub.w	r2, r2, ip
 800522e:	42bc      	cmp	r4, r7
 8005230:	bf88      	it	hi
 8005232:	2200      	movhi	r2, #0
 8005234:	4413      	add	r3, r2
 8005236:	1a18      	subs	r0, r3, r0
 8005238:	b003      	add	sp, #12
 800523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800523c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005240:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005244:	e7ed      	b.n	8005222 <__exponent+0x4c>
 8005246:	2330      	movs	r3, #48	; 0x30
 8005248:	3130      	adds	r1, #48	; 0x30
 800524a:	7083      	strb	r3, [r0, #2]
 800524c:	70c1      	strb	r1, [r0, #3]
 800524e:	1d03      	adds	r3, r0, #4
 8005250:	e7f1      	b.n	8005236 <__exponent+0x60>
	...

08005254 <_printf_float>:
 8005254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005258:	ed2d 8b02 	vpush	{d8}
 800525c:	b08d      	sub	sp, #52	; 0x34
 800525e:	460c      	mov	r4, r1
 8005260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005264:	4616      	mov	r6, r2
 8005266:	461f      	mov	r7, r3
 8005268:	4605      	mov	r5, r0
 800526a:	f000 fce7 	bl	8005c3c <_localeconv_r>
 800526e:	f8d0 a000 	ldr.w	sl, [r0]
 8005272:	4650      	mov	r0, sl
 8005274:	f7fa fffc 	bl	8000270 <strlen>
 8005278:	2300      	movs	r3, #0
 800527a:	930a      	str	r3, [sp, #40]	; 0x28
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	f8d8 3000 	ldr.w	r3, [r8]
 8005284:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005288:	3307      	adds	r3, #7
 800528a:	f023 0307 	bic.w	r3, r3, #7
 800528e:	f103 0208 	add.w	r2, r3, #8
 8005292:	f8c8 2000 	str.w	r2, [r8]
 8005296:	e9d3 8900 	ldrd	r8, r9, [r3]
 800529a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80052a4:	ee08 0a10 	vmov	s16, r0
 80052a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80052ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052b0:	4b9e      	ldr	r3, [pc, #632]	; (800552c <_printf_float+0x2d8>)
 80052b2:	f04f 32ff 	mov.w	r2, #4294967295
 80052b6:	f7fb fc39 	bl	8000b2c <__aeabi_dcmpun>
 80052ba:	bb88      	cbnz	r0, 8005320 <_printf_float+0xcc>
 80052bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052c0:	4b9a      	ldr	r3, [pc, #616]	; (800552c <_printf_float+0x2d8>)
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	f7fb fc13 	bl	8000af0 <__aeabi_dcmple>
 80052ca:	bb48      	cbnz	r0, 8005320 <_printf_float+0xcc>
 80052cc:	2200      	movs	r2, #0
 80052ce:	2300      	movs	r3, #0
 80052d0:	4640      	mov	r0, r8
 80052d2:	4649      	mov	r1, r9
 80052d4:	f7fb fc02 	bl	8000adc <__aeabi_dcmplt>
 80052d8:	b110      	cbz	r0, 80052e0 <_printf_float+0x8c>
 80052da:	232d      	movs	r3, #45	; 0x2d
 80052dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e0:	4a93      	ldr	r2, [pc, #588]	; (8005530 <_printf_float+0x2dc>)
 80052e2:	4b94      	ldr	r3, [pc, #592]	; (8005534 <_printf_float+0x2e0>)
 80052e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80052e8:	bf94      	ite	ls
 80052ea:	4690      	movls	r8, r2
 80052ec:	4698      	movhi	r8, r3
 80052ee:	2303      	movs	r3, #3
 80052f0:	6123      	str	r3, [r4, #16]
 80052f2:	9b05      	ldr	r3, [sp, #20]
 80052f4:	f023 0304 	bic.w	r3, r3, #4
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	f04f 0900 	mov.w	r9, #0
 80052fe:	9700      	str	r7, [sp, #0]
 8005300:	4633      	mov	r3, r6
 8005302:	aa0b      	add	r2, sp, #44	; 0x2c
 8005304:	4621      	mov	r1, r4
 8005306:	4628      	mov	r0, r5
 8005308:	f000 f9da 	bl	80056c0 <_printf_common>
 800530c:	3001      	adds	r0, #1
 800530e:	f040 8090 	bne.w	8005432 <_printf_float+0x1de>
 8005312:	f04f 30ff 	mov.w	r0, #4294967295
 8005316:	b00d      	add	sp, #52	; 0x34
 8005318:	ecbd 8b02 	vpop	{d8}
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005320:	4642      	mov	r2, r8
 8005322:	464b      	mov	r3, r9
 8005324:	4640      	mov	r0, r8
 8005326:	4649      	mov	r1, r9
 8005328:	f7fb fc00 	bl	8000b2c <__aeabi_dcmpun>
 800532c:	b140      	cbz	r0, 8005340 <_printf_float+0xec>
 800532e:	464b      	mov	r3, r9
 8005330:	2b00      	cmp	r3, #0
 8005332:	bfbc      	itt	lt
 8005334:	232d      	movlt	r3, #45	; 0x2d
 8005336:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800533a:	4a7f      	ldr	r2, [pc, #508]	; (8005538 <_printf_float+0x2e4>)
 800533c:	4b7f      	ldr	r3, [pc, #508]	; (800553c <_printf_float+0x2e8>)
 800533e:	e7d1      	b.n	80052e4 <_printf_float+0x90>
 8005340:	6863      	ldr	r3, [r4, #4]
 8005342:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005346:	9206      	str	r2, [sp, #24]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	d13f      	bne.n	80053cc <_printf_float+0x178>
 800534c:	2306      	movs	r3, #6
 800534e:	6063      	str	r3, [r4, #4]
 8005350:	9b05      	ldr	r3, [sp, #20]
 8005352:	6861      	ldr	r1, [r4, #4]
 8005354:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005358:	2300      	movs	r3, #0
 800535a:	9303      	str	r3, [sp, #12]
 800535c:	ab0a      	add	r3, sp, #40	; 0x28
 800535e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005362:	ab09      	add	r3, sp, #36	; 0x24
 8005364:	ec49 8b10 	vmov	d0, r8, r9
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	6022      	str	r2, [r4, #0]
 800536c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005370:	4628      	mov	r0, r5
 8005372:	f7ff fece 	bl	8005112 <__cvt>
 8005376:	9b06      	ldr	r3, [sp, #24]
 8005378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800537a:	2b47      	cmp	r3, #71	; 0x47
 800537c:	4680      	mov	r8, r0
 800537e:	d108      	bne.n	8005392 <_printf_float+0x13e>
 8005380:	1cc8      	adds	r0, r1, #3
 8005382:	db02      	blt.n	800538a <_printf_float+0x136>
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	4299      	cmp	r1, r3
 8005388:	dd41      	ble.n	800540e <_printf_float+0x1ba>
 800538a:	f1ab 0302 	sub.w	r3, fp, #2
 800538e:	fa5f fb83 	uxtb.w	fp, r3
 8005392:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005396:	d820      	bhi.n	80053da <_printf_float+0x186>
 8005398:	3901      	subs	r1, #1
 800539a:	465a      	mov	r2, fp
 800539c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053a0:	9109      	str	r1, [sp, #36]	; 0x24
 80053a2:	f7ff ff18 	bl	80051d6 <__exponent>
 80053a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053a8:	1813      	adds	r3, r2, r0
 80053aa:	2a01      	cmp	r2, #1
 80053ac:	4681      	mov	r9, r0
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	dc02      	bgt.n	80053b8 <_printf_float+0x164>
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	07d2      	lsls	r2, r2, #31
 80053b6:	d501      	bpl.n	80053bc <_printf_float+0x168>
 80053b8:	3301      	adds	r3, #1
 80053ba:	6123      	str	r3, [r4, #16]
 80053bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d09c      	beq.n	80052fe <_printf_float+0xaa>
 80053c4:	232d      	movs	r3, #45	; 0x2d
 80053c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ca:	e798      	b.n	80052fe <_printf_float+0xaa>
 80053cc:	9a06      	ldr	r2, [sp, #24]
 80053ce:	2a47      	cmp	r2, #71	; 0x47
 80053d0:	d1be      	bne.n	8005350 <_printf_float+0xfc>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1bc      	bne.n	8005350 <_printf_float+0xfc>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e7b9      	b.n	800534e <_printf_float+0xfa>
 80053da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80053de:	d118      	bne.n	8005412 <_printf_float+0x1be>
 80053e0:	2900      	cmp	r1, #0
 80053e2:	6863      	ldr	r3, [r4, #4]
 80053e4:	dd0b      	ble.n	80053fe <_printf_float+0x1aa>
 80053e6:	6121      	str	r1, [r4, #16]
 80053e8:	b913      	cbnz	r3, 80053f0 <_printf_float+0x19c>
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	07d0      	lsls	r0, r2, #31
 80053ee:	d502      	bpl.n	80053f6 <_printf_float+0x1a2>
 80053f0:	3301      	adds	r3, #1
 80053f2:	440b      	add	r3, r1
 80053f4:	6123      	str	r3, [r4, #16]
 80053f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80053f8:	f04f 0900 	mov.w	r9, #0
 80053fc:	e7de      	b.n	80053bc <_printf_float+0x168>
 80053fe:	b913      	cbnz	r3, 8005406 <_printf_float+0x1b2>
 8005400:	6822      	ldr	r2, [r4, #0]
 8005402:	07d2      	lsls	r2, r2, #31
 8005404:	d501      	bpl.n	800540a <_printf_float+0x1b6>
 8005406:	3302      	adds	r3, #2
 8005408:	e7f4      	b.n	80053f4 <_printf_float+0x1a0>
 800540a:	2301      	movs	r3, #1
 800540c:	e7f2      	b.n	80053f4 <_printf_float+0x1a0>
 800540e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005414:	4299      	cmp	r1, r3
 8005416:	db05      	blt.n	8005424 <_printf_float+0x1d0>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	6121      	str	r1, [r4, #16]
 800541c:	07d8      	lsls	r0, r3, #31
 800541e:	d5ea      	bpl.n	80053f6 <_printf_float+0x1a2>
 8005420:	1c4b      	adds	r3, r1, #1
 8005422:	e7e7      	b.n	80053f4 <_printf_float+0x1a0>
 8005424:	2900      	cmp	r1, #0
 8005426:	bfd4      	ite	le
 8005428:	f1c1 0202 	rsble	r2, r1, #2
 800542c:	2201      	movgt	r2, #1
 800542e:	4413      	add	r3, r2
 8005430:	e7e0      	b.n	80053f4 <_printf_float+0x1a0>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	055a      	lsls	r2, r3, #21
 8005436:	d407      	bmi.n	8005448 <_printf_float+0x1f4>
 8005438:	6923      	ldr	r3, [r4, #16]
 800543a:	4642      	mov	r2, r8
 800543c:	4631      	mov	r1, r6
 800543e:	4628      	mov	r0, r5
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	d12c      	bne.n	80054a0 <_printf_float+0x24c>
 8005446:	e764      	b.n	8005312 <_printf_float+0xbe>
 8005448:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800544c:	f240 80e0 	bls.w	8005610 <_printf_float+0x3bc>
 8005450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005454:	2200      	movs	r2, #0
 8005456:	2300      	movs	r3, #0
 8005458:	f7fb fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800545c:	2800      	cmp	r0, #0
 800545e:	d034      	beq.n	80054ca <_printf_float+0x276>
 8005460:	4a37      	ldr	r2, [pc, #220]	; (8005540 <_printf_float+0x2ec>)
 8005462:	2301      	movs	r3, #1
 8005464:	4631      	mov	r1, r6
 8005466:	4628      	mov	r0, r5
 8005468:	47b8      	blx	r7
 800546a:	3001      	adds	r0, #1
 800546c:	f43f af51 	beq.w	8005312 <_printf_float+0xbe>
 8005470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005474:	429a      	cmp	r2, r3
 8005476:	db02      	blt.n	800547e <_printf_float+0x22a>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	07d8      	lsls	r0, r3, #31
 800547c:	d510      	bpl.n	80054a0 <_printf_float+0x24c>
 800547e:	ee18 3a10 	vmov	r3, s16
 8005482:	4652      	mov	r2, sl
 8005484:	4631      	mov	r1, r6
 8005486:	4628      	mov	r0, r5
 8005488:	47b8      	blx	r7
 800548a:	3001      	adds	r0, #1
 800548c:	f43f af41 	beq.w	8005312 <_printf_float+0xbe>
 8005490:	f04f 0800 	mov.w	r8, #0
 8005494:	f104 091a 	add.w	r9, r4, #26
 8005498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549a:	3b01      	subs	r3, #1
 800549c:	4543      	cmp	r3, r8
 800549e:	dc09      	bgt.n	80054b4 <_printf_float+0x260>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	079b      	lsls	r3, r3, #30
 80054a4:	f100 8107 	bmi.w	80056b6 <_printf_float+0x462>
 80054a8:	68e0      	ldr	r0, [r4, #12]
 80054aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ac:	4298      	cmp	r0, r3
 80054ae:	bfb8      	it	lt
 80054b0:	4618      	movlt	r0, r3
 80054b2:	e730      	b.n	8005316 <_printf_float+0xc2>
 80054b4:	2301      	movs	r3, #1
 80054b6:	464a      	mov	r2, r9
 80054b8:	4631      	mov	r1, r6
 80054ba:	4628      	mov	r0, r5
 80054bc:	47b8      	blx	r7
 80054be:	3001      	adds	r0, #1
 80054c0:	f43f af27 	beq.w	8005312 <_printf_float+0xbe>
 80054c4:	f108 0801 	add.w	r8, r8, #1
 80054c8:	e7e6      	b.n	8005498 <_printf_float+0x244>
 80054ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	dc39      	bgt.n	8005544 <_printf_float+0x2f0>
 80054d0:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <_printf_float+0x2ec>)
 80054d2:	2301      	movs	r3, #1
 80054d4:	4631      	mov	r1, r6
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b8      	blx	r7
 80054da:	3001      	adds	r0, #1
 80054dc:	f43f af19 	beq.w	8005312 <_printf_float+0xbe>
 80054e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80054e4:	4313      	orrs	r3, r2
 80054e6:	d102      	bne.n	80054ee <_printf_float+0x29a>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	07d9      	lsls	r1, r3, #31
 80054ec:	d5d8      	bpl.n	80054a0 <_printf_float+0x24c>
 80054ee:	ee18 3a10 	vmov	r3, s16
 80054f2:	4652      	mov	r2, sl
 80054f4:	4631      	mov	r1, r6
 80054f6:	4628      	mov	r0, r5
 80054f8:	47b8      	blx	r7
 80054fa:	3001      	adds	r0, #1
 80054fc:	f43f af09 	beq.w	8005312 <_printf_float+0xbe>
 8005500:	f04f 0900 	mov.w	r9, #0
 8005504:	f104 0a1a 	add.w	sl, r4, #26
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	425b      	negs	r3, r3
 800550c:	454b      	cmp	r3, r9
 800550e:	dc01      	bgt.n	8005514 <_printf_float+0x2c0>
 8005510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005512:	e792      	b.n	800543a <_printf_float+0x1e6>
 8005514:	2301      	movs	r3, #1
 8005516:	4652      	mov	r2, sl
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f aef7 	beq.w	8005312 <_printf_float+0xbe>
 8005524:	f109 0901 	add.w	r9, r9, #1
 8005528:	e7ee      	b.n	8005508 <_printf_float+0x2b4>
 800552a:	bf00      	nop
 800552c:	7fefffff 	.word	0x7fefffff
 8005530:	08007ed0 	.word	0x08007ed0
 8005534:	08007ed4 	.word	0x08007ed4
 8005538:	08007ed8 	.word	0x08007ed8
 800553c:	08007edc 	.word	0x08007edc
 8005540:	08007ee0 	.word	0x08007ee0
 8005544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005548:	429a      	cmp	r2, r3
 800554a:	bfa8      	it	ge
 800554c:	461a      	movge	r2, r3
 800554e:	2a00      	cmp	r2, #0
 8005550:	4691      	mov	r9, r2
 8005552:	dc37      	bgt.n	80055c4 <_printf_float+0x370>
 8005554:	f04f 0b00 	mov.w	fp, #0
 8005558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800555c:	f104 021a 	add.w	r2, r4, #26
 8005560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005562:	9305      	str	r3, [sp, #20]
 8005564:	eba3 0309 	sub.w	r3, r3, r9
 8005568:	455b      	cmp	r3, fp
 800556a:	dc33      	bgt.n	80055d4 <_printf_float+0x380>
 800556c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005570:	429a      	cmp	r2, r3
 8005572:	db3b      	blt.n	80055ec <_printf_float+0x398>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07da      	lsls	r2, r3, #31
 8005578:	d438      	bmi.n	80055ec <_printf_float+0x398>
 800557a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800557e:	eba2 0903 	sub.w	r9, r2, r3
 8005582:	9b05      	ldr	r3, [sp, #20]
 8005584:	1ad2      	subs	r2, r2, r3
 8005586:	4591      	cmp	r9, r2
 8005588:	bfa8      	it	ge
 800558a:	4691      	movge	r9, r2
 800558c:	f1b9 0f00 	cmp.w	r9, #0
 8005590:	dc35      	bgt.n	80055fe <_printf_float+0x3aa>
 8005592:	f04f 0800 	mov.w	r8, #0
 8005596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800559a:	f104 0a1a 	add.w	sl, r4, #26
 800559e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	eba3 0309 	sub.w	r3, r3, r9
 80055a8:	4543      	cmp	r3, r8
 80055aa:	f77f af79 	ble.w	80054a0 <_printf_float+0x24c>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4652      	mov	r2, sl
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	f43f aeaa 	beq.w	8005312 <_printf_float+0xbe>
 80055be:	f108 0801 	add.w	r8, r8, #1
 80055c2:	e7ec      	b.n	800559e <_printf_float+0x34a>
 80055c4:	4613      	mov	r3, r2
 80055c6:	4631      	mov	r1, r6
 80055c8:	4642      	mov	r2, r8
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b8      	blx	r7
 80055ce:	3001      	adds	r0, #1
 80055d0:	d1c0      	bne.n	8005554 <_printf_float+0x300>
 80055d2:	e69e      	b.n	8005312 <_printf_float+0xbe>
 80055d4:	2301      	movs	r3, #1
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	9205      	str	r2, [sp, #20]
 80055dc:	47b8      	blx	r7
 80055de:	3001      	adds	r0, #1
 80055e0:	f43f ae97 	beq.w	8005312 <_printf_float+0xbe>
 80055e4:	9a05      	ldr	r2, [sp, #20]
 80055e6:	f10b 0b01 	add.w	fp, fp, #1
 80055ea:	e7b9      	b.n	8005560 <_printf_float+0x30c>
 80055ec:	ee18 3a10 	vmov	r3, s16
 80055f0:	4652      	mov	r2, sl
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	d1be      	bne.n	800557a <_printf_float+0x326>
 80055fc:	e689      	b.n	8005312 <_printf_float+0xbe>
 80055fe:	9a05      	ldr	r2, [sp, #20]
 8005600:	464b      	mov	r3, r9
 8005602:	4442      	add	r2, r8
 8005604:	4631      	mov	r1, r6
 8005606:	4628      	mov	r0, r5
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	d1c1      	bne.n	8005592 <_printf_float+0x33e>
 800560e:	e680      	b.n	8005312 <_printf_float+0xbe>
 8005610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005612:	2a01      	cmp	r2, #1
 8005614:	dc01      	bgt.n	800561a <_printf_float+0x3c6>
 8005616:	07db      	lsls	r3, r3, #31
 8005618:	d53a      	bpl.n	8005690 <_printf_float+0x43c>
 800561a:	2301      	movs	r3, #1
 800561c:	4642      	mov	r2, r8
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	f43f ae74 	beq.w	8005312 <_printf_float+0xbe>
 800562a:	ee18 3a10 	vmov	r3, s16
 800562e:	4652      	mov	r2, sl
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	f43f ae6b 	beq.w	8005312 <_printf_float+0xbe>
 800563c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005640:	2200      	movs	r2, #0
 8005642:	2300      	movs	r3, #0
 8005644:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005648:	f7fb fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800564c:	b9d8      	cbnz	r0, 8005686 <_printf_float+0x432>
 800564e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005652:	f108 0201 	add.w	r2, r8, #1
 8005656:	4631      	mov	r1, r6
 8005658:	4628      	mov	r0, r5
 800565a:	47b8      	blx	r7
 800565c:	3001      	adds	r0, #1
 800565e:	d10e      	bne.n	800567e <_printf_float+0x42a>
 8005660:	e657      	b.n	8005312 <_printf_float+0xbe>
 8005662:	2301      	movs	r3, #1
 8005664:	4652      	mov	r2, sl
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	f43f ae50 	beq.w	8005312 <_printf_float+0xbe>
 8005672:	f108 0801 	add.w	r8, r8, #1
 8005676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005678:	3b01      	subs	r3, #1
 800567a:	4543      	cmp	r3, r8
 800567c:	dcf1      	bgt.n	8005662 <_printf_float+0x40e>
 800567e:	464b      	mov	r3, r9
 8005680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005684:	e6da      	b.n	800543c <_printf_float+0x1e8>
 8005686:	f04f 0800 	mov.w	r8, #0
 800568a:	f104 0a1a 	add.w	sl, r4, #26
 800568e:	e7f2      	b.n	8005676 <_printf_float+0x422>
 8005690:	2301      	movs	r3, #1
 8005692:	4642      	mov	r2, r8
 8005694:	e7df      	b.n	8005656 <_printf_float+0x402>
 8005696:	2301      	movs	r3, #1
 8005698:	464a      	mov	r2, r9
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	f43f ae36 	beq.w	8005312 <_printf_float+0xbe>
 80056a6:	f108 0801 	add.w	r8, r8, #1
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056ae:	1a5b      	subs	r3, r3, r1
 80056b0:	4543      	cmp	r3, r8
 80056b2:	dcf0      	bgt.n	8005696 <_printf_float+0x442>
 80056b4:	e6f8      	b.n	80054a8 <_printf_float+0x254>
 80056b6:	f04f 0800 	mov.w	r8, #0
 80056ba:	f104 0919 	add.w	r9, r4, #25
 80056be:	e7f4      	b.n	80056aa <_printf_float+0x456>

080056c0 <_printf_common>:
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	4616      	mov	r6, r2
 80056c6:	4699      	mov	r9, r3
 80056c8:	688a      	ldr	r2, [r1, #8]
 80056ca:	690b      	ldr	r3, [r1, #16]
 80056cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	bfb8      	it	lt
 80056d4:	4613      	movlt	r3, r2
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056dc:	4607      	mov	r7, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	b10a      	cbz	r2, 80056e6 <_printf_common+0x26>
 80056e2:	3301      	adds	r3, #1
 80056e4:	6033      	str	r3, [r6, #0]
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	0699      	lsls	r1, r3, #26
 80056ea:	bf42      	ittt	mi
 80056ec:	6833      	ldrmi	r3, [r6, #0]
 80056ee:	3302      	addmi	r3, #2
 80056f0:	6033      	strmi	r3, [r6, #0]
 80056f2:	6825      	ldr	r5, [r4, #0]
 80056f4:	f015 0506 	ands.w	r5, r5, #6
 80056f8:	d106      	bne.n	8005708 <_printf_common+0x48>
 80056fa:	f104 0a19 	add.w	sl, r4, #25
 80056fe:	68e3      	ldr	r3, [r4, #12]
 8005700:	6832      	ldr	r2, [r6, #0]
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	42ab      	cmp	r3, r5
 8005706:	dc26      	bgt.n	8005756 <_printf_common+0x96>
 8005708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800570c:	1e13      	subs	r3, r2, #0
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	bf18      	it	ne
 8005712:	2301      	movne	r3, #1
 8005714:	0692      	lsls	r2, r2, #26
 8005716:	d42b      	bmi.n	8005770 <_printf_common+0xb0>
 8005718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800571c:	4649      	mov	r1, r9
 800571e:	4638      	mov	r0, r7
 8005720:	47c0      	blx	r8
 8005722:	3001      	adds	r0, #1
 8005724:	d01e      	beq.n	8005764 <_printf_common+0xa4>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	f003 0306 	and.w	r3, r3, #6
 800572e:	2b04      	cmp	r3, #4
 8005730:	bf02      	ittt	eq
 8005732:	68e5      	ldreq	r5, [r4, #12]
 8005734:	6833      	ldreq	r3, [r6, #0]
 8005736:	1aed      	subeq	r5, r5, r3
 8005738:	68a3      	ldr	r3, [r4, #8]
 800573a:	bf0c      	ite	eq
 800573c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005740:	2500      	movne	r5, #0
 8005742:	4293      	cmp	r3, r2
 8005744:	bfc4      	itt	gt
 8005746:	1a9b      	subgt	r3, r3, r2
 8005748:	18ed      	addgt	r5, r5, r3
 800574a:	2600      	movs	r6, #0
 800574c:	341a      	adds	r4, #26
 800574e:	42b5      	cmp	r5, r6
 8005750:	d11a      	bne.n	8005788 <_printf_common+0xc8>
 8005752:	2000      	movs	r0, #0
 8005754:	e008      	b.n	8005768 <_printf_common+0xa8>
 8005756:	2301      	movs	r3, #1
 8005758:	4652      	mov	r2, sl
 800575a:	4649      	mov	r1, r9
 800575c:	4638      	mov	r0, r7
 800575e:	47c0      	blx	r8
 8005760:	3001      	adds	r0, #1
 8005762:	d103      	bne.n	800576c <_printf_common+0xac>
 8005764:	f04f 30ff 	mov.w	r0, #4294967295
 8005768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576c:	3501      	adds	r5, #1
 800576e:	e7c6      	b.n	80056fe <_printf_common+0x3e>
 8005770:	18e1      	adds	r1, r4, r3
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	2030      	movs	r0, #48	; 0x30
 8005776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800577a:	4422      	add	r2, r4
 800577c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005784:	3302      	adds	r3, #2
 8005786:	e7c7      	b.n	8005718 <_printf_common+0x58>
 8005788:	2301      	movs	r3, #1
 800578a:	4622      	mov	r2, r4
 800578c:	4649      	mov	r1, r9
 800578e:	4638      	mov	r0, r7
 8005790:	47c0      	blx	r8
 8005792:	3001      	adds	r0, #1
 8005794:	d0e6      	beq.n	8005764 <_printf_common+0xa4>
 8005796:	3601      	adds	r6, #1
 8005798:	e7d9      	b.n	800574e <_printf_common+0x8e>
	...

0800579c <_printf_i>:
 800579c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	7e0f      	ldrb	r7, [r1, #24]
 80057a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057a4:	2f78      	cmp	r7, #120	; 0x78
 80057a6:	4691      	mov	r9, r2
 80057a8:	4680      	mov	r8, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	469a      	mov	sl, r3
 80057ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057b2:	d807      	bhi.n	80057c4 <_printf_i+0x28>
 80057b4:	2f62      	cmp	r7, #98	; 0x62
 80057b6:	d80a      	bhi.n	80057ce <_printf_i+0x32>
 80057b8:	2f00      	cmp	r7, #0
 80057ba:	f000 80d4 	beq.w	8005966 <_printf_i+0x1ca>
 80057be:	2f58      	cmp	r7, #88	; 0x58
 80057c0:	f000 80c0 	beq.w	8005944 <_printf_i+0x1a8>
 80057c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057cc:	e03a      	b.n	8005844 <_printf_i+0xa8>
 80057ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057d2:	2b15      	cmp	r3, #21
 80057d4:	d8f6      	bhi.n	80057c4 <_printf_i+0x28>
 80057d6:	a101      	add	r1, pc, #4	; (adr r1, 80057dc <_printf_i+0x40>)
 80057d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057dc:	08005835 	.word	0x08005835
 80057e0:	08005849 	.word	0x08005849
 80057e4:	080057c5 	.word	0x080057c5
 80057e8:	080057c5 	.word	0x080057c5
 80057ec:	080057c5 	.word	0x080057c5
 80057f0:	080057c5 	.word	0x080057c5
 80057f4:	08005849 	.word	0x08005849
 80057f8:	080057c5 	.word	0x080057c5
 80057fc:	080057c5 	.word	0x080057c5
 8005800:	080057c5 	.word	0x080057c5
 8005804:	080057c5 	.word	0x080057c5
 8005808:	0800594d 	.word	0x0800594d
 800580c:	08005875 	.word	0x08005875
 8005810:	08005907 	.word	0x08005907
 8005814:	080057c5 	.word	0x080057c5
 8005818:	080057c5 	.word	0x080057c5
 800581c:	0800596f 	.word	0x0800596f
 8005820:	080057c5 	.word	0x080057c5
 8005824:	08005875 	.word	0x08005875
 8005828:	080057c5 	.word	0x080057c5
 800582c:	080057c5 	.word	0x080057c5
 8005830:	0800590f 	.word	0x0800590f
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	1d1a      	adds	r2, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	602a      	str	r2, [r5, #0]
 800583c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005844:	2301      	movs	r3, #1
 8005846:	e09f      	b.n	8005988 <_printf_i+0x1ec>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	682b      	ldr	r3, [r5, #0]
 800584c:	0607      	lsls	r7, r0, #24
 800584e:	f103 0104 	add.w	r1, r3, #4
 8005852:	6029      	str	r1, [r5, #0]
 8005854:	d501      	bpl.n	800585a <_printf_i+0xbe>
 8005856:	681e      	ldr	r6, [r3, #0]
 8005858:	e003      	b.n	8005862 <_printf_i+0xc6>
 800585a:	0646      	lsls	r6, r0, #25
 800585c:	d5fb      	bpl.n	8005856 <_printf_i+0xba>
 800585e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005862:	2e00      	cmp	r6, #0
 8005864:	da03      	bge.n	800586e <_printf_i+0xd2>
 8005866:	232d      	movs	r3, #45	; 0x2d
 8005868:	4276      	negs	r6, r6
 800586a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586e:	485a      	ldr	r0, [pc, #360]	; (80059d8 <_printf_i+0x23c>)
 8005870:	230a      	movs	r3, #10
 8005872:	e012      	b.n	800589a <_printf_i+0xfe>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	6820      	ldr	r0, [r4, #0]
 8005878:	1d19      	adds	r1, r3, #4
 800587a:	6029      	str	r1, [r5, #0]
 800587c:	0605      	lsls	r5, r0, #24
 800587e:	d501      	bpl.n	8005884 <_printf_i+0xe8>
 8005880:	681e      	ldr	r6, [r3, #0]
 8005882:	e002      	b.n	800588a <_printf_i+0xee>
 8005884:	0641      	lsls	r1, r0, #25
 8005886:	d5fb      	bpl.n	8005880 <_printf_i+0xe4>
 8005888:	881e      	ldrh	r6, [r3, #0]
 800588a:	4853      	ldr	r0, [pc, #332]	; (80059d8 <_printf_i+0x23c>)
 800588c:	2f6f      	cmp	r7, #111	; 0x6f
 800588e:	bf0c      	ite	eq
 8005890:	2308      	moveq	r3, #8
 8005892:	230a      	movne	r3, #10
 8005894:	2100      	movs	r1, #0
 8005896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800589a:	6865      	ldr	r5, [r4, #4]
 800589c:	60a5      	str	r5, [r4, #8]
 800589e:	2d00      	cmp	r5, #0
 80058a0:	bfa2      	ittt	ge
 80058a2:	6821      	ldrge	r1, [r4, #0]
 80058a4:	f021 0104 	bicge.w	r1, r1, #4
 80058a8:	6021      	strge	r1, [r4, #0]
 80058aa:	b90e      	cbnz	r6, 80058b0 <_printf_i+0x114>
 80058ac:	2d00      	cmp	r5, #0
 80058ae:	d04b      	beq.n	8005948 <_printf_i+0x1ac>
 80058b0:	4615      	mov	r5, r2
 80058b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058b6:	fb03 6711 	mls	r7, r3, r1, r6
 80058ba:	5dc7      	ldrb	r7, [r0, r7]
 80058bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058c0:	4637      	mov	r7, r6
 80058c2:	42bb      	cmp	r3, r7
 80058c4:	460e      	mov	r6, r1
 80058c6:	d9f4      	bls.n	80058b2 <_printf_i+0x116>
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d10b      	bne.n	80058e4 <_printf_i+0x148>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	07de      	lsls	r6, r3, #31
 80058d0:	d508      	bpl.n	80058e4 <_printf_i+0x148>
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	6861      	ldr	r1, [r4, #4]
 80058d6:	4299      	cmp	r1, r3
 80058d8:	bfde      	ittt	le
 80058da:	2330      	movle	r3, #48	; 0x30
 80058dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058e4:	1b52      	subs	r2, r2, r5
 80058e6:	6122      	str	r2, [r4, #16]
 80058e8:	f8cd a000 	str.w	sl, [sp]
 80058ec:	464b      	mov	r3, r9
 80058ee:	aa03      	add	r2, sp, #12
 80058f0:	4621      	mov	r1, r4
 80058f2:	4640      	mov	r0, r8
 80058f4:	f7ff fee4 	bl	80056c0 <_printf_common>
 80058f8:	3001      	adds	r0, #1
 80058fa:	d14a      	bne.n	8005992 <_printf_i+0x1f6>
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005900:	b004      	add	sp, #16
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f043 0320 	orr.w	r3, r3, #32
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	4833      	ldr	r0, [pc, #204]	; (80059dc <_printf_i+0x240>)
 8005910:	2778      	movs	r7, #120	; 0x78
 8005912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	6829      	ldr	r1, [r5, #0]
 800591a:	061f      	lsls	r7, r3, #24
 800591c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005920:	d402      	bmi.n	8005928 <_printf_i+0x18c>
 8005922:	065f      	lsls	r7, r3, #25
 8005924:	bf48      	it	mi
 8005926:	b2b6      	uxthmi	r6, r6
 8005928:	07df      	lsls	r7, r3, #31
 800592a:	bf48      	it	mi
 800592c:	f043 0320 	orrmi.w	r3, r3, #32
 8005930:	6029      	str	r1, [r5, #0]
 8005932:	bf48      	it	mi
 8005934:	6023      	strmi	r3, [r4, #0]
 8005936:	b91e      	cbnz	r6, 8005940 <_printf_i+0x1a4>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	f023 0320 	bic.w	r3, r3, #32
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	2310      	movs	r3, #16
 8005942:	e7a7      	b.n	8005894 <_printf_i+0xf8>
 8005944:	4824      	ldr	r0, [pc, #144]	; (80059d8 <_printf_i+0x23c>)
 8005946:	e7e4      	b.n	8005912 <_printf_i+0x176>
 8005948:	4615      	mov	r5, r2
 800594a:	e7bd      	b.n	80058c8 <_printf_i+0x12c>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	6826      	ldr	r6, [r4, #0]
 8005950:	6961      	ldr	r1, [r4, #20]
 8005952:	1d18      	adds	r0, r3, #4
 8005954:	6028      	str	r0, [r5, #0]
 8005956:	0635      	lsls	r5, r6, #24
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	d501      	bpl.n	8005960 <_printf_i+0x1c4>
 800595c:	6019      	str	r1, [r3, #0]
 800595e:	e002      	b.n	8005966 <_printf_i+0x1ca>
 8005960:	0670      	lsls	r0, r6, #25
 8005962:	d5fb      	bpl.n	800595c <_printf_i+0x1c0>
 8005964:	8019      	strh	r1, [r3, #0]
 8005966:	2300      	movs	r3, #0
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	4615      	mov	r5, r2
 800596c:	e7bc      	b.n	80058e8 <_printf_i+0x14c>
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	1d1a      	adds	r2, r3, #4
 8005972:	602a      	str	r2, [r5, #0]
 8005974:	681d      	ldr	r5, [r3, #0]
 8005976:	6862      	ldr	r2, [r4, #4]
 8005978:	2100      	movs	r1, #0
 800597a:	4628      	mov	r0, r5
 800597c:	f7fa fc28 	bl	80001d0 <memchr>
 8005980:	b108      	cbz	r0, 8005986 <_printf_i+0x1ea>
 8005982:	1b40      	subs	r0, r0, r5
 8005984:	6060      	str	r0, [r4, #4]
 8005986:	6863      	ldr	r3, [r4, #4]
 8005988:	6123      	str	r3, [r4, #16]
 800598a:	2300      	movs	r3, #0
 800598c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005990:	e7aa      	b.n	80058e8 <_printf_i+0x14c>
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	462a      	mov	r2, r5
 8005996:	4649      	mov	r1, r9
 8005998:	4640      	mov	r0, r8
 800599a:	47d0      	blx	sl
 800599c:	3001      	adds	r0, #1
 800599e:	d0ad      	beq.n	80058fc <_printf_i+0x160>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	079b      	lsls	r3, r3, #30
 80059a4:	d413      	bmi.n	80059ce <_printf_i+0x232>
 80059a6:	68e0      	ldr	r0, [r4, #12]
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	4298      	cmp	r0, r3
 80059ac:	bfb8      	it	lt
 80059ae:	4618      	movlt	r0, r3
 80059b0:	e7a6      	b.n	8005900 <_printf_i+0x164>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4632      	mov	r2, r6
 80059b6:	4649      	mov	r1, r9
 80059b8:	4640      	mov	r0, r8
 80059ba:	47d0      	blx	sl
 80059bc:	3001      	adds	r0, #1
 80059be:	d09d      	beq.n	80058fc <_printf_i+0x160>
 80059c0:	3501      	adds	r5, #1
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	9903      	ldr	r1, [sp, #12]
 80059c6:	1a5b      	subs	r3, r3, r1
 80059c8:	42ab      	cmp	r3, r5
 80059ca:	dcf2      	bgt.n	80059b2 <_printf_i+0x216>
 80059cc:	e7eb      	b.n	80059a6 <_printf_i+0x20a>
 80059ce:	2500      	movs	r5, #0
 80059d0:	f104 0619 	add.w	r6, r4, #25
 80059d4:	e7f5      	b.n	80059c2 <_printf_i+0x226>
 80059d6:	bf00      	nop
 80059d8:	08007ee2 	.word	0x08007ee2
 80059dc:	08007ef3 	.word	0x08007ef3

080059e0 <std>:
 80059e0:	2300      	movs	r3, #0
 80059e2:	b510      	push	{r4, lr}
 80059e4:	4604      	mov	r4, r0
 80059e6:	e9c0 3300 	strd	r3, r3, [r0]
 80059ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ee:	6083      	str	r3, [r0, #8]
 80059f0:	8181      	strh	r1, [r0, #12]
 80059f2:	6643      	str	r3, [r0, #100]	; 0x64
 80059f4:	81c2      	strh	r2, [r0, #14]
 80059f6:	6183      	str	r3, [r0, #24]
 80059f8:	4619      	mov	r1, r3
 80059fa:	2208      	movs	r2, #8
 80059fc:	305c      	adds	r0, #92	; 0x5c
 80059fe:	f000 f914 	bl	8005c2a <memset>
 8005a02:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <std+0x58>)
 8005a04:	6263      	str	r3, [r4, #36]	; 0x24
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <std+0x5c>)
 8005a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <std+0x60>)
 8005a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <std+0x64>)
 8005a10:	6323      	str	r3, [r4, #48]	; 0x30
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <std+0x68>)
 8005a14:	6224      	str	r4, [r4, #32]
 8005a16:	429c      	cmp	r4, r3
 8005a18:	d006      	beq.n	8005a28 <std+0x48>
 8005a1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a1e:	4294      	cmp	r4, r2
 8005a20:	d002      	beq.n	8005a28 <std+0x48>
 8005a22:	33d0      	adds	r3, #208	; 0xd0
 8005a24:	429c      	cmp	r4, r3
 8005a26:	d105      	bne.n	8005a34 <std+0x54>
 8005a28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a30:	f000 b978 	b.w	8005d24 <__retarget_lock_init_recursive>
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	bf00      	nop
 8005a38:	08005ba5 	.word	0x08005ba5
 8005a3c:	08005bc7 	.word	0x08005bc7
 8005a40:	08005bff 	.word	0x08005bff
 8005a44:	08005c23 	.word	0x08005c23
 8005a48:	200003c0 	.word	0x200003c0

08005a4c <stdio_exit_handler>:
 8005a4c:	4a02      	ldr	r2, [pc, #8]	; (8005a58 <stdio_exit_handler+0xc>)
 8005a4e:	4903      	ldr	r1, [pc, #12]	; (8005a5c <stdio_exit_handler+0x10>)
 8005a50:	4803      	ldr	r0, [pc, #12]	; (8005a60 <stdio_exit_handler+0x14>)
 8005a52:	f000 b869 	b.w	8005b28 <_fwalk_sglue>
 8005a56:	bf00      	nop
 8005a58:	20000010 	.word	0x20000010
 8005a5c:	080076d9 	.word	0x080076d9
 8005a60:	2000001c 	.word	0x2000001c

08005a64 <cleanup_stdio>:
 8005a64:	6841      	ldr	r1, [r0, #4]
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <cleanup_stdio+0x34>)
 8005a68:	4299      	cmp	r1, r3
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	d001      	beq.n	8005a74 <cleanup_stdio+0x10>
 8005a70:	f001 fe32 	bl	80076d8 <_fflush_r>
 8005a74:	68a1      	ldr	r1, [r4, #8]
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <cleanup_stdio+0x38>)
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	d002      	beq.n	8005a82 <cleanup_stdio+0x1e>
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f001 fe2b 	bl	80076d8 <_fflush_r>
 8005a82:	68e1      	ldr	r1, [r4, #12]
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <cleanup_stdio+0x3c>)
 8005a86:	4299      	cmp	r1, r3
 8005a88:	d004      	beq.n	8005a94 <cleanup_stdio+0x30>
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f001 be22 	b.w	80076d8 <_fflush_r>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	bf00      	nop
 8005a98:	200003c0 	.word	0x200003c0
 8005a9c:	20000428 	.word	0x20000428
 8005aa0:	20000490 	.word	0x20000490

08005aa4 <global_stdio_init.part.0>:
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <global_stdio_init.part.0+0x30>)
 8005aa8:	4c0b      	ldr	r4, [pc, #44]	; (8005ad8 <global_stdio_init.part.0+0x34>)
 8005aaa:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <global_stdio_init.part.0+0x38>)
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	f7ff ff94 	bl	80059e0 <std>
 8005ab8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005abc:	2201      	movs	r2, #1
 8005abe:	2109      	movs	r1, #9
 8005ac0:	f7ff ff8e 	bl	80059e0 <std>
 8005ac4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ac8:	2202      	movs	r2, #2
 8005aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ace:	2112      	movs	r1, #18
 8005ad0:	f7ff bf86 	b.w	80059e0 <std>
 8005ad4:	200004f8 	.word	0x200004f8
 8005ad8:	200003c0 	.word	0x200003c0
 8005adc:	08005a4d 	.word	0x08005a4d

08005ae0 <__sfp_lock_acquire>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <__sfp_lock_acquire+0x8>)
 8005ae2:	f000 b920 	b.w	8005d26 <__retarget_lock_acquire_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	20000501 	.word	0x20000501

08005aec <__sfp_lock_release>:
 8005aec:	4801      	ldr	r0, [pc, #4]	; (8005af4 <__sfp_lock_release+0x8>)
 8005aee:	f000 b91b 	b.w	8005d28 <__retarget_lock_release_recursive>
 8005af2:	bf00      	nop
 8005af4:	20000501 	.word	0x20000501

08005af8 <__sinit>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	4604      	mov	r4, r0
 8005afc:	f7ff fff0 	bl	8005ae0 <__sfp_lock_acquire>
 8005b00:	6a23      	ldr	r3, [r4, #32]
 8005b02:	b11b      	cbz	r3, 8005b0c <__sinit+0x14>
 8005b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b08:	f7ff bff0 	b.w	8005aec <__sfp_lock_release>
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <__sinit+0x28>)
 8005b0e:	6223      	str	r3, [r4, #32]
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <__sinit+0x2c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f5      	bne.n	8005b04 <__sinit+0xc>
 8005b18:	f7ff ffc4 	bl	8005aa4 <global_stdio_init.part.0>
 8005b1c:	e7f2      	b.n	8005b04 <__sinit+0xc>
 8005b1e:	bf00      	nop
 8005b20:	08005a65 	.word	0x08005a65
 8005b24:	200004f8 	.word	0x200004f8

08005b28 <_fwalk_sglue>:
 8005b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	4688      	mov	r8, r1
 8005b30:	4614      	mov	r4, r2
 8005b32:	2600      	movs	r6, #0
 8005b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b38:	f1b9 0901 	subs.w	r9, r9, #1
 8005b3c:	d505      	bpl.n	8005b4a <_fwalk_sglue+0x22>
 8005b3e:	6824      	ldr	r4, [r4, #0]
 8005b40:	2c00      	cmp	r4, #0
 8005b42:	d1f7      	bne.n	8005b34 <_fwalk_sglue+0xc>
 8005b44:	4630      	mov	r0, r6
 8005b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d907      	bls.n	8005b60 <_fwalk_sglue+0x38>
 8005b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b54:	3301      	adds	r3, #1
 8005b56:	d003      	beq.n	8005b60 <_fwalk_sglue+0x38>
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	47c0      	blx	r8
 8005b5e:	4306      	orrs	r6, r0
 8005b60:	3568      	adds	r5, #104	; 0x68
 8005b62:	e7e9      	b.n	8005b38 <_fwalk_sglue+0x10>

08005b64 <siprintf>:
 8005b64:	b40e      	push	{r1, r2, r3}
 8005b66:	b500      	push	{lr}
 8005b68:	b09c      	sub	sp, #112	; 0x70
 8005b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b6c:	9002      	str	r0, [sp, #8]
 8005b6e:	9006      	str	r0, [sp, #24]
 8005b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b74:	4809      	ldr	r0, [pc, #36]	; (8005b9c <siprintf+0x38>)
 8005b76:	9107      	str	r1, [sp, #28]
 8005b78:	9104      	str	r1, [sp, #16]
 8005b7a:	4909      	ldr	r1, [pc, #36]	; (8005ba0 <siprintf+0x3c>)
 8005b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b80:	9105      	str	r1, [sp, #20]
 8005b82:	6800      	ldr	r0, [r0, #0]
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	a902      	add	r1, sp, #8
 8005b88:	f001 fc22 	bl	80073d0 <_svfiprintf_r>
 8005b8c:	9b02      	ldr	r3, [sp, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	b01c      	add	sp, #112	; 0x70
 8005b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b98:	b003      	add	sp, #12
 8005b9a:	4770      	bx	lr
 8005b9c:	20000068 	.word	0x20000068
 8005ba0:	ffff0208 	.word	0xffff0208

08005ba4 <__sread>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bac:	f000 f86c 	bl	8005c88 <_read_r>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	bfab      	itete	ge
 8005bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8005bb8:	181b      	addge	r3, r3, r0
 8005bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bbe:	bfac      	ite	ge
 8005bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bc2:	81a3      	strhlt	r3, [r4, #12]
 8005bc4:	bd10      	pop	{r4, pc}

08005bc6 <__swrite>:
 8005bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bca:	461f      	mov	r7, r3
 8005bcc:	898b      	ldrh	r3, [r1, #12]
 8005bce:	05db      	lsls	r3, r3, #23
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	4616      	mov	r6, r2
 8005bd6:	d505      	bpl.n	8005be4 <__swrite+0x1e>
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	2302      	movs	r3, #2
 8005bde:	2200      	movs	r2, #0
 8005be0:	f000 f840 	bl	8005c64 <_lseek_r>
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bee:	81a3      	strh	r3, [r4, #12]
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfa:	f000 b857 	b.w	8005cac <_write_r>

08005bfe <__sseek>:
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	460c      	mov	r4, r1
 8005c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c06:	f000 f82d 	bl	8005c64 <_lseek_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	bf15      	itete	ne
 8005c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c1a:	81a3      	strheq	r3, [r4, #12]
 8005c1c:	bf18      	it	ne
 8005c1e:	81a3      	strhne	r3, [r4, #12]
 8005c20:	bd10      	pop	{r4, pc}

08005c22 <__sclose>:
 8005c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c26:	f000 b80d 	b.w	8005c44 <_close_r>

08005c2a <memset>:
 8005c2a:	4402      	add	r2, r0
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d100      	bne.n	8005c34 <memset+0xa>
 8005c32:	4770      	bx	lr
 8005c34:	f803 1b01 	strb.w	r1, [r3], #1
 8005c38:	e7f9      	b.n	8005c2e <memset+0x4>
	...

08005c3c <_localeconv_r>:
 8005c3c:	4800      	ldr	r0, [pc, #0]	; (8005c40 <_localeconv_r+0x4>)
 8005c3e:	4770      	bx	lr
 8005c40:	2000015c 	.word	0x2000015c

08005c44 <_close_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d06      	ldr	r5, [pc, #24]	; (8005c60 <_close_r+0x1c>)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	f7fb fcbb 	bl	80015ca <_close>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_close_r+0x1a>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_close_r+0x1a>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	200004fc 	.word	0x200004fc

08005c64 <_lseek_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d07      	ldr	r5, [pc, #28]	; (8005c84 <_lseek_r+0x20>)
 8005c68:	4604      	mov	r4, r0
 8005c6a:	4608      	mov	r0, r1
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	2200      	movs	r2, #0
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f7fb fcd0 	bl	8001618 <_lseek>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_lseek_r+0x1e>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_lseek_r+0x1e>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	200004fc 	.word	0x200004fc

08005c88 <_read_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d07      	ldr	r5, [pc, #28]	; (8005ca8 <_read_r+0x20>)
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	4608      	mov	r0, r1
 8005c90:	4611      	mov	r1, r2
 8005c92:	2200      	movs	r2, #0
 8005c94:	602a      	str	r2, [r5, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f7fb fc5e 	bl	8001558 <_read>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_read_r+0x1e>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_read_r+0x1e>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	200004fc 	.word	0x200004fc

08005cac <_write_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	; (8005ccc <_write_r+0x20>)
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f7fb fc69 	bl	8001592 <_write>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_write_r+0x1e>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_write_r+0x1e>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	200004fc 	.word	0x200004fc

08005cd0 <__errno>:
 8005cd0:	4b01      	ldr	r3, [pc, #4]	; (8005cd8 <__errno+0x8>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000068 	.word	0x20000068

08005cdc <__libc_init_array>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	4d0d      	ldr	r5, [pc, #52]	; (8005d14 <__libc_init_array+0x38>)
 8005ce0:	4c0d      	ldr	r4, [pc, #52]	; (8005d18 <__libc_init_array+0x3c>)
 8005ce2:	1b64      	subs	r4, r4, r5
 8005ce4:	10a4      	asrs	r4, r4, #2
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	42a6      	cmp	r6, r4
 8005cea:	d109      	bne.n	8005d00 <__libc_init_array+0x24>
 8005cec:	4d0b      	ldr	r5, [pc, #44]	; (8005d1c <__libc_init_array+0x40>)
 8005cee:	4c0c      	ldr	r4, [pc, #48]	; (8005d20 <__libc_init_array+0x44>)
 8005cf0:	f002 f896 	bl	8007e20 <_init>
 8005cf4:	1b64      	subs	r4, r4, r5
 8005cf6:	10a4      	asrs	r4, r4, #2
 8005cf8:	2600      	movs	r6, #0
 8005cfa:	42a6      	cmp	r6, r4
 8005cfc:	d105      	bne.n	8005d0a <__libc_init_array+0x2e>
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d04:	4798      	blx	r3
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7ee      	b.n	8005ce8 <__libc_init_array+0xc>
 8005d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0e:	4798      	blx	r3
 8005d10:	3601      	adds	r6, #1
 8005d12:	e7f2      	b.n	8005cfa <__libc_init_array+0x1e>
 8005d14:	08008244 	.word	0x08008244
 8005d18:	08008244 	.word	0x08008244
 8005d1c:	08008244 	.word	0x08008244
 8005d20:	08008248 	.word	0x08008248

08005d24 <__retarget_lock_init_recursive>:
 8005d24:	4770      	bx	lr

08005d26 <__retarget_lock_acquire_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <__retarget_lock_release_recursive>:
 8005d28:	4770      	bx	lr

08005d2a <quorem>:
 8005d2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2e:	6903      	ldr	r3, [r0, #16]
 8005d30:	690c      	ldr	r4, [r1, #16]
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	4607      	mov	r7, r0
 8005d36:	db7e      	blt.n	8005e36 <quorem+0x10c>
 8005d38:	3c01      	subs	r4, #1
 8005d3a:	f101 0814 	add.w	r8, r1, #20
 8005d3e:	f100 0514 	add.w	r5, r0, #20
 8005d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d50:	3301      	adds	r3, #1
 8005d52:	429a      	cmp	r2, r3
 8005d54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d60:	d331      	bcc.n	8005dc6 <quorem+0x9c>
 8005d62:	f04f 0e00 	mov.w	lr, #0
 8005d66:	4640      	mov	r0, r8
 8005d68:	46ac      	mov	ip, r5
 8005d6a:	46f2      	mov	sl, lr
 8005d6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d70:	b293      	uxth	r3, r2
 8005d72:	fb06 e303 	mla	r3, r6, r3, lr
 8005d76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d7a:	0c1a      	lsrs	r2, r3, #16
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8005d82:	f8dc a000 	ldr.w	sl, [ip]
 8005d86:	fa13 f38a 	uxtah	r3, r3, sl
 8005d8a:	fb06 220e 	mla	r2, r6, lr, r2
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	9b00      	ldr	r3, [sp, #0]
 8005d92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d96:	b292      	uxth	r2, r2
 8005d98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005da0:	f8bd 3000 	ldrh.w	r3, [sp]
 8005da4:	4581      	cmp	r9, r0
 8005da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005daa:	f84c 3b04 	str.w	r3, [ip], #4
 8005dae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005db2:	d2db      	bcs.n	8005d6c <quorem+0x42>
 8005db4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005db8:	b92b      	cbnz	r3, 8005dc6 <quorem+0x9c>
 8005dba:	9b01      	ldr	r3, [sp, #4]
 8005dbc:	3b04      	subs	r3, #4
 8005dbe:	429d      	cmp	r5, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	d32c      	bcc.n	8005e1e <quorem+0xf4>
 8005dc4:	613c      	str	r4, [r7, #16]
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	f001 f9a8 	bl	800711c <__mcmp>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	db22      	blt.n	8005e16 <quorem+0xec>
 8005dd0:	3601      	adds	r6, #1
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005dda:	f8d1 c000 	ldr.w	ip, [r1]
 8005dde:	b293      	uxth	r3, r2
 8005de0:	1ac3      	subs	r3, r0, r3
 8005de2:	0c12      	lsrs	r2, r2, #16
 8005de4:	fa13 f38c 	uxtah	r3, r3, ip
 8005de8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005df6:	45c1      	cmp	r9, r8
 8005df8:	f841 3b04 	str.w	r3, [r1], #4
 8005dfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e00:	d2e9      	bcs.n	8005dd6 <quorem+0xac>
 8005e02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e0a:	b922      	cbnz	r2, 8005e16 <quorem+0xec>
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	d30a      	bcc.n	8005e2a <quorem+0x100>
 8005e14:	613c      	str	r4, [r7, #16]
 8005e16:	4630      	mov	r0, r6
 8005e18:	b003      	add	sp, #12
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	3b04      	subs	r3, #4
 8005e22:	2a00      	cmp	r2, #0
 8005e24:	d1ce      	bne.n	8005dc4 <quorem+0x9a>
 8005e26:	3c01      	subs	r4, #1
 8005e28:	e7c9      	b.n	8005dbe <quorem+0x94>
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	3b04      	subs	r3, #4
 8005e2e:	2a00      	cmp	r2, #0
 8005e30:	d1f0      	bne.n	8005e14 <quorem+0xea>
 8005e32:	3c01      	subs	r4, #1
 8005e34:	e7eb      	b.n	8005e0e <quorem+0xe4>
 8005e36:	2000      	movs	r0, #0
 8005e38:	e7ee      	b.n	8005e18 <quorem+0xee>
 8005e3a:	0000      	movs	r0, r0
 8005e3c:	0000      	movs	r0, r0
	...

08005e40 <_dtoa_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	ed2d 8b04 	vpush	{d8-d9}
 8005e48:	69c5      	ldr	r5, [r0, #28]
 8005e4a:	b093      	sub	sp, #76	; 0x4c
 8005e4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e50:	ec57 6b10 	vmov	r6, r7, d0
 8005e54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e58:	9107      	str	r1, [sp, #28]
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	920a      	str	r2, [sp, #40]	; 0x28
 8005e5e:	930d      	str	r3, [sp, #52]	; 0x34
 8005e60:	b975      	cbnz	r5, 8005e80 <_dtoa_r+0x40>
 8005e62:	2010      	movs	r0, #16
 8005e64:	f000 fe2a 	bl	8006abc <malloc>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	61e0      	str	r0, [r4, #28]
 8005e6c:	b920      	cbnz	r0, 8005e78 <_dtoa_r+0x38>
 8005e6e:	4bae      	ldr	r3, [pc, #696]	; (8006128 <_dtoa_r+0x2e8>)
 8005e70:	21ef      	movs	r1, #239	; 0xef
 8005e72:	48ae      	ldr	r0, [pc, #696]	; (800612c <_dtoa_r+0x2ec>)
 8005e74:	f001 fc90 	bl	8007798 <__assert_func>
 8005e78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e7c:	6005      	str	r5, [r0, #0]
 8005e7e:	60c5      	str	r5, [r0, #12]
 8005e80:	69e3      	ldr	r3, [r4, #28]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	b151      	cbz	r1, 8005e9c <_dtoa_r+0x5c>
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	604a      	str	r2, [r1, #4]
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	4093      	lsls	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 ff07 	bl	8006ca4 <_Bfree>
 8005e96:	69e3      	ldr	r3, [r4, #28]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	1e3b      	subs	r3, r7, #0
 8005e9e:	bfbb      	ittet	lt
 8005ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ea4:	9303      	strlt	r3, [sp, #12]
 8005ea6:	2300      	movge	r3, #0
 8005ea8:	2201      	movlt	r2, #1
 8005eaa:	bfac      	ite	ge
 8005eac:	f8c8 3000 	strge.w	r3, [r8]
 8005eb0:	f8c8 2000 	strlt.w	r2, [r8]
 8005eb4:	4b9e      	ldr	r3, [pc, #632]	; (8006130 <_dtoa_r+0x2f0>)
 8005eb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005eba:	ea33 0308 	bics.w	r3, r3, r8
 8005ebe:	d11b      	bne.n	8005ef8 <_dtoa_r+0xb8>
 8005ec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ec2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ecc:	4333      	orrs	r3, r6
 8005ece:	f000 8593 	beq.w	80069f8 <_dtoa_r+0xbb8>
 8005ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ed4:	b963      	cbnz	r3, 8005ef0 <_dtoa_r+0xb0>
 8005ed6:	4b97      	ldr	r3, [pc, #604]	; (8006134 <_dtoa_r+0x2f4>)
 8005ed8:	e027      	b.n	8005f2a <_dtoa_r+0xea>
 8005eda:	4b97      	ldr	r3, [pc, #604]	; (8006138 <_dtoa_r+0x2f8>)
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	9800      	ldr	r0, [sp, #0]
 8005ee6:	b013      	add	sp, #76	; 0x4c
 8005ee8:	ecbd 8b04 	vpop	{d8-d9}
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef0:	4b90      	ldr	r3, [pc, #576]	; (8006134 <_dtoa_r+0x2f4>)
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	3303      	adds	r3, #3
 8005ef6:	e7f3      	b.n	8005ee0 <_dtoa_r+0xa0>
 8005ef8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	ec51 0b17 	vmov	r0, r1, d7
 8005f02:	eeb0 8a47 	vmov.f32	s16, s14
 8005f06:	eef0 8a67 	vmov.f32	s17, s15
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f7fa fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f10:	4681      	mov	r9, r0
 8005f12:	b160      	cbz	r0, 8005f2e <_dtoa_r+0xee>
 8005f14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f16:	2301      	movs	r3, #1
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8568 	beq.w	80069f2 <_dtoa_r+0xbb2>
 8005f22:	4b86      	ldr	r3, [pc, #536]	; (800613c <_dtoa_r+0x2fc>)
 8005f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	e7da      	b.n	8005ee4 <_dtoa_r+0xa4>
 8005f2e:	aa10      	add	r2, sp, #64	; 0x40
 8005f30:	a911      	add	r1, sp, #68	; 0x44
 8005f32:	4620      	mov	r0, r4
 8005f34:	eeb0 0a48 	vmov.f32	s0, s16
 8005f38:	eef0 0a68 	vmov.f32	s1, s17
 8005f3c:	f001 f994 	bl	8007268 <__d2b>
 8005f40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f44:	4682      	mov	sl, r0
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	d07f      	beq.n	800604a <_dtoa_r+0x20a>
 8005f4a:	ee18 3a90 	vmov	r3, s17
 8005f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005f56:	ec51 0b18 	vmov	r0, r1, d8
 8005f5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005f66:	4619      	mov	r1, r3
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4b75      	ldr	r3, [pc, #468]	; (8006140 <_dtoa_r+0x300>)
 8005f6c:	f7fa f98c 	bl	8000288 <__aeabi_dsub>
 8005f70:	a367      	add	r3, pc, #412	; (adr r3, 8006110 <_dtoa_r+0x2d0>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa fb3f 	bl	80005f8 <__aeabi_dmul>
 8005f7a:	a367      	add	r3, pc, #412	; (adr r3, 8006118 <_dtoa_r+0x2d8>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f7fa f984 	bl	800028c <__adddf3>
 8005f84:	4606      	mov	r6, r0
 8005f86:	4628      	mov	r0, r5
 8005f88:	460f      	mov	r7, r1
 8005f8a:	f7fa facb 	bl	8000524 <__aeabi_i2d>
 8005f8e:	a364      	add	r3, pc, #400	; (adr r3, 8006120 <_dtoa_r+0x2e0>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa fb30 	bl	80005f8 <__aeabi_dmul>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	f7fa f974 	bl	800028c <__adddf3>
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	460f      	mov	r7, r1
 8005fa8:	f7fa fdd6 	bl	8000b58 <__aeabi_d2iz>
 8005fac:	2200      	movs	r2, #0
 8005fae:	4683      	mov	fp, r0
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	f7fa fd91 	bl	8000adc <__aeabi_dcmplt>
 8005fba:	b148      	cbz	r0, 8005fd0 <_dtoa_r+0x190>
 8005fbc:	4658      	mov	r0, fp
 8005fbe:	f7fa fab1 	bl	8000524 <__aeabi_i2d>
 8005fc2:	4632      	mov	r2, r6
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	f7fa fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fca:	b908      	cbnz	r0, 8005fd0 <_dtoa_r+0x190>
 8005fcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005fd0:	f1bb 0f16 	cmp.w	fp, #22
 8005fd4:	d857      	bhi.n	8006086 <_dtoa_r+0x246>
 8005fd6:	4b5b      	ldr	r3, [pc, #364]	; (8006144 <_dtoa_r+0x304>)
 8005fd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	ec51 0b18 	vmov	r0, r1, d8
 8005fe4:	f7fa fd7a 	bl	8000adc <__aeabi_dcmplt>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d04e      	beq.n	800608a <_dtoa_r+0x24a>
 8005fec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	930c      	str	r3, [sp, #48]	; 0x30
 8005ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ff6:	1b5b      	subs	r3, r3, r5
 8005ff8:	1e5a      	subs	r2, r3, #1
 8005ffa:	bf45      	ittet	mi
 8005ffc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006000:	9305      	strmi	r3, [sp, #20]
 8006002:	2300      	movpl	r3, #0
 8006004:	2300      	movmi	r3, #0
 8006006:	9206      	str	r2, [sp, #24]
 8006008:	bf54      	ite	pl
 800600a:	9305      	strpl	r3, [sp, #20]
 800600c:	9306      	strmi	r3, [sp, #24]
 800600e:	f1bb 0f00 	cmp.w	fp, #0
 8006012:	db3c      	blt.n	800608e <_dtoa_r+0x24e>
 8006014:	9b06      	ldr	r3, [sp, #24]
 8006016:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800601a:	445b      	add	r3, fp
 800601c:	9306      	str	r3, [sp, #24]
 800601e:	2300      	movs	r3, #0
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	9b07      	ldr	r3, [sp, #28]
 8006024:	2b09      	cmp	r3, #9
 8006026:	d868      	bhi.n	80060fa <_dtoa_r+0x2ba>
 8006028:	2b05      	cmp	r3, #5
 800602a:	bfc4      	itt	gt
 800602c:	3b04      	subgt	r3, #4
 800602e:	9307      	strgt	r3, [sp, #28]
 8006030:	9b07      	ldr	r3, [sp, #28]
 8006032:	f1a3 0302 	sub.w	r3, r3, #2
 8006036:	bfcc      	ite	gt
 8006038:	2500      	movgt	r5, #0
 800603a:	2501      	movle	r5, #1
 800603c:	2b03      	cmp	r3, #3
 800603e:	f200 8085 	bhi.w	800614c <_dtoa_r+0x30c>
 8006042:	e8df f003 	tbb	[pc, r3]
 8006046:	3b2e      	.short	0x3b2e
 8006048:	5839      	.short	0x5839
 800604a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800604e:	441d      	add	r5, r3
 8006050:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006054:	2b20      	cmp	r3, #32
 8006056:	bfc1      	itttt	gt
 8006058:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800605c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006060:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006064:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006068:	bfd6      	itet	le
 800606a:	f1c3 0320 	rsble	r3, r3, #32
 800606e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006072:	fa06 f003 	lslle.w	r0, r6, r3
 8006076:	f7fa fa45 	bl	8000504 <__aeabi_ui2d>
 800607a:	2201      	movs	r2, #1
 800607c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006080:	3d01      	subs	r5, #1
 8006082:	920e      	str	r2, [sp, #56]	; 0x38
 8006084:	e76f      	b.n	8005f66 <_dtoa_r+0x126>
 8006086:	2301      	movs	r3, #1
 8006088:	e7b3      	b.n	8005ff2 <_dtoa_r+0x1b2>
 800608a:	900c      	str	r0, [sp, #48]	; 0x30
 800608c:	e7b2      	b.n	8005ff4 <_dtoa_r+0x1b4>
 800608e:	9b05      	ldr	r3, [sp, #20]
 8006090:	eba3 030b 	sub.w	r3, r3, fp
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	f1cb 0300 	rsb	r3, fp, #0
 800609a:	9308      	str	r3, [sp, #32]
 800609c:	2300      	movs	r3, #0
 800609e:	930b      	str	r3, [sp, #44]	; 0x2c
 80060a0:	e7bf      	b.n	8006022 <_dtoa_r+0x1e2>
 80060a2:	2300      	movs	r3, #0
 80060a4:	9309      	str	r3, [sp, #36]	; 0x24
 80060a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dc52      	bgt.n	8006152 <_dtoa_r+0x312>
 80060ac:	2301      	movs	r3, #1
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	9304      	str	r3, [sp, #16]
 80060b2:	461a      	mov	r2, r3
 80060b4:	920a      	str	r2, [sp, #40]	; 0x28
 80060b6:	e00b      	b.n	80060d0 <_dtoa_r+0x290>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e7f3      	b.n	80060a4 <_dtoa_r+0x264>
 80060bc:	2300      	movs	r3, #0
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c2:	445b      	add	r3, fp
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	3301      	adds	r3, #1
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	bfb8      	it	lt
 80060ce:	2301      	movlt	r3, #1
 80060d0:	69e0      	ldr	r0, [r4, #28]
 80060d2:	2100      	movs	r1, #0
 80060d4:	2204      	movs	r2, #4
 80060d6:	f102 0614 	add.w	r6, r2, #20
 80060da:	429e      	cmp	r6, r3
 80060dc:	d93d      	bls.n	800615a <_dtoa_r+0x31a>
 80060de:	6041      	str	r1, [r0, #4]
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 fd9f 	bl	8006c24 <_Balloc>
 80060e6:	9000      	str	r0, [sp, #0]
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d139      	bne.n	8006160 <_dtoa_r+0x320>
 80060ec:	4b16      	ldr	r3, [pc, #88]	; (8006148 <_dtoa_r+0x308>)
 80060ee:	4602      	mov	r2, r0
 80060f0:	f240 11af 	movw	r1, #431	; 0x1af
 80060f4:	e6bd      	b.n	8005e72 <_dtoa_r+0x32>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7e1      	b.n	80060be <_dtoa_r+0x27e>
 80060fa:	2501      	movs	r5, #1
 80060fc:	2300      	movs	r3, #0
 80060fe:	9307      	str	r3, [sp, #28]
 8006100:	9509      	str	r5, [sp, #36]	; 0x24
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	9304      	str	r3, [sp, #16]
 800610a:	2200      	movs	r2, #0
 800610c:	2312      	movs	r3, #18
 800610e:	e7d1      	b.n	80060b4 <_dtoa_r+0x274>
 8006110:	636f4361 	.word	0x636f4361
 8006114:	3fd287a7 	.word	0x3fd287a7
 8006118:	8b60c8b3 	.word	0x8b60c8b3
 800611c:	3fc68a28 	.word	0x3fc68a28
 8006120:	509f79fb 	.word	0x509f79fb
 8006124:	3fd34413 	.word	0x3fd34413
 8006128:	08007f11 	.word	0x08007f11
 800612c:	08007f28 	.word	0x08007f28
 8006130:	7ff00000 	.word	0x7ff00000
 8006134:	08007f0d 	.word	0x08007f0d
 8006138:	08007f04 	.word	0x08007f04
 800613c:	08007ee1 	.word	0x08007ee1
 8006140:	3ff80000 	.word	0x3ff80000
 8006144:	08008018 	.word	0x08008018
 8006148:	08007f80 	.word	0x08007f80
 800614c:	2301      	movs	r3, #1
 800614e:	9309      	str	r3, [sp, #36]	; 0x24
 8006150:	e7d7      	b.n	8006102 <_dtoa_r+0x2c2>
 8006152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	9304      	str	r3, [sp, #16]
 8006158:	e7ba      	b.n	80060d0 <_dtoa_r+0x290>
 800615a:	3101      	adds	r1, #1
 800615c:	0052      	lsls	r2, r2, #1
 800615e:	e7ba      	b.n	80060d6 <_dtoa_r+0x296>
 8006160:	69e3      	ldr	r3, [r4, #28]
 8006162:	9a00      	ldr	r2, [sp, #0]
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	9b04      	ldr	r3, [sp, #16]
 8006168:	2b0e      	cmp	r3, #14
 800616a:	f200 80a8 	bhi.w	80062be <_dtoa_r+0x47e>
 800616e:	2d00      	cmp	r5, #0
 8006170:	f000 80a5 	beq.w	80062be <_dtoa_r+0x47e>
 8006174:	f1bb 0f00 	cmp.w	fp, #0
 8006178:	dd38      	ble.n	80061ec <_dtoa_r+0x3ac>
 800617a:	4bc0      	ldr	r3, [pc, #768]	; (800647c <_dtoa_r+0x63c>)
 800617c:	f00b 020f 	and.w	r2, fp, #15
 8006180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006184:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006188:	e9d3 6700 	ldrd	r6, r7, [r3]
 800618c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006190:	d019      	beq.n	80061c6 <_dtoa_r+0x386>
 8006192:	4bbb      	ldr	r3, [pc, #748]	; (8006480 <_dtoa_r+0x640>)
 8006194:	ec51 0b18 	vmov	r0, r1, d8
 8006198:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800619c:	f7fa fb56 	bl	800084c <__aeabi_ddiv>
 80061a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061a4:	f008 080f 	and.w	r8, r8, #15
 80061a8:	2503      	movs	r5, #3
 80061aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006480 <_dtoa_r+0x640>
 80061ae:	f1b8 0f00 	cmp.w	r8, #0
 80061b2:	d10a      	bne.n	80061ca <_dtoa_r+0x38a>
 80061b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b8:	4632      	mov	r2, r6
 80061ba:	463b      	mov	r3, r7
 80061bc:	f7fa fb46 	bl	800084c <__aeabi_ddiv>
 80061c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c4:	e02b      	b.n	800621e <_dtoa_r+0x3de>
 80061c6:	2502      	movs	r5, #2
 80061c8:	e7ef      	b.n	80061aa <_dtoa_r+0x36a>
 80061ca:	f018 0f01 	tst.w	r8, #1
 80061ce:	d008      	beq.n	80061e2 <_dtoa_r+0x3a2>
 80061d0:	4630      	mov	r0, r6
 80061d2:	4639      	mov	r1, r7
 80061d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80061d8:	f7fa fa0e 	bl	80005f8 <__aeabi_dmul>
 80061dc:	3501      	adds	r5, #1
 80061de:	4606      	mov	r6, r0
 80061e0:	460f      	mov	r7, r1
 80061e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80061e6:	f109 0908 	add.w	r9, r9, #8
 80061ea:	e7e0      	b.n	80061ae <_dtoa_r+0x36e>
 80061ec:	f000 809f 	beq.w	800632e <_dtoa_r+0x4ee>
 80061f0:	f1cb 0600 	rsb	r6, fp, #0
 80061f4:	4ba1      	ldr	r3, [pc, #644]	; (800647c <_dtoa_r+0x63c>)
 80061f6:	4fa2      	ldr	r7, [pc, #648]	; (8006480 <_dtoa_r+0x640>)
 80061f8:	f006 020f 	and.w	r2, r6, #15
 80061fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	ec51 0b18 	vmov	r0, r1, d8
 8006208:	f7fa f9f6 	bl	80005f8 <__aeabi_dmul>
 800620c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006210:	1136      	asrs	r6, r6, #4
 8006212:	2300      	movs	r3, #0
 8006214:	2502      	movs	r5, #2
 8006216:	2e00      	cmp	r6, #0
 8006218:	d17e      	bne.n	8006318 <_dtoa_r+0x4d8>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1d0      	bne.n	80061c0 <_dtoa_r+0x380>
 800621e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006220:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8084 	beq.w	8006332 <_dtoa_r+0x4f2>
 800622a:	4b96      	ldr	r3, [pc, #600]	; (8006484 <_dtoa_r+0x644>)
 800622c:	2200      	movs	r2, #0
 800622e:	4640      	mov	r0, r8
 8006230:	4649      	mov	r1, r9
 8006232:	f7fa fc53 	bl	8000adc <__aeabi_dcmplt>
 8006236:	2800      	cmp	r0, #0
 8006238:	d07b      	beq.n	8006332 <_dtoa_r+0x4f2>
 800623a:	9b04      	ldr	r3, [sp, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d078      	beq.n	8006332 <_dtoa_r+0x4f2>
 8006240:	9b01      	ldr	r3, [sp, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	dd39      	ble.n	80062ba <_dtoa_r+0x47a>
 8006246:	4b90      	ldr	r3, [pc, #576]	; (8006488 <_dtoa_r+0x648>)
 8006248:	2200      	movs	r2, #0
 800624a:	4640      	mov	r0, r8
 800624c:	4649      	mov	r1, r9
 800624e:	f7fa f9d3 	bl	80005f8 <__aeabi_dmul>
 8006252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006256:	9e01      	ldr	r6, [sp, #4]
 8006258:	f10b 37ff 	add.w	r7, fp, #4294967295
 800625c:	3501      	adds	r5, #1
 800625e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006262:	4628      	mov	r0, r5
 8006264:	f7fa f95e 	bl	8000524 <__aeabi_i2d>
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	f7fa f9c4 	bl	80005f8 <__aeabi_dmul>
 8006270:	4b86      	ldr	r3, [pc, #536]	; (800648c <_dtoa_r+0x64c>)
 8006272:	2200      	movs	r2, #0
 8006274:	f7fa f80a 	bl	800028c <__adddf3>
 8006278:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800627c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006280:	9303      	str	r3, [sp, #12]
 8006282:	2e00      	cmp	r6, #0
 8006284:	d158      	bne.n	8006338 <_dtoa_r+0x4f8>
 8006286:	4b82      	ldr	r3, [pc, #520]	; (8006490 <_dtoa_r+0x650>)
 8006288:	2200      	movs	r2, #0
 800628a:	4640      	mov	r0, r8
 800628c:	4649      	mov	r1, r9
 800628e:	f7f9 fffb 	bl	8000288 <__aeabi_dsub>
 8006292:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006296:	4680      	mov	r8, r0
 8006298:	4689      	mov	r9, r1
 800629a:	f7fa fc3d 	bl	8000b18 <__aeabi_dcmpgt>
 800629e:	2800      	cmp	r0, #0
 80062a0:	f040 8296 	bne.w	80067d0 <_dtoa_r+0x990>
 80062a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80062a8:	4640      	mov	r0, r8
 80062aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062ae:	4649      	mov	r1, r9
 80062b0:	f7fa fc14 	bl	8000adc <__aeabi_dcmplt>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f040 8289 	bne.w	80067cc <_dtoa_r+0x98c>
 80062ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80062be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f2c0 814e 	blt.w	8006562 <_dtoa_r+0x722>
 80062c6:	f1bb 0f0e 	cmp.w	fp, #14
 80062ca:	f300 814a 	bgt.w	8006562 <_dtoa_r+0x722>
 80062ce:	4b6b      	ldr	r3, [pc, #428]	; (800647c <_dtoa_r+0x63c>)
 80062d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f280 80dc 	bge.w	8006498 <_dtoa_r+0x658>
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f300 80d8 	bgt.w	8006498 <_dtoa_r+0x658>
 80062e8:	f040 826f 	bne.w	80067ca <_dtoa_r+0x98a>
 80062ec:	4b68      	ldr	r3, [pc, #416]	; (8006490 <_dtoa_r+0x650>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	4640      	mov	r0, r8
 80062f2:	4649      	mov	r1, r9
 80062f4:	f7fa f980 	bl	80005f8 <__aeabi_dmul>
 80062f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062fc:	f7fa fc02 	bl	8000b04 <__aeabi_dcmpge>
 8006300:	9e04      	ldr	r6, [sp, #16]
 8006302:	4637      	mov	r7, r6
 8006304:	2800      	cmp	r0, #0
 8006306:	f040 8245 	bne.w	8006794 <_dtoa_r+0x954>
 800630a:	9d00      	ldr	r5, [sp, #0]
 800630c:	2331      	movs	r3, #49	; 0x31
 800630e:	f805 3b01 	strb.w	r3, [r5], #1
 8006312:	f10b 0b01 	add.w	fp, fp, #1
 8006316:	e241      	b.n	800679c <_dtoa_r+0x95c>
 8006318:	07f2      	lsls	r2, r6, #31
 800631a:	d505      	bpl.n	8006328 <_dtoa_r+0x4e8>
 800631c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006320:	f7fa f96a 	bl	80005f8 <__aeabi_dmul>
 8006324:	3501      	adds	r5, #1
 8006326:	2301      	movs	r3, #1
 8006328:	1076      	asrs	r6, r6, #1
 800632a:	3708      	adds	r7, #8
 800632c:	e773      	b.n	8006216 <_dtoa_r+0x3d6>
 800632e:	2502      	movs	r5, #2
 8006330:	e775      	b.n	800621e <_dtoa_r+0x3de>
 8006332:	9e04      	ldr	r6, [sp, #16]
 8006334:	465f      	mov	r7, fp
 8006336:	e792      	b.n	800625e <_dtoa_r+0x41e>
 8006338:	9900      	ldr	r1, [sp, #0]
 800633a:	4b50      	ldr	r3, [pc, #320]	; (800647c <_dtoa_r+0x63c>)
 800633c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006340:	4431      	add	r1, r6
 8006342:	9102      	str	r1, [sp, #8]
 8006344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006346:	eeb0 9a47 	vmov.f32	s18, s14
 800634a:	eef0 9a67 	vmov.f32	s19, s15
 800634e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006352:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006356:	2900      	cmp	r1, #0
 8006358:	d044      	beq.n	80063e4 <_dtoa_r+0x5a4>
 800635a:	494e      	ldr	r1, [pc, #312]	; (8006494 <_dtoa_r+0x654>)
 800635c:	2000      	movs	r0, #0
 800635e:	f7fa fa75 	bl	800084c <__aeabi_ddiv>
 8006362:	ec53 2b19 	vmov	r2, r3, d9
 8006366:	f7f9 ff8f 	bl	8000288 <__aeabi_dsub>
 800636a:	9d00      	ldr	r5, [sp, #0]
 800636c:	ec41 0b19 	vmov	d9, r0, r1
 8006370:	4649      	mov	r1, r9
 8006372:	4640      	mov	r0, r8
 8006374:	f7fa fbf0 	bl	8000b58 <__aeabi_d2iz>
 8006378:	4606      	mov	r6, r0
 800637a:	f7fa f8d3 	bl	8000524 <__aeabi_i2d>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4640      	mov	r0, r8
 8006384:	4649      	mov	r1, r9
 8006386:	f7f9 ff7f 	bl	8000288 <__aeabi_dsub>
 800638a:	3630      	adds	r6, #48	; 0x30
 800638c:	f805 6b01 	strb.w	r6, [r5], #1
 8006390:	ec53 2b19 	vmov	r2, r3, d9
 8006394:	4680      	mov	r8, r0
 8006396:	4689      	mov	r9, r1
 8006398:	f7fa fba0 	bl	8000adc <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	d164      	bne.n	800646a <_dtoa_r+0x62a>
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	4937      	ldr	r1, [pc, #220]	; (8006484 <_dtoa_r+0x644>)
 80063a6:	2000      	movs	r0, #0
 80063a8:	f7f9 ff6e 	bl	8000288 <__aeabi_dsub>
 80063ac:	ec53 2b19 	vmov	r2, r3, d9
 80063b0:	f7fa fb94 	bl	8000adc <__aeabi_dcmplt>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	f040 80b6 	bne.w	8006526 <_dtoa_r+0x6e6>
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	429d      	cmp	r5, r3
 80063be:	f43f af7c 	beq.w	80062ba <_dtoa_r+0x47a>
 80063c2:	4b31      	ldr	r3, [pc, #196]	; (8006488 <_dtoa_r+0x648>)
 80063c4:	ec51 0b19 	vmov	r0, r1, d9
 80063c8:	2200      	movs	r2, #0
 80063ca:	f7fa f915 	bl	80005f8 <__aeabi_dmul>
 80063ce:	4b2e      	ldr	r3, [pc, #184]	; (8006488 <_dtoa_r+0x648>)
 80063d0:	ec41 0b19 	vmov	d9, r0, r1
 80063d4:	2200      	movs	r2, #0
 80063d6:	4640      	mov	r0, r8
 80063d8:	4649      	mov	r1, r9
 80063da:	f7fa f90d 	bl	80005f8 <__aeabi_dmul>
 80063de:	4680      	mov	r8, r0
 80063e0:	4689      	mov	r9, r1
 80063e2:	e7c5      	b.n	8006370 <_dtoa_r+0x530>
 80063e4:	ec51 0b17 	vmov	r0, r1, d7
 80063e8:	f7fa f906 	bl	80005f8 <__aeabi_dmul>
 80063ec:	9b02      	ldr	r3, [sp, #8]
 80063ee:	9d00      	ldr	r5, [sp, #0]
 80063f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063f2:	ec41 0b19 	vmov	d9, r0, r1
 80063f6:	4649      	mov	r1, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	f7fa fbad 	bl	8000b58 <__aeabi_d2iz>
 80063fe:	4606      	mov	r6, r0
 8006400:	f7fa f890 	bl	8000524 <__aeabi_i2d>
 8006404:	3630      	adds	r6, #48	; 0x30
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4640      	mov	r0, r8
 800640c:	4649      	mov	r1, r9
 800640e:	f7f9 ff3b 	bl	8000288 <__aeabi_dsub>
 8006412:	f805 6b01 	strb.w	r6, [r5], #1
 8006416:	9b02      	ldr	r3, [sp, #8]
 8006418:	429d      	cmp	r5, r3
 800641a:	4680      	mov	r8, r0
 800641c:	4689      	mov	r9, r1
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	d124      	bne.n	800646e <_dtoa_r+0x62e>
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <_dtoa_r+0x654>)
 8006426:	ec51 0b19 	vmov	r0, r1, d9
 800642a:	f7f9 ff2f 	bl	800028c <__adddf3>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4640      	mov	r0, r8
 8006434:	4649      	mov	r1, r9
 8006436:	f7fa fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800643a:	2800      	cmp	r0, #0
 800643c:	d173      	bne.n	8006526 <_dtoa_r+0x6e6>
 800643e:	ec53 2b19 	vmov	r2, r3, d9
 8006442:	4914      	ldr	r1, [pc, #80]	; (8006494 <_dtoa_r+0x654>)
 8006444:	2000      	movs	r0, #0
 8006446:	f7f9 ff1f 	bl	8000288 <__aeabi_dsub>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4640      	mov	r0, r8
 8006450:	4649      	mov	r1, r9
 8006452:	f7fa fb43 	bl	8000adc <__aeabi_dcmplt>
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f af2f 	beq.w	80062ba <_dtoa_r+0x47a>
 800645c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800645e:	1e6b      	subs	r3, r5, #1
 8006460:	930f      	str	r3, [sp, #60]	; 0x3c
 8006462:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006466:	2b30      	cmp	r3, #48	; 0x30
 8006468:	d0f8      	beq.n	800645c <_dtoa_r+0x61c>
 800646a:	46bb      	mov	fp, r7
 800646c:	e04a      	b.n	8006504 <_dtoa_r+0x6c4>
 800646e:	4b06      	ldr	r3, [pc, #24]	; (8006488 <_dtoa_r+0x648>)
 8006470:	f7fa f8c2 	bl	80005f8 <__aeabi_dmul>
 8006474:	4680      	mov	r8, r0
 8006476:	4689      	mov	r9, r1
 8006478:	e7bd      	b.n	80063f6 <_dtoa_r+0x5b6>
 800647a:	bf00      	nop
 800647c:	08008018 	.word	0x08008018
 8006480:	08007ff0 	.word	0x08007ff0
 8006484:	3ff00000 	.word	0x3ff00000
 8006488:	40240000 	.word	0x40240000
 800648c:	401c0000 	.word	0x401c0000
 8006490:	40140000 	.word	0x40140000
 8006494:	3fe00000 	.word	0x3fe00000
 8006498:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800649c:	9d00      	ldr	r5, [sp, #0]
 800649e:	4642      	mov	r2, r8
 80064a0:	464b      	mov	r3, r9
 80064a2:	4630      	mov	r0, r6
 80064a4:	4639      	mov	r1, r7
 80064a6:	f7fa f9d1 	bl	800084c <__aeabi_ddiv>
 80064aa:	f7fa fb55 	bl	8000b58 <__aeabi_d2iz>
 80064ae:	9001      	str	r0, [sp, #4]
 80064b0:	f7fa f838 	bl	8000524 <__aeabi_i2d>
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	f7fa f89e 	bl	80005f8 <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7f9 fee0 	bl	8000288 <__aeabi_dsub>
 80064c8:	9e01      	ldr	r6, [sp, #4]
 80064ca:	9f04      	ldr	r7, [sp, #16]
 80064cc:	3630      	adds	r6, #48	; 0x30
 80064ce:	f805 6b01 	strb.w	r6, [r5], #1
 80064d2:	9e00      	ldr	r6, [sp, #0]
 80064d4:	1bae      	subs	r6, r5, r6
 80064d6:	42b7      	cmp	r7, r6
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	d134      	bne.n	8006548 <_dtoa_r+0x708>
 80064de:	f7f9 fed5 	bl	800028c <__adddf3>
 80064e2:	4642      	mov	r2, r8
 80064e4:	464b      	mov	r3, r9
 80064e6:	4606      	mov	r6, r0
 80064e8:	460f      	mov	r7, r1
 80064ea:	f7fa fb15 	bl	8000b18 <__aeabi_dcmpgt>
 80064ee:	b9c8      	cbnz	r0, 8006524 <_dtoa_r+0x6e4>
 80064f0:	4642      	mov	r2, r8
 80064f2:	464b      	mov	r3, r9
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	f7fa fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80064fc:	b110      	cbz	r0, 8006504 <_dtoa_r+0x6c4>
 80064fe:	9b01      	ldr	r3, [sp, #4]
 8006500:	07db      	lsls	r3, r3, #31
 8006502:	d40f      	bmi.n	8006524 <_dtoa_r+0x6e4>
 8006504:	4651      	mov	r1, sl
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fbcc 	bl	8006ca4 <_Bfree>
 800650c:	2300      	movs	r3, #0
 800650e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006510:	702b      	strb	r3, [r5, #0]
 8006512:	f10b 0301 	add.w	r3, fp, #1
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800651a:	2b00      	cmp	r3, #0
 800651c:	f43f ace2 	beq.w	8005ee4 <_dtoa_r+0xa4>
 8006520:	601d      	str	r5, [r3, #0]
 8006522:	e4df      	b.n	8005ee4 <_dtoa_r+0xa4>
 8006524:	465f      	mov	r7, fp
 8006526:	462b      	mov	r3, r5
 8006528:	461d      	mov	r5, r3
 800652a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800652e:	2a39      	cmp	r2, #57	; 0x39
 8006530:	d106      	bne.n	8006540 <_dtoa_r+0x700>
 8006532:	9a00      	ldr	r2, [sp, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d1f7      	bne.n	8006528 <_dtoa_r+0x6e8>
 8006538:	9900      	ldr	r1, [sp, #0]
 800653a:	2230      	movs	r2, #48	; 0x30
 800653c:	3701      	adds	r7, #1
 800653e:	700a      	strb	r2, [r1, #0]
 8006540:	781a      	ldrb	r2, [r3, #0]
 8006542:	3201      	adds	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e790      	b.n	800646a <_dtoa_r+0x62a>
 8006548:	4ba3      	ldr	r3, [pc, #652]	; (80067d8 <_dtoa_r+0x998>)
 800654a:	2200      	movs	r2, #0
 800654c:	f7fa f854 	bl	80005f8 <__aeabi_dmul>
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	4606      	mov	r6, r0
 8006556:	460f      	mov	r7, r1
 8006558:	f7fa fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800655c:	2800      	cmp	r0, #0
 800655e:	d09e      	beq.n	800649e <_dtoa_r+0x65e>
 8006560:	e7d0      	b.n	8006504 <_dtoa_r+0x6c4>
 8006562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006564:	2a00      	cmp	r2, #0
 8006566:	f000 80ca 	beq.w	80066fe <_dtoa_r+0x8be>
 800656a:	9a07      	ldr	r2, [sp, #28]
 800656c:	2a01      	cmp	r2, #1
 800656e:	f300 80ad 	bgt.w	80066cc <_dtoa_r+0x88c>
 8006572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006574:	2a00      	cmp	r2, #0
 8006576:	f000 80a5 	beq.w	80066c4 <_dtoa_r+0x884>
 800657a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800657e:	9e08      	ldr	r6, [sp, #32]
 8006580:	9d05      	ldr	r5, [sp, #20]
 8006582:	9a05      	ldr	r2, [sp, #20]
 8006584:	441a      	add	r2, r3
 8006586:	9205      	str	r2, [sp, #20]
 8006588:	9a06      	ldr	r2, [sp, #24]
 800658a:	2101      	movs	r1, #1
 800658c:	441a      	add	r2, r3
 800658e:	4620      	mov	r0, r4
 8006590:	9206      	str	r2, [sp, #24]
 8006592:	f000 fc3d 	bl	8006e10 <__i2b>
 8006596:	4607      	mov	r7, r0
 8006598:	b165      	cbz	r5, 80065b4 <_dtoa_r+0x774>
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	dd09      	ble.n	80065b4 <_dtoa_r+0x774>
 80065a0:	42ab      	cmp	r3, r5
 80065a2:	9a05      	ldr	r2, [sp, #20]
 80065a4:	bfa8      	it	ge
 80065a6:	462b      	movge	r3, r5
 80065a8:	1ad2      	subs	r2, r2, r3
 80065aa:	9205      	str	r2, [sp, #20]
 80065ac:	9a06      	ldr	r2, [sp, #24]
 80065ae:	1aed      	subs	r5, r5, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	9306      	str	r3, [sp, #24]
 80065b4:	9b08      	ldr	r3, [sp, #32]
 80065b6:	b1f3      	cbz	r3, 80065f6 <_dtoa_r+0x7b6>
 80065b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 80a3 	beq.w	8006706 <_dtoa_r+0x8c6>
 80065c0:	2e00      	cmp	r6, #0
 80065c2:	dd10      	ble.n	80065e6 <_dtoa_r+0x7a6>
 80065c4:	4639      	mov	r1, r7
 80065c6:	4632      	mov	r2, r6
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 fce1 	bl	8006f90 <__pow5mult>
 80065ce:	4652      	mov	r2, sl
 80065d0:	4601      	mov	r1, r0
 80065d2:	4607      	mov	r7, r0
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 fc31 	bl	8006e3c <__multiply>
 80065da:	4651      	mov	r1, sl
 80065dc:	4680      	mov	r8, r0
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 fb60 	bl	8006ca4 <_Bfree>
 80065e4:	46c2      	mov	sl, r8
 80065e6:	9b08      	ldr	r3, [sp, #32]
 80065e8:	1b9a      	subs	r2, r3, r6
 80065ea:	d004      	beq.n	80065f6 <_dtoa_r+0x7b6>
 80065ec:	4651      	mov	r1, sl
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 fcce 	bl	8006f90 <__pow5mult>
 80065f4:	4682      	mov	sl, r0
 80065f6:	2101      	movs	r1, #1
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fc09 	bl	8006e10 <__i2b>
 80065fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006600:	2b00      	cmp	r3, #0
 8006602:	4606      	mov	r6, r0
 8006604:	f340 8081 	ble.w	800670a <_dtoa_r+0x8ca>
 8006608:	461a      	mov	r2, r3
 800660a:	4601      	mov	r1, r0
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fcbf 	bl	8006f90 <__pow5mult>
 8006612:	9b07      	ldr	r3, [sp, #28]
 8006614:	2b01      	cmp	r3, #1
 8006616:	4606      	mov	r6, r0
 8006618:	dd7a      	ble.n	8006710 <_dtoa_r+0x8d0>
 800661a:	f04f 0800 	mov.w	r8, #0
 800661e:	6933      	ldr	r3, [r6, #16]
 8006620:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006624:	6918      	ldr	r0, [r3, #16]
 8006626:	f000 fba5 	bl	8006d74 <__hi0bits>
 800662a:	f1c0 0020 	rsb	r0, r0, #32
 800662e:	9b06      	ldr	r3, [sp, #24]
 8006630:	4418      	add	r0, r3
 8006632:	f010 001f 	ands.w	r0, r0, #31
 8006636:	f000 8094 	beq.w	8006762 <_dtoa_r+0x922>
 800663a:	f1c0 0320 	rsb	r3, r0, #32
 800663e:	2b04      	cmp	r3, #4
 8006640:	f340 8085 	ble.w	800674e <_dtoa_r+0x90e>
 8006644:	9b05      	ldr	r3, [sp, #20]
 8006646:	f1c0 001c 	rsb	r0, r0, #28
 800664a:	4403      	add	r3, r0
 800664c:	9305      	str	r3, [sp, #20]
 800664e:	9b06      	ldr	r3, [sp, #24]
 8006650:	4403      	add	r3, r0
 8006652:	4405      	add	r5, r0
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	9b05      	ldr	r3, [sp, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	dd05      	ble.n	8006668 <_dtoa_r+0x828>
 800665c:	4651      	mov	r1, sl
 800665e:	461a      	mov	r2, r3
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fcef 	bl	8007044 <__lshift>
 8006666:	4682      	mov	sl, r0
 8006668:	9b06      	ldr	r3, [sp, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd05      	ble.n	800667a <_dtoa_r+0x83a>
 800666e:	4631      	mov	r1, r6
 8006670:	461a      	mov	r2, r3
 8006672:	4620      	mov	r0, r4
 8006674:	f000 fce6 	bl	8007044 <__lshift>
 8006678:	4606      	mov	r6, r0
 800667a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800667c:	2b00      	cmp	r3, #0
 800667e:	d072      	beq.n	8006766 <_dtoa_r+0x926>
 8006680:	4631      	mov	r1, r6
 8006682:	4650      	mov	r0, sl
 8006684:	f000 fd4a 	bl	800711c <__mcmp>
 8006688:	2800      	cmp	r0, #0
 800668a:	da6c      	bge.n	8006766 <_dtoa_r+0x926>
 800668c:	2300      	movs	r3, #0
 800668e:	4651      	mov	r1, sl
 8006690:	220a      	movs	r2, #10
 8006692:	4620      	mov	r0, r4
 8006694:	f000 fb28 	bl	8006ce8 <__multadd>
 8006698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800669e:	4682      	mov	sl, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 81b0 	beq.w	8006a06 <_dtoa_r+0xbc6>
 80066a6:	2300      	movs	r3, #0
 80066a8:	4639      	mov	r1, r7
 80066aa:	220a      	movs	r2, #10
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 fb1b 	bl	8006ce8 <__multadd>
 80066b2:	9b01      	ldr	r3, [sp, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	4607      	mov	r7, r0
 80066b8:	f300 8096 	bgt.w	80067e8 <_dtoa_r+0x9a8>
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	dc59      	bgt.n	8006776 <_dtoa_r+0x936>
 80066c2:	e091      	b.n	80067e8 <_dtoa_r+0x9a8>
 80066c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066ca:	e758      	b.n	800657e <_dtoa_r+0x73e>
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	1e5e      	subs	r6, r3, #1
 80066d0:	9b08      	ldr	r3, [sp, #32]
 80066d2:	42b3      	cmp	r3, r6
 80066d4:	bfbf      	itttt	lt
 80066d6:	9b08      	ldrlt	r3, [sp, #32]
 80066d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80066da:	9608      	strlt	r6, [sp, #32]
 80066dc:	1af3      	sublt	r3, r6, r3
 80066de:	bfb4      	ite	lt
 80066e0:	18d2      	addlt	r2, r2, r3
 80066e2:	1b9e      	subge	r6, r3, r6
 80066e4:	9b04      	ldr	r3, [sp, #16]
 80066e6:	bfbc      	itt	lt
 80066e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80066ea:	2600      	movlt	r6, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	bfb7      	itett	lt
 80066f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80066f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80066f8:	1a9d      	sublt	r5, r3, r2
 80066fa:	2300      	movlt	r3, #0
 80066fc:	e741      	b.n	8006582 <_dtoa_r+0x742>
 80066fe:	9e08      	ldr	r6, [sp, #32]
 8006700:	9d05      	ldr	r5, [sp, #20]
 8006702:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006704:	e748      	b.n	8006598 <_dtoa_r+0x758>
 8006706:	9a08      	ldr	r2, [sp, #32]
 8006708:	e770      	b.n	80065ec <_dtoa_r+0x7ac>
 800670a:	9b07      	ldr	r3, [sp, #28]
 800670c:	2b01      	cmp	r3, #1
 800670e:	dc19      	bgt.n	8006744 <_dtoa_r+0x904>
 8006710:	9b02      	ldr	r3, [sp, #8]
 8006712:	b9bb      	cbnz	r3, 8006744 <_dtoa_r+0x904>
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800671a:	b99b      	cbnz	r3, 8006744 <_dtoa_r+0x904>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006722:	0d1b      	lsrs	r3, r3, #20
 8006724:	051b      	lsls	r3, r3, #20
 8006726:	b183      	cbz	r3, 800674a <_dtoa_r+0x90a>
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	3301      	adds	r3, #1
 800672c:	9305      	str	r3, [sp, #20]
 800672e:	9b06      	ldr	r3, [sp, #24]
 8006730:	3301      	adds	r3, #1
 8006732:	9306      	str	r3, [sp, #24]
 8006734:	f04f 0801 	mov.w	r8, #1
 8006738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800673a:	2b00      	cmp	r3, #0
 800673c:	f47f af6f 	bne.w	800661e <_dtoa_r+0x7de>
 8006740:	2001      	movs	r0, #1
 8006742:	e774      	b.n	800662e <_dtoa_r+0x7ee>
 8006744:	f04f 0800 	mov.w	r8, #0
 8006748:	e7f6      	b.n	8006738 <_dtoa_r+0x8f8>
 800674a:	4698      	mov	r8, r3
 800674c:	e7f4      	b.n	8006738 <_dtoa_r+0x8f8>
 800674e:	d082      	beq.n	8006656 <_dtoa_r+0x816>
 8006750:	9a05      	ldr	r2, [sp, #20]
 8006752:	331c      	adds	r3, #28
 8006754:	441a      	add	r2, r3
 8006756:	9205      	str	r2, [sp, #20]
 8006758:	9a06      	ldr	r2, [sp, #24]
 800675a:	441a      	add	r2, r3
 800675c:	441d      	add	r5, r3
 800675e:	9206      	str	r2, [sp, #24]
 8006760:	e779      	b.n	8006656 <_dtoa_r+0x816>
 8006762:	4603      	mov	r3, r0
 8006764:	e7f4      	b.n	8006750 <_dtoa_r+0x910>
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	dc37      	bgt.n	80067dc <_dtoa_r+0x99c>
 800676c:	9b07      	ldr	r3, [sp, #28]
 800676e:	2b02      	cmp	r3, #2
 8006770:	dd34      	ble.n	80067dc <_dtoa_r+0x99c>
 8006772:	9b04      	ldr	r3, [sp, #16]
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	b963      	cbnz	r3, 8006794 <_dtoa_r+0x954>
 800677a:	4631      	mov	r1, r6
 800677c:	2205      	movs	r2, #5
 800677e:	4620      	mov	r0, r4
 8006780:	f000 fab2 	bl	8006ce8 <__multadd>
 8006784:	4601      	mov	r1, r0
 8006786:	4606      	mov	r6, r0
 8006788:	4650      	mov	r0, sl
 800678a:	f000 fcc7 	bl	800711c <__mcmp>
 800678e:	2800      	cmp	r0, #0
 8006790:	f73f adbb 	bgt.w	800630a <_dtoa_r+0x4ca>
 8006794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006796:	9d00      	ldr	r5, [sp, #0]
 8006798:	ea6f 0b03 	mvn.w	fp, r3
 800679c:	f04f 0800 	mov.w	r8, #0
 80067a0:	4631      	mov	r1, r6
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 fa7e 	bl	8006ca4 <_Bfree>
 80067a8:	2f00      	cmp	r7, #0
 80067aa:	f43f aeab 	beq.w	8006504 <_dtoa_r+0x6c4>
 80067ae:	f1b8 0f00 	cmp.w	r8, #0
 80067b2:	d005      	beq.n	80067c0 <_dtoa_r+0x980>
 80067b4:	45b8      	cmp	r8, r7
 80067b6:	d003      	beq.n	80067c0 <_dtoa_r+0x980>
 80067b8:	4641      	mov	r1, r8
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fa72 	bl	8006ca4 <_Bfree>
 80067c0:	4639      	mov	r1, r7
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 fa6e 	bl	8006ca4 <_Bfree>
 80067c8:	e69c      	b.n	8006504 <_dtoa_r+0x6c4>
 80067ca:	2600      	movs	r6, #0
 80067cc:	4637      	mov	r7, r6
 80067ce:	e7e1      	b.n	8006794 <_dtoa_r+0x954>
 80067d0:	46bb      	mov	fp, r7
 80067d2:	4637      	mov	r7, r6
 80067d4:	e599      	b.n	800630a <_dtoa_r+0x4ca>
 80067d6:	bf00      	nop
 80067d8:	40240000 	.word	0x40240000
 80067dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80c8 	beq.w	8006974 <_dtoa_r+0xb34>
 80067e4:	9b04      	ldr	r3, [sp, #16]
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	dd05      	ble.n	80067f8 <_dtoa_r+0x9b8>
 80067ec:	4639      	mov	r1, r7
 80067ee:	462a      	mov	r2, r5
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 fc27 	bl	8007044 <__lshift>
 80067f6:	4607      	mov	r7, r0
 80067f8:	f1b8 0f00 	cmp.w	r8, #0
 80067fc:	d05b      	beq.n	80068b6 <_dtoa_r+0xa76>
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4620      	mov	r0, r4
 8006802:	f000 fa0f 	bl	8006c24 <_Balloc>
 8006806:	4605      	mov	r5, r0
 8006808:	b928      	cbnz	r0, 8006816 <_dtoa_r+0x9d6>
 800680a:	4b83      	ldr	r3, [pc, #524]	; (8006a18 <_dtoa_r+0xbd8>)
 800680c:	4602      	mov	r2, r0
 800680e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006812:	f7ff bb2e 	b.w	8005e72 <_dtoa_r+0x32>
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	3202      	adds	r2, #2
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	f107 010c 	add.w	r1, r7, #12
 8006820:	300c      	adds	r0, #12
 8006822:	f000 ffab 	bl	800777c <memcpy>
 8006826:	2201      	movs	r2, #1
 8006828:	4629      	mov	r1, r5
 800682a:	4620      	mov	r0, r4
 800682c:	f000 fc0a 	bl	8007044 <__lshift>
 8006830:	9b00      	ldr	r3, [sp, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	e9dd 2300 	ldrd	r2, r3, [sp]
 800683a:	4413      	add	r3, r2
 800683c:	9308      	str	r3, [sp, #32]
 800683e:	9b02      	ldr	r3, [sp, #8]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	46b8      	mov	r8, r7
 8006846:	9306      	str	r3, [sp, #24]
 8006848:	4607      	mov	r7, r0
 800684a:	9b04      	ldr	r3, [sp, #16]
 800684c:	4631      	mov	r1, r6
 800684e:	3b01      	subs	r3, #1
 8006850:	4650      	mov	r0, sl
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	f7ff fa69 	bl	8005d2a <quorem>
 8006858:	4641      	mov	r1, r8
 800685a:	9002      	str	r0, [sp, #8]
 800685c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006860:	4650      	mov	r0, sl
 8006862:	f000 fc5b 	bl	800711c <__mcmp>
 8006866:	463a      	mov	r2, r7
 8006868:	9005      	str	r0, [sp, #20]
 800686a:	4631      	mov	r1, r6
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fc71 	bl	8007154 <__mdiff>
 8006872:	68c2      	ldr	r2, [r0, #12]
 8006874:	4605      	mov	r5, r0
 8006876:	bb02      	cbnz	r2, 80068ba <_dtoa_r+0xa7a>
 8006878:	4601      	mov	r1, r0
 800687a:	4650      	mov	r0, sl
 800687c:	f000 fc4e 	bl	800711c <__mcmp>
 8006880:	4602      	mov	r2, r0
 8006882:	4629      	mov	r1, r5
 8006884:	4620      	mov	r0, r4
 8006886:	9209      	str	r2, [sp, #36]	; 0x24
 8006888:	f000 fa0c 	bl	8006ca4 <_Bfree>
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006890:	9d04      	ldr	r5, [sp, #16]
 8006892:	ea43 0102 	orr.w	r1, r3, r2
 8006896:	9b06      	ldr	r3, [sp, #24]
 8006898:	4319      	orrs	r1, r3
 800689a:	d110      	bne.n	80068be <_dtoa_r+0xa7e>
 800689c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068a0:	d029      	beq.n	80068f6 <_dtoa_r+0xab6>
 80068a2:	9b05      	ldr	r3, [sp, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dd02      	ble.n	80068ae <_dtoa_r+0xa6e>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	f883 9000 	strb.w	r9, [r3]
 80068b4:	e774      	b.n	80067a0 <_dtoa_r+0x960>
 80068b6:	4638      	mov	r0, r7
 80068b8:	e7ba      	b.n	8006830 <_dtoa_r+0x9f0>
 80068ba:	2201      	movs	r2, #1
 80068bc:	e7e1      	b.n	8006882 <_dtoa_r+0xa42>
 80068be:	9b05      	ldr	r3, [sp, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db04      	blt.n	80068ce <_dtoa_r+0xa8e>
 80068c4:	9907      	ldr	r1, [sp, #28]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	9906      	ldr	r1, [sp, #24]
 80068ca:	430b      	orrs	r3, r1
 80068cc:	d120      	bne.n	8006910 <_dtoa_r+0xad0>
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	dded      	ble.n	80068ae <_dtoa_r+0xa6e>
 80068d2:	4651      	mov	r1, sl
 80068d4:	2201      	movs	r2, #1
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fbb4 	bl	8007044 <__lshift>
 80068dc:	4631      	mov	r1, r6
 80068de:	4682      	mov	sl, r0
 80068e0:	f000 fc1c 	bl	800711c <__mcmp>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	dc03      	bgt.n	80068f0 <_dtoa_r+0xab0>
 80068e8:	d1e1      	bne.n	80068ae <_dtoa_r+0xa6e>
 80068ea:	f019 0f01 	tst.w	r9, #1
 80068ee:	d0de      	beq.n	80068ae <_dtoa_r+0xa6e>
 80068f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068f4:	d1d8      	bne.n	80068a8 <_dtoa_r+0xa68>
 80068f6:	9a01      	ldr	r2, [sp, #4]
 80068f8:	2339      	movs	r3, #57	; 0x39
 80068fa:	7013      	strb	r3, [r2, #0]
 80068fc:	462b      	mov	r3, r5
 80068fe:	461d      	mov	r5, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006906:	2a39      	cmp	r2, #57	; 0x39
 8006908:	d06c      	beq.n	80069e4 <_dtoa_r+0xba4>
 800690a:	3201      	adds	r2, #1
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	e747      	b.n	80067a0 <_dtoa_r+0x960>
 8006910:	2a00      	cmp	r2, #0
 8006912:	dd07      	ble.n	8006924 <_dtoa_r+0xae4>
 8006914:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006918:	d0ed      	beq.n	80068f6 <_dtoa_r+0xab6>
 800691a:	9a01      	ldr	r2, [sp, #4]
 800691c:	f109 0301 	add.w	r3, r9, #1
 8006920:	7013      	strb	r3, [r2, #0]
 8006922:	e73d      	b.n	80067a0 <_dtoa_r+0x960>
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	9a08      	ldr	r2, [sp, #32]
 8006928:	f803 9c01 	strb.w	r9, [r3, #-1]
 800692c:	4293      	cmp	r3, r2
 800692e:	d043      	beq.n	80069b8 <_dtoa_r+0xb78>
 8006930:	4651      	mov	r1, sl
 8006932:	2300      	movs	r3, #0
 8006934:	220a      	movs	r2, #10
 8006936:	4620      	mov	r0, r4
 8006938:	f000 f9d6 	bl	8006ce8 <__multadd>
 800693c:	45b8      	cmp	r8, r7
 800693e:	4682      	mov	sl, r0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	f04f 020a 	mov.w	r2, #10
 8006948:	4641      	mov	r1, r8
 800694a:	4620      	mov	r0, r4
 800694c:	d107      	bne.n	800695e <_dtoa_r+0xb1e>
 800694e:	f000 f9cb 	bl	8006ce8 <__multadd>
 8006952:	4680      	mov	r8, r0
 8006954:	4607      	mov	r7, r0
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	3301      	adds	r3, #1
 800695a:	9304      	str	r3, [sp, #16]
 800695c:	e775      	b.n	800684a <_dtoa_r+0xa0a>
 800695e:	f000 f9c3 	bl	8006ce8 <__multadd>
 8006962:	4639      	mov	r1, r7
 8006964:	4680      	mov	r8, r0
 8006966:	2300      	movs	r3, #0
 8006968:	220a      	movs	r2, #10
 800696a:	4620      	mov	r0, r4
 800696c:	f000 f9bc 	bl	8006ce8 <__multadd>
 8006970:	4607      	mov	r7, r0
 8006972:	e7f0      	b.n	8006956 <_dtoa_r+0xb16>
 8006974:	9b04      	ldr	r3, [sp, #16]
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	9d00      	ldr	r5, [sp, #0]
 800697a:	4631      	mov	r1, r6
 800697c:	4650      	mov	r0, sl
 800697e:	f7ff f9d4 	bl	8005d2a <quorem>
 8006982:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	f805 9b01 	strb.w	r9, [r5], #1
 800698c:	1aea      	subs	r2, r5, r3
 800698e:	9b01      	ldr	r3, [sp, #4]
 8006990:	4293      	cmp	r3, r2
 8006992:	dd07      	ble.n	80069a4 <_dtoa_r+0xb64>
 8006994:	4651      	mov	r1, sl
 8006996:	2300      	movs	r3, #0
 8006998:	220a      	movs	r2, #10
 800699a:	4620      	mov	r0, r4
 800699c:	f000 f9a4 	bl	8006ce8 <__multadd>
 80069a0:	4682      	mov	sl, r0
 80069a2:	e7ea      	b.n	800697a <_dtoa_r+0xb3a>
 80069a4:	9b01      	ldr	r3, [sp, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bfc8      	it	gt
 80069aa:	461d      	movgt	r5, r3
 80069ac:	9b00      	ldr	r3, [sp, #0]
 80069ae:	bfd8      	it	le
 80069b0:	2501      	movle	r5, #1
 80069b2:	441d      	add	r5, r3
 80069b4:	f04f 0800 	mov.w	r8, #0
 80069b8:	4651      	mov	r1, sl
 80069ba:	2201      	movs	r2, #1
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 fb41 	bl	8007044 <__lshift>
 80069c2:	4631      	mov	r1, r6
 80069c4:	4682      	mov	sl, r0
 80069c6:	f000 fba9 	bl	800711c <__mcmp>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	dc96      	bgt.n	80068fc <_dtoa_r+0xabc>
 80069ce:	d102      	bne.n	80069d6 <_dtoa_r+0xb96>
 80069d0:	f019 0f01 	tst.w	r9, #1
 80069d4:	d192      	bne.n	80068fc <_dtoa_r+0xabc>
 80069d6:	462b      	mov	r3, r5
 80069d8:	461d      	mov	r5, r3
 80069da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069de:	2a30      	cmp	r2, #48	; 0x30
 80069e0:	d0fa      	beq.n	80069d8 <_dtoa_r+0xb98>
 80069e2:	e6dd      	b.n	80067a0 <_dtoa_r+0x960>
 80069e4:	9a00      	ldr	r2, [sp, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d189      	bne.n	80068fe <_dtoa_r+0xabe>
 80069ea:	f10b 0b01 	add.w	fp, fp, #1
 80069ee:	2331      	movs	r3, #49	; 0x31
 80069f0:	e796      	b.n	8006920 <_dtoa_r+0xae0>
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <_dtoa_r+0xbdc>)
 80069f4:	f7ff ba99 	b.w	8005f2a <_dtoa_r+0xea>
 80069f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f47f aa6d 	bne.w	8005eda <_dtoa_r+0x9a>
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <_dtoa_r+0xbe0>)
 8006a02:	f7ff ba92 	b.w	8005f2a <_dtoa_r+0xea>
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dcb5      	bgt.n	8006978 <_dtoa_r+0xb38>
 8006a0c:	9b07      	ldr	r3, [sp, #28]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	f73f aeb1 	bgt.w	8006776 <_dtoa_r+0x936>
 8006a14:	e7b0      	b.n	8006978 <_dtoa_r+0xb38>
 8006a16:	bf00      	nop
 8006a18:	08007f80 	.word	0x08007f80
 8006a1c:	08007ee0 	.word	0x08007ee0
 8006a20:	08007f04 	.word	0x08007f04

08006a24 <_free_r>:
 8006a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a26:	2900      	cmp	r1, #0
 8006a28:	d044      	beq.n	8006ab4 <_free_r+0x90>
 8006a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a2e:	9001      	str	r0, [sp, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f1a1 0404 	sub.w	r4, r1, #4
 8006a36:	bfb8      	it	lt
 8006a38:	18e4      	addlt	r4, r4, r3
 8006a3a:	f000 f8e7 	bl	8006c0c <__malloc_lock>
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	; (8006ab8 <_free_r+0x94>)
 8006a40:	9801      	ldr	r0, [sp, #4]
 8006a42:	6813      	ldr	r3, [r2, #0]
 8006a44:	b933      	cbnz	r3, 8006a54 <_free_r+0x30>
 8006a46:	6063      	str	r3, [r4, #4]
 8006a48:	6014      	str	r4, [r2, #0]
 8006a4a:	b003      	add	sp, #12
 8006a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a50:	f000 b8e2 	b.w	8006c18 <__malloc_unlock>
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d908      	bls.n	8006a6a <_free_r+0x46>
 8006a58:	6825      	ldr	r5, [r4, #0]
 8006a5a:	1961      	adds	r1, r4, r5
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	bf01      	itttt	eq
 8006a60:	6819      	ldreq	r1, [r3, #0]
 8006a62:	685b      	ldreq	r3, [r3, #4]
 8006a64:	1949      	addeq	r1, r1, r5
 8006a66:	6021      	streq	r1, [r4, #0]
 8006a68:	e7ed      	b.n	8006a46 <_free_r+0x22>
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b10b      	cbz	r3, 8006a74 <_free_r+0x50>
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	d9fa      	bls.n	8006a6a <_free_r+0x46>
 8006a74:	6811      	ldr	r1, [r2, #0]
 8006a76:	1855      	adds	r5, r2, r1
 8006a78:	42a5      	cmp	r5, r4
 8006a7a:	d10b      	bne.n	8006a94 <_free_r+0x70>
 8006a7c:	6824      	ldr	r4, [r4, #0]
 8006a7e:	4421      	add	r1, r4
 8006a80:	1854      	adds	r4, r2, r1
 8006a82:	42a3      	cmp	r3, r4
 8006a84:	6011      	str	r1, [r2, #0]
 8006a86:	d1e0      	bne.n	8006a4a <_free_r+0x26>
 8006a88:	681c      	ldr	r4, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	6053      	str	r3, [r2, #4]
 8006a8e:	440c      	add	r4, r1
 8006a90:	6014      	str	r4, [r2, #0]
 8006a92:	e7da      	b.n	8006a4a <_free_r+0x26>
 8006a94:	d902      	bls.n	8006a9c <_free_r+0x78>
 8006a96:	230c      	movs	r3, #12
 8006a98:	6003      	str	r3, [r0, #0]
 8006a9a:	e7d6      	b.n	8006a4a <_free_r+0x26>
 8006a9c:	6825      	ldr	r5, [r4, #0]
 8006a9e:	1961      	adds	r1, r4, r5
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	bf04      	itt	eq
 8006aa4:	6819      	ldreq	r1, [r3, #0]
 8006aa6:	685b      	ldreq	r3, [r3, #4]
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	bf04      	itt	eq
 8006aac:	1949      	addeq	r1, r1, r5
 8006aae:	6021      	streq	r1, [r4, #0]
 8006ab0:	6054      	str	r4, [r2, #4]
 8006ab2:	e7ca      	b.n	8006a4a <_free_r+0x26>
 8006ab4:	b003      	add	sp, #12
 8006ab6:	bd30      	pop	{r4, r5, pc}
 8006ab8:	20000504 	.word	0x20000504

08006abc <malloc>:
 8006abc:	4b02      	ldr	r3, [pc, #8]	; (8006ac8 <malloc+0xc>)
 8006abe:	4601      	mov	r1, r0
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	f000 b823 	b.w	8006b0c <_malloc_r>
 8006ac6:	bf00      	nop
 8006ac8:	20000068 	.word	0x20000068

08006acc <sbrk_aligned>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4e0e      	ldr	r6, [pc, #56]	; (8006b08 <sbrk_aligned+0x3c>)
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	6831      	ldr	r1, [r6, #0]
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	b911      	cbnz	r1, 8006ade <sbrk_aligned+0x12>
 8006ad8:	f000 fe40 	bl	800775c <_sbrk_r>
 8006adc:	6030      	str	r0, [r6, #0]
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f000 fe3b 	bl	800775c <_sbrk_r>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d00a      	beq.n	8006b00 <sbrk_aligned+0x34>
 8006aea:	1cc4      	adds	r4, r0, #3
 8006aec:	f024 0403 	bic.w	r4, r4, #3
 8006af0:	42a0      	cmp	r0, r4
 8006af2:	d007      	beq.n	8006b04 <sbrk_aligned+0x38>
 8006af4:	1a21      	subs	r1, r4, r0
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 fe30 	bl	800775c <_sbrk_r>
 8006afc:	3001      	adds	r0, #1
 8006afe:	d101      	bne.n	8006b04 <sbrk_aligned+0x38>
 8006b00:	f04f 34ff 	mov.w	r4, #4294967295
 8006b04:	4620      	mov	r0, r4
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	20000508 	.word	0x20000508

08006b0c <_malloc_r>:
 8006b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b10:	1ccd      	adds	r5, r1, #3
 8006b12:	f025 0503 	bic.w	r5, r5, #3
 8006b16:	3508      	adds	r5, #8
 8006b18:	2d0c      	cmp	r5, #12
 8006b1a:	bf38      	it	cc
 8006b1c:	250c      	movcc	r5, #12
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	4607      	mov	r7, r0
 8006b22:	db01      	blt.n	8006b28 <_malloc_r+0x1c>
 8006b24:	42a9      	cmp	r1, r5
 8006b26:	d905      	bls.n	8006b34 <_malloc_r+0x28>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	2600      	movs	r6, #0
 8006b2e:	4630      	mov	r0, r6
 8006b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c08 <_malloc_r+0xfc>
 8006b38:	f000 f868 	bl	8006c0c <__malloc_lock>
 8006b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b40:	461c      	mov	r4, r3
 8006b42:	bb5c      	cbnz	r4, 8006b9c <_malloc_r+0x90>
 8006b44:	4629      	mov	r1, r5
 8006b46:	4638      	mov	r0, r7
 8006b48:	f7ff ffc0 	bl	8006acc <sbrk_aligned>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	4604      	mov	r4, r0
 8006b50:	d155      	bne.n	8006bfe <_malloc_r+0xf2>
 8006b52:	f8d8 4000 	ldr.w	r4, [r8]
 8006b56:	4626      	mov	r6, r4
 8006b58:	2e00      	cmp	r6, #0
 8006b5a:	d145      	bne.n	8006be8 <_malloc_r+0xdc>
 8006b5c:	2c00      	cmp	r4, #0
 8006b5e:	d048      	beq.n	8006bf2 <_malloc_r+0xe6>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	4631      	mov	r1, r6
 8006b64:	4638      	mov	r0, r7
 8006b66:	eb04 0903 	add.w	r9, r4, r3
 8006b6a:	f000 fdf7 	bl	800775c <_sbrk_r>
 8006b6e:	4581      	cmp	r9, r0
 8006b70:	d13f      	bne.n	8006bf2 <_malloc_r+0xe6>
 8006b72:	6821      	ldr	r1, [r4, #0]
 8006b74:	1a6d      	subs	r5, r5, r1
 8006b76:	4629      	mov	r1, r5
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7ff ffa7 	bl	8006acc <sbrk_aligned>
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d037      	beq.n	8006bf2 <_malloc_r+0xe6>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	442b      	add	r3, r5
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	f8d8 3000 	ldr.w	r3, [r8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d038      	beq.n	8006c02 <_malloc_r+0xf6>
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	42a2      	cmp	r2, r4
 8006b94:	d12b      	bne.n	8006bee <_malloc_r+0xe2>
 8006b96:	2200      	movs	r2, #0
 8006b98:	605a      	str	r2, [r3, #4]
 8006b9a:	e00f      	b.n	8006bbc <_malloc_r+0xb0>
 8006b9c:	6822      	ldr	r2, [r4, #0]
 8006b9e:	1b52      	subs	r2, r2, r5
 8006ba0:	d41f      	bmi.n	8006be2 <_malloc_r+0xd6>
 8006ba2:	2a0b      	cmp	r2, #11
 8006ba4:	d917      	bls.n	8006bd6 <_malloc_r+0xca>
 8006ba6:	1961      	adds	r1, r4, r5
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	6025      	str	r5, [r4, #0]
 8006bac:	bf18      	it	ne
 8006bae:	6059      	strne	r1, [r3, #4]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	bf08      	it	eq
 8006bb4:	f8c8 1000 	streq.w	r1, [r8]
 8006bb8:	5162      	str	r2, [r4, r5]
 8006bba:	604b      	str	r3, [r1, #4]
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	f104 060b 	add.w	r6, r4, #11
 8006bc2:	f000 f829 	bl	8006c18 <__malloc_unlock>
 8006bc6:	f026 0607 	bic.w	r6, r6, #7
 8006bca:	1d23      	adds	r3, r4, #4
 8006bcc:	1af2      	subs	r2, r6, r3
 8006bce:	d0ae      	beq.n	8006b2e <_malloc_r+0x22>
 8006bd0:	1b9b      	subs	r3, r3, r6
 8006bd2:	50a3      	str	r3, [r4, r2]
 8006bd4:	e7ab      	b.n	8006b2e <_malloc_r+0x22>
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	6862      	ldr	r2, [r4, #4]
 8006bda:	d1dd      	bne.n	8006b98 <_malloc_r+0x8c>
 8006bdc:	f8c8 2000 	str.w	r2, [r8]
 8006be0:	e7ec      	b.n	8006bbc <_malloc_r+0xb0>
 8006be2:	4623      	mov	r3, r4
 8006be4:	6864      	ldr	r4, [r4, #4]
 8006be6:	e7ac      	b.n	8006b42 <_malloc_r+0x36>
 8006be8:	4634      	mov	r4, r6
 8006bea:	6876      	ldr	r6, [r6, #4]
 8006bec:	e7b4      	b.n	8006b58 <_malloc_r+0x4c>
 8006bee:	4613      	mov	r3, r2
 8006bf0:	e7cc      	b.n	8006b8c <_malloc_r+0x80>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	603b      	str	r3, [r7, #0]
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f000 f80e 	bl	8006c18 <__malloc_unlock>
 8006bfc:	e797      	b.n	8006b2e <_malloc_r+0x22>
 8006bfe:	6025      	str	r5, [r4, #0]
 8006c00:	e7dc      	b.n	8006bbc <_malloc_r+0xb0>
 8006c02:	605b      	str	r3, [r3, #4]
 8006c04:	deff      	udf	#255	; 0xff
 8006c06:	bf00      	nop
 8006c08:	20000504 	.word	0x20000504

08006c0c <__malloc_lock>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	; (8006c14 <__malloc_lock+0x8>)
 8006c0e:	f7ff b88a 	b.w	8005d26 <__retarget_lock_acquire_recursive>
 8006c12:	bf00      	nop
 8006c14:	20000500 	.word	0x20000500

08006c18 <__malloc_unlock>:
 8006c18:	4801      	ldr	r0, [pc, #4]	; (8006c20 <__malloc_unlock+0x8>)
 8006c1a:	f7ff b885 	b.w	8005d28 <__retarget_lock_release_recursive>
 8006c1e:	bf00      	nop
 8006c20:	20000500 	.word	0x20000500

08006c24 <_Balloc>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	69c6      	ldr	r6, [r0, #28]
 8006c28:	4604      	mov	r4, r0
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	b976      	cbnz	r6, 8006c4c <_Balloc+0x28>
 8006c2e:	2010      	movs	r0, #16
 8006c30:	f7ff ff44 	bl	8006abc <malloc>
 8006c34:	4602      	mov	r2, r0
 8006c36:	61e0      	str	r0, [r4, #28]
 8006c38:	b920      	cbnz	r0, 8006c44 <_Balloc+0x20>
 8006c3a:	4b18      	ldr	r3, [pc, #96]	; (8006c9c <_Balloc+0x78>)
 8006c3c:	4818      	ldr	r0, [pc, #96]	; (8006ca0 <_Balloc+0x7c>)
 8006c3e:	216b      	movs	r1, #107	; 0x6b
 8006c40:	f000 fdaa 	bl	8007798 <__assert_func>
 8006c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c48:	6006      	str	r6, [r0, #0]
 8006c4a:	60c6      	str	r6, [r0, #12]
 8006c4c:	69e6      	ldr	r6, [r4, #28]
 8006c4e:	68f3      	ldr	r3, [r6, #12]
 8006c50:	b183      	cbz	r3, 8006c74 <_Balloc+0x50>
 8006c52:	69e3      	ldr	r3, [r4, #28]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c5a:	b9b8      	cbnz	r0, 8006c8c <_Balloc+0x68>
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c62:	1d72      	adds	r2, r6, #5
 8006c64:	0092      	lsls	r2, r2, #2
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 fdb4 	bl	80077d4 <_calloc_r>
 8006c6c:	b160      	cbz	r0, 8006c88 <_Balloc+0x64>
 8006c6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c72:	e00e      	b.n	8006c92 <_Balloc+0x6e>
 8006c74:	2221      	movs	r2, #33	; 0x21
 8006c76:	2104      	movs	r1, #4
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fdab 	bl	80077d4 <_calloc_r>
 8006c7e:	69e3      	ldr	r3, [r4, #28]
 8006c80:	60f0      	str	r0, [r6, #12]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e4      	bne.n	8006c52 <_Balloc+0x2e>
 8006c88:	2000      	movs	r0, #0
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	6802      	ldr	r2, [r0, #0]
 8006c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c92:	2300      	movs	r3, #0
 8006c94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c98:	e7f7      	b.n	8006c8a <_Balloc+0x66>
 8006c9a:	bf00      	nop
 8006c9c:	08007f11 	.word	0x08007f11
 8006ca0:	08007f91 	.word	0x08007f91

08006ca4 <_Bfree>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	69c6      	ldr	r6, [r0, #28]
 8006ca8:	4605      	mov	r5, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	b976      	cbnz	r6, 8006ccc <_Bfree+0x28>
 8006cae:	2010      	movs	r0, #16
 8006cb0:	f7ff ff04 	bl	8006abc <malloc>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	61e8      	str	r0, [r5, #28]
 8006cb8:	b920      	cbnz	r0, 8006cc4 <_Bfree+0x20>
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <_Bfree+0x3c>)
 8006cbc:	4809      	ldr	r0, [pc, #36]	; (8006ce4 <_Bfree+0x40>)
 8006cbe:	218f      	movs	r1, #143	; 0x8f
 8006cc0:	f000 fd6a 	bl	8007798 <__assert_func>
 8006cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cc8:	6006      	str	r6, [r0, #0]
 8006cca:	60c6      	str	r6, [r0, #12]
 8006ccc:	b13c      	cbz	r4, 8006cde <_Bfree+0x3a>
 8006cce:	69eb      	ldr	r3, [r5, #28]
 8006cd0:	6862      	ldr	r2, [r4, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cd8:	6021      	str	r1, [r4, #0]
 8006cda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	08007f11 	.word	0x08007f11
 8006ce4:	08007f91 	.word	0x08007f91

08006ce8 <__multadd>:
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	690d      	ldr	r5, [r1, #16]
 8006cee:	4607      	mov	r7, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	461e      	mov	r6, r3
 8006cf4:	f101 0c14 	add.w	ip, r1, #20
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f8dc 3000 	ldr.w	r3, [ip]
 8006cfe:	b299      	uxth	r1, r3
 8006d00:	fb02 6101 	mla	r1, r2, r1, r6
 8006d04:	0c1e      	lsrs	r6, r3, #16
 8006d06:	0c0b      	lsrs	r3, r1, #16
 8006d08:	fb02 3306 	mla	r3, r2, r6, r3
 8006d0c:	b289      	uxth	r1, r1
 8006d0e:	3001      	adds	r0, #1
 8006d10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d14:	4285      	cmp	r5, r0
 8006d16:	f84c 1b04 	str.w	r1, [ip], #4
 8006d1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d1e:	dcec      	bgt.n	8006cfa <__multadd+0x12>
 8006d20:	b30e      	cbz	r6, 8006d66 <__multadd+0x7e>
 8006d22:	68a3      	ldr	r3, [r4, #8]
 8006d24:	42ab      	cmp	r3, r5
 8006d26:	dc19      	bgt.n	8006d5c <__multadd+0x74>
 8006d28:	6861      	ldr	r1, [r4, #4]
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	3101      	adds	r1, #1
 8006d2e:	f7ff ff79 	bl	8006c24 <_Balloc>
 8006d32:	4680      	mov	r8, r0
 8006d34:	b928      	cbnz	r0, 8006d42 <__multadd+0x5a>
 8006d36:	4602      	mov	r2, r0
 8006d38:	4b0c      	ldr	r3, [pc, #48]	; (8006d6c <__multadd+0x84>)
 8006d3a:	480d      	ldr	r0, [pc, #52]	; (8006d70 <__multadd+0x88>)
 8006d3c:	21ba      	movs	r1, #186	; 0xba
 8006d3e:	f000 fd2b 	bl	8007798 <__assert_func>
 8006d42:	6922      	ldr	r2, [r4, #16]
 8006d44:	3202      	adds	r2, #2
 8006d46:	f104 010c 	add.w	r1, r4, #12
 8006d4a:	0092      	lsls	r2, r2, #2
 8006d4c:	300c      	adds	r0, #12
 8006d4e:	f000 fd15 	bl	800777c <memcpy>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4638      	mov	r0, r7
 8006d56:	f7ff ffa5 	bl	8006ca4 <_Bfree>
 8006d5a:	4644      	mov	r4, r8
 8006d5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d60:	3501      	adds	r5, #1
 8006d62:	615e      	str	r6, [r3, #20]
 8006d64:	6125      	str	r5, [r4, #16]
 8006d66:	4620      	mov	r0, r4
 8006d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d6c:	08007f80 	.word	0x08007f80
 8006d70:	08007f91 	.word	0x08007f91

08006d74 <__hi0bits>:
 8006d74:	0c03      	lsrs	r3, r0, #16
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	b9d3      	cbnz	r3, 8006db0 <__hi0bits+0x3c>
 8006d7a:	0400      	lsls	r0, r0, #16
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d82:	bf04      	itt	eq
 8006d84:	0200      	lsleq	r0, r0, #8
 8006d86:	3308      	addeq	r3, #8
 8006d88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d8c:	bf04      	itt	eq
 8006d8e:	0100      	lsleq	r0, r0, #4
 8006d90:	3304      	addeq	r3, #4
 8006d92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d96:	bf04      	itt	eq
 8006d98:	0080      	lsleq	r0, r0, #2
 8006d9a:	3302      	addeq	r3, #2
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	db05      	blt.n	8006dac <__hi0bits+0x38>
 8006da0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006da4:	f103 0301 	add.w	r3, r3, #1
 8006da8:	bf08      	it	eq
 8006daa:	2320      	moveq	r3, #32
 8006dac:	4618      	mov	r0, r3
 8006dae:	4770      	bx	lr
 8006db0:	2300      	movs	r3, #0
 8006db2:	e7e4      	b.n	8006d7e <__hi0bits+0xa>

08006db4 <__lo0bits>:
 8006db4:	6803      	ldr	r3, [r0, #0]
 8006db6:	f013 0207 	ands.w	r2, r3, #7
 8006dba:	d00c      	beq.n	8006dd6 <__lo0bits+0x22>
 8006dbc:	07d9      	lsls	r1, r3, #31
 8006dbe:	d422      	bmi.n	8006e06 <__lo0bits+0x52>
 8006dc0:	079a      	lsls	r2, r3, #30
 8006dc2:	bf49      	itett	mi
 8006dc4:	085b      	lsrmi	r3, r3, #1
 8006dc6:	089b      	lsrpl	r3, r3, #2
 8006dc8:	6003      	strmi	r3, [r0, #0]
 8006dca:	2201      	movmi	r2, #1
 8006dcc:	bf5c      	itt	pl
 8006dce:	6003      	strpl	r3, [r0, #0]
 8006dd0:	2202      	movpl	r2, #2
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4770      	bx	lr
 8006dd6:	b299      	uxth	r1, r3
 8006dd8:	b909      	cbnz	r1, 8006dde <__lo0bits+0x2a>
 8006dda:	0c1b      	lsrs	r3, r3, #16
 8006ddc:	2210      	movs	r2, #16
 8006dde:	b2d9      	uxtb	r1, r3
 8006de0:	b909      	cbnz	r1, 8006de6 <__lo0bits+0x32>
 8006de2:	3208      	adds	r2, #8
 8006de4:	0a1b      	lsrs	r3, r3, #8
 8006de6:	0719      	lsls	r1, r3, #28
 8006de8:	bf04      	itt	eq
 8006dea:	091b      	lsreq	r3, r3, #4
 8006dec:	3204      	addeq	r2, #4
 8006dee:	0799      	lsls	r1, r3, #30
 8006df0:	bf04      	itt	eq
 8006df2:	089b      	lsreq	r3, r3, #2
 8006df4:	3202      	addeq	r2, #2
 8006df6:	07d9      	lsls	r1, r3, #31
 8006df8:	d403      	bmi.n	8006e02 <__lo0bits+0x4e>
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	f102 0201 	add.w	r2, r2, #1
 8006e00:	d003      	beq.n	8006e0a <__lo0bits+0x56>
 8006e02:	6003      	str	r3, [r0, #0]
 8006e04:	e7e5      	b.n	8006dd2 <__lo0bits+0x1e>
 8006e06:	2200      	movs	r2, #0
 8006e08:	e7e3      	b.n	8006dd2 <__lo0bits+0x1e>
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	e7e1      	b.n	8006dd2 <__lo0bits+0x1e>
	...

08006e10 <__i2b>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	460c      	mov	r4, r1
 8006e14:	2101      	movs	r1, #1
 8006e16:	f7ff ff05 	bl	8006c24 <_Balloc>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	b928      	cbnz	r0, 8006e2a <__i2b+0x1a>
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <__i2b+0x24>)
 8006e20:	4805      	ldr	r0, [pc, #20]	; (8006e38 <__i2b+0x28>)
 8006e22:	f240 1145 	movw	r1, #325	; 0x145
 8006e26:	f000 fcb7 	bl	8007798 <__assert_func>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6144      	str	r4, [r0, #20]
 8006e2e:	6103      	str	r3, [r0, #16]
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	08007f80 	.word	0x08007f80
 8006e38:	08007f91 	.word	0x08007f91

08006e3c <__multiply>:
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	4691      	mov	r9, r2
 8006e42:	690a      	ldr	r2, [r1, #16]
 8006e44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	bfb8      	it	lt
 8006e4c:	460b      	movlt	r3, r1
 8006e4e:	460c      	mov	r4, r1
 8006e50:	bfbc      	itt	lt
 8006e52:	464c      	movlt	r4, r9
 8006e54:	4699      	movlt	r9, r3
 8006e56:	6927      	ldr	r7, [r4, #16]
 8006e58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e5c:	68a3      	ldr	r3, [r4, #8]
 8006e5e:	6861      	ldr	r1, [r4, #4]
 8006e60:	eb07 060a 	add.w	r6, r7, sl
 8006e64:	42b3      	cmp	r3, r6
 8006e66:	b085      	sub	sp, #20
 8006e68:	bfb8      	it	lt
 8006e6a:	3101      	addlt	r1, #1
 8006e6c:	f7ff feda 	bl	8006c24 <_Balloc>
 8006e70:	b930      	cbnz	r0, 8006e80 <__multiply+0x44>
 8006e72:	4602      	mov	r2, r0
 8006e74:	4b44      	ldr	r3, [pc, #272]	; (8006f88 <__multiply+0x14c>)
 8006e76:	4845      	ldr	r0, [pc, #276]	; (8006f8c <__multiply+0x150>)
 8006e78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e7c:	f000 fc8c 	bl	8007798 <__assert_func>
 8006e80:	f100 0514 	add.w	r5, r0, #20
 8006e84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e88:	462b      	mov	r3, r5
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4543      	cmp	r3, r8
 8006e8e:	d321      	bcc.n	8006ed4 <__multiply+0x98>
 8006e90:	f104 0314 	add.w	r3, r4, #20
 8006e94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e98:	f109 0314 	add.w	r3, r9, #20
 8006e9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ea0:	9202      	str	r2, [sp, #8]
 8006ea2:	1b3a      	subs	r2, r7, r4
 8006ea4:	3a15      	subs	r2, #21
 8006ea6:	f022 0203 	bic.w	r2, r2, #3
 8006eaa:	3204      	adds	r2, #4
 8006eac:	f104 0115 	add.w	r1, r4, #21
 8006eb0:	428f      	cmp	r7, r1
 8006eb2:	bf38      	it	cc
 8006eb4:	2204      	movcc	r2, #4
 8006eb6:	9201      	str	r2, [sp, #4]
 8006eb8:	9a02      	ldr	r2, [sp, #8]
 8006eba:	9303      	str	r3, [sp, #12]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d80c      	bhi.n	8006eda <__multiply+0x9e>
 8006ec0:	2e00      	cmp	r6, #0
 8006ec2:	dd03      	ble.n	8006ecc <__multiply+0x90>
 8006ec4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d05b      	beq.n	8006f84 <__multiply+0x148>
 8006ecc:	6106      	str	r6, [r0, #16]
 8006ece:	b005      	add	sp, #20
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	f843 2b04 	str.w	r2, [r3], #4
 8006ed8:	e7d8      	b.n	8006e8c <__multiply+0x50>
 8006eda:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ede:	f1ba 0f00 	cmp.w	sl, #0
 8006ee2:	d024      	beq.n	8006f2e <__multiply+0xf2>
 8006ee4:	f104 0e14 	add.w	lr, r4, #20
 8006ee8:	46a9      	mov	r9, r5
 8006eea:	f04f 0c00 	mov.w	ip, #0
 8006eee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ef2:	f8d9 1000 	ldr.w	r1, [r9]
 8006ef6:	fa1f fb82 	uxth.w	fp, r2
 8006efa:	b289      	uxth	r1, r1
 8006efc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f04:	f8d9 2000 	ldr.w	r2, [r9]
 8006f08:	4461      	add	r1, ip
 8006f0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f16:	b289      	uxth	r1, r1
 8006f18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f1c:	4577      	cmp	r7, lr
 8006f1e:	f849 1b04 	str.w	r1, [r9], #4
 8006f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f26:	d8e2      	bhi.n	8006eee <__multiply+0xb2>
 8006f28:	9a01      	ldr	r2, [sp, #4]
 8006f2a:	f845 c002 	str.w	ip, [r5, r2]
 8006f2e:	9a03      	ldr	r2, [sp, #12]
 8006f30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f34:	3304      	adds	r3, #4
 8006f36:	f1b9 0f00 	cmp.w	r9, #0
 8006f3a:	d021      	beq.n	8006f80 <__multiply+0x144>
 8006f3c:	6829      	ldr	r1, [r5, #0]
 8006f3e:	f104 0c14 	add.w	ip, r4, #20
 8006f42:	46ae      	mov	lr, r5
 8006f44:	f04f 0a00 	mov.w	sl, #0
 8006f48:	f8bc b000 	ldrh.w	fp, [ip]
 8006f4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f50:	fb09 220b 	mla	r2, r9, fp, r2
 8006f54:	4452      	add	r2, sl
 8006f56:	b289      	uxth	r1, r1
 8006f58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f5c:	f84e 1b04 	str.w	r1, [lr], #4
 8006f60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f68:	f8be 1000 	ldrh.w	r1, [lr]
 8006f6c:	fb09 110a 	mla	r1, r9, sl, r1
 8006f70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006f74:	4567      	cmp	r7, ip
 8006f76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f7a:	d8e5      	bhi.n	8006f48 <__multiply+0x10c>
 8006f7c:	9a01      	ldr	r2, [sp, #4]
 8006f7e:	50a9      	str	r1, [r5, r2]
 8006f80:	3504      	adds	r5, #4
 8006f82:	e799      	b.n	8006eb8 <__multiply+0x7c>
 8006f84:	3e01      	subs	r6, #1
 8006f86:	e79b      	b.n	8006ec0 <__multiply+0x84>
 8006f88:	08007f80 	.word	0x08007f80
 8006f8c:	08007f91 	.word	0x08007f91

08006f90 <__pow5mult>:
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	4615      	mov	r5, r2
 8006f96:	f012 0203 	ands.w	r2, r2, #3
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	d007      	beq.n	8006fb0 <__pow5mult+0x20>
 8006fa0:	4c25      	ldr	r4, [pc, #148]	; (8007038 <__pow5mult+0xa8>)
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006faa:	f7ff fe9d 	bl	8006ce8 <__multadd>
 8006fae:	4607      	mov	r7, r0
 8006fb0:	10ad      	asrs	r5, r5, #2
 8006fb2:	d03d      	beq.n	8007030 <__pow5mult+0xa0>
 8006fb4:	69f4      	ldr	r4, [r6, #28]
 8006fb6:	b97c      	cbnz	r4, 8006fd8 <__pow5mult+0x48>
 8006fb8:	2010      	movs	r0, #16
 8006fba:	f7ff fd7f 	bl	8006abc <malloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	61f0      	str	r0, [r6, #28]
 8006fc2:	b928      	cbnz	r0, 8006fd0 <__pow5mult+0x40>
 8006fc4:	4b1d      	ldr	r3, [pc, #116]	; (800703c <__pow5mult+0xac>)
 8006fc6:	481e      	ldr	r0, [pc, #120]	; (8007040 <__pow5mult+0xb0>)
 8006fc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006fcc:	f000 fbe4 	bl	8007798 <__assert_func>
 8006fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd4:	6004      	str	r4, [r0, #0]
 8006fd6:	60c4      	str	r4, [r0, #12]
 8006fd8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fe0:	b94c      	cbnz	r4, 8006ff6 <__pow5mult+0x66>
 8006fe2:	f240 2171 	movw	r1, #625	; 0x271
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f7ff ff12 	bl	8006e10 <__i2b>
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	6003      	str	r3, [r0, #0]
 8006ff6:	f04f 0900 	mov.w	r9, #0
 8006ffa:	07eb      	lsls	r3, r5, #31
 8006ffc:	d50a      	bpl.n	8007014 <__pow5mult+0x84>
 8006ffe:	4639      	mov	r1, r7
 8007000:	4622      	mov	r2, r4
 8007002:	4630      	mov	r0, r6
 8007004:	f7ff ff1a 	bl	8006e3c <__multiply>
 8007008:	4639      	mov	r1, r7
 800700a:	4680      	mov	r8, r0
 800700c:	4630      	mov	r0, r6
 800700e:	f7ff fe49 	bl	8006ca4 <_Bfree>
 8007012:	4647      	mov	r7, r8
 8007014:	106d      	asrs	r5, r5, #1
 8007016:	d00b      	beq.n	8007030 <__pow5mult+0xa0>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	b938      	cbnz	r0, 800702c <__pow5mult+0x9c>
 800701c:	4622      	mov	r2, r4
 800701e:	4621      	mov	r1, r4
 8007020:	4630      	mov	r0, r6
 8007022:	f7ff ff0b 	bl	8006e3c <__multiply>
 8007026:	6020      	str	r0, [r4, #0]
 8007028:	f8c0 9000 	str.w	r9, [r0]
 800702c:	4604      	mov	r4, r0
 800702e:	e7e4      	b.n	8006ffa <__pow5mult+0x6a>
 8007030:	4638      	mov	r0, r7
 8007032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007036:	bf00      	nop
 8007038:	080080e0 	.word	0x080080e0
 800703c:	08007f11 	.word	0x08007f11
 8007040:	08007f91 	.word	0x08007f91

08007044 <__lshift>:
 8007044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	460c      	mov	r4, r1
 800704a:	6849      	ldr	r1, [r1, #4]
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	4607      	mov	r7, r0
 8007056:	4691      	mov	r9, r2
 8007058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800705c:	f108 0601 	add.w	r6, r8, #1
 8007060:	42b3      	cmp	r3, r6
 8007062:	db0b      	blt.n	800707c <__lshift+0x38>
 8007064:	4638      	mov	r0, r7
 8007066:	f7ff fddd 	bl	8006c24 <_Balloc>
 800706a:	4605      	mov	r5, r0
 800706c:	b948      	cbnz	r0, 8007082 <__lshift+0x3e>
 800706e:	4602      	mov	r2, r0
 8007070:	4b28      	ldr	r3, [pc, #160]	; (8007114 <__lshift+0xd0>)
 8007072:	4829      	ldr	r0, [pc, #164]	; (8007118 <__lshift+0xd4>)
 8007074:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007078:	f000 fb8e 	bl	8007798 <__assert_func>
 800707c:	3101      	adds	r1, #1
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	e7ee      	b.n	8007060 <__lshift+0x1c>
 8007082:	2300      	movs	r3, #0
 8007084:	f100 0114 	add.w	r1, r0, #20
 8007088:	f100 0210 	add.w	r2, r0, #16
 800708c:	4618      	mov	r0, r3
 800708e:	4553      	cmp	r3, sl
 8007090:	db33      	blt.n	80070fa <__lshift+0xb6>
 8007092:	6920      	ldr	r0, [r4, #16]
 8007094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007098:	f104 0314 	add.w	r3, r4, #20
 800709c:	f019 091f 	ands.w	r9, r9, #31
 80070a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070a8:	d02b      	beq.n	8007102 <__lshift+0xbe>
 80070aa:	f1c9 0e20 	rsb	lr, r9, #32
 80070ae:	468a      	mov	sl, r1
 80070b0:	2200      	movs	r2, #0
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	fa00 f009 	lsl.w	r0, r0, r9
 80070b8:	4310      	orrs	r0, r2
 80070ba:	f84a 0b04 	str.w	r0, [sl], #4
 80070be:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c2:	459c      	cmp	ip, r3
 80070c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80070c8:	d8f3      	bhi.n	80070b2 <__lshift+0x6e>
 80070ca:	ebac 0304 	sub.w	r3, ip, r4
 80070ce:	3b15      	subs	r3, #21
 80070d0:	f023 0303 	bic.w	r3, r3, #3
 80070d4:	3304      	adds	r3, #4
 80070d6:	f104 0015 	add.w	r0, r4, #21
 80070da:	4584      	cmp	ip, r0
 80070dc:	bf38      	it	cc
 80070de:	2304      	movcc	r3, #4
 80070e0:	50ca      	str	r2, [r1, r3]
 80070e2:	b10a      	cbz	r2, 80070e8 <__lshift+0xa4>
 80070e4:	f108 0602 	add.w	r6, r8, #2
 80070e8:	3e01      	subs	r6, #1
 80070ea:	4638      	mov	r0, r7
 80070ec:	612e      	str	r6, [r5, #16]
 80070ee:	4621      	mov	r1, r4
 80070f0:	f7ff fdd8 	bl	8006ca4 <_Bfree>
 80070f4:	4628      	mov	r0, r5
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80070fe:	3301      	adds	r3, #1
 8007100:	e7c5      	b.n	800708e <__lshift+0x4a>
 8007102:	3904      	subs	r1, #4
 8007104:	f853 2b04 	ldr.w	r2, [r3], #4
 8007108:	f841 2f04 	str.w	r2, [r1, #4]!
 800710c:	459c      	cmp	ip, r3
 800710e:	d8f9      	bhi.n	8007104 <__lshift+0xc0>
 8007110:	e7ea      	b.n	80070e8 <__lshift+0xa4>
 8007112:	bf00      	nop
 8007114:	08007f80 	.word	0x08007f80
 8007118:	08007f91 	.word	0x08007f91

0800711c <__mcmp>:
 800711c:	b530      	push	{r4, r5, lr}
 800711e:	6902      	ldr	r2, [r0, #16]
 8007120:	690c      	ldr	r4, [r1, #16]
 8007122:	1b12      	subs	r2, r2, r4
 8007124:	d10e      	bne.n	8007144 <__mcmp+0x28>
 8007126:	f100 0314 	add.w	r3, r0, #20
 800712a:	3114      	adds	r1, #20
 800712c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007130:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007134:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007138:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800713c:	42a5      	cmp	r5, r4
 800713e:	d003      	beq.n	8007148 <__mcmp+0x2c>
 8007140:	d305      	bcc.n	800714e <__mcmp+0x32>
 8007142:	2201      	movs	r2, #1
 8007144:	4610      	mov	r0, r2
 8007146:	bd30      	pop	{r4, r5, pc}
 8007148:	4283      	cmp	r3, r0
 800714a:	d3f3      	bcc.n	8007134 <__mcmp+0x18>
 800714c:	e7fa      	b.n	8007144 <__mcmp+0x28>
 800714e:	f04f 32ff 	mov.w	r2, #4294967295
 8007152:	e7f7      	b.n	8007144 <__mcmp+0x28>

08007154 <__mdiff>:
 8007154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	460c      	mov	r4, r1
 800715a:	4606      	mov	r6, r0
 800715c:	4611      	mov	r1, r2
 800715e:	4620      	mov	r0, r4
 8007160:	4690      	mov	r8, r2
 8007162:	f7ff ffdb 	bl	800711c <__mcmp>
 8007166:	1e05      	subs	r5, r0, #0
 8007168:	d110      	bne.n	800718c <__mdiff+0x38>
 800716a:	4629      	mov	r1, r5
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff fd59 	bl	8006c24 <_Balloc>
 8007172:	b930      	cbnz	r0, 8007182 <__mdiff+0x2e>
 8007174:	4b3a      	ldr	r3, [pc, #232]	; (8007260 <__mdiff+0x10c>)
 8007176:	4602      	mov	r2, r0
 8007178:	f240 2137 	movw	r1, #567	; 0x237
 800717c:	4839      	ldr	r0, [pc, #228]	; (8007264 <__mdiff+0x110>)
 800717e:	f000 fb0b 	bl	8007798 <__assert_func>
 8007182:	2301      	movs	r3, #1
 8007184:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718c:	bfa4      	itt	ge
 800718e:	4643      	movge	r3, r8
 8007190:	46a0      	movge	r8, r4
 8007192:	4630      	mov	r0, r6
 8007194:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007198:	bfa6      	itte	ge
 800719a:	461c      	movge	r4, r3
 800719c:	2500      	movge	r5, #0
 800719e:	2501      	movlt	r5, #1
 80071a0:	f7ff fd40 	bl	8006c24 <_Balloc>
 80071a4:	b920      	cbnz	r0, 80071b0 <__mdiff+0x5c>
 80071a6:	4b2e      	ldr	r3, [pc, #184]	; (8007260 <__mdiff+0x10c>)
 80071a8:	4602      	mov	r2, r0
 80071aa:	f240 2145 	movw	r1, #581	; 0x245
 80071ae:	e7e5      	b.n	800717c <__mdiff+0x28>
 80071b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80071b4:	6926      	ldr	r6, [r4, #16]
 80071b6:	60c5      	str	r5, [r0, #12]
 80071b8:	f104 0914 	add.w	r9, r4, #20
 80071bc:	f108 0514 	add.w	r5, r8, #20
 80071c0:	f100 0e14 	add.w	lr, r0, #20
 80071c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80071c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071cc:	f108 0210 	add.w	r2, r8, #16
 80071d0:	46f2      	mov	sl, lr
 80071d2:	2100      	movs	r1, #0
 80071d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80071d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071dc:	fa11 f88b 	uxtah	r8, r1, fp
 80071e0:	b299      	uxth	r1, r3
 80071e2:	0c1b      	lsrs	r3, r3, #16
 80071e4:	eba8 0801 	sub.w	r8, r8, r1
 80071e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071f0:	fa1f f888 	uxth.w	r8, r8
 80071f4:	1419      	asrs	r1, r3, #16
 80071f6:	454e      	cmp	r6, r9
 80071f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071fc:	f84a 3b04 	str.w	r3, [sl], #4
 8007200:	d8e8      	bhi.n	80071d4 <__mdiff+0x80>
 8007202:	1b33      	subs	r3, r6, r4
 8007204:	3b15      	subs	r3, #21
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	3304      	adds	r3, #4
 800720c:	3415      	adds	r4, #21
 800720e:	42a6      	cmp	r6, r4
 8007210:	bf38      	it	cc
 8007212:	2304      	movcc	r3, #4
 8007214:	441d      	add	r5, r3
 8007216:	4473      	add	r3, lr
 8007218:	469e      	mov	lr, r3
 800721a:	462e      	mov	r6, r5
 800721c:	4566      	cmp	r6, ip
 800721e:	d30e      	bcc.n	800723e <__mdiff+0xea>
 8007220:	f10c 0203 	add.w	r2, ip, #3
 8007224:	1b52      	subs	r2, r2, r5
 8007226:	f022 0203 	bic.w	r2, r2, #3
 800722a:	3d03      	subs	r5, #3
 800722c:	45ac      	cmp	ip, r5
 800722e:	bf38      	it	cc
 8007230:	2200      	movcc	r2, #0
 8007232:	4413      	add	r3, r2
 8007234:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007238:	b17a      	cbz	r2, 800725a <__mdiff+0x106>
 800723a:	6107      	str	r7, [r0, #16]
 800723c:	e7a4      	b.n	8007188 <__mdiff+0x34>
 800723e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007242:	fa11 f288 	uxtah	r2, r1, r8
 8007246:	1414      	asrs	r4, r2, #16
 8007248:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800724c:	b292      	uxth	r2, r2
 800724e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007252:	f84e 2b04 	str.w	r2, [lr], #4
 8007256:	1421      	asrs	r1, r4, #16
 8007258:	e7e0      	b.n	800721c <__mdiff+0xc8>
 800725a:	3f01      	subs	r7, #1
 800725c:	e7ea      	b.n	8007234 <__mdiff+0xe0>
 800725e:	bf00      	nop
 8007260:	08007f80 	.word	0x08007f80
 8007264:	08007f91 	.word	0x08007f91

08007268 <__d2b>:
 8007268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800726c:	460f      	mov	r7, r1
 800726e:	2101      	movs	r1, #1
 8007270:	ec59 8b10 	vmov	r8, r9, d0
 8007274:	4616      	mov	r6, r2
 8007276:	f7ff fcd5 	bl	8006c24 <_Balloc>
 800727a:	4604      	mov	r4, r0
 800727c:	b930      	cbnz	r0, 800728c <__d2b+0x24>
 800727e:	4602      	mov	r2, r0
 8007280:	4b24      	ldr	r3, [pc, #144]	; (8007314 <__d2b+0xac>)
 8007282:	4825      	ldr	r0, [pc, #148]	; (8007318 <__d2b+0xb0>)
 8007284:	f240 310f 	movw	r1, #783	; 0x30f
 8007288:	f000 fa86 	bl	8007798 <__assert_func>
 800728c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007294:	bb2d      	cbnz	r5, 80072e2 <__d2b+0x7a>
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	f1b8 0300 	subs.w	r3, r8, #0
 800729c:	d026      	beq.n	80072ec <__d2b+0x84>
 800729e:	4668      	mov	r0, sp
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	f7ff fd87 	bl	8006db4 <__lo0bits>
 80072a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072aa:	b1e8      	cbz	r0, 80072e8 <__d2b+0x80>
 80072ac:	f1c0 0320 	rsb	r3, r0, #32
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	430b      	orrs	r3, r1
 80072b6:	40c2      	lsrs	r2, r0
 80072b8:	6163      	str	r3, [r4, #20]
 80072ba:	9201      	str	r2, [sp, #4]
 80072bc:	9b01      	ldr	r3, [sp, #4]
 80072be:	61a3      	str	r3, [r4, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf14      	ite	ne
 80072c4:	2202      	movne	r2, #2
 80072c6:	2201      	moveq	r2, #1
 80072c8:	6122      	str	r2, [r4, #16]
 80072ca:	b1bd      	cbz	r5, 80072fc <__d2b+0x94>
 80072cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072d0:	4405      	add	r5, r0
 80072d2:	603d      	str	r5, [r7, #0]
 80072d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072d8:	6030      	str	r0, [r6, #0]
 80072da:	4620      	mov	r0, r4
 80072dc:	b003      	add	sp, #12
 80072de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072e6:	e7d6      	b.n	8007296 <__d2b+0x2e>
 80072e8:	6161      	str	r1, [r4, #20]
 80072ea:	e7e7      	b.n	80072bc <__d2b+0x54>
 80072ec:	a801      	add	r0, sp, #4
 80072ee:	f7ff fd61 	bl	8006db4 <__lo0bits>
 80072f2:	9b01      	ldr	r3, [sp, #4]
 80072f4:	6163      	str	r3, [r4, #20]
 80072f6:	3020      	adds	r0, #32
 80072f8:	2201      	movs	r2, #1
 80072fa:	e7e5      	b.n	80072c8 <__d2b+0x60>
 80072fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007300:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007304:	6038      	str	r0, [r7, #0]
 8007306:	6918      	ldr	r0, [r3, #16]
 8007308:	f7ff fd34 	bl	8006d74 <__hi0bits>
 800730c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007310:	e7e2      	b.n	80072d8 <__d2b+0x70>
 8007312:	bf00      	nop
 8007314:	08007f80 	.word	0x08007f80
 8007318:	08007f91 	.word	0x08007f91

0800731c <__ssputs_r>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	688e      	ldr	r6, [r1, #8]
 8007322:	461f      	mov	r7, r3
 8007324:	42be      	cmp	r6, r7
 8007326:	680b      	ldr	r3, [r1, #0]
 8007328:	4682      	mov	sl, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4690      	mov	r8, r2
 800732e:	d82c      	bhi.n	800738a <__ssputs_r+0x6e>
 8007330:	898a      	ldrh	r2, [r1, #12]
 8007332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007336:	d026      	beq.n	8007386 <__ssputs_r+0x6a>
 8007338:	6965      	ldr	r5, [r4, #20]
 800733a:	6909      	ldr	r1, [r1, #16]
 800733c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007340:	eba3 0901 	sub.w	r9, r3, r1
 8007344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007348:	1c7b      	adds	r3, r7, #1
 800734a:	444b      	add	r3, r9
 800734c:	106d      	asrs	r5, r5, #1
 800734e:	429d      	cmp	r5, r3
 8007350:	bf38      	it	cc
 8007352:	461d      	movcc	r5, r3
 8007354:	0553      	lsls	r3, r2, #21
 8007356:	d527      	bpl.n	80073a8 <__ssputs_r+0x8c>
 8007358:	4629      	mov	r1, r5
 800735a:	f7ff fbd7 	bl	8006b0c <_malloc_r>
 800735e:	4606      	mov	r6, r0
 8007360:	b360      	cbz	r0, 80073bc <__ssputs_r+0xa0>
 8007362:	6921      	ldr	r1, [r4, #16]
 8007364:	464a      	mov	r2, r9
 8007366:	f000 fa09 	bl	800777c <memcpy>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	6126      	str	r6, [r4, #16]
 8007378:	6165      	str	r5, [r4, #20]
 800737a:	444e      	add	r6, r9
 800737c:	eba5 0509 	sub.w	r5, r5, r9
 8007380:	6026      	str	r6, [r4, #0]
 8007382:	60a5      	str	r5, [r4, #8]
 8007384:	463e      	mov	r6, r7
 8007386:	42be      	cmp	r6, r7
 8007388:	d900      	bls.n	800738c <__ssputs_r+0x70>
 800738a:	463e      	mov	r6, r7
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	4632      	mov	r2, r6
 8007390:	4641      	mov	r1, r8
 8007392:	f000 f9c9 	bl	8007728 <memmove>
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	1b9b      	subs	r3, r3, r6
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	4433      	add	r3, r6
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	2000      	movs	r0, #0
 80073a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a8:	462a      	mov	r2, r5
 80073aa:	f000 fa3b 	bl	8007824 <_realloc_r>
 80073ae:	4606      	mov	r6, r0
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1e0      	bne.n	8007376 <__ssputs_r+0x5a>
 80073b4:	6921      	ldr	r1, [r4, #16]
 80073b6:	4650      	mov	r0, sl
 80073b8:	f7ff fb34 	bl	8006a24 <_free_r>
 80073bc:	230c      	movs	r3, #12
 80073be:	f8ca 3000 	str.w	r3, [sl]
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295
 80073ce:	e7e9      	b.n	80073a4 <__ssputs_r+0x88>

080073d0 <_svfiprintf_r>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	4698      	mov	r8, r3
 80073d6:	898b      	ldrh	r3, [r1, #12]
 80073d8:	061b      	lsls	r3, r3, #24
 80073da:	b09d      	sub	sp, #116	; 0x74
 80073dc:	4607      	mov	r7, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	d50e      	bpl.n	8007402 <_svfiprintf_r+0x32>
 80073e4:	690b      	ldr	r3, [r1, #16]
 80073e6:	b963      	cbnz	r3, 8007402 <_svfiprintf_r+0x32>
 80073e8:	2140      	movs	r1, #64	; 0x40
 80073ea:	f7ff fb8f 	bl	8006b0c <_malloc_r>
 80073ee:	6028      	str	r0, [r5, #0]
 80073f0:	6128      	str	r0, [r5, #16]
 80073f2:	b920      	cbnz	r0, 80073fe <_svfiprintf_r+0x2e>
 80073f4:	230c      	movs	r3, #12
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	e0d0      	b.n	80075a0 <_svfiprintf_r+0x1d0>
 80073fe:	2340      	movs	r3, #64	; 0x40
 8007400:	616b      	str	r3, [r5, #20]
 8007402:	2300      	movs	r3, #0
 8007404:	9309      	str	r3, [sp, #36]	; 0x24
 8007406:	2320      	movs	r3, #32
 8007408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800740c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007410:	2330      	movs	r3, #48	; 0x30
 8007412:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80075b8 <_svfiprintf_r+0x1e8>
 8007416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800741a:	f04f 0901 	mov.w	r9, #1
 800741e:	4623      	mov	r3, r4
 8007420:	469a      	mov	sl, r3
 8007422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007426:	b10a      	cbz	r2, 800742c <_svfiprintf_r+0x5c>
 8007428:	2a25      	cmp	r2, #37	; 0x25
 800742a:	d1f9      	bne.n	8007420 <_svfiprintf_r+0x50>
 800742c:	ebba 0b04 	subs.w	fp, sl, r4
 8007430:	d00b      	beq.n	800744a <_svfiprintf_r+0x7a>
 8007432:	465b      	mov	r3, fp
 8007434:	4622      	mov	r2, r4
 8007436:	4629      	mov	r1, r5
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff ff6f 	bl	800731c <__ssputs_r>
 800743e:	3001      	adds	r0, #1
 8007440:	f000 80a9 	beq.w	8007596 <_svfiprintf_r+0x1c6>
 8007444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007446:	445a      	add	r2, fp
 8007448:	9209      	str	r2, [sp, #36]	; 0x24
 800744a:	f89a 3000 	ldrb.w	r3, [sl]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80a1 	beq.w	8007596 <_svfiprintf_r+0x1c6>
 8007454:	2300      	movs	r3, #0
 8007456:	f04f 32ff 	mov.w	r2, #4294967295
 800745a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800745e:	f10a 0a01 	add.w	sl, sl, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	9307      	str	r3, [sp, #28]
 8007466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800746a:	931a      	str	r3, [sp, #104]	; 0x68
 800746c:	4654      	mov	r4, sl
 800746e:	2205      	movs	r2, #5
 8007470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007474:	4850      	ldr	r0, [pc, #320]	; (80075b8 <_svfiprintf_r+0x1e8>)
 8007476:	f7f8 feab 	bl	80001d0 <memchr>
 800747a:	9a04      	ldr	r2, [sp, #16]
 800747c:	b9d8      	cbnz	r0, 80074b6 <_svfiprintf_r+0xe6>
 800747e:	06d0      	lsls	r0, r2, #27
 8007480:	bf44      	itt	mi
 8007482:	2320      	movmi	r3, #32
 8007484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007488:	0711      	lsls	r1, r2, #28
 800748a:	bf44      	itt	mi
 800748c:	232b      	movmi	r3, #43	; 0x2b
 800748e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007492:	f89a 3000 	ldrb.w	r3, [sl]
 8007496:	2b2a      	cmp	r3, #42	; 0x2a
 8007498:	d015      	beq.n	80074c6 <_svfiprintf_r+0xf6>
 800749a:	9a07      	ldr	r2, [sp, #28]
 800749c:	4654      	mov	r4, sl
 800749e:	2000      	movs	r0, #0
 80074a0:	f04f 0c0a 	mov.w	ip, #10
 80074a4:	4621      	mov	r1, r4
 80074a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074aa:	3b30      	subs	r3, #48	; 0x30
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	d94d      	bls.n	800754c <_svfiprintf_r+0x17c>
 80074b0:	b1b0      	cbz	r0, 80074e0 <_svfiprintf_r+0x110>
 80074b2:	9207      	str	r2, [sp, #28]
 80074b4:	e014      	b.n	80074e0 <_svfiprintf_r+0x110>
 80074b6:	eba0 0308 	sub.w	r3, r0, r8
 80074ba:	fa09 f303 	lsl.w	r3, r9, r3
 80074be:	4313      	orrs	r3, r2
 80074c0:	9304      	str	r3, [sp, #16]
 80074c2:	46a2      	mov	sl, r4
 80074c4:	e7d2      	b.n	800746c <_svfiprintf_r+0x9c>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	1d19      	adds	r1, r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	9103      	str	r1, [sp, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfbb      	ittet	lt
 80074d2:	425b      	neglt	r3, r3
 80074d4:	f042 0202 	orrlt.w	r2, r2, #2
 80074d8:	9307      	strge	r3, [sp, #28]
 80074da:	9307      	strlt	r3, [sp, #28]
 80074dc:	bfb8      	it	lt
 80074de:	9204      	strlt	r2, [sp, #16]
 80074e0:	7823      	ldrb	r3, [r4, #0]
 80074e2:	2b2e      	cmp	r3, #46	; 0x2e
 80074e4:	d10c      	bne.n	8007500 <_svfiprintf_r+0x130>
 80074e6:	7863      	ldrb	r3, [r4, #1]
 80074e8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ea:	d134      	bne.n	8007556 <_svfiprintf_r+0x186>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9203      	str	r2, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfb8      	it	lt
 80074f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80074fc:	3402      	adds	r4, #2
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80075c8 <_svfiprintf_r+0x1f8>
 8007504:	7821      	ldrb	r1, [r4, #0]
 8007506:	2203      	movs	r2, #3
 8007508:	4650      	mov	r0, sl
 800750a:	f7f8 fe61 	bl	80001d0 <memchr>
 800750e:	b138      	cbz	r0, 8007520 <_svfiprintf_r+0x150>
 8007510:	9b04      	ldr	r3, [sp, #16]
 8007512:	eba0 000a 	sub.w	r0, r0, sl
 8007516:	2240      	movs	r2, #64	; 0x40
 8007518:	4082      	lsls	r2, r0
 800751a:	4313      	orrs	r3, r2
 800751c:	3401      	adds	r4, #1
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007524:	4825      	ldr	r0, [pc, #148]	; (80075bc <_svfiprintf_r+0x1ec>)
 8007526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800752a:	2206      	movs	r2, #6
 800752c:	f7f8 fe50 	bl	80001d0 <memchr>
 8007530:	2800      	cmp	r0, #0
 8007532:	d038      	beq.n	80075a6 <_svfiprintf_r+0x1d6>
 8007534:	4b22      	ldr	r3, [pc, #136]	; (80075c0 <_svfiprintf_r+0x1f0>)
 8007536:	bb1b      	cbnz	r3, 8007580 <_svfiprintf_r+0x1b0>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	3307      	adds	r3, #7
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	3308      	adds	r3, #8
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	4433      	add	r3, r6
 8007548:	9309      	str	r3, [sp, #36]	; 0x24
 800754a:	e768      	b.n	800741e <_svfiprintf_r+0x4e>
 800754c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007550:	460c      	mov	r4, r1
 8007552:	2001      	movs	r0, #1
 8007554:	e7a6      	b.n	80074a4 <_svfiprintf_r+0xd4>
 8007556:	2300      	movs	r3, #0
 8007558:	3401      	adds	r4, #1
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	4619      	mov	r1, r3
 800755e:	f04f 0c0a 	mov.w	ip, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007568:	3a30      	subs	r2, #48	; 0x30
 800756a:	2a09      	cmp	r2, #9
 800756c:	d903      	bls.n	8007576 <_svfiprintf_r+0x1a6>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0c6      	beq.n	8007500 <_svfiprintf_r+0x130>
 8007572:	9105      	str	r1, [sp, #20]
 8007574:	e7c4      	b.n	8007500 <_svfiprintf_r+0x130>
 8007576:	fb0c 2101 	mla	r1, ip, r1, r2
 800757a:	4604      	mov	r4, r0
 800757c:	2301      	movs	r3, #1
 800757e:	e7f0      	b.n	8007562 <_svfiprintf_r+0x192>
 8007580:	ab03      	add	r3, sp, #12
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	462a      	mov	r2, r5
 8007586:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <_svfiprintf_r+0x1f4>)
 8007588:	a904      	add	r1, sp, #16
 800758a:	4638      	mov	r0, r7
 800758c:	f7fd fe62 	bl	8005254 <_printf_float>
 8007590:	1c42      	adds	r2, r0, #1
 8007592:	4606      	mov	r6, r0
 8007594:	d1d6      	bne.n	8007544 <_svfiprintf_r+0x174>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	065b      	lsls	r3, r3, #25
 800759a:	f53f af2d 	bmi.w	80073f8 <_svfiprintf_r+0x28>
 800759e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075a0:	b01d      	add	sp, #116	; 0x74
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	ab03      	add	r3, sp, #12
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	462a      	mov	r2, r5
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <_svfiprintf_r+0x1f4>)
 80075ae:	a904      	add	r1, sp, #16
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7fe f8f3 	bl	800579c <_printf_i>
 80075b6:	e7eb      	b.n	8007590 <_svfiprintf_r+0x1c0>
 80075b8:	080080ec 	.word	0x080080ec
 80075bc:	080080f6 	.word	0x080080f6
 80075c0:	08005255 	.word	0x08005255
 80075c4:	0800731d 	.word	0x0800731d
 80075c8:	080080f2 	.word	0x080080f2

080075cc <__sflush_r>:
 80075cc:	898a      	ldrh	r2, [r1, #12]
 80075ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	0710      	lsls	r0, r2, #28
 80075d6:	460c      	mov	r4, r1
 80075d8:	d458      	bmi.n	800768c <__sflush_r+0xc0>
 80075da:	684b      	ldr	r3, [r1, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dc05      	bgt.n	80075ec <__sflush_r+0x20>
 80075e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dc02      	bgt.n	80075ec <__sflush_r+0x20>
 80075e6:	2000      	movs	r0, #0
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	d0f9      	beq.n	80075e6 <__sflush_r+0x1a>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f8:	682f      	ldr	r7, [r5, #0]
 80075fa:	6a21      	ldr	r1, [r4, #32]
 80075fc:	602b      	str	r3, [r5, #0]
 80075fe:	d032      	beq.n	8007666 <__sflush_r+0x9a>
 8007600:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	075a      	lsls	r2, r3, #29
 8007606:	d505      	bpl.n	8007614 <__sflush_r+0x48>
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	1ac0      	subs	r0, r0, r3
 800760c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760e:	b10b      	cbz	r3, 8007614 <__sflush_r+0x48>
 8007610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007612:	1ac0      	subs	r0, r0, r3
 8007614:	2300      	movs	r3, #0
 8007616:	4602      	mov	r2, r0
 8007618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800761a:	6a21      	ldr	r1, [r4, #32]
 800761c:	4628      	mov	r0, r5
 800761e:	47b0      	blx	r6
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	d106      	bne.n	8007634 <__sflush_r+0x68>
 8007626:	6829      	ldr	r1, [r5, #0]
 8007628:	291d      	cmp	r1, #29
 800762a:	d82b      	bhi.n	8007684 <__sflush_r+0xb8>
 800762c:	4a29      	ldr	r2, [pc, #164]	; (80076d4 <__sflush_r+0x108>)
 800762e:	410a      	asrs	r2, r1
 8007630:	07d6      	lsls	r6, r2, #31
 8007632:	d427      	bmi.n	8007684 <__sflush_r+0xb8>
 8007634:	2200      	movs	r2, #0
 8007636:	6062      	str	r2, [r4, #4]
 8007638:	04d9      	lsls	r1, r3, #19
 800763a:	6922      	ldr	r2, [r4, #16]
 800763c:	6022      	str	r2, [r4, #0]
 800763e:	d504      	bpl.n	800764a <__sflush_r+0x7e>
 8007640:	1c42      	adds	r2, r0, #1
 8007642:	d101      	bne.n	8007648 <__sflush_r+0x7c>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b903      	cbnz	r3, 800764a <__sflush_r+0x7e>
 8007648:	6560      	str	r0, [r4, #84]	; 0x54
 800764a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764c:	602f      	str	r7, [r5, #0]
 800764e:	2900      	cmp	r1, #0
 8007650:	d0c9      	beq.n	80075e6 <__sflush_r+0x1a>
 8007652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007656:	4299      	cmp	r1, r3
 8007658:	d002      	beq.n	8007660 <__sflush_r+0x94>
 800765a:	4628      	mov	r0, r5
 800765c:	f7ff f9e2 	bl	8006a24 <_free_r>
 8007660:	2000      	movs	r0, #0
 8007662:	6360      	str	r0, [r4, #52]	; 0x34
 8007664:	e7c0      	b.n	80075e8 <__sflush_r+0x1c>
 8007666:	2301      	movs	r3, #1
 8007668:	4628      	mov	r0, r5
 800766a:	47b0      	blx	r6
 800766c:	1c41      	adds	r1, r0, #1
 800766e:	d1c8      	bne.n	8007602 <__sflush_r+0x36>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c5      	beq.n	8007602 <__sflush_r+0x36>
 8007676:	2b1d      	cmp	r3, #29
 8007678:	d001      	beq.n	800767e <__sflush_r+0xb2>
 800767a:	2b16      	cmp	r3, #22
 800767c:	d101      	bne.n	8007682 <__sflush_r+0xb6>
 800767e:	602f      	str	r7, [r5, #0]
 8007680:	e7b1      	b.n	80075e6 <__sflush_r+0x1a>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007688:	81a3      	strh	r3, [r4, #12]
 800768a:	e7ad      	b.n	80075e8 <__sflush_r+0x1c>
 800768c:	690f      	ldr	r7, [r1, #16]
 800768e:	2f00      	cmp	r7, #0
 8007690:	d0a9      	beq.n	80075e6 <__sflush_r+0x1a>
 8007692:	0793      	lsls	r3, r2, #30
 8007694:	680e      	ldr	r6, [r1, #0]
 8007696:	bf08      	it	eq
 8007698:	694b      	ldreq	r3, [r1, #20]
 800769a:	600f      	str	r7, [r1, #0]
 800769c:	bf18      	it	ne
 800769e:	2300      	movne	r3, #0
 80076a0:	eba6 0807 	sub.w	r8, r6, r7
 80076a4:	608b      	str	r3, [r1, #8]
 80076a6:	f1b8 0f00 	cmp.w	r8, #0
 80076aa:	dd9c      	ble.n	80075e6 <__sflush_r+0x1a>
 80076ac:	6a21      	ldr	r1, [r4, #32]
 80076ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076b0:	4643      	mov	r3, r8
 80076b2:	463a      	mov	r2, r7
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b0      	blx	r6
 80076b8:	2800      	cmp	r0, #0
 80076ba:	dc06      	bgt.n	80076ca <__sflush_r+0xfe>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	e78e      	b.n	80075e8 <__sflush_r+0x1c>
 80076ca:	4407      	add	r7, r0
 80076cc:	eba8 0800 	sub.w	r8, r8, r0
 80076d0:	e7e9      	b.n	80076a6 <__sflush_r+0xda>
 80076d2:	bf00      	nop
 80076d4:	dfbffffe 	.word	0xdfbffffe

080076d8 <_fflush_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	690b      	ldr	r3, [r1, #16]
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b913      	cbnz	r3, 80076e8 <_fflush_r+0x10>
 80076e2:	2500      	movs	r5, #0
 80076e4:	4628      	mov	r0, r5
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	b118      	cbz	r0, 80076f2 <_fflush_r+0x1a>
 80076ea:	6a03      	ldr	r3, [r0, #32]
 80076ec:	b90b      	cbnz	r3, 80076f2 <_fflush_r+0x1a>
 80076ee:	f7fe fa03 	bl	8005af8 <__sinit>
 80076f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0f3      	beq.n	80076e2 <_fflush_r+0xa>
 80076fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076fc:	07d0      	lsls	r0, r2, #31
 80076fe:	d404      	bmi.n	800770a <_fflush_r+0x32>
 8007700:	0599      	lsls	r1, r3, #22
 8007702:	d402      	bmi.n	800770a <_fflush_r+0x32>
 8007704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007706:	f7fe fb0e 	bl	8005d26 <__retarget_lock_acquire_recursive>
 800770a:	4628      	mov	r0, r5
 800770c:	4621      	mov	r1, r4
 800770e:	f7ff ff5d 	bl	80075cc <__sflush_r>
 8007712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007714:	07da      	lsls	r2, r3, #31
 8007716:	4605      	mov	r5, r0
 8007718:	d4e4      	bmi.n	80076e4 <_fflush_r+0xc>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	059b      	lsls	r3, r3, #22
 800771e:	d4e1      	bmi.n	80076e4 <_fflush_r+0xc>
 8007720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007722:	f7fe fb01 	bl	8005d28 <__retarget_lock_release_recursive>
 8007726:	e7dd      	b.n	80076e4 <_fflush_r+0xc>

08007728 <memmove>:
 8007728:	4288      	cmp	r0, r1
 800772a:	b510      	push	{r4, lr}
 800772c:	eb01 0402 	add.w	r4, r1, r2
 8007730:	d902      	bls.n	8007738 <memmove+0x10>
 8007732:	4284      	cmp	r4, r0
 8007734:	4623      	mov	r3, r4
 8007736:	d807      	bhi.n	8007748 <memmove+0x20>
 8007738:	1e43      	subs	r3, r0, #1
 800773a:	42a1      	cmp	r1, r4
 800773c:	d008      	beq.n	8007750 <memmove+0x28>
 800773e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007746:	e7f8      	b.n	800773a <memmove+0x12>
 8007748:	4402      	add	r2, r0
 800774a:	4601      	mov	r1, r0
 800774c:	428a      	cmp	r2, r1
 800774e:	d100      	bne.n	8007752 <memmove+0x2a>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800775a:	e7f7      	b.n	800774c <memmove+0x24>

0800775c <_sbrk_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d06      	ldr	r5, [pc, #24]	; (8007778 <_sbrk_r+0x1c>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	602b      	str	r3, [r5, #0]
 8007768:	f7f9 ff64 	bl	8001634 <_sbrk>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_sbrk_r+0x1a>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_sbrk_r+0x1a>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	200004fc 	.word	0x200004fc

0800777c <memcpy>:
 800777c:	440a      	add	r2, r1
 800777e:	4291      	cmp	r1, r2
 8007780:	f100 33ff 	add.w	r3, r0, #4294967295
 8007784:	d100      	bne.n	8007788 <memcpy+0xc>
 8007786:	4770      	bx	lr
 8007788:	b510      	push	{r4, lr}
 800778a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007792:	4291      	cmp	r1, r2
 8007794:	d1f9      	bne.n	800778a <memcpy+0xe>
 8007796:	bd10      	pop	{r4, pc}

08007798 <__assert_func>:
 8007798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800779a:	4614      	mov	r4, r2
 800779c:	461a      	mov	r2, r3
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <__assert_func+0x2c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4605      	mov	r5, r0
 80077a4:	68d8      	ldr	r0, [r3, #12]
 80077a6:	b14c      	cbz	r4, 80077bc <__assert_func+0x24>
 80077a8:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <__assert_func+0x30>)
 80077aa:	9100      	str	r1, [sp, #0]
 80077ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077b0:	4906      	ldr	r1, [pc, #24]	; (80077cc <__assert_func+0x34>)
 80077b2:	462b      	mov	r3, r5
 80077b4:	f000 f872 	bl	800789c <fiprintf>
 80077b8:	f000 f882 	bl	80078c0 <abort>
 80077bc:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <__assert_func+0x38>)
 80077be:	461c      	mov	r4, r3
 80077c0:	e7f3      	b.n	80077aa <__assert_func+0x12>
 80077c2:	bf00      	nop
 80077c4:	20000068 	.word	0x20000068
 80077c8:	08008107 	.word	0x08008107
 80077cc:	08008114 	.word	0x08008114
 80077d0:	08008142 	.word	0x08008142

080077d4 <_calloc_r>:
 80077d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d6:	fba1 2402 	umull	r2, r4, r1, r2
 80077da:	b94c      	cbnz	r4, 80077f0 <_calloc_r+0x1c>
 80077dc:	4611      	mov	r1, r2
 80077de:	9201      	str	r2, [sp, #4]
 80077e0:	f7ff f994 	bl	8006b0c <_malloc_r>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	4605      	mov	r5, r0
 80077e8:	b930      	cbnz	r0, 80077f8 <_calloc_r+0x24>
 80077ea:	4628      	mov	r0, r5
 80077ec:	b003      	add	sp, #12
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	220c      	movs	r2, #12
 80077f2:	6002      	str	r2, [r0, #0]
 80077f4:	2500      	movs	r5, #0
 80077f6:	e7f8      	b.n	80077ea <_calloc_r+0x16>
 80077f8:	4621      	mov	r1, r4
 80077fa:	f7fe fa16 	bl	8005c2a <memset>
 80077fe:	e7f4      	b.n	80077ea <_calloc_r+0x16>

08007800 <__ascii_mbtowc>:
 8007800:	b082      	sub	sp, #8
 8007802:	b901      	cbnz	r1, 8007806 <__ascii_mbtowc+0x6>
 8007804:	a901      	add	r1, sp, #4
 8007806:	b142      	cbz	r2, 800781a <__ascii_mbtowc+0x1a>
 8007808:	b14b      	cbz	r3, 800781e <__ascii_mbtowc+0x1e>
 800780a:	7813      	ldrb	r3, [r2, #0]
 800780c:	600b      	str	r3, [r1, #0]
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	1e10      	subs	r0, r2, #0
 8007812:	bf18      	it	ne
 8007814:	2001      	movne	r0, #1
 8007816:	b002      	add	sp, #8
 8007818:	4770      	bx	lr
 800781a:	4610      	mov	r0, r2
 800781c:	e7fb      	b.n	8007816 <__ascii_mbtowc+0x16>
 800781e:	f06f 0001 	mvn.w	r0, #1
 8007822:	e7f8      	b.n	8007816 <__ascii_mbtowc+0x16>

08007824 <_realloc_r>:
 8007824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007828:	4680      	mov	r8, r0
 800782a:	4614      	mov	r4, r2
 800782c:	460e      	mov	r6, r1
 800782e:	b921      	cbnz	r1, 800783a <_realloc_r+0x16>
 8007830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	4611      	mov	r1, r2
 8007836:	f7ff b969 	b.w	8006b0c <_malloc_r>
 800783a:	b92a      	cbnz	r2, 8007848 <_realloc_r+0x24>
 800783c:	f7ff f8f2 	bl	8006a24 <_free_r>
 8007840:	4625      	mov	r5, r4
 8007842:	4628      	mov	r0, r5
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	f000 f841 	bl	80078ce <_malloc_usable_size_r>
 800784c:	4284      	cmp	r4, r0
 800784e:	4607      	mov	r7, r0
 8007850:	d802      	bhi.n	8007858 <_realloc_r+0x34>
 8007852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007856:	d812      	bhi.n	800787e <_realloc_r+0x5a>
 8007858:	4621      	mov	r1, r4
 800785a:	4640      	mov	r0, r8
 800785c:	f7ff f956 	bl	8006b0c <_malloc_r>
 8007860:	4605      	mov	r5, r0
 8007862:	2800      	cmp	r0, #0
 8007864:	d0ed      	beq.n	8007842 <_realloc_r+0x1e>
 8007866:	42bc      	cmp	r4, r7
 8007868:	4622      	mov	r2, r4
 800786a:	4631      	mov	r1, r6
 800786c:	bf28      	it	cs
 800786e:	463a      	movcs	r2, r7
 8007870:	f7ff ff84 	bl	800777c <memcpy>
 8007874:	4631      	mov	r1, r6
 8007876:	4640      	mov	r0, r8
 8007878:	f7ff f8d4 	bl	8006a24 <_free_r>
 800787c:	e7e1      	b.n	8007842 <_realloc_r+0x1e>
 800787e:	4635      	mov	r5, r6
 8007880:	e7df      	b.n	8007842 <_realloc_r+0x1e>

08007882 <__ascii_wctomb>:
 8007882:	b149      	cbz	r1, 8007898 <__ascii_wctomb+0x16>
 8007884:	2aff      	cmp	r2, #255	; 0xff
 8007886:	bf85      	ittet	hi
 8007888:	238a      	movhi	r3, #138	; 0x8a
 800788a:	6003      	strhi	r3, [r0, #0]
 800788c:	700a      	strbls	r2, [r1, #0]
 800788e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007892:	bf98      	it	ls
 8007894:	2001      	movls	r0, #1
 8007896:	4770      	bx	lr
 8007898:	4608      	mov	r0, r1
 800789a:	4770      	bx	lr

0800789c <fiprintf>:
 800789c:	b40e      	push	{r1, r2, r3}
 800789e:	b503      	push	{r0, r1, lr}
 80078a0:	4601      	mov	r1, r0
 80078a2:	ab03      	add	r3, sp, #12
 80078a4:	4805      	ldr	r0, [pc, #20]	; (80078bc <fiprintf+0x20>)
 80078a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	f000 f83f 	bl	8007930 <_vfiprintf_r>
 80078b2:	b002      	add	sp, #8
 80078b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b8:	b003      	add	sp, #12
 80078ba:	4770      	bx	lr
 80078bc:	20000068 	.word	0x20000068

080078c0 <abort>:
 80078c0:	b508      	push	{r3, lr}
 80078c2:	2006      	movs	r0, #6
 80078c4:	f000 fa0c 	bl	8007ce0 <raise>
 80078c8:	2001      	movs	r0, #1
 80078ca:	f7f9 fe3b 	bl	8001544 <_exit>

080078ce <_malloc_usable_size_r>:
 80078ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d2:	1f18      	subs	r0, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bfbc      	itt	lt
 80078d8:	580b      	ldrlt	r3, [r1, r0]
 80078da:	18c0      	addlt	r0, r0, r3
 80078dc:	4770      	bx	lr

080078de <__sfputc_r>:
 80078de:	6893      	ldr	r3, [r2, #8]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	b410      	push	{r4}
 80078e6:	6093      	str	r3, [r2, #8]
 80078e8:	da08      	bge.n	80078fc <__sfputc_r+0x1e>
 80078ea:	6994      	ldr	r4, [r2, #24]
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	db01      	blt.n	80078f4 <__sfputc_r+0x16>
 80078f0:	290a      	cmp	r1, #10
 80078f2:	d103      	bne.n	80078fc <__sfputc_r+0x1e>
 80078f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f8:	f000 b934 	b.w	8007b64 <__swbuf_r>
 80078fc:	6813      	ldr	r3, [r2, #0]
 80078fe:	1c58      	adds	r0, r3, #1
 8007900:	6010      	str	r0, [r2, #0]
 8007902:	7019      	strb	r1, [r3, #0]
 8007904:	4608      	mov	r0, r1
 8007906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800790a:	4770      	bx	lr

0800790c <__sfputs_r>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	4606      	mov	r6, r0
 8007910:	460f      	mov	r7, r1
 8007912:	4614      	mov	r4, r2
 8007914:	18d5      	adds	r5, r2, r3
 8007916:	42ac      	cmp	r4, r5
 8007918:	d101      	bne.n	800791e <__sfputs_r+0x12>
 800791a:	2000      	movs	r0, #0
 800791c:	e007      	b.n	800792e <__sfputs_r+0x22>
 800791e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007922:	463a      	mov	r2, r7
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ffda 	bl	80078de <__sfputc_r>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d1f3      	bne.n	8007916 <__sfputs_r+0xa>
 800792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007930 <_vfiprintf_r>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	460d      	mov	r5, r1
 8007936:	b09d      	sub	sp, #116	; 0x74
 8007938:	4614      	mov	r4, r2
 800793a:	4698      	mov	r8, r3
 800793c:	4606      	mov	r6, r0
 800793e:	b118      	cbz	r0, 8007948 <_vfiprintf_r+0x18>
 8007940:	6a03      	ldr	r3, [r0, #32]
 8007942:	b90b      	cbnz	r3, 8007948 <_vfiprintf_r+0x18>
 8007944:	f7fe f8d8 	bl	8005af8 <__sinit>
 8007948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800794a:	07d9      	lsls	r1, r3, #31
 800794c:	d405      	bmi.n	800795a <_vfiprintf_r+0x2a>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	059a      	lsls	r2, r3, #22
 8007952:	d402      	bmi.n	800795a <_vfiprintf_r+0x2a>
 8007954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007956:	f7fe f9e6 	bl	8005d26 <__retarget_lock_acquire_recursive>
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	071b      	lsls	r3, r3, #28
 800795e:	d501      	bpl.n	8007964 <_vfiprintf_r+0x34>
 8007960:	692b      	ldr	r3, [r5, #16]
 8007962:	b99b      	cbnz	r3, 800798c <_vfiprintf_r+0x5c>
 8007964:	4629      	mov	r1, r5
 8007966:	4630      	mov	r0, r6
 8007968:	f000 f93a 	bl	8007be0 <__swsetup_r>
 800796c:	b170      	cbz	r0, 800798c <_vfiprintf_r+0x5c>
 800796e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007970:	07dc      	lsls	r4, r3, #31
 8007972:	d504      	bpl.n	800797e <_vfiprintf_r+0x4e>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	b01d      	add	sp, #116	; 0x74
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	0598      	lsls	r0, r3, #22
 8007982:	d4f7      	bmi.n	8007974 <_vfiprintf_r+0x44>
 8007984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007986:	f7fe f9cf 	bl	8005d28 <__retarget_lock_release_recursive>
 800798a:	e7f3      	b.n	8007974 <_vfiprintf_r+0x44>
 800798c:	2300      	movs	r3, #0
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	2320      	movs	r3, #32
 8007992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007996:	f8cd 800c 	str.w	r8, [sp, #12]
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007b50 <_vfiprintf_r+0x220>
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a4:	f04f 0901 	mov.w	r9, #1
 80079a8:	4623      	mov	r3, r4
 80079aa:	469a      	mov	sl, r3
 80079ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b0:	b10a      	cbz	r2, 80079b6 <_vfiprintf_r+0x86>
 80079b2:	2a25      	cmp	r2, #37	; 0x25
 80079b4:	d1f9      	bne.n	80079aa <_vfiprintf_r+0x7a>
 80079b6:	ebba 0b04 	subs.w	fp, sl, r4
 80079ba:	d00b      	beq.n	80079d4 <_vfiprintf_r+0xa4>
 80079bc:	465b      	mov	r3, fp
 80079be:	4622      	mov	r2, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ffa2 	bl	800790c <__sfputs_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f000 80a9 	beq.w	8007b20 <_vfiprintf_r+0x1f0>
 80079ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d0:	445a      	add	r2, fp
 80079d2:	9209      	str	r2, [sp, #36]	; 0x24
 80079d4:	f89a 3000 	ldrb.w	r3, [sl]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a1 	beq.w	8007b20 <_vfiprintf_r+0x1f0>
 80079de:	2300      	movs	r3, #0
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e8:	f10a 0a01 	add.w	sl, sl, #1
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f4:	931a      	str	r3, [sp, #104]	; 0x68
 80079f6:	4654      	mov	r4, sl
 80079f8:	2205      	movs	r2, #5
 80079fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fe:	4854      	ldr	r0, [pc, #336]	; (8007b50 <_vfiprintf_r+0x220>)
 8007a00:	f7f8 fbe6 	bl	80001d0 <memchr>
 8007a04:	9a04      	ldr	r2, [sp, #16]
 8007a06:	b9d8      	cbnz	r0, 8007a40 <_vfiprintf_r+0x110>
 8007a08:	06d1      	lsls	r1, r2, #27
 8007a0a:	bf44      	itt	mi
 8007a0c:	2320      	movmi	r3, #32
 8007a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a12:	0713      	lsls	r3, r2, #28
 8007a14:	bf44      	itt	mi
 8007a16:	232b      	movmi	r3, #43	; 0x2b
 8007a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a20:	2b2a      	cmp	r3, #42	; 0x2a
 8007a22:	d015      	beq.n	8007a50 <_vfiprintf_r+0x120>
 8007a24:	9a07      	ldr	r2, [sp, #28]
 8007a26:	4654      	mov	r4, sl
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f04f 0c0a 	mov.w	ip, #10
 8007a2e:	4621      	mov	r1, r4
 8007a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a34:	3b30      	subs	r3, #48	; 0x30
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d94d      	bls.n	8007ad6 <_vfiprintf_r+0x1a6>
 8007a3a:	b1b0      	cbz	r0, 8007a6a <_vfiprintf_r+0x13a>
 8007a3c:	9207      	str	r2, [sp, #28]
 8007a3e:	e014      	b.n	8007a6a <_vfiprintf_r+0x13a>
 8007a40:	eba0 0308 	sub.w	r3, r0, r8
 8007a44:	fa09 f303 	lsl.w	r3, r9, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	46a2      	mov	sl, r4
 8007a4e:	e7d2      	b.n	80079f6 <_vfiprintf_r+0xc6>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	1d19      	adds	r1, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	9103      	str	r1, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bfbb      	ittet	lt
 8007a5c:	425b      	neglt	r3, r3
 8007a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a62:	9307      	strge	r3, [sp, #28]
 8007a64:	9307      	strlt	r3, [sp, #28]
 8007a66:	bfb8      	it	lt
 8007a68:	9204      	strlt	r2, [sp, #16]
 8007a6a:	7823      	ldrb	r3, [r4, #0]
 8007a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6e:	d10c      	bne.n	8007a8a <_vfiprintf_r+0x15a>
 8007a70:	7863      	ldrb	r3, [r4, #1]
 8007a72:	2b2a      	cmp	r3, #42	; 0x2a
 8007a74:	d134      	bne.n	8007ae0 <_vfiprintf_r+0x1b0>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d1a      	adds	r2, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9203      	str	r2, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfb8      	it	lt
 8007a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a86:	3402      	adds	r4, #2
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007b60 <_vfiprintf_r+0x230>
 8007a8e:	7821      	ldrb	r1, [r4, #0]
 8007a90:	2203      	movs	r2, #3
 8007a92:	4650      	mov	r0, sl
 8007a94:	f7f8 fb9c 	bl	80001d0 <memchr>
 8007a98:	b138      	cbz	r0, 8007aaa <_vfiprintf_r+0x17a>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	eba0 000a 	sub.w	r0, r0, sl
 8007aa0:	2240      	movs	r2, #64	; 0x40
 8007aa2:	4082      	lsls	r2, r0
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	3401      	adds	r4, #1
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aae:	4829      	ldr	r0, [pc, #164]	; (8007b54 <_vfiprintf_r+0x224>)
 8007ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab4:	2206      	movs	r2, #6
 8007ab6:	f7f8 fb8b 	bl	80001d0 <memchr>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d03f      	beq.n	8007b3e <_vfiprintf_r+0x20e>
 8007abe:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <_vfiprintf_r+0x228>)
 8007ac0:	bb1b      	cbnz	r3, 8007b0a <_vfiprintf_r+0x1da>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	3307      	adds	r3, #7
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	3308      	adds	r3, #8
 8007acc:	9303      	str	r3, [sp, #12]
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	443b      	add	r3, r7
 8007ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad4:	e768      	b.n	80079a8 <_vfiprintf_r+0x78>
 8007ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ada:	460c      	mov	r4, r1
 8007adc:	2001      	movs	r0, #1
 8007ade:	e7a6      	b.n	8007a2e <_vfiprintf_r+0xfe>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	3401      	adds	r4, #1
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f04f 0c0a 	mov.w	ip, #10
 8007aec:	4620      	mov	r0, r4
 8007aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af2:	3a30      	subs	r2, #48	; 0x30
 8007af4:	2a09      	cmp	r2, #9
 8007af6:	d903      	bls.n	8007b00 <_vfiprintf_r+0x1d0>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0c6      	beq.n	8007a8a <_vfiprintf_r+0x15a>
 8007afc:	9105      	str	r1, [sp, #20]
 8007afe:	e7c4      	b.n	8007a8a <_vfiprintf_r+0x15a>
 8007b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b04:	4604      	mov	r4, r0
 8007b06:	2301      	movs	r3, #1
 8007b08:	e7f0      	b.n	8007aec <_vfiprintf_r+0x1bc>
 8007b0a:	ab03      	add	r3, sp, #12
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	462a      	mov	r2, r5
 8007b10:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <_vfiprintf_r+0x22c>)
 8007b12:	a904      	add	r1, sp, #16
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7fd fb9d 	bl	8005254 <_printf_float>
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	1c78      	adds	r0, r7, #1
 8007b1e:	d1d6      	bne.n	8007ace <_vfiprintf_r+0x19e>
 8007b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b22:	07d9      	lsls	r1, r3, #31
 8007b24:	d405      	bmi.n	8007b32 <_vfiprintf_r+0x202>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	059a      	lsls	r2, r3, #22
 8007b2a:	d402      	bmi.n	8007b32 <_vfiprintf_r+0x202>
 8007b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2e:	f7fe f8fb 	bl	8005d28 <__retarget_lock_release_recursive>
 8007b32:	89ab      	ldrh	r3, [r5, #12]
 8007b34:	065b      	lsls	r3, r3, #25
 8007b36:	f53f af1d 	bmi.w	8007974 <_vfiprintf_r+0x44>
 8007b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b3c:	e71c      	b.n	8007978 <_vfiprintf_r+0x48>
 8007b3e:	ab03      	add	r3, sp, #12
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	462a      	mov	r2, r5
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <_vfiprintf_r+0x22c>)
 8007b46:	a904      	add	r1, sp, #16
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7fd fe27 	bl	800579c <_printf_i>
 8007b4e:	e7e4      	b.n	8007b1a <_vfiprintf_r+0x1ea>
 8007b50:	080080ec 	.word	0x080080ec
 8007b54:	080080f6 	.word	0x080080f6
 8007b58:	08005255 	.word	0x08005255
 8007b5c:	0800790d 	.word	0x0800790d
 8007b60:	080080f2 	.word	0x080080f2

08007b64 <__swbuf_r>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	460e      	mov	r6, r1
 8007b68:	4614      	mov	r4, r2
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	b118      	cbz	r0, 8007b76 <__swbuf_r+0x12>
 8007b6e:	6a03      	ldr	r3, [r0, #32]
 8007b70:	b90b      	cbnz	r3, 8007b76 <__swbuf_r+0x12>
 8007b72:	f7fd ffc1 	bl	8005af8 <__sinit>
 8007b76:	69a3      	ldr	r3, [r4, #24]
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	071a      	lsls	r2, r3, #28
 8007b7e:	d525      	bpl.n	8007bcc <__swbuf_r+0x68>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	b31b      	cbz	r3, 8007bcc <__swbuf_r+0x68>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	6922      	ldr	r2, [r4, #16]
 8007b88:	1a98      	subs	r0, r3, r2
 8007b8a:	6963      	ldr	r3, [r4, #20]
 8007b8c:	b2f6      	uxtb	r6, r6
 8007b8e:	4283      	cmp	r3, r0
 8007b90:	4637      	mov	r7, r6
 8007b92:	dc04      	bgt.n	8007b9e <__swbuf_r+0x3a>
 8007b94:	4621      	mov	r1, r4
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7ff fd9e 	bl	80076d8 <_fflush_r>
 8007b9c:	b9e0      	cbnz	r0, 8007bd8 <__swbuf_r+0x74>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	60a3      	str	r3, [r4, #8]
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	701e      	strb	r6, [r3, #0]
 8007bac:	6962      	ldr	r2, [r4, #20]
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d004      	beq.n	8007bbe <__swbuf_r+0x5a>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	07db      	lsls	r3, r3, #31
 8007bb8:	d506      	bpl.n	8007bc8 <__swbuf_r+0x64>
 8007bba:	2e0a      	cmp	r6, #10
 8007bbc:	d104      	bne.n	8007bc8 <__swbuf_r+0x64>
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f7ff fd89 	bl	80076d8 <_fflush_r>
 8007bc6:	b938      	cbnz	r0, 8007bd8 <__swbuf_r+0x74>
 8007bc8:	4638      	mov	r0, r7
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 f806 	bl	8007be0 <__swsetup_r>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d0d5      	beq.n	8007b84 <__swbuf_r+0x20>
 8007bd8:	f04f 37ff 	mov.w	r7, #4294967295
 8007bdc:	e7f4      	b.n	8007bc8 <__swbuf_r+0x64>
	...

08007be0 <__swsetup_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4b2a      	ldr	r3, [pc, #168]	; (8007c8c <__swsetup_r+0xac>)
 8007be4:	4605      	mov	r5, r0
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	460c      	mov	r4, r1
 8007bea:	b118      	cbz	r0, 8007bf4 <__swsetup_r+0x14>
 8007bec:	6a03      	ldr	r3, [r0, #32]
 8007bee:	b90b      	cbnz	r3, 8007bf4 <__swsetup_r+0x14>
 8007bf0:	f7fd ff82 	bl	8005af8 <__sinit>
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bfa:	0718      	lsls	r0, r3, #28
 8007bfc:	d422      	bmi.n	8007c44 <__swsetup_r+0x64>
 8007bfe:	06d9      	lsls	r1, r3, #27
 8007c00:	d407      	bmi.n	8007c12 <__swsetup_r+0x32>
 8007c02:	2309      	movs	r3, #9
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e034      	b.n	8007c7c <__swsetup_r+0x9c>
 8007c12:	0758      	lsls	r0, r3, #29
 8007c14:	d512      	bpl.n	8007c3c <__swsetup_r+0x5c>
 8007c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c18:	b141      	cbz	r1, 8007c2c <__swsetup_r+0x4c>
 8007c1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	d002      	beq.n	8007c28 <__swsetup_r+0x48>
 8007c22:	4628      	mov	r0, r5
 8007c24:	f7fe fefe 	bl	8006a24 <_free_r>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6363      	str	r3, [r4, #52]	; 0x34
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	2300      	movs	r3, #0
 8007c36:	6063      	str	r3, [r4, #4]
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	f043 0308 	orr.w	r3, r3, #8
 8007c42:	81a3      	strh	r3, [r4, #12]
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	b94b      	cbnz	r3, 8007c5c <__swsetup_r+0x7c>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c52:	d003      	beq.n	8007c5c <__swsetup_r+0x7c>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4628      	mov	r0, r5
 8007c58:	f000 f884 	bl	8007d64 <__smakebuf_r>
 8007c5c:	89a0      	ldrh	r0, [r4, #12]
 8007c5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c62:	f010 0301 	ands.w	r3, r0, #1
 8007c66:	d00a      	beq.n	8007c7e <__swsetup_r+0x9e>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	6963      	ldr	r3, [r4, #20]
 8007c6e:	425b      	negs	r3, r3
 8007c70:	61a3      	str	r3, [r4, #24]
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	b943      	cbnz	r3, 8007c88 <__swsetup_r+0xa8>
 8007c76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c7a:	d1c4      	bne.n	8007c06 <__swsetup_r+0x26>
 8007c7c:	bd38      	pop	{r3, r4, r5, pc}
 8007c7e:	0781      	lsls	r1, r0, #30
 8007c80:	bf58      	it	pl
 8007c82:	6963      	ldrpl	r3, [r4, #20]
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	e7f4      	b.n	8007c72 <__swsetup_r+0x92>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e7f7      	b.n	8007c7c <__swsetup_r+0x9c>
 8007c8c:	20000068 	.word	0x20000068

08007c90 <_raise_r>:
 8007c90:	291f      	cmp	r1, #31
 8007c92:	b538      	push	{r3, r4, r5, lr}
 8007c94:	4604      	mov	r4, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	d904      	bls.n	8007ca4 <_raise_r+0x14>
 8007c9a:	2316      	movs	r3, #22
 8007c9c:	6003      	str	r3, [r0, #0]
 8007c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007ca6:	b112      	cbz	r2, 8007cae <_raise_r+0x1e>
 8007ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cac:	b94b      	cbnz	r3, 8007cc2 <_raise_r+0x32>
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 f830 	bl	8007d14 <_getpid_r>
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	4620      	mov	r0, r4
 8007cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cbe:	f000 b817 	b.w	8007cf0 <_kill_r>
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d00a      	beq.n	8007cdc <_raise_r+0x4c>
 8007cc6:	1c59      	adds	r1, r3, #1
 8007cc8:	d103      	bne.n	8007cd2 <_raise_r+0x42>
 8007cca:	2316      	movs	r3, #22
 8007ccc:	6003      	str	r3, [r0, #0]
 8007cce:	2001      	movs	r0, #1
 8007cd0:	e7e7      	b.n	8007ca2 <_raise_r+0x12>
 8007cd2:	2400      	movs	r4, #0
 8007cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cd8:	4628      	mov	r0, r5
 8007cda:	4798      	blx	r3
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e7e0      	b.n	8007ca2 <_raise_r+0x12>

08007ce0 <raise>:
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <raise+0xc>)
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f7ff bfd3 	b.w	8007c90 <_raise_r>
 8007cea:	bf00      	nop
 8007cec:	20000068 	.word	0x20000068

08007cf0 <_kill_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	; (8007d10 <_kill_r+0x20>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	602b      	str	r3, [r5, #0]
 8007cfe:	f7f9 fc11 	bl	8001524 <_kill>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	d102      	bne.n	8007d0c <_kill_r+0x1c>
 8007d06:	682b      	ldr	r3, [r5, #0]
 8007d08:	b103      	cbz	r3, 8007d0c <_kill_r+0x1c>
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	bd38      	pop	{r3, r4, r5, pc}
 8007d0e:	bf00      	nop
 8007d10:	200004fc 	.word	0x200004fc

08007d14 <_getpid_r>:
 8007d14:	f7f9 bbfe 	b.w	8001514 <_getpid>

08007d18 <__swhatbuf_r>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d20:	2900      	cmp	r1, #0
 8007d22:	b096      	sub	sp, #88	; 0x58
 8007d24:	4615      	mov	r5, r2
 8007d26:	461e      	mov	r6, r3
 8007d28:	da0d      	bge.n	8007d46 <__swhatbuf_r+0x2e>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d30:	f04f 0100 	mov.w	r1, #0
 8007d34:	bf0c      	ite	eq
 8007d36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d3a:	2340      	movne	r3, #64	; 0x40
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	6031      	str	r1, [r6, #0]
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	b016      	add	sp, #88	; 0x58
 8007d44:	bd70      	pop	{r4, r5, r6, pc}
 8007d46:	466a      	mov	r2, sp
 8007d48:	f000 f848 	bl	8007ddc <_fstat_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	dbec      	blt.n	8007d2a <__swhatbuf_r+0x12>
 8007d50:	9901      	ldr	r1, [sp, #4]
 8007d52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d5a:	4259      	negs	r1, r3
 8007d5c:	4159      	adcs	r1, r3
 8007d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d62:	e7eb      	b.n	8007d3c <__swhatbuf_r+0x24>

08007d64 <__smakebuf_r>:
 8007d64:	898b      	ldrh	r3, [r1, #12]
 8007d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d68:	079d      	lsls	r5, r3, #30
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	d507      	bpl.n	8007d80 <__smakebuf_r+0x1c>
 8007d70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	6123      	str	r3, [r4, #16]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	6163      	str	r3, [r4, #20]
 8007d7c:	b002      	add	sp, #8
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	ab01      	add	r3, sp, #4
 8007d82:	466a      	mov	r2, sp
 8007d84:	f7ff ffc8 	bl	8007d18 <__swhatbuf_r>
 8007d88:	9900      	ldr	r1, [sp, #0]
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f7fe febd 	bl	8006b0c <_malloc_r>
 8007d92:	b948      	cbnz	r0, 8007da8 <__smakebuf_r+0x44>
 8007d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d98:	059a      	lsls	r2, r3, #22
 8007d9a:	d4ef      	bmi.n	8007d7c <__smakebuf_r+0x18>
 8007d9c:	f023 0303 	bic.w	r3, r3, #3
 8007da0:	f043 0302 	orr.w	r3, r3, #2
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	e7e3      	b.n	8007d70 <__smakebuf_r+0xc>
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	6020      	str	r0, [r4, #0]
 8007dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	9b00      	ldr	r3, [sp, #0]
 8007db4:	6163      	str	r3, [r4, #20]
 8007db6:	9b01      	ldr	r3, [sp, #4]
 8007db8:	6120      	str	r0, [r4, #16]
 8007dba:	b15b      	cbz	r3, 8007dd4 <__smakebuf_r+0x70>
 8007dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f000 f81d 	bl	8007e00 <_isatty_r>
 8007dc6:	b128      	cbz	r0, 8007dd4 <__smakebuf_r+0x70>
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	f023 0303 	bic.w	r3, r3, #3
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	431d      	orrs	r5, r3
 8007dd8:	81a5      	strh	r5, [r4, #12]
 8007dda:	e7cf      	b.n	8007d7c <__smakebuf_r+0x18>

08007ddc <_fstat_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d07      	ldr	r5, [pc, #28]	; (8007dfc <_fstat_r+0x20>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	4611      	mov	r1, r2
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	f7f9 fbfa 	bl	80015e2 <_fstat>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	d102      	bne.n	8007df8 <_fstat_r+0x1c>
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	b103      	cbz	r3, 8007df8 <_fstat_r+0x1c>
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	bd38      	pop	{r3, r4, r5, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200004fc 	.word	0x200004fc

08007e00 <_isatty_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d06      	ldr	r5, [pc, #24]	; (8007e1c <_isatty_r+0x1c>)
 8007e04:	2300      	movs	r3, #0
 8007e06:	4604      	mov	r4, r0
 8007e08:	4608      	mov	r0, r1
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	f7f9 fbf9 	bl	8001602 <_isatty>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d102      	bne.n	8007e1a <_isatty_r+0x1a>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	b103      	cbz	r3, 8007e1a <_isatty_r+0x1a>
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	200004fc 	.word	0x200004fc

08007e20 <_init>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr

08007e2c <_fini>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr
